<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexNimrod.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// Nimrod lexer</comment>
<comment type="line" pos:line="3" pos:column="1">// (c) 2009 Andreas Rumpf</comment>
<comment type="block" format="doxygen" pos:line="4" pos:column="1">/** @file LexNimrod.cxx
 ** Lexer for Nimrod.
 **/</comment>
<comment type="line" pos:line="7" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef</cpp:directive> <name pos:line="28" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="29" pos:column="1">using namespace <name pos:line="29" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="32" pos:column="1">static</specifier> <specifier pos:line="32" pos:column="8">inline</specifier> <name pos:line="32" pos:column="15">bool</name></type> <name pos:line="32" pos:column="20">IsAWordChar</name><parameter_list pos:line="32" pos:column="31">(<param><decl><type><name pos:line="32" pos:column="32">int</name></type> <name pos:line="32" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="40">{
	<return pos:line="33" pos:column="9">return <expr><op:operator pos:line="33" pos:column="16">(</op:operator><name pos:line="33" pos:column="17">ch</name> <op:operator pos:line="33" pos:column="20">&gt;=</op:operator> <lit:literal type="number" pos:line="33" pos:column="23">0x80</lit:literal><op:operator pos:line="33" pos:column="27">)</op:operator> <op:operator pos:line="33" pos:column="29">||</op:operator> <call><name pos:line="33" pos:column="32">isalnum</name><argument_list pos:line="33" pos:column="39">(<argument><expr><name pos:line="33" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="33" pos:column="44">||</op:operator> <name pos:line="33" pos:column="47">ch</name> <op:operator pos:line="33" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="53">'_'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="36" pos:column="1">static</specifier> <name pos:line="36" pos:column="8">int</name></type> <name pos:line="36" pos:column="12">tillEndOfTripleQuote</name><parameter_list pos:line="36" pos:column="32">(<param><decl><type><name pos:line="36" pos:column="33">Accessor</name> <type:modifier pos:line="36" pos:column="42">&amp;</type:modifier></type><name pos:line="36" pos:column="43">styler</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="51">int</name></type> <name pos:line="36" pos:column="55">pos</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="60">int</name></type> <name pos:line="36" pos:column="64">max</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="69">{
  <comment type="block" pos:line="37" pos:column="3">/* search for """ */</comment>
  <for pos:line="38" pos:column="3">for (<init pos:line="38" pos:column="8">;</init><condition pos:line="38" pos:column="9">;</condition><incr/>) <block pos:line="38" pos:column="12">{
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name><name pos:line="39" pos:column="9">styler</name><op:operator pos:line="39" pos:column="15">.</op:operator><name pos:line="39" pos:column="16">SafeGetCharAt</name></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="39" pos:column="35">'\0'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="39" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="44">'\0'</lit:literal></expr>)</condition><then pos:line="39" pos:column="49"> <return pos:line="39" pos:column="50">return <expr><name pos:line="39" pos:column="57">pos</name></expr>;</return></then></if>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">pos</name> <op:operator pos:line="40" pos:column="13">&gt;=</op:operator> <name pos:line="40" pos:column="16">max</name></expr>)</condition><then pos:line="40" pos:column="20"> <return pos:line="40" pos:column="21">return <expr><name pos:line="40" pos:column="28">pos</name></expr>;</return></then></if>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name><name pos:line="41" pos:column="9">styler</name><op:operator pos:line="41" pos:column="15">.</op:operator><name pos:line="41" pos:column="16">Match</name></name><argument_list pos:line="41" pos:column="21">(<argument><expr><name pos:line="41" pos:column="22">pos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="41" pos:column="27">"\"\"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="41" pos:column="37"> <block pos:line="41" pos:column="38">{
      <return pos:line="42" pos:column="7">return <expr><name pos:line="42" pos:column="14">pos</name> <op:operator pos:line="42" pos:column="18">+</op:operator> <lit:literal type="number" pos:line="42" pos:column="20">2</lit:literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="44" pos:column="5">pos</name><op:operator pos:line="44" pos:column="8">++</op:operator></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<cpp:define pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="48" pos:column="9">CR</name></cpp:macro> <cpp:value pos:line="48" pos:column="12">13</cpp:value></cpp:define> <comment type="block" pos:line="48" pos:column="15">/* use both because Scite allows changing the line ending */</comment>
<cpp:define pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="49" pos:column="9">LF</name></cpp:macro> <cpp:value pos:line="49" pos:column="12">10</cpp:value></cpp:define>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <name pos:line="51" pos:column="8">bool</name> <specifier pos:line="51" pos:column="13">inline</specifier></type> <name pos:line="51" pos:column="20">isNewLine</name><parameter_list pos:line="51" pos:column="29">(<param><decl><type><name pos:line="51" pos:column="30">int</name></type> <name pos:line="51" pos:column="34">ch</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="38">{
  <return pos:line="52" pos:column="3">return <expr><name pos:line="52" pos:column="10">ch</name> <op:operator pos:line="52" pos:column="13">==</op:operator> <name pos:line="52" pos:column="16">CR</name> <op:operator pos:line="52" pos:column="19">||</op:operator> <name pos:line="52" pos:column="22">ch</name> <op:operator pos:line="52" pos:column="25">==</op:operator> <name pos:line="52" pos:column="28">LF</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="55" pos:column="1">static</specifier> <name pos:line="55" pos:column="8">int</name></type> <name pos:line="55" pos:column="12">scanString</name><parameter_list pos:line="55" pos:column="22">(<param><decl><type><name pos:line="55" pos:column="23">Accessor</name> <type:modifier pos:line="55" pos:column="32">&amp;</type:modifier></type><name pos:line="55" pos:column="33">styler</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="41">int</name></type> <name pos:line="55" pos:column="45">pos</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="50">int</name></type> <name pos:line="55" pos:column="54">max</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="59">bool</name></type> <name pos:line="55" pos:column="64">rawMode</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="73">{
  <for pos:line="56" pos:column="3">for (<init pos:line="56" pos:column="8">;</init><condition pos:line="56" pos:column="9">;</condition><incr/>) <block pos:line="56" pos:column="12">{
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">pos</name> <op:operator pos:line="57" pos:column="13">&gt;=</op:operator> <name pos:line="57" pos:column="16">max</name></expr>)</condition><then pos:line="57" pos:column="20"> <return pos:line="57" pos:column="21">return <expr><name pos:line="57" pos:column="28">pos</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name pos:line="58" pos:column="5">char</name></type> <name pos:line="58" pos:column="10">ch</name> <init pos:line="58" pos:column="13">= <expr><call><name><name pos:line="58" pos:column="15">styler</name><op:operator pos:line="58" pos:column="21">.</op:operator><name pos:line="58" pos:column="22">SafeGetCharAt</name></name><argument_list pos:line="58" pos:column="35">(<argument><expr><name pos:line="58" pos:column="36">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="58" pos:column="41">'\0'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">ch</name> <op:operator pos:line="59" pos:column="12">==</op:operator> <name pos:line="59" pos:column="15">CR</name> <op:operator pos:line="59" pos:column="18">||</op:operator> <name pos:line="59" pos:column="21">ch</name> <op:operator pos:line="59" pos:column="24">==</op:operator> <name pos:line="59" pos:column="27">LF</name> <op:operator pos:line="59" pos:column="30">||</op:operator> <name pos:line="59" pos:column="33">ch</name> <op:operator pos:line="59" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="39">'\0'</lit:literal></expr>)</condition><then pos:line="59" pos:column="44"> <return pos:line="59" pos:column="45">return <expr><name pos:line="59" pos:column="52">pos</name></expr>;</return></then></if>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">ch</name> <op:operator pos:line="60" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="15">'"'</lit:literal></expr>)</condition><then pos:line="60" pos:column="19"> <return pos:line="60" pos:column="20">return <expr><name pos:line="60" pos:column="27">pos</name></expr>;</return></then></if>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">ch</name> <op:operator pos:line="61" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="15">'\\'</lit:literal> <op:operator pos:line="61" pos:column="20">&amp;&amp;</op:operator> <op:operator pos:line="61" pos:column="23">!</op:operator><name pos:line="61" pos:column="24">rawMode</name></expr>)</condition><then pos:line="61" pos:column="32"> <block pos:line="61" pos:column="33">{
      <expr_stmt><expr><name pos:line="62" pos:column="7">pos</name> <op:operator pos:line="62" pos:column="11">+=</op:operator> <lit:literal type="number" pos:line="62" pos:column="14">2</lit:literal></expr>;</expr_stmt>
    }</block></then> <else pos:line="63" pos:column="7">else <block pos:line="63" pos:column="12">{
      <expr_stmt><expr><name pos:line="64" pos:column="7">pos</name><op:operator pos:line="64" pos:column="10">++</op:operator></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
}</block></function>

<function><type><specifier pos:line="69" pos:column="1">static</specifier> <name pos:line="69" pos:column="8">int</name></type> <name pos:line="69" pos:column="12">scanChar</name><parameter_list pos:line="69" pos:column="20">(<param><decl><type><name pos:line="69" pos:column="21">Accessor</name> <type:modifier pos:line="69" pos:column="30">&amp;</type:modifier></type><name pos:line="69" pos:column="31">styler</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="39">int</name></type> <name pos:line="69" pos:column="43">pos</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="48">int</name></type> <name pos:line="69" pos:column="52">max</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="57">{
  <for pos:line="70" pos:column="3">for (<init pos:line="70" pos:column="8">;</init><condition pos:line="70" pos:column="9">;</condition><incr/>) <block pos:line="70" pos:column="12">{
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">pos</name> <op:operator pos:line="71" pos:column="13">&gt;=</op:operator> <name pos:line="71" pos:column="16">max</name></expr>)</condition><then pos:line="71" pos:column="20"> <return pos:line="71" pos:column="21">return <expr><name pos:line="71" pos:column="28">pos</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name pos:line="72" pos:column="5">char</name></type> <name pos:line="72" pos:column="10">ch</name> <init pos:line="72" pos:column="13">= <expr><call><name><name pos:line="72" pos:column="15">styler</name><op:operator pos:line="72" pos:column="21">.</op:operator><name pos:line="72" pos:column="22">SafeGetCharAt</name></name><argument_list pos:line="72" pos:column="35">(<argument><expr><name pos:line="72" pos:column="36">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="72" pos:column="41">'\0'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">ch</name> <op:operator pos:line="73" pos:column="12">==</op:operator> <name pos:line="73" pos:column="15">CR</name> <op:operator pos:line="73" pos:column="18">||</op:operator> <name pos:line="73" pos:column="21">ch</name> <op:operator pos:line="73" pos:column="24">==</op:operator> <name pos:line="73" pos:column="27">LF</name> <op:operator pos:line="73" pos:column="30">||</op:operator> <name pos:line="73" pos:column="33">ch</name> <op:operator pos:line="73" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="39">'\0'</lit:literal></expr>)</condition><then pos:line="73" pos:column="44"> <return pos:line="73" pos:column="45">return <expr><name pos:line="73" pos:column="52">pos</name></expr>;</return></then></if>
    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><name pos:line="74" pos:column="9">ch</name> <op:operator pos:line="74" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="74" pos:column="15">'\''</lit:literal> <op:operator pos:line="74" pos:column="20">&amp;&amp;</op:operator> <op:operator pos:line="74" pos:column="23">!</op:operator><call><name pos:line="74" pos:column="24">isalnum</name><argument_list pos:line="74" pos:column="31">(<argument><expr><call><name><name pos:line="74" pos:column="32">styler</name><op:operator pos:line="74" pos:column="38">.</op:operator><name pos:line="74" pos:column="39">SafeGetCharAt</name></name><argument_list pos:line="74" pos:column="52">(<argument><expr><name pos:line="74" pos:column="53">pos</name><op:operator pos:line="74" pos:column="56">+</op:operator><lit:literal type="number" pos:line="74" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="74" pos:column="60">'\0'</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="74" pos:column="68">
      <return pos:line="75" pos:column="7">return <expr><name pos:line="75" pos:column="14">pos</name></expr>;</return></then></if>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">ch</name> <op:operator pos:line="76" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="76" pos:column="15">'\\'</lit:literal></expr>)</condition><then pos:line="76" pos:column="20"> <block pos:line="76" pos:column="21">{
      <expr_stmt><expr><name pos:line="77" pos:column="7">pos</name> <op:operator pos:line="77" pos:column="11">+=</op:operator> <lit:literal type="number" pos:line="77" pos:column="14">2</lit:literal></expr>;</expr_stmt>
    }</block></then> <else pos:line="78" pos:column="7">else <block pos:line="78" pos:column="12">{
      <expr_stmt><expr><name pos:line="79" pos:column="7">pos</name><op:operator pos:line="79" pos:column="10">++</op:operator></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
}</block></function>

<function><type><specifier pos:line="84" pos:column="1">static</specifier> <name pos:line="84" pos:column="8">int</name></type> <name pos:line="84" pos:column="12">scanIdent</name><parameter_list pos:line="84" pos:column="21">(<param><decl><type><name pos:line="84" pos:column="22">Accessor</name> <type:modifier pos:line="84" pos:column="31">&amp;</type:modifier></type><name pos:line="84" pos:column="32">styler</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="40">int</name></type> <name pos:line="84" pos:column="44">pos</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="49">WordList</name> <type:modifier pos:line="84" pos:column="58">&amp;</type:modifier></type><name pos:line="84" pos:column="59">keywords</name></decl></param>)</parameter_list> <block pos:line="84" pos:column="69">{
  <decl_stmt><decl><type><name pos:line="85" pos:column="3">char</name></type> <name><name pos:line="85" pos:column="8">buf</name><index pos:line="85" pos:column="11">[<expr><lit:literal type="number" pos:line="85" pos:column="12">100</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:line="85" pos:column="18">/* copy to lowercase and ignore underscores */</comment>
  <decl_stmt><decl><type><name pos:line="86" pos:column="3">int</name></type> <name pos:line="86" pos:column="7">i</name> <init pos:line="86" pos:column="9">= <expr><lit:literal type="number" pos:line="86" pos:column="11">0</lit:literal></expr></init></decl>;</decl_stmt>

  <for pos:line="88" pos:column="3">for (<init pos:line="88" pos:column="8">;</init><condition pos:line="88" pos:column="9">;</condition><incr/>) <block pos:line="88" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="89" pos:column="5">char</name></type> <name pos:line="89" pos:column="10">ch</name> <init pos:line="89" pos:column="13">= <expr><call><name><name pos:line="89" pos:column="15">styler</name><op:operator pos:line="89" pos:column="21">.</op:operator><name pos:line="89" pos:column="22">SafeGetCharAt</name></name><argument_list pos:line="89" pos:column="35">(<argument><expr><name pos:line="89" pos:column="36">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="89" pos:column="41">'\0'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><op:operator pos:line="90" pos:column="9">!</op:operator><call><name pos:line="90" pos:column="10">IsAWordChar</name><argument_list pos:line="90" pos:column="21">(<argument><expr><name pos:line="90" pos:column="22">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="26"> <break pos:line="90" pos:column="27">break;</break></then></if>
    <if pos:line="91" pos:column="5">if <condition pos:line="91" pos:column="8">(<expr><name pos:line="91" pos:column="9">ch</name> <op:operator pos:line="91" pos:column="12">!=</op:operator> <lit:literal type="char" pos:line="91" pos:column="15">'_'</lit:literal> <op:operator pos:line="91" pos:column="19">&amp;&amp;</op:operator> <name pos:line="91" pos:column="22">i</name> <op:operator pos:line="91" pos:column="24">&lt;</op:operator> <op:operator pos:line="91" pos:column="26">(</op:operator><op:operator pos:line="91" pos:column="27">(</op:operator><name pos:line="91" pos:column="28">int</name><op:operator pos:line="91" pos:column="31">)</op:operator><sizeof pos:line="91" pos:column="32">sizeof<argument_list pos:line="91" pos:column="38">(<argument><expr><name pos:line="91" pos:column="39">buf</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="91" pos:column="43">)</op:operator><op:operator pos:line="91" pos:column="44">-</op:operator><lit:literal type="number" pos:line="91" pos:column="45">1</lit:literal></expr>)</condition><then pos:line="91" pos:column="47"> <block pos:line="91" pos:column="48">{
      <expr_stmt><expr><name><name pos:line="92" pos:column="7">buf</name><index pos:line="92" pos:column="10">[<expr><name pos:line="92" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="92" pos:column="14">=</op:operator> <call><name><name pos:line="92" pos:column="16">static_cast</name><argument_list pos:line="92" pos:column="27">&lt;<argument><expr><name pos:line="92" pos:column="28">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="92" pos:column="33">(<argument><expr><call><name pos:line="92" pos:column="34">tolower</name><argument_list pos:line="92" pos:column="41">(<argument><expr><name pos:line="92" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="93" pos:column="7">i</name><op:operator pos:line="93" pos:column="8">++</op:operator></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="95" pos:column="5">pos</name><op:operator pos:line="95" pos:column="8">++</op:operator></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name><name pos:line="97" pos:column="3">buf</name><index pos:line="97" pos:column="6">[<expr><name pos:line="97" pos:column="7">i</name></expr>]</index></name> <op:operator pos:line="97" pos:column="10">=</op:operator> <lit:literal type="char" pos:line="97" pos:column="12">'\0'</lit:literal></expr>;</expr_stmt>
  <comment type="block" pos:line="98" pos:column="3">/* look for keyword */</comment>
  <if pos:line="99" pos:column="3">if <condition pos:line="99" pos:column="6">(<expr><call><name><name pos:line="99" pos:column="7">keywords</name><op:operator pos:line="99" pos:column="15">.</op:operator><name pos:line="99" pos:column="16">InList</name></name><argument_list pos:line="99" pos:column="22">(<argument><expr><name pos:line="99" pos:column="23">buf</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="99" pos:column="28"> <block pos:line="99" pos:column="29">{
    <expr_stmt><expr><call><name><name pos:line="100" pos:column="5">styler</name><op:operator pos:line="100" pos:column="11">.</op:operator><name pos:line="100" pos:column="12">ColourTo</name></name><argument_list pos:line="100" pos:column="20">(<argument><expr><name pos:line="100" pos:column="21">pos</name><op:operator pos:line="100" pos:column="24">-</op:operator><lit:literal type="number" pos:line="100" pos:column="25">1</lit:literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="28">SCE_P_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else pos:line="101" pos:column="5">else <block pos:line="101" pos:column="10">{
    <expr_stmt><expr><call><name><name pos:line="102" pos:column="5">styler</name><op:operator pos:line="102" pos:column="11">.</op:operator><name pos:line="102" pos:column="12">ColourTo</name></name><argument_list pos:line="102" pos:column="20">(<argument><expr><name pos:line="102" pos:column="21">pos</name><op:operator pos:line="102" pos:column="24">-</op:operator><lit:literal type="number" pos:line="102" pos:column="25">1</lit:literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="28">SCE_P_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <return pos:line="104" pos:column="3">return <expr><name pos:line="104" pos:column="10">pos</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="107" pos:column="1">static</specifier> <name pos:line="107" pos:column="8">int</name></type> <name pos:line="107" pos:column="12">scanNumber</name><parameter_list pos:line="107" pos:column="22">(<param><decl><type><name pos:line="107" pos:column="23">Accessor</name> <type:modifier pos:line="107" pos:column="32">&amp;</type:modifier></type><name pos:line="107" pos:column="33">styler</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="41">int</name></type> <name pos:line="107" pos:column="45">pos</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="50">{
  <decl_stmt><decl><type><name pos:line="108" pos:column="3">char</name></type> <name pos:line="108" pos:column="8">ch</name></decl><op:operator pos:line="108" pos:column="10">,</op:operator> <decl><type ref="prev"/><name pos:line="108" pos:column="12">ch2</name></decl>;</decl_stmt>
  <expr_stmt><expr><name pos:line="109" pos:column="3">ch</name> <op:operator pos:line="109" pos:column="6">=</op:operator> <call><name><name pos:line="109" pos:column="8">styler</name><op:operator pos:line="109" pos:column="14">.</op:operator><name pos:line="109" pos:column="15">SafeGetCharAt</name></name><argument_list pos:line="109" pos:column="28">(<argument><expr><name pos:line="109" pos:column="29">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="109" pos:column="34">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name pos:line="110" pos:column="3">ch2</name> <op:operator pos:line="110" pos:column="7">=</op:operator> <call><name><name pos:line="110" pos:column="9">styler</name><op:operator pos:line="110" pos:column="15">.</op:operator><name pos:line="110" pos:column="16">SafeGetCharAt</name></name><argument_list pos:line="110" pos:column="29">(<argument><expr><name pos:line="110" pos:column="30">pos</name><op:operator pos:line="110" pos:column="33">+</op:operator><lit:literal type="number" pos:line="110" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="110" pos:column="37">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if pos:line="111" pos:column="3">if <condition pos:line="111" pos:column="6">(<expr><name pos:line="111" pos:column="7">ch</name> <op:operator pos:line="111" pos:column="10">==</op:operator> <lit:literal type="char" pos:line="111" pos:column="13">'0'</lit:literal> <op:operator pos:line="111" pos:column="17">&amp;&amp;</op:operator> <op:operator pos:line="111" pos:column="20">(</op:operator><name pos:line="111" pos:column="21">ch2</name> <op:operator pos:line="111" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="111" pos:column="28">'b'</lit:literal> <op:operator pos:line="111" pos:column="32">||</op:operator> <name pos:line="111" pos:column="35">ch2</name> <op:operator pos:line="111" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="111" pos:column="42">'B'</lit:literal><op:operator pos:line="111" pos:column="45">)</op:operator></expr>)</condition><then pos:line="111" pos:column="47"> <block pos:line="111" pos:column="48">{
    <comment type="block" pos:line="112" pos:column="5">/* binary number: */</comment>
    <expr_stmt><expr><name pos:line="113" pos:column="5">pos</name> <op:operator pos:line="113" pos:column="9">+=</op:operator> <lit:literal type="number" pos:line="113" pos:column="12">2</lit:literal></expr>;</expr_stmt>
    <for pos:line="114" pos:column="5">for (<init pos:line="114" pos:column="10">;</init><condition pos:line="114" pos:column="11">;</condition><incr/>) <block pos:line="114" pos:column="14">{
      <expr_stmt><expr><name pos:line="115" pos:column="7">ch</name> <op:operator pos:line="115" pos:column="10">=</op:operator> <call><name><name pos:line="115" pos:column="12">styler</name><op:operator pos:line="115" pos:column="18">.</op:operator><name pos:line="115" pos:column="19">SafeGetCharAt</name></name><argument_list pos:line="115" pos:column="32">(<argument><expr><name pos:line="115" pos:column="33">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="115" pos:column="38">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if pos:line="116" pos:column="7">if <condition pos:line="116" pos:column="10">(<expr><name pos:line="116" pos:column="11">ch</name> <op:operator pos:line="116" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="17">'_'</lit:literal> <op:operator pos:line="116" pos:column="21">||</op:operator> <op:operator pos:line="116" pos:column="24">(</op:operator><name pos:line="116" pos:column="25">ch</name> <op:operator pos:line="116" pos:column="28">&gt;=</op:operator> <lit:literal type="char" pos:line="116" pos:column="31">'0'</lit:literal> <op:operator pos:line="116" pos:column="35">&amp;&amp;</op:operator> <name pos:line="116" pos:column="38">ch</name> <op:operator pos:line="116" pos:column="41">&lt;=</op:operator> <lit:literal type="char" pos:line="116" pos:column="44">'1'</lit:literal><op:operator pos:line="116" pos:column="47">)</op:operator></expr>)</condition><then pos:line="116" pos:column="49"> <expr_stmt><expr><op:operator pos:line="116" pos:column="50">++</op:operator><name pos:line="116" pos:column="52">pos</name></expr>;</expr_stmt></then>
      <else pos:line="117" pos:column="7">else <break pos:line="117" pos:column="12">break;</break></else></if>
    }</block></for>
  }</block></then> <else pos:line="119" pos:column="5">else <if pos:line="119" pos:column="10">if <condition pos:line="119" pos:column="13">(<expr><name pos:line="119" pos:column="14">ch</name> <op:operator pos:line="119" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="20">'0'</lit:literal> <op:operator pos:line="119" pos:column="24">&amp;&amp;</op:operator>
            <op:operator pos:line="120" pos:column="13">(</op:operator><name pos:line="120" pos:column="14">ch2</name> <op:operator pos:line="120" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="21">'o'</lit:literal> <op:operator pos:line="120" pos:column="25">||</op:operator> <name pos:line="120" pos:column="28">ch2</name> <op:operator pos:line="120" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="35">'O'</lit:literal> <op:operator pos:line="120" pos:column="39">||</op:operator> <name pos:line="120" pos:column="42">ch2</name> <op:operator pos:line="120" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="49">'c'</lit:literal> <op:operator pos:line="120" pos:column="53">||</op:operator> <name pos:line="120" pos:column="56">ch2</name> <op:operator pos:line="120" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="63">'C'</lit:literal><op:operator pos:line="120" pos:column="66">)</op:operator></expr>)</condition><then pos:line="120" pos:column="68"> <block pos:line="120" pos:column="69">{
    <comment type="block" pos:line="121" pos:column="5">/* octal number: */</comment>
    <expr_stmt><expr><name pos:line="122" pos:column="5">pos</name> <op:operator pos:line="122" pos:column="9">+=</op:operator> <lit:literal type="number" pos:line="122" pos:column="12">2</lit:literal></expr>;</expr_stmt>
    <for pos:line="123" pos:column="5">for (<init pos:line="123" pos:column="10">;</init><condition pos:line="123" pos:column="11">;</condition><incr/>) <block pos:line="123" pos:column="14">{
      <expr_stmt><expr><name pos:line="124" pos:column="7">ch</name> <op:operator pos:line="124" pos:column="10">=</op:operator> <call><name><name pos:line="124" pos:column="12">styler</name><op:operator pos:line="124" pos:column="18">.</op:operator><name pos:line="124" pos:column="19">SafeGetCharAt</name></name><argument_list pos:line="124" pos:column="32">(<argument><expr><name pos:line="124" pos:column="33">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="124" pos:column="38">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if pos:line="125" pos:column="7">if <condition pos:line="125" pos:column="10">(<expr><name pos:line="125" pos:column="11">ch</name> <op:operator pos:line="125" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="17">'_'</lit:literal> <op:operator pos:line="125" pos:column="21">||</op:operator> <op:operator pos:line="125" pos:column="24">(</op:operator><name pos:line="125" pos:column="25">ch</name> <op:operator pos:line="125" pos:column="28">&gt;=</op:operator> <lit:literal type="char" pos:line="125" pos:column="31">'0'</lit:literal> <op:operator pos:line="125" pos:column="35">&amp;&amp;</op:operator> <name pos:line="125" pos:column="38">ch</name> <op:operator pos:line="125" pos:column="41">&lt;=</op:operator> <lit:literal type="char" pos:line="125" pos:column="44">'7'</lit:literal><op:operator pos:line="125" pos:column="47">)</op:operator></expr>)</condition><then pos:line="125" pos:column="49"> <expr_stmt><expr><op:operator pos:line="125" pos:column="50">++</op:operator><name pos:line="125" pos:column="52">pos</name></expr>;</expr_stmt></then>
      <else pos:line="126" pos:column="7">else <break pos:line="126" pos:column="12">break;</break></else></if>
    }</block></for>
  }</block></then> <else pos:line="128" pos:column="5">else <if pos:line="128" pos:column="10">if <condition pos:line="128" pos:column="13">(<expr><name pos:line="128" pos:column="14">ch</name> <op:operator pos:line="128" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="20">'0'</lit:literal> <op:operator pos:line="128" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="128" pos:column="27">(</op:operator><name pos:line="128" pos:column="28">ch2</name> <op:operator pos:line="128" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="35">'x'</lit:literal> <op:operator pos:line="128" pos:column="39">||</op:operator> <name pos:line="128" pos:column="42">ch2</name> <op:operator pos:line="128" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="49">'X'</lit:literal><op:operator pos:line="128" pos:column="52">)</op:operator></expr>)</condition><then pos:line="128" pos:column="54"> <block pos:line="128" pos:column="55">{
    <comment type="block" pos:line="129" pos:column="5">/* hexadecimal number: */</comment>
    <expr_stmt><expr><name pos:line="130" pos:column="5">pos</name> <op:operator pos:line="130" pos:column="9">+=</op:operator> <lit:literal type="number" pos:line="130" pos:column="12">2</lit:literal></expr>;</expr_stmt>
    <for pos:line="131" pos:column="5">for (<init pos:line="131" pos:column="10">;</init><condition pos:line="131" pos:column="11">;</condition><incr/>) <block pos:line="131" pos:column="14">{
      <expr_stmt><expr><name pos:line="132" pos:column="7">ch</name> <op:operator pos:line="132" pos:column="10">=</op:operator> <call><name><name pos:line="132" pos:column="12">styler</name><op:operator pos:line="132" pos:column="18">.</op:operator><name pos:line="132" pos:column="19">SafeGetCharAt</name></name><argument_list pos:line="132" pos:column="32">(<argument><expr><name pos:line="132" pos:column="33">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="132" pos:column="38">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if pos:line="133" pos:column="7">if <condition pos:line="133" pos:column="10">(<expr><name pos:line="133" pos:column="11">ch</name> <op:operator pos:line="133" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="133" pos:column="17">'_'</lit:literal> <op:operator pos:line="133" pos:column="21">||</op:operator> <op:operator pos:line="133" pos:column="24">(</op:operator><name pos:line="133" pos:column="25">ch</name> <op:operator pos:line="133" pos:column="28">&gt;=</op:operator> <lit:literal type="char" pos:line="133" pos:column="31">'0'</lit:literal> <op:operator pos:line="133" pos:column="35">&amp;&amp;</op:operator> <name pos:line="133" pos:column="38">ch</name> <op:operator pos:line="133" pos:column="41">&lt;=</op:operator> <lit:literal type="char" pos:line="133" pos:column="44">'9'</lit:literal><op:operator pos:line="133" pos:column="47">)</op:operator>
          <op:operator pos:line="134" pos:column="11">||</op:operator> <op:operator pos:line="134" pos:column="14">(</op:operator><name pos:line="134" pos:column="15">ch</name> <op:operator pos:line="134" pos:column="18">&gt;=</op:operator> <lit:literal type="char" pos:line="134" pos:column="21">'a'</lit:literal> <op:operator pos:line="134" pos:column="25">&amp;&amp;</op:operator> <name pos:line="134" pos:column="28">ch</name> <op:operator pos:line="134" pos:column="31">&lt;=</op:operator> <lit:literal type="char" pos:line="134" pos:column="34">'f'</lit:literal><op:operator pos:line="134" pos:column="37">)</op:operator>
          <op:operator pos:line="135" pos:column="11">||</op:operator> <op:operator pos:line="135" pos:column="14">(</op:operator><name pos:line="135" pos:column="15">ch</name> <op:operator pos:line="135" pos:column="18">&gt;=</op:operator> <lit:literal type="char" pos:line="135" pos:column="21">'A'</lit:literal> <op:operator pos:line="135" pos:column="25">&amp;&amp;</op:operator> <name pos:line="135" pos:column="28">ch</name> <op:operator pos:line="135" pos:column="31">&lt;=</op:operator> <lit:literal type="char" pos:line="135" pos:column="34">'F'</lit:literal><op:operator pos:line="135" pos:column="37">)</op:operator></expr>)</condition><then pos:line="135" pos:column="39"> <expr_stmt><expr><op:operator pos:line="135" pos:column="40">++</op:operator><name pos:line="135" pos:column="42">pos</name></expr>;</expr_stmt></then>
      <else pos:line="136" pos:column="7">else <break pos:line="136" pos:column="12">break;</break></else></if>
    }</block></for>
  }</block></then> <else pos:line="138" pos:column="5">else <block pos:line="138" pos:column="10">{
    <comment type="line" pos:line="139" pos:column="5">// skip decimal part:</comment>
    <for pos:line="140" pos:column="5">for (<init pos:line="140" pos:column="10">;</init><condition pos:line="140" pos:column="11">;</condition><incr/>) <block pos:line="140" pos:column="14">{
      <expr_stmt><expr><name pos:line="141" pos:column="7">ch</name> <op:operator pos:line="141" pos:column="10">=</op:operator> <call><name><name pos:line="141" pos:column="12">styler</name><op:operator pos:line="141" pos:column="18">.</op:operator><name pos:line="141" pos:column="19">SafeGetCharAt</name></name><argument_list pos:line="141" pos:column="32">(<argument><expr><name pos:line="141" pos:column="33">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="141" pos:column="38">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if pos:line="142" pos:column="7">if <condition pos:line="142" pos:column="10">(<expr><name pos:line="142" pos:column="11">ch</name> <op:operator pos:line="142" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="142" pos:column="17">'_'</lit:literal> <op:operator pos:line="142" pos:column="21">||</op:operator> <op:operator pos:line="142" pos:column="24">(</op:operator><name pos:line="142" pos:column="25">ch</name> <op:operator pos:line="142" pos:column="28">&gt;=</op:operator> <lit:literal type="char" pos:line="142" pos:column="31">'0'</lit:literal> <op:operator pos:line="142" pos:column="35">&amp;&amp;</op:operator> <name pos:line="142" pos:column="38">ch</name> <op:operator pos:line="142" pos:column="41">&lt;=</op:operator> <lit:literal type="char" pos:line="142" pos:column="44">'9'</lit:literal><op:operator pos:line="142" pos:column="47">)</op:operator></expr>)</condition><then pos:line="142" pos:column="49"> <expr_stmt><expr><op:operator pos:line="142" pos:column="50">++</op:operator><name pos:line="142" pos:column="52">pos</name></expr>;</expr_stmt></then>
      <else pos:line="143" pos:column="7">else <break pos:line="143" pos:column="12">break;</break></else></if>
    }</block></for>
    <expr_stmt><expr><name pos:line="145" pos:column="5">ch2</name> <op:operator pos:line="145" pos:column="9">=</op:operator> <call><name><name pos:line="145" pos:column="11">styler</name><op:operator pos:line="145" pos:column="17">.</op:operator><name pos:line="145" pos:column="18">SafeGetCharAt</name></name><argument_list pos:line="145" pos:column="31">(<argument><expr><name pos:line="145" pos:column="32">pos</name><op:operator pos:line="145" pos:column="35">+</op:operator><lit:literal type="number" pos:line="145" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="145" pos:column="39">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="146" pos:column="5">if <condition pos:line="146" pos:column="8">(<expr><name pos:line="146" pos:column="9">ch</name> <op:operator pos:line="146" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="146" pos:column="15">'.'</lit:literal> <op:operator pos:line="146" pos:column="19">&amp;&amp;</op:operator> <name pos:line="146" pos:column="22">ch2</name> <op:operator pos:line="146" pos:column="26">&gt;=</op:operator> <lit:literal type="char" pos:line="146" pos:column="29">'0'</lit:literal> <op:operator pos:line="146" pos:column="33">&amp;&amp;</op:operator> <name pos:line="146" pos:column="36">ch2</name> <op:operator pos:line="146" pos:column="40">&lt;=</op:operator> <lit:literal type="char" pos:line="146" pos:column="43">'9'</lit:literal></expr>)</condition><then pos:line="146" pos:column="47"> <block pos:line="146" pos:column="48">{
      <expr_stmt><expr><op:operator pos:line="147" pos:column="7">++</op:operator><name pos:line="147" pos:column="9">pos</name></expr>;</expr_stmt> <comment type="line" pos:line="147" pos:column="14">// skip '.'</comment>
      <for pos:line="148" pos:column="7">for (<init pos:line="148" pos:column="12">;</init><condition pos:line="148" pos:column="13">;</condition><incr/>) <block pos:line="148" pos:column="16">{
        <expr_stmt><expr><name pos:line="149" pos:column="9">ch</name> <op:operator pos:line="149" pos:column="12">=</op:operator> <call><name><name pos:line="149" pos:column="14">styler</name><op:operator pos:line="149" pos:column="20">.</op:operator><name pos:line="149" pos:column="21">SafeGetCharAt</name></name><argument_list pos:line="149" pos:column="34">(<argument><expr><name pos:line="149" pos:column="35">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="149" pos:column="40">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="150" pos:column="9">if <condition pos:line="150" pos:column="12">(<expr><name pos:line="150" pos:column="13">ch</name> <op:operator pos:line="150" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="150" pos:column="19">'_'</lit:literal> <op:operator pos:line="150" pos:column="23">||</op:operator> <op:operator pos:line="150" pos:column="26">(</op:operator><name pos:line="150" pos:column="27">ch</name> <op:operator pos:line="150" pos:column="30">&gt;=</op:operator> <lit:literal type="char" pos:line="150" pos:column="33">'0'</lit:literal> <op:operator pos:line="150" pos:column="37">&amp;&amp;</op:operator> <name pos:line="150" pos:column="40">ch</name> <op:operator pos:line="150" pos:column="43">&lt;=</op:operator> <lit:literal type="char" pos:line="150" pos:column="46">'9'</lit:literal><op:operator pos:line="150" pos:column="49">)</op:operator></expr>)</condition><then pos:line="150" pos:column="51"> <expr_stmt><expr><op:operator pos:line="150" pos:column="52">++</op:operator><name pos:line="150" pos:column="54">pos</name></expr>;</expr_stmt></then>
        <else pos:line="151" pos:column="9">else <break pos:line="151" pos:column="14">break;</break></else></if>
      }</block></for>
    }</block></then></if>
    <if pos:line="154" pos:column="5">if <condition pos:line="154" pos:column="8">(<expr><name pos:line="154" pos:column="9">ch</name> <op:operator pos:line="154" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="154" pos:column="15">'e'</lit:literal> <op:operator pos:line="154" pos:column="19">||</op:operator> <name pos:line="154" pos:column="22">ch</name> <op:operator pos:line="154" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="154" pos:column="28">'E'</lit:literal></expr>)</condition><then pos:line="154" pos:column="32"> <block pos:line="154" pos:column="33">{
      <expr_stmt><expr><op:operator pos:line="155" pos:column="7">++</op:operator><name pos:line="155" pos:column="9">pos</name></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="156" pos:column="7">ch</name> <op:operator pos:line="156" pos:column="10">=</op:operator> <call><name><name pos:line="156" pos:column="12">styler</name><op:operator pos:line="156" pos:column="18">.</op:operator><name pos:line="156" pos:column="19">SafeGetCharAt</name></name><argument_list pos:line="156" pos:column="32">(<argument><expr><name pos:line="156" pos:column="33">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="156" pos:column="38">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if pos:line="157" pos:column="7">if <condition pos:line="157" pos:column="10">(<expr><name pos:line="157" pos:column="11">ch</name> <op:operator pos:line="157" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="157" pos:column="17">'-'</lit:literal> <op:operator pos:line="157" pos:column="21">||</op:operator> <name pos:line="157" pos:column="24">ch</name> <op:operator pos:line="157" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="157" pos:column="30">'+'</lit:literal></expr>)</condition><then pos:line="157" pos:column="34"> <expr_stmt><expr><op:operator pos:line="157" pos:column="35">++</op:operator><name pos:line="157" pos:column="37">pos</name></expr>;</expr_stmt></then></if>
      <for pos:line="158" pos:column="7">for (<init pos:line="158" pos:column="12">;</init><condition pos:line="158" pos:column="13">;</condition><incr/>) <block pos:line="158" pos:column="16">{
        <expr_stmt><expr><name pos:line="159" pos:column="9">ch</name> <op:operator pos:line="159" pos:column="12">=</op:operator> <call><name><name pos:line="159" pos:column="14">styler</name><op:operator pos:line="159" pos:column="20">.</op:operator><name pos:line="159" pos:column="21">SafeGetCharAt</name></name><argument_list pos:line="159" pos:column="34">(<argument><expr><name pos:line="159" pos:column="35">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="159" pos:column="40">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="160" pos:column="9">if <condition pos:line="160" pos:column="12">(<expr><name pos:line="160" pos:column="13">ch</name> <op:operator pos:line="160" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="160" pos:column="19">'_'</lit:literal> <op:operator pos:line="160" pos:column="23">||</op:operator> <op:operator pos:line="160" pos:column="26">(</op:operator><name pos:line="160" pos:column="27">ch</name> <op:operator pos:line="160" pos:column="30">&gt;=</op:operator> <lit:literal type="char" pos:line="160" pos:column="33">'0'</lit:literal> <op:operator pos:line="160" pos:column="37">&amp;&amp;</op:operator> <name pos:line="160" pos:column="40">ch</name> <op:operator pos:line="160" pos:column="43">&lt;=</op:operator> <lit:literal type="char" pos:line="160" pos:column="46">'9'</lit:literal><op:operator pos:line="160" pos:column="49">)</op:operator></expr>)</condition><then pos:line="160" pos:column="51"> <expr_stmt><expr><op:operator pos:line="160" pos:column="52">++</op:operator><name pos:line="160" pos:column="54">pos</name></expr>;</expr_stmt></then>
        <else pos:line="161" pos:column="9">else <break pos:line="161" pos:column="14">break;</break></else></if>
      }</block></for>
    }</block></then></if>
  }</block></else></if></else></if></else></if>
  <if pos:line="165" pos:column="3">if <condition pos:line="165" pos:column="6">(<expr><name pos:line="165" pos:column="7">ch</name> <op:operator pos:line="165" pos:column="10">==</op:operator> <lit:literal type="char" pos:line="165" pos:column="13">'\''</lit:literal></expr>)</condition><then pos:line="165" pos:column="18"> <block pos:line="165" pos:column="19">{
    <comment type="block" pos:line="166" pos:column="5">/* a type suffix: */</comment>
    <expr_stmt><expr><name pos:line="167" pos:column="5">pos</name><op:operator pos:line="167" pos:column="8">++</op:operator></expr>;</expr_stmt>
    <for pos:line="168" pos:column="5">for (<init pos:line="168" pos:column="10">;</init><condition pos:line="168" pos:column="11">;</condition><incr/>) <block pos:line="168" pos:column="14">{
      <expr_stmt><expr><name pos:line="169" pos:column="7">ch</name> <op:operator pos:line="169" pos:column="10">=</op:operator> <call><name><name pos:line="169" pos:column="12">styler</name><op:operator pos:line="169" pos:column="18">.</op:operator><name pos:line="169" pos:column="19">SafeGetCharAt</name></name><argument_list pos:line="169" pos:column="32">(<argument><expr><name pos:line="169" pos:column="33">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if pos:line="170" pos:column="7">if <condition pos:line="170" pos:column="10">(<expr><op:operator pos:line="170" pos:column="11">(</op:operator><name pos:line="170" pos:column="12">ch</name> <op:operator pos:line="170" pos:column="15">&gt;=</op:operator> <lit:literal type="char" pos:line="170" pos:column="18">'0'</lit:literal> <op:operator pos:line="170" pos:column="22">&amp;&amp;</op:operator> <name pos:line="170" pos:column="25">ch</name> <op:operator pos:line="170" pos:column="28">&lt;=</op:operator> <lit:literal type="char" pos:line="170" pos:column="31">'9'</lit:literal><op:operator pos:line="170" pos:column="34">)</op:operator> <op:operator pos:line="170" pos:column="36">||</op:operator> <op:operator pos:line="170" pos:column="39">(</op:operator><name pos:line="170" pos:column="40">ch</name> <op:operator pos:line="170" pos:column="43">&gt;=</op:operator> <lit:literal type="char" pos:line="170" pos:column="46">'A'</lit:literal> <op:operator pos:line="170" pos:column="50">&amp;&amp;</op:operator> <name pos:line="170" pos:column="53">ch</name> <op:operator pos:line="170" pos:column="56">&lt;=</op:operator> <lit:literal type="char" pos:line="170" pos:column="59">'Z'</lit:literal><op:operator pos:line="170" pos:column="62">)</op:operator>
         <op:operator pos:line="171" pos:column="10">||</op:operator> <op:operator pos:line="171" pos:column="13">(</op:operator><name pos:line="171" pos:column="14">ch</name> <op:operator pos:line="171" pos:column="17">&gt;=</op:operator> <lit:literal type="char" pos:line="171" pos:column="20">'a'</lit:literal> <op:operator pos:line="171" pos:column="24">&amp;&amp;</op:operator> <name pos:line="171" pos:column="27">ch</name> <op:operator pos:line="171" pos:column="30">&lt;=</op:operator> <lit:literal type="char" pos:line="171" pos:column="33">'z'</lit:literal><op:operator pos:line="171" pos:column="36">)</op:operator> <op:operator pos:line="171" pos:column="38">||</op:operator> <name pos:line="171" pos:column="41">ch</name> <op:operator pos:line="171" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="171" pos:column="47">'_'</lit:literal></expr>)</condition><then pos:line="171" pos:column="51"> <expr_stmt><expr><op:operator pos:line="171" pos:column="52">++</op:operator><name pos:line="171" pos:column="54">pos</name></expr>;</expr_stmt></then>
      <else pos:line="172" pos:column="7">else <break pos:line="172" pos:column="12">break;</break></else></if>
    }</block></for>
  }</block></then></if>
  <expr_stmt><expr><call><name><name pos:line="175" pos:column="3">styler</name><op:operator pos:line="175" pos:column="9">.</op:operator><name pos:line="175" pos:column="10">ColourTo</name></name><argument_list pos:line="175" pos:column="18">(<argument><expr><name pos:line="175" pos:column="19">pos</name><op:operator pos:line="175" pos:column="22">-</op:operator><lit:literal type="number" pos:line="175" pos:column="23">1</lit:literal></expr></argument>, <argument><expr><name pos:line="175" pos:column="26">SCE_P_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return pos:line="176" pos:column="3">return <expr><name pos:line="176" pos:column="10">pos</name></expr>;</return>
}</block></function>

<comment type="block" pos:line="179" pos:column="1">/* rewritten from scratch, because I couldn't get rid of the bugs...
   (A character based approach sucks!)
*/</comment>
<function><type><specifier pos:line="182" pos:column="1">static</specifier> <name pos:line="182" pos:column="8">void</name></type> <name pos:line="182" pos:column="13">ColouriseNimrodDoc</name><parameter_list pos:line="182" pos:column="31">(<param><decl><type><name pos:line="182" pos:column="32">unsigned</name> <name pos:line="182" pos:column="41">int</name></type> <name pos:line="182" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="55">int</name></type> <name pos:line="182" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="67">int</name></type> <name pos:line="182" pos:column="71">initStyle</name></decl></param>,
                                <param><decl><type><name pos:line="183" pos:column="33">WordList</name> <type:modifier pos:line="183" pos:column="42">*</type:modifier></type><name><name pos:line="183" pos:column="43">keywordlists</name><index pos:line="183" pos:column="55">[]</index></name></decl></param>, <param><decl><type><name pos:line="183" pos:column="59">Accessor</name> <type:modifier pos:line="183" pos:column="68">&amp;</type:modifier></type><name pos:line="183" pos:column="69">styler</name></decl></param>)</parameter_list> <block pos:line="183" pos:column="77">{
  <decl_stmt><decl><type><name pos:line="184" pos:column="3">int</name></type> <name pos:line="184" pos:column="7">pos</name> <init pos:line="184" pos:column="11">= <expr><name pos:line="184" pos:column="13">startPos</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="185" pos:column="3">int</name></type> <name pos:line="185" pos:column="7">max</name> <init pos:line="185" pos:column="11">= <expr><name pos:line="185" pos:column="13">startPos</name> <op:operator pos:line="185" pos:column="22">+</op:operator> <name pos:line="185" pos:column="24">length</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="186" pos:column="3">char</name></type> <name pos:line="186" pos:column="8">ch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="187" pos:column="3">WordList</name> <type:modifier pos:line="187" pos:column="12">&amp;</type:modifier></type><name pos:line="187" pos:column="13">keywords</name> <init pos:line="187" pos:column="22">= <expr><op:operator pos:line="187" pos:column="24">*</op:operator><name><name pos:line="187" pos:column="25">keywordlists</name><index pos:line="187" pos:column="37">[<expr><lit:literal type="number" pos:line="187" pos:column="38">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name pos:line="189" pos:column="3">styler</name><op:operator pos:line="189" pos:column="9">.</op:operator><name pos:line="189" pos:column="10">StartAt</name></name><argument_list pos:line="189" pos:column="17">(<argument><expr><name pos:line="189" pos:column="18">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="190" pos:column="3">styler</name><op:operator pos:line="190" pos:column="9">.</op:operator><name pos:line="190" pos:column="10">StartSegment</name></name><argument_list pos:line="190" pos:column="22">(<argument><expr><name pos:line="190" pos:column="23">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch pos:line="192" pos:column="3">switch <condition pos:line="192" pos:column="10">(<expr><name pos:line="192" pos:column="11">initStyle</name></expr>)</condition> <block pos:line="192" pos:column="22">{
    <comment type="block" pos:line="193" pos:column="5">/* check where we are: */</comment>
    <case pos:line="194" pos:column="5">case <expr><name pos:line="194" pos:column="10">SCE_P_TRIPLEDOUBLE</name></expr>:
      <expr_stmt><expr><name pos:line="195" pos:column="7">pos</name> <op:operator pos:line="195" pos:column="11">=</op:operator> <call><name pos:line="195" pos:column="13">tillEndOfTripleQuote</name><argument_list pos:line="195" pos:column="33">(<argument><expr><name pos:line="195" pos:column="34">styler</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="42">pos</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="47">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name pos:line="196" pos:column="7">styler</name><op:operator pos:line="196" pos:column="13">.</op:operator><name pos:line="196" pos:column="14">ColourTo</name></name><argument_list pos:line="196" pos:column="22">(<argument><expr><name pos:line="196" pos:column="23">pos</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="28">SCE_P_TRIPLEDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="197" pos:column="7">pos</name><op:operator pos:line="197" pos:column="10">++</op:operator></expr>;</expr_stmt>
    <break pos:line="198" pos:column="5">break;</break>
    </case><default pos:line="199" pos:column="5">default: <comment type="block" pos:line="199" pos:column="14">/* nothing to do: */</comment>
    <break pos:line="200" pos:column="5">break;</break>
  </default>}</block></switch>
  <while pos:line="202" pos:column="3">while <condition pos:line="202" pos:column="9">(<expr><name pos:line="202" pos:column="10">pos</name> <op:operator pos:line="202" pos:column="14">&lt;</op:operator> <name pos:line="202" pos:column="16">max</name></expr>)</condition> <block pos:line="202" pos:column="21">{
    <expr_stmt><expr><name pos:line="203" pos:column="5">ch</name> <op:operator pos:line="203" pos:column="8">=</op:operator> <call><name><name pos:line="203" pos:column="10">styler</name><op:operator pos:line="203" pos:column="16">.</op:operator><name pos:line="203" pos:column="17">SafeGetCharAt</name></name><argument_list pos:line="203" pos:column="30">(<argument><expr><name pos:line="203" pos:column="31">pos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="203" pos:column="36">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:line="204" pos:column="5">switch <condition pos:line="204" pos:column="12">(<expr><name pos:line="204" pos:column="13">ch</name></expr>)</condition> <block pos:line="204" pos:column="17">{
      <case pos:line="205" pos:column="7">case <expr><lit:literal type="char" pos:line="205" pos:column="12">'\0'</lit:literal></expr>: <return pos:line="205" pos:column="18">return;</return>
      </case><case pos:line="206" pos:column="7">case <expr><lit:literal type="char" pos:line="206" pos:column="12">'#'</lit:literal></expr>: <block pos:line="206" pos:column="17">{
        <decl_stmt><decl><type><name pos:line="207" pos:column="9">bool</name></type> <name pos:line="207" pos:column="14">doccomment</name> <init pos:line="207" pos:column="25">= <expr><op:operator pos:line="207" pos:column="27">(</op:operator><call><name><name pos:line="207" pos:column="28">styler</name><op:operator pos:line="207" pos:column="34">.</op:operator><name pos:line="207" pos:column="35">SafeGetCharAt</name></name><argument_list pos:line="207" pos:column="48">(<argument><expr><name pos:line="207" pos:column="49">pos</name><op:operator pos:line="207" pos:column="52">+</op:operator><lit:literal type="number" pos:line="207" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="207" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="207" pos:column="59">'#'</lit:literal><op:operator pos:line="207" pos:column="62">)</op:operator></expr></init></decl>;</decl_stmt>
        <while pos:line="208" pos:column="9">while <condition pos:line="208" pos:column="15">(<expr><name pos:line="208" pos:column="16">pos</name> <op:operator pos:line="208" pos:column="20">&lt;</op:operator> <name pos:line="208" pos:column="22">max</name> <op:operator pos:line="208" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="208" pos:column="29">!</op:operator><call><name pos:line="208" pos:column="30">isNewLine</name><argument_list pos:line="208" pos:column="39">(<argument><expr><call><name><name pos:line="208" pos:column="40">styler</name><op:operator pos:line="208" pos:column="46">.</op:operator><name pos:line="208" pos:column="47">SafeGetCharAt</name></name><argument_list pos:line="208" pos:column="60">(<argument><expr><name pos:line="208" pos:column="61">pos</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="66">LF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><name pos:line="208" pos:column="72">pos</name><op:operator pos:line="208" pos:column="75">++</op:operator></expr>;</expr_stmt></while>
        <if pos:line="209" pos:column="9">if <condition pos:line="209" pos:column="12">(<expr><name pos:line="209" pos:column="13">doccomment</name></expr>)</condition><then pos:line="209" pos:column="24">
          <expr_stmt><expr><call><name><name pos:line="210" pos:column="11">styler</name><op:operator pos:line="210" pos:column="17">.</op:operator><name pos:line="210" pos:column="18">ColourTo</name></name><argument_list pos:line="210" pos:column="26">(<argument><expr><name pos:line="210" pos:column="27">pos</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="32">SCE_C_COMMENTLINEDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="211" pos:column="9">else
          <expr_stmt><expr><call><name><name pos:line="212" pos:column="11">styler</name><op:operator pos:line="212" pos:column="17">.</op:operator><name pos:line="212" pos:column="18">ColourTo</name></name><argument_list pos:line="212" pos:column="26">(<argument><expr><name pos:line="212" pos:column="27">pos</name></expr></argument>, <argument><expr><name pos:line="212" pos:column="32">SCE_P_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
      }</block> <break pos:line="213" pos:column="9">break;</break>
      </case><case pos:line="214" pos:column="7">case <expr><lit:literal type="char" pos:line="214" pos:column="12">'r'</lit:literal></expr>: </case><case pos:line="214" pos:column="17">case <expr><lit:literal type="char" pos:line="214" pos:column="22">'R'</lit:literal></expr>: <block pos:line="214" pos:column="27">{
        <if pos:line="215" pos:column="9">if <condition pos:line="215" pos:column="12">(<expr><call><name><name pos:line="215" pos:column="13">styler</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="215" pos:column="33">(<argument><expr><name pos:line="215" pos:column="34">pos</name><op:operator pos:line="215" pos:column="37">+</op:operator><lit:literal type="number" pos:line="215" pos:column="38">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="215" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="215" pos:column="44">'"'</lit:literal></expr>)</condition><then pos:line="215" pos:column="48"> <block pos:line="215" pos:column="49">{
          <expr_stmt><expr><name pos:line="216" pos:column="11">pos</name> <op:operator pos:line="216" pos:column="15">=</op:operator> <call><name pos:line="216" pos:column="17">scanString</name><argument_list pos:line="216" pos:column="27">(<argument><expr><name pos:line="216" pos:column="28">styler</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="36">pos</name><op:operator pos:line="216" pos:column="39">+</op:operator><lit:literal type="number" pos:line="216" pos:column="40">2</lit:literal></expr></argument>, <argument><expr><name pos:line="216" pos:column="43">max</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="216" pos:column="48">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="217" pos:column="11">styler</name><op:operator pos:line="217" pos:column="17">.</op:operator><name pos:line="217" pos:column="18">ColourTo</name></name><argument_list pos:line="217" pos:column="26">(<argument><expr><name pos:line="217" pos:column="27">pos</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="32">SCE_P_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="218" pos:column="11">pos</name><op:operator pos:line="218" pos:column="14">++</op:operator></expr>;</expr_stmt>
        }</block></then> <else pos:line="219" pos:column="11">else <block pos:line="219" pos:column="16">{
          <expr_stmt><expr><name pos:line="220" pos:column="11">pos</name> <op:operator pos:line="220" pos:column="15">=</op:operator> <call><name pos:line="220" pos:column="17">scanIdent</name><argument_list pos:line="220" pos:column="26">(<argument><expr><name pos:line="220" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="35">pos</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="40">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block> <break pos:line="222" pos:column="9">break;</break>
      </case><case pos:line="223" pos:column="7">case <expr><lit:literal type="char" pos:line="223" pos:column="12">'"'</lit:literal></expr>:
        <if pos:line="224" pos:column="9">if <condition pos:line="224" pos:column="12">(<expr><call><name><name pos:line="224" pos:column="13">styler</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">Match</name></name><argument_list pos:line="224" pos:column="25">(<argument><expr><name pos:line="224" pos:column="26">pos</name><op:operator pos:line="224" pos:column="29">+</op:operator><lit:literal type="number" pos:line="224" pos:column="30">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="224" pos:column="33">"\"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="224" pos:column="41"> <block pos:line="224" pos:column="42">{
          <expr_stmt><expr><name pos:line="225" pos:column="11">pos</name> <op:operator pos:line="225" pos:column="15">=</op:operator> <call><name pos:line="225" pos:column="17">tillEndOfTripleQuote</name><argument_list pos:line="225" pos:column="37">(<argument><expr><name pos:line="225" pos:column="38">styler</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="46">pos</name><op:operator pos:line="225" pos:column="49">+</op:operator><lit:literal type="number" pos:line="225" pos:column="50">3</lit:literal></expr></argument>, <argument><expr><name pos:line="225" pos:column="53">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="226" pos:column="11">styler</name><op:operator pos:line="226" pos:column="17">.</op:operator><name pos:line="226" pos:column="18">ColourTo</name></name><argument_list pos:line="226" pos:column="26">(<argument><expr><name pos:line="226" pos:column="27">pos</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="32">SCE_P_TRIPLEDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="227" pos:column="11">else <block pos:line="227" pos:column="16">{
          <expr_stmt><expr><name pos:line="228" pos:column="11">pos</name> <op:operator pos:line="228" pos:column="15">=</op:operator> <call><name pos:line="228" pos:column="17">scanString</name><argument_list pos:line="228" pos:column="27">(<argument><expr><name pos:line="228" pos:column="28">styler</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="36">pos</name><op:operator pos:line="228" pos:column="39">+</op:operator><lit:literal type="number" pos:line="228" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="228" pos:column="43">max</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="228" pos:column="48">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="229" pos:column="11">styler</name><op:operator pos:line="229" pos:column="17">.</op:operator><name pos:line="229" pos:column="18">ColourTo</name></name><argument_list pos:line="229" pos:column="26">(<argument><expr><name pos:line="229" pos:column="27">pos</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="32">SCE_P_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name pos:line="231" pos:column="9">pos</name><op:operator pos:line="231" pos:column="12">++</op:operator></expr>;</expr_stmt>
      <break pos:line="232" pos:column="7">break;</break>
      </case><case pos:line="233" pos:column="7">case <expr><lit:literal type="char" pos:line="233" pos:column="12">'\''</lit:literal></expr>:
        <expr_stmt><expr><name pos:line="234" pos:column="9">pos</name> <op:operator pos:line="234" pos:column="13">=</op:operator> <call><name pos:line="234" pos:column="15">scanChar</name><argument_list pos:line="234" pos:column="23">(<argument><expr><name pos:line="234" pos:column="24">styler</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="32">pos</name><op:operator pos:line="234" pos:column="35">+</op:operator><lit:literal type="number" pos:line="234" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="234" pos:column="39">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="235" pos:column="9">styler</name><op:operator pos:line="235" pos:column="15">.</op:operator><name pos:line="235" pos:column="16">ColourTo</name></name><argument_list pos:line="235" pos:column="24">(<argument><expr><name pos:line="235" pos:column="25">pos</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="30">SCE_P_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="236" pos:column="9">pos</name><op:operator pos:line="236" pos:column="12">++</op:operator></expr>;</expr_stmt>
      <break pos:line="237" pos:column="7">break;</break>
      </case><default pos:line="238" pos:column="7">default: <comment type="line" pos:line="238" pos:column="16">// identifers, numbers, operators, whitespace</comment>
        <if pos:line="239" pos:column="9">if <condition pos:line="239" pos:column="12">(<expr><name pos:line="239" pos:column="13">ch</name> <op:operator pos:line="239" pos:column="16">&gt;=</op:operator> <lit:literal type="char" pos:line="239" pos:column="19">'0'</lit:literal> <op:operator pos:line="239" pos:column="23">&amp;&amp;</op:operator> <name pos:line="239" pos:column="26">ch</name> <op:operator pos:line="239" pos:column="29">&lt;=</op:operator> <lit:literal type="char" pos:line="239" pos:column="32">'9'</lit:literal></expr>)</condition><then pos:line="239" pos:column="36"> <block pos:line="239" pos:column="37">{
          <expr_stmt><expr><name pos:line="240" pos:column="11">pos</name> <op:operator pos:line="240" pos:column="15">=</op:operator> <call><name pos:line="240" pos:column="17">scanNumber</name><argument_list pos:line="240" pos:column="27">(<argument><expr><name pos:line="240" pos:column="28">styler</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="36">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="241" pos:column="11">else <if pos:line="241" pos:column="16">if <condition pos:line="241" pos:column="19">(<expr><call><name pos:line="241" pos:column="20">IsAWordChar</name><argument_list pos:line="241" pos:column="31">(<argument><expr><name pos:line="241" pos:column="32">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="241" pos:column="36"> <block pos:line="241" pos:column="37">{
          <expr_stmt><expr><name pos:line="242" pos:column="11">pos</name> <op:operator pos:line="242" pos:column="15">=</op:operator> <call><name pos:line="242" pos:column="17">scanIdent</name><argument_list pos:line="242" pos:column="26">(<argument><expr><name pos:line="242" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="35">pos</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="40">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="243" pos:column="11">else <if pos:line="243" pos:column="16">if <condition pos:line="243" pos:column="19">(<expr><name pos:line="243" pos:column="20">ch</name> <op:operator pos:line="243" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="243" pos:column="26">'`'</lit:literal></expr>)</condition><then pos:line="243" pos:column="30"> <block pos:line="243" pos:column="31">{
          <expr_stmt><expr><name pos:line="244" pos:column="11">pos</name><op:operator pos:line="244" pos:column="14">++</op:operator></expr>;</expr_stmt>
          <while pos:line="245" pos:column="11">while <condition pos:line="245" pos:column="17">(<expr><name pos:line="245" pos:column="18">pos</name> <op:operator pos:line="245" pos:column="22">&lt;</op:operator> <name pos:line="245" pos:column="24">max</name></expr>)</condition> <block pos:line="245" pos:column="29">{
            <expr_stmt><expr><name pos:line="246" pos:column="13">ch</name> <op:operator pos:line="246" pos:column="16">=</op:operator> <call><name><name pos:line="246" pos:column="18">styler</name><op:operator pos:line="246" pos:column="24">.</op:operator><name pos:line="246" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="246" pos:column="38">(<argument><expr><name pos:line="246" pos:column="39">pos</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="44">LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="247" pos:column="13">if <condition pos:line="247" pos:column="16">(<expr><name pos:line="247" pos:column="17">ch</name> <op:operator pos:line="247" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="247" pos:column="23">'`'</lit:literal></expr>)</condition><then pos:line="247" pos:column="27"> <block pos:line="247" pos:column="28">{
              <expr_stmt><expr><op:operator pos:line="248" pos:column="15">++</op:operator><name pos:line="248" pos:column="17">pos</name></expr>;</expr_stmt>
              <break pos:line="249" pos:column="15">break;</break>
            }</block></then></if>
            <if pos:line="251" pos:column="13">if <condition pos:line="251" pos:column="16">(<expr><name pos:line="251" pos:column="17">ch</name> <op:operator pos:line="251" pos:column="20">==</op:operator> <name pos:line="251" pos:column="23">CR</name> <op:operator pos:line="251" pos:column="26">||</op:operator> <name pos:line="251" pos:column="29">ch</name> <op:operator pos:line="251" pos:column="32">==</op:operator> <name pos:line="251" pos:column="35">LF</name></expr>)</condition><then pos:line="251" pos:column="38"> <break pos:line="251" pos:column="39">break;</break></then></if>
            <expr_stmt><expr><op:operator pos:line="252" pos:column="13">++</op:operator><name pos:line="252" pos:column="15">pos</name></expr>;</expr_stmt>
          }</block></while>
          <expr_stmt><expr><call><name><name pos:line="254" pos:column="11">styler</name><op:operator pos:line="254" pos:column="17">.</op:operator><name pos:line="254" pos:column="18">ColourTo</name></name><argument_list pos:line="254" pos:column="26">(<argument><expr><name pos:line="254" pos:column="27">pos</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="32">SCE_P_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="255" pos:column="11">else <if pos:line="255" pos:column="16">if <condition pos:line="255" pos:column="19">(<expr><call><name pos:line="255" pos:column="20">strchr</name><argument_list pos:line="255" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="255" pos:column="27">"()[]{}:=;-\\/&amp;%$!+&lt;&gt;|^?,.*~@"</lit:literal></expr></argument>, <argument><expr><name pos:line="255" pos:column="59">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="255" pos:column="63"> <block pos:line="255" pos:column="64">{
          <expr_stmt><expr><call><name><name pos:line="256" pos:column="11">styler</name><op:operator pos:line="256" pos:column="17">.</op:operator><name pos:line="256" pos:column="18">ColourTo</name></name><argument_list pos:line="256" pos:column="26">(<argument><expr><name pos:line="256" pos:column="27">pos</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="32">SCE_P_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="257" pos:column="11">pos</name><op:operator pos:line="257" pos:column="14">++</op:operator></expr>;</expr_stmt>
        }</block></then> <else pos:line="258" pos:column="11">else <block pos:line="258" pos:column="16">{
          <expr_stmt><expr><call><name><name pos:line="259" pos:column="11">styler</name><op:operator pos:line="259" pos:column="17">.</op:operator><name pos:line="259" pos:column="18">ColourTo</name></name><argument_list pos:line="259" pos:column="26">(<argument><expr><name pos:line="259" pos:column="27">pos</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="32">SCE_P_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="260" pos:column="11">pos</name><op:operator pos:line="260" pos:column="14">++</op:operator></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if>
      <break pos:line="262" pos:column="7">break;</break>
    </default>}</block></switch>
  }</block></while>
}</block></function>

<function><type><specifier pos:line="267" pos:column="1">static</specifier> <name pos:line="267" pos:column="8">bool</name></type> <name pos:line="267" pos:column="13">IsCommentLine</name><parameter_list pos:line="267" pos:column="26">(<param><decl><type><name pos:line="267" pos:column="27">int</name></type> <name pos:line="267" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="267" pos:column="37">Accessor</name> <type:modifier pos:line="267" pos:column="46">&amp;</type:modifier></type><name pos:line="267" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="267" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="268" pos:column="9">int</name></type> <name pos:line="268" pos:column="13">pos</name> <init pos:line="268" pos:column="17">= <expr><call><name><name pos:line="268" pos:column="19">styler</name><op:operator pos:line="268" pos:column="25">.</op:operator><name pos:line="268" pos:column="26">LineStart</name></name><argument_list pos:line="268" pos:column="35">(<argument><expr><name pos:line="268" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="269" pos:column="9">int</name></type> <name pos:line="269" pos:column="13">eol_pos</name> <init pos:line="269" pos:column="21">= <expr><call><name><name pos:line="269" pos:column="23">styler</name><op:operator pos:line="269" pos:column="29">.</op:operator><name pos:line="269" pos:column="30">LineStart</name></name><argument_list pos:line="269" pos:column="39">(<argument><expr><name pos:line="269" pos:column="40">line</name> <op:operator pos:line="269" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="269" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="269" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="269" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="270" pos:column="9">for (<init><decl><type><name pos:line="270" pos:column="14">int</name></type> <name pos:line="270" pos:column="18">i</name> <init pos:line="270" pos:column="20">= <expr><name pos:line="270" pos:column="22">pos</name></expr></init></decl>;</init> <condition><expr><name pos:line="270" pos:column="27">i</name> <op:operator pos:line="270" pos:column="29">&lt;</op:operator> <name pos:line="270" pos:column="31">eol_pos</name></expr>;</condition> <incr><expr><name pos:line="270" pos:column="40">i</name><op:operator pos:line="270" pos:column="41">++</op:operator></expr></incr>) <block pos:line="270" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="271" pos:column="17">char</name></type> <name pos:line="271" pos:column="22">ch</name> <init pos:line="271" pos:column="25">= <expr><name><name pos:line="271" pos:column="27">styler</name><index pos:line="271" pos:column="33">[<expr><name pos:line="271" pos:column="34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="272" pos:column="17">if <condition pos:line="272" pos:column="20">(<expr><name pos:line="272" pos:column="21">ch</name> <op:operator pos:line="272" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="27">'#'</lit:literal></expr>)</condition><then pos:line="272" pos:column="31">
			<return pos:line="273" pos:column="25">return <expr><lit:literal type="boolean" pos:line="273" pos:column="32">true</lit:literal></expr>;</return></then>
		<else pos:line="274" pos:column="17">else <if pos:line="274" pos:column="22">if <condition pos:line="274" pos:column="25">(<expr><name pos:line="274" pos:column="26">ch</name> <op:operator pos:line="274" pos:column="29">!=</op:operator> <lit:literal type="char" pos:line="274" pos:column="32">' '</lit:literal> <op:operator pos:line="274" pos:column="36">&amp;&amp;</op:operator> <name pos:line="274" pos:column="39">ch</name> <op:operator pos:line="274" pos:column="42">!=</op:operator> <lit:literal type="char" pos:line="274" pos:column="45">'\t'</lit:literal></expr>)</condition><then pos:line="274" pos:column="50">
			<return pos:line="275" pos:column="25">return <expr><lit:literal type="boolean" pos:line="275" pos:column="32">false</lit:literal></expr>;</return></then></if></else></if>
	}</block></for>
	<return pos:line="277" pos:column="9">return <expr><lit:literal type="boolean" pos:line="277" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="280" pos:column="1">static</specifier> <name pos:line="280" pos:column="8">bool</name></type> <name pos:line="280" pos:column="13">IsQuoteLine</name><parameter_list pos:line="280" pos:column="24">(<param><decl><type><name pos:line="280" pos:column="25">int</name></type> <name pos:line="280" pos:column="29">line</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="35">Accessor</name> <type:modifier pos:line="280" pos:column="44">&amp;</type:modifier></type><name pos:line="280" pos:column="45">styler</name></decl></param>)</parameter_list> <block pos:line="280" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="281" pos:column="9">int</name></type> <name pos:line="281" pos:column="13">style</name> <init pos:line="281" pos:column="19">= <expr><call><name><name pos:line="281" pos:column="21">styler</name><op:operator pos:line="281" pos:column="27">.</op:operator><name pos:line="281" pos:column="28">StyleAt</name></name><argument_list pos:line="281" pos:column="35">(<argument><expr><call><name><name pos:line="281" pos:column="36">styler</name><op:operator pos:line="281" pos:column="42">.</op:operator><name pos:line="281" pos:column="43">LineStart</name></name><argument_list pos:line="281" pos:column="52">(<argument><expr><name pos:line="281" pos:column="53">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="281" pos:column="60">&amp;</op:operator> <lit:literal type="number" pos:line="281" pos:column="62">31</lit:literal></expr></init></decl>;</decl_stmt>
	<return pos:line="282" pos:column="9">return <expr><op:operator pos:line="282" pos:column="16">(</op:operator><op:operator pos:line="282" pos:column="17">(</op:operator><name pos:line="282" pos:column="18">style</name> <op:operator pos:line="282" pos:column="24">==</op:operator> <name pos:line="282" pos:column="27">SCE_P_TRIPLE</name><op:operator pos:line="282" pos:column="39">)</op:operator> <op:operator pos:line="282" pos:column="41">||</op:operator> <op:operator pos:line="282" pos:column="44">(</op:operator><name pos:line="282" pos:column="45">style</name> <op:operator pos:line="282" pos:column="51">==</op:operator> <name pos:line="282" pos:column="54">SCE_P_TRIPLEDOUBLE</name><op:operator pos:line="282" pos:column="72">)</op:operator><op:operator pos:line="282" pos:column="73">)</op:operator></expr>;</return>
}</block></function>


<function><type><specifier pos:line="286" pos:column="1">static</specifier> <name pos:line="286" pos:column="8">void</name></type> <name pos:line="286" pos:column="13">FoldNimrodDoc</name><parameter_list pos:line="286" pos:column="26">(<param><decl><type><name pos:line="286" pos:column="27">unsigned</name> <name pos:line="286" pos:column="36">int</name></type> <name pos:line="286" pos:column="40">startPos</name></decl></param>, <param><decl><type><name pos:line="286" pos:column="50">int</name></type> <name pos:line="286" pos:column="54">length</name></decl></param>,
                          <param><decl><type><name pos:line="287" pos:column="27">int</name></type></decl></param> <comment type="block" pos:line="287" pos:column="31">/*initStyle - unused*/</comment>,
                          <param><decl><type><name><name pos:line="288" pos:column="27">WordList</name> <type:modifier pos:line="288" pos:column="36">*</type:modifier><index pos:line="288" pos:column="37">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="288" pos:column="41">Accessor</name> <type:modifier pos:line="288" pos:column="50">&amp;</type:modifier></type><name pos:line="288" pos:column="51">styler</name></decl></param>)</parameter_list> <block pos:line="288" pos:column="59">{
	<decl_stmt><decl><type><specifier pos:line="289" pos:column="9">const</specifier> <name pos:line="289" pos:column="15">int</name></type> <name pos:line="289" pos:column="19">maxPos</name> <init pos:line="289" pos:column="26">= <expr><name pos:line="289" pos:column="28">startPos</name> <op:operator pos:line="289" pos:column="37">+</op:operator> <name pos:line="289" pos:column="39">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="290" pos:column="9">const</specifier> <name pos:line="290" pos:column="15">int</name></type> <name pos:line="290" pos:column="19">maxLines</name> <init pos:line="290" pos:column="28">= <expr><call><name><name pos:line="290" pos:column="30">styler</name><op:operator pos:line="290" pos:column="36">.</op:operator><name pos:line="290" pos:column="37">GetLine</name></name><argument_list pos:line="290" pos:column="44">(<argument><expr><name pos:line="290" pos:column="45">maxPos</name> <op:operator pos:line="290" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="290" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="290" pos:column="58">// Requested last line</comment>
	<decl_stmt><decl><type><specifier pos:line="291" pos:column="9">const</specifier> <name pos:line="291" pos:column="15">int</name></type> <name pos:line="291" pos:column="19">docLines</name> <init pos:line="291" pos:column="28">= <expr><call><name><name pos:line="291" pos:column="30">styler</name><op:operator pos:line="291" pos:column="36">.</op:operator><name pos:line="291" pos:column="37">GetLine</name></name><argument_list pos:line="291" pos:column="44">(<argument><expr><call><name><name pos:line="291" pos:column="45">styler</name><op:operator pos:line="291" pos:column="51">.</op:operator><name pos:line="291" pos:column="52">Length</name></name><argument_list pos:line="291" pos:column="58">()</argument_list></call> <op:operator pos:line="291" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="291" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="291" pos:column="67">// Available last line</comment>
	<decl_stmt><decl><type><specifier pos:line="292" pos:column="9">const</specifier> <name pos:line="292" pos:column="15">bool</name></type> <name pos:line="292" pos:column="20">foldComment</name> <init pos:line="292" pos:column="32">= <expr><call><name><name pos:line="292" pos:column="34">styler</name><op:operator pos:line="292" pos:column="40">.</op:operator><name pos:line="292" pos:column="41">GetPropertyInt</name></name><argument_list pos:line="292" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="292" pos:column="56">"fold.comment.nimrod"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="292" pos:column="79">!=</op:operator> <lit:literal type="number" pos:line="292" pos:column="82">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="293" pos:column="9">const</specifier> <name pos:line="293" pos:column="15">bool</name></type> <name pos:line="293" pos:column="20">foldQuotes</name> <init pos:line="293" pos:column="31">= <expr><call><name><name pos:line="293" pos:column="33">styler</name><op:operator pos:line="293" pos:column="39">.</op:operator><name pos:line="293" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="293" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="293" pos:column="55">"fold.quotes.nimrod"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="293" pos:column="77">!=</op:operator> <lit:literal type="number" pos:line="293" pos:column="80">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="295" pos:column="9">// Backtrack to previous non-blank line so we can determine indent level</comment>
	<comment type="line" pos:line="296" pos:column="9">// for any white space lines (needed esp. within triple quoted strings)</comment>
	<comment type="line" pos:line="297" pos:column="9">// and so we can fix any preceding fold level (which is why we go back</comment>
	<comment type="line" pos:line="298" pos:column="9">// at least one line in all cases)</comment>
	<decl_stmt><decl><type><name pos:line="299" pos:column="9">int</name></type> <name pos:line="299" pos:column="13">spaceFlags</name> <init pos:line="299" pos:column="24">= <expr><lit:literal type="number" pos:line="299" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="300" pos:column="9">int</name></type> <name pos:line="300" pos:column="13">lineCurrent</name> <init pos:line="300" pos:column="25">= <expr><call><name><name pos:line="300" pos:column="27">styler</name><op:operator pos:line="300" pos:column="33">.</op:operator><name pos:line="300" pos:column="34">GetLine</name></name><argument_list pos:line="300" pos:column="41">(<argument><expr><name pos:line="300" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="301" pos:column="9">int</name></type> <name pos:line="301" pos:column="13">indentCurrent</name> <init pos:line="301" pos:column="27">= <expr><call><name><name pos:line="301" pos:column="29">styler</name><op:operator pos:line="301" pos:column="35">.</op:operator><name pos:line="301" pos:column="36">IndentAmount</name></name><argument_list pos:line="301" pos:column="48">(<argument><expr><name pos:line="301" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="301" pos:column="62">&amp;</op:operator><name pos:line="301" pos:column="63">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="75">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="302" pos:column="9">while <condition pos:line="302" pos:column="15">(<expr><name pos:line="302" pos:column="16">lineCurrent</name> <op:operator pos:line="302" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="302" pos:column="30">0</lit:literal></expr>)</condition> <block pos:line="302" pos:column="33">{
		<expr_stmt><expr><name pos:line="303" pos:column="17">lineCurrent</name><op:operator pos:line="303" pos:column="28">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="304" pos:column="17">indentCurrent</name> <op:operator pos:line="304" pos:column="31">=</op:operator> <call><name><name pos:line="304" pos:column="33">styler</name><op:operator pos:line="304" pos:column="39">.</op:operator><name pos:line="304" pos:column="40">IndentAmount</name></name><argument_list pos:line="304" pos:column="52">(<argument><expr><name pos:line="304" pos:column="53">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="304" pos:column="66">&amp;</op:operator><name pos:line="304" pos:column="67">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="305" pos:column="17">if <condition pos:line="305" pos:column="20">(<expr><op:operator pos:line="305" pos:column="21">!</op:operator><op:operator pos:line="305" pos:column="22">(</op:operator><name pos:line="305" pos:column="23">indentCurrent</name> <op:operator pos:line="305" pos:column="37">&amp;</op:operator> <name pos:line="305" pos:column="39">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="305" pos:column="60">)</op:operator> <op:operator pos:line="305" pos:column="62">&amp;&amp;</op:operator>
		        <op:operator pos:line="306" pos:column="25">(</op:operator><op:operator pos:line="306" pos:column="26">!</op:operator><call><name pos:line="306" pos:column="27">IsCommentLine</name><argument_list pos:line="306" pos:column="40">(<argument><expr><name pos:line="306" pos:column="41">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="54">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="306" pos:column="61">)</op:operator> <op:operator pos:line="306" pos:column="63">&amp;&amp;</op:operator>
		        <op:operator pos:line="307" pos:column="25">(</op:operator><op:operator pos:line="307" pos:column="26">!</op:operator><call><name pos:line="307" pos:column="27">IsQuoteLine</name><argument_list pos:line="307" pos:column="38">(<argument><expr><name pos:line="307" pos:column="39">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="52">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="307" pos:column="59">)</op:operator></expr>)</condition><then pos:line="307" pos:column="61">
			<break pos:line="308" pos:column="25">break;</break></then></if>
	}</block></while>
	<decl_stmt><decl><type><name pos:line="310" pos:column="9">int</name></type> <name pos:line="310" pos:column="13">indentCurrentLevel</name> <init pos:line="310" pos:column="32">= <expr><name pos:line="310" pos:column="34">indentCurrent</name> <op:operator pos:line="310" pos:column="48">&amp;</op:operator> <name pos:line="310" pos:column="50">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="312" pos:column="9">// Set up initial loop state</comment>
	<expr_stmt><expr><name pos:line="313" pos:column="9">startPos</name> <op:operator pos:line="313" pos:column="18">=</op:operator> <call><name><name pos:line="313" pos:column="20">styler</name><op:operator pos:line="313" pos:column="26">.</op:operator><name pos:line="313" pos:column="27">LineStart</name></name><argument_list pos:line="313" pos:column="36">(<argument><expr><name pos:line="313" pos:column="37">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="314" pos:column="9">int</name></type> <name pos:line="314" pos:column="13">prev_state</name> <init pos:line="314" pos:column="24">= <expr><name pos:line="314" pos:column="26">SCE_P_DEFAULT</name> <op:operator pos:line="314" pos:column="40">&amp;</op:operator> <lit:literal type="number" pos:line="314" pos:column="42">31</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="315" pos:column="9">if <condition pos:line="315" pos:column="12">(<expr><name pos:line="315" pos:column="13">lineCurrent</name> <op:operator pos:line="315" pos:column="25">&gt;=</op:operator> <lit:literal type="number" pos:line="315" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="315" pos:column="30">
		<expr_stmt><expr><name pos:line="316" pos:column="17">prev_state</name> <op:operator pos:line="316" pos:column="28">=</op:operator> <call><name><name pos:line="316" pos:column="30">styler</name><op:operator pos:line="316" pos:column="36">.</op:operator><name pos:line="316" pos:column="37">StyleAt</name></name><argument_list pos:line="316" pos:column="44">(<argument><expr><name pos:line="316" pos:column="45">startPos</name> <op:operator pos:line="316" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="316" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="316" pos:column="59">&amp;</op:operator> <lit:literal type="number" pos:line="316" pos:column="61">31</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="317" pos:column="9">int</name></type> <name pos:line="317" pos:column="13">prevQuote</name> <init pos:line="317" pos:column="23">= <expr><name pos:line="317" pos:column="25">foldQuotes</name> <op:operator pos:line="317" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="317" pos:column="39">(</op:operator><op:operator pos:line="317" pos:column="40">(</op:operator><name pos:line="317" pos:column="41">prev_state</name> <op:operator pos:line="317" pos:column="52">==</op:operator> <name pos:line="317" pos:column="55">SCE_P_TRIPLE</name><op:operator pos:line="317" pos:column="67">)</op:operator> <op:operator pos:line="317" pos:column="69">||</op:operator>
	                               <op:operator pos:line="318" pos:column="40">(</op:operator><name pos:line="318" pos:column="41">prev_state</name> <op:operator pos:line="318" pos:column="52">==</op:operator> <name pos:line="318" pos:column="55">SCE_P_TRIPLEDOUBLE</name><op:operator pos:line="318" pos:column="73">)</op:operator><op:operator pos:line="318" pos:column="74">)</op:operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="319" pos:column="9">int</name></type> <name pos:line="319" pos:column="13">prevComment</name> <init pos:line="319" pos:column="25">= <expr><lit:literal type="number" pos:line="319" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="320" pos:column="9">if <condition pos:line="320" pos:column="12">(<expr><name pos:line="320" pos:column="13">lineCurrent</name> <op:operator pos:line="320" pos:column="25">&gt;=</op:operator> <lit:literal type="number" pos:line="320" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="320" pos:column="30">
		<expr_stmt><expr><name pos:line="321" pos:column="17">prevComment</name> <op:operator pos:line="321" pos:column="29">=</op:operator> <name pos:line="321" pos:column="31">foldComment</name> <op:operator pos:line="321" pos:column="43">&amp;&amp;</op:operator> <call><name pos:line="321" pos:column="46">IsCommentLine</name><argument_list pos:line="321" pos:column="59">(<argument><expr><name pos:line="321" pos:column="60">lineCurrent</name> <op:operator pos:line="321" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="321" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="321" pos:column="77">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<comment type="line" pos:line="323" pos:column="9">// Process all characters to end of requested range or end of any triple quote</comment>
	<comment type="line" pos:line="324" pos:column="9">// or comment that hangs over the end of the range.  Cap processing in all cases</comment>
	<comment type="line" pos:line="325" pos:column="9">// to end of document (in case of unclosed quote or comment at end).</comment>
	<while pos:line="326" pos:column="9">while <condition pos:line="326" pos:column="15">(<expr><op:operator pos:line="326" pos:column="16">(</op:operator><name pos:line="326" pos:column="17">lineCurrent</name> <op:operator pos:line="326" pos:column="29">&lt;=</op:operator> <name pos:line="326" pos:column="32">docLines</name><op:operator pos:line="326" pos:column="40">)</op:operator> <op:operator pos:line="326" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="326" pos:column="45">(</op:operator><op:operator pos:line="326" pos:column="46">(</op:operator><name pos:line="326" pos:column="47">lineCurrent</name> <op:operator pos:line="326" pos:column="59">&lt;=</op:operator> <name pos:line="326" pos:column="62">maxLines</name><op:operator pos:line="326" pos:column="70">)</op:operator> <op:operator pos:line="326" pos:column="72">||</op:operator>
	                                      <name pos:line="327" pos:column="47">prevQuote</name> <op:operator pos:line="327" pos:column="57">||</op:operator> <name pos:line="327" pos:column="60">prevComment</name><op:operator pos:line="327" pos:column="71">)</op:operator></expr>)</condition> <block pos:line="327" pos:column="74">{

		<comment type="line" pos:line="329" pos:column="17">// Gather info</comment>
		<decl_stmt><decl><type><name pos:line="330" pos:column="17">int</name></type> <name pos:line="330" pos:column="21">lev</name> <init pos:line="330" pos:column="25">= <expr><name pos:line="330" pos:column="27">indentCurrent</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="331" pos:column="17">int</name></type> <name pos:line="331" pos:column="21">lineNext</name> <init pos:line="331" pos:column="30">= <expr><name pos:line="331" pos:column="32">lineCurrent</name> <op:operator pos:line="331" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="331" pos:column="46">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="332" pos:column="17">int</name></type> <name pos:line="332" pos:column="21">indentNext</name> <init pos:line="332" pos:column="32">= <expr><name pos:line="332" pos:column="34">indentCurrent</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="333" pos:column="17">int</name></type> <name pos:line="333" pos:column="21">quote</name> <init pos:line="333" pos:column="27">= <expr><lit:literal type="boolean" pos:line="333" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="334" pos:column="17">if <condition pos:line="334" pos:column="20">(<expr><name pos:line="334" pos:column="21">lineNext</name> <op:operator pos:line="334" pos:column="30">&lt;=</op:operator> <name pos:line="334" pos:column="33">docLines</name></expr>)</condition><then pos:line="334" pos:column="42"> <block pos:line="334" pos:column="43">{
			<comment type="line" pos:line="335" pos:column="25">// Information about next line is only available if not at end of document</comment>
			<expr_stmt><expr><name pos:line="336" pos:column="25">indentNext</name> <op:operator pos:line="336" pos:column="36">=</op:operator> <call><name><name pos:line="336" pos:column="38">styler</name><op:operator pos:line="336" pos:column="44">.</op:operator><name pos:line="336" pos:column="45">IndentAmount</name></name><argument_list pos:line="336" pos:column="57">(<argument><expr><name pos:line="336" pos:column="58">lineNext</name></expr></argument>, <argument><expr><op:operator pos:line="336" pos:column="68">&amp;</op:operator><name pos:line="336" pos:column="69">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="81">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="337" pos:column="25">int</name></type> <name pos:line="337" pos:column="29">style</name> <init pos:line="337" pos:column="35">= <expr><call><name><name pos:line="337" pos:column="37">styler</name><op:operator pos:line="337" pos:column="43">.</op:operator><name pos:line="337" pos:column="44">StyleAt</name></name><argument_list pos:line="337" pos:column="51">(<argument><expr><call><name><name pos:line="337" pos:column="52">styler</name><op:operator pos:line="337" pos:column="58">.</op:operator><name pos:line="337" pos:column="59">LineStart</name></name><argument_list pos:line="337" pos:column="68">(<argument><expr><name pos:line="337" pos:column="69">lineNext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="337" pos:column="80">&amp;</op:operator> <lit:literal type="number" pos:line="337" pos:column="82">31</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="338" pos:column="25">quote</name> <op:operator pos:line="338" pos:column="31">=</op:operator> <name pos:line="338" pos:column="33">foldQuotes</name> <op:operator pos:line="338" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="338" pos:column="47">(</op:operator><op:operator pos:line="338" pos:column="48">(</op:operator><name pos:line="338" pos:column="49">style</name> <op:operator pos:line="338" pos:column="55">==</op:operator> <name pos:line="338" pos:column="58">SCE_P_TRIPLE</name><op:operator pos:line="338" pos:column="70">)</op:operator> <op:operator pos:line="338" pos:column="72">||</op:operator> <op:operator pos:line="338" pos:column="75">(</op:operator><name pos:line="338" pos:column="76">style</name> <op:operator pos:line="338" pos:column="82">==</op:operator> <name pos:line="338" pos:column="85">SCE_P_TRIPLEDOUBLE</name><op:operator pos:line="338" pos:column="103">)</op:operator><op:operator pos:line="338" pos:column="104">)</op:operator></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><specifier pos:line="340" pos:column="17">const</specifier> <name pos:line="340" pos:column="23">int</name></type> <name pos:line="340" pos:column="27">quote_start</name> <init pos:line="340" pos:column="39">= <expr><op:operator pos:line="340" pos:column="41">(</op:operator><name pos:line="340" pos:column="42">quote</name> <op:operator pos:line="340" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="340" pos:column="51">!</op:operator><name pos:line="340" pos:column="52">prevQuote</name><op:operator pos:line="340" pos:column="61">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="341" pos:column="17">const</specifier> <name pos:line="341" pos:column="23">int</name></type> <name pos:line="341" pos:column="27">quote_continue</name> <init pos:line="341" pos:column="42">= <expr><op:operator pos:line="341" pos:column="44">(</op:operator><name pos:line="341" pos:column="45">quote</name> <op:operator pos:line="341" pos:column="51">&amp;&amp;</op:operator> <name pos:line="341" pos:column="54">prevQuote</name><op:operator pos:line="341" pos:column="63">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="342" pos:column="17">const</specifier> <name pos:line="342" pos:column="23">int</name></type> <name pos:line="342" pos:column="27">comment</name> <init pos:line="342" pos:column="35">= <expr><name pos:line="342" pos:column="37">foldComment</name> <op:operator pos:line="342" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="342" pos:column="52">IsCommentLine</name><argument_list pos:line="342" pos:column="65">(<argument><expr><name pos:line="342" pos:column="66">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="342" pos:column="79">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="343" pos:column="17">const</specifier> <name pos:line="343" pos:column="23">int</name></type> <name pos:line="343" pos:column="27">comment_start</name> <init pos:line="343" pos:column="41">= <expr><op:operator pos:line="343" pos:column="43">(</op:operator><name pos:line="343" pos:column="44">comment</name> <op:operator pos:line="343" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="343" pos:column="55">!</op:operator><name pos:line="343" pos:column="56">prevComment</name> <op:operator pos:line="343" pos:column="68">&amp;&amp;</op:operator> <op:operator pos:line="343" pos:column="71">(</op:operator><name pos:line="343" pos:column="72">lineNext</name> <op:operator pos:line="343" pos:column="81">&lt;=</op:operator> <name pos:line="343" pos:column="84">docLines</name><op:operator pos:line="343" pos:column="92">)</op:operator> <op:operator pos:line="343" pos:column="94">&amp;&amp;</op:operator>
		                           <call><name pos:line="344" pos:column="44">IsCommentLine</name><argument_list pos:line="344" pos:column="57">(<argument><expr><name pos:line="344" pos:column="58">lineNext</name></expr></argument>, <argument><expr><name pos:line="344" pos:column="68">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="344" pos:column="76">&amp;&amp;</op:operator>
		                           <op:operator pos:line="345" pos:column="44">(</op:operator><name pos:line="345" pos:column="45">lev</name> <op:operator pos:line="345" pos:column="49">&gt;</op:operator> <name pos:line="345" pos:column="51">SC_FOLDLEVELBASE</name><op:operator pos:line="345" pos:column="67">)</op:operator><op:operator pos:line="345" pos:column="68">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="346" pos:column="17">const</specifier> <name pos:line="346" pos:column="23">int</name></type> <name pos:line="346" pos:column="27">comment_continue</name> <init pos:line="346" pos:column="44">= <expr><op:operator pos:line="346" pos:column="46">(</op:operator><name pos:line="346" pos:column="47">comment</name> <op:operator pos:line="346" pos:column="55">&amp;&amp;</op:operator> <name pos:line="346" pos:column="58">prevComment</name><op:operator pos:line="346" pos:column="69">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="347" pos:column="17">if <condition pos:line="347" pos:column="20">(<expr><op:operator pos:line="347" pos:column="21">(</op:operator><op:operator pos:line="347" pos:column="22">!</op:operator><name pos:line="347" pos:column="23">quote</name> <op:operator pos:line="347" pos:column="29">||</op:operator> <op:operator pos:line="347" pos:column="32">!</op:operator><name pos:line="347" pos:column="33">prevQuote</name><op:operator pos:line="347" pos:column="42">)</op:operator> <op:operator pos:line="347" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="347" pos:column="47">!</op:operator><name pos:line="347" pos:column="48">comment</name></expr>)</condition><then pos:line="347" pos:column="56">
			<expr_stmt><expr><name pos:line="348" pos:column="25">indentCurrentLevel</name> <op:operator pos:line="348" pos:column="44">=</op:operator> <name pos:line="348" pos:column="46">indentCurrent</name> <op:operator pos:line="348" pos:column="60">&amp;</op:operator> <name pos:line="348" pos:column="62">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt></then></if>
		<if pos:line="349" pos:column="17">if <condition pos:line="349" pos:column="20">(<expr><name pos:line="349" pos:column="21">quote</name></expr>)</condition><then pos:line="349" pos:column="27">
			<expr_stmt><expr><name pos:line="350" pos:column="25">indentNext</name> <op:operator pos:line="350" pos:column="36">=</op:operator> <name pos:line="350" pos:column="38">indentCurrentLevel</name></expr>;</expr_stmt></then></if>
		<if pos:line="351" pos:column="17">if <condition pos:line="351" pos:column="20">(<expr><name pos:line="351" pos:column="21">indentNext</name> <op:operator pos:line="351" pos:column="32">&amp;</op:operator> <name pos:line="351" pos:column="34">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="351" pos:column="56">
			<expr_stmt><expr><name pos:line="352" pos:column="25">indentNext</name> <op:operator pos:line="352" pos:column="36">=</op:operator> <name pos:line="352" pos:column="38">SC_FOLDLEVELWHITEFLAG</name> <op:operator pos:line="352" pos:column="60">|</op:operator> <name pos:line="352" pos:column="62">indentCurrentLevel</name></expr>;</expr_stmt></then></if>

		<if pos:line="354" pos:column="17">if <condition pos:line="354" pos:column="20">(<expr><name pos:line="354" pos:column="21">quote_start</name></expr>)</condition><then pos:line="354" pos:column="33"> <block pos:line="354" pos:column="34">{
			<comment type="line" pos:line="355" pos:column="25">// Place fold point at start of triple quoted string</comment>
			<expr_stmt><expr><name pos:line="356" pos:column="25">lev</name> <op:operator pos:line="356" pos:column="29">|=</op:operator> <name pos:line="356" pos:column="32">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="357" pos:column="19">else <if pos:line="357" pos:column="24">if <condition pos:line="357" pos:column="27">(<expr><name pos:line="357" pos:column="28">quote_continue</name> <op:operator pos:line="357" pos:column="43">||</op:operator> <name pos:line="357" pos:column="46">prevQuote</name></expr>)</condition><then pos:line="357" pos:column="56"> <block pos:line="357" pos:column="57">{
			<comment type="line" pos:line="358" pos:column="25">// Add level to rest of lines in the string</comment>
			<expr_stmt><expr><name pos:line="359" pos:column="25">lev</name> <op:operator pos:line="359" pos:column="29">=</op:operator> <name pos:line="359" pos:column="31">lev</name> <op:operator pos:line="359" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="359" pos:column="37">1</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="360" pos:column="19">else <if pos:line="360" pos:column="24">if <condition pos:line="360" pos:column="27">(<expr><name pos:line="360" pos:column="28">comment_start</name></expr>)</condition><then pos:line="360" pos:column="42"> <block pos:line="360" pos:column="43">{
			<comment type="line" pos:line="361" pos:column="25">// Place fold point at start of a block of comments</comment>
			<expr_stmt><expr><name pos:line="362" pos:column="25">lev</name> <op:operator pos:line="362" pos:column="29">|=</op:operator> <name pos:line="362" pos:column="32">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="363" pos:column="19">else <if pos:line="363" pos:column="24">if <condition pos:line="363" pos:column="27">(<expr><name pos:line="363" pos:column="28">comment_continue</name></expr>)</condition><then pos:line="363" pos:column="45"> <block pos:line="363" pos:column="46">{
			<comment type="line" pos:line="364" pos:column="25">// Add level to rest of lines in the block</comment>
			<expr_stmt><expr><name pos:line="365" pos:column="25">lev</name> <op:operator pos:line="365" pos:column="29">=</op:operator> <name pos:line="365" pos:column="31">lev</name> <op:operator pos:line="365" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="365" pos:column="37">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if></else></if>

		<comment type="line" pos:line="368" pos:column="17">// Skip past any blank lines for next indent level info; we skip also</comment>
		<comment type="line" pos:line="369" pos:column="17">// comments (all comments, not just those starting in column 0)</comment>
		<comment type="line" pos:line="370" pos:column="17">// which effectively folds them into surrounding code rather</comment>
		<comment type="line" pos:line="371" pos:column="17">// than screwing up folding.</comment>

		<while pos:line="373" pos:column="17">while <condition pos:line="373" pos:column="23">(<expr><op:operator pos:line="373" pos:column="24">!</op:operator><name pos:line="373" pos:column="25">quote</name> <op:operator pos:line="373" pos:column="31">&amp;&amp;</op:operator>
		        <op:operator pos:line="374" pos:column="25">(</op:operator><name pos:line="374" pos:column="26">lineNext</name> <op:operator pos:line="374" pos:column="35">&lt;</op:operator> <name pos:line="374" pos:column="37">docLines</name><op:operator pos:line="374" pos:column="45">)</op:operator> <op:operator pos:line="374" pos:column="47">&amp;&amp;</op:operator>
		        <op:operator pos:line="375" pos:column="25">(</op:operator><op:operator pos:line="375" pos:column="26">(</op:operator><name pos:line="375" pos:column="27">indentNext</name> <op:operator pos:line="375" pos:column="38">&amp;</op:operator> <name pos:line="375" pos:column="40">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="375" pos:column="61">)</op:operator> <op:operator pos:line="375" pos:column="63">||</op:operator>
		         <op:operator pos:line="376" pos:column="26">(</op:operator><name pos:line="376" pos:column="27">lineNext</name> <op:operator pos:line="376" pos:column="36">&lt;=</op:operator> <name pos:line="376" pos:column="39">docLines</name> <op:operator pos:line="376" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="376" pos:column="51">IsCommentLine</name><argument_list pos:line="376" pos:column="64">(<argument><expr><name pos:line="376" pos:column="65">lineNext</name></expr></argument>, <argument><expr><name pos:line="376" pos:column="75">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="376" pos:column="82">)</op:operator><op:operator pos:line="376" pos:column="83">)</op:operator></expr>)</condition> <block pos:line="376" pos:column="86">{

			<expr_stmt><expr><name pos:line="378" pos:column="25">lineNext</name><op:operator pos:line="378" pos:column="33">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="379" pos:column="25">indentNext</name> <op:operator pos:line="379" pos:column="36">=</op:operator> <call><name><name pos:line="379" pos:column="38">styler</name><op:operator pos:line="379" pos:column="44">.</op:operator><name pos:line="379" pos:column="45">IndentAmount</name></name><argument_list pos:line="379" pos:column="57">(<argument><expr><name pos:line="379" pos:column="58">lineNext</name></expr></argument>, <argument><expr><op:operator pos:line="379" pos:column="68">&amp;</op:operator><name pos:line="379" pos:column="69">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="379" pos:column="81">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<decl_stmt><decl><type><specifier pos:line="382" pos:column="17">const</specifier> <name pos:line="382" pos:column="23">int</name></type> <name pos:line="382" pos:column="27">levelAfterComments</name> <init pos:line="382" pos:column="46">= <expr><name pos:line="382" pos:column="48">indentNext</name> <op:operator pos:line="382" pos:column="59">&amp;</op:operator> <name pos:line="382" pos:column="61">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="383" pos:column="17">const</specifier> <name pos:line="383" pos:column="23">int</name></type> <name pos:line="383" pos:column="27">levelBeforeComments</name> <init pos:line="383" pos:column="47">=
		    <expr><call><name pos:line="384" pos:column="21">Maximum</name><argument_list pos:line="384" pos:column="28">(<argument><expr><name pos:line="384" pos:column="29">indentCurrentLevel</name></expr></argument>,<argument><expr><name pos:line="384" pos:column="48">levelAfterComments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="386" pos:column="17">// Now set all the indent levels on the lines we skipped</comment>
		<comment type="line" pos:line="387" pos:column="17">// Do this from end to start.  Once we encounter one line</comment>
		<comment type="line" pos:line="388" pos:column="17">// which is indented more than the line after the end of</comment>
		<comment type="line" pos:line="389" pos:column="17">// the comment-block, use the level of the block before</comment>

		<decl_stmt><decl><type><name pos:line="391" pos:column="17">int</name></type> <name pos:line="391" pos:column="21">skipLine</name> <init pos:line="391" pos:column="30">= <expr><name pos:line="391" pos:column="32">lineNext</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="392" pos:column="17">int</name></type> <name pos:line="392" pos:column="21">skipLevel</name> <init pos:line="392" pos:column="31">= <expr><name pos:line="392" pos:column="33">levelAfterComments</name></expr></init></decl>;</decl_stmt>

		<while pos:line="394" pos:column="17">while <condition pos:line="394" pos:column="23">(<expr><op:operator pos:line="394" pos:column="24">--</op:operator><name pos:line="394" pos:column="26">skipLine</name> <op:operator pos:line="394" pos:column="35">&gt;</op:operator> <name pos:line="394" pos:column="37">lineCurrent</name></expr>)</condition> <block pos:line="394" pos:column="50">{
			<decl_stmt><decl><type><name pos:line="395" pos:column="25">int</name></type> <name pos:line="395" pos:column="29">skipLineIndent</name> <init pos:line="395" pos:column="44">= <expr><call><name><name pos:line="395" pos:column="46">styler</name><op:operator pos:line="395" pos:column="52">.</op:operator><name pos:line="395" pos:column="53">IndentAmount</name></name><argument_list pos:line="395" pos:column="65">(<argument><expr><name pos:line="395" pos:column="66">skipLine</name></expr></argument>, <argument><expr><op:operator pos:line="395" pos:column="76">&amp;</op:operator><name pos:line="395" pos:column="77">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="395" pos:column="89">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="397" pos:column="25">if <condition pos:line="397" pos:column="28">(<expr><op:operator pos:line="397" pos:column="29">(</op:operator><name pos:line="397" pos:column="30">skipLineIndent</name> <op:operator pos:line="397" pos:column="45">&amp;</op:operator> <name pos:line="397" pos:column="47">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="397" pos:column="69">)</op:operator> <op:operator pos:line="397" pos:column="71">&gt;</op:operator> <name pos:line="397" pos:column="73">levelAfterComments</name></expr>)</condition><then pos:line="397" pos:column="92">
				<expr_stmt><expr><name pos:line="398" pos:column="33">skipLevel</name> <op:operator pos:line="398" pos:column="43">=</op:operator> <name pos:line="398" pos:column="45">levelBeforeComments</name></expr>;</expr_stmt></then></if>

			<decl_stmt><decl><type><name pos:line="400" pos:column="25">int</name></type> <name pos:line="400" pos:column="29">whiteFlag</name> <init pos:line="400" pos:column="39">= <expr><name pos:line="400" pos:column="41">skipLineIndent</name> <op:operator pos:line="400" pos:column="56">&amp;</op:operator> <name pos:line="400" pos:column="58">SC_FOLDLEVELWHITEFLAG</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="402" pos:column="25">styler</name><op:operator pos:line="402" pos:column="31">.</op:operator><name pos:line="402" pos:column="32">SetLevel</name></name><argument_list pos:line="402" pos:column="40">(<argument><expr><name pos:line="402" pos:column="41">skipLine</name></expr></argument>, <argument><expr><name pos:line="402" pos:column="51">skipLevel</name> <op:operator pos:line="402" pos:column="61">|</op:operator> <name pos:line="402" pos:column="63">whiteFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<comment type="line" pos:line="405" pos:column="17">// Set fold header on non-quote/non-comment line</comment>
		<if pos:line="406" pos:column="17">if <condition pos:line="406" pos:column="20">(<expr><op:operator pos:line="406" pos:column="21">!</op:operator><name pos:line="406" pos:column="22">quote</name> <op:operator pos:line="406" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="406" pos:column="31">!</op:operator><name pos:line="406" pos:column="32">comment</name> <op:operator pos:line="406" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="406" pos:column="43">!</op:operator><op:operator pos:line="406" pos:column="44">(</op:operator><name pos:line="406" pos:column="45">indentCurrent</name> <op:operator pos:line="406" pos:column="59">&amp;</op:operator> <name pos:line="406" pos:column="61">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="406" pos:column="82">)</op:operator></expr> )</condition><then pos:line="406" pos:column="85"> <block pos:line="406" pos:column="86">{
			<if pos:line="407" pos:column="25">if <condition pos:line="407" pos:column="28">(<expr><op:operator pos:line="407" pos:column="29">(</op:operator><name pos:line="407" pos:column="30">indentCurrent</name> <op:operator pos:line="407" pos:column="44">&amp;</op:operator> <name pos:line="407" pos:column="46">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="407" pos:column="68">)</op:operator> <op:operator pos:line="407" pos:column="70">&lt;</op:operator>
			     <op:operator pos:line="408" pos:column="30">(</op:operator><name pos:line="408" pos:column="31">indentNext</name> <op:operator pos:line="408" pos:column="42">&amp;</op:operator> <name pos:line="408" pos:column="44">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="408" pos:column="66">)</op:operator></expr>)</condition><then pos:line="408" pos:column="68">
				<expr_stmt><expr><name pos:line="409" pos:column="33">lev</name> <op:operator pos:line="409" pos:column="37">|=</op:operator> <name pos:line="409" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
		}</block></then></if>

		<comment type="line" pos:line="412" pos:column="17">// Keep track of triple quote and block comment state of previous line</comment>
		<expr_stmt><expr><name pos:line="413" pos:column="17">prevQuote</name> <op:operator pos:line="413" pos:column="27">=</op:operator> <name pos:line="413" pos:column="29">quote</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="414" pos:column="17">prevComment</name> <op:operator pos:line="414" pos:column="29">=</op:operator> <name pos:line="414" pos:column="31">comment_start</name> <op:operator pos:line="414" pos:column="45">||</op:operator> <name pos:line="414" pos:column="48">comment_continue</name></expr>;</expr_stmt>

		<comment type="line" pos:line="416" pos:column="17">// Set fold level for this line and move to next line</comment>
		<expr_stmt><expr><call><name><name pos:line="417" pos:column="17">styler</name><op:operator pos:line="417" pos:column="23">.</op:operator><name pos:line="417" pos:column="24">SetLevel</name></name><argument_list pos:line="417" pos:column="32">(<argument><expr><name pos:line="417" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="46">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="418" pos:column="17">indentCurrent</name> <op:operator pos:line="418" pos:column="31">=</op:operator> <name pos:line="418" pos:column="33">indentNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="419" pos:column="17">lineCurrent</name> <op:operator pos:line="419" pos:column="29">=</op:operator> <name pos:line="419" pos:column="31">lineNext</name></expr>;</expr_stmt>
	}</block></while>

	<comment type="line" pos:line="422" pos:column="9">// NOTE: Cannot set level of last line here because indentCurrent doesn't have</comment>
	<comment type="line" pos:line="423" pos:column="9">// header flag set; the loop above is crafted to take care of this case!</comment>
	<comment type="line" pos:line="424" pos:column="9">//styler.SetLevel(lineCurrent, indentCurrent);</comment>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="427" pos:column="1">static</specifier> <specifier pos:line="427" pos:column="8">const</specifier> <name pos:line="427" pos:column="14">char</name> <type:modifier pos:line="427" pos:column="19">*</type:modifier> <specifier pos:line="427" pos:column="21">const</specifier></type> <name><name pos:line="427" pos:column="27">nimrodWordListDesc</name><index pos:line="427" pos:column="45">[]</index></name> <init pos:line="427" pos:column="48">= <expr><block pos:line="427" pos:column="50">{
	<expr><lit:literal type="string" pos:line="428" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="429" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="432" pos:column="1">LexerModule</name></type> <name pos:line="432" pos:column="13">lmNimrod</name><argument_list pos:line="432" pos:column="21">(<argument><expr><name pos:line="432" pos:column="22">SCLEX_NIMROD</name></expr></argument>, <argument><expr><name pos:line="432" pos:column="36">ColouriseNimrodDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="432" pos:column="56">"nimrod"</lit:literal></expr></argument>, <argument><expr><name pos:line="432" pos:column="66">FoldNimrodDoc</name></expr></argument>,
				     <argument><expr><name pos:line="433" pos:column="38">nimrodWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
