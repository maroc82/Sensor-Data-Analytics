<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexCaml.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexCaml.cxx
 ** Lexer for Objective Caml.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2005-2009 by Robert Roessler &lt;robertr@rftp.com&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>
<comment type="block" pos:line="7" pos:column="1">/*	Release History
	20050204 Initial release.
	20050205 Quick compiler standards/"cleanliness" adjustment.
	20050206 Added cast for IsLeadByte().
	20050209 Changes to "external" build support.
	20050306 Fix for 1st-char-in-doc "corner" case.
	20050502 Fix for [harmless] one-past-the-end coloring.
	20050515 Refined numeric token recognition logic.
	20051125 Added 2nd "optional" keywords class.
	20051129 Support "magic" (read-only) comments for RCaml.
	20051204 Swtich to using StyleContext infrastructure.
	20090629 Add full Standard ML '97 support.
*/</comment>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file pos:line="24" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file pos:line="25" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file pos:line="26" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="38" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="40" pos:column="1">//	Since the Microsoft __iscsym[f] funcs are not ANSI...</comment>
<function><type><specifier pos:line="41" pos:column="1">inline</specifier> <name pos:line="41" pos:column="8">int</name></type>  <name pos:line="41" pos:column="13">iscaml</name><parameter_list pos:line="41" pos:column="19">(<param><decl><type><name pos:line="41" pos:column="20">int</name></type> <name pos:line="41" pos:column="24">c</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="27">{<return pos:line="41" pos:column="28">return <expr><call><name pos:line="41" pos:column="35">isalnum</name><argument_list pos:line="41" pos:column="42">(<argument><expr><name pos:line="41" pos:column="43">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="41" pos:column="46">||</op:operator> <name pos:line="41" pos:column="49">c</name> <op:operator pos:line="41" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="54">'_'</lit:literal></expr>;</return>}</block></function>
<function><type><specifier pos:line="42" pos:column="1">inline</specifier> <name pos:line="42" pos:column="8">int</name></type> <name pos:line="42" pos:column="12">iscamlf</name><parameter_list pos:line="42" pos:column="19">(<param><decl><type><name pos:line="42" pos:column="20">int</name></type> <name pos:line="42" pos:column="24">c</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="27">{<return pos:line="42" pos:column="28">return <expr><call><name pos:line="42" pos:column="35">isalpha</name><argument_list pos:line="42" pos:column="42">(<argument><expr><name pos:line="42" pos:column="43">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="46">||</op:operator> <name pos:line="42" pos:column="49">c</name> <op:operator pos:line="42" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="54">'_'</lit:literal></expr>;</return>}</block></function>

<decl_stmt><decl><type><specifier pos:line="44" pos:column="1">static</specifier> <specifier pos:line="44" pos:column="8">const</specifier> <name pos:line="44" pos:column="14">int</name></type> <name><name pos:line="44" pos:column="18">baseT</name><index pos:line="44" pos:column="23">[<expr><lit:literal type="number" pos:line="44" pos:column="24">24</lit:literal></expr>]</index></name> <init pos:line="44" pos:column="28">= <expr><block pos:line="44" pos:column="30">{
	<expr><lit:literal type="number" pos:line="45" pos:column="9">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="12">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="15">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="18">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="21">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="24">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="27">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="30">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="33">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="36">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="39">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="42">0</lit:literal></expr>,	<comment type="block" pos:line="45" pos:column="49">/* A - L */</comment>
	<expr><lit:literal type="number" pos:line="46" pos:column="9">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="12">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="15">8</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="18">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="21">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="24">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="27">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="30">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="33">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="36">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="46" pos:column="39">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="46" pos:column="41">16</lit:literal></expr>	<comment type="block" pos:line="46" pos:column="49">/* M - X */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef</cpp:directive> <name pos:line="49" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="50" pos:column="1">using namespace <name pos:line="50" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef</cpp:directive> <name pos:line="53" pos:column="8">BUILD_AS_EXTERNAL_LEXER</name></cpp:ifdef>
<comment type="block" pos:line="54" pos:column="1">/*
	(actually seems to work!)
*/</comment>
<cpp:include pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">include</cpp:directive> <cpp:file pos:line="57" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="58" pos:column="10">"WindowAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="59" pos:column="10">"ExternalLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:undef pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">undef</cpp:directive> <name pos:line="61" pos:column="8">EXT_LEXER_DECL</name></cpp:undef>
<cpp:define pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="62" pos:column="9">EXT_LEXER_DECL</name></cpp:macro> <cpp:value pos:line="62" pos:column="24">__declspec( dllexport ) __stdcall</cpp:value></cpp:define>

<cpp:if pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">if</cpp:directive> <expr><name pos:line="64" pos:column="5">PLAT_WIN</name></expr></cpp:if>
<cpp:include pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">include</cpp:directive> <cpp:file pos:line="65" pos:column="10">&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif</cpp:directive></cpp:endif>

<function_decl><type><specifier pos:line="68" pos:column="1">static</specifier> <name pos:line="68" pos:column="8">void</name></type> <name pos:line="68" pos:column="13">ColouriseCamlDoc</name><parameter_list pos:line="68" pos:column="29">(
	<param><decl><type><name pos:line="69" pos:column="9">unsigned</name> <name pos:line="69" pos:column="18">int</name></type> <name pos:line="69" pos:column="22">startPos</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="32">int</name></type> <name pos:line="69" pos:column="36">length</name></decl></param>,
	<param><decl><type><name pos:line="70" pos:column="9">int</name></type> <name pos:line="70" pos:column="13">initStyle</name></decl></param>,
	<param><decl><type><name pos:line="71" pos:column="9">WordList</name> <type:modifier pos:line="71" pos:column="18">*</type:modifier></type><name><name pos:line="71" pos:column="19">keywordlists</name><index pos:line="71" pos:column="31">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="72" pos:column="9">Accessor</name> <type:modifier pos:line="72" pos:column="18">&amp;</type:modifier></type><name pos:line="72" pos:column="19">styler</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier pos:line="74" pos:column="1">static</specifier> <name pos:line="74" pos:column="8">void</name></type> <name pos:line="74" pos:column="13">FoldCamlDoc</name><parameter_list pos:line="74" pos:column="24">(
	<param><decl><type><name pos:line="75" pos:column="9">unsigned</name> <name pos:line="75" pos:column="18">int</name></type> <name pos:line="75" pos:column="22">startPos</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="32">int</name></type> <name pos:line="75" pos:column="36">length</name></decl></param>,
	<param><decl><type><name pos:line="76" pos:column="9">int</name></type> <name pos:line="76" pos:column="13">initStyle</name></decl></param>,
	<param><decl><type><name pos:line="77" pos:column="9">WordList</name> <type:modifier pos:line="77" pos:column="18">*</type:modifier></type><name><name pos:line="77" pos:column="19">keywordlists</name><index pos:line="77" pos:column="31">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="78" pos:column="9">Accessor</name> <type:modifier pos:line="78" pos:column="18">&amp;</type:modifier></type><name pos:line="78" pos:column="19">styler</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier pos:line="80" pos:column="1">static</specifier> <name pos:line="80" pos:column="8">void</name></type> <name pos:line="80" pos:column="13">InternalLexOrFold</name><parameter_list pos:line="80" pos:column="30">(<param><decl><type><name pos:line="80" pos:column="31">int</name></type> <name pos:line="80" pos:column="35">lexOrFold</name></decl></param>, <param><decl><type><name pos:line="80" pos:column="46">unsigned</name> <name pos:line="80" pos:column="55">int</name></type> <name pos:line="80" pos:column="59">startPos</name></decl></param>, <param><decl><type><name pos:line="80" pos:column="69">int</name></type> <name pos:line="80" pos:column="73">length</name></decl></param>,
	<param><decl><type><name pos:line="81" pos:column="9">int</name></type> <name pos:line="81" pos:column="13">initStyle</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="24">char</name> <type:modifier pos:line="81" pos:column="29">*</type:modifier></type><name><name pos:line="81" pos:column="30">words</name><index pos:line="81" pos:column="35">[]</index></name></decl></param>, <param><decl><type><name pos:line="81" pos:column="39">WindowID</name></type> <name pos:line="81" pos:column="48">window</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="56">char</name> <type:modifier pos:line="81" pos:column="61">*</type:modifier></type><name pos:line="81" pos:column="62">props</name></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier pos:line="83" pos:column="1">static</specifier> <specifier pos:line="83" pos:column="8">const</specifier> <name pos:line="83" pos:column="14">char</name><type:modifier pos:line="83" pos:column="18">*</type:modifier></type> <name pos:line="83" pos:column="20">LexerName</name> <init pos:line="83" pos:column="30">= <expr><lit:literal type="string" pos:line="83" pos:column="32">"caml"</lit:literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">ifdef</cpp:directive> <name pos:line="85" pos:column="8">TRACE</name></cpp:ifdef>
<function><type><name pos:line="86" pos:column="1">void</name></type> <name><name pos:line="86" pos:column="6">Platform</name><op:operator pos:line="86" pos:column="14">::</op:operator><name pos:line="86" pos:column="16">DebugPrintf</name></name><parameter_list pos:line="86" pos:column="27">(<param><decl><type><specifier pos:line="86" pos:column="28">const</specifier> <name pos:line="86" pos:column="34">char</name> <type:modifier pos:line="86" pos:column="39">*</type:modifier></type><name pos:line="86" pos:column="40">format</name></decl></param>, <param><decl><type><type:modifier pos:line="86" pos:column="48">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="86" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">char</name></type> <name><name pos:line="87" pos:column="14">buffer</name><index pos:line="87" pos:column="20">[<expr><lit:literal type="number" pos:line="87" pos:column="21">2000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">va_list</name></type> <name pos:line="88" pos:column="17">pArguments</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="89" pos:column="9">va_start</name><argument_list pos:line="89" pos:column="17">(<argument><expr><name pos:line="89" pos:column="18">pArguments</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="30">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="90" pos:column="9">vsprintf</name><argument_list pos:line="90" pos:column="17">(<argument><expr><name pos:line="90" pos:column="18">buffer</name></expr></argument>,<argument><expr><name pos:line="90" pos:column="25">format</name></expr></argument>,<argument><expr><name pos:line="90" pos:column="32">pArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="91" pos:column="9">va_end</name><argument_list pos:line="91" pos:column="15">(<argument><expr><name pos:line="91" pos:column="16">pArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="92" pos:column="9">Platform</name><op:operator pos:line="92" pos:column="17">::</op:operator><name pos:line="92" pos:column="19">DebugDisplay</name></name><argument_list pos:line="92" pos:column="31">(<argument><expr><name pos:line="92" pos:column="32">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">else</cpp:directive></cpp:else>
<function><type><name pos:line="95" pos:column="1">void</name></type> <name><name pos:line="95" pos:column="6">Platform</name><op:operator pos:line="95" pos:column="14">::</op:operator><name pos:line="95" pos:column="16">DebugPrintf</name></name><parameter_list pos:line="95" pos:column="27">(<param><decl><type><specifier pos:line="95" pos:column="28">const</specifier></type> <name pos:line="95" pos:column="34">char</name> <type:modifier pos:line="95" pos:column="39">*</type:modifier></decl></param>, <param><decl><type><type:modifier pos:line="95" pos:column="42">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="95" pos:column="47">{
}</block></function>
<cpp:endif pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="99" pos:column="1">bool</name></type> <name><name pos:line="99" pos:column="6">Platform</name><op:operator pos:line="99" pos:column="14">::</op:operator><name pos:line="99" pos:column="16">IsDBCSLeadByte</name></name><parameter_list pos:line="99" pos:column="30">(<param><decl><type><name pos:line="99" pos:column="31">int</name></type> <name pos:line="99" pos:column="35">codePage</name></decl></param>, <param><decl><type><name pos:line="99" pos:column="45">char</name></type> <name pos:line="99" pos:column="50">ch</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="54">{
	<return pos:line="100" pos:column="9">return <expr><call><name><op:operator pos:line="100" pos:column="16">::</op:operator><name pos:line="100" pos:column="18">IsDBCSLeadByteEx</name></name><argument_list pos:line="100" pos:column="34">(<argument><expr><name pos:line="100" pos:column="35">codePage</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="100" pos:column="49">!=</op:operator> <lit:literal type="number" pos:line="100" pos:column="52">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="103" pos:column="1">long</name></type> <name><name pos:line="103" pos:column="6">Platform</name><op:operator pos:line="103" pos:column="14">::</op:operator><name pos:line="103" pos:column="16">SendScintilla</name></name><parameter_list pos:line="103" pos:column="29">(<param><decl><type><name pos:line="103" pos:column="30">WindowID</name></type> <name pos:line="103" pos:column="39">w</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="42">unsigned</name> <name pos:line="103" pos:column="51">int</name></type> <name pos:line="103" pos:column="55">msg</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="60">unsigned</name> <name pos:line="103" pos:column="69">long</name></type> <name pos:line="103" pos:column="74">wParam</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="82">long</name></type> <name pos:line="103" pos:column="87">lParam</name></decl></param>)</parameter_list> <block pos:line="103" pos:column="95">{
	<return pos:line="104" pos:column="9">return <expr><call><name><op:operator pos:line="104" pos:column="16">::</op:operator><name pos:line="104" pos:column="18">SendMessage</name></name><argument_list pos:line="104" pos:column="29">(<argument><expr><call><name><name pos:line="104" pos:column="30">reinterpret_cast</name><argument_list pos:line="104" pos:column="46">&lt;<argument><expr><name pos:line="104" pos:column="47">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="104" pos:column="52">(<argument><expr><name pos:line="104" pos:column="53">w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="104" pos:column="57">msg</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="62">wParam</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="70">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="107" pos:column="1">long</name></type> <name><name pos:line="107" pos:column="6">Platform</name><op:operator pos:line="107" pos:column="14">::</op:operator><name pos:line="107" pos:column="16">SendScintillaPointer</name></name><parameter_list pos:line="107" pos:column="36">(<param><decl><type><name pos:line="107" pos:column="37">WindowID</name></type> <name pos:line="107" pos:column="46">w</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="49">unsigned</name> <name pos:line="107" pos:column="58">int</name></type> <name pos:line="107" pos:column="62">msg</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="67">unsigned</name> <name pos:line="107" pos:column="76">long</name></type> <name pos:line="107" pos:column="81">wParam</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="89">void</name> <type:modifier pos:line="107" pos:column="94">*</type:modifier></type><name pos:line="107" pos:column="95">lParam</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="103">{
	<return pos:line="108" pos:column="9">return <expr><call><name><op:operator pos:line="108" pos:column="16">::</op:operator><name pos:line="108" pos:column="18">SendMessage</name></name><argument_list pos:line="108" pos:column="29">(<argument><expr><call><name><name pos:line="108" pos:column="30">reinterpret_cast</name><argument_list pos:line="108" pos:column="46">&lt;<argument><expr><name pos:line="108" pos:column="47">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="108" pos:column="52">(<argument><expr><name pos:line="108" pos:column="53">w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="108" pos:column="57">msg</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="62">wParam</name></expr></argument>,
		<argument><expr><call><name><name pos:line="109" pos:column="17">reinterpret_cast</name><argument_list pos:line="109" pos:column="33">&lt;<argument><expr><name pos:line="109" pos:column="34">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="109" pos:column="41">(<argument><expr><name pos:line="109" pos:column="42">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="112" pos:column="1">void</name> <name pos:line="112" pos:column="6">EXT_LEXER_DECL</name></type> <name pos:line="112" pos:column="21">Fold</name><parameter_list pos:line="112" pos:column="25">(<param><decl><type><name pos:line="112" pos:column="26">unsigned</name> <name pos:line="112" pos:column="35">int</name></type> <name pos:line="112" pos:column="39">lexer</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="46">unsigned</name> <name pos:line="112" pos:column="55">int</name></type> <name pos:line="112" pos:column="59">startPos</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="69">int</name></type> <name pos:line="112" pos:column="73">length</name></decl></param>,
	<param><decl><type><name pos:line="113" pos:column="9">int</name></type> <name pos:line="113" pos:column="13">initStyle</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="24">char</name> <type:modifier pos:line="113" pos:column="29">*</type:modifier></type><name><name pos:line="113" pos:column="30">words</name><index pos:line="113" pos:column="35">[]</index></name></decl></param>, <param><decl><type><name pos:line="113" pos:column="39">WindowID</name></type> <name pos:line="113" pos:column="48">window</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="56">char</name> <type:modifier pos:line="113" pos:column="61">*</type:modifier></type><name pos:line="113" pos:column="62">props</name></decl></param>)</parameter_list>
<block pos:line="114" pos:column="1">{
	<comment type="line" pos:line="115" pos:column="9">// below useless evaluation(s) to supress "not used" warnings</comment>
	<expr_stmt><expr><name pos:line="116" pos:column="9">lexer</name></expr>;</expr_stmt>
	<comment type="line" pos:line="117" pos:column="9">// build expected data structures and do the Fold</comment>
	<expr_stmt><expr><call><name pos:line="118" pos:column="9">InternalLexOrFold</name><argument_list pos:line="118" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="118" pos:column="27">1</lit:literal></expr></argument>, <argument><expr><name pos:line="118" pos:column="30">startPos</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="40">length</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="48">initStyle</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="59">words</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="66">window</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="74">props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name pos:line="122" pos:column="1">int</name> <name pos:line="122" pos:column="5">EXT_LEXER_DECL</name></type> <name pos:line="122" pos:column="20">GetLexerCount</name><parameter_list pos:line="122" pos:column="33">()</parameter_list>
<block pos:line="123" pos:column="1">{
	<return pos:line="124" pos:column="9">return <expr><lit:literal type="number" pos:line="124" pos:column="16">1</lit:literal></expr>;</return>	<comment type="line" pos:line="124" pos:column="25">// just us [Objective] Caml lexers here!</comment>
}</block></function>

<function><type><name pos:line="127" pos:column="1">void</name> <name pos:line="127" pos:column="6">EXT_LEXER_DECL</name></type> <name pos:line="127" pos:column="21">GetLexerName</name><parameter_list pos:line="127" pos:column="33">(<param><decl><type><name pos:line="127" pos:column="34">unsigned</name> <name pos:line="127" pos:column="43">int</name></type> <name pos:line="127" pos:column="47">Index</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="54">char</name> <type:modifier pos:line="127" pos:column="59">*</type:modifier></type><name pos:line="127" pos:column="60">name</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="66">int</name></type> <name pos:line="127" pos:column="70">buflength</name></decl></param>)</parameter_list>
<block pos:line="128" pos:column="1">{
	<comment type="line" pos:line="129" pos:column="9">// below useless evaluation(s) to supress "not used" warnings</comment>
	<expr_stmt><expr><name pos:line="130" pos:column="9">Index</name></expr>;</expr_stmt>
	<comment type="line" pos:line="131" pos:column="9">// return as much of our lexer name as will fit (what's up with Index?)</comment>
	<if pos:line="132" pos:column="9">if <condition pos:line="132" pos:column="12">(<expr><name pos:line="132" pos:column="13">buflength</name> <op:operator pos:line="132" pos:column="23">&gt;</op:operator> <lit:literal type="number" pos:line="132" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="132" pos:column="27"> <block pos:line="132" pos:column="28">{
		<expr_stmt><expr><name pos:line="133" pos:column="17">buflength</name><op:operator pos:line="133" pos:column="26">--</op:operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="134" pos:column="17">int</name></type> <name pos:line="134" pos:column="21">n</name> <init pos:line="134" pos:column="23">= <expr><call><name pos:line="134" pos:column="25">strlen</name><argument_list pos:line="134" pos:column="31">(<argument><expr><name pos:line="134" pos:column="32">LexerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="135" pos:column="17">if <condition pos:line="135" pos:column="20">(<expr><name pos:line="135" pos:column="21">n</name> <op:operator pos:line="135" pos:column="23">&gt;</op:operator> <name pos:line="135" pos:column="25">buflength</name></expr>)</condition><then pos:line="135" pos:column="35">
			<expr_stmt><expr><name pos:line="136" pos:column="25">n</name> <op:operator pos:line="136" pos:column="27">=</op:operator> <name pos:line="136" pos:column="29">buflength</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name pos:line="137" pos:column="17">memcpy</name><argument_list pos:line="137" pos:column="23">(<argument><expr><name pos:line="137" pos:column="24">name</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="30">LexerName</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="41">n</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="137" pos:column="43">,</op:operator> <expr><name><name pos:line="137" pos:column="45">name</name><index pos:line="137" pos:column="49">[<expr><name pos:line="137" pos:column="50">n</name></expr>]</index></name> <op:operator pos:line="137" pos:column="53">=</op:operator> <lit:literal type="char" pos:line="137" pos:column="55">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="141" pos:column="1">void</name> <name pos:line="141" pos:column="6">EXT_LEXER_DECL</name></type> <name pos:line="141" pos:column="21">Lex</name><parameter_list pos:line="141" pos:column="24">(<param><decl><type><name pos:line="141" pos:column="25">unsigned</name> <name pos:line="141" pos:column="34">int</name></type> <name pos:line="141" pos:column="38">lexer</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="45">unsigned</name> <name pos:line="141" pos:column="54">int</name></type> <name pos:line="141" pos:column="58">startPos</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="68">int</name></type> <name pos:line="141" pos:column="72">length</name></decl></param>,
	<param><decl><type><name pos:line="142" pos:column="9">int</name></type> <name pos:line="142" pos:column="13">initStyle</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="24">char</name> <type:modifier pos:line="142" pos:column="29">*</type:modifier></type><name><name pos:line="142" pos:column="30">words</name><index pos:line="142" pos:column="35">[]</index></name></decl></param>, <param><decl><type><name pos:line="142" pos:column="39">WindowID</name></type> <name pos:line="142" pos:column="48">window</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="56">char</name> <type:modifier pos:line="142" pos:column="61">*</type:modifier></type><name pos:line="142" pos:column="62">props</name></decl></param>)</parameter_list>
<block pos:line="143" pos:column="1">{
	<comment type="line" pos:line="144" pos:column="9">// below useless evaluation(s) to supress "not used" warnings</comment>
	<expr_stmt><expr><name pos:line="145" pos:column="9">lexer</name></expr>;</expr_stmt>
	<comment type="line" pos:line="146" pos:column="9">// build expected data structures and do the Lex</comment>
	<expr_stmt><expr><call><name pos:line="147" pos:column="9">InternalLexOrFold</name><argument_list pos:line="147" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="147" pos:column="27">0</lit:literal></expr></argument>, <argument><expr><name pos:line="147" pos:column="30">startPos</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="40">length</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="48">initStyle</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="59">words</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="66">window</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="74">props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="150" pos:column="1">static</specifier> <name pos:line="150" pos:column="8">void</name></type> <name pos:line="150" pos:column="13">InternalLexOrFold</name><parameter_list pos:line="150" pos:column="30">(<param><decl><type><name pos:line="150" pos:column="31">int</name></type> <name pos:line="150" pos:column="35">foldOrLex</name></decl></param>, <param><decl><type><name pos:line="150" pos:column="46">unsigned</name> <name pos:line="150" pos:column="55">int</name></type> <name pos:line="150" pos:column="59">startPos</name></decl></param>, <param><decl><type><name pos:line="150" pos:column="69">int</name></type> <name pos:line="150" pos:column="73">length</name></decl></param>,
	<param><decl><type><name pos:line="151" pos:column="9">int</name></type> <name pos:line="151" pos:column="13">initStyle</name></decl></param>, <param><decl><type><name pos:line="151" pos:column="24">char</name> <type:modifier pos:line="151" pos:column="29">*</type:modifier></type><name><name pos:line="151" pos:column="30">words</name><index pos:line="151" pos:column="35">[]</index></name></decl></param>, <param><decl><type><name pos:line="151" pos:column="39">WindowID</name></type> <name pos:line="151" pos:column="48">window</name></decl></param>, <param><decl><type><name pos:line="151" pos:column="56">char</name> <type:modifier pos:line="151" pos:column="61">*</type:modifier></type><name pos:line="151" pos:column="62">props</name></decl></param>)</parameter_list>
<block pos:line="152" pos:column="1">{
	<comment type="line" pos:line="153" pos:column="9">// create and initialize a WindowAccessor (including contained PropSet)</comment>
	<decl_stmt><decl><type><name pos:line="154" pos:column="9">PropSetSimple</name></type> <name pos:line="154" pos:column="23">ps</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="155" pos:column="9">ps</name><op:operator pos:line="155" pos:column="11">.</op:operator><name pos:line="155" pos:column="12">SetMultiple</name></name><argument_list pos:line="155" pos:column="23">(<argument><expr><name pos:line="155" pos:column="24">props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<function_decl><type><name pos:line="156" pos:column="9">WindowAccessor</name></type> <name pos:line="156" pos:column="24">wa</name><parameter_list pos:line="156" pos:column="26">(<param><decl><type><name pos:line="156" pos:column="27">window</name></type></decl></param>, <param><decl><type><name pos:line="156" pos:column="35">ps</name></type></decl></param>)</parameter_list>;</function_decl>
	<comment type="line" pos:line="157" pos:column="9">// create and initialize WordList(s)</comment>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">int</name></type> <name pos:line="158" pos:column="13">nWL</name> <init pos:line="158" pos:column="17">= <expr><lit:literal type="number" pos:line="158" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="159" pos:column="9">for (<init pos:line="159" pos:column="14">;</init> <condition><expr><name><name pos:line="159" pos:column="16">words</name><index pos:line="159" pos:column="21">[<expr><name pos:line="159" pos:column="22">nWL</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="159" pos:column="28">nWL</name><op:operator pos:line="159" pos:column="31">++</op:operator></expr></incr>) <empty_stmt pos:line="159" pos:column="35">;</empty_stmt></for>	<comment type="line" pos:line="159" pos:column="41">// count # of WordList PTRs needed</comment>
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">WordList</name><type:modifier pos:line="160" pos:column="17">*</type:modifier><type:modifier pos:line="160" pos:column="18">*</type:modifier></type> <name pos:line="160" pos:column="20">wl</name> <init pos:line="160" pos:column="23">= <expr><op:operator pos:line="160" pos:column="25">new</op:operator> <name pos:line="160" pos:column="29">WordList</name><op:operator pos:line="160" pos:column="37">*</op:operator> <index pos:line="160" pos:column="39">[<expr><name pos:line="160" pos:column="40">nWL</name> <op:operator pos:line="160" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="160" pos:column="46">1</lit:literal></expr>]</index></expr></init></decl>;</decl_stmt><comment type="line" pos:line="160" pos:column="49">// alloc WordList PTRs</comment>
	<decl_stmt><decl><type><name pos:line="161" pos:column="9">int</name></type> <name pos:line="161" pos:column="13">i</name> <init pos:line="161" pos:column="15">= <expr><lit:literal type="number" pos:line="161" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="162" pos:column="9">for (<init pos:line="162" pos:column="14">;</init> <condition><expr><name pos:line="162" pos:column="16">i</name> <op:operator pos:line="162" pos:column="18">&lt;</op:operator> <name pos:line="162" pos:column="20">nWL</name></expr>;</condition> <incr><expr><name pos:line="162" pos:column="25">i</name><op:operator pos:line="162" pos:column="26">++</op:operator></expr></incr>) <block pos:line="162" pos:column="30">{
		<expr_stmt><expr><name><name pos:line="163" pos:column="17">wl</name><index pos:line="163" pos:column="19">[<expr><name pos:line="163" pos:column="20">i</name></expr>]</index></name> <op:operator pos:line="163" pos:column="23">=</op:operator> <op:operator pos:line="163" pos:column="25">new</op:operator> <call><name pos:line="163" pos:column="29">WordList</name><argument_list pos:line="163" pos:column="37">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="163" pos:column="41">// (works or THROWS bad_alloc EXCEPTION)</comment>
		<expr_stmt><expr><name><name pos:line="164" pos:column="17">wl</name><index pos:line="164" pos:column="19">[<expr><name pos:line="164" pos:column="20">i</name></expr>]</index></name><op:operator pos:line="164" pos:column="22">-&gt;</op:operator><call><name pos:line="164" pos:column="24">Set</name><argument_list pos:line="164" pos:column="27">(<argument><expr><name><name pos:line="164" pos:column="28">words</name><index pos:line="164" pos:column="33">[<expr><name pos:line="164" pos:column="34">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="166" pos:column="9">wl</name><index pos:line="166" pos:column="11">[<expr><name pos:line="166" pos:column="12">i</name></expr>]</index></name> <op:operator pos:line="166" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="166" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<comment type="line" pos:line="167" pos:column="9">// call our "internal" folder/lexer (... then do Flush!)</comment>
	<if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><name pos:line="168" pos:column="13">foldOrLex</name></expr>)</condition><then pos:line="168" pos:column="23">
		<expr_stmt><expr><call><name pos:line="169" pos:column="17">FoldCamlDoc</name><argument_list pos:line="169" pos:column="28">(<argument><expr><name pos:line="169" pos:column="29">startPos</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="39">length</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="47">initStyle</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="58">wl</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="62">wa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="170" pos:column="9">else
		<expr_stmt><expr><call><name pos:line="171" pos:column="17">ColouriseCamlDoc</name><argument_list pos:line="171" pos:column="33">(<argument><expr><name pos:line="171" pos:column="34">startPos</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="44">length</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="52">initStyle</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="63">wl</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="67">wa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<expr_stmt><expr><call><name><name pos:line="172" pos:column="9">wa</name><op:operator pos:line="172" pos:column="11">.</op:operator><name pos:line="172" pos:column="12">Flush</name></name><argument_list pos:line="172" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="173" pos:column="9">// clean up before leaving</comment>
	<for pos:line="174" pos:column="9">for (<init><expr><name pos:line="174" pos:column="14">i</name> <op:operator pos:line="174" pos:column="16">=</op:operator> <name pos:line="174" pos:column="18">nWL</name> <op:operator pos:line="174" pos:column="22">-</op:operator> <lit:literal type="number" pos:line="174" pos:column="24">1</lit:literal></expr>;</init> <condition><expr><name pos:line="174" pos:column="27">i</name> <op:operator pos:line="174" pos:column="29">&gt;=</op:operator> <lit:literal type="number" pos:line="174" pos:column="32">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="174" pos:column="35">i</name><op:operator pos:line="174" pos:column="36">--</op:operator></expr></incr>)
		<expr_stmt><expr><op:operator pos:line="175" pos:column="17">delete</op:operator> <name><name pos:line="175" pos:column="24">wl</name><index pos:line="175" pos:column="26">[<expr><name pos:line="175" pos:column="27">i</name></expr>]</index></name></expr>;</expr_stmt></for>
	<expr_stmt><expr><op:operator pos:line="176" pos:column="9">delete</op:operator> <index pos:line="176" pos:column="16">[]</index> <name pos:line="176" pos:column="19">wl</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="179" pos:column="1">static</specifier>
<cpp:endif pos:line="180" pos:column="1">#<cpp:directive pos:line="180" pos:column="2">endif</cpp:directive></cpp:endif>	<comment type="block" pos:line="180" pos:column="9">/* BUILD_AS_EXTERNAL_LEXER */</comment>

<name pos:line="182" pos:column="1">void</name></type> <name pos:line="182" pos:column="6">ColouriseCamlDoc</name><parameter_list pos:line="182" pos:column="22">(
	<param><decl><type><name pos:line="183" pos:column="9">unsigned</name> <name pos:line="183" pos:column="18">int</name></type> <name pos:line="183" pos:column="22">startPos</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="32">int</name></type> <name pos:line="183" pos:column="36">length</name></decl></param>,
	<param><decl><type><name pos:line="184" pos:column="9">int</name></type> <name pos:line="184" pos:column="13">initStyle</name></decl></param>,
	<param><decl><type><name pos:line="185" pos:column="9">WordList</name> <type:modifier pos:line="185" pos:column="18">*</type:modifier></type><name><name pos:line="185" pos:column="19">keywordlists</name><index pos:line="185" pos:column="31">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="186" pos:column="9">Accessor</name> <type:modifier pos:line="186" pos:column="18">&amp;</type:modifier></type><name pos:line="186" pos:column="19">styler</name></decl></param>)</parameter_list>
<block pos:line="187" pos:column="1">{
	<comment type="line" pos:line="188" pos:column="9">// initialize styler</comment>
	<function_decl><type><name pos:line="189" pos:column="9">StyleContext</name></type> <name pos:line="189" pos:column="22">sc</name><parameter_list pos:line="189" pos:column="24">(<param><decl><type><name pos:line="189" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="189" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="189" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="189" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="191" pos:column="9">int</name></type> <name pos:line="191" pos:column="13">chBase</name> <init pos:line="191" pos:column="20">= <expr><lit:literal type="number" pos:line="191" pos:column="22">0</lit:literal></expr></init><op:operator pos:line="191" pos:column="23">,</op:operator> <name pos:line="191" pos:column="25">chToken</name> <init pos:line="191" pos:column="33">= <expr><lit:literal type="number" pos:line="191" pos:column="35">0</lit:literal></expr></init><op:operator pos:line="191" pos:column="36">,</op:operator> <name pos:line="191" pos:column="38">chLit</name> <init pos:line="191" pos:column="44">= <expr><lit:literal type="number" pos:line="191" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="192" pos:column="9">WordList</name><type:modifier pos:line="192" pos:column="17">&amp;</type:modifier></type> <name pos:line="192" pos:column="19">keywords</name>  <init pos:line="192" pos:column="29">= <expr><op:operator pos:line="192" pos:column="31">*</op:operator><name><name pos:line="192" pos:column="32">keywordlists</name><index pos:line="192" pos:column="44">[<expr><lit:literal type="number" pos:line="192" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="193" pos:column="9">WordList</name><type:modifier pos:line="193" pos:column="17">&amp;</type:modifier></type> <name pos:line="193" pos:column="19">keywords2</name> <init pos:line="193" pos:column="29">= <expr><op:operator pos:line="193" pos:column="31">*</op:operator><name><name pos:line="193" pos:column="32">keywordlists</name><index pos:line="193" pos:column="44">[<expr><lit:literal type="number" pos:line="193" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="194" pos:column="9">WordList</name><type:modifier pos:line="194" pos:column="17">&amp;</type:modifier></type> <name pos:line="194" pos:column="19">keywords3</name> <init pos:line="194" pos:column="29">= <expr><op:operator pos:line="194" pos:column="31">*</op:operator><name><name pos:line="194" pos:column="32">keywordlists</name><index pos:line="194" pos:column="44">[<expr><lit:literal type="number" pos:line="194" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="195" pos:column="9">const</specifier> <name pos:line="195" pos:column="15">bool</name></type> <name pos:line="195" pos:column="20">isSML</name> <init pos:line="195" pos:column="26">= <expr><call><name><name pos:line="195" pos:column="28">keywords</name><op:operator pos:line="195" pos:column="36">.</op:operator><name pos:line="195" pos:column="37">InList</name></name><argument_list pos:line="195" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="44">"andalso"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="196" pos:column="9">const</specifier> <name pos:line="196" pos:column="15">int</name></type> <name pos:line="196" pos:column="19">useMagic</name> <init pos:line="196" pos:column="28">= <expr><call><name><name pos:line="196" pos:column="30">styler</name><op:operator pos:line="196" pos:column="36">.</op:operator><name pos:line="196" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="196" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="52">"lexer.caml.magic"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="196" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="198" pos:column="9">// set up [initial] state info (terminating states that shouldn't "bleed")</comment>
	<decl_stmt><decl><type><specifier pos:line="199" pos:column="9">const</specifier> <name pos:line="199" pos:column="15">int</name></type> <name pos:line="199" pos:column="19">state_</name> <init pos:line="199" pos:column="26">= <expr><name><name pos:line="199" pos:column="28">sc</name><op:operator pos:line="199" pos:column="30">.</op:operator><name pos:line="199" pos:column="31">state</name></name> <op:operator pos:line="199" pos:column="37">&amp;</op:operator> <lit:literal type="number" pos:line="199" pos:column="39">0x0f</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="200" pos:column="9">if <condition pos:line="200" pos:column="12">(<expr><name pos:line="200" pos:column="13">state_</name> <op:operator pos:line="200" pos:column="20">&lt;=</op:operator> <name pos:line="200" pos:column="23">SCE_CAML_CHAR</name>
		<op:operator pos:line="201" pos:column="17">||</op:operator> <op:operator pos:line="201" pos:column="20">(</op:operator><name pos:line="201" pos:column="21">isSML</name> <op:operator pos:line="201" pos:column="27">&amp;&amp;</op:operator> <name pos:line="201" pos:column="30">state_</name> <op:operator pos:line="201" pos:column="37">==</op:operator> <name pos:line="201" pos:column="40">SCE_CAML_STRING</name><op:operator pos:line="201" pos:column="55">)</op:operator></expr>)</condition><then pos:line="201" pos:column="57">
		<expr_stmt><expr><name><name pos:line="202" pos:column="17">sc</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">state</name></name> <op:operator pos:line="202" pos:column="26">=</op:operator> <name pos:line="202" pos:column="28">SCE_CAML_DEFAULT</name></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="203" pos:column="9">int</name></type> <name pos:line="203" pos:column="13">nesting</name> <init pos:line="203" pos:column="21">= <expr><op:operator pos:line="203" pos:column="23">(</op:operator><name pos:line="203" pos:column="24">state_</name> <op:operator pos:line="203" pos:column="31">&gt;=</op:operator> <name pos:line="203" pos:column="34">SCE_CAML_COMMENT</name><op:operator pos:line="203" pos:column="50">)</op:operator><op:operator pos:line="203" pos:column="51">?</op:operator> <op:operator pos:line="203" pos:column="53">(</op:operator><name pos:line="203" pos:column="54">state_</name> <op:operator pos:line="203" pos:column="61">-</op:operator> <name pos:line="203" pos:column="63">SCE_CAML_COMMENT</name><op:operator pos:line="203" pos:column="79">)</op:operator><op:operator pos:line="203" pos:column="80">:</op:operator> <lit:literal type="number" pos:line="203" pos:column="82">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="205" pos:column="9">// foreach char in range...</comment>
	<while pos:line="206" pos:column="9">while <condition pos:line="206" pos:column="15">(<expr><call><name><name pos:line="206" pos:column="16">sc</name><op:operator pos:line="206" pos:column="18">.</op:operator><name pos:line="206" pos:column="19">More</name></name><argument_list pos:line="206" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="206" pos:column="27">{
		<comment type="line" pos:line="207" pos:column="17">// set up [per-char] state info</comment>
		<decl_stmt><decl><type><name pos:line="208" pos:column="17">int</name></type> <name pos:line="208" pos:column="21">state2</name> <init pos:line="208" pos:column="28">= <expr><op:operator pos:line="208" pos:column="30">-</op:operator><lit:literal type="number" pos:line="208" pos:column="31">1</lit:literal></expr></init></decl>;</decl_stmt>				<comment type="line" pos:line="208" pos:column="65">// (ASSUME no state change)</comment>
		<decl_stmt><decl><type><name pos:line="209" pos:column="17">int</name></type> <name pos:line="209" pos:column="21">chColor</name> <init pos:line="209" pos:column="29">= <expr><name><name pos:line="209" pos:column="31">sc</name><op:operator pos:line="209" pos:column="33">.</op:operator><name pos:line="209" pos:column="34">currentPos</name></name> <op:operator pos:line="209" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="209" pos:column="47">1</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="209" pos:column="49">// (ASSUME standard coloring range)</comment>
		<decl_stmt><decl><type><name pos:line="210" pos:column="17">bool</name></type> <name pos:line="210" pos:column="22">advance</name> <init pos:line="210" pos:column="30">= <expr><lit:literal type="boolean" pos:line="210" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>			<comment type="line" pos:line="210" pos:column="57">// (ASSUME scanner "eats" 1 char)</comment>

		<comment type="line" pos:line="212" pos:column="17">// step state machine</comment>
		<switch pos:line="213" pos:column="17">switch <condition pos:line="213" pos:column="24">(<expr><name><name pos:line="213" pos:column="25">sc</name><op:operator pos:line="213" pos:column="27">.</op:operator><name pos:line="213" pos:column="28">state</name></name> <op:operator pos:line="213" pos:column="34">&amp;</op:operator> <lit:literal type="number" pos:line="213" pos:column="36">0x0f</lit:literal></expr>)</condition> <block pos:line="213" pos:column="42">{
		<case pos:line="214" pos:column="17">case <expr><name pos:line="214" pos:column="22">SCE_CAML_DEFAULT</name></expr>:
			<expr_stmt><expr><name pos:line="215" pos:column="25">chToken</name> <op:operator pos:line="215" pos:column="33">=</op:operator> <name><name pos:line="215" pos:column="35">sc</name><op:operator pos:line="215" pos:column="37">.</op:operator><name pos:line="215" pos:column="38">currentPos</name></name></expr>;</expr_stmt>	<comment type="line" pos:line="215" pos:column="57">// save [possible] token start (JIC)</comment>
			<comment type="line" pos:line="216" pos:column="25">// it's wide open; what do we have?</comment>
			<if pos:line="217" pos:column="25">if <condition pos:line="217" pos:column="28">(<expr><call><name pos:line="217" pos:column="29">iscamlf</name><argument_list pos:line="217" pos:column="36">(<argument><expr><name><name pos:line="217" pos:column="37">sc</name><op:operator pos:line="217" pos:column="39">.</op:operator><name pos:line="217" pos:column="40">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="217" pos:column="44">
				<expr_stmt><expr><name pos:line="218" pos:column="33">state2</name> <op:operator pos:line="218" pos:column="40">=</op:operator> <name pos:line="218" pos:column="42">SCE_CAML_IDENTIFIER</name></expr>;</expr_stmt></then>
			<else pos:line="219" pos:column="25">else <if pos:line="219" pos:column="30">if <condition pos:line="219" pos:column="33">(<expr><op:operator pos:line="219" pos:column="34">!</op:operator><name pos:line="219" pos:column="35">isSML</name> <op:operator pos:line="219" pos:column="41">&amp;&amp;</op:operator> <call><name><name pos:line="219" pos:column="44">sc</name><op:operator pos:line="219" pos:column="46">.</op:operator><name pos:line="219" pos:column="47">Match</name></name><argument_list pos:line="219" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="219" pos:column="53">'`'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="219" pos:column="58">&amp;&amp;</op:operator> <call><name pos:line="219" pos:column="61">iscamlf</name><argument_list pos:line="219" pos:column="68">(<argument><expr><name><name pos:line="219" pos:column="69">sc</name><op:operator pos:line="219" pos:column="71">.</op:operator><name pos:line="219" pos:column="72">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="219" pos:column="80">
				<expr_stmt><expr><name pos:line="220" pos:column="33">state2</name> <op:operator pos:line="220" pos:column="40">=</op:operator> <name pos:line="220" pos:column="42">SCE_CAML_TAGNAME</name></expr>;</expr_stmt></then>
			<else pos:line="221" pos:column="25">else <if pos:line="221" pos:column="30">if <condition pos:line="221" pos:column="33">(<expr><op:operator pos:line="221" pos:column="34">!</op:operator><name pos:line="221" pos:column="35">isSML</name> <op:operator pos:line="221" pos:column="41">&amp;&amp;</op:operator> <call><name><name pos:line="221" pos:column="44">sc</name><op:operator pos:line="221" pos:column="46">.</op:operator><name pos:line="221" pos:column="47">Match</name></name><argument_list pos:line="221" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="221" pos:column="53">'#'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="221" pos:column="58">&amp;&amp;</op:operator> <call><name pos:line="221" pos:column="61">isdigit</name><argument_list pos:line="221" pos:column="68">(<argument><expr><name><name pos:line="221" pos:column="69">sc</name><op:operator pos:line="221" pos:column="71">.</op:operator><name pos:line="221" pos:column="72">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="221" pos:column="80">
				<expr_stmt><expr><name pos:line="222" pos:column="33">state2</name> <op:operator pos:line="222" pos:column="40">=</op:operator> <name pos:line="222" pos:column="42">SCE_CAML_LINENUM</name></expr>;</expr_stmt></then>
			<else pos:line="223" pos:column="25">else <if pos:line="223" pos:column="30">if <condition pos:line="223" pos:column="33">(<expr><call><name pos:line="223" pos:column="34">isdigit</name><argument_list pos:line="223" pos:column="41">(<argument><expr><name><name pos:line="223" pos:column="42">sc</name><op:operator pos:line="223" pos:column="44">.</op:operator><name pos:line="223" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="223" pos:column="49"> <block pos:line="223" pos:column="50">{
				<comment type="line" pos:line="224" pos:column="33">// it's a number, assume base 10</comment>
				<expr_stmt><expr><name pos:line="225" pos:column="33">state2</name> <op:operator pos:line="225" pos:column="40">=</op:operator> <name pos:line="225" pos:column="42">SCE_CAML_NUMBER</name></expr><op:operator pos:line="225" pos:column="57">,</op:operator> <expr><name pos:line="225" pos:column="59">chBase</name> <op:operator pos:line="225" pos:column="66">=</op:operator> <lit:literal type="number" pos:line="225" pos:column="68">10</lit:literal></expr>;</expr_stmt>
				<if pos:line="226" pos:column="33">if <condition pos:line="226" pos:column="36">(<expr><call><name><name pos:line="226" pos:column="37">sc</name><op:operator pos:line="226" pos:column="39">.</op:operator><name pos:line="226" pos:column="40">Match</name></name><argument_list pos:line="226" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="226" pos:column="46">'0'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="226" pos:column="51"> <block pos:line="226" pos:column="52">{
					<comment type="line" pos:line="227" pos:column="41">// there MAY be a base specified...</comment>
					<decl_stmt><decl><type><specifier pos:line="228" pos:column="41">const</specifier> <name pos:line="228" pos:column="47">char</name><type:modifier pos:line="228" pos:column="51">*</type:modifier></type> <name pos:line="228" pos:column="53">baseC</name> <init pos:line="228" pos:column="59">= <expr><lit:literal type="string" pos:line="228" pos:column="61">"bBoOxX"</lit:literal></expr></init></decl>;</decl_stmt>
					<if pos:line="229" pos:column="41">if <condition pos:line="229" pos:column="44">(<expr><name pos:line="229" pos:column="45">isSML</name></expr>)</condition><then pos:line="229" pos:column="51"> <block pos:line="229" pos:column="52">{
						<if pos:line="230" pos:column="49">if <condition pos:line="230" pos:column="52">(<expr><name><name pos:line="230" pos:column="53">sc</name><op:operator pos:line="230" pos:column="55">.</op:operator><name pos:line="230" pos:column="56">chNext</name></name> <op:operator pos:line="230" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="230" pos:column="66">'w'</lit:literal></expr>)</condition><then pos:line="230" pos:column="70">
							<expr_stmt><expr><call><name><name pos:line="231" pos:column="57">sc</name><op:operator pos:line="231" pos:column="59">.</op:operator><name pos:line="231" pos:column="60">Forward</name></name><argument_list pos:line="231" pos:column="67">()</argument_list></call></expr>;</expr_stmt></then></if>	<comment type="line" pos:line="231" pos:column="73">// (consume SML "word" indicator)</comment>
						<expr_stmt><expr><name pos:line="232" pos:column="49">baseC</name> <op:operator pos:line="232" pos:column="55">=</op:operator> <lit:literal type="string" pos:line="232" pos:column="57">"x"</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
					<comment type="line" pos:line="234" pos:column="41">// ... change to specified base AS REQUIRED</comment>
					<if pos:line="235" pos:column="41">if <condition pos:line="235" pos:column="44">(<expr><call><name pos:line="235" pos:column="45">strchr</name><argument_list pos:line="235" pos:column="51">(<argument><expr><name pos:line="235" pos:column="52">baseC</name></expr></argument>, <argument><expr><name><name pos:line="235" pos:column="59">sc</name><op:operator pos:line="235" pos:column="61">.</op:operator><name pos:line="235" pos:column="62">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="235" pos:column="70">
						<expr_stmt><expr><name pos:line="236" pos:column="49">chBase</name> <op:operator pos:line="236" pos:column="56">=</op:operator> <name><name pos:line="236" pos:column="58">baseT</name><index pos:line="236" pos:column="63">[<expr><call><name pos:line="236" pos:column="64">tolower</name><argument_list pos:line="236" pos:column="71">(<argument><expr><name><name pos:line="236" pos:column="72">sc</name><op:operator pos:line="236" pos:column="74">.</op:operator><name pos:line="236" pos:column="75">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="236" pos:column="83">-</op:operator> <lit:literal type="char" pos:line="236" pos:column="85">'a'</lit:literal></expr>]</index></name></expr><op:operator pos:line="236" pos:column="89">,</op:operator> <expr><call><name><name pos:line="236" pos:column="91">sc</name><op:operator pos:line="236" pos:column="93">.</op:operator><name pos:line="236" pos:column="94">Forward</name></name><argument_list pos:line="236" pos:column="101">()</argument_list></call></expr>;</expr_stmt></then></if>
				}</block></then></if>
			}</block></then> <else pos:line="238" pos:column="27">else <if pos:line="238" pos:column="32">if <condition pos:line="238" pos:column="35">(<expr><op:operator pos:line="238" pos:column="36">!</op:operator><name pos:line="238" pos:column="37">isSML</name> <op:operator pos:line="238" pos:column="43">&amp;&amp;</op:operator> <call><name><name pos:line="238" pos:column="46">sc</name><op:operator pos:line="238" pos:column="48">.</op:operator><name pos:line="238" pos:column="49">Match</name></name><argument_list pos:line="238" pos:column="54">(<argument><expr><lit:literal type="char" pos:line="238" pos:column="55">'\''</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="238" pos:column="61">	<comment type="line" pos:line="238" pos:column="65">// (Caml char literal?)</comment>
				<expr_stmt><expr><name pos:line="239" pos:column="33">state2</name> <op:operator pos:line="239" pos:column="40">=</op:operator> <name pos:line="239" pos:column="42">SCE_CAML_CHAR</name></expr><op:operator pos:line="239" pos:column="55">,</op:operator> <expr><name pos:line="239" pos:column="57">chLit</name> <op:operator pos:line="239" pos:column="63">=</op:operator> <lit:literal type="number" pos:line="239" pos:column="65">0</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="240" pos:column="25">else <if pos:line="240" pos:column="30">if <condition pos:line="240" pos:column="33">(<expr><name pos:line="240" pos:column="34">isSML</name> <op:operator pos:line="240" pos:column="40">&amp;&amp;</op:operator> <call><name><name pos:line="240" pos:column="43">sc</name><op:operator pos:line="240" pos:column="45">.</op:operator><name pos:line="240" pos:column="46">Match</name></name><argument_list pos:line="240" pos:column="51">(<argument><expr><lit:literal type="char" pos:line="240" pos:column="52">'#'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="240" pos:column="57">'"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="240" pos:column="62">	<comment type="line" pos:line="240" pos:column="65">// (SML char literal?)</comment>
				<expr_stmt><expr><name pos:line="241" pos:column="33">state2</name> <op:operator pos:line="241" pos:column="40">=</op:operator> <name pos:line="241" pos:column="42">SCE_CAML_CHAR</name></expr><op:operator pos:line="241" pos:column="55">,</op:operator> <expr><call><name><name pos:line="241" pos:column="57">sc</name><op:operator pos:line="241" pos:column="59">.</op:operator><name pos:line="241" pos:column="60">Forward</name></name><argument_list pos:line="241" pos:column="67">()</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="242" pos:column="25">else <if pos:line="242" pos:column="30">if <condition pos:line="242" pos:column="33">(<expr><call><name><name pos:line="242" pos:column="34">sc</name><op:operator pos:line="242" pos:column="36">.</op:operator><name pos:line="242" pos:column="37">Match</name></name><argument_list pos:line="242" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="242" pos:column="43">'"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="242" pos:column="48">
				<expr_stmt><expr><name pos:line="243" pos:column="33">state2</name> <op:operator pos:line="243" pos:column="40">=</op:operator> <name pos:line="243" pos:column="42">SCE_CAML_STRING</name></expr>;</expr_stmt></then>
			<else pos:line="244" pos:column="25">else <if pos:line="244" pos:column="30">if <condition pos:line="244" pos:column="33">(<expr><call><name><name pos:line="244" pos:column="34">sc</name><op:operator pos:line="244" pos:column="36">.</op:operator><name pos:line="244" pos:column="37">Match</name></name><argument_list pos:line="244" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="244" pos:column="43">'('</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="244" pos:column="48">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="244" pos:column="53">
				<expr_stmt><expr><name pos:line="245" pos:column="33">state2</name> <op:operator pos:line="245" pos:column="40">=</op:operator> <name pos:line="245" pos:column="42">SCE_CAML_COMMENT</name></expr><op:operator pos:line="245" pos:column="58">,</op:operator> <expr><call><name><name pos:line="245" pos:column="60">sc</name><op:operator pos:line="245" pos:column="62">.</op:operator><name pos:line="245" pos:column="63">Forward</name></name><argument_list pos:line="245" pos:column="70">()</argument_list></call></expr><op:operator pos:line="245" pos:column="72">,</op:operator> <expr><name><name pos:line="245" pos:column="74">sc</name><op:operator pos:line="245" pos:column="76">.</op:operator><name pos:line="245" pos:column="77">ch</name></name> <op:operator pos:line="245" pos:column="80">=</op:operator> <lit:literal type="char" pos:line="245" pos:column="82">' '</lit:literal></expr>;</expr_stmt></then> <comment type="line" pos:line="245" pos:column="87">// (*)...</comment>
			<else pos:line="246" pos:column="25">else <if pos:line="246" pos:column="30">if <condition pos:line="246" pos:column="33">(<expr><call><name pos:line="246" pos:column="34">strchr</name><argument_list pos:line="246" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="41">"!?~"</lit:literal>			<comment type="block" pos:line="246" pos:column="65">/* Caml "prefix-symbol" */</comment>
					<lit:literal type="string" pos:line="247" pos:column="41">"=&lt;&gt;@^|&amp;+-*/$%"</lit:literal>			<comment type="block" pos:line="247" pos:column="73">/* Caml "infix-symbol" */</comment>
					<lit:literal type="string" pos:line="248" pos:column="41">"()[]{};,:.#"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="248" pos:column="56">sc</name><op:operator pos:line="248" pos:column="58">.</op:operator><name pos:line="248" pos:column="59">ch</name></name></expr></argument>)</argument_list></call>	<comment type="line" pos:line="248" pos:column="65">// Caml "bracket" or ;,:.#</comment>
											<comment type="line" pos:line="249" pos:column="89">// SML "extra" ident chars</comment>
				<op:operator pos:line="250" pos:column="33">||</op:operator> <op:operator pos:line="250" pos:column="36">(</op:operator><name pos:line="250" pos:column="37">isSML</name> <op:operator pos:line="250" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="250" pos:column="46">(</op:operator><call><name><name pos:line="250" pos:column="47">sc</name><op:operator pos:line="250" pos:column="49">.</op:operator><name pos:line="250" pos:column="50">Match</name></name><argument_list pos:line="250" pos:column="55">(<argument><expr><lit:literal type="char" pos:line="250" pos:column="56">'\\'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="250" pos:column="62">||</op:operator> <call><name><name pos:line="250" pos:column="65">sc</name><op:operator pos:line="250" pos:column="67">.</op:operator><name pos:line="250" pos:column="68">Match</name></name><argument_list pos:line="250" pos:column="73">(<argument><expr><lit:literal type="char" pos:line="250" pos:column="74">'`'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="250" pos:column="78">)</op:operator><op:operator pos:line="250" pos:column="79">)</op:operator></expr>)</condition><then pos:line="250" pos:column="81">
				<expr_stmt><expr><name pos:line="251" pos:column="33">state2</name> <op:operator pos:line="251" pos:column="40">=</op:operator> <name pos:line="251" pos:column="42">SCE_CAML_OPERATOR</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="252" pos:column="25">break;</break>

		</case><case pos:line="254" pos:column="17">case <expr><name pos:line="254" pos:column="22">SCE_CAML_IDENTIFIER</name></expr>:
			<comment type="line" pos:line="255" pos:column="25">// [try to] interpret as [additional] identifier char</comment>
			<if pos:line="256" pos:column="25">if <condition pos:line="256" pos:column="28">(<expr><op:operator pos:line="256" pos:column="29">!</op:operator><op:operator pos:line="256" pos:column="30">(</op:operator><call><name pos:line="256" pos:column="31">iscaml</name><argument_list pos:line="256" pos:column="37">(<argument><expr><name><name pos:line="256" pos:column="38">sc</name><op:operator pos:line="256" pos:column="40">.</op:operator><name pos:line="256" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="256" pos:column="45">||</op:operator> <call><name><name pos:line="256" pos:column="48">sc</name><op:operator pos:line="256" pos:column="50">.</op:operator><name pos:line="256" pos:column="51">Match</name></name><argument_list pos:line="256" pos:column="56">(<argument><expr><lit:literal type="char" pos:line="256" pos:column="57">'\''</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="256" pos:column="62">)</op:operator></expr>)</condition><then pos:line="256" pos:column="64"> <block pos:line="256" pos:column="65">{
				<decl_stmt><decl><type><specifier pos:line="257" pos:column="33">const</specifier> <name pos:line="257" pos:column="39">int</name></type> <name pos:line="257" pos:column="43">n</name> <init pos:line="257" pos:column="45">= <expr><name><name pos:line="257" pos:column="47">sc</name><op:operator pos:line="257" pos:column="49">.</op:operator><name pos:line="257" pos:column="50">currentPos</name></name> <op:operator pos:line="257" pos:column="61">-</op:operator> <name pos:line="257" pos:column="63">chToken</name></expr></init></decl>;</decl_stmt>
				<if pos:line="258" pos:column="33">if <condition pos:line="258" pos:column="36">(<expr><name pos:line="258" pos:column="37">n</name> <op:operator pos:line="258" pos:column="39">&lt;</op:operator> <lit:literal type="number" pos:line="258" pos:column="41">24</lit:literal></expr>)</condition><then pos:line="258" pos:column="44"> <block pos:line="258" pos:column="45">{
					<comment type="line" pos:line="259" pos:column="41">// length is believable as keyword, [re-]construct token</comment>
					<decl_stmt><decl><type><name pos:line="260" pos:column="41">char</name></type> <name><name pos:line="260" pos:column="46">t</name><index pos:line="260" pos:column="47">[<expr><lit:literal type="number" pos:line="260" pos:column="48">24</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<for pos:line="261" pos:column="41">for (<init><decl><type><name pos:line="261" pos:column="46">int</name></type> <name pos:line="261" pos:column="50">i</name> <init pos:line="261" pos:column="52">= <expr><op:operator pos:line="261" pos:column="54">-</op:operator><name pos:line="261" pos:column="55">n</name></expr></init></decl>;</init> <condition><expr><name pos:line="261" pos:column="58">i</name> <op:operator pos:line="261" pos:column="60">&lt;</op:operator> <lit:literal type="number" pos:line="261" pos:column="62">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="261" pos:column="65">i</name><op:operator pos:line="261" pos:column="66">++</op:operator></expr></incr>)
						<expr_stmt><expr><name><name pos:line="262" pos:column="49">t</name><index pos:line="262" pos:column="50">[<expr><name pos:line="262" pos:column="51">n</name> <op:operator pos:line="262" pos:column="53">+</op:operator> <name pos:line="262" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="262" pos:column="58">=</op:operator> <call><name><name pos:line="262" pos:column="60">static_cast</name><argument_list pos:line="262" pos:column="71">&lt;<argument><expr><name pos:line="262" pos:column="72">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="262" pos:column="77">(<argument><expr><call><name><name pos:line="262" pos:column="78">sc</name><op:operator pos:line="262" pos:column="80">.</op:operator><name pos:line="262" pos:column="81">GetRelative</name></name><argument_list pos:line="262" pos:column="92">(<argument><expr><name pos:line="262" pos:column="93">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
					<expr_stmt><expr><name><name pos:line="263" pos:column="41">t</name><index pos:line="263" pos:column="42">[<expr><name pos:line="263" pos:column="43">n</name></expr>]</index></name> <op:operator pos:line="263" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="263" pos:column="48">'\0'</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="264" pos:column="41">// special-case "_" token as KEYWORD</comment>
					<if pos:line="265" pos:column="41">if <condition pos:line="265" pos:column="44">(<expr><op:operator pos:line="265" pos:column="45">(</op:operator><name pos:line="265" pos:column="46">n</name> <op:operator pos:line="265" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="265" pos:column="51">1</lit:literal> <op:operator pos:line="265" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="265" pos:column="56">sc</name><op:operator pos:line="265" pos:column="58">.</op:operator><name pos:line="265" pos:column="59">chPrev</name></name> <op:operator pos:line="265" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="265" pos:column="69">'_'</lit:literal><op:operator pos:line="265" pos:column="72">)</op:operator> <op:operator pos:line="265" pos:column="74">||</op:operator> <call><name><name pos:line="265" pos:column="77">keywords</name><op:operator pos:line="265" pos:column="85">.</op:operator><name pos:line="265" pos:column="86">InList</name></name><argument_list pos:line="265" pos:column="92">(<argument><expr><name pos:line="265" pos:column="93">t</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="265" pos:column="96">
						<expr_stmt><expr><call><name><name pos:line="266" pos:column="49">sc</name><op:operator pos:line="266" pos:column="51">.</op:operator><name pos:line="266" pos:column="52">ChangeState</name></name><argument_list pos:line="266" pos:column="63">(<argument><expr><name pos:line="266" pos:column="64">SCE_CAML_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="267" pos:column="41">else <if pos:line="267" pos:column="46">if <condition pos:line="267" pos:column="49">(<expr><call><name><name pos:line="267" pos:column="50">keywords2</name><op:operator pos:line="267" pos:column="59">.</op:operator><name pos:line="267" pos:column="60">InList</name></name><argument_list pos:line="267" pos:column="66">(<argument><expr><name pos:line="267" pos:column="67">t</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="267" pos:column="70">
						<expr_stmt><expr><call><name><name pos:line="268" pos:column="49">sc</name><op:operator pos:line="268" pos:column="51">.</op:operator><name pos:line="268" pos:column="52">ChangeState</name></name><argument_list pos:line="268" pos:column="63">(<argument><expr><name pos:line="268" pos:column="64">SCE_CAML_KEYWORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="269" pos:column="41">else <if pos:line="269" pos:column="46">if <condition pos:line="269" pos:column="49">(<expr><call><name><name pos:line="269" pos:column="50">keywords3</name><op:operator pos:line="269" pos:column="59">.</op:operator><name pos:line="269" pos:column="60">InList</name></name><argument_list pos:line="269" pos:column="66">(<argument><expr><name pos:line="269" pos:column="67">t</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="269" pos:column="70">
						<expr_stmt><expr><call><name><name pos:line="270" pos:column="49">sc</name><op:operator pos:line="270" pos:column="51">.</op:operator><name pos:line="270" pos:column="52">ChangeState</name></name><argument_list pos:line="270" pos:column="63">(<argument><expr><name pos:line="270" pos:column="64">SCE_CAML_KEYWORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="272" pos:column="33">state2</name> <op:operator pos:line="272" pos:column="40">=</op:operator> <name pos:line="272" pos:column="42">SCE_CAML_DEFAULT</name></expr><op:operator pos:line="272" pos:column="58">,</op:operator> <expr><name pos:line="272" pos:column="60">advance</name> <op:operator pos:line="272" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="272" pos:column="70">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="274" pos:column="25">break;</break>

		</case><case pos:line="276" pos:column="17">case <expr><name pos:line="276" pos:column="22">SCE_CAML_TAGNAME</name></expr>:
			<comment type="line" pos:line="277" pos:column="25">// [try to] interpret as [additional] tagname char</comment>
			<if pos:line="278" pos:column="25">if <condition pos:line="278" pos:column="28">(<expr><op:operator pos:line="278" pos:column="29">!</op:operator><op:operator pos:line="278" pos:column="30">(</op:operator><call><name pos:line="278" pos:column="31">iscaml</name><argument_list pos:line="278" pos:column="37">(<argument><expr><name><name pos:line="278" pos:column="38">sc</name><op:operator pos:line="278" pos:column="40">.</op:operator><name pos:line="278" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="278" pos:column="45">||</op:operator> <call><name><name pos:line="278" pos:column="48">sc</name><op:operator pos:line="278" pos:column="50">.</op:operator><name pos:line="278" pos:column="51">Match</name></name><argument_list pos:line="278" pos:column="56">(<argument><expr><lit:literal type="char" pos:line="278" pos:column="57">'\''</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="278" pos:column="62">)</op:operator></expr>)</condition><then pos:line="278" pos:column="64">
				<expr_stmt><expr><name pos:line="279" pos:column="33">state2</name> <op:operator pos:line="279" pos:column="40">=</op:operator> <name pos:line="279" pos:column="42">SCE_CAML_DEFAULT</name></expr><op:operator pos:line="279" pos:column="58">,</op:operator> <expr><name pos:line="279" pos:column="60">advance</name> <op:operator pos:line="279" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="279" pos:column="70">false</lit:literal></expr>;</expr_stmt></then></if>
			<break pos:line="280" pos:column="25">break;</break>

		<comment type="block" pos:line="282" pos:column="17">/*case SCE_CAML_KEYWORD:
		case SCE_CAML_KEYWORD2:
		case SCE_CAML_KEYWORD3:
			// [try to] interpret as [additional] keyword char
			if (!iscaml(ch))
				state2 = SCE_CAML_DEFAULT, advance = false;
			break;*/</comment>

		</case><case pos:line="290" pos:column="17">case <expr><name pos:line="290" pos:column="22">SCE_CAML_LINENUM</name></expr>:
			<comment type="line" pos:line="291" pos:column="25">// [try to] interpret as [additional] linenum directive char</comment>
			<if pos:line="292" pos:column="25">if <condition pos:line="292" pos:column="28">(<expr><op:operator pos:line="292" pos:column="29">!</op:operator><call><name pos:line="292" pos:column="30">isdigit</name><argument_list pos:line="292" pos:column="37">(<argument><expr><name><name pos:line="292" pos:column="38">sc</name><op:operator pos:line="292" pos:column="40">.</op:operator><name pos:line="292" pos:column="41">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="292" pos:column="45">
				<expr_stmt><expr><name pos:line="293" pos:column="33">state2</name> <op:operator pos:line="293" pos:column="40">=</op:operator> <name pos:line="293" pos:column="42">SCE_CAML_DEFAULT</name></expr><op:operator pos:line="293" pos:column="58">,</op:operator> <expr><name pos:line="293" pos:column="60">advance</name> <op:operator pos:line="293" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="293" pos:column="70">false</lit:literal></expr>;</expr_stmt></then></if>
			<break pos:line="294" pos:column="25">break;</break>

		</case><case pos:line="296" pos:column="17">case <expr><name pos:line="296" pos:column="22">SCE_CAML_OPERATOR</name></expr>: <block pos:line="296" pos:column="41">{
			<comment type="line" pos:line="297" pos:column="25">// [try to] interpret as [additional] operator char</comment>
			<decl_stmt><decl><type><specifier pos:line="298" pos:column="25">const</specifier> <name pos:line="298" pos:column="31">char</name><type:modifier pos:line="298" pos:column="35">*</type:modifier></type> <name pos:line="298" pos:column="37">o</name> <init pos:line="298" pos:column="39">= <expr><lit:literal type="number" pos:line="298" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="299" pos:column="25">if <condition pos:line="299" pos:column="28">(<expr><call><name pos:line="299" pos:column="29">iscaml</name><argument_list pos:line="299" pos:column="35">(<argument><expr><name><name pos:line="299" pos:column="36">sc</name><op:operator pos:line="299" pos:column="38">.</op:operator><name pos:line="299" pos:column="39">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="299" pos:column="43">||</op:operator> <call><name pos:line="299" pos:column="46">isspace</name><argument_list pos:line="299" pos:column="53">(<argument><expr><name><name pos:line="299" pos:column="54">sc</name><op:operator pos:line="299" pos:column="56">.</op:operator><name pos:line="299" pos:column="57">ch</name></name></expr></argument>)</argument_list></call>			<comment type="line" pos:line="299" pos:column="81">// ident or whitespace</comment>
				<op:operator pos:line="300" pos:column="33">||</op:operator> <op:operator pos:line="300" pos:column="36">(</op:operator><name pos:line="300" pos:column="37">o</name> <op:operator pos:line="300" pos:column="39">=</op:operator> <call><name pos:line="300" pos:column="41">strchr</name><argument_list pos:line="300" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="300" pos:column="48">")]};,\'\"#"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="300" pos:column="62">sc</name><op:operator pos:line="300" pos:column="64">.</op:operator><name pos:line="300" pos:column="65">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="300" pos:column="68">,</op:operator><name pos:line="300" pos:column="69">o</name><op:operator pos:line="300" pos:column="70">)</op:operator>	<comment type="line" pos:line="300" pos:column="73">// "termination" chars</comment>
				<op:operator pos:line="301" pos:column="33">||</op:operator> <op:operator pos:line="301" pos:column="36">(</op:operator><op:operator pos:line="301" pos:column="37">!</op:operator><name pos:line="301" pos:column="38">isSML</name> <op:operator pos:line="301" pos:column="44">&amp;&amp;</op:operator> <call><name><name pos:line="301" pos:column="47">sc</name><op:operator pos:line="301" pos:column="49">.</op:operator><name pos:line="301" pos:column="50">Match</name></name><argument_list pos:line="301" pos:column="55">(<argument><expr><lit:literal type="char" pos:line="301" pos:column="56">'`'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="301" pos:column="60">)</op:operator>			<comment type="line" pos:line="301" pos:column="81">// Caml extra term char</comment>
				<op:operator pos:line="302" pos:column="33">||</op:operator> <op:operator pos:line="302" pos:column="36">(</op:operator><op:operator pos:line="302" pos:column="37">!</op:operator><call><name pos:line="302" pos:column="38">strchr</name><argument_list pos:line="302" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="302" pos:column="45">"!$%&amp;*+-./:&lt;=&gt;?@^|~"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="302" pos:column="67">sc</name><op:operator pos:line="302" pos:column="69">.</op:operator><name pos:line="302" pos:column="70">ch</name></name></expr></argument>)</argument_list></call><comment type="line" pos:line="302" pos:column="73">// "operator" chars</comment>
														<comment type="line" pos:line="303" pos:column="113">// SML extra ident chars</comment>
					<op:operator pos:line="304" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="304" pos:column="44">!</op:operator><op:operator pos:line="304" pos:column="45">(</op:operator><name pos:line="304" pos:column="46">isSML</name> <op:operator pos:line="304" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="304" pos:column="55">(</op:operator><call><name><name pos:line="304" pos:column="56">sc</name><op:operator pos:line="304" pos:column="58">.</op:operator><name pos:line="304" pos:column="59">Match</name></name><argument_list pos:line="304" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="304" pos:column="65">'\\'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="304" pos:column="71">||</op:operator> <call><name><name pos:line="304" pos:column="74">sc</name><op:operator pos:line="304" pos:column="76">.</op:operator><name pos:line="304" pos:column="77">Match</name></name><argument_list pos:line="304" pos:column="82">(<argument><expr><lit:literal type="char" pos:line="304" pos:column="83">'`'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="304" pos:column="87">)</op:operator><op:operator pos:line="304" pos:column="88">)</op:operator><op:operator pos:line="304" pos:column="89">)</op:operator></expr>)</condition><then pos:line="304" pos:column="91"> <block pos:line="304" pos:column="92">{
				<comment type="line" pos:line="305" pos:column="33">// check for INCLUSIVE termination</comment>
				<if pos:line="306" pos:column="33">if <condition pos:line="306" pos:column="36">(<expr><name pos:line="306" pos:column="37">o</name> <op:operator pos:line="306" pos:column="39">&amp;&amp;</op:operator> <call><name pos:line="306" pos:column="42">strchr</name><argument_list pos:line="306" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="49">")]};,"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="306" pos:column="58">sc</name><op:operator pos:line="306" pos:column="60">.</op:operator><name pos:line="306" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="306" pos:column="65"> <block pos:line="306" pos:column="66">{
					<if pos:line="307" pos:column="41">if <condition pos:line="307" pos:column="44">(<expr><op:operator pos:line="307" pos:column="45">(</op:operator><call><name><name pos:line="307" pos:column="46">sc</name><op:operator pos:line="307" pos:column="48">.</op:operator><name pos:line="307" pos:column="49">Match</name></name><argument_list pos:line="307" pos:column="54">(<argument><expr><lit:literal type="char" pos:line="307" pos:column="55">')'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="307" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="307" pos:column="63">sc</name><op:operator pos:line="307" pos:column="65">.</op:operator><name pos:line="307" pos:column="66">chPrev</name></name> <op:operator pos:line="307" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="307" pos:column="76">'('</lit:literal><op:operator pos:line="307" pos:column="79">)</op:operator>
						<op:operator pos:line="308" pos:column="49">||</op:operator> <op:operator pos:line="308" pos:column="52">(</op:operator><call><name><name pos:line="308" pos:column="53">sc</name><op:operator pos:line="308" pos:column="55">.</op:operator><name pos:line="308" pos:column="56">Match</name></name><argument_list pos:line="308" pos:column="61">(<argument><expr><lit:literal type="char" pos:line="308" pos:column="62">']'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="308" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="308" pos:column="70">sc</name><op:operator pos:line="308" pos:column="72">.</op:operator><name pos:line="308" pos:column="73">chPrev</name></name> <op:operator pos:line="308" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="308" pos:column="83">'['</lit:literal><op:operator pos:line="308" pos:column="86">)</op:operator></expr>)</condition><then pos:line="308" pos:column="88">
						<comment type="line" pos:line="309" pos:column="49">// special-case "()" and "[]" tokens as KEYWORDS</comment>
						<expr_stmt><expr><call><name><name pos:line="310" pos:column="49">sc</name><op:operator pos:line="310" pos:column="51">.</op:operator><name pos:line="310" pos:column="52">ChangeState</name></name><argument_list pos:line="310" pos:column="63">(<argument><expr><name pos:line="310" pos:column="64">SCE_CAML_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><name pos:line="311" pos:column="41">chColor</name><op:operator pos:line="311" pos:column="48">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="312" pos:column="35">else
					<expr_stmt><expr><name pos:line="313" pos:column="41">advance</name> <op:operator pos:line="313" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="313" pos:column="51">false</lit:literal></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><name pos:line="314" pos:column="33">state2</name> <op:operator pos:line="314" pos:column="40">=</op:operator> <name pos:line="314" pos:column="42">SCE_CAML_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="316" pos:column="25">break;</break>
		}</block>

		</case><case pos:line="319" pos:column="17">case <expr><name pos:line="319" pos:column="22">SCE_CAML_NUMBER</name></expr>:
			<comment type="line" pos:line="320" pos:column="25">// [try to] interpret as [additional] numeric literal char</comment>
			<if pos:line="321" pos:column="25">if <condition pos:line="321" pos:column="28">(<expr><op:operator pos:line="321" pos:column="29">(</op:operator><op:operator pos:line="321" pos:column="30">!</op:operator><name pos:line="321" pos:column="31">isSML</name> <op:operator pos:line="321" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="321" pos:column="40">sc</name><op:operator pos:line="321" pos:column="42">.</op:operator><name pos:line="321" pos:column="43">Match</name></name><argument_list pos:line="321" pos:column="48">(<argument><expr><lit:literal type="char" pos:line="321" pos:column="49">'_'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="321" pos:column="53">)</op:operator> <op:operator pos:line="321" pos:column="55">||</op:operator> <call><name pos:line="321" pos:column="58">IsADigit</name><argument_list pos:line="321" pos:column="66">(<argument><expr><name><name pos:line="321" pos:column="67">sc</name><op:operator pos:line="321" pos:column="69">.</op:operator><name pos:line="321" pos:column="70">ch</name></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="74">chBase</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="321" pos:column="82">
				<break pos:line="322" pos:column="33">break;</break></then></if>
			<comment type="line" pos:line="323" pos:column="25">// how about an integer suffix?</comment>
			<if pos:line="324" pos:column="25">if <condition pos:line="324" pos:column="28">(<expr><op:operator pos:line="324" pos:column="29">!</op:operator><name pos:line="324" pos:column="30">isSML</name> <op:operator pos:line="324" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="324" pos:column="39">(</op:operator><call><name><name pos:line="324" pos:column="40">sc</name><op:operator pos:line="324" pos:column="42">.</op:operator><name pos:line="324" pos:column="43">Match</name></name><argument_list pos:line="324" pos:column="48">(<argument><expr><lit:literal type="char" pos:line="324" pos:column="49">'l'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="324" pos:column="54">||</op:operator> <call><name><name pos:line="324" pos:column="57">sc</name><op:operator pos:line="324" pos:column="59">.</op:operator><name pos:line="324" pos:column="60">Match</name></name><argument_list pos:line="324" pos:column="65">(<argument><expr><lit:literal type="char" pos:line="324" pos:column="66">'L'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="324" pos:column="71">||</op:operator> <call><name><name pos:line="324" pos:column="74">sc</name><op:operator pos:line="324" pos:column="76">.</op:operator><name pos:line="324" pos:column="77">Match</name></name><argument_list pos:line="324" pos:column="82">(<argument><expr><lit:literal type="char" pos:line="324" pos:column="83">'n'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="324" pos:column="87">)</op:operator>
				<op:operator pos:line="325" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="325" pos:column="36">(</op:operator><name><name pos:line="325" pos:column="37">sc</name><op:operator pos:line="325" pos:column="39">.</op:operator><name pos:line="325" pos:column="40">chPrev</name></name> <op:operator pos:line="325" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="325" pos:column="50">'_'</lit:literal> <op:operator pos:line="325" pos:column="54">||</op:operator> <call><name pos:line="325" pos:column="57">IsADigit</name><argument_list pos:line="325" pos:column="65">(<argument><expr><name><name pos:line="325" pos:column="66">sc</name><op:operator pos:line="325" pos:column="68">.</op:operator><name pos:line="325" pos:column="69">chPrev</name></name></expr></argument>, <argument><expr><name pos:line="325" pos:column="77">chBase</name></expr></argument>)</argument_list></call><op:operator pos:line="325" pos:column="84">)</op:operator></expr>)</condition><then pos:line="325" pos:column="86">
				<break pos:line="326" pos:column="33">break;</break></then></if>
			<comment type="line" pos:line="327" pos:column="25">// or a floating-point literal?</comment>
			<if pos:line="328" pos:column="25">if <condition pos:line="328" pos:column="28">(<expr><name pos:line="328" pos:column="29">chBase</name> <op:operator pos:line="328" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="328" pos:column="39">10</lit:literal></expr>)</condition><then pos:line="328" pos:column="42"> <block pos:line="328" pos:column="43">{
				<comment type="line" pos:line="329" pos:column="33">// with a decimal point?</comment>
				<if pos:line="330" pos:column="33">if <condition pos:line="330" pos:column="36">(<expr><call><name><name pos:line="330" pos:column="37">sc</name><op:operator pos:line="330" pos:column="39">.</op:operator><name pos:line="330" pos:column="40">Match</name></name><argument_list pos:line="330" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="330" pos:column="46">'.'</lit:literal></expr></argument>)</argument_list></call>
					<op:operator pos:line="331" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="331" pos:column="44">(</op:operator><op:operator pos:line="331" pos:column="45">(</op:operator><op:operator pos:line="331" pos:column="46">!</op:operator><name pos:line="331" pos:column="47">isSML</name> <op:operator pos:line="331" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="331" pos:column="56">sc</name><op:operator pos:line="331" pos:column="58">.</op:operator><name pos:line="331" pos:column="59">chPrev</name></name> <op:operator pos:line="331" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="331" pos:column="69">'_'</lit:literal><op:operator pos:line="331" pos:column="72">)</op:operator>
						<op:operator pos:line="332" pos:column="49">||</op:operator> <call><name pos:line="332" pos:column="52">IsADigit</name><argument_list pos:line="332" pos:column="60">(<argument><expr><name><name pos:line="332" pos:column="61">sc</name><op:operator pos:line="332" pos:column="63">.</op:operator><name pos:line="332" pos:column="64">chPrev</name></name></expr></argument>, <argument><expr><name pos:line="332" pos:column="72">chBase</name></expr></argument>)</argument_list></call><op:operator pos:line="332" pos:column="79">)</op:operator></expr>)</condition><then pos:line="332" pos:column="81">
					<break pos:line="333" pos:column="41">break;</break></then></if>
				<comment type="line" pos:line="334" pos:column="33">// with an exponent? (I)</comment>
				<if pos:line="335" pos:column="33">if <condition pos:line="335" pos:column="36">(<expr><op:operator pos:line="335" pos:column="37">(</op:operator><call><name><name pos:line="335" pos:column="38">sc</name><op:operator pos:line="335" pos:column="40">.</op:operator><name pos:line="335" pos:column="41">Match</name></name><argument_list pos:line="335" pos:column="46">(<argument><expr><lit:literal type="char" pos:line="335" pos:column="47">'e'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="335" pos:column="52">||</op:operator> <call><name><name pos:line="335" pos:column="55">sc</name><op:operator pos:line="335" pos:column="57">.</op:operator><name pos:line="335" pos:column="58">Match</name></name><argument_list pos:line="335" pos:column="63">(<argument><expr><lit:literal type="char" pos:line="335" pos:column="64">'E'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="335" pos:column="68">)</op:operator>
					<op:operator pos:line="336" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="336" pos:column="44">(</op:operator><op:operator pos:line="336" pos:column="45">(</op:operator><op:operator pos:line="336" pos:column="46">!</op:operator><name pos:line="336" pos:column="47">isSML</name> <op:operator pos:line="336" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="336" pos:column="56">(</op:operator><name><name pos:line="336" pos:column="57">sc</name><op:operator pos:line="336" pos:column="59">.</op:operator><name pos:line="336" pos:column="60">chPrev</name></name> <op:operator pos:line="336" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="336" pos:column="70">'.'</lit:literal> <op:operator pos:line="336" pos:column="74">||</op:operator> <name><name pos:line="336" pos:column="77">sc</name><op:operator pos:line="336" pos:column="79">.</op:operator><name pos:line="336" pos:column="80">chPrev</name></name> <op:operator pos:line="336" pos:column="87">==</op:operator> <lit:literal type="char" pos:line="336" pos:column="90">'_'</lit:literal><op:operator pos:line="336" pos:column="93">)</op:operator><op:operator pos:line="336" pos:column="94">)</op:operator>
						<op:operator pos:line="337" pos:column="49">||</op:operator> <call><name pos:line="337" pos:column="52">IsADigit</name><argument_list pos:line="337" pos:column="60">(<argument><expr><name><name pos:line="337" pos:column="61">sc</name><op:operator pos:line="337" pos:column="63">.</op:operator><name pos:line="337" pos:column="64">chPrev</name></name></expr></argument>, <argument><expr><name pos:line="337" pos:column="72">chBase</name></expr></argument>)</argument_list></call><op:operator pos:line="337" pos:column="79">)</op:operator></expr>)</condition><then pos:line="337" pos:column="81">
					<break pos:line="338" pos:column="41">break;</break></then></if>
				<comment type="line" pos:line="339" pos:column="33">// with an exponent? (II)</comment>
				<if pos:line="340" pos:column="33">if <condition pos:line="340" pos:column="36">(<expr><op:operator pos:line="340" pos:column="37">(</op:operator><op:operator pos:line="340" pos:column="38">(</op:operator><op:operator pos:line="340" pos:column="39">!</op:operator><name pos:line="340" pos:column="40">isSML</name> <op:operator pos:line="340" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="340" pos:column="49">(</op:operator><call><name><name pos:line="340" pos:column="50">sc</name><op:operator pos:line="340" pos:column="52">.</op:operator><name pos:line="340" pos:column="53">Match</name></name><argument_list pos:line="340" pos:column="58">(<argument><expr><lit:literal type="char" pos:line="340" pos:column="59">'+'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="340" pos:column="64">||</op:operator> <call><name><name pos:line="340" pos:column="67">sc</name><op:operator pos:line="340" pos:column="69">.</op:operator><name pos:line="340" pos:column="70">Match</name></name><argument_list pos:line="340" pos:column="75">(<argument><expr><lit:literal type="char" pos:line="340" pos:column="76">'-'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="340" pos:column="80">)</op:operator><op:operator pos:line="340" pos:column="81">)</op:operator>
						<op:operator pos:line="341" pos:column="49">||</op:operator> <op:operator pos:line="341" pos:column="52">(</op:operator><name pos:line="341" pos:column="53">isSML</name> <op:operator pos:line="341" pos:column="59">&amp;&amp;</op:operator> <call><name><name pos:line="341" pos:column="62">sc</name><op:operator pos:line="341" pos:column="64">.</op:operator><name pos:line="341" pos:column="65">Match</name></name><argument_list pos:line="341" pos:column="70">(<argument><expr><lit:literal type="char" pos:line="341" pos:column="71">'~'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="341" pos:column="75">)</op:operator><op:operator pos:line="341" pos:column="76">)</op:operator>
					<op:operator pos:line="342" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="342" pos:column="44">(</op:operator><name><name pos:line="342" pos:column="45">sc</name><op:operator pos:line="342" pos:column="47">.</op:operator><name pos:line="342" pos:column="48">chPrev</name></name> <op:operator pos:line="342" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="342" pos:column="58">'e'</lit:literal> <op:operator pos:line="342" pos:column="62">||</op:operator> <name><name pos:line="342" pos:column="65">sc</name><op:operator pos:line="342" pos:column="67">.</op:operator><name pos:line="342" pos:column="68">chPrev</name></name> <op:operator pos:line="342" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="342" pos:column="78">'E'</lit:literal><op:operator pos:line="342" pos:column="81">)</op:operator></expr>)</condition><then pos:line="342" pos:column="83">
					<break pos:line="343" pos:column="41">break;</break></then></if>
			}</block></then></if>
			<comment type="line" pos:line="345" pos:column="25">// it looks like we have run out of number</comment>
			<expr_stmt><expr><name pos:line="346" pos:column="25">state2</name> <op:operator pos:line="346" pos:column="32">=</op:operator> <name pos:line="346" pos:column="34">SCE_CAML_DEFAULT</name></expr><op:operator pos:line="346" pos:column="50">,</op:operator> <expr><name pos:line="346" pos:column="52">advance</name> <op:operator pos:line="346" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="346" pos:column="62">false</lit:literal></expr>;</expr_stmt>
			<break pos:line="347" pos:column="25">break;</break>

		</case><case pos:line="349" pos:column="17">case <expr><name pos:line="349" pos:column="22">SCE_CAML_CHAR</name></expr>:
			<if pos:line="350" pos:column="25">if <condition pos:line="350" pos:column="28">(<expr><op:operator pos:line="350" pos:column="29">!</op:operator><name pos:line="350" pos:column="30">isSML</name></expr>)</condition><then pos:line="350" pos:column="36"> <block pos:line="350" pos:column="37">{
				<comment type="line" pos:line="351" pos:column="33">// [try to] interpret as [additional] char literal char</comment>
				<if pos:line="352" pos:column="33">if <condition pos:line="352" pos:column="36">(<expr><call><name><name pos:line="352" pos:column="37">sc</name><op:operator pos:line="352" pos:column="39">.</op:operator><name pos:line="352" pos:column="40">Match</name></name><argument_list pos:line="352" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="352" pos:column="46">'\\'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="352" pos:column="52"> <block pos:line="352" pos:column="53">{
					<expr_stmt><expr><name pos:line="353" pos:column="41">chLit</name> <op:operator pos:line="353" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="353" pos:column="49">1</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="353" pos:column="57">// (definitely IS a char literal)</comment>
					<if pos:line="354" pos:column="41">if <condition pos:line="354" pos:column="44">(<expr><name><name pos:line="354" pos:column="45">sc</name><op:operator pos:line="354" pos:column="47">.</op:operator><name pos:line="354" pos:column="48">chPrev</name></name> <op:operator pos:line="354" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="354" pos:column="58">'\\'</lit:literal></expr>)</condition><then pos:line="354" pos:column="63">
						<expr_stmt><expr><name><name pos:line="355" pos:column="49">sc</name><op:operator pos:line="355" pos:column="51">.</op:operator><name pos:line="355" pos:column="52">ch</name></name> <op:operator pos:line="355" pos:column="55">=</op:operator> <lit:literal type="char" pos:line="355" pos:column="57">' '</lit:literal></expr>;</expr_stmt></then></if>	<comment type="line" pos:line="355" pos:column="65">// (...\\')</comment>
				<comment type="line" pos:line="356" pos:column="33">// should we be terminating - one way or another?</comment>
				}</block></then> <else pos:line="357" pos:column="35">else <if pos:line="357" pos:column="40">if <condition pos:line="357" pos:column="43">(<expr><op:operator pos:line="357" pos:column="44">(</op:operator><call><name><name pos:line="357" pos:column="45">sc</name><op:operator pos:line="357" pos:column="47">.</op:operator><name pos:line="357" pos:column="48">Match</name></name><argument_list pos:line="357" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="357" pos:column="54">'\''</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="357" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="357" pos:column="63">sc</name><op:operator pos:line="357" pos:column="65">.</op:operator><name pos:line="357" pos:column="66">chPrev</name></name> <op:operator pos:line="357" pos:column="73">!=</op:operator> <lit:literal type="char" pos:line="357" pos:column="76">'\\'</lit:literal><op:operator pos:line="357" pos:column="80">)</op:operator>
					<op:operator pos:line="358" pos:column="41">||</op:operator> <name><name pos:line="358" pos:column="44">sc</name><op:operator pos:line="358" pos:column="46">.</op:operator><name pos:line="358" pos:column="47">atLineEnd</name></name></expr>)</condition><then pos:line="358" pos:column="57"> <block pos:line="358" pos:column="58">{
					<expr_stmt><expr><name pos:line="359" pos:column="41">state2</name> <op:operator pos:line="359" pos:column="48">=</op:operator> <name pos:line="359" pos:column="50">SCE_CAML_DEFAULT</name></expr>;</expr_stmt>
					<if pos:line="360" pos:column="41">if <condition pos:line="360" pos:column="44">(<expr><call><name><name pos:line="360" pos:column="45">sc</name><op:operator pos:line="360" pos:column="47">.</op:operator><name pos:line="360" pos:column="48">Match</name></name><argument_list pos:line="360" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="360" pos:column="54">'\''</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="360" pos:column="60">
						<expr_stmt><expr><name pos:line="361" pos:column="49">chColor</name><op:operator pos:line="361" pos:column="56">++</op:operator></expr>;</expr_stmt></then>
					<else pos:line="362" pos:column="41">else
						<expr_stmt><expr><call><name><name pos:line="363" pos:column="49">sc</name><op:operator pos:line="363" pos:column="51">.</op:operator><name pos:line="363" pos:column="52">ChangeState</name></name><argument_list pos:line="363" pos:column="63">(<argument><expr><name pos:line="363" pos:column="64">SCE_CAML_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				<comment type="line" pos:line="364" pos:column="33">// ... maybe a char literal, maybe not</comment>
				}</block></then> <else pos:line="365" pos:column="35">else <if pos:line="365" pos:column="40">if <condition pos:line="365" pos:column="43">(<expr><name><name pos:line="365" pos:column="44">chLit</name> <argument_list pos:line="365" pos:column="50">&lt; <argument><expr><lit:literal type="number" pos:line="365" pos:column="52">1</lit:literal> <op:operator pos:line="365" pos:column="54">&amp;&amp;</op:operator> <name><name pos:line="365" pos:column="57">sc</name><op:operator pos:line="365" pos:column="59">.</op:operator><name pos:line="365" pos:column="60">currentPos</name></name> <op:operator pos:line="365" pos:column="71">-</op:operator> <name pos:line="365" pos:column="73">chToken</name></expr></argument> &gt;</argument_list></name><op:operator pos:line="365" pos:column="82">=</op:operator> <lit:literal type="number" pos:line="365" pos:column="84">2</lit:literal></expr>)</condition><then pos:line="365" pos:column="86">
					<expr_stmt><expr><call><name><name pos:line="366" pos:column="41">sc</name><op:operator pos:line="366" pos:column="43">.</op:operator><name pos:line="366" pos:column="44">ChangeState</name></name><argument_list pos:line="366" pos:column="55">(<argument><expr><name pos:line="366" pos:column="56">SCE_CAML_IDENTIFIER</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="366" pos:column="76">,</op:operator> <expr><name pos:line="366" pos:column="78">advance</name> <op:operator pos:line="366" pos:column="86">=</op:operator> <lit:literal type="boolean" pos:line="366" pos:column="88">false</lit:literal></expr>;</expr_stmt></then></if></else></if></else></if>
				<break pos:line="367" pos:column="33">break;</break>
			}</block></then></if><comment type="block" pos:line="368" pos:column="26">/* else
				// fall through for SML char literal (handle like string) */</comment>

		</case><case pos:line="371" pos:column="17">case <expr><name pos:line="371" pos:column="22">SCE_CAML_STRING</name></expr>:
			<comment type="line" pos:line="372" pos:column="25">// [try to] interpret as [additional] [SML char/] string literal char</comment>
			<if pos:line="373" pos:column="25">if <condition pos:line="373" pos:column="28">(<expr><name pos:line="373" pos:column="29">isSML</name> <op:operator pos:line="373" pos:column="35">&amp;&amp;</op:operator> <call><name><name pos:line="373" pos:column="38">sc</name><op:operator pos:line="373" pos:column="40">.</op:operator><name pos:line="373" pos:column="41">Match</name></name><argument_list pos:line="373" pos:column="46">(<argument><expr><lit:literal type="char" pos:line="373" pos:column="47">'\\'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="373" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="373" pos:column="56">sc</name><op:operator pos:line="373" pos:column="58">.</op:operator><name pos:line="373" pos:column="59">chPrev</name></name> <op:operator pos:line="373" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="373" pos:column="69">'\\'</lit:literal> <op:operator pos:line="373" pos:column="74">&amp;&amp;</op:operator> <call><name pos:line="373" pos:column="77">isspace</name><argument_list pos:line="373" pos:column="84">(<argument><expr><name><name pos:line="373" pos:column="85">sc</name><op:operator pos:line="373" pos:column="87">.</op:operator><name pos:line="373" pos:column="88">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="373" pos:column="96">
				<expr_stmt><expr><name pos:line="374" pos:column="33">state2</name> <op:operator pos:line="374" pos:column="40">=</op:operator> <name pos:line="374" pos:column="42">SCE_CAML_WHITE</name></expr>;</expr_stmt></then>
			<else pos:line="375" pos:column="25">else <if pos:line="375" pos:column="30">if <condition pos:line="375" pos:column="33">(<expr><call><name><name pos:line="375" pos:column="34">sc</name><op:operator pos:line="375" pos:column="36">.</op:operator><name pos:line="375" pos:column="37">Match</name></name><argument_list pos:line="375" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="375" pos:column="43">'\\'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="375" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="375" pos:column="52">sc</name><op:operator pos:line="375" pos:column="54">.</op:operator><name pos:line="375" pos:column="55">chPrev</name></name> <op:operator pos:line="375" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="375" pos:column="65">'\\'</lit:literal></expr>)</condition><then pos:line="375" pos:column="70">
				<expr_stmt><expr><name><name pos:line="376" pos:column="33">sc</name><op:operator pos:line="376" pos:column="35">.</op:operator><name pos:line="376" pos:column="36">ch</name></name> <op:operator pos:line="376" pos:column="39">=</op:operator> <lit:literal type="char" pos:line="376" pos:column="41">' '</lit:literal></expr>;</expr_stmt></then>	<comment type="line" pos:line="376" pos:column="49">// (...\\")</comment>
			<comment type="line" pos:line="377" pos:column="25">// should we be terminating - one way or another?</comment>
			<else pos:line="378" pos:column="25">else <if pos:line="378" pos:column="30">if <condition pos:line="378" pos:column="33">(<expr><op:operator pos:line="378" pos:column="34">(</op:operator><call><name><name pos:line="378" pos:column="35">sc</name><op:operator pos:line="378" pos:column="37">.</op:operator><name pos:line="378" pos:column="38">Match</name></name><argument_list pos:line="378" pos:column="43">(<argument><expr><lit:literal type="char" pos:line="378" pos:column="44">'"'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="378" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="378" pos:column="52">sc</name><op:operator pos:line="378" pos:column="54">.</op:operator><name pos:line="378" pos:column="55">chPrev</name></name> <op:operator pos:line="378" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="378" pos:column="65">'\\'</lit:literal><op:operator pos:line="378" pos:column="69">)</op:operator>
				<op:operator pos:line="379" pos:column="33">||</op:operator> <op:operator pos:line="379" pos:column="36">(</op:operator><name pos:line="379" pos:column="37">isSML</name> <op:operator pos:line="379" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="379" pos:column="46">sc</name><op:operator pos:line="379" pos:column="48">.</op:operator><name pos:line="379" pos:column="49">atLineEnd</name></name><op:operator pos:line="379" pos:column="58">)</op:operator></expr>)</condition><then pos:line="379" pos:column="60"> <block pos:line="379" pos:column="61">{
				<expr_stmt><expr><name pos:line="380" pos:column="33">state2</name> <op:operator pos:line="380" pos:column="40">=</op:operator> <name pos:line="380" pos:column="42">SCE_CAML_DEFAULT</name></expr>;</expr_stmt>
				<if pos:line="381" pos:column="33">if <condition pos:line="381" pos:column="36">(<expr><call><name><name pos:line="381" pos:column="37">sc</name><op:operator pos:line="381" pos:column="39">.</op:operator><name pos:line="381" pos:column="40">Match</name></name><argument_list pos:line="381" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="381" pos:column="46">'"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="381" pos:column="51">
					<expr_stmt><expr><name pos:line="382" pos:column="41">chColor</name><op:operator pos:line="382" pos:column="48">++</op:operator></expr>;</expr_stmt></then></if>
			}</block></then></if></else></if></else></if>
			<break pos:line="384" pos:column="25">break;</break>

		</case><case pos:line="386" pos:column="17">case <expr><name pos:line="386" pos:column="22">SCE_CAML_WHITE</name></expr>:
			<comment type="line" pos:line="387" pos:column="25">// [try to] interpret as [additional] SML embedded whitespace char</comment>
			<if pos:line="388" pos:column="25">if <condition pos:line="388" pos:column="28">(<expr><call><name><name pos:line="388" pos:column="29">sc</name><op:operator pos:line="388" pos:column="31">.</op:operator><name pos:line="388" pos:column="32">Match</name></name><argument_list pos:line="388" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="388" pos:column="38">'\\'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="388" pos:column="44"> <block pos:line="388" pos:column="45">{
				<comment type="line" pos:line="389" pos:column="33">// style this puppy NOW...</comment>
				<expr_stmt><expr><name pos:line="390" pos:column="33">state2</name> <op:operator pos:line="390" pos:column="40">=</op:operator> <name pos:line="390" pos:column="42">SCE_CAML_STRING</name></expr><op:operator pos:line="390" pos:column="57">,</op:operator> <expr><name><name pos:line="390" pos:column="59">sc</name><op:operator pos:line="390" pos:column="61">.</op:operator><name pos:line="390" pos:column="62">ch</name></name> <op:operator pos:line="390" pos:column="65">=</op:operator> <lit:literal type="char" pos:line="390" pos:column="67">' '</lit:literal></expr> <comment type="block" pos:line="390" pos:column="71">/* (...\") */</comment><op:operator pos:line="390" pos:column="84">,</op:operator> <expr><name pos:line="390" pos:column="86">chColor</name><op:operator pos:line="390" pos:column="93">++</op:operator></expr><op:operator pos:line="390" pos:column="95">,</op:operator>
					<expr><call><name><name pos:line="391" pos:column="41">styler</name><op:operator pos:line="391" pos:column="47">.</op:operator><name pos:line="391" pos:column="48">ColourTo</name></name><argument_list pos:line="391" pos:column="56">(<argument><expr><name pos:line="391" pos:column="57">chColor</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="66">SCE_CAML_WHITE</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="391" pos:column="81">,</op:operator> <expr><call><name><name pos:line="391" pos:column="83">styler</name><op:operator pos:line="391" pos:column="89">.</op:operator><name pos:line="391" pos:column="90">Flush</name></name><argument_list pos:line="391" pos:column="95">()</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="392" pos:column="33">// ... then backtrack to determine original SML literal type</comment>
				<decl_stmt><decl><type><name pos:line="393" pos:column="33">int</name></type> <name pos:line="393" pos:column="37">p</name> <init pos:line="393" pos:column="39">= <expr><name pos:line="393" pos:column="41">chColor</name> <op:operator pos:line="393" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="393" pos:column="51">2</lit:literal></expr></init></decl>;</decl_stmt>
				<for pos:line="394" pos:column="33">for (<init pos:line="394" pos:column="38">;</init> <condition><expr><name pos:line="394" pos:column="40">p</name> <op:operator pos:line="394" pos:column="42">&gt;=</op:operator> <lit:literal type="number" pos:line="394" pos:column="45">0</lit:literal> <op:operator pos:line="394" pos:column="47">&amp;&amp;</op:operator> <call><name><name pos:line="394" pos:column="50">styler</name><op:operator pos:line="394" pos:column="56">.</op:operator><name pos:line="394" pos:column="57">StyleAt</name></name><argument_list pos:line="394" pos:column="64">(<argument><expr><name pos:line="394" pos:column="65">p</name></expr></argument>)</argument_list></call> <op:operator pos:line="394" pos:column="68">==</op:operator> <name pos:line="394" pos:column="71">SCE_CAML_WHITE</name></expr>;</condition> <incr><expr><name pos:line="394" pos:column="87">p</name><op:operator pos:line="394" pos:column="88">--</op:operator></expr></incr>) <empty_stmt pos:line="394" pos:column="92">;</empty_stmt></for>
				<if pos:line="395" pos:column="33">if <condition pos:line="395" pos:column="36">(<expr><name pos:line="395" pos:column="37">p</name> <op:operator pos:line="395" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="395" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="395" pos:column="44">
					<expr_stmt><expr><name pos:line="396" pos:column="41">state2</name> <op:operator pos:line="396" pos:column="48">=</op:operator> <call><name><name pos:line="396" pos:column="50">static_cast</name><argument_list pos:line="396" pos:column="61">&lt;<argument><expr><name pos:line="396" pos:column="62">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="396" pos:column="66">(<argument><expr><call><name><name pos:line="396" pos:column="67">styler</name><op:operator pos:line="396" pos:column="73">.</op:operator><name pos:line="396" pos:column="74">StyleAt</name></name><argument_list pos:line="396" pos:column="81">(<argument><expr><name pos:line="396" pos:column="82">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<comment type="line" pos:line="397" pos:column="33">// take care of state change NOW</comment>
				<expr_stmt><expr><call><name><name pos:line="398" pos:column="33">sc</name><op:operator pos:line="398" pos:column="35">.</op:operator><name pos:line="398" pos:column="36">ChangeState</name></name><argument_list pos:line="398" pos:column="47">(<argument><expr><name pos:line="398" pos:column="48">state2</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="398" pos:column="55">,</op:operator> <expr><name pos:line="398" pos:column="57">state2</name> <op:operator pos:line="398" pos:column="64">=</op:operator> <op:operator pos:line="398" pos:column="66">-</op:operator><lit:literal type="number" pos:line="398" pos:column="67">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="400" pos:column="25">break;</break>

		</case><case pos:line="402" pos:column="17">case <expr><name pos:line="402" pos:column="22">SCE_CAML_COMMENT</name></expr>:
		</case><case pos:line="403" pos:column="17">case <expr><name pos:line="403" pos:column="22">SCE_CAML_COMMENT1</name></expr>:
		</case><case pos:line="404" pos:column="17">case <expr><name pos:line="404" pos:column="22">SCE_CAML_COMMENT2</name></expr>:
		</case><case pos:line="405" pos:column="17">case <expr><name pos:line="405" pos:column="22">SCE_CAML_COMMENT3</name></expr>:
			<comment type="line" pos:line="406" pos:column="25">// we're IN a comment - does this start a NESTED comment?</comment>
			<if pos:line="407" pos:column="25">if <condition pos:line="407" pos:column="28">(<expr><call><name><name pos:line="407" pos:column="29">sc</name><op:operator pos:line="407" pos:column="31">.</op:operator><name pos:line="407" pos:column="32">Match</name></name><argument_list pos:line="407" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="407" pos:column="38">'('</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="407" pos:column="43">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="407" pos:column="48">
				<expr_stmt><expr><name pos:line="408" pos:column="33">state2</name> <op:operator pos:line="408" pos:column="40">=</op:operator> <name><name pos:line="408" pos:column="42">sc</name><op:operator pos:line="408" pos:column="44">.</op:operator><name pos:line="408" pos:column="45">state</name></name> <op:operator pos:line="408" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="408" pos:column="53">1</lit:literal></expr><op:operator pos:line="408" pos:column="54">,</op:operator> <expr><name pos:line="408" pos:column="56">chToken</name> <op:operator pos:line="408" pos:column="64">=</op:operator> <name><name pos:line="408" pos:column="66">sc</name><op:operator pos:line="408" pos:column="68">.</op:operator><name pos:line="408" pos:column="69">currentPos</name></name></expr><op:operator pos:line="408" pos:column="79">,</op:operator>
					<expr><call><name><name pos:line="409" pos:column="41">sc</name><op:operator pos:line="409" pos:column="43">.</op:operator><name pos:line="409" pos:column="44">Forward</name></name><argument_list pos:line="409" pos:column="51">()</argument_list></call></expr><op:operator pos:line="409" pos:column="53">,</op:operator> <expr><name><name pos:line="409" pos:column="55">sc</name><op:operator pos:line="409" pos:column="57">.</op:operator><name pos:line="409" pos:column="58">ch</name></name> <op:operator pos:line="409" pos:column="61">=</op:operator> <lit:literal type="char" pos:line="409" pos:column="63">' '</lit:literal></expr> <comment type="block" pos:line="409" pos:column="67">/* (*)... */</comment><op:operator pos:line="409" pos:column="79">,</op:operator> <expr><name pos:line="409" pos:column="81">nesting</name><op:operator pos:line="409" pos:column="88">++</op:operator></expr>;</expr_stmt></then>
			<comment type="line" pos:line="410" pos:column="25">// [try to] interpret as [additional] comment char</comment>
			<else pos:line="411" pos:column="25">else <if pos:line="411" pos:column="30">if <condition pos:line="411" pos:column="33">(<expr><call><name><name pos:line="411" pos:column="34">sc</name><op:operator pos:line="411" pos:column="36">.</op:operator><name pos:line="411" pos:column="37">Match</name></name><argument_list pos:line="411" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="411" pos:column="43">')'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="411" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="411" pos:column="51">sc</name><op:operator pos:line="411" pos:column="53">.</op:operator><name pos:line="411" pos:column="54">chPrev</name></name> <op:operator pos:line="411" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="411" pos:column="64">'*'</lit:literal></expr>)</condition><then pos:line="411" pos:column="68"> <block pos:line="411" pos:column="69">{
				<if pos:line="412" pos:column="33">if <condition pos:line="412" pos:column="36">(<expr><name pos:line="412" pos:column="37">nesting</name></expr>)</condition><then pos:line="412" pos:column="45">
					<expr_stmt><expr><name pos:line="413" pos:column="41">state2</name> <op:operator pos:line="413" pos:column="48">=</op:operator> <op:operator pos:line="413" pos:column="50">(</op:operator><name><name pos:line="413" pos:column="51">sc</name><op:operator pos:line="413" pos:column="53">.</op:operator><name pos:line="413" pos:column="54">state</name></name> <op:operator pos:line="413" pos:column="60">&amp;</op:operator> <lit:literal type="number" pos:line="413" pos:column="62">0x0f</lit:literal><op:operator pos:line="413" pos:column="66">)</op:operator> <op:operator pos:line="413" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="413" pos:column="70">1</lit:literal></expr><op:operator pos:line="413" pos:column="71">,</op:operator> <expr><name pos:line="413" pos:column="73">chToken</name> <op:operator pos:line="413" pos:column="81">=</op:operator> <lit:literal type="number" pos:line="413" pos:column="83">0</lit:literal></expr><op:operator pos:line="413" pos:column="84">,</op:operator> <expr><name pos:line="413" pos:column="86">nesting</name><op:operator pos:line="413" pos:column="93">--</op:operator></expr>;</expr_stmt></then>
				<else pos:line="414" pos:column="33">else
					<expr_stmt><expr><name pos:line="415" pos:column="41">state2</name> <op:operator pos:line="415" pos:column="48">=</op:operator> <name pos:line="415" pos:column="50">SCE_CAML_DEFAULT</name></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><name pos:line="416" pos:column="33">chColor</name><op:operator pos:line="416" pos:column="40">++</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="417" pos:column="25">// enable "magic" (read-only) comment AS REQUIRED</comment>
			}</block></then> <else pos:line="418" pos:column="27">else <if pos:line="418" pos:column="32">if <condition pos:line="418" pos:column="35">(<expr><name pos:line="418" pos:column="36">useMagic</name> <op:operator pos:line="418" pos:column="45">&amp;&amp;</op:operator> <name><name pos:line="418" pos:column="48">sc</name><op:operator pos:line="418" pos:column="50">.</op:operator><name pos:line="418" pos:column="51">currentPos</name></name> <op:operator pos:line="418" pos:column="62">-</op:operator> <name pos:line="418" pos:column="64">chToken</name> <op:operator pos:line="418" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="418" pos:column="75">4</lit:literal>
				<op:operator pos:line="419" pos:column="33">&amp;&amp;</op:operator> <call><name><name pos:line="419" pos:column="36">sc</name><op:operator pos:line="419" pos:column="38">.</op:operator><name pos:line="419" pos:column="39">Match</name></name><argument_list pos:line="419" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="419" pos:column="45">'c'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="419" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="419" pos:column="53">sc</name><op:operator pos:line="419" pos:column="55">.</op:operator><name pos:line="419" pos:column="56">chPrev</name></name> <op:operator pos:line="419" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="419" pos:column="66">'r'</lit:literal> <op:operator pos:line="419" pos:column="70">&amp;&amp;</op:operator> <call><name><name pos:line="419" pos:column="73">sc</name><op:operator pos:line="419" pos:column="75">.</op:operator><name pos:line="419" pos:column="76">GetRelative</name></name><argument_list pos:line="419" pos:column="87">(<argument><expr><op:operator pos:line="419" pos:column="88">-</op:operator><lit:literal type="number" pos:line="419" pos:column="89">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="419" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="419" pos:column="95">'@'</lit:literal></expr>)</condition><then pos:line="419" pos:column="99">
				<expr_stmt><expr><name><name pos:line="420" pos:column="33">sc</name><op:operator pos:line="420" pos:column="35">.</op:operator><name pos:line="420" pos:column="36">state</name></name> <op:operator pos:line="420" pos:column="42">|=</op:operator> <lit:literal type="number" pos:line="420" pos:column="45">0x10</lit:literal></expr>;</expr_stmt></then></if></else></if></else></if>	<comment type="line" pos:line="420" pos:column="57">// (switch to read-only comment style)</comment>
			<break pos:line="421" pos:column="25">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="424" pos:column="17">// handle state change and char coloring AS REQUIRED</comment>
		<if pos:line="425" pos:column="17">if <condition pos:line="425" pos:column="20">(<expr><name pos:line="425" pos:column="21">state2</name> <op:operator pos:line="425" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="425" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="425" pos:column="33">
			<expr_stmt><expr><call><name><name pos:line="426" pos:column="25">styler</name><op:operator pos:line="426" pos:column="31">.</op:operator><name pos:line="426" pos:column="32">ColourTo</name></name><argument_list pos:line="426" pos:column="40">(<argument><expr><name pos:line="426" pos:column="41">chColor</name></expr></argument>, <argument><expr><name><name pos:line="426" pos:column="50">sc</name><op:operator pos:line="426" pos:column="52">.</op:operator><name pos:line="426" pos:column="53">state</name></name></expr></argument>)</argument_list></call></expr><op:operator pos:line="426" pos:column="59">,</op:operator> <expr><call><name><name pos:line="426" pos:column="61">sc</name><op:operator pos:line="426" pos:column="63">.</op:operator><name pos:line="426" pos:column="64">ChangeState</name></name><argument_list pos:line="426" pos:column="75">(<argument><expr><name pos:line="426" pos:column="76">state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<comment type="line" pos:line="427" pos:column="17">// move to next char UNLESS re-scanning current char</comment>
		<if pos:line="428" pos:column="17">if <condition pos:line="428" pos:column="20">(<expr><name pos:line="428" pos:column="21">advance</name></expr>)</condition><then pos:line="428" pos:column="29">
			<expr_stmt><expr><call><name><name pos:line="429" pos:column="25">sc</name><op:operator pos:line="429" pos:column="27">.</op:operator><name pos:line="429" pos:column="28">Forward</name></name><argument_list pos:line="429" pos:column="35">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></while>

	<comment type="line" pos:line="432" pos:column="9">// do any required terminal char coloring (JIC)</comment>
	<expr_stmt><expr><call><name><name pos:line="433" pos:column="9">sc</name><op:operator pos:line="433" pos:column="11">.</op:operator><name pos:line="433" pos:column="12">Complete</name></name><argument_list pos:line="433" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef pos:line="436" pos:column="1">#<cpp:directive pos:line="436" pos:column="2">ifdef</cpp:directive> <name pos:line="436" pos:column="8">BUILD_AS_EXTERNAL_LEXER</name></cpp:ifdef>
<function><type><specifier pos:line="437" pos:column="1">static</specifier>
<cpp:endif pos:line="438" pos:column="1">#<cpp:directive pos:line="438" pos:column="2">endif</cpp:directive></cpp:endif>	<comment type="block" pos:line="438" pos:column="9">/* BUILD_AS_EXTERNAL_LEXER */</comment>
<name pos:line="439" pos:column="1">void</name></type> <name pos:line="439" pos:column="6">FoldCamlDoc</name><parameter_list pos:line="439" pos:column="17">(
	<param><decl><type><name pos:line="440" pos:column="9">unsigned</name></type> <name pos:line="440" pos:column="18">int</name></decl></param>, <param><decl><type><name pos:line="440" pos:column="23">int</name></type></decl></param>,
	<param><decl><type><name pos:line="441" pos:column="9">int</name></type></decl></param>,
	<param><decl><type><name><name pos:line="442" pos:column="9">WordList</name> <type:modifier pos:line="442" pos:column="18">*</type:modifier><index pos:line="442" pos:column="19">[]</index></name></type></decl></param>,
	<param><decl><type><name pos:line="443" pos:column="9">Accessor</name> <type:modifier pos:line="443" pos:column="18">&amp;</type:modifier></type></decl></param>)</parameter_list>
<block pos:line="444" pos:column="1">{
}</block></function>

<decl_stmt><decl><type><specifier pos:line="447" pos:column="1">static</specifier> <specifier pos:line="447" pos:column="8">const</specifier> <name pos:line="447" pos:column="14">char</name> <type:modifier pos:line="447" pos:column="19">*</type:modifier> <specifier pos:line="447" pos:column="21">const</specifier></type> <name><name pos:line="447" pos:column="27">camlWordListDesc</name><index pos:line="447" pos:column="43">[]</index></name> <init pos:line="447" pos:column="46">= <expr><block pos:line="447" pos:column="48">{
	<expr><lit:literal type="string" pos:line="448" pos:column="9">"Keywords"</lit:literal></expr>,		<comment type="line" pos:line="448" pos:column="33">// primary Objective Caml keywords</comment>
	<expr><lit:literal type="string" pos:line="449" pos:column="9">"Keywords2"</lit:literal></expr>,	<comment type="line" pos:line="449" pos:column="25">// "optional" keywords (typically from Pervasives)</comment>
	<expr><lit:literal type="string" pos:line="450" pos:column="9">"Keywords3"</lit:literal></expr>,	<comment type="line" pos:line="450" pos:column="25">// "optional" keywords (typically typenames)</comment>
	<expr><lit:literal type="number" pos:line="451" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifndef pos:line="454" pos:column="1">#<cpp:directive pos:line="454" pos:column="2">ifndef</cpp:directive> <name pos:line="454" pos:column="9">BUILD_AS_EXTERNAL_LEXER</name></cpp:ifndef>
<decl_stmt><decl><type><name pos:line="455" pos:column="1">LexerModule</name></type> <name pos:line="455" pos:column="13">lmCaml</name><argument_list pos:line="455" pos:column="19">(<argument><expr><name pos:line="455" pos:column="20">SCLEX_CAML</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="32">ColouriseCamlDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="455" pos:column="50">"caml"</lit:literal></expr></argument>, <argument><expr><name pos:line="455" pos:column="58">FoldCamlDoc</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="71">camlWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif pos:line="456" pos:column="1">#<cpp:directive pos:line="456" pos:column="2">endif</cpp:directive></cpp:endif>	<comment type="block" pos:line="456" pos:column="9">/* BUILD_AS_EXTERNAL_LEXER */</comment>
</unit>
