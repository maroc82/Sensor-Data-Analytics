<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\FunctionList\functionListPanel.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">FUNCLISTPANEL_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">FUNCLISTPANEL_H</name></cpp:macro></cpp:define>

<comment type="line" pos:line="32" pos:column="1">//#include &lt;windows.h&gt;</comment>
<cpp:ifndef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifndef</cpp:directive> <name pos:line="33" pos:column="9">DOCKINGDLGINTERFACE_H</name></cpp:ifndef>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"DockingDlgInterface.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="35" pos:column="8">//DOCKINGDLGINTERFACE_H</comment>

<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"functionListPanel_rc.h"</lit:literal></cpp:file></cpp:include>

<class_decl pos:line="39" pos:column="1">class <name pos:line="39" pos:column="7">ScintillaEditView</name>;</class_decl>

<struct pos:line="41" pos:column="1">struct <name pos:line="41" pos:column="8">FuncInfo</name> <block pos:line="41" pos:column="17">{<public type="default" pos:line="41" pos:column="18">
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">generic_string</name></type> <name pos:line="42" pos:column="24">_displayText</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">size_t</name></type> <name pos:line="43" pos:column="16">_offsetPos</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<comment type="block" pos:line="45" pos:column="1">/*
1. global function + object + methods: Tree view of 2 levels - only the leaf contains the position info
root
|
|---leaf
|
|---node
|    |
|    |---leaf
|    |
|    |---leaf
|
|---node
     |
     |---leaf

2. each rule associates with file kind. For example, c_def (for *.c), cpp_def (for *.cpp) cpp_header (for *h) java_def (for *.java)...etc.



*/</comment>

<struct pos:line="67" pos:column="1">struct <name pos:line="67" pos:column="8">foundInfo</name> <block pos:line="67" pos:column="18">{<public type="default" pos:line="67" pos:column="19">
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">generic_string</name></type> <name pos:line="68" pos:column="24">_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">generic_string</name></type> <name pos:line="69" pos:column="24">_data2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="70" pos:column="9">int</name></type> <name pos:line="70" pos:column="13">_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="71" pos:column="9">int</name></type> <name pos:line="71" pos:column="13">_pos2</name></decl>;</decl_stmt>
	<comment type="line" pos:line="72" pos:column="9">//foundInfo(): /*_data(TEXT("")), _data2(TEXT("")), _pos(-1) _pos2(-1) */{};</comment>
</public>}</block>;</struct>

<class pos:line="75" pos:column="1">class <name pos:line="75" pos:column="7">FunctionListPanel</name> <super pos:line="75" pos:column="25">: <specifier pos:line="75" pos:column="27">public</specifier> <name pos:line="75" pos:column="34">DockingDlgInterface</name></super> <block pos:line="75" pos:column="54">{<private type="default" pos:line="75" pos:column="55">
</private><public pos:line="76" pos:column="1">public:
	<constructor><name pos:line="77" pos:column="9">FunctionListPanel</name><parameter_list pos:line="77" pos:column="26">()</parameter_list><member_list pos:line="77" pos:column="28">: <call><name pos:line="77" pos:column="30">DockingDlgInterface</name><argument_list pos:line="77" pos:column="49">(<argument><expr><name pos:line="77" pos:column="50">IDD_FUNCLIST_PANEL</name></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="69">,</op:operator> <call><name pos:line="77" pos:column="71">_ppEditView</name><argument_list pos:line="77" pos:column="82">(<argument><expr><name pos:line="77" pos:column="83">NULL</name></expr></argument>)</argument_list></call> </member_list><block pos:line="77" pos:column="89">{}</block></constructor><empty_stmt pos:line="77" pos:column="91">;</empty_stmt>

	<function><type><name pos:line="79" pos:column="9">void</name></type> <name pos:line="79" pos:column="14">init</name><parameter_list pos:line="79" pos:column="18">(<param><decl><type><name pos:line="79" pos:column="19">HINSTANCE</name></type> <name pos:line="79" pos:column="29">hInst</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="36">HWND</name></type> <name pos:line="79" pos:column="41">hPere</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="48">ScintillaEditView</name> <type:modifier pos:line="79" pos:column="66">*</type:modifier><type:modifier pos:line="79" pos:column="67">*</type:modifier></type><name pos:line="79" pos:column="68">ppEditView</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="80">{
		<expr_stmt><expr><call><name><name pos:line="80" pos:column="17">DockingDlgInterface</name><op:operator pos:line="80" pos:column="36">::</op:operator><name pos:line="80" pos:column="38">init</name></name><argument_list pos:line="80" pos:column="42">(<argument><expr><name pos:line="80" pos:column="43">hInst</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="50">hPere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="81" pos:column="17">_ppEditView</name> <op:operator pos:line="81" pos:column="29">=</op:operator> <name pos:line="81" pos:column="31">ppEditView</name></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="82" pos:column="10">;</empty_stmt>

    <function><type><specifier pos:line="84" pos:column="5">virtual</specifier> <name pos:line="84" pos:column="13">void</name></type> <name pos:line="84" pos:column="18">display</name><parameter_list pos:line="84" pos:column="25">(<param><decl><type><name pos:line="84" pos:column="26">bool</name></type> <name pos:line="84" pos:column="31">toShow</name> <init pos:line="84" pos:column="38">= <expr><lit:literal type="boolean" pos:line="84" pos:column="40">true</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="84" pos:column="46">const</specifier> <block pos:line="84" pos:column="52">{
        <expr_stmt><expr><call><name><name pos:line="85" pos:column="9">DockingDlgInterface</name><op:operator pos:line="85" pos:column="28">::</op:operator><name pos:line="85" pos:column="30">display</name></name><argument_list pos:line="85" pos:column="37">(<argument><expr><name pos:line="85" pos:column="38">toShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="86" pos:column="6">;</empty_stmt>

    <function><type><name pos:line="88" pos:column="5">void</name></type> <name pos:line="88" pos:column="10">setParent</name><parameter_list pos:line="88" pos:column="19">(<param><decl><type><name pos:line="88" pos:column="20">HWND</name></type> <name pos:line="88" pos:column="25">parent2set</name></decl></param>)</parameter_list><block pos:line="88" pos:column="36">{
        <expr_stmt><expr><name pos:line="89" pos:column="9">_hParent</name> <op:operator pos:line="89" pos:column="18">=</op:operator> <name pos:line="89" pos:column="20">parent2set</name></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="90" pos:column="6">;</empty_stmt>
	
	<comment type="line" pos:line="92" pos:column="9">// functionalities</comment>
	<function_decl><type><name pos:line="93" pos:column="9">void</name></type> <name pos:line="93" pos:column="14">reload</name><parameter_list pos:line="93" pos:column="20">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="94" pos:column="9">void</name></type> <name pos:line="94" pos:column="14">addEntry</name><parameter_list pos:line="94" pos:column="22">(<param><decl><type><specifier pos:line="94" pos:column="23">const</specifier> <name pos:line="94" pos:column="29">TCHAR</name> <type:modifier pos:line="94" pos:column="35">*</type:modifier></type><name pos:line="94" pos:column="36">displayText</name></decl></param>, <param><decl><type><name pos:line="94" pos:column="49">size_t</name></type> <name pos:line="94" pos:column="56">pos</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="95" pos:column="9">void</name></type> <name pos:line="95" pos:column="14">removeAllEntries</name><parameter_list pos:line="95" pos:column="30">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="96" pos:column="9">void</name></type> <name pos:line="96" pos:column="14">removeEntry</name><parameter_list pos:line="96" pos:column="25">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="97" pos:column="9">void</name></type> <name pos:line="97" pos:column="14">modifyEntry</name><parameter_list pos:line="97" pos:column="25">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="98" pos:column="9">void</name></type> <name pos:line="98" pos:column="14">update</name><parameter_list pos:line="98" pos:column="20">()</parameter_list>;</function_decl>
	
	<function_decl><type><name pos:line="100" pos:column="9">void</name></type> <name pos:line="100" pos:column="14">parse</name><parameter_list pos:line="100" pos:column="19">(<param><decl><type><name><name pos:line="100" pos:column="20">std</name><op:operator pos:line="100" pos:column="23">::</op:operator><name><name pos:line="100" pos:column="25">vector</name><argument_list pos:line="100" pos:column="31">&lt;<argument><expr><name pos:line="100" pos:column="32">foundInfo</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="100" pos:column="43">&amp;</type:modifier></type> <name pos:line="100" pos:column="45">foundInfos</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="57">size_t</name></type> <name pos:line="100" pos:column="64">begin</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="71">size_t</name></type> <name pos:line="100" pos:column="78">end</name></decl></param>, <param><decl><type><specifier pos:line="100" pos:column="83">const</specifier> <name pos:line="100" pos:column="89">TCHAR</name> <type:modifier pos:line="100" pos:column="95">*</type:modifier></type><name pos:line="100" pos:column="96">regExpr2search</name></decl></param>, <param><decl><type><name><name pos:line="100" pos:column="112">std</name><op:operator pos:line="100" pos:column="115">::</op:operator><name><name pos:line="100" pos:column="117">vector</name><argument_list pos:line="100" pos:column="123">&lt; <argument><expr><name pos:line="100" pos:column="125">generic_string</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="100" pos:column="142">dataToSearch</name></decl></param>, <param><decl><type><name><name pos:line="100" pos:column="156">std</name><op:operator pos:line="100" pos:column="159">::</op:operator><name><name pos:line="100" pos:column="161">vector</name><argument_list pos:line="100" pos:column="167">&lt; <argument><expr><name pos:line="100" pos:column="169">generic_string</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="100" pos:column="186">data2ToSearch</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="201">generic_string</name></type> <name pos:line="100" pos:column="216">classStructName</name> <init pos:line="100" pos:column="232">= <expr><call><name pos:line="100" pos:column="234">TEXT</name><argument_list pos:line="100" pos:column="238">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="239">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl></param>)</parameter_list>;</function_decl>
	<comment type="block" pos:line="101" pos:column="9">/*
	void parse(size_t begin, size_t end, const TCHAR *wordToExclude, const TCHAR *regExpr2search, ...);
	bool parseSubLevel(size_t begin, size_t end, const TCHAR *wordToExclude, const TCHAR *regExpr2search, ...);
	*/</comment>
	<function_decl><type><name pos:line="105" pos:column="9">void</name></type> <name pos:line="105" pos:column="14">parse2</name><parameter_list pos:line="105" pos:column="20">(<param><decl><type><name><name pos:line="105" pos:column="21">std</name><op:operator pos:line="105" pos:column="24">::</op:operator><name><name pos:line="105" pos:column="26">vector</name><argument_list pos:line="105" pos:column="32">&lt;<argument><expr><name pos:line="105" pos:column="33">foundInfo</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="105" pos:column="44">&amp;</type:modifier></type> <name pos:line="105" pos:column="46">foundInfos</name></decl></param>, <param><decl><type><name pos:line="105" pos:column="58">size_t</name></type> <name pos:line="105" pos:column="65">begin</name></decl></param>, <param><decl><type><name pos:line="105" pos:column="72">size_t</name></type> <name pos:line="105" pos:column="79">end</name></decl></param>, <param><decl><type><specifier pos:line="105" pos:column="84">const</specifier> <name pos:line="105" pos:column="90">TCHAR</name> <type:modifier pos:line="105" pos:column="96">*</type:modifier></type><name pos:line="105" pos:column="97">block</name></decl></param>, <param><decl><type><name><name pos:line="105" pos:column="104">std</name><op:operator pos:line="105" pos:column="107">::</op:operator><name><name pos:line="105" pos:column="109">vector</name><argument_list pos:line="105" pos:column="115">&lt; <argument><expr><name pos:line="105" pos:column="117">generic_string</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="105" pos:column="134">blockNameToSearch</name></decl></param>,  <param><decl><type><specifier pos:line="105" pos:column="154">const</specifier> <name pos:line="105" pos:column="160">TCHAR</name> <type:modifier pos:line="105" pos:column="166">*</type:modifier></type><name pos:line="105" pos:column="167">bodyOpenSymbol</name></decl></param>, <param><decl><type><specifier pos:line="105" pos:column="183">const</specifier> <name pos:line="105" pos:column="189">TCHAR</name> <type:modifier pos:line="105" pos:column="195">*</type:modifier></type><name pos:line="105" pos:column="196">bodyCloseSymbol</name></decl></param>, <param><decl><type><specifier pos:line="105" pos:column="213">const</specifier> <name pos:line="105" pos:column="219">TCHAR</name> <type:modifier pos:line="105" pos:column="225">*</type:modifier></type><name pos:line="105" pos:column="226">function</name></decl></param>, <param><decl><type><name><name pos:line="105" pos:column="236">std</name><op:operator pos:line="105" pos:column="239">::</op:operator><name><name pos:line="105" pos:column="241">vector</name><argument_list pos:line="105" pos:column="247">&lt; <argument><expr><name pos:line="105" pos:column="249">generic_string</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="105" pos:column="266">functionToSearch</name></decl></param>)</parameter_list>;</function_decl>

</public><protected pos:line="107" pos:column="1">protected:
	<function_decl><type><specifier pos:line="108" pos:column="9">virtual</specifier> <name pos:line="108" pos:column="17">BOOL</name> <name pos:line="108" pos:column="22">CALLBACK</name></type> <name><name pos:line="108" pos:column="31">FunctionListPanel</name><op:operator pos:line="108" pos:column="48">::</op:operator><name pos:line="108" pos:column="50">run_dlgProc</name></name><parameter_list pos:line="108" pos:column="61">(<param><decl><type><name pos:line="108" pos:column="62">UINT</name></type> <name pos:line="108" pos:column="67">message</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="76">WPARAM</name></type> <name pos:line="108" pos:column="83">wParam</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="91">LPARAM</name></type> <name pos:line="108" pos:column="98">lParam</name></decl></param>)</parameter_list>;</function_decl>

</protected><private pos:line="110" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="111" pos:column="9">ScintillaEditView</name> <type:modifier pos:line="111" pos:column="27">*</type:modifier><type:modifier pos:line="111" pos:column="28">*</type:modifier></type><name pos:line="111" pos:column="29">_ppEditView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="112" pos:column="9">std</name><op:operator pos:line="112" pos:column="12">::</op:operator><name><name pos:line="112" pos:column="14">vector</name><argument_list pos:line="112" pos:column="20">&lt;<argument><expr><name pos:line="112" pos:column="21">FuncInfo</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="112" pos:column="31">_funcInfos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="113" pos:column="9">std</name><op:operator pos:line="113" pos:column="12">::</op:operator><name><name pos:line="113" pos:column="14">vector</name><argument_list pos:line="113" pos:column="20">&lt; <argument><expr><name><name pos:line="113" pos:column="22">std</name><op:operator pos:line="113" pos:column="25">::</op:operator><name><name pos:line="113" pos:column="27">pair</name><argument_list pos:line="113" pos:column="31">&lt;<argument><expr><name pos:line="113" pos:column="32">int</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="37">int</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="113" pos:column="44">_skipZones</name></decl>;</decl_stmt>
	<function_decl><type><name pos:line="114" pos:column="9">generic_string</name></type> <name pos:line="114" pos:column="24">parseSubLevel</name><parameter_list pos:line="114" pos:column="37">(<param><decl><type><name pos:line="114" pos:column="38">size_t</name></type> <name pos:line="114" pos:column="45">begin</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="52">size_t</name></type> <name pos:line="114" pos:column="59">end</name></decl></param>, <param><decl><type><name><name pos:line="114" pos:column="64">std</name><op:operator pos:line="114" pos:column="67">::</op:operator><name><name pos:line="114" pos:column="69">vector</name><argument_list pos:line="114" pos:column="75">&lt; <argument><expr><name pos:line="114" pos:column="77">generic_string</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="114" pos:column="94">dataToSearch</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="108">int</name> <type:modifier pos:line="114" pos:column="112">&amp;</type:modifier></type> <name pos:line="114" pos:column="114">foundPos</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="115" pos:column="9">size_t</name></type> <name pos:line="115" pos:column="16">getBodyClosePos</name><parameter_list pos:line="115" pos:column="31">(<param><decl><type><name pos:line="115" pos:column="32">size_t</name></type> <name pos:line="115" pos:column="39">begin</name></decl></param>, <param><decl><type><specifier pos:line="115" pos:column="46">const</specifier> <name pos:line="115" pos:column="52">TCHAR</name> <type:modifier pos:line="115" pos:column="58">*</type:modifier></type><name pos:line="115" pos:column="59">bodyOpenSymbol</name></decl></param>, <param><decl><type><specifier pos:line="115" pos:column="75">const</specifier> <name pos:line="115" pos:column="81">TCHAR</name> <type:modifier pos:line="115" pos:column="87">*</type:modifier></type><name pos:line="115" pos:column="88">bodyCloseSymbol</name></decl></param>)</parameter_list>;</function_decl>
</private>}</block>;</class>
<cpp:endif pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="117" pos:column="8">// FUNCLISTPANEL_H</comment>
</unit>
