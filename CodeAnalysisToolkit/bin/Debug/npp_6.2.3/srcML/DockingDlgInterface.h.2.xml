<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\dockingwnd\DockingDlgInterface.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// this file is part of Function List Plugin for Notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2005 Jens Lorenz &lt;jens.plugin.npp@gmx.de&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">// </comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">// </comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">// </comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>


<cpp:ifndef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifndef</cpp:directive> <name pos:line="28" pos:column="9">DOCKINGDLGINTERFACE_H</name></cpp:ifndef>
<cpp:define pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="29" pos:column="9">DOCKINGDLGINTERFACE_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifndef</cpp:directive> <name pos:line="31" pos:column="9">DOCKING_RESOURCE_H</name></cpp:ifndef>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"dockingResource.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="33" pos:column="8">//DOCKING_RESOURCE_H</comment>

<cpp:ifndef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifndef</cpp:directive> <name pos:line="35" pos:column="9">DOCKING_H</name></cpp:ifndef>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"Docking.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="37" pos:column="8">//DOCKING_H</comment>

<class pos:line="39" pos:column="1">class <name pos:line="39" pos:column="7">DockingDlgInterface</name> <super pos:line="39" pos:column="27">: <specifier pos:line="39" pos:column="29">public</specifier> <name pos:line="39" pos:column="36">StaticDialog</name></super>
<block pos:line="40" pos:column="1">{<private type="default" pos:line="40" pos:column="2">
</private><public pos:line="41" pos:column="1">public:
	<constructor><name pos:line="42" pos:column="9">DockingDlgInterface</name><parameter_list pos:line="42" pos:column="28">()</parameter_list><member_list pos:line="42" pos:column="30">: <call><name pos:line="42" pos:column="32">StaticDialog</name><argument_list pos:line="42" pos:column="44">()</argument_list></call><op:operator pos:line="42" pos:column="46">,</op:operator> <call><name pos:line="42" pos:column="48">_HSource</name><argument_list pos:line="42" pos:column="56">(<argument><expr><name pos:line="42" pos:column="57">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="62">,</op:operator>\
		<call><name pos:line="43" pos:column="17">_dlgID</name><argument_list pos:line="43" pos:column="23">(<argument><expr><op:operator pos:line="43" pos:column="24">-</op:operator><lit:literal type="number" pos:line="43" pos:column="25">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="27">,</op:operator> <call><name pos:line="43" pos:column="29">_isFloating</name><argument_list pos:line="43" pos:column="40">(<argument><expr><name pos:line="43" pos:column="41">TRUE</name></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="46">,</op:operator> <call><name pos:line="43" pos:column="48">_iDockedPos</name><argument_list pos:line="43" pos:column="59">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="60">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="62">,</op:operator> <call><name pos:line="43" pos:column="64">_pluginName</name><argument_list pos:line="43" pos:column="75">(<argument><expr><call><name pos:line="43" pos:column="76">TEXT</name><argument_list pos:line="43" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="81">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="43" pos:column="86">{}</block></constructor><empty_stmt pos:line="43" pos:column="88">;</empty_stmt>

	<constructor><name pos:line="45" pos:column="9">DockingDlgInterface</name><parameter_list pos:line="45" pos:column="28">(<param><decl><type><name pos:line="45" pos:column="29">int</name></type> <name pos:line="45" pos:column="33">dlgID</name></decl></param>)</parameter_list><member_list pos:line="45" pos:column="39">: <call><name pos:line="45" pos:column="41">StaticDialog</name><argument_list pos:line="45" pos:column="53">()</argument_list></call><op:operator pos:line="45" pos:column="55">,</op:operator> <call><name pos:line="45" pos:column="57">_HSource</name><argument_list pos:line="45" pos:column="65">(<argument><expr><name pos:line="45" pos:column="66">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="71">,</op:operator>\
		<call><name pos:line="46" pos:column="17">_dlgID</name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">dlgID</name></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="30">,</op:operator> <call><name pos:line="46" pos:column="32">_isFloating</name><argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">TRUE</name></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="49">,</op:operator> <call><name pos:line="46" pos:column="51">_iDockedPos</name><argument_list pos:line="46" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="65">,</op:operator> <call><name pos:line="46" pos:column="67">_pluginName</name><argument_list pos:line="46" pos:column="78">(<argument><expr><call><name pos:line="46" pos:column="79">TEXT</name><argument_list pos:line="46" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="84">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="46" pos:column="89">{}</block></constructor><empty_stmt pos:line="46" pos:column="91">;</empty_stmt>
	
	<function><type><specifier pos:line="48" pos:column="9">virtual</specifier> <name pos:line="48" pos:column="17">void</name></type> <name pos:line="48" pos:column="22">init</name><parameter_list pos:line="48" pos:column="26">(<param><decl><type><name pos:line="48" pos:column="27">HINSTANCE</name></type> <name pos:line="48" pos:column="37">hInst</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="44">HWND</name></type> <name pos:line="48" pos:column="49">parent</name></decl></param>)</parameter_list>	<block pos:line="48" pos:column="57">{
		<expr_stmt><expr><call><name><name pos:line="49" pos:column="17">StaticDialog</name><op:operator pos:line="49" pos:column="29">::</op:operator><name pos:line="49" pos:column="31">init</name></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">hInst</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="43">parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">TCHAR</name></type> <name><name pos:line="50" pos:column="23">temp</name><index pos:line="50" pos:column="27">[<expr><name pos:line="50" pos:column="28">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="51" pos:column="17">::</op:operator><name pos:line="51" pos:column="19">GetModuleFileName</name></name><argument_list pos:line="51" pos:column="36">(<argument><expr><op:operator pos:line="51" pos:column="37">(</op:operator><name pos:line="51" pos:column="38">HMODULE</name><op:operator pos:line="51" pos:column="45">)</op:operator><name pos:line="51" pos:column="46">hInst</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="53">temp</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="59">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="52" pos:column="17">_moduleName</name> <op:operator pos:line="52" pos:column="29">=</op:operator> <call><name pos:line="52" pos:column="31">PathFindFileName</name><argument_list pos:line="52" pos:column="47">(<argument><expr><name pos:line="52" pos:column="48">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="53" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="55" pos:column="5">void</name></type> <name pos:line="55" pos:column="10">create</name><parameter_list pos:line="55" pos:column="16">(<param><decl><type><name pos:line="55" pos:column="17">tTbData</name> <type:modifier pos:line="55" pos:column="25">*</type:modifier></type> <name pos:line="55" pos:column="27">data</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="33">bool</name></type> <name pos:line="55" pos:column="38">isRTL</name> <init pos:line="55" pos:column="44">= <expr><lit:literal type="boolean" pos:line="55" pos:column="46">false</lit:literal></expr></init></decl></param>)</parameter_list><block pos:line="55" pos:column="52">{
		<expr_stmt><expr><call><name><name pos:line="56" pos:column="17">StaticDialog</name><op:operator pos:line="56" pos:column="29">::</op:operator><name pos:line="56" pos:column="31">create</name></name><argument_list pos:line="56" pos:column="37">(<argument><expr><name pos:line="56" pos:column="38">_dlgID</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="46">isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="57" pos:column="17">TCHAR</name></type> <name><name pos:line="57" pos:column="23">temp</name><index pos:line="57" pos:column="27">[<expr><name pos:line="57" pos:column="28">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="58" pos:column="17">::</op:operator><name pos:line="58" pos:column="19">GetWindowText</name></name><argument_list pos:line="58" pos:column="32">(<argument><expr><name pos:line="58" pos:column="33">_hSelf</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="41">temp</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="47">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="59" pos:column="17">_pluginName</name> <op:operator pos:line="59" pos:column="29">=</op:operator> <name pos:line="59" pos:column="31">temp</name></expr>;</expr_stmt>
        <comment type="line" pos:line="60" pos:column="9">// user information</comment>
		<expr_stmt><expr><name><name pos:line="61" pos:column="17">data</name><op:operator pos:line="61" pos:column="21">-&gt;</op:operator><name pos:line="61" pos:column="23">hClient</name></name>		<op:operator pos:line="61" pos:column="41">=</op:operator> <name pos:line="61" pos:column="43">_hSelf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">data</name><op:operator pos:line="62" pos:column="21">-&gt;</op:operator><name pos:line="62" pos:column="23">pszName</name></name>		<op:operator pos:line="62" pos:column="41">=</op:operator> <op:operator pos:line="62" pos:column="43">(</op:operator><name pos:line="62" pos:column="44">TCHAR</name> <op:operator pos:line="62" pos:column="50">*</op:operator><op:operator pos:line="62" pos:column="51">)</op:operator><call><name><name pos:line="62" pos:column="52">_pluginName</name><op:operator pos:line="62" pos:column="63">.</op:operator><name pos:line="62" pos:column="64">c_str</name></name><argument_list pos:line="62" pos:column="69">()</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="64" pos:column="17">// supported features by plugin</comment>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">data</name><op:operator pos:line="65" pos:column="21">-&gt;</op:operator><name pos:line="65" pos:column="23">uMask</name></name>			<op:operator pos:line="65" pos:column="49">=</op:operator> <lit:literal type="number" pos:line="65" pos:column="51">0</lit:literal></expr>;</expr_stmt>

		<comment type="line" pos:line="67" pos:column="17">// additional info</comment>
		<expr_stmt><expr><name><name pos:line="68" pos:column="17">data</name><op:operator pos:line="68" pos:column="21">-&gt;</op:operator><name pos:line="68" pos:column="23">pszAddInfo</name></name>	<op:operator pos:line="68" pos:column="41">=</op:operator> <name pos:line="68" pos:column="43">NULL</name></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="69" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="71" pos:column="9">virtual</specifier> <name pos:line="71" pos:column="17">void</name></type> <name pos:line="71" pos:column="22">updateDockingDlg</name><parameter_list pos:line="71" pos:column="38">()</parameter_list> <block pos:line="71" pos:column="41">{
		<expr_stmt><expr><call><name><op:operator pos:line="72" pos:column="17">::</op:operator><name pos:line="72" pos:column="19">SendMessage</name></name><argument_list pos:line="72" pos:column="30">(<argument><expr><name pos:line="72" pos:column="31">_hParent</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="41">NPPM_DMMUPDATEDISPINFO</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="72" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="72" pos:column="68">(</op:operator><name pos:line="72" pos:column="69">LPARAM</name><op:operator pos:line="72" pos:column="75">)</op:operator><name pos:line="72" pos:column="76">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

    <function><type><specifier pos:line="75" pos:column="5">virtual</specifier> <name pos:line="75" pos:column="13">void</name></type> <name pos:line="75" pos:column="18">destroy</name><parameter_list pos:line="75" pos:column="25">()</parameter_list> <block pos:line="75" pos:column="28">{
    }</block></function><empty_stmt pos:line="76" pos:column="6">;</empty_stmt>

	<function><type><specifier pos:line="78" pos:column="9">virtual</specifier> <name pos:line="78" pos:column="17">void</name></type> <name pos:line="78" pos:column="22">display</name><parameter_list pos:line="78" pos:column="29">(<param><decl><type><name pos:line="78" pos:column="30">bool</name></type> <name pos:line="78" pos:column="35">toShow</name> <init pos:line="78" pos:column="42">= <expr><lit:literal type="boolean" pos:line="78" pos:column="44">true</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="78" pos:column="50">const</specifier> <block pos:line="78" pos:column="56">{
		<expr_stmt><expr><call><name><op:operator pos:line="79" pos:column="17">::</op:operator><name pos:line="79" pos:column="19">SendMessage</name></name><argument_list pos:line="79" pos:column="30">(<argument><expr><name pos:line="79" pos:column="31">_hParent</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="41">toShow</name><op:operator pos:line="79" pos:column="47">?</op:operator><name pos:line="79" pos:column="48">NPPM_DMMSHOW</name><op:operator pos:line="79" pos:column="60">:</op:operator><name pos:line="79" pos:column="61">NPPM_DMMHIDE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="79" pos:column="75">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="79" pos:column="78">(</op:operator><name pos:line="79" pos:column="79">LPARAM</name><op:operator pos:line="79" pos:column="85">)</op:operator><name pos:line="79" pos:column="86">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="80" pos:column="10">;</empty_stmt>

	<function><type><specifier pos:line="82" pos:column="9">const</specifier> <name pos:line="82" pos:column="15">TCHAR</name> <type:modifier pos:line="82" pos:column="21">*</type:modifier></type> <name pos:line="82" pos:column="23">getPluginFileName</name><parameter_list pos:line="82" pos:column="40">()</parameter_list> <specifier pos:line="82" pos:column="43">const</specifier> <block pos:line="82" pos:column="49">{
		<return pos:line="83" pos:column="17">return <expr><call><name><name pos:line="83" pos:column="24">_moduleName</name><op:operator pos:line="83" pos:column="35">.</op:operator><name pos:line="83" pos:column="36">c_str</name></name><argument_list pos:line="83" pos:column="41">()</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="84" pos:column="10">;</empty_stmt>

</public><protected pos:line="86" pos:column="1">protected :
	<function><type><specifier pos:line="87" pos:column="9">virtual</specifier> <name pos:line="87" pos:column="17">BOOL</name> <name pos:line="87" pos:column="22">CALLBACK</name></type> <name pos:line="87" pos:column="31">run_dlgProc</name><parameter_list pos:line="87" pos:column="42">(<param><decl><type><name pos:line="87" pos:column="43">UINT</name></type> <name pos:line="87" pos:column="48">message</name></decl></param>, <param><decl><type><name pos:line="87" pos:column="57">WPARAM</name></type></decl></param>, <param><decl><type><name pos:line="87" pos:column="65">LPARAM</name></type> <name pos:line="87" pos:column="72">lParam</name></decl></param>)</parameter_list>
	<block pos:line="88" pos:column="9">{
		<switch pos:line="89" pos:column="17">switch <condition pos:line="89" pos:column="24">(<expr><name pos:line="89" pos:column="25">message</name></expr>)</condition> 
		<block pos:line="90" pos:column="17">{

			<case pos:line="92" pos:column="25">case <expr><name pos:line="92" pos:column="30">WM_NOTIFY</name></expr>: 
			<block pos:line="93" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="94" pos:column="33">LPNMHDR</name></type>	<name pos:line="94" pos:column="41">pnmh</name>	<init pos:line="94" pos:column="49">= <expr><op:operator pos:line="94" pos:column="51">(</op:operator><name pos:line="94" pos:column="52">LPNMHDR</name><op:operator pos:line="94" pos:column="59">)</op:operator><name pos:line="94" pos:column="60">lParam</name></expr></init></decl>;</decl_stmt>

				<if pos:line="96" pos:column="33">if <condition pos:line="96" pos:column="36">(<expr><name><name pos:line="96" pos:column="37">pnmh</name><op:operator pos:line="96" pos:column="41">-&gt;</op:operator><name pos:line="96" pos:column="43">hwndFrom</name></name> <op:operator pos:line="96" pos:column="52">==</op:operator> <name pos:line="96" pos:column="55">_hParent</name></expr>)</condition><then pos:line="96" pos:column="64">
				<block pos:line="97" pos:column="33">{
					<switch pos:line="98" pos:column="41">switch <condition pos:line="98" pos:column="48">(<expr><call><name pos:line="98" pos:column="49">LOWORD</name><argument_list pos:line="98" pos:column="55">(<argument><expr><name><name pos:line="98" pos:column="56">pnmh</name><op:operator pos:line="98" pos:column="60">-&gt;</op:operator><name pos:line="98" pos:column="62">code</name></name></expr></argument>)</argument_list></call></expr>)</condition>
					<block pos:line="99" pos:column="41">{
						<case pos:line="100" pos:column="49">case <expr><name pos:line="100" pos:column="54">DMN_CLOSE</name></expr>:
						<block pos:line="101" pos:column="49">{
							<break pos:line="102" pos:column="57">break;</break>
						}</block>
						</case><case pos:line="104" pos:column="49">case <expr><name pos:line="104" pos:column="54">DMN_FLOAT</name></expr>:
						<block pos:line="105" pos:column="49">{
							<expr_stmt><expr><name pos:line="106" pos:column="57">_isFloating</name> <op:operator pos:line="106" pos:column="69">=</op:operator> <lit:literal type="boolean" pos:line="106" pos:column="71">true</lit:literal></expr>;</expr_stmt>
							<break pos:line="107" pos:column="57">break;</break>
						}</block>
						</case><case pos:line="109" pos:column="49">case <expr><name pos:line="109" pos:column="54">DMN_DOCK</name></expr>:
						<block pos:line="110" pos:column="49">{
							<expr_stmt><expr><name pos:line="111" pos:column="57">_iDockedPos</name> <op:operator pos:line="111" pos:column="69">=</op:operator> <call><name pos:line="111" pos:column="71">HIWORD</name><argument_list pos:line="111" pos:column="77">(<argument><expr><name><name pos:line="111" pos:column="78">pnmh</name><op:operator pos:line="111" pos:column="82">-&gt;</op:operator><name pos:line="111" pos:column="84">code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="112" pos:column="57">_isFloating</name> <op:operator pos:line="112" pos:column="69">=</op:operator> <lit:literal type="boolean" pos:line="112" pos:column="71">false</lit:literal></expr>;</expr_stmt>
							<break pos:line="113" pos:column="57">break;</break>
						}</block>
						</case><default pos:line="115" pos:column="49">default:
							<break pos:line="116" pos:column="57">break;</break>
					</default>}</block></switch>
				}</block></then></if>
				<break pos:line="119" pos:column="33">break;</break>
			}</block>
			</case><default pos:line="121" pos:column="25">default:
				<break pos:line="122" pos:column="33">break;</break>
		</default>}</block></switch>
		<return pos:line="124" pos:column="17">return <expr><name pos:line="124" pos:column="24">FALSE</name></expr>;</return>
	}</block></function><empty_stmt pos:line="125" pos:column="10">;</empty_stmt>
	
	<comment type="line" pos:line="127" pos:column="9">// Handles</comment>
    <decl_stmt><decl><type><name pos:line="128" pos:column="5">HWND</name></type>			<name pos:line="128" pos:column="33">_HSource</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="129" pos:column="9">int</name></type>				<name pos:line="129" pos:column="41">_dlgID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">bool</name></type>            <name pos:line="130" pos:column="25">_isFloating</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="131" pos:column="9">int</name></type>				<name pos:line="131" pos:column="41">_iDockedPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="132" pos:column="9">generic_string</name></type>  <name pos:line="132" pos:column="25">_moduleName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="133" pos:column="9">generic_string</name></type>  <name pos:line="133" pos:column="25">_pluginName</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<cpp:endif pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="136" pos:column="8">// DOCKINGDLGINTERFACE_H</comment>
</unit>
