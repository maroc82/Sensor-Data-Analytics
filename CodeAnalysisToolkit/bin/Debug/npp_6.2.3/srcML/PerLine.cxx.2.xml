<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\PerLine.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file PerLine.cxx
 ** Manages data associated with each line of the document
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2009 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="10" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"CellBuffer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"PerLine.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef</cpp:directive> <name pos:line="18" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="19" pos:column="1">using namespace <name pos:line="19" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="22" pos:column="1">MarkerHandleSet</name><op:operator pos:line="22" pos:column="16">::</op:operator><name pos:line="22" pos:column="18">MarkerHandleSet</name></name><parameter_list pos:line="22" pos:column="33">()</parameter_list> <block pos:line="22" pos:column="36">{
	<expr_stmt><expr><name pos:line="23" pos:column="9">root</name> <op:operator pos:line="23" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="23" pos:column="16">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="26" pos:column="1">MarkerHandleSet</name><op:operator pos:line="26" pos:column="16">::</op:operator>~<name pos:line="26" pos:column="19">MarkerHandleSet</name></name><parameter_list pos:line="26" pos:column="34">()</parameter_list> <block pos:line="26" pos:column="37">{
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="27" pos:column="28">*</type:modifier></type><name pos:line="27" pos:column="29">mhn</name> <init pos:line="27" pos:column="33">= <expr><name pos:line="27" pos:column="35">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="28" pos:column="9">while <condition pos:line="28" pos:column="15">(<expr><name pos:line="28" pos:column="16">mhn</name></expr>)</condition> <block pos:line="28" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">MarkerHandleNumber</name> <type:modifier pos:line="29" pos:column="36">*</type:modifier></type><name pos:line="29" pos:column="37">mhnToFree</name> <init pos:line="29" pos:column="47">= <expr><name pos:line="29" pos:column="49">mhn</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">mhn</name> <op:operator pos:line="30" pos:column="21">=</op:operator> <name><name pos:line="30" pos:column="23">mhn</name><op:operator pos:line="30" pos:column="26">-&gt;</op:operator><name pos:line="30" pos:column="28">next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="31" pos:column="17">delete</op:operator> <name pos:line="31" pos:column="24">mhnToFree</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name pos:line="33" pos:column="9">root</name> <op:operator pos:line="33" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="33" pos:column="16">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="36" pos:column="1">int</name></type> <name><name pos:line="36" pos:column="5">MarkerHandleSet</name><op:operator pos:line="36" pos:column="20">::</op:operator><name pos:line="36" pos:column="22">Length</name></name><parameter_list pos:line="36" pos:column="28">()</parameter_list> <specifier pos:line="36" pos:column="31">const</specifier> <block pos:line="36" pos:column="37">{
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">int</name></type> <name pos:line="37" pos:column="13">c</name> <init pos:line="37" pos:column="15">= <expr><lit:literal type="number" pos:line="37" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="38" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="38" pos:column="28">*</type:modifier></type><name pos:line="38" pos:column="29">mhn</name> <init pos:line="38" pos:column="33">= <expr><name pos:line="38" pos:column="35">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="39" pos:column="9">while <condition pos:line="39" pos:column="15">(<expr><name pos:line="39" pos:column="16">mhn</name></expr>)</condition> <block pos:line="39" pos:column="21">{
		<expr_stmt><expr><name pos:line="40" pos:column="17">c</name><op:operator pos:line="40" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">mhn</name> <op:operator pos:line="41" pos:column="21">=</op:operator> <name><name pos:line="41" pos:column="23">mhn</name><op:operator pos:line="41" pos:column="26">-&gt;</op:operator><name pos:line="41" pos:column="28">next</name></name></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">c</name></expr>;</return>
}</block></function>

<function><type><name pos:line="46" pos:column="1">int</name></type> <name><name pos:line="46" pos:column="5">MarkerHandleSet</name><op:operator pos:line="46" pos:column="20">::</op:operator><name pos:line="46" pos:column="22">NumberFromHandle</name></name><parameter_list pos:line="46" pos:column="38">(<param><decl><type><name pos:line="46" pos:column="39">int</name></type> <name pos:line="46" pos:column="43">handle</name></decl></param>)</parameter_list> <specifier pos:line="46" pos:column="51">const</specifier> <block pos:line="46" pos:column="57">{
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="47" pos:column="28">*</type:modifier></type><name pos:line="47" pos:column="29">mhn</name> <init pos:line="47" pos:column="33">= <expr><name pos:line="47" pos:column="35">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="48" pos:column="9">while <condition pos:line="48" pos:column="15">(<expr><name pos:line="48" pos:column="16">mhn</name></expr>)</condition> <block pos:line="48" pos:column="21">{
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name><name pos:line="49" pos:column="21">mhn</name><op:operator pos:line="49" pos:column="24">-&gt;</op:operator><name pos:line="49" pos:column="26">handle</name></name> <op:operator pos:line="49" pos:column="33">==</op:operator> <name pos:line="49" pos:column="36">handle</name></expr>)</condition><then pos:line="49" pos:column="43"> <block pos:line="49" pos:column="44">{
			<return pos:line="50" pos:column="25">return <expr><name><name pos:line="50" pos:column="32">mhn</name><op:operator pos:line="50" pos:column="35">-&gt;</op:operator><name pos:line="50" pos:column="37">number</name></name></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="52" pos:column="17">mhn</name> <op:operator pos:line="52" pos:column="21">=</op:operator> <name><name pos:line="52" pos:column="23">mhn</name><op:operator pos:line="52" pos:column="26">-&gt;</op:operator><name pos:line="52" pos:column="28">next</name></name></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="54" pos:column="9">return <expr><op:operator pos:line="54" pos:column="16">-</op:operator> <lit:literal type="number" pos:line="54" pos:column="18">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="57" pos:column="1">int</name></type> <name><name pos:line="57" pos:column="5">MarkerHandleSet</name><op:operator pos:line="57" pos:column="20">::</op:operator><name pos:line="57" pos:column="22">MarkValue</name></name><parameter_list pos:line="57" pos:column="31">()</parameter_list> <specifier pos:line="57" pos:column="34">const</specifier> <block pos:line="57" pos:column="40">{
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">unsigned</name> <name pos:line="58" pos:column="18">int</name></type> <name pos:line="58" pos:column="22">m</name> <init pos:line="58" pos:column="24">= <expr><lit:literal type="number" pos:line="58" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="59" pos:column="28">*</type:modifier></type><name pos:line="59" pos:column="29">mhn</name> <init pos:line="59" pos:column="33">= <expr><name pos:line="59" pos:column="35">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="60" pos:column="9">while <condition pos:line="60" pos:column="15">(<expr><name pos:line="60" pos:column="16">mhn</name></expr>)</condition> <block pos:line="60" pos:column="21">{
		<expr_stmt><expr><name pos:line="61" pos:column="17">m</name> <op:operator pos:line="61" pos:column="19">|=</op:operator> <op:operator pos:line="61" pos:column="22">(</op:operator><lit:literal type="number" pos:line="61" pos:column="23">1</lit:literal> <op:operator pos:line="61" pos:column="25">&lt;&lt;</op:operator> <name><name pos:line="61" pos:column="28">mhn</name><op:operator pos:line="61" pos:column="31">-&gt;</op:operator><name pos:line="61" pos:column="33">number</name></name><op:operator pos:line="61" pos:column="39">)</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="62" pos:column="17">mhn</name> <op:operator pos:line="62" pos:column="21">=</op:operator> <name><name pos:line="62" pos:column="23">mhn</name><op:operator pos:line="62" pos:column="26">-&gt;</op:operator><name pos:line="62" pos:column="28">next</name></name></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">m</name></expr>;</return>
}</block></function>

<function><type><name pos:line="67" pos:column="1">bool</name></type> <name><name pos:line="67" pos:column="6">MarkerHandleSet</name><op:operator pos:line="67" pos:column="21">::</op:operator><name pos:line="67" pos:column="23">Contains</name></name><parameter_list pos:line="67" pos:column="31">(<param><decl><type><name pos:line="67" pos:column="32">int</name></type> <name pos:line="67" pos:column="36">handle</name></decl></param>)</parameter_list> <specifier pos:line="67" pos:column="44">const</specifier> <block pos:line="67" pos:column="50">{
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="68" pos:column="28">*</type:modifier></type><name pos:line="68" pos:column="29">mhn</name> <init pos:line="68" pos:column="33">= <expr><name pos:line="68" pos:column="35">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="69" pos:column="9">while <condition pos:line="69" pos:column="15">(<expr><name pos:line="69" pos:column="16">mhn</name></expr>)</condition> <block pos:line="69" pos:column="21">{
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name><name pos:line="70" pos:column="21">mhn</name><op:operator pos:line="70" pos:column="24">-&gt;</op:operator><name pos:line="70" pos:column="26">handle</name></name> <op:operator pos:line="70" pos:column="33">==</op:operator> <name pos:line="70" pos:column="36">handle</name></expr>)</condition><then pos:line="70" pos:column="43"> <block pos:line="70" pos:column="44">{
			<return pos:line="71" pos:column="25">return <expr><lit:literal type="boolean" pos:line="71" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="73" pos:column="17">mhn</name> <op:operator pos:line="73" pos:column="21">=</op:operator> <name><name pos:line="73" pos:column="23">mhn</name><op:operator pos:line="73" pos:column="26">-&gt;</op:operator><name pos:line="73" pos:column="28">next</name></name></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="75" pos:column="9">return <expr><lit:literal type="boolean" pos:line="75" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="78" pos:column="1">bool</name></type> <name><name pos:line="78" pos:column="6">MarkerHandleSet</name><op:operator pos:line="78" pos:column="21">::</op:operator><name pos:line="78" pos:column="23">InsertHandle</name></name><parameter_list pos:line="78" pos:column="35">(<param><decl><type><name pos:line="78" pos:column="36">int</name></type> <name pos:line="78" pos:column="40">handle</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="48">int</name></type> <name pos:line="78" pos:column="52">markerNum</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="63">{
	<decl_stmt><decl><type><name pos:line="79" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="79" pos:column="28">*</type:modifier></type><name pos:line="79" pos:column="29">mhn</name> <init pos:line="79" pos:column="33">= <expr><op:operator pos:line="79" pos:column="35">new</op:operator> <name pos:line="79" pos:column="39">MarkerHandleNumber</name></expr></init></decl>;</decl_stmt>
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><op:operator pos:line="80" pos:column="13">!</op:operator><name pos:line="80" pos:column="14">mhn</name></expr>)</condition><then pos:line="80" pos:column="18">
		<return pos:line="81" pos:column="17">return <expr><lit:literal type="boolean" pos:line="81" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name><name pos:line="82" pos:column="9">mhn</name><op:operator pos:line="82" pos:column="12">-&gt;</op:operator><name pos:line="82" pos:column="14">handle</name></name> <op:operator pos:line="82" pos:column="21">=</op:operator> <name pos:line="82" pos:column="23">handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="83" pos:column="9">mhn</name><op:operator pos:line="83" pos:column="12">-&gt;</op:operator><name pos:line="83" pos:column="14">number</name></name> <op:operator pos:line="83" pos:column="21">=</op:operator> <name pos:line="83" pos:column="23">markerNum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="84" pos:column="9">mhn</name><op:operator pos:line="84" pos:column="12">-&gt;</op:operator><name pos:line="84" pos:column="14">next</name></name> <op:operator pos:line="84" pos:column="19">=</op:operator> <name pos:line="84" pos:column="21">root</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="85" pos:column="9">root</name> <op:operator pos:line="85" pos:column="14">=</op:operator> <name pos:line="85" pos:column="16">mhn</name></expr>;</expr_stmt>
	<return pos:line="86" pos:column="9">return <expr><lit:literal type="boolean" pos:line="86" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="89" pos:column="1">void</name></type> <name><name pos:line="89" pos:column="6">MarkerHandleSet</name><op:operator pos:line="89" pos:column="21">::</op:operator><name pos:line="89" pos:column="23">RemoveHandle</name></name><parameter_list pos:line="89" pos:column="35">(<param><decl><type><name pos:line="89" pos:column="36">int</name></type> <name pos:line="89" pos:column="40">handle</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="48">{
	<decl_stmt><decl><type><name pos:line="90" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="90" pos:column="28">*</type:modifier><type:modifier pos:line="90" pos:column="29">*</type:modifier></type><name pos:line="90" pos:column="30">pmhn</name> <init pos:line="90" pos:column="35">= <expr><op:operator pos:line="90" pos:column="37">&amp;</op:operator><name pos:line="90" pos:column="38">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="91" pos:column="9">while <condition pos:line="91" pos:column="15">(<expr><op:operator pos:line="91" pos:column="16">*</op:operator><name pos:line="91" pos:column="17">pmhn</name></expr>)</condition> <block pos:line="91" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="92" pos:column="17">MarkerHandleNumber</name> <type:modifier pos:line="92" pos:column="36">*</type:modifier></type><name pos:line="92" pos:column="37">mhn</name> <init pos:line="92" pos:column="41">= <expr><op:operator pos:line="92" pos:column="43">*</op:operator><name pos:line="92" pos:column="44">pmhn</name></expr></init></decl>;</decl_stmt>
		<if pos:line="93" pos:column="17">if <condition pos:line="93" pos:column="20">(<expr><name><name pos:line="93" pos:column="21">mhn</name><op:operator pos:line="93" pos:column="24">-&gt;</op:operator><name pos:line="93" pos:column="26">handle</name></name> <op:operator pos:line="93" pos:column="33">==</op:operator> <name pos:line="93" pos:column="36">handle</name></expr>)</condition><then pos:line="93" pos:column="43"> <block pos:line="93" pos:column="44">{
			<expr_stmt><expr><op:operator pos:line="94" pos:column="25">*</op:operator><name pos:line="94" pos:column="26">pmhn</name> <op:operator pos:line="94" pos:column="31">=</op:operator> <name><name pos:line="94" pos:column="33">mhn</name><op:operator pos:line="94" pos:column="36">-&gt;</op:operator><name pos:line="94" pos:column="38">next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="95" pos:column="25">delete</op:operator> <name pos:line="95" pos:column="32">mhn</name></expr>;</expr_stmt>
			<return pos:line="96" pos:column="25">return;</return>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="98" pos:column="17">pmhn</name> <op:operator pos:line="98" pos:column="22">=</op:operator> <op:operator pos:line="98" pos:column="24">&amp;</op:operator><op:operator pos:line="98" pos:column="25">(</op:operator><name pos:line="98" pos:column="26">(<type:modifier pos:line="98" pos:column="27">*</type:modifier><name pos:line="98" pos:column="28">pmhn</name>)<op:operator pos:line="98" pos:column="33">-&gt;</op:operator><name pos:line="98" pos:column="35">next</name></name><op:operator pos:line="98" pos:column="39">)</op:operator></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name pos:line="102" pos:column="1">bool</name></type> <name><name pos:line="102" pos:column="6">MarkerHandleSet</name><op:operator pos:line="102" pos:column="21">::</op:operator><name pos:line="102" pos:column="23">RemoveNumber</name></name><parameter_list pos:line="102" pos:column="35">(<param><decl><type><name pos:line="102" pos:column="36">int</name></type> <name pos:line="102" pos:column="40">markerNum</name></decl></param>)</parameter_list> <block pos:line="102" pos:column="51">{
	<decl_stmt><decl><type><name pos:line="103" pos:column="9">bool</name></type> <name pos:line="103" pos:column="14">performedDeletion</name> <init pos:line="103" pos:column="32">= <expr><lit:literal type="boolean" pos:line="103" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="104" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="104" pos:column="28">*</type:modifier><type:modifier pos:line="104" pos:column="29">*</type:modifier></type><name pos:line="104" pos:column="30">pmhn</name> <init pos:line="104" pos:column="35">= <expr><op:operator pos:line="104" pos:column="37">&amp;</op:operator><name pos:line="104" pos:column="38">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="105" pos:column="9">while <condition pos:line="105" pos:column="15">(<expr><op:operator pos:line="105" pos:column="16">*</op:operator><name pos:line="105" pos:column="17">pmhn</name></expr>)</condition> <block pos:line="105" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="106" pos:column="17">MarkerHandleNumber</name> <type:modifier pos:line="106" pos:column="36">*</type:modifier></type><name pos:line="106" pos:column="37">mhn</name> <init pos:line="106" pos:column="41">= <expr><op:operator pos:line="106" pos:column="43">*</op:operator><name pos:line="106" pos:column="44">pmhn</name></expr></init></decl>;</decl_stmt>
		<if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><name><name pos:line="107" pos:column="21">mhn</name><op:operator pos:line="107" pos:column="24">-&gt;</op:operator><name pos:line="107" pos:column="26">number</name></name> <op:operator pos:line="107" pos:column="33">==</op:operator> <name pos:line="107" pos:column="36">markerNum</name></expr>)</condition><then pos:line="107" pos:column="46"> <block pos:line="107" pos:column="47">{
			<expr_stmt><expr><op:operator pos:line="108" pos:column="25">*</op:operator><name pos:line="108" pos:column="26">pmhn</name> <op:operator pos:line="108" pos:column="31">=</op:operator> <name><name pos:line="108" pos:column="33">mhn</name><op:operator pos:line="108" pos:column="36">-&gt;</op:operator><name pos:line="108" pos:column="38">next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="109" pos:column="25">delete</op:operator> <name pos:line="109" pos:column="32">mhn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="110" pos:column="25">performedDeletion</name> <op:operator pos:line="110" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="110" pos:column="45">true</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="111" pos:column="19">else <block pos:line="111" pos:column="24">{
			<expr_stmt><expr><name pos:line="112" pos:column="25">pmhn</name> <op:operator pos:line="112" pos:column="30">=</op:operator> <op:operator pos:line="112" pos:column="32">&amp;</op:operator><op:operator pos:line="112" pos:column="33">(</op:operator><name pos:line="112" pos:column="34">(<type:modifier pos:line="112" pos:column="35">*</type:modifier><name pos:line="112" pos:column="36">pmhn</name>)<op:operator pos:line="112" pos:column="41">-&gt;</op:operator><name pos:line="112" pos:column="43">next</name></name><op:operator pos:line="112" pos:column="47">)</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return pos:line="115" pos:column="9">return <expr><name pos:line="115" pos:column="16">performedDeletion</name></expr>;</return>
}</block></function>

<function><type><name pos:line="118" pos:column="1">void</name></type> <name><name pos:line="118" pos:column="6">MarkerHandleSet</name><op:operator pos:line="118" pos:column="21">::</op:operator><name pos:line="118" pos:column="23">CombineWith</name></name><parameter_list pos:line="118" pos:column="34">(<param><decl><type><name pos:line="118" pos:column="35">MarkerHandleSet</name> <type:modifier pos:line="118" pos:column="51">*</type:modifier></type><name pos:line="118" pos:column="52">other</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="59">{
	<decl_stmt><decl><type><name pos:line="119" pos:column="9">MarkerHandleNumber</name> <type:modifier pos:line="119" pos:column="28">*</type:modifier><type:modifier pos:line="119" pos:column="29">*</type:modifier></type><name pos:line="119" pos:column="30">pmhn</name> <init pos:line="119" pos:column="35">= <expr><op:operator pos:line="119" pos:column="37">&amp;</op:operator><name pos:line="119" pos:column="38">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="120" pos:column="9">while <condition pos:line="120" pos:column="15">(<expr><op:operator pos:line="120" pos:column="16">*</op:operator><name pos:line="120" pos:column="17">pmhn</name></expr>)</condition> <block pos:line="120" pos:column="23">{
		<expr_stmt><expr><name pos:line="121" pos:column="17">pmhn</name> <op:operator pos:line="121" pos:column="22">=</op:operator> <op:operator pos:line="121" pos:column="24">&amp;</op:operator><op:operator pos:line="121" pos:column="25">(</op:operator><name pos:line="121" pos:column="26">(<type:modifier pos:line="121" pos:column="27">*</type:modifier><name pos:line="121" pos:column="28">pmhn</name>)<op:operator pos:line="121" pos:column="33">-&gt;</op:operator><name pos:line="121" pos:column="35">next</name></name><op:operator pos:line="121" pos:column="39">)</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><op:operator pos:line="123" pos:column="9">*</op:operator><name pos:line="123" pos:column="10">pmhn</name> <op:operator pos:line="123" pos:column="15">=</op:operator> <name><name pos:line="123" pos:column="17">other</name><op:operator pos:line="123" pos:column="22">-&gt;</op:operator><name pos:line="123" pos:column="24">root</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="124" pos:column="9">other</name><op:operator pos:line="124" pos:column="14">-&gt;</op:operator><name pos:line="124" pos:column="16">root</name></name> <op:operator pos:line="124" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="124" pos:column="23">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<destructor><name><name pos:line="127" pos:column="1">LineMarkers</name><op:operator pos:line="127" pos:column="12">::</op:operator>~<name pos:line="127" pos:column="15">LineMarkers</name></name><parameter_list pos:line="127" pos:column="26">()</parameter_list> <block pos:line="127" pos:column="29">{
	<expr_stmt><expr><call><name pos:line="128" pos:column="9">Init</name><argument_list pos:line="128" pos:column="13">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="131" pos:column="1">void</name></type> <name><name pos:line="131" pos:column="6">LineMarkers</name><op:operator pos:line="131" pos:column="17">::</op:operator><name pos:line="131" pos:column="19">Init</name></name><parameter_list pos:line="131" pos:column="23">()</parameter_list> <block pos:line="131" pos:column="26">{
	<for pos:line="132" pos:column="9">for (<init><decl><type><name pos:line="132" pos:column="14">int</name></type> <name pos:line="132" pos:column="18">line</name> <init pos:line="132" pos:column="23">= <expr><lit:literal type="number" pos:line="132" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="132" pos:column="28">line</name> <op:operator pos:line="132" pos:column="33">&lt;</op:operator> <call><name><name pos:line="132" pos:column="35">markers</name><op:operator pos:line="132" pos:column="42">.</op:operator><name pos:line="132" pos:column="43">Length</name></name><argument_list pos:line="132" pos:column="49">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="132" pos:column="53">line</name><op:operator pos:line="132" pos:column="57">++</op:operator></expr></incr>) <block pos:line="132" pos:column="61">{
		<expr_stmt><expr><op:operator pos:line="133" pos:column="17">delete</op:operator> <name><name pos:line="133" pos:column="24">markers</name><index pos:line="133" pos:column="31">[<expr><name pos:line="133" pos:column="32">line</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="134" pos:column="17">markers</name><index pos:line="134" pos:column="24">[<expr><name pos:line="134" pos:column="25">line</name></expr>]</index></name> <op:operator pos:line="134" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="134" pos:column="33">0</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="136" pos:column="9">markers</name><op:operator pos:line="136" pos:column="16">.</op:operator><name pos:line="136" pos:column="17">DeleteAll</name></name><argument_list pos:line="136" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="139" pos:column="1">void</name></type> <name><name pos:line="139" pos:column="6">LineMarkers</name><op:operator pos:line="139" pos:column="17">::</op:operator><name pos:line="139" pos:column="19">InsertLine</name></name><parameter_list pos:line="139" pos:column="29">(<param><decl><type><name pos:line="139" pos:column="30">int</name></type> <name pos:line="139" pos:column="34">line</name></decl></param>)</parameter_list> <block pos:line="139" pos:column="40">{
	<if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><call><name><name pos:line="140" pos:column="13">markers</name><op:operator pos:line="140" pos:column="20">.</op:operator><name pos:line="140" pos:column="21">Length</name></name><argument_list pos:line="140" pos:column="27">()</argument_list></call></expr>)</condition><then pos:line="140" pos:column="30"> <block pos:line="140" pos:column="31">{
		<expr_stmt><expr><call><name><name pos:line="141" pos:column="17">markers</name><op:operator pos:line="141" pos:column="24">.</op:operator><name pos:line="141" pos:column="25">Insert</name></name><argument_list pos:line="141" pos:column="31">(<argument><expr><name pos:line="141" pos:column="32">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="141" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="145" pos:column="1">void</name></type> <name><name pos:line="145" pos:column="6">LineMarkers</name><op:operator pos:line="145" pos:column="17">::</op:operator><name pos:line="145" pos:column="19">RemoveLine</name></name><parameter_list pos:line="145" pos:column="29">(<param><decl><type><name pos:line="145" pos:column="30">int</name></type> <name pos:line="145" pos:column="34">line</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="40">{
	<comment type="line" pos:line="146" pos:column="9">// Retain the markers from the deleted line by oring them into the previous line</comment>
	<if pos:line="147" pos:column="9">if <condition pos:line="147" pos:column="12">(<expr><call><name><name pos:line="147" pos:column="13">markers</name><op:operator pos:line="147" pos:column="20">.</op:operator><name pos:line="147" pos:column="21">Length</name></name><argument_list pos:line="147" pos:column="27">()</argument_list></call></expr>)</condition><then pos:line="147" pos:column="30"> <block pos:line="147" pos:column="31">{
		<if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><name pos:line="148" pos:column="21">line</name> <op:operator pos:line="148" pos:column="26">&gt;</op:operator> <lit:literal type="number" pos:line="148" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="148" pos:column="30"> <block pos:line="148" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="149" pos:column="25">MergeMarkers</name><argument_list pos:line="149" pos:column="37">(<argument><expr><name pos:line="149" pos:column="38">line</name> <op:operator pos:line="149" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="149" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="151" pos:column="17">markers</name><op:operator pos:line="151" pos:column="24">.</op:operator><name pos:line="151" pos:column="25">Delete</name></name><argument_list pos:line="151" pos:column="31">(<argument><expr><name pos:line="151" pos:column="32">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="155" pos:column="1">int</name></type> <name><name pos:line="155" pos:column="5">LineMarkers</name><op:operator pos:line="155" pos:column="16">::</op:operator><name pos:line="155" pos:column="18">LineFromHandle</name></name><parameter_list pos:line="155" pos:column="32">(<param><decl><type><name pos:line="155" pos:column="33">int</name></type> <name pos:line="155" pos:column="37">markerHandle</name></decl></param>)</parameter_list> <block pos:line="155" pos:column="51">{
	<if pos:line="156" pos:column="9">if <condition pos:line="156" pos:column="12">(<expr><call><name><name pos:line="156" pos:column="13">markers</name><op:operator pos:line="156" pos:column="20">.</op:operator><name pos:line="156" pos:column="21">Length</name></name><argument_list pos:line="156" pos:column="27">()</argument_list></call></expr>)</condition><then pos:line="156" pos:column="30"> <block pos:line="156" pos:column="31">{
		<for pos:line="157" pos:column="17">for (<init><decl><type><name pos:line="157" pos:column="22">int</name></type> <name pos:line="157" pos:column="26">line</name> <init pos:line="157" pos:column="31">= <expr><lit:literal type="number" pos:line="157" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="157" pos:column="36">line</name> <op:operator pos:line="157" pos:column="41">&lt;</op:operator> <call><name><name pos:line="157" pos:column="43">markers</name><op:operator pos:line="157" pos:column="50">.</op:operator><name pos:line="157" pos:column="51">Length</name></name><argument_list pos:line="157" pos:column="57">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="157" pos:column="61">line</name><op:operator pos:line="157" pos:column="65">++</op:operator></expr></incr>) <block pos:line="157" pos:column="69">{
			<if pos:line="158" pos:column="25">if <condition pos:line="158" pos:column="28">(<expr><name><name pos:line="158" pos:column="29">markers</name><index pos:line="158" pos:column="36">[<expr><name pos:line="158" pos:column="37">line</name></expr>]</index></name></expr>)</condition><then pos:line="158" pos:column="43"> <block pos:line="158" pos:column="44">{
				<if pos:line="159" pos:column="33">if <condition pos:line="159" pos:column="36">(<expr><name><name pos:line="159" pos:column="37">markers</name><index pos:line="159" pos:column="44">[<expr><name pos:line="159" pos:column="45">line</name></expr>]</index></name><op:operator pos:line="159" pos:column="50">-&gt;</op:operator><call><name pos:line="159" pos:column="52">Contains</name><argument_list pos:line="159" pos:column="60">(<argument><expr><name pos:line="159" pos:column="61">markerHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="159" pos:column="75"> <block pos:line="159" pos:column="76">{
					<return pos:line="160" pos:column="41">return <expr><name pos:line="160" pos:column="48">line</name></expr>;</return>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
	<return pos:line="165" pos:column="9">return <expr><op:operator pos:line="165" pos:column="16">-</op:operator><lit:literal type="number" pos:line="165" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="168" pos:column="1">void</name></type> <name><name pos:line="168" pos:column="6">LineMarkers</name><op:operator pos:line="168" pos:column="17">::</op:operator><name pos:line="168" pos:column="19">MergeMarkers</name></name><parameter_list pos:line="168" pos:column="31">(<param><decl><type><name pos:line="168" pos:column="32">int</name></type> <name pos:line="168" pos:column="36">pos</name></decl></param>)</parameter_list> <block pos:line="168" pos:column="41">{
	<if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><name><name pos:line="169" pos:column="13">markers</name><index pos:line="169" pos:column="20">[<expr><name pos:line="169" pos:column="21">pos</name> <op:operator pos:line="169" pos:column="25">+</op:operator> <lit:literal type="number" pos:line="169" pos:column="27">1</lit:literal></expr>]</index></name> <op:operator pos:line="169" pos:column="30">!=</op:operator> <name pos:line="169" pos:column="33">NULL</name></expr>)</condition><then pos:line="169" pos:column="38"> <block pos:line="169" pos:column="39">{
		<if pos:line="170" pos:column="17">if <condition pos:line="170" pos:column="20">(<expr><name><name pos:line="170" pos:column="21">markers</name><index pos:line="170" pos:column="28">[<expr><name pos:line="170" pos:column="29">pos</name></expr>]</index></name> <op:operator pos:line="170" pos:column="34">==</op:operator> <name pos:line="170" pos:column="37">NULL</name></expr>)</condition><then pos:line="170" pos:column="42">
			<expr_stmt><expr><name><name pos:line="171" pos:column="25">markers</name><index pos:line="171" pos:column="32">[<expr><name pos:line="171" pos:column="33">pos</name></expr>]</index></name> <op:operator pos:line="171" pos:column="38">=</op:operator> <op:operator pos:line="171" pos:column="40">new</op:operator> <name pos:line="171" pos:column="44">MarkerHandleSet</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name><name pos:line="172" pos:column="17">markers</name><index pos:line="172" pos:column="24">[<expr><name pos:line="172" pos:column="25">pos</name></expr>]</index></name><op:operator pos:line="172" pos:column="29">-&gt;</op:operator><call><name pos:line="172" pos:column="31">CombineWith</name><argument_list pos:line="172" pos:column="42">(<argument><expr><name><name pos:line="172" pos:column="43">markers</name><index pos:line="172" pos:column="50">[<expr><name pos:line="172" pos:column="51">pos</name> <op:operator pos:line="172" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="172" pos:column="57">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="173" pos:column="17">delete</op:operator> <name><name pos:line="173" pos:column="24">markers</name><index pos:line="173" pos:column="31">[<expr><name pos:line="173" pos:column="32">pos</name> <op:operator pos:line="173" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="173" pos:column="38">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="174" pos:column="17">markers</name><index pos:line="174" pos:column="24">[<expr><name pos:line="174" pos:column="25">pos</name> <op:operator pos:line="174" pos:column="29">+</op:operator> <lit:literal type="number" pos:line="174" pos:column="31">1</lit:literal></expr>]</index></name> <op:operator pos:line="174" pos:column="34">=</op:operator> <name pos:line="174" pos:column="36">NULL</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="178" pos:column="1">int</name></type> <name><name pos:line="178" pos:column="5">LineMarkers</name><op:operator pos:line="178" pos:column="16">::</op:operator><name pos:line="178" pos:column="18">MarkValue</name></name><parameter_list pos:line="178" pos:column="27">(<param><decl><type><name pos:line="178" pos:column="28">int</name></type> <name pos:line="178" pos:column="32">line</name></decl></param>)</parameter_list> <block pos:line="178" pos:column="38">{
	<if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">(<expr><call><name><name pos:line="179" pos:column="13">markers</name><op:operator pos:line="179" pos:column="20">.</op:operator><name pos:line="179" pos:column="21">Length</name></name><argument_list pos:line="179" pos:column="27">()</argument_list></call> <op:operator pos:line="179" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="179" pos:column="33">(</op:operator><name pos:line="179" pos:column="34">line</name> <op:operator pos:line="179" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="179" pos:column="42">0</lit:literal><op:operator pos:line="179" pos:column="43">)</op:operator> <op:operator pos:line="179" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="179" pos:column="48">(</op:operator><name pos:line="179" pos:column="49">line</name> <op:operator pos:line="179" pos:column="54">&lt;</op:operator> <call><name><name pos:line="179" pos:column="56">markers</name><op:operator pos:line="179" pos:column="63">.</op:operator><name pos:line="179" pos:column="64">Length</name></name><argument_list pos:line="179" pos:column="70">()</argument_list></call><op:operator pos:line="179" pos:column="72">)</op:operator> <op:operator pos:line="179" pos:column="74">&amp;&amp;</op:operator> <name><name pos:line="179" pos:column="77">markers</name><index pos:line="179" pos:column="84">[<expr><name pos:line="179" pos:column="85">line</name></expr>]</index></name></expr>)</condition><then pos:line="179" pos:column="91">
		<return pos:line="180" pos:column="17">return <expr><name><name pos:line="180" pos:column="24">markers</name><index pos:line="180" pos:column="31">[<expr><name pos:line="180" pos:column="32">line</name></expr>]</index></name><op:operator pos:line="180" pos:column="37">-&gt;</op:operator><call><name pos:line="180" pos:column="39">MarkValue</name><argument_list pos:line="180" pos:column="48">()</argument_list></call></expr>;</return></then>
	<else pos:line="181" pos:column="9">else
		<return pos:line="182" pos:column="17">return <expr><lit:literal type="number" pos:line="182" pos:column="24">0</lit:literal></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="185" pos:column="1">int</name></type> <name><name pos:line="185" pos:column="5">LineMarkers</name><op:operator pos:line="185" pos:column="16">::</op:operator><name pos:line="185" pos:column="18">AddMark</name></name><parameter_list pos:line="185" pos:column="25">(<param><decl><type><name pos:line="185" pos:column="26">int</name></type> <name pos:line="185" pos:column="30">line</name></decl></param>, <param><decl><type><name pos:line="185" pos:column="36">int</name></type> <name pos:line="185" pos:column="40">markerNum</name></decl></param>, <param><decl><type><name pos:line="185" pos:column="51">int</name></type> <name pos:line="185" pos:column="55">lines</name></decl></param>)</parameter_list> <block pos:line="185" pos:column="62">{
	<expr_stmt><expr><name pos:line="186" pos:column="9">handleCurrent</name><op:operator pos:line="186" pos:column="22">++</op:operator></expr>;</expr_stmt>
	<if pos:line="187" pos:column="9">if <condition pos:line="187" pos:column="12">(<expr><op:operator pos:line="187" pos:column="13">!</op:operator><call><name><name pos:line="187" pos:column="14">markers</name><op:operator pos:line="187" pos:column="21">.</op:operator><name pos:line="187" pos:column="22">Length</name></name><argument_list pos:line="187" pos:column="28">()</argument_list></call></expr>)</condition><then pos:line="187" pos:column="31"> <block pos:line="187" pos:column="32">{
		<comment type="line" pos:line="188" pos:column="17">// No existing markers so allocate one element per line</comment>
		<expr_stmt><expr><call><name><name pos:line="189" pos:column="17">markers</name><op:operator pos:line="189" pos:column="24">.</op:operator><name pos:line="189" pos:column="25">InsertValue</name></name><argument_list pos:line="189" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="189" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><name pos:line="189" pos:column="40">lines</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="189" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="191" pos:column="9">if <condition pos:line="191" pos:column="12">(<expr><name pos:line="191" pos:column="13">line</name> <op:operator pos:line="191" pos:column="18">&gt;=</op:operator> <call><name><name pos:line="191" pos:column="21">markers</name><op:operator pos:line="191" pos:column="28">.</op:operator><name pos:line="191" pos:column="29">Length</name></name><argument_list pos:line="191" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="191" pos:column="38"> <block pos:line="191" pos:column="39">{
		<return pos:line="192" pos:column="17">return <expr><op:operator pos:line="192" pos:column="24">-</op:operator><lit:literal type="number" pos:line="192" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then></if>
	<if pos:line="194" pos:column="9">if <condition pos:line="194" pos:column="12">(<expr><op:operator pos:line="194" pos:column="13">!</op:operator><name><name pos:line="194" pos:column="14">markers</name><index pos:line="194" pos:column="21">[<expr><name pos:line="194" pos:column="22">line</name></expr>]</index></name></expr>)</condition><then pos:line="194" pos:column="28"> <block pos:line="194" pos:column="29">{
		<comment type="line" pos:line="195" pos:column="17">// Need new structure to hold marker handle</comment>
		<expr_stmt><expr><name><name pos:line="196" pos:column="17">markers</name><index pos:line="196" pos:column="24">[<expr><name pos:line="196" pos:column="25">line</name></expr>]</index></name> <op:operator pos:line="196" pos:column="31">=</op:operator> <op:operator pos:line="196" pos:column="33">new</op:operator> <call><name pos:line="196" pos:column="37">MarkerHandleSet</name><argument_list pos:line="196" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="197" pos:column="17">if <condition pos:line="197" pos:column="20">(<expr><op:operator pos:line="197" pos:column="21">!</op:operator><name><name pos:line="197" pos:column="22">markers</name><index pos:line="197" pos:column="29">[<expr><name pos:line="197" pos:column="30">line</name></expr>]</index></name></expr>)</condition><then pos:line="197" pos:column="36">
			<return pos:line="198" pos:column="25">return <expr><op:operator pos:line="198" pos:column="32">-</op:operator><lit:literal type="number" pos:line="198" pos:column="33">1</lit:literal></expr>;</return></then></if>
	}</block></then></if>
	<expr_stmt><expr><name><name pos:line="200" pos:column="9">markers</name><index pos:line="200" pos:column="16">[<expr><name pos:line="200" pos:column="17">line</name></expr>]</index></name><op:operator pos:line="200" pos:column="22">-&gt;</op:operator><call><name pos:line="200" pos:column="24">InsertHandle</name><argument_list pos:line="200" pos:column="36">(<argument><expr><name pos:line="200" pos:column="37">handleCurrent</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="52">markerNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:line="202" pos:column="9">return <expr><name pos:line="202" pos:column="16">handleCurrent</name></expr>;</return>
}</block></function>

<function><type><name pos:line="205" pos:column="1">bool</name></type> <name><name pos:line="205" pos:column="6">LineMarkers</name><op:operator pos:line="205" pos:column="17">::</op:operator><name pos:line="205" pos:column="19">DeleteMark</name></name><parameter_list pos:line="205" pos:column="29">(<param><decl><type><name pos:line="205" pos:column="30">int</name></type> <name pos:line="205" pos:column="34">line</name></decl></param>, <param><decl><type><name pos:line="205" pos:column="40">int</name></type> <name pos:line="205" pos:column="44">markerNum</name></decl></param>, <param><decl><type><name pos:line="205" pos:column="55">bool</name></type> <name pos:line="205" pos:column="60">all</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="65">{
	<decl_stmt><decl><type><name pos:line="206" pos:column="9">bool</name></type> <name pos:line="206" pos:column="14">someChanges</name> <init pos:line="206" pos:column="26">= <expr><lit:literal type="boolean" pos:line="206" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="207" pos:column="9">if <condition pos:line="207" pos:column="12">(<expr><call><name><name pos:line="207" pos:column="13">markers</name><op:operator pos:line="207" pos:column="20">.</op:operator><name pos:line="207" pos:column="21">Length</name></name><argument_list pos:line="207" pos:column="27">()</argument_list></call> <op:operator pos:line="207" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="207" pos:column="33">(</op:operator><name pos:line="207" pos:column="34">line</name> <op:operator pos:line="207" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="207" pos:column="42">0</lit:literal><op:operator pos:line="207" pos:column="43">)</op:operator> <op:operator pos:line="207" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="207" pos:column="48">(</op:operator><name pos:line="207" pos:column="49">line</name> <op:operator pos:line="207" pos:column="54">&lt;</op:operator> <call><name><name pos:line="207" pos:column="56">markers</name><op:operator pos:line="207" pos:column="63">.</op:operator><name pos:line="207" pos:column="64">Length</name></name><argument_list pos:line="207" pos:column="70">()</argument_list></call><op:operator pos:line="207" pos:column="72">)</op:operator> <op:operator pos:line="207" pos:column="74">&amp;&amp;</op:operator> <name><name pos:line="207" pos:column="77">markers</name><index pos:line="207" pos:column="84">[<expr><name pos:line="207" pos:column="85">line</name></expr>]</index></name></expr>)</condition><then pos:line="207" pos:column="91"> <block pos:line="207" pos:column="92">{
		<if pos:line="208" pos:column="17">if <condition pos:line="208" pos:column="20">(<expr><name pos:line="208" pos:column="21">markerNum</name> <op:operator pos:line="208" pos:column="31">==</op:operator> <op:operator pos:line="208" pos:column="34">-</op:operator><lit:literal type="number" pos:line="208" pos:column="35">1</lit:literal></expr>)</condition><then pos:line="208" pos:column="37"> <block pos:line="208" pos:column="38">{
			<expr_stmt><expr><name pos:line="209" pos:column="25">someChanges</name> <op:operator pos:line="209" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="209" pos:column="39">true</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="210" pos:column="25">delete</op:operator> <name><name pos:line="210" pos:column="32">markers</name><index pos:line="210" pos:column="39">[<expr><name pos:line="210" pos:column="40">line</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="211" pos:column="25">markers</name><index pos:line="211" pos:column="32">[<expr><name pos:line="211" pos:column="33">line</name></expr>]</index></name> <op:operator pos:line="211" pos:column="39">=</op:operator> <name pos:line="211" pos:column="41">NULL</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="212" pos:column="19">else <block pos:line="212" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="213" pos:column="25">bool</name></type> <name pos:line="213" pos:column="30">performedDeletion</name> <init pos:line="213" pos:column="48">= <expr><name><name pos:line="213" pos:column="50">markers</name><index pos:line="213" pos:column="57">[<expr><name pos:line="213" pos:column="58">line</name></expr>]</index></name><op:operator pos:line="213" pos:column="63">-&gt;</op:operator><call><name pos:line="213" pos:column="65">RemoveNumber</name><argument_list pos:line="213" pos:column="77">(<argument><expr><name pos:line="213" pos:column="78">markerNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="214" pos:column="25">someChanges</name> <op:operator pos:line="214" pos:column="37">=</op:operator> <name pos:line="214" pos:column="39">someChanges</name> <op:operator pos:line="214" pos:column="51">||</op:operator> <name pos:line="214" pos:column="54">performedDeletion</name></expr>;</expr_stmt>
			<while pos:line="215" pos:column="25">while <condition pos:line="215" pos:column="31">(<expr><name pos:line="215" pos:column="32">all</name> <op:operator pos:line="215" pos:column="36">&amp;&amp;</op:operator> <name pos:line="215" pos:column="39">performedDeletion</name></expr>)</condition> <block pos:line="215" pos:column="58">{
				<expr_stmt><expr><name pos:line="216" pos:column="33">performedDeletion</name> <op:operator pos:line="216" pos:column="51">=</op:operator> <name><name pos:line="216" pos:column="53">markers</name><index pos:line="216" pos:column="60">[<expr><name pos:line="216" pos:column="61">line</name></expr>]</index></name><op:operator pos:line="216" pos:column="66">-&gt;</op:operator><call><name pos:line="216" pos:column="68">RemoveNumber</name><argument_list pos:line="216" pos:column="80">(<argument><expr><name pos:line="216" pos:column="81">markerNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="217" pos:column="33">someChanges</name> <op:operator pos:line="217" pos:column="45">=</op:operator> <name pos:line="217" pos:column="47">someChanges</name> <op:operator pos:line="217" pos:column="59">||</op:operator> <name pos:line="217" pos:column="62">performedDeletion</name></expr>;</expr_stmt>
			}</block></while>
			<if pos:line="219" pos:column="25">if <condition pos:line="219" pos:column="28">(<expr><name><name pos:line="219" pos:column="29">markers</name><index pos:line="219" pos:column="36">[<expr><name pos:line="219" pos:column="37">line</name></expr>]</index></name><op:operator pos:line="219" pos:column="42">-&gt;</op:operator><call><name pos:line="219" pos:column="44">Length</name><argument_list pos:line="219" pos:column="50">()</argument_list></call> <op:operator pos:line="219" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="219" pos:column="56">0</lit:literal></expr>)</condition><then pos:line="219" pos:column="58"> <block pos:line="219" pos:column="59">{
				<expr_stmt><expr><op:operator pos:line="220" pos:column="33">delete</op:operator> <name><name pos:line="220" pos:column="40">markers</name><index pos:line="220" pos:column="47">[<expr><name pos:line="220" pos:column="48">line</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="221" pos:column="33">markers</name><index pos:line="221" pos:column="40">[<expr><name pos:line="221" pos:column="41">line</name></expr>]</index></name> <op:operator pos:line="221" pos:column="47">=</op:operator> <name pos:line="221" pos:column="49">NULL</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
	}</block></then></if>
	<return pos:line="225" pos:column="9">return <expr><name pos:line="225" pos:column="16">someChanges</name></expr>;</return>
}</block></function>

<function><type><name pos:line="228" pos:column="1">void</name></type> <name><name pos:line="228" pos:column="6">LineMarkers</name><op:operator pos:line="228" pos:column="17">::</op:operator><name pos:line="228" pos:column="19">DeleteMarkFromHandle</name></name><parameter_list pos:line="228" pos:column="39">(<param><decl><type><name pos:line="228" pos:column="40">int</name></type> <name pos:line="228" pos:column="44">markerHandle</name></decl></param>)</parameter_list> <block pos:line="228" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="229" pos:column="9">int</name></type> <name pos:line="229" pos:column="13">line</name> <init pos:line="229" pos:column="18">= <expr><call><name pos:line="229" pos:column="20">LineFromHandle</name><argument_list pos:line="229" pos:column="34">(<argument><expr><name pos:line="229" pos:column="35">markerHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="230" pos:column="9">if <condition pos:line="230" pos:column="12">(<expr><name pos:line="230" pos:column="13">line</name> <op:operator pos:line="230" pos:column="18">&gt;=</op:operator> <lit:literal type="number" pos:line="230" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="230" pos:column="23"> <block pos:line="230" pos:column="24">{
		<expr_stmt><expr><name><name pos:line="231" pos:column="17">markers</name><index pos:line="231" pos:column="24">[<expr><name pos:line="231" pos:column="25">line</name></expr>]</index></name><op:operator pos:line="231" pos:column="30">-&gt;</op:operator><call><name pos:line="231" pos:column="32">RemoveHandle</name><argument_list pos:line="231" pos:column="44">(<argument><expr><name pos:line="231" pos:column="45">markerHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="232" pos:column="17">if <condition pos:line="232" pos:column="20">(<expr><name><name pos:line="232" pos:column="21">markers</name><index pos:line="232" pos:column="28">[<expr><name pos:line="232" pos:column="29">line</name></expr>]</index></name><op:operator pos:line="232" pos:column="34">-&gt;</op:operator><call><name pos:line="232" pos:column="36">Length</name><argument_list pos:line="232" pos:column="42">()</argument_list></call> <op:operator pos:line="232" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="232" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="232" pos:column="50"> <block pos:line="232" pos:column="51">{
			<expr_stmt><expr><op:operator pos:line="233" pos:column="25">delete</op:operator> <name><name pos:line="233" pos:column="32">markers</name><index pos:line="233" pos:column="39">[<expr><name pos:line="233" pos:column="40">line</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="234" pos:column="25">markers</name><index pos:line="234" pos:column="32">[<expr><name pos:line="234" pos:column="33">line</name></expr>]</index></name> <op:operator pos:line="234" pos:column="39">=</op:operator> <name pos:line="234" pos:column="41">NULL</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<destructor><name><name pos:line="239" pos:column="1">LineLevels</name><op:operator pos:line="239" pos:column="11">::</op:operator>~<name pos:line="239" pos:column="14">LineLevels</name></name><parameter_list pos:line="239" pos:column="24">()</parameter_list> <block pos:line="239" pos:column="27">{
}</block></destructor>

<function><type><name pos:line="242" pos:column="1">void</name></type> <name><name pos:line="242" pos:column="6">LineLevels</name><op:operator pos:line="242" pos:column="16">::</op:operator><name pos:line="242" pos:column="18">Init</name></name><parameter_list pos:line="242" pos:column="22">()</parameter_list> <block pos:line="242" pos:column="25">{
	<expr_stmt><expr><call><name><name pos:line="243" pos:column="9">levels</name><op:operator pos:line="243" pos:column="15">.</op:operator><name pos:line="243" pos:column="16">DeleteAll</name></name><argument_list pos:line="243" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="246" pos:column="1">void</name></type> <name><name pos:line="246" pos:column="6">LineLevels</name><op:operator pos:line="246" pos:column="16">::</op:operator><name pos:line="246" pos:column="18">InsertLine</name></name><parameter_list pos:line="246" pos:column="28">(<param><decl><type><name pos:line="246" pos:column="29">int</name></type> <name pos:line="246" pos:column="33">line</name></decl></param>)</parameter_list> <block pos:line="246" pos:column="39">{
	<if pos:line="247" pos:column="9">if <condition pos:line="247" pos:column="12">(<expr><call><name><name pos:line="247" pos:column="13">levels</name><op:operator pos:line="247" pos:column="19">.</op:operator><name pos:line="247" pos:column="20">Length</name></name><argument_list pos:line="247" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="247" pos:column="29"> <block pos:line="247" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="248" pos:column="17">int</name></type> <name pos:line="248" pos:column="21">level</name> <init pos:line="248" pos:column="27">= <expr><op:operator pos:line="248" pos:column="29">(</op:operator><name pos:line="248" pos:column="30">line</name> <op:operator pos:line="248" pos:column="35">&lt;</op:operator> <call><name><name pos:line="248" pos:column="37">levels</name><op:operator pos:line="248" pos:column="43">.</op:operator><name pos:line="248" pos:column="44">Length</name></name><argument_list pos:line="248" pos:column="50">()</argument_list></call><op:operator pos:line="248" pos:column="52">)</op:operator> <op:operator pos:line="248" pos:column="54">?</op:operator> <name><name pos:line="248" pos:column="56">levels</name><index pos:line="248" pos:column="62">[<expr><name pos:line="248" pos:column="63">line</name></expr>]</index></name> <op:operator pos:line="248" pos:column="69">:</op:operator> <name pos:line="248" pos:column="71">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="249" pos:column="17">levels</name><op:operator pos:line="249" pos:column="23">.</op:operator><name pos:line="249" pos:column="24">InsertValue</name></name><argument_list pos:line="249" pos:column="35">(<argument><expr><name pos:line="249" pos:column="36">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="249" pos:column="42">1</lit:literal></expr></argument>, <argument><expr><name pos:line="249" pos:column="45">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="253" pos:column="1">void</name></type> <name><name pos:line="253" pos:column="6">LineLevels</name><op:operator pos:line="253" pos:column="16">::</op:operator><name pos:line="253" pos:column="18">RemoveLine</name></name><parameter_list pos:line="253" pos:column="28">(<param><decl><type><name pos:line="253" pos:column="29">int</name></type> <name pos:line="253" pos:column="33">line</name></decl></param>)</parameter_list> <block pos:line="253" pos:column="39">{
	<if pos:line="254" pos:column="9">if <condition pos:line="254" pos:column="12">(<expr><call><name><name pos:line="254" pos:column="13">levels</name><op:operator pos:line="254" pos:column="19">.</op:operator><name pos:line="254" pos:column="20">Length</name></name><argument_list pos:line="254" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="254" pos:column="29"> <block pos:line="254" pos:column="30">{
		<comment type="line" pos:line="255" pos:column="17">// Move up following lines but merge header flag from this line</comment>
		<comment type="line" pos:line="256" pos:column="17">// to line before to avoid a temporary disappearence causing expansion.</comment>
		<decl_stmt><decl><type><name pos:line="257" pos:column="17">int</name></type> <name pos:line="257" pos:column="21">firstHeader</name> <init pos:line="257" pos:column="33">= <expr><name><name pos:line="257" pos:column="35">levels</name><index pos:line="257" pos:column="41">[<expr><name pos:line="257" pos:column="42">line</name></expr>]</index></name> <op:operator pos:line="257" pos:column="48">&amp;</op:operator> <name pos:line="257" pos:column="50">SC_FOLDLEVELHEADERFLAG</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="258" pos:column="17">levels</name><op:operator pos:line="258" pos:column="23">.</op:operator><name pos:line="258" pos:column="24">Delete</name></name><argument_list pos:line="258" pos:column="30">(<argument><expr><name pos:line="258" pos:column="31">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="259" pos:column="17">if <condition pos:line="259" pos:column="20">(<expr><name pos:line="259" pos:column="21">line</name> <op:operator pos:line="259" pos:column="26">==</op:operator> <call><name><name pos:line="259" pos:column="29">levels</name><op:operator pos:line="259" pos:column="35">.</op:operator><name pos:line="259" pos:column="36">Length</name></name><argument_list pos:line="259" pos:column="42">()</argument_list></call><op:operator pos:line="259" pos:column="44">-</op:operator><lit:literal type="number" pos:line="259" pos:column="45">1</lit:literal></expr>)</condition><then pos:line="259" pos:column="47"> <comment type="line" pos:line="259" pos:column="48">// Last line loses the header flag</comment>
			<expr_stmt><expr><name><name pos:line="260" pos:column="25">levels</name><index pos:line="260" pos:column="31">[<expr><name pos:line="260" pos:column="32">line</name><op:operator pos:line="260" pos:column="36">-</op:operator><lit:literal type="number" pos:line="260" pos:column="37">1</lit:literal></expr>]</index></name> <op:operator pos:line="260" pos:column="40">&amp;=</op:operator> <op:operator pos:line="260" pos:column="43">~</op:operator><name pos:line="260" pos:column="44">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then>
		<else pos:line="261" pos:column="17">else <if pos:line="261" pos:column="22">if <condition pos:line="261" pos:column="25">(<expr><name pos:line="261" pos:column="26">line</name> <op:operator pos:line="261" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="261" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="261" pos:column="35">
			<expr_stmt><expr><name><name pos:line="262" pos:column="25">levels</name><index pos:line="262" pos:column="31">[<expr><name pos:line="262" pos:column="32">line</name><op:operator pos:line="262" pos:column="36">-</op:operator><lit:literal type="number" pos:line="262" pos:column="37">1</lit:literal></expr>]</index></name> <op:operator pos:line="262" pos:column="40">|=</op:operator> <name pos:line="262" pos:column="43">firstHeader</name></expr>;</expr_stmt></then></if></else></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="266" pos:column="1">void</name></type> <name><name pos:line="266" pos:column="6">LineLevels</name><op:operator pos:line="266" pos:column="16">::</op:operator><name pos:line="266" pos:column="18">ExpandLevels</name></name><parameter_list pos:line="266" pos:column="30">(<param><decl><type><name pos:line="266" pos:column="31">int</name></type> <name pos:line="266" pos:column="35">sizeNew</name></decl></param>)</parameter_list> <block pos:line="266" pos:column="44">{
	<expr_stmt><expr><call><name><name pos:line="267" pos:column="9">levels</name><op:operator pos:line="267" pos:column="15">.</op:operator><name pos:line="267" pos:column="16">InsertValue</name></name><argument_list pos:line="267" pos:column="27">(<argument><expr><call><name><name pos:line="267" pos:column="28">levels</name><op:operator pos:line="267" pos:column="34">.</op:operator><name pos:line="267" pos:column="35">Length</name></name><argument_list pos:line="267" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="267" pos:column="45">sizeNew</name> <op:operator pos:line="267" pos:column="53">-</op:operator> <call><name><name pos:line="267" pos:column="55">levels</name><op:operator pos:line="267" pos:column="61">.</op:operator><name pos:line="267" pos:column="62">Length</name></name><argument_list pos:line="267" pos:column="68">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="267" pos:column="72">SC_FOLDLEVELBASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="270" pos:column="1">void</name></type> <name><name pos:line="270" pos:column="6">LineLevels</name><op:operator pos:line="270" pos:column="16">::</op:operator><name pos:line="270" pos:column="18">ClearLevels</name></name><parameter_list pos:line="270" pos:column="29">()</parameter_list> <block pos:line="270" pos:column="32">{
	<expr_stmt><expr><call><name><name pos:line="271" pos:column="9">levels</name><op:operator pos:line="271" pos:column="15">.</op:operator><name pos:line="271" pos:column="16">DeleteAll</name></name><argument_list pos:line="271" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="274" pos:column="1">int</name></type> <name><name pos:line="274" pos:column="5">LineLevels</name><op:operator pos:line="274" pos:column="15">::</op:operator><name pos:line="274" pos:column="17">SetLevel</name></name><parameter_list pos:line="274" pos:column="25">(<param><decl><type><name pos:line="274" pos:column="26">int</name></type> <name pos:line="274" pos:column="30">line</name></decl></param>, <param><decl><type><name pos:line="274" pos:column="36">int</name></type> <name pos:line="274" pos:column="40">level</name></decl></param>, <param><decl><type><name pos:line="274" pos:column="47">int</name></type> <name pos:line="274" pos:column="51">lines</name></decl></param>)</parameter_list> <block pos:line="274" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="275" pos:column="9">int</name></type> <name pos:line="275" pos:column="13">prev</name> <init pos:line="275" pos:column="18">= <expr><lit:literal type="number" pos:line="275" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="276" pos:column="9">if <condition pos:line="276" pos:column="12">(<expr><op:operator pos:line="276" pos:column="13">(</op:operator><name pos:line="276" pos:column="14">line</name> <op:operator pos:line="276" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="276" pos:column="22">0</lit:literal><op:operator pos:line="276" pos:column="23">)</op:operator> <op:operator pos:line="276" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="276" pos:column="28">(</op:operator><name pos:line="276" pos:column="29">line</name> <op:operator pos:line="276" pos:column="34">&lt;</op:operator> <name pos:line="276" pos:column="36">lines</name><op:operator pos:line="276" pos:column="41">)</op:operator></expr>)</condition><then pos:line="276" pos:column="43"> <block pos:line="276" pos:column="44">{
		<if pos:line="277" pos:column="17">if <condition pos:line="277" pos:column="20">(<expr><op:operator pos:line="277" pos:column="21">!</op:operator><call><name><name pos:line="277" pos:column="22">levels</name><op:operator pos:line="277" pos:column="28">.</op:operator><name pos:line="277" pos:column="29">Length</name></name><argument_list pos:line="277" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="277" pos:column="38"> <block pos:line="277" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="278" pos:column="25">ExpandLevels</name><argument_list pos:line="278" pos:column="37">(<argument><expr><name pos:line="278" pos:column="38">lines</name> <op:operator pos:line="278" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="278" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="280" pos:column="17">prev</name> <op:operator pos:line="280" pos:column="22">=</op:operator> <name><name pos:line="280" pos:column="24">levels</name><index pos:line="280" pos:column="30">[<expr><name pos:line="280" pos:column="31">line</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="281" pos:column="17">if <condition pos:line="281" pos:column="20">(<expr><name pos:line="281" pos:column="21">prev</name> <op:operator pos:line="281" pos:column="26">!=</op:operator> <name pos:line="281" pos:column="29">level</name></expr>)</condition><then pos:line="281" pos:column="35"> <block pos:line="281" pos:column="36">{
			<expr_stmt><expr><name><name pos:line="282" pos:column="25">levels</name><index pos:line="282" pos:column="31">[<expr><name pos:line="282" pos:column="32">line</name></expr>]</index></name> <op:operator pos:line="282" pos:column="38">=</op:operator> <name pos:line="282" pos:column="40">level</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="285" pos:column="9">return <expr><name pos:line="285" pos:column="16">prev</name></expr>;</return>
}</block></function>

<function><type><name pos:line="288" pos:column="1">int</name></type> <name><name pos:line="288" pos:column="5">LineLevels</name><op:operator pos:line="288" pos:column="15">::</op:operator><name pos:line="288" pos:column="17">GetLevel</name></name><parameter_list pos:line="288" pos:column="25">(<param><decl><type><name pos:line="288" pos:column="26">int</name></type> <name pos:line="288" pos:column="30">line</name></decl></param>)</parameter_list> <block pos:line="288" pos:column="36">{
	<if pos:line="289" pos:column="9">if <condition pos:line="289" pos:column="12">(<expr><call><name><name pos:line="289" pos:column="13">levels</name><op:operator pos:line="289" pos:column="19">.</op:operator><name pos:line="289" pos:column="20">Length</name></name><argument_list pos:line="289" pos:column="26">()</argument_list></call> <op:operator pos:line="289" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="289" pos:column="32">(</op:operator><name pos:line="289" pos:column="33">line</name> <op:operator pos:line="289" pos:column="38">&gt;=</op:operator> <lit:literal type="number" pos:line="289" pos:column="41">0</lit:literal><op:operator pos:line="289" pos:column="42">)</op:operator> <op:operator pos:line="289" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="289" pos:column="47">(</op:operator><name pos:line="289" pos:column="48">line</name> <op:operator pos:line="289" pos:column="53">&lt;</op:operator> <call><name><name pos:line="289" pos:column="55">levels</name><op:operator pos:line="289" pos:column="61">.</op:operator><name pos:line="289" pos:column="62">Length</name></name><argument_list pos:line="289" pos:column="68">()</argument_list></call><op:operator pos:line="289" pos:column="70">)</op:operator></expr>)</condition><then pos:line="289" pos:column="72"> <block pos:line="289" pos:column="73">{
		<return pos:line="290" pos:column="17">return <expr><name><name pos:line="290" pos:column="24">levels</name><index pos:line="290" pos:column="30">[<expr><name pos:line="290" pos:column="31">line</name></expr>]</index></name></expr>;</return>
	}</block></then> <else pos:line="291" pos:column="11">else <block pos:line="291" pos:column="16">{
		<return pos:line="292" pos:column="17">return <expr><name pos:line="292" pos:column="24">SC_FOLDLEVELBASE</name></expr>;</return>
	}</block></else></if>
}</block></function>

<destructor><name><name pos:line="296" pos:column="1">LineState</name><op:operator pos:line="296" pos:column="10">::</op:operator>~<name pos:line="296" pos:column="13">LineState</name></name><parameter_list pos:line="296" pos:column="22">()</parameter_list> <block pos:line="296" pos:column="25">{
}</block></destructor>

<function><type><name pos:line="299" pos:column="1">void</name></type> <name><name pos:line="299" pos:column="6">LineState</name><op:operator pos:line="299" pos:column="15">::</op:operator><name pos:line="299" pos:column="17">Init</name></name><parameter_list pos:line="299" pos:column="21">()</parameter_list> <block pos:line="299" pos:column="24">{
	<expr_stmt><expr><call><name><name pos:line="300" pos:column="9">lineStates</name><op:operator pos:line="300" pos:column="19">.</op:operator><name pos:line="300" pos:column="20">DeleteAll</name></name><argument_list pos:line="300" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="303" pos:column="1">void</name></type> <name><name pos:line="303" pos:column="6">LineState</name><op:operator pos:line="303" pos:column="15">::</op:operator><name pos:line="303" pos:column="17">InsertLine</name></name><parameter_list pos:line="303" pos:column="27">(<param><decl><type><name pos:line="303" pos:column="28">int</name></type> <name pos:line="303" pos:column="32">line</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="38">{
	<if pos:line="304" pos:column="9">if <condition pos:line="304" pos:column="12">(<expr><call><name><name pos:line="304" pos:column="13">lineStates</name><op:operator pos:line="304" pos:column="23">.</op:operator><name pos:line="304" pos:column="24">Length</name></name><argument_list pos:line="304" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="304" pos:column="33"> <block pos:line="304" pos:column="34">{
		<expr_stmt><expr><call><name><name pos:line="305" pos:column="17">lineStates</name><op:operator pos:line="305" pos:column="27">.</op:operator><name pos:line="305" pos:column="28">EnsureLength</name></name><argument_list pos:line="305" pos:column="40">(<argument><expr><name pos:line="305" pos:column="41">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="306" pos:column="17">int</name></type> <name pos:line="306" pos:column="21">val</name> <init pos:line="306" pos:column="25">= <expr><op:operator pos:line="306" pos:column="27">(</op:operator><name pos:line="306" pos:column="28">line</name> <op:operator pos:line="306" pos:column="33">&lt;</op:operator> <call><name><name pos:line="306" pos:column="35">lineStates</name><op:operator pos:line="306" pos:column="45">.</op:operator><name pos:line="306" pos:column="46">Length</name></name><argument_list pos:line="306" pos:column="52">()</argument_list></call><op:operator pos:line="306" pos:column="54">)</op:operator> <op:operator pos:line="306" pos:column="56">?</op:operator> <name><name pos:line="306" pos:column="58">lineStates</name><index pos:line="306" pos:column="68">[<expr><name pos:line="306" pos:column="69">line</name></expr>]</index></name> <op:operator pos:line="306" pos:column="75">:</op:operator> <lit:literal type="number" pos:line="306" pos:column="77">0</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="307" pos:column="17">lineStates</name><op:operator pos:line="307" pos:column="27">.</op:operator><name pos:line="307" pos:column="28">Insert</name></name><argument_list pos:line="307" pos:column="34">(<argument><expr><name pos:line="307" pos:column="35">line</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="311" pos:column="1">void</name></type> <name><name pos:line="311" pos:column="6">LineState</name><op:operator pos:line="311" pos:column="15">::</op:operator><name pos:line="311" pos:column="17">RemoveLine</name></name><parameter_list pos:line="311" pos:column="27">(<param><decl><type><name pos:line="311" pos:column="28">int</name></type> <name pos:line="311" pos:column="32">line</name></decl></param>)</parameter_list> <block pos:line="311" pos:column="38">{
	<if pos:line="312" pos:column="9">if <condition pos:line="312" pos:column="12">(<expr><call><name><name pos:line="312" pos:column="13">lineStates</name><op:operator pos:line="312" pos:column="23">.</op:operator><name pos:line="312" pos:column="24">Length</name></name><argument_list pos:line="312" pos:column="30">()</argument_list></call> <op:operator pos:line="312" pos:column="33">&gt;</op:operator> <name pos:line="312" pos:column="35">line</name></expr>)</condition><then pos:line="312" pos:column="40"> <block pos:line="312" pos:column="41">{
		<expr_stmt><expr><call><name><name pos:line="313" pos:column="17">lineStates</name><op:operator pos:line="313" pos:column="27">.</op:operator><name pos:line="313" pos:column="28">Delete</name></name><argument_list pos:line="313" pos:column="34">(<argument><expr><name pos:line="313" pos:column="35">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="317" pos:column="1">int</name></type> <name><name pos:line="317" pos:column="5">LineState</name><op:operator pos:line="317" pos:column="14">::</op:operator><name pos:line="317" pos:column="16">SetLineState</name></name><parameter_list pos:line="317" pos:column="28">(<param><decl><type><name pos:line="317" pos:column="29">int</name></type> <name pos:line="317" pos:column="33">line</name></decl></param>, <param><decl><type><name pos:line="317" pos:column="39">int</name></type> <name pos:line="317" pos:column="43">state</name></decl></param>)</parameter_list> <block pos:line="317" pos:column="50">{
	<expr_stmt><expr><call><name><name pos:line="318" pos:column="9">lineStates</name><op:operator pos:line="318" pos:column="19">.</op:operator><name pos:line="318" pos:column="20">EnsureLength</name></name><argument_list pos:line="318" pos:column="32">(<argument><expr><name pos:line="318" pos:column="33">line</name> <op:operator pos:line="318" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="318" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="319" pos:column="9">int</name></type> <name pos:line="319" pos:column="13">stateOld</name> <init pos:line="319" pos:column="22">= <expr><name><name pos:line="319" pos:column="24">lineStates</name><index pos:line="319" pos:column="34">[<expr><name pos:line="319" pos:column="35">line</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="320" pos:column="9">lineStates</name><index pos:line="320" pos:column="19">[<expr><name pos:line="320" pos:column="20">line</name></expr>]</index></name> <op:operator pos:line="320" pos:column="26">=</op:operator> <name pos:line="320" pos:column="28">state</name></expr>;</expr_stmt>
	<return pos:line="321" pos:column="9">return <expr><name pos:line="321" pos:column="16">stateOld</name></expr>;</return>
}</block></function>

<function><type><name pos:line="324" pos:column="1">int</name></type> <name><name pos:line="324" pos:column="5">LineState</name><op:operator pos:line="324" pos:column="14">::</op:operator><name pos:line="324" pos:column="16">GetLineState</name></name><parameter_list pos:line="324" pos:column="28">(<param><decl><type><name pos:line="324" pos:column="29">int</name></type> <name pos:line="324" pos:column="33">line</name></decl></param>)</parameter_list> <block pos:line="324" pos:column="39">{
	<if pos:line="325" pos:column="9">if <condition pos:line="325" pos:column="12">(<expr><name pos:line="325" pos:column="13">line</name> <op:operator pos:line="325" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="325" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="325" pos:column="22">
		<return pos:line="326" pos:column="17">return <expr><lit:literal type="number" pos:line="326" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><call><name><name pos:line="327" pos:column="9">lineStates</name><op:operator pos:line="327" pos:column="19">.</op:operator><name pos:line="327" pos:column="20">EnsureLength</name></name><argument_list pos:line="327" pos:column="32">(<argument><expr><name pos:line="327" pos:column="33">line</name> <op:operator pos:line="327" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="327" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="328" pos:column="9">return <expr><name><name pos:line="328" pos:column="16">lineStates</name><index pos:line="328" pos:column="26">[<expr><name pos:line="328" pos:column="27">line</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name pos:line="331" pos:column="1">int</name></type> <name><name pos:line="331" pos:column="5">LineState</name><op:operator pos:line="331" pos:column="14">::</op:operator><name pos:line="331" pos:column="16">GetMaxLineState</name></name><parameter_list pos:line="331" pos:column="31">()</parameter_list> <block pos:line="331" pos:column="34">{
	<return pos:line="332" pos:column="9">return <expr><call><name><name pos:line="332" pos:column="16">lineStates</name><op:operator pos:line="332" pos:column="26">.</op:operator><name pos:line="332" pos:column="27">Length</name></name><argument_list pos:line="332" pos:column="33">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="335" pos:column="1">static</specifier> <name pos:line="335" pos:column="8">int</name></type> <name pos:line="335" pos:column="12">NumberLines</name><parameter_list pos:line="335" pos:column="23">(<param><decl><type><specifier pos:line="335" pos:column="24">const</specifier> <name pos:line="335" pos:column="30">char</name> <type:modifier pos:line="335" pos:column="35">*</type:modifier></type><name pos:line="335" pos:column="36">text</name></decl></param>)</parameter_list> <block pos:line="335" pos:column="42">{
	<if pos:line="336" pos:column="9">if <condition pos:line="336" pos:column="12">(<expr><name pos:line="336" pos:column="13">text</name></expr>)</condition><then pos:line="336" pos:column="18"> <block pos:line="336" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="337" pos:column="17">int</name></type> <name pos:line="337" pos:column="21">newLines</name> <init pos:line="337" pos:column="30">= <expr><lit:literal type="number" pos:line="337" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="338" pos:column="17">while <condition pos:line="338" pos:column="23">(<expr><op:operator pos:line="338" pos:column="24">*</op:operator><name pos:line="338" pos:column="25">text</name></expr>)</condition> <block pos:line="338" pos:column="31">{
			<if pos:line="339" pos:column="25">if <condition pos:line="339" pos:column="28">(<expr><op:operator pos:line="339" pos:column="29">*</op:operator><name pos:line="339" pos:column="30">text</name> <op:operator pos:line="339" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="339" pos:column="38">'\n'</lit:literal></expr>)</condition><then pos:line="339" pos:column="43">
				<expr_stmt><expr><name pos:line="340" pos:column="33">newLines</name><op:operator pos:line="340" pos:column="41">++</op:operator></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="341" pos:column="25">text</name><op:operator pos:line="341" pos:column="29">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		<return pos:line="343" pos:column="17">return <expr><name pos:line="343" pos:column="24">newLines</name><op:operator pos:line="343" pos:column="32">+</op:operator><lit:literal type="number" pos:line="343" pos:column="33">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="344" pos:column="11">else <block pos:line="344" pos:column="16">{
		<return pos:line="345" pos:column="17">return <expr><lit:literal type="number" pos:line="345" pos:column="24">0</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="349" pos:column="1">// Each allocated LineAnnotation is a char array which starts with an AnnotationHeader</comment>
<comment type="line" pos:line="350" pos:column="1">// and then has text and optional styles.</comment>

<decl_stmt><decl><type><specifier pos:line="352" pos:column="1">static</specifier> <specifier pos:line="352" pos:column="8">const</specifier> <name pos:line="352" pos:column="14">int</name></type> <name pos:line="352" pos:column="18">IndividualStyles</name> <init pos:line="352" pos:column="35">= <expr><lit:literal type="number" pos:line="352" pos:column="37">0x100</lit:literal></expr></init></decl>;</decl_stmt>

<struct pos:line="354" pos:column="1">struct <name pos:line="354" pos:column="8">AnnotationHeader</name> <block pos:line="354" pos:column="25">{<public type="default" pos:line="354" pos:column="26">
	<decl_stmt><decl><type><name pos:line="355" pos:column="9">short</name></type> <name pos:line="355" pos:column="15">style</name></decl>;</decl_stmt>	<comment type="line" pos:line="355" pos:column="25">// Style IndividualStyles implies array of styles</comment>
	<decl_stmt><decl><type><name pos:line="356" pos:column="9">short</name></type> <name pos:line="356" pos:column="15">lines</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="357" pos:column="9">int</name></type> <name pos:line="357" pos:column="13">length</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<destructor><name><name pos:line="360" pos:column="1">LineAnnotation</name><op:operator pos:line="360" pos:column="15">::</op:operator>~<name pos:line="360" pos:column="18">LineAnnotation</name></name><parameter_list pos:line="360" pos:column="32">()</parameter_list> <block pos:line="360" pos:column="35">{
	<expr_stmt><expr><call><name pos:line="361" pos:column="9">ClearAll</name><argument_list pos:line="361" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="364" pos:column="1">void</name></type> <name><name pos:line="364" pos:column="6">LineAnnotation</name><op:operator pos:line="364" pos:column="20">::</op:operator><name pos:line="364" pos:column="22">Init</name></name><parameter_list pos:line="364" pos:column="26">()</parameter_list> <block pos:line="364" pos:column="29">{
	<expr_stmt><expr><call><name pos:line="365" pos:column="9">ClearAll</name><argument_list pos:line="365" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="368" pos:column="1">void</name></type> <name><name pos:line="368" pos:column="6">LineAnnotation</name><op:operator pos:line="368" pos:column="20">::</op:operator><name pos:line="368" pos:column="22">InsertLine</name></name><parameter_list pos:line="368" pos:column="32">(<param><decl><type><name pos:line="368" pos:column="33">int</name></type> <name pos:line="368" pos:column="37">line</name></decl></param>)</parameter_list> <block pos:line="368" pos:column="43">{
	<if pos:line="369" pos:column="9">if <condition pos:line="369" pos:column="12">(<expr><call><name><name pos:line="369" pos:column="13">annotations</name><op:operator pos:line="369" pos:column="24">.</op:operator><name pos:line="369" pos:column="25">Length</name></name><argument_list pos:line="369" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="369" pos:column="34"> <block pos:line="369" pos:column="35">{
		<expr_stmt><expr><call><name><name pos:line="370" pos:column="17">annotations</name><op:operator pos:line="370" pos:column="28">.</op:operator><name pos:line="370" pos:column="29">EnsureLength</name></name><argument_list pos:line="370" pos:column="41">(<argument><expr><name pos:line="370" pos:column="42">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="371" pos:column="17">annotations</name><op:operator pos:line="371" pos:column="28">.</op:operator><name pos:line="371" pos:column="29">Insert</name></name><argument_list pos:line="371" pos:column="35">(<argument><expr><name pos:line="371" pos:column="36">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="371" pos:column="42">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="375" pos:column="1">void</name></type> <name><name pos:line="375" pos:column="6">LineAnnotation</name><op:operator pos:line="375" pos:column="20">::</op:operator><name pos:line="375" pos:column="22">RemoveLine</name></name><parameter_list pos:line="375" pos:column="32">(<param><decl><type><name pos:line="375" pos:column="33">int</name></type> <name pos:line="375" pos:column="37">line</name></decl></param>)</parameter_list> <block pos:line="375" pos:column="43">{
	<if pos:line="376" pos:column="9">if <condition pos:line="376" pos:column="12">(<expr><call><name><name pos:line="376" pos:column="13">annotations</name><op:operator pos:line="376" pos:column="24">.</op:operator><name pos:line="376" pos:column="25">Length</name></name><argument_list pos:line="376" pos:column="31">()</argument_list></call> <op:operator pos:line="376" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="376" pos:column="37">(</op:operator><name pos:line="376" pos:column="38">line</name> <op:operator pos:line="376" pos:column="43">&lt;</op:operator> <call><name><name pos:line="376" pos:column="45">annotations</name><op:operator pos:line="376" pos:column="56">.</op:operator><name pos:line="376" pos:column="57">Length</name></name><argument_list pos:line="376" pos:column="63">()</argument_list></call><op:operator pos:line="376" pos:column="65">)</op:operator></expr>)</condition><then pos:line="376" pos:column="67"> <block pos:line="376" pos:column="68">{
		<expr_stmt><expr><op:operator pos:line="377" pos:column="17">delete</op:operator> <index pos:line="377" pos:column="24">[]</index><name><name pos:line="377" pos:column="26">annotations</name><index pos:line="377" pos:column="37">[<expr><name pos:line="377" pos:column="38">line</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="378" pos:column="17">annotations</name><op:operator pos:line="378" pos:column="28">.</op:operator><name pos:line="378" pos:column="29">Delete</name></name><argument_list pos:line="378" pos:column="35">(<argument><expr><name pos:line="378" pos:column="36">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="382" pos:column="1">bool</name></type> <name><name pos:line="382" pos:column="6">LineAnnotation</name><op:operator pos:line="382" pos:column="20">::</op:operator><name pos:line="382" pos:column="22">AnySet</name></name><parameter_list pos:line="382" pos:column="28">()</parameter_list> <specifier pos:line="382" pos:column="31">const</specifier> <block pos:line="382" pos:column="37">{
	<return pos:line="383" pos:column="9">return <expr><call><name><name pos:line="383" pos:column="16">annotations</name><op:operator pos:line="383" pos:column="27">.</op:operator><name pos:line="383" pos:column="28">Length</name></name><argument_list pos:line="383" pos:column="34">()</argument_list></call> <op:operator pos:line="383" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="383" pos:column="39">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="386" pos:column="1">bool</name></type> <name><name pos:line="386" pos:column="6">LineAnnotation</name><op:operator pos:line="386" pos:column="20">::</op:operator><name pos:line="386" pos:column="22">MultipleStyles</name></name><parameter_list pos:line="386" pos:column="36">(<param><decl><type><name pos:line="386" pos:column="37">int</name></type> <name pos:line="386" pos:column="41">line</name></decl></param>)</parameter_list> <specifier pos:line="386" pos:column="47">const</specifier> <block pos:line="386" pos:column="53">{
	<if pos:line="387" pos:column="9">if <condition pos:line="387" pos:column="12">(<expr><call><name><name pos:line="387" pos:column="13">annotations</name><op:operator pos:line="387" pos:column="24">.</op:operator><name pos:line="387" pos:column="25">Length</name></name><argument_list pos:line="387" pos:column="31">()</argument_list></call> <op:operator pos:line="387" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="387" pos:column="37">(</op:operator><name pos:line="387" pos:column="38">line</name> <op:operator pos:line="387" pos:column="43">&lt;</op:operator> <call><name><name pos:line="387" pos:column="45">annotations</name><op:operator pos:line="387" pos:column="56">.</op:operator><name pos:line="387" pos:column="57">Length</name></name><argument_list pos:line="387" pos:column="63">()</argument_list></call><op:operator pos:line="387" pos:column="65">)</op:operator> <op:operator pos:line="387" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="387" pos:column="70">annotations</name><index pos:line="387" pos:column="81">[<expr><name pos:line="387" pos:column="82">line</name></expr>]</index></name></expr>)</condition><then pos:line="387" pos:column="88">
		<return pos:line="388" pos:column="17">return <expr><call><name><name pos:line="388" pos:column="24">reinterpret_cast</name><argument_list pos:line="388" pos:column="40">&lt;<argument><expr><name pos:line="388" pos:column="41">AnnotationHeader</name> <op:operator pos:line="388" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="388" pos:column="60">(<argument><expr><name><name pos:line="388" pos:column="61">annotations</name><index pos:line="388" pos:column="72">[<expr><name pos:line="388" pos:column="73">line</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="388" pos:column="79">-&gt;</op:operator><name pos:line="388" pos:column="81">style</name> <op:operator pos:line="388" pos:column="87">==</op:operator> <name pos:line="388" pos:column="90">IndividualStyles</name></expr>;</return></then>
	<else pos:line="389" pos:column="9">else
		<return pos:line="390" pos:column="17">return <expr><lit:literal type="number" pos:line="390" pos:column="24">0</lit:literal></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="393" pos:column="1">int</name></type> <name><name pos:line="393" pos:column="5">LineAnnotation</name><op:operator pos:line="393" pos:column="19">::</op:operator><name pos:line="393" pos:column="21">Style</name></name><parameter_list pos:line="393" pos:column="26">(<param><decl><type><name pos:line="393" pos:column="27">int</name></type> <name pos:line="393" pos:column="31">line</name></decl></param>)</parameter_list> <block pos:line="393" pos:column="37">{
	<if pos:line="394" pos:column="9">if <condition pos:line="394" pos:column="12">(<expr><call><name><name pos:line="394" pos:column="13">annotations</name><op:operator pos:line="394" pos:column="24">.</op:operator><name pos:line="394" pos:column="25">Length</name></name><argument_list pos:line="394" pos:column="31">()</argument_list></call> <op:operator pos:line="394" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="394" pos:column="37">(</op:operator><name pos:line="394" pos:column="38">line</name> <op:operator pos:line="394" pos:column="43">&lt;</op:operator> <call><name><name pos:line="394" pos:column="45">annotations</name><op:operator pos:line="394" pos:column="56">.</op:operator><name pos:line="394" pos:column="57">Length</name></name><argument_list pos:line="394" pos:column="63">()</argument_list></call><op:operator pos:line="394" pos:column="65">)</op:operator> <op:operator pos:line="394" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="394" pos:column="70">annotations</name><index pos:line="394" pos:column="81">[<expr><name pos:line="394" pos:column="82">line</name></expr>]</index></name></expr>)</condition><then pos:line="394" pos:column="88">
		<return pos:line="395" pos:column="17">return <expr><call><name><name pos:line="395" pos:column="24">reinterpret_cast</name><argument_list pos:line="395" pos:column="40">&lt;<argument><expr><name pos:line="395" pos:column="41">AnnotationHeader</name> <op:operator pos:line="395" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="395" pos:column="60">(<argument><expr><name><name pos:line="395" pos:column="61">annotations</name><index pos:line="395" pos:column="72">[<expr><name pos:line="395" pos:column="73">line</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="395" pos:column="79">-&gt;</op:operator><name pos:line="395" pos:column="81">style</name></expr>;</return></then>
	<else pos:line="396" pos:column="9">else
		<return pos:line="397" pos:column="17">return <expr><lit:literal type="number" pos:line="397" pos:column="24">0</lit:literal></expr>;</return></else></if>
}</block></function>

<function><type><specifier pos:line="400" pos:column="1">const</specifier> <name pos:line="400" pos:column="7">char</name> <type:modifier pos:line="400" pos:column="12">*</type:modifier></type><name><name pos:line="400" pos:column="13">LineAnnotation</name><op:operator pos:line="400" pos:column="27">::</op:operator><name pos:line="400" pos:column="29">Text</name></name><parameter_list pos:line="400" pos:column="33">(<param><decl><type><name pos:line="400" pos:column="34">int</name></type> <name pos:line="400" pos:column="38">line</name></decl></param>)</parameter_list> <specifier pos:line="400" pos:column="44">const</specifier> <block pos:line="400" pos:column="50">{
	<if pos:line="401" pos:column="9">if <condition pos:line="401" pos:column="12">(<expr><call><name><name pos:line="401" pos:column="13">annotations</name><op:operator pos:line="401" pos:column="24">.</op:operator><name pos:line="401" pos:column="25">Length</name></name><argument_list pos:line="401" pos:column="31">()</argument_list></call> <op:operator pos:line="401" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="401" pos:column="37">(</op:operator><name pos:line="401" pos:column="38">line</name> <op:operator pos:line="401" pos:column="43">&lt;</op:operator> <call><name><name pos:line="401" pos:column="45">annotations</name><op:operator pos:line="401" pos:column="56">.</op:operator><name pos:line="401" pos:column="57">Length</name></name><argument_list pos:line="401" pos:column="63">()</argument_list></call><op:operator pos:line="401" pos:column="65">)</op:operator> <op:operator pos:line="401" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="401" pos:column="70">annotations</name><index pos:line="401" pos:column="81">[<expr><name pos:line="401" pos:column="82">line</name></expr>]</index></name></expr>)</condition><then pos:line="401" pos:column="88">
		<return pos:line="402" pos:column="17">return <expr><name><name pos:line="402" pos:column="24">annotations</name><index pos:line="402" pos:column="35">[<expr><name pos:line="402" pos:column="36">line</name></expr>]</index></name><op:operator pos:line="402" pos:column="41">+</op:operator><sizeof pos:line="402" pos:column="42">sizeof<argument_list pos:line="402" pos:column="48">(<argument><expr><name pos:line="402" pos:column="49">AnnotationHeader</name></expr></argument>)</argument_list></sizeof></expr>;</return></then>
	<else pos:line="403" pos:column="9">else
		<return pos:line="404" pos:column="17">return <expr><lit:literal type="number" pos:line="404" pos:column="24">0</lit:literal></expr>;</return></else></if>
}</block></function>

<function><type><specifier pos:line="407" pos:column="1">const</specifier> <name pos:line="407" pos:column="7">unsigned</name> <name pos:line="407" pos:column="16">char</name> <type:modifier pos:line="407" pos:column="21">*</type:modifier></type><name><name pos:line="407" pos:column="22">LineAnnotation</name><op:operator pos:line="407" pos:column="36">::</op:operator><name pos:line="407" pos:column="38">Styles</name></name><parameter_list pos:line="407" pos:column="44">(<param><decl><type><name pos:line="407" pos:column="45">int</name></type> <name pos:line="407" pos:column="49">line</name></decl></param>)</parameter_list> <specifier pos:line="407" pos:column="55">const</specifier> <block pos:line="407" pos:column="61">{
	<if pos:line="408" pos:column="9">if <condition pos:line="408" pos:column="12">(<expr><call><name><name pos:line="408" pos:column="13">annotations</name><op:operator pos:line="408" pos:column="24">.</op:operator><name pos:line="408" pos:column="25">Length</name></name><argument_list pos:line="408" pos:column="31">()</argument_list></call> <op:operator pos:line="408" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="408" pos:column="37">(</op:operator><name pos:line="408" pos:column="38">line</name> <op:operator pos:line="408" pos:column="43">&lt;</op:operator> <call><name><name pos:line="408" pos:column="45">annotations</name><op:operator pos:line="408" pos:column="56">.</op:operator><name pos:line="408" pos:column="57">Length</name></name><argument_list pos:line="408" pos:column="63">()</argument_list></call><op:operator pos:line="408" pos:column="65">)</op:operator> <op:operator pos:line="408" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="408" pos:column="70">annotations</name><index pos:line="408" pos:column="81">[<expr><name pos:line="408" pos:column="82">line</name></expr>]</index></name> <op:operator pos:line="408" pos:column="88">&amp;&amp;</op:operator> <call><name pos:line="408" pos:column="91">MultipleStyles</name><argument_list pos:line="408" pos:column="105">(<argument><expr><name pos:line="408" pos:column="106">line</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="408" pos:column="112">
		<return pos:line="409" pos:column="17">return <expr><call><name><name pos:line="409" pos:column="24">reinterpret_cast</name><argument_list pos:line="409" pos:column="40">&lt;<argument><expr><name pos:line="409" pos:column="41">unsigned</name> <name pos:line="409" pos:column="50">char</name> <op:operator pos:line="409" pos:column="55">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="409" pos:column="57">(<argument><expr><name><name pos:line="409" pos:column="58">annotations</name><index pos:line="409" pos:column="69">[<expr><name pos:line="409" pos:column="70">line</name></expr>]</index></name> <op:operator pos:line="409" pos:column="76">+</op:operator> <sizeof pos:line="409" pos:column="78">sizeof<argument_list pos:line="409" pos:column="84">(<argument><expr><name pos:line="409" pos:column="85">AnnotationHeader</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="409" pos:column="103">+</op:operator> <call><name pos:line="409" pos:column="105">Length</name><argument_list pos:line="409" pos:column="111">(<argument><expr><name pos:line="409" pos:column="112">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
	<else pos:line="410" pos:column="9">else
		<return pos:line="411" pos:column="17">return <expr><lit:literal type="number" pos:line="411" pos:column="24">0</lit:literal></expr>;</return></else></if>
}</block></function>

<function><type><specifier pos:line="414" pos:column="1">static</specifier> <name pos:line="414" pos:column="8">char</name> <type:modifier pos:line="414" pos:column="13">*</type:modifier></type><name pos:line="414" pos:column="14">AllocateAnnotation</name><parameter_list pos:line="414" pos:column="32">(<param><decl><type><name pos:line="414" pos:column="33">int</name></type> <name pos:line="414" pos:column="37">length</name></decl></param>, <param><decl><type><name pos:line="414" pos:column="45">int</name></type> <name pos:line="414" pos:column="49">style</name></decl></param>)</parameter_list> <block pos:line="414" pos:column="56">{
	<decl_stmt><decl><type><name pos:line="415" pos:column="9">size_t</name></type> <name pos:line="415" pos:column="16">len</name> <init pos:line="415" pos:column="20">= <expr><sizeof pos:line="415" pos:column="22">sizeof<argument_list pos:line="415" pos:column="28">(<argument><expr><name pos:line="415" pos:column="29">AnnotationHeader</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="415" pos:column="47">+</op:operator> <name pos:line="415" pos:column="49">length</name> <op:operator pos:line="415" pos:column="56">+</op:operator> <op:operator pos:line="415" pos:column="58">(</op:operator><op:operator pos:line="415" pos:column="59">(</op:operator><name pos:line="415" pos:column="60">style</name> <op:operator pos:line="415" pos:column="66">==</op:operator> <name pos:line="415" pos:column="69">IndividualStyles</name><op:operator pos:line="415" pos:column="85">)</op:operator> <op:operator pos:line="415" pos:column="87">?</op:operator> <name pos:line="415" pos:column="89">length</name> <op:operator pos:line="415" pos:column="96">:</op:operator> <lit:literal type="number" pos:line="415" pos:column="98">0</lit:literal><op:operator pos:line="415" pos:column="99">)</op:operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="416" pos:column="9">char</name> <type:modifier pos:line="416" pos:column="14">*</type:modifier></type><name pos:line="416" pos:column="15">ret</name> <init pos:line="416" pos:column="19">= <expr><op:operator pos:line="416" pos:column="21">new</op:operator> <name><name pos:line="416" pos:column="25">char</name><index pos:line="416" pos:column="29">[<expr><name pos:line="416" pos:column="30">len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="417" pos:column="9">memset</name><argument_list pos:line="417" pos:column="15">(<argument><expr><name pos:line="417" pos:column="16">ret</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="417" pos:column="21">0</lit:literal></expr></argument>, <argument><expr><name pos:line="417" pos:column="24">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="418" pos:column="9">return <expr><name pos:line="418" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="421" pos:column="1">void</name></type> <name><name pos:line="421" pos:column="6">LineAnnotation</name><op:operator pos:line="421" pos:column="20">::</op:operator><name pos:line="421" pos:column="22">SetText</name></name><parameter_list pos:line="421" pos:column="29">(<param><decl><type><name pos:line="421" pos:column="30">int</name></type> <name pos:line="421" pos:column="34">line</name></decl></param>, <param><decl><type><specifier pos:line="421" pos:column="40">const</specifier> <name pos:line="421" pos:column="46">char</name> <type:modifier pos:line="421" pos:column="51">*</type:modifier></type><name pos:line="421" pos:column="52">text</name></decl></param>)</parameter_list> <block pos:line="421" pos:column="58">{
	<if pos:line="422" pos:column="9">if <condition pos:line="422" pos:column="12">(<expr><name pos:line="422" pos:column="13">text</name></expr>)</condition><then pos:line="422" pos:column="18"> <block pos:line="422" pos:column="19">{
		<expr_stmt><expr><call><name><name pos:line="423" pos:column="17">annotations</name><op:operator pos:line="423" pos:column="28">.</op:operator><name pos:line="423" pos:column="29">EnsureLength</name></name><argument_list pos:line="423" pos:column="41">(<argument><expr><name pos:line="423" pos:column="42">line</name><op:operator pos:line="423" pos:column="46">+</op:operator><lit:literal type="number" pos:line="423" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="424" pos:column="17">int</name></type> <name pos:line="424" pos:column="21">style</name> <init pos:line="424" pos:column="27">= <expr><call><name pos:line="424" pos:column="29">Style</name><argument_list pos:line="424" pos:column="34">(<argument><expr><name pos:line="424" pos:column="35">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="425" pos:column="17">if <condition pos:line="425" pos:column="20">(<expr><name><name pos:line="425" pos:column="21">annotations</name><index pos:line="425" pos:column="32">[<expr><name pos:line="425" pos:column="33">line</name></expr>]</index></name></expr>)</condition><then pos:line="425" pos:column="39"> <block pos:line="425" pos:column="40">{
			<expr_stmt><expr><op:operator pos:line="426" pos:column="25">delete</op:operator> <index pos:line="426" pos:column="32">[]</index><name><name pos:line="426" pos:column="34">annotations</name><index pos:line="426" pos:column="45">[<expr><name pos:line="426" pos:column="46">line</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name pos:line="428" pos:column="17">annotations</name><index pos:line="428" pos:column="28">[<expr><name pos:line="428" pos:column="29">line</name></expr>]</index></name> <op:operator pos:line="428" pos:column="35">=</op:operator> <call><name pos:line="428" pos:column="37">AllocateAnnotation</name><argument_list pos:line="428" pos:column="55">(<argument><expr><call><name pos:line="428" pos:column="56">strlen</name><argument_list pos:line="428" pos:column="62">(<argument><expr><name pos:line="428" pos:column="63">text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="428" pos:column="70">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="429" pos:column="17">AnnotationHeader</name> <type:modifier pos:line="429" pos:column="34">*</type:modifier></type><name pos:line="429" pos:column="35">pah</name> <init pos:line="429" pos:column="39">= <expr><call><name><name pos:line="429" pos:column="41">reinterpret_cast</name><argument_list pos:line="429" pos:column="57">&lt;<argument><expr><name pos:line="429" pos:column="58">AnnotationHeader</name> <op:operator pos:line="429" pos:column="75">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="429" pos:column="77">(<argument><expr><name><name pos:line="429" pos:column="78">annotations</name><index pos:line="429" pos:column="89">[<expr><name pos:line="429" pos:column="90">line</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="430" pos:column="17">pah</name><op:operator pos:line="430" pos:column="20">-&gt;</op:operator><name pos:line="430" pos:column="22">style</name></name> <op:operator pos:line="430" pos:column="28">=</op:operator> <call><name><name pos:line="430" pos:column="30">static_cast</name><argument_list pos:line="430" pos:column="41">&lt;<argument><expr><name pos:line="430" pos:column="42">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="430" pos:column="48">(<argument><expr><name pos:line="430" pos:column="49">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="431" pos:column="17">pah</name><op:operator pos:line="431" pos:column="20">-&gt;</op:operator><name pos:line="431" pos:column="22">length</name></name> <op:operator pos:line="431" pos:column="29">=</op:operator> <call><name pos:line="431" pos:column="31">strlen</name><argument_list pos:line="431" pos:column="37">(<argument><expr><name pos:line="431" pos:column="38">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="432" pos:column="17">pah</name><op:operator pos:line="432" pos:column="20">-&gt;</op:operator><name pos:line="432" pos:column="22">lines</name></name> <op:operator pos:line="432" pos:column="28">=</op:operator> <call><name><name pos:line="432" pos:column="30">static_cast</name><argument_list pos:line="432" pos:column="41">&lt;<argument><expr><name pos:line="432" pos:column="42">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="432" pos:column="48">(<argument><expr><call><name pos:line="432" pos:column="49">NumberLines</name><argument_list pos:line="432" pos:column="60">(<argument><expr><name pos:line="432" pos:column="61">text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="433" pos:column="17">memcpy</name><argument_list pos:line="433" pos:column="23">(<argument><expr><name><name pos:line="433" pos:column="24">annotations</name><index pos:line="433" pos:column="35">[<expr><name pos:line="433" pos:column="36">line</name></expr>]</index></name><op:operator pos:line="433" pos:column="41">+</op:operator><sizeof pos:line="433" pos:column="42">sizeof<argument_list pos:line="433" pos:column="48">(<argument><expr><name pos:line="433" pos:column="49">AnnotationHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="433" pos:column="68">text</name></expr></argument>, <argument><expr><name><name pos:line="433" pos:column="74">pah</name><op:operator pos:line="433" pos:column="77">-&gt;</op:operator><name pos:line="433" pos:column="79">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="434" pos:column="11">else <block pos:line="434" pos:column="16">{
		<if pos:line="435" pos:column="17">if <condition pos:line="435" pos:column="20">(<expr><call><name><name pos:line="435" pos:column="21">annotations</name><op:operator pos:line="435" pos:column="32">.</op:operator><name pos:line="435" pos:column="33">Length</name></name><argument_list pos:line="435" pos:column="39">()</argument_list></call> <op:operator pos:line="435" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="435" pos:column="45">(</op:operator><name pos:line="435" pos:column="46">line</name> <op:operator pos:line="435" pos:column="51">&lt;</op:operator> <call><name><name pos:line="435" pos:column="53">annotations</name><op:operator pos:line="435" pos:column="64">.</op:operator><name pos:line="435" pos:column="65">Length</name></name><argument_list pos:line="435" pos:column="71">()</argument_list></call><op:operator pos:line="435" pos:column="73">)</op:operator> <op:operator pos:line="435" pos:column="75">&amp;&amp;</op:operator> <name><name pos:line="435" pos:column="78">annotations</name><index pos:line="435" pos:column="89">[<expr><name pos:line="435" pos:column="90">line</name></expr>]</index></name></expr>)</condition><then pos:line="435" pos:column="96"> <block pos:line="435" pos:column="97">{
			<expr_stmt><expr><op:operator pos:line="436" pos:column="25">delete</op:operator> <index pos:line="436" pos:column="32">[]</index><name><name pos:line="436" pos:column="34">annotations</name><index pos:line="436" pos:column="45">[<expr><name pos:line="436" pos:column="46">line</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="437" pos:column="25">annotations</name><index pos:line="437" pos:column="36">[<expr><name pos:line="437" pos:column="37">line</name></expr>]</index></name> <op:operator pos:line="437" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="437" pos:column="45">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="442" pos:column="1">void</name></type> <name><name pos:line="442" pos:column="6">LineAnnotation</name><op:operator pos:line="442" pos:column="20">::</op:operator><name pos:line="442" pos:column="22">ClearAll</name></name><parameter_list pos:line="442" pos:column="30">()</parameter_list> <block pos:line="442" pos:column="33">{
	<for pos:line="443" pos:column="9">for (<init><decl><type><name pos:line="443" pos:column="14">int</name></type> <name pos:line="443" pos:column="18">line</name> <init pos:line="443" pos:column="23">= <expr><lit:literal type="number" pos:line="443" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="443" pos:column="28">line</name> <op:operator pos:line="443" pos:column="33">&lt;</op:operator> <call><name><name pos:line="443" pos:column="35">annotations</name><op:operator pos:line="443" pos:column="46">.</op:operator><name pos:line="443" pos:column="47">Length</name></name><argument_list pos:line="443" pos:column="53">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="443" pos:column="57">line</name><op:operator pos:line="443" pos:column="61">++</op:operator></expr></incr>) <block pos:line="443" pos:column="65">{
		<expr_stmt><expr><op:operator pos:line="444" pos:column="17">delete</op:operator> <index pos:line="444" pos:column="24">[]</index><name><name pos:line="444" pos:column="26">annotations</name><index pos:line="444" pos:column="37">[<expr><name pos:line="444" pos:column="38">line</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="445" pos:column="17">annotations</name><index pos:line="445" pos:column="28">[<expr><name pos:line="445" pos:column="29">line</name></expr>]</index></name> <op:operator pos:line="445" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="445" pos:column="37">0</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="447" pos:column="9">annotations</name><op:operator pos:line="447" pos:column="20">.</op:operator><name pos:line="447" pos:column="21">DeleteAll</name></name><argument_list pos:line="447" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="450" pos:column="1">void</name></type> <name><name pos:line="450" pos:column="6">LineAnnotation</name><op:operator pos:line="450" pos:column="20">::</op:operator><name pos:line="450" pos:column="22">SetStyle</name></name><parameter_list pos:line="450" pos:column="30">(<param><decl><type><name pos:line="450" pos:column="31">int</name></type> <name pos:line="450" pos:column="35">line</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="41">int</name></type> <name pos:line="450" pos:column="45">style</name></decl></param>)</parameter_list> <block pos:line="450" pos:column="52">{
	<expr_stmt><expr><call><name><name pos:line="451" pos:column="9">annotations</name><op:operator pos:line="451" pos:column="20">.</op:operator><name pos:line="451" pos:column="21">EnsureLength</name></name><argument_list pos:line="451" pos:column="33">(<argument><expr><name pos:line="451" pos:column="34">line</name><op:operator pos:line="451" pos:column="38">+</op:operator><lit:literal type="number" pos:line="451" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="452" pos:column="9">if <condition pos:line="452" pos:column="12">(<expr><op:operator pos:line="452" pos:column="13">!</op:operator><name><name pos:line="452" pos:column="14">annotations</name><index pos:line="452" pos:column="25">[<expr><name pos:line="452" pos:column="26">line</name></expr>]</index></name></expr>)</condition><then pos:line="452" pos:column="32"> <block pos:line="452" pos:column="33">{
		<expr_stmt><expr><name><name pos:line="453" pos:column="17">annotations</name><index pos:line="453" pos:column="28">[<expr><name pos:line="453" pos:column="29">line</name></expr>]</index></name> <op:operator pos:line="453" pos:column="35">=</op:operator> <call><name pos:line="453" pos:column="37">AllocateAnnotation</name><argument_list pos:line="453" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="453" pos:column="56">0</lit:literal></expr></argument>, <argument><expr><name pos:line="453" pos:column="59">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="455" pos:column="9">reinterpret_cast</name><argument_list pos:line="455" pos:column="25">&lt;<argument><expr><name pos:line="455" pos:column="26">AnnotationHeader</name> <op:operator pos:line="455" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="455" pos:column="45">(<argument><expr><name><name pos:line="455" pos:column="46">annotations</name><index pos:line="455" pos:column="57">[<expr><name pos:line="455" pos:column="58">line</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="455" pos:column="64">-&gt;</op:operator><name pos:line="455" pos:column="66">style</name> <op:operator pos:line="455" pos:column="72">=</op:operator> <call><name><name pos:line="455" pos:column="74">static_cast</name><argument_list pos:line="455" pos:column="85">&lt;<argument><expr><name pos:line="455" pos:column="86">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="455" pos:column="92">(<argument><expr><name pos:line="455" pos:column="93">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="458" pos:column="1">void</name></type> <name><name pos:line="458" pos:column="6">LineAnnotation</name><op:operator pos:line="458" pos:column="20">::</op:operator><name pos:line="458" pos:column="22">SetStyles</name></name><parameter_list pos:line="458" pos:column="31">(<param><decl><type><name pos:line="458" pos:column="32">int</name></type> <name pos:line="458" pos:column="36">line</name></decl></param>, <param><decl><type><specifier pos:line="458" pos:column="42">const</specifier> <name pos:line="458" pos:column="48">unsigned</name> <name pos:line="458" pos:column="57">char</name> <type:modifier pos:line="458" pos:column="62">*</type:modifier></type><name pos:line="458" pos:column="63">styles</name></decl></param>)</parameter_list> <block pos:line="458" pos:column="71">{
	<expr_stmt><expr><call><name><name pos:line="459" pos:column="9">annotations</name><op:operator pos:line="459" pos:column="20">.</op:operator><name pos:line="459" pos:column="21">EnsureLength</name></name><argument_list pos:line="459" pos:column="33">(<argument><expr><name pos:line="459" pos:column="34">line</name><op:operator pos:line="459" pos:column="38">+</op:operator><lit:literal type="number" pos:line="459" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="460" pos:column="9">if <condition pos:line="460" pos:column="12">(<expr><op:operator pos:line="460" pos:column="13">!</op:operator><name><name pos:line="460" pos:column="14">annotations</name><index pos:line="460" pos:column="25">[<expr><name pos:line="460" pos:column="26">line</name></expr>]</index></name></expr>)</condition><then pos:line="460" pos:column="32"> <block pos:line="460" pos:column="33">{
		<expr_stmt><expr><name><name pos:line="461" pos:column="17">annotations</name><index pos:line="461" pos:column="28">[<expr><name pos:line="461" pos:column="29">line</name></expr>]</index></name> <op:operator pos:line="461" pos:column="35">=</op:operator> <call><name pos:line="461" pos:column="37">AllocateAnnotation</name><argument_list pos:line="461" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="461" pos:column="56">0</lit:literal></expr></argument>, <argument><expr><name pos:line="461" pos:column="59">IndividualStyles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="462" pos:column="11">else <block pos:line="462" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="463" pos:column="17">AnnotationHeader</name> <type:modifier pos:line="463" pos:column="34">*</type:modifier></type><name pos:line="463" pos:column="35">pahSource</name> <init pos:line="463" pos:column="45">= <expr><call><name><name pos:line="463" pos:column="47">reinterpret_cast</name><argument_list pos:line="463" pos:column="63">&lt;<argument><expr><name pos:line="463" pos:column="64">AnnotationHeader</name> <op:operator pos:line="463" pos:column="81">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="463" pos:column="83">(<argument><expr><name><name pos:line="463" pos:column="84">annotations</name><index pos:line="463" pos:column="95">[<expr><name pos:line="463" pos:column="96">line</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="464" pos:column="17">if <condition pos:line="464" pos:column="20">(<expr><name><name pos:line="464" pos:column="21">pahSource</name><op:operator pos:line="464" pos:column="30">-&gt;</op:operator><name pos:line="464" pos:column="32">style</name></name> <op:operator pos:line="464" pos:column="38">!=</op:operator> <name pos:line="464" pos:column="41">IndividualStyles</name></expr>)</condition><then pos:line="464" pos:column="58"> <block pos:line="464" pos:column="59">{
			<decl_stmt><decl><type><name pos:line="465" pos:column="25">char</name> <type:modifier pos:line="465" pos:column="30">*</type:modifier></type><name pos:line="465" pos:column="31">allocation</name> <init pos:line="465" pos:column="42">= <expr><call><name pos:line="465" pos:column="44">AllocateAnnotation</name><argument_list pos:line="465" pos:column="62">(<argument><expr><name><name pos:line="465" pos:column="63">pahSource</name><op:operator pos:line="465" pos:column="72">-&gt;</op:operator><name pos:line="465" pos:column="74">length</name></name></expr></argument>, <argument><expr><name pos:line="465" pos:column="82">IndividualStyles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="466" pos:column="25">AnnotationHeader</name> <type:modifier pos:line="466" pos:column="42">*</type:modifier></type><name pos:line="466" pos:column="43">pahAlloc</name> <init pos:line="466" pos:column="52">= <expr><call><name><name pos:line="466" pos:column="54">reinterpret_cast</name><argument_list pos:line="466" pos:column="70">&lt;<argument><expr><name pos:line="466" pos:column="71">AnnotationHeader</name> <op:operator pos:line="466" pos:column="88">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="466" pos:column="90">(<argument><expr><name pos:line="466" pos:column="91">allocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="467" pos:column="25">pahAlloc</name><op:operator pos:line="467" pos:column="33">-&gt;</op:operator><name pos:line="467" pos:column="35">length</name></name> <op:operator pos:line="467" pos:column="42">=</op:operator> <name><name pos:line="467" pos:column="44">pahSource</name><op:operator pos:line="467" pos:column="53">-&gt;</op:operator><name pos:line="467" pos:column="55">length</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="468" pos:column="25">pahAlloc</name><op:operator pos:line="468" pos:column="33">-&gt;</op:operator><name pos:line="468" pos:column="35">lines</name></name> <op:operator pos:line="468" pos:column="41">=</op:operator> <name><name pos:line="468" pos:column="43">pahSource</name><op:operator pos:line="468" pos:column="52">-&gt;</op:operator><name pos:line="468" pos:column="54">lines</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="469" pos:column="25">memcpy</name><argument_list pos:line="469" pos:column="31">(<argument><expr><name pos:line="469" pos:column="32">allocation</name> <op:operator pos:line="469" pos:column="43">+</op:operator> <sizeof pos:line="469" pos:column="45">sizeof<argument_list pos:line="469" pos:column="51">(<argument><expr><name pos:line="469" pos:column="52">AnnotationHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="469" pos:column="71">annotations</name><index pos:line="469" pos:column="82">[<expr><name pos:line="469" pos:column="83">line</name></expr>]</index></name> <op:operator pos:line="469" pos:column="89">+</op:operator> <sizeof pos:line="469" pos:column="91">sizeof<argument_list pos:line="469" pos:column="97">(<argument><expr><name pos:line="469" pos:column="98">AnnotationHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="469" pos:column="117">pahSource</name><op:operator pos:line="469" pos:column="126">-&gt;</op:operator><name pos:line="469" pos:column="128">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="470" pos:column="25">delete</op:operator> <index pos:line="470" pos:column="32">[]</index><name><name pos:line="470" pos:column="34">annotations</name><index pos:line="470" pos:column="45">[<expr><name pos:line="470" pos:column="46">line</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="471" pos:column="25">annotations</name><index pos:line="471" pos:column="36">[<expr><name pos:line="471" pos:column="37">line</name></expr>]</index></name> <op:operator pos:line="471" pos:column="43">=</op:operator> <name pos:line="471" pos:column="45">allocation</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	<decl_stmt><decl><type><name pos:line="474" pos:column="9">AnnotationHeader</name> <type:modifier pos:line="474" pos:column="26">*</type:modifier></type><name pos:line="474" pos:column="27">pah</name> <init pos:line="474" pos:column="31">= <expr><call><name><name pos:line="474" pos:column="33">reinterpret_cast</name><argument_list pos:line="474" pos:column="49">&lt;<argument><expr><name pos:line="474" pos:column="50">AnnotationHeader</name> <op:operator pos:line="474" pos:column="67">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="474" pos:column="69">(<argument><expr><name><name pos:line="474" pos:column="70">annotations</name><index pos:line="474" pos:column="81">[<expr><name pos:line="474" pos:column="82">line</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="475" pos:column="9">pah</name><op:operator pos:line="475" pos:column="12">-&gt;</op:operator><name pos:line="475" pos:column="14">style</name></name> <op:operator pos:line="475" pos:column="20">=</op:operator> <name pos:line="475" pos:column="22">IndividualStyles</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="476" pos:column="9">memcpy</name><argument_list pos:line="476" pos:column="15">(<argument><expr><name><name pos:line="476" pos:column="16">annotations</name><index pos:line="476" pos:column="27">[<expr><name pos:line="476" pos:column="28">line</name></expr>]</index></name> <op:operator pos:line="476" pos:column="34">+</op:operator> <sizeof pos:line="476" pos:column="36">sizeof<argument_list pos:line="476" pos:column="42">(<argument><expr><name pos:line="476" pos:column="43">AnnotationHeader</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="476" pos:column="61">+</op:operator> <name><name pos:line="476" pos:column="63">pah</name><op:operator pos:line="476" pos:column="66">-&gt;</op:operator><name pos:line="476" pos:column="68">length</name></name></expr></argument>, <argument><expr><name pos:line="476" pos:column="76">styles</name></expr></argument>, <argument><expr><name><name pos:line="476" pos:column="84">pah</name><op:operator pos:line="476" pos:column="87">-&gt;</op:operator><name pos:line="476" pos:column="89">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="479" pos:column="1">int</name></type> <name><name pos:line="479" pos:column="5">LineAnnotation</name><op:operator pos:line="479" pos:column="19">::</op:operator><name pos:line="479" pos:column="21">Length</name></name><parameter_list pos:line="479" pos:column="27">(<param><decl><type><name pos:line="479" pos:column="28">int</name></type> <name pos:line="479" pos:column="32">line</name></decl></param>)</parameter_list> <specifier pos:line="479" pos:column="38">const</specifier> <block pos:line="479" pos:column="44">{
	<if pos:line="480" pos:column="9">if <condition pos:line="480" pos:column="12">(<expr><call><name><name pos:line="480" pos:column="13">annotations</name><op:operator pos:line="480" pos:column="24">.</op:operator><name pos:line="480" pos:column="25">Length</name></name><argument_list pos:line="480" pos:column="31">()</argument_list></call> <op:operator pos:line="480" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="480" pos:column="37">(</op:operator><name pos:line="480" pos:column="38">line</name> <op:operator pos:line="480" pos:column="43">&lt;</op:operator> <call><name><name pos:line="480" pos:column="45">annotations</name><op:operator pos:line="480" pos:column="56">.</op:operator><name pos:line="480" pos:column="57">Length</name></name><argument_list pos:line="480" pos:column="63">()</argument_list></call><op:operator pos:line="480" pos:column="65">)</op:operator> <op:operator pos:line="480" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="480" pos:column="70">annotations</name><index pos:line="480" pos:column="81">[<expr><name pos:line="480" pos:column="82">line</name></expr>]</index></name></expr>)</condition><then pos:line="480" pos:column="88">
		<return pos:line="481" pos:column="17">return <expr><call><name><name pos:line="481" pos:column="24">reinterpret_cast</name><argument_list pos:line="481" pos:column="40">&lt;<argument><expr><name pos:line="481" pos:column="41">AnnotationHeader</name> <op:operator pos:line="481" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="481" pos:column="60">(<argument><expr><name><name pos:line="481" pos:column="61">annotations</name><index pos:line="481" pos:column="72">[<expr><name pos:line="481" pos:column="73">line</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="481" pos:column="79">-&gt;</op:operator><name pos:line="481" pos:column="81">length</name></expr>;</return></then>
	<else pos:line="482" pos:column="9">else
		<return pos:line="483" pos:column="17">return <expr><lit:literal type="number" pos:line="483" pos:column="24">0</lit:literal></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="486" pos:column="1">int</name></type> <name><name pos:line="486" pos:column="5">LineAnnotation</name><op:operator pos:line="486" pos:column="19">::</op:operator><name pos:line="486" pos:column="21">Lines</name></name><parameter_list pos:line="486" pos:column="26">(<param><decl><type><name pos:line="486" pos:column="27">int</name></type> <name pos:line="486" pos:column="31">line</name></decl></param>)</parameter_list> <specifier pos:line="486" pos:column="37">const</specifier> <block pos:line="486" pos:column="43">{
	<if pos:line="487" pos:column="9">if <condition pos:line="487" pos:column="12">(<expr><call><name><name pos:line="487" pos:column="13">annotations</name><op:operator pos:line="487" pos:column="24">.</op:operator><name pos:line="487" pos:column="25">Length</name></name><argument_list pos:line="487" pos:column="31">()</argument_list></call> <op:operator pos:line="487" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="487" pos:column="37">(</op:operator><name pos:line="487" pos:column="38">line</name> <op:operator pos:line="487" pos:column="43">&lt;</op:operator> <call><name><name pos:line="487" pos:column="45">annotations</name><op:operator pos:line="487" pos:column="56">.</op:operator><name pos:line="487" pos:column="57">Length</name></name><argument_list pos:line="487" pos:column="63">()</argument_list></call><op:operator pos:line="487" pos:column="65">)</op:operator> <op:operator pos:line="487" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="487" pos:column="70">annotations</name><index pos:line="487" pos:column="81">[<expr><name pos:line="487" pos:column="82">line</name></expr>]</index></name></expr>)</condition><then pos:line="487" pos:column="88">
		<return pos:line="488" pos:column="17">return <expr><call><name><name pos:line="488" pos:column="24">reinterpret_cast</name><argument_list pos:line="488" pos:column="40">&lt;<argument><expr><name pos:line="488" pos:column="41">AnnotationHeader</name> <op:operator pos:line="488" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="488" pos:column="60">(<argument><expr><name><name pos:line="488" pos:column="61">annotations</name><index pos:line="488" pos:column="72">[<expr><name pos:line="488" pos:column="73">line</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="488" pos:column="79">-&gt;</op:operator><name pos:line="488" pos:column="81">lines</name></expr>;</return></then>
	<else pos:line="489" pos:column="9">else
		<return pos:line="490" pos:column="17">return <expr><lit:literal type="number" pos:line="490" pos:column="24">0</lit:literal></expr>;</return></else></if>
}</block></function>
</unit>
