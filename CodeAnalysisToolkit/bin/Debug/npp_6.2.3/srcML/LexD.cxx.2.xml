<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexD.cxx" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/** @file LexD.cxx
 ** Lexer for D.
 **
 ** Copyright (c) 2006 by Waldemar Augustyn &lt;waldemar@wdmsys.com&gt;
 ** Converted to lexer object and added further folding features/properties by "Udo Lechner" &lt;dlchnr(at)gmx(dot)net&gt;
 **/</comment>
<comment type="line" pos:line="7" pos:column="1">// Copyright 1998-2005 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef</cpp:directive> <name pos:line="17" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">pragma</cpp:directive> warning(disable: 4786)</cpp:pragma>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;map&gt;</cpp:file></cpp:include>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"OptionSet.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef</cpp:directive> <name pos:line="35" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="36" pos:column="1">using namespace <name pos:line="36" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="39" pos:column="1">/* Nested comments require keeping the value of the nesting level for every
   position in the document.  But since scintilla always styles line by line,
   we only need to store one value per line. The non-negative number indicates
   nesting level at the end of the line.
*/</comment>

<comment type="line" pos:line="45" pos:column="1">// Underscore, letter, digit and universal alphas from C99 Appendix D.</comment>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <name pos:line="47" pos:column="8">bool</name></type> <name pos:line="47" pos:column="13">IsWordStart</name><parameter_list pos:line="47" pos:column="24">(<param><decl><type><name pos:line="47" pos:column="25">int</name></type> <name pos:line="47" pos:column="29">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="33">{
	<return pos:line="48" pos:column="9">return <expr><op:operator pos:line="48" pos:column="16">(</op:operator><call><name pos:line="48" pos:column="17">isascii</name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="48" pos:column="32">(</op:operator><call><name pos:line="48" pos:column="33">isalpha</name><argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="45">||</op:operator> <name pos:line="48" pos:column="48">ch</name> <op:operator pos:line="48" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="54">'_'</lit:literal><op:operator pos:line="48" pos:column="57">)</op:operator><op:operator pos:line="48" pos:column="58">)</op:operator> <op:operator pos:line="48" pos:column="60">||</op:operator> <op:operator pos:line="48" pos:column="63">!</op:operator><call><name pos:line="48" pos:column="64">isascii</name><argument_list pos:line="48" pos:column="71">(<argument><expr><name pos:line="48" pos:column="72">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <name pos:line="51" pos:column="8">bool</name></type> <name pos:line="51" pos:column="13">IsWord</name><parameter_list pos:line="51" pos:column="19">(<param><decl><type><name pos:line="51" pos:column="20">int</name></type> <name pos:line="51" pos:column="24">ch</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="28">{
	<return pos:line="52" pos:column="9">return <expr><op:operator pos:line="52" pos:column="16">(</op:operator><call><name pos:line="52" pos:column="17">isascii</name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="52" pos:column="32">(</op:operator><call><name pos:line="52" pos:column="33">isalnum</name><argument_list pos:line="52" pos:column="40">(<argument><expr><name pos:line="52" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="45">||</op:operator> <name pos:line="52" pos:column="48">ch</name> <op:operator pos:line="52" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="54">'_'</lit:literal><op:operator pos:line="52" pos:column="57">)</op:operator><op:operator pos:line="52" pos:column="58">)</op:operator> <op:operator pos:line="52" pos:column="60">||</op:operator> <op:operator pos:line="52" pos:column="63">!</op:operator><call><name pos:line="52" pos:column="64">isascii</name><argument_list pos:line="52" pos:column="71">(<argument><expr><name pos:line="52" pos:column="72">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="55" pos:column="1">static</specifier> <name pos:line="55" pos:column="8">bool</name></type> <name pos:line="55" pos:column="13">IsDoxygen</name><parameter_list pos:line="55" pos:column="22">(<param><decl><type><name pos:line="55" pos:column="23">int</name></type> <name pos:line="55" pos:column="27">ch</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="31">{
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><call><name pos:line="56" pos:column="13">isascii</name><argument_list pos:line="56" pos:column="20">(<argument><expr><name pos:line="56" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="56" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="56" pos:column="28">islower</name><argument_list pos:line="56" pos:column="35">(<argument><expr><name pos:line="56" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="56" pos:column="40">
		<return pos:line="57" pos:column="17">return <expr><lit:literal type="boolean" pos:line="57" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">ch</name> <op:operator pos:line="58" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="19">'$'</lit:literal> <op:operator pos:line="58" pos:column="23">||</op:operator> <name pos:line="58" pos:column="26">ch</name> <op:operator pos:line="58" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="32">'@'</lit:literal> <op:operator pos:line="58" pos:column="36">||</op:operator> <name pos:line="58" pos:column="39">ch</name> <op:operator pos:line="58" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="45">'\\'</lit:literal> <op:operator pos:line="58" pos:column="50">||</op:operator>
		<name pos:line="59" pos:column="17">ch</name> <op:operator pos:line="59" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="23">'&amp;'</lit:literal> <op:operator pos:line="59" pos:column="27">||</op:operator> <name pos:line="59" pos:column="30">ch</name> <op:operator pos:line="59" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="36">'#'</lit:literal> <op:operator pos:line="59" pos:column="40">||</op:operator> <name pos:line="59" pos:column="43">ch</name> <op:operator pos:line="59" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="49">'&lt;'</lit:literal> <op:operator pos:line="59" pos:column="53">||</op:operator> <name pos:line="59" pos:column="56">ch</name> <op:operator pos:line="59" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="62">'&gt;'</lit:literal> <op:operator pos:line="59" pos:column="66">||</op:operator>
		<name pos:line="60" pos:column="17">ch</name> <op:operator pos:line="60" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="23">'{'</lit:literal> <op:operator pos:line="60" pos:column="27">||</op:operator> <name pos:line="60" pos:column="30">ch</name> <op:operator pos:line="60" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="36">'}'</lit:literal> <op:operator pos:line="60" pos:column="40">||</op:operator> <name pos:line="60" pos:column="43">ch</name> <op:operator pos:line="60" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="49">'['</lit:literal> <op:operator pos:line="60" pos:column="53">||</op:operator> <name pos:line="60" pos:column="56">ch</name> <op:operator pos:line="60" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="62">']'</lit:literal></expr>)</condition><then pos:line="60" pos:column="66">
		<return pos:line="61" pos:column="17">return <expr><lit:literal type="boolean" pos:line="61" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="62" pos:column="9">return <expr><lit:literal type="boolean" pos:line="62" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="65" pos:column="1">static</specifier> <name pos:line="65" pos:column="8">bool</name></type> <name pos:line="65" pos:column="13">IsStringSuffix</name><parameter_list pos:line="65" pos:column="27">(<param><decl><type><name pos:line="65" pos:column="28">int</name></type> <name pos:line="65" pos:column="32">ch</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="36">{
	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">ch</name> <op:operator pos:line="66" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="22">'c'</lit:literal> <op:operator pos:line="66" pos:column="26">||</op:operator> <name pos:line="66" pos:column="29">ch</name> <op:operator pos:line="66" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="35">'w'</lit:literal> <op:operator pos:line="66" pos:column="39">||</op:operator> <name pos:line="66" pos:column="42">ch</name> <op:operator pos:line="66" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="48">'d'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="69" pos:column="1">static</specifier> <name pos:line="69" pos:column="8">bool</name></type> <name pos:line="69" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="69" pos:column="33">(<param><decl><type><name pos:line="69" pos:column="34">int</name></type> <name pos:line="69" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="45">{
	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">style</name> <op:operator pos:line="70" pos:column="22">==</op:operator> <name pos:line="70" pos:column="25">SCE_D_COMMENT</name> <op:operator pos:line="70" pos:column="39">||</op:operator>
		<name pos:line="71" pos:column="17">style</name> <op:operator pos:line="71" pos:column="23">==</op:operator> <name pos:line="71" pos:column="26">SCE_D_COMMENTDOC</name> <op:operator pos:line="71" pos:column="43">||</op:operator>
		<name pos:line="72" pos:column="17">style</name> <op:operator pos:line="72" pos:column="23">==</op:operator> <name pos:line="72" pos:column="26">SCE_D_COMMENTDOCKEYWORD</name> <op:operator pos:line="72" pos:column="50">||</op:operator>
		<name pos:line="73" pos:column="17">style</name> <op:operator pos:line="73" pos:column="23">==</op:operator> <name pos:line="73" pos:column="26">SCE_D_COMMENTDOCKEYWORDERROR</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="76" pos:column="1">// An individual named option for use in an OptionSet</comment>

<comment type="line" pos:line="78" pos:column="1">// Options used for LexerD</comment>
<struct pos:line="79" pos:column="1">struct <name pos:line="79" pos:column="8">OptionsD</name> <block pos:line="79" pos:column="17">{<public type="default" pos:line="79" pos:column="18">
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">bool</name></type> <name pos:line="80" pos:column="14">fold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">bool</name></type> <name pos:line="81" pos:column="14">foldSyntaxBased</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="82" pos:column="9">bool</name></type> <name pos:line="82" pos:column="14">foldComment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="83" pos:column="9">bool</name></type> <name pos:line="83" pos:column="14">foldCommentMultiline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="84" pos:column="9">bool</name></type> <name pos:line="84" pos:column="14">foldCommentExplicit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="85" pos:column="9">std</name><op:operator pos:line="85" pos:column="12">::</op:operator><name pos:line="85" pos:column="14">string</name></name></type> <name pos:line="85" pos:column="21">foldExplicitStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="86" pos:column="9">std</name><op:operator pos:line="86" pos:column="12">::</op:operator><name pos:line="86" pos:column="14">string</name></name></type> <name pos:line="86" pos:column="21">foldExplicitEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">bool</name></type> <name pos:line="87" pos:column="14">foldExplicitAnywhere</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">bool</name></type> <name pos:line="88" pos:column="14">foldCompact</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="89" pos:column="9">int</name></type>  <name pos:line="89" pos:column="14">foldAtElseInt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="90" pos:column="9">bool</name></type> <name pos:line="90" pos:column="14">foldAtElse</name></decl>;</decl_stmt>
	<constructor><name pos:line="91" pos:column="9">OptionsD</name><parameter_list pos:line="91" pos:column="17">()</parameter_list> <block pos:line="91" pos:column="20">{
		<expr_stmt><expr><name pos:line="92" pos:column="17">fold</name> <op:operator pos:line="92" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="92" pos:column="24">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="93" pos:column="17">foldSyntaxBased</name> <op:operator pos:line="93" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="93" pos:column="35">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">foldComment</name> <op:operator pos:line="94" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="94" pos:column="31">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="95" pos:column="17">foldCommentMultiline</name> <op:operator pos:line="95" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="95" pos:column="40">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="96" pos:column="17">foldCommentExplicit</name> <op:operator pos:line="96" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="96" pos:column="39">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="97" pos:column="17">foldExplicitStart</name> <op:operator pos:line="97" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="97" pos:column="37">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="98" pos:column="17">foldExplicitEnd</name>   <op:operator pos:line="98" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="98" pos:column="37">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="99" pos:column="17">foldExplicitAnywhere</name> <op:operator pos:line="99" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="99" pos:column="40">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="100" pos:column="17">foldCompact</name> <op:operator pos:line="100" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="100" pos:column="31">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="101" pos:column="17">foldAtElseInt</name> <op:operator pos:line="101" pos:column="31">=</op:operator> <op:operator pos:line="101" pos:column="33">-</op:operator><lit:literal type="number" pos:line="101" pos:column="34">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="102" pos:column="17">foldAtElse</name> <op:operator pos:line="102" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="102" pos:column="30">false</lit:literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier pos:line="106" pos:column="1">static</specifier> <specifier pos:line="106" pos:column="8">const</specifier> <name pos:line="106" pos:column="14">char</name> <type:modifier pos:line="106" pos:column="19">*</type:modifier> <specifier pos:line="106" pos:column="21">const</specifier></type> <name><name pos:line="106" pos:column="27">dWordLists</name><index pos:line="106" pos:column="37">[]</index></name> <init pos:line="106" pos:column="40">= <expr><block pos:line="106" pos:column="42">{
			<expr><lit:literal type="string" pos:line="107" pos:column="25">"Primary keywords and identifiers"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="108" pos:column="25">"Secondary keywords and identifiers"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="109" pos:column="25">"Documentation comment keywords"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="110" pos:column="25">"Type definitions and aliases"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="111" pos:column="25">"Keywords 5"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="112" pos:column="25">"Keywords 6"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="113" pos:column="25">"Keywords 7"</lit:literal></expr>,
			<expr><lit:literal type="number" pos:line="114" pos:column="25">0</lit:literal></expr>,
		}</block></expr></init></decl>;</decl_stmt>

<struct pos:line="117" pos:column="1">struct <name pos:line="117" pos:column="8">OptionSetD</name> <super pos:line="117" pos:column="19">: <specifier pos:line="117" pos:column="21">public</specifier> <name><name pos:line="117" pos:column="28">OptionSet</name><argument_list pos:line="117" pos:column="37">&lt;<argument><expr><name pos:line="117" pos:column="38">OptionsD</name></expr></argument>&gt;</argument_list></name></super> <block pos:line="117" pos:column="48">{<public type="default" pos:line="117" pos:column="49">
	<constructor><name pos:line="118" pos:column="9">OptionSetD</name><parameter_list pos:line="118" pos:column="19">()</parameter_list> <block pos:line="118" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="119" pos:column="17">DefineProperty</name><argument_list pos:line="119" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="32">"fold"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="119" pos:column="40">&amp;</op:operator><name><name pos:line="119" pos:column="41">OptionsD</name><op:operator pos:line="119" pos:column="49">::</op:operator><name pos:line="119" pos:column="51">fold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="121" pos:column="17">DefineProperty</name><argument_list pos:line="121" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="32">"fold.d.syntax.based"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="121" pos:column="55">&amp;</op:operator><name><name pos:line="121" pos:column="56">OptionsD</name><op:operator pos:line="121" pos:column="64">::</op:operator><name pos:line="121" pos:column="66">foldSyntaxBased</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="122" pos:column="25">"Set this property to 0 to disable syntax based folding."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="124" pos:column="17">DefineProperty</name><argument_list pos:line="124" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="32">"fold.comment"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="124" pos:column="48">&amp;</op:operator><name><name pos:line="124" pos:column="49">OptionsD</name><op:operator pos:line="124" pos:column="57">::</op:operator><name pos:line="124" pos:column="59">foldComment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="126" pos:column="17">DefineProperty</name><argument_list pos:line="126" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="32">"fold.d.comment.multiline"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="126" pos:column="60">&amp;</op:operator><name><name pos:line="126" pos:column="61">OptionsD</name><op:operator pos:line="126" pos:column="69">::</op:operator><name pos:line="126" pos:column="71">foldCommentMultiline</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="127" pos:column="25">"Set this property to 0 to disable folding multi-line comments when fold.comment=1."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="129" pos:column="17">DefineProperty</name><argument_list pos:line="129" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="32">"fold.d.comment.explicit"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="129" pos:column="59">&amp;</op:operator><name><name pos:line="129" pos:column="60">OptionsD</name><op:operator pos:line="129" pos:column="68">::</op:operator><name pos:line="129" pos:column="70">foldCommentExplicit</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="130" pos:column="25">"Set this property to 0 to disable folding explicit fold points when fold.comment=1."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="132" pos:column="17">DefineProperty</name><argument_list pos:line="132" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="32">"fold.d.explicit.start"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="132" pos:column="57">&amp;</op:operator><name><name pos:line="132" pos:column="58">OptionsD</name><op:operator pos:line="132" pos:column="66">::</op:operator><name pos:line="132" pos:column="68">foldExplicitStart</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="133" pos:column="25">"The string to use for explicit fold start points, replacing the standard //{."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="135" pos:column="17">DefineProperty</name><argument_list pos:line="135" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="32">"fold.d.explicit.end"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="135" pos:column="55">&amp;</op:operator><name><name pos:line="135" pos:column="56">OptionsD</name><op:operator pos:line="135" pos:column="64">::</op:operator><name pos:line="135" pos:column="66">foldExplicitEnd</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="136" pos:column="25">"The string to use for explicit fold end points, replacing the standard //}."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="138" pos:column="17">DefineProperty</name><argument_list pos:line="138" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="32">"fold.d.explicit.anywhere"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="138" pos:column="60">&amp;</op:operator><name><name pos:line="138" pos:column="61">OptionsD</name><op:operator pos:line="138" pos:column="69">::</op:operator><name pos:line="138" pos:column="71">foldExplicitAnywhere</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="139" pos:column="25">"Set this property to 1 to enable explicit fold points anywhere, not just in line comments."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="141" pos:column="17">DefineProperty</name><argument_list pos:line="141" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="32">"fold.compact"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="141" pos:column="48">&amp;</op:operator><name><name pos:line="141" pos:column="49">OptionsD</name><op:operator pos:line="141" pos:column="57">::</op:operator><name pos:line="141" pos:column="59">foldCompact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="143" pos:column="17">DefineProperty</name><argument_list pos:line="143" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="32">"lexer.d.fold.at.else"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="143" pos:column="56">&amp;</op:operator><name><name pos:line="143" pos:column="57">OptionsD</name><op:operator pos:line="143" pos:column="65">::</op:operator><name pos:line="143" pos:column="67">foldAtElseInt</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="144" pos:column="25">"This option enables D folding on a \"} else {\" line of an if statement."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="146" pos:column="17">DefineProperty</name><argument_list pos:line="146" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="32">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="146" pos:column="48">&amp;</op:operator><name><name pos:line="146" pos:column="49">OptionsD</name><op:operator pos:line="146" pos:column="57">::</op:operator><name pos:line="146" pos:column="59">foldAtElse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="148" pos:column="17">DefineWordListSets</name><argument_list pos:line="148" pos:column="35">(<argument><expr><name pos:line="148" pos:column="36">dWordLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<class pos:line="152" pos:column="1">class <name pos:line="152" pos:column="7">LexerD</name> <super pos:line="152" pos:column="14">: <specifier pos:line="152" pos:column="16">public</specifier> <name pos:line="152" pos:column="23">ILexer</name></super> <block pos:line="152" pos:column="30">{<private type="default" pos:line="152" pos:column="31">
	<decl_stmt><decl><type><name pos:line="153" pos:column="9">bool</name></type> <name pos:line="153" pos:column="14">caseSensitive</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="154" pos:column="9">WordList</name></type> <name pos:line="154" pos:column="18">keywords</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="155" pos:column="9">WordList</name></type> <name pos:line="155" pos:column="18">keywords2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="156" pos:column="9">WordList</name></type> <name pos:line="156" pos:column="18">keywords3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">WordList</name></type> <name pos:line="157" pos:column="18">keywords4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">WordList</name></type> <name pos:line="158" pos:column="18">keywords5</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="159" pos:column="9">WordList</name></type> <name pos:line="159" pos:column="18">keywords6</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">WordList</name></type> <name pos:line="160" pos:column="18">keywords7</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="161" pos:column="9">OptionsD</name></type> <name pos:line="161" pos:column="18">options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="162" pos:column="9">OptionSetD</name></type> <name pos:line="162" pos:column="20">osD</name></decl>;</decl_stmt>
</private><public pos:line="163" pos:column="1">public:
	<constructor><name pos:line="164" pos:column="9">LexerD</name><parameter_list pos:line="164" pos:column="15">(<param><decl><type><name pos:line="164" pos:column="16">bool</name></type> <name pos:line="164" pos:column="21">caseSensitive_</name></decl></param>)</parameter_list> <member_list pos:line="164" pos:column="37">:
		<call><name pos:line="165" pos:column="17">caseSensitive</name><argument_list pos:line="165" pos:column="30">(<argument><expr><name pos:line="165" pos:column="31">caseSensitive_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="165" pos:column="47">{
	}</block></constructor>
	<destructor><name pos:line="167" pos:column="9">~<name pos:line="167" pos:column="10">LexerD</name></name><parameter_list pos:line="167" pos:column="16">()</parameter_list> <block pos:line="167" pos:column="19">{
	}</block></destructor>
	<function><type><name pos:line="169" pos:column="9">void</name> <name pos:line="169" pos:column="14">SCI_METHOD</name></type> <name pos:line="169" pos:column="25">Release</name><parameter_list pos:line="169" pos:column="32">()</parameter_list> <block pos:line="169" pos:column="35">{
		<expr_stmt><expr><op:operator pos:line="170" pos:column="17">delete</op:operator> <name pos:line="170" pos:column="24">this</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="172" pos:column="9">int</name> <name pos:line="172" pos:column="13">SCI_METHOD</name></type> <name pos:line="172" pos:column="24">Version</name><parameter_list pos:line="172" pos:column="31">()</parameter_list> <specifier pos:line="172" pos:column="34">const</specifier> <block pos:line="172" pos:column="40">{
		<return pos:line="173" pos:column="17">return <expr><name pos:line="173" pos:column="24">lvOriginal</name></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="175" pos:column="9">const</specifier> <name pos:line="175" pos:column="15">char</name> <type:modifier pos:line="175" pos:column="20">*</type:modifier> <name pos:line="175" pos:column="22">SCI_METHOD</name></type> <name pos:line="175" pos:column="33">PropertyNames</name><parameter_list pos:line="175" pos:column="46">()</parameter_list> <block pos:line="175" pos:column="49">{
		<return pos:line="176" pos:column="17">return <expr><call><name><name pos:line="176" pos:column="24">osD</name><op:operator pos:line="176" pos:column="27">.</op:operator><name pos:line="176" pos:column="28">PropertyNames</name></name><argument_list pos:line="176" pos:column="41">()</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="178" pos:column="9">int</name> <name pos:line="178" pos:column="13">SCI_METHOD</name></type> <name pos:line="178" pos:column="24">PropertyType</name><parameter_list pos:line="178" pos:column="36">(<param><decl><type><specifier pos:line="178" pos:column="37">const</specifier> <name pos:line="178" pos:column="43">char</name> <type:modifier pos:line="178" pos:column="48">*</type:modifier></type><name pos:line="178" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="178" pos:column="55">{
		<return pos:line="179" pos:column="17">return <expr><call><name><name pos:line="179" pos:column="24">osD</name><op:operator pos:line="179" pos:column="27">.</op:operator><name pos:line="179" pos:column="28">PropertyType</name></name><argument_list pos:line="179" pos:column="40">(<argument><expr><name pos:line="179" pos:column="41">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="181" pos:column="9">const</specifier> <name pos:line="181" pos:column="15">char</name> <type:modifier pos:line="181" pos:column="20">*</type:modifier> <name pos:line="181" pos:column="22">SCI_METHOD</name></type> <name pos:line="181" pos:column="33">DescribeProperty</name><parameter_list pos:line="181" pos:column="49">(<param><decl><type><specifier pos:line="181" pos:column="50">const</specifier> <name pos:line="181" pos:column="56">char</name> <type:modifier pos:line="181" pos:column="61">*</type:modifier></type><name pos:line="181" pos:column="62">name</name></decl></param>)</parameter_list> <block pos:line="181" pos:column="68">{
		<return pos:line="182" pos:column="17">return <expr><call><name><name pos:line="182" pos:column="24">osD</name><op:operator pos:line="182" pos:column="27">.</op:operator><name pos:line="182" pos:column="28">DescribeProperty</name></name><argument_list pos:line="182" pos:column="44">(<argument><expr><name pos:line="182" pos:column="45">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="184" pos:column="9">int</name> <name pos:line="184" pos:column="13">SCI_METHOD</name></type> <name pos:line="184" pos:column="24">PropertySet</name><parameter_list pos:line="184" pos:column="35">(<param><decl><type><specifier pos:line="184" pos:column="36">const</specifier> <name pos:line="184" pos:column="42">char</name> <type:modifier pos:line="184" pos:column="47">*</type:modifier></type><name pos:line="184" pos:column="48">key</name></decl></param>, <param><decl><type><specifier pos:line="184" pos:column="53">const</specifier> <name pos:line="184" pos:column="59">char</name> <type:modifier pos:line="184" pos:column="64">*</type:modifier></type><name pos:line="184" pos:column="65">val</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><specifier pos:line="185" pos:column="9">const</specifier> <name pos:line="185" pos:column="15">char</name> <type:modifier pos:line="185" pos:column="20">*</type:modifier> <name pos:line="185" pos:column="22">SCI_METHOD</name></type> <name pos:line="185" pos:column="33">DescribeWordListSets</name><parameter_list pos:line="185" pos:column="53">()</parameter_list> <block pos:line="185" pos:column="56">{
		<return pos:line="186" pos:column="17">return <expr><call><name><name pos:line="186" pos:column="24">osD</name><op:operator pos:line="186" pos:column="27">.</op:operator><name pos:line="186" pos:column="28">DescribeWordListSets</name></name><argument_list pos:line="186" pos:column="48">()</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="188" pos:column="9">int</name> <name pos:line="188" pos:column="13">SCI_METHOD</name></type> <name pos:line="188" pos:column="24">WordListSet</name><parameter_list pos:line="188" pos:column="35">(<param><decl><type><name pos:line="188" pos:column="36">int</name></type> <name pos:line="188" pos:column="40">n</name></decl></param>, <param><decl><type><specifier pos:line="188" pos:column="43">const</specifier> <name pos:line="188" pos:column="49">char</name> <type:modifier pos:line="188" pos:column="54">*</type:modifier></type><name pos:line="188" pos:column="55">wl</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="189" pos:column="9">void</name> <name pos:line="189" pos:column="14">SCI_METHOD</name></type> <name pos:line="189" pos:column="25">Lex</name><parameter_list pos:line="189" pos:column="28">(<param><decl><type><name pos:line="189" pos:column="29">unsigned</name> <name pos:line="189" pos:column="38">int</name></type> <name pos:line="189" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="189" pos:column="52">int</name></type> <name pos:line="189" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="189" pos:column="64">int</name></type> <name pos:line="189" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="189" pos:column="79">IDocument</name> <type:modifier pos:line="189" pos:column="89">*</type:modifier></type><name pos:line="189" pos:column="90">pAccess</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="190" pos:column="9">void</name> <name pos:line="190" pos:column="14">SCI_METHOD</name></type> <name pos:line="190" pos:column="25">Fold</name><parameter_list pos:line="190" pos:column="29">(<param><decl><type><name pos:line="190" pos:column="30">unsigned</name> <name pos:line="190" pos:column="39">int</name></type> <name pos:line="190" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="190" pos:column="53">int</name></type> <name pos:line="190" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="190" pos:column="65">int</name></type> <name pos:line="190" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="190" pos:column="80">IDocument</name> <type:modifier pos:line="190" pos:column="90">*</type:modifier></type><name pos:line="190" pos:column="91">pAccess</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="192" pos:column="9">void</name> <type:modifier pos:line="192" pos:column="14">*</type:modifier> <name pos:line="192" pos:column="16">SCI_METHOD</name></type> <name pos:line="192" pos:column="27">PrivateCall</name><parameter_list pos:line="192" pos:column="38">(<param><decl><type><name pos:line="192" pos:column="39">int</name></type></decl></param>, <param><decl><type><name pos:line="192" pos:column="44">void</name> <type:modifier pos:line="192" pos:column="49">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="192" pos:column="52">{
		<return pos:line="193" pos:column="17">return <expr><lit:literal type="number" pos:line="193" pos:column="24">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="196" pos:column="9">static</specifier> <name pos:line="196" pos:column="16">ILexer</name> <type:modifier pos:line="196" pos:column="23">*</type:modifier></type><name pos:line="196" pos:column="24">LexerFactoryD</name><parameter_list pos:line="196" pos:column="37">()</parameter_list> <block pos:line="196" pos:column="40">{
		<return pos:line="197" pos:column="17">return <expr><op:operator pos:line="197" pos:column="24">new</op:operator> <call><name pos:line="197" pos:column="28">LexerD</name><argument_list pos:line="197" pos:column="34">(<argument><expr><lit:literal type="boolean" pos:line="197" pos:column="35">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="199" pos:column="9">static</specifier> <name pos:line="199" pos:column="16">ILexer</name> <type:modifier pos:line="199" pos:column="23">*</type:modifier></type><name pos:line="199" pos:column="24">LexerFactoryDInsensitive</name><parameter_list pos:line="199" pos:column="48">()</parameter_list> <block pos:line="199" pos:column="51">{
		<return pos:line="200" pos:column="17">return <expr><op:operator pos:line="200" pos:column="24">new</op:operator> <call><name pos:line="200" pos:column="28">LexerD</name><argument_list pos:line="200" pos:column="34">(<argument><expr><lit:literal type="boolean" pos:line="200" pos:column="35">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="204" pos:column="1">int</name> <name pos:line="204" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="204" pos:column="16">LexerD</name><op:operator pos:line="204" pos:column="22">::</op:operator><name pos:line="204" pos:column="24">PropertySet</name></name><parameter_list pos:line="204" pos:column="35">(<param><decl><type><specifier pos:line="204" pos:column="36">const</specifier> <name pos:line="204" pos:column="42">char</name> <type:modifier pos:line="204" pos:column="47">*</type:modifier></type><name pos:line="204" pos:column="48">key</name></decl></param>, <param><decl><type><specifier pos:line="204" pos:column="53">const</specifier> <name pos:line="204" pos:column="59">char</name> <type:modifier pos:line="204" pos:column="64">*</type:modifier></type><name pos:line="204" pos:column="65">val</name></decl></param>)</parameter_list> <block pos:line="204" pos:column="70">{
	<if pos:line="205" pos:column="9">if <condition pos:line="205" pos:column="12">(<expr><call><name><name pos:line="205" pos:column="13">osD</name><op:operator pos:line="205" pos:column="16">.</op:operator><name pos:line="205" pos:column="17">PropertySet</name></name><argument_list pos:line="205" pos:column="28">(<argument><expr><op:operator pos:line="205" pos:column="29">&amp;</op:operator><name pos:line="205" pos:column="30">options</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="39">key</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="44">val</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="205" pos:column="49"> <block pos:line="205" pos:column="50">{
		<return pos:line="206" pos:column="17">return <expr><lit:literal type="number" pos:line="206" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="208" pos:column="9">return <expr><op:operator pos:line="208" pos:column="16">-</op:operator><lit:literal type="number" pos:line="208" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="211" pos:column="1">int</name> <name pos:line="211" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="211" pos:column="16">LexerD</name><op:operator pos:line="211" pos:column="22">::</op:operator><name pos:line="211" pos:column="24">WordListSet</name></name><parameter_list pos:line="211" pos:column="35">(<param><decl><type><name pos:line="211" pos:column="36">int</name></type> <name pos:line="211" pos:column="40">n</name></decl></param>, <param><decl><type><specifier pos:line="211" pos:column="43">const</specifier> <name pos:line="211" pos:column="49">char</name> <type:modifier pos:line="211" pos:column="54">*</type:modifier></type><name pos:line="211" pos:column="55">wl</name></decl></param>)</parameter_list> <block pos:line="211" pos:column="59">{
	<decl_stmt><decl><type><name pos:line="212" pos:column="9">WordList</name> <type:modifier pos:line="212" pos:column="18">*</type:modifier></type><name pos:line="212" pos:column="19">wordListN</name> <init pos:line="212" pos:column="29">= <expr><lit:literal type="number" pos:line="212" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<switch pos:line="213" pos:column="9">switch <condition pos:line="213" pos:column="16">(<expr><name pos:line="213" pos:column="17">n</name></expr>)</condition> <block pos:line="213" pos:column="20">{
	<case pos:line="214" pos:column="9">case <expr><lit:literal type="number" pos:line="214" pos:column="14">0</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="215" pos:column="17">wordListN</name> <op:operator pos:line="215" pos:column="27">=</op:operator> <op:operator pos:line="215" pos:column="29">&amp;</op:operator><name pos:line="215" pos:column="30">keywords</name></expr>;</expr_stmt>
		<break pos:line="216" pos:column="17">break;</break>
	</case><case pos:line="217" pos:column="9">case <expr><lit:literal type="number" pos:line="217" pos:column="14">1</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="218" pos:column="17">wordListN</name> <op:operator pos:line="218" pos:column="27">=</op:operator> <op:operator pos:line="218" pos:column="29">&amp;</op:operator><name pos:line="218" pos:column="30">keywords2</name></expr>;</expr_stmt>
		<break pos:line="219" pos:column="17">break;</break>
	</case><case pos:line="220" pos:column="9">case <expr><lit:literal type="number" pos:line="220" pos:column="14">2</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="221" pos:column="17">wordListN</name> <op:operator pos:line="221" pos:column="27">=</op:operator> <op:operator pos:line="221" pos:column="29">&amp;</op:operator><name pos:line="221" pos:column="30">keywords3</name></expr>;</expr_stmt>
		<break pos:line="222" pos:column="17">break;</break>
	</case><case pos:line="223" pos:column="9">case <expr><lit:literal type="number" pos:line="223" pos:column="14">3</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="224" pos:column="17">wordListN</name> <op:operator pos:line="224" pos:column="27">=</op:operator> <op:operator pos:line="224" pos:column="29">&amp;</op:operator><name pos:line="224" pos:column="30">keywords4</name></expr>;</expr_stmt>
		<break pos:line="225" pos:column="17">break;</break>
	</case><case pos:line="226" pos:column="9">case <expr><lit:literal type="number" pos:line="226" pos:column="14">4</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="227" pos:column="17">wordListN</name> <op:operator pos:line="227" pos:column="27">=</op:operator> <op:operator pos:line="227" pos:column="29">&amp;</op:operator><name pos:line="227" pos:column="30">keywords5</name></expr>;</expr_stmt>
		<break pos:line="228" pos:column="17">break;</break>
	</case><case pos:line="229" pos:column="9">case <expr><lit:literal type="number" pos:line="229" pos:column="14">5</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="230" pos:column="17">wordListN</name> <op:operator pos:line="230" pos:column="27">=</op:operator> <op:operator pos:line="230" pos:column="29">&amp;</op:operator><name pos:line="230" pos:column="30">keywords6</name></expr>;</expr_stmt>
		<break pos:line="231" pos:column="17">break;</break>
	</case><case pos:line="232" pos:column="9">case <expr><lit:literal type="number" pos:line="232" pos:column="14">6</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="233" pos:column="17">wordListN</name> <op:operator pos:line="233" pos:column="27">=</op:operator> <op:operator pos:line="233" pos:column="29">&amp;</op:operator><name pos:line="233" pos:column="30">keywords7</name></expr>;</expr_stmt>
		<break pos:line="234" pos:column="17">break;</break>
	</case>}</block></switch>
	<decl_stmt><decl><type><name pos:line="236" pos:column="9">int</name></type> <name pos:line="236" pos:column="13">firstModification</name> <init pos:line="236" pos:column="31">= <expr><op:operator pos:line="236" pos:column="33">-</op:operator><lit:literal type="number" pos:line="236" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="237" pos:column="9">if <condition pos:line="237" pos:column="12">(<expr><name pos:line="237" pos:column="13">wordListN</name></expr>)</condition><then pos:line="237" pos:column="23"> <block pos:line="237" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="238" pos:column="17">WordList</name></type> <name pos:line="238" pos:column="26">wlNew</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="239" pos:column="17">wlNew</name><op:operator pos:line="239" pos:column="22">.</op:operator><name pos:line="239" pos:column="23">Set</name></name><argument_list pos:line="239" pos:column="26">(<argument><expr><name pos:line="239" pos:column="27">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="240" pos:column="17">if <condition pos:line="240" pos:column="20">(<expr><op:operator pos:line="240" pos:column="21">*</op:operator><name pos:line="240" pos:column="22">wordListN</name> <op:operator pos:line="240" pos:column="32">!=</op:operator> <name pos:line="240" pos:column="35">wlNew</name></expr>)</condition><then pos:line="240" pos:column="41"> <block pos:line="240" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="241" pos:column="25">wordListN</name><op:operator pos:line="241" pos:column="34">-&gt;</op:operator><name pos:line="241" pos:column="36">Set</name></name><argument_list pos:line="241" pos:column="39">(<argument><expr><name pos:line="241" pos:column="40">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="242" pos:column="25">firstModification</name> <op:operator pos:line="242" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="242" pos:column="45">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="245" pos:column="9">return <expr><name pos:line="245" pos:column="16">firstModification</name></expr>;</return>
}</block></function>

<function><type><name pos:line="248" pos:column="1">void</name> <name pos:line="248" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="248" pos:column="17">LexerD</name><op:operator pos:line="248" pos:column="23">::</op:operator><name pos:line="248" pos:column="25">Lex</name></name><parameter_list pos:line="248" pos:column="28">(<param><decl><type><name pos:line="248" pos:column="29">unsigned</name> <name pos:line="248" pos:column="38">int</name></type> <name pos:line="248" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="248" pos:column="52">int</name></type> <name pos:line="248" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="248" pos:column="64">int</name></type> <name pos:line="248" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="248" pos:column="79">IDocument</name> <type:modifier pos:line="248" pos:column="89">*</type:modifier></type><name pos:line="248" pos:column="90">pAccess</name></decl></param>)</parameter_list> <block pos:line="248" pos:column="99">{
	<function_decl><type><name pos:line="249" pos:column="9">LexAccessor</name></type> <name pos:line="249" pos:column="21">styler</name><parameter_list pos:line="249" pos:column="27">(<param><decl><type><name pos:line="249" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="251" pos:column="9">int</name></type> <name pos:line="251" pos:column="13">styleBeforeDCKeyword</name> <init pos:line="251" pos:column="34">= <expr><name pos:line="251" pos:column="36">SCE_D_DEFAULT</name></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="253" pos:column="9">StyleContext</name></type> <name pos:line="253" pos:column="22">sc</name><parameter_list pos:line="253" pos:column="24">(<param><decl><type><name pos:line="253" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="253" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="253" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="253" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="255" pos:column="9">int</name></type> <name pos:line="255" pos:column="13">curLine</name> <init pos:line="255" pos:column="21">= <expr><call><name><name pos:line="255" pos:column="23">styler</name><op:operator pos:line="255" pos:column="29">.</op:operator><name pos:line="255" pos:column="30">GetLine</name></name><argument_list pos:line="255" pos:column="37">(<argument><expr><name pos:line="255" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="256" pos:column="9">int</name></type> <name pos:line="256" pos:column="13">curNcLevel</name> <init pos:line="256" pos:column="24">= <expr><name pos:line="256" pos:column="26">curLine</name> <op:operator pos:line="256" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="256" pos:column="36">0</lit:literal><op:operator pos:line="256" pos:column="37">?</op:operator> <call><name><name pos:line="256" pos:column="39">styler</name><op:operator pos:line="256" pos:column="45">.</op:operator><name pos:line="256" pos:column="46">GetLineState</name></name><argument_list pos:line="256" pos:column="58">(<argument><expr><name pos:line="256" pos:column="59">curLine</name><op:operator pos:line="256" pos:column="66">-</op:operator><lit:literal type="number" pos:line="256" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="256" pos:column="69">:</op:operator> <lit:literal type="number" pos:line="256" pos:column="71">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="257" pos:column="9">bool</name></type> <name pos:line="257" pos:column="14">numFloat</name> <init pos:line="257" pos:column="23">= <expr><lit:literal type="boolean" pos:line="257" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="257" pos:column="32">// Float literals have '+' and '-' signs</comment>
	<decl_stmt><decl><type><name pos:line="258" pos:column="9">bool</name></type> <name pos:line="258" pos:column="14">numHex</name> <init pos:line="258" pos:column="21">= <expr><lit:literal type="boolean" pos:line="258" pos:column="23">false</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="260" pos:column="9">for (<init pos:line="260" pos:column="14">;</init> <condition><expr><call><name><name pos:line="260" pos:column="16">sc</name><op:operator pos:line="260" pos:column="18">.</op:operator><name pos:line="260" pos:column="19">More</name></name><argument_list pos:line="260" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="260" pos:column="27">sc</name><op:operator pos:line="260" pos:column="29">.</op:operator><name pos:line="260" pos:column="30">Forward</name></name><argument_list pos:line="260" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="260" pos:column="41">{

		<if pos:line="262" pos:column="17">if <condition pos:line="262" pos:column="20">(<expr><name><name pos:line="262" pos:column="21">sc</name><op:operator pos:line="262" pos:column="23">.</op:operator><name pos:line="262" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="262" pos:column="36"> <block pos:line="262" pos:column="37">{
			<expr_stmt><expr><name pos:line="263" pos:column="25">curLine</name> <op:operator pos:line="263" pos:column="33">=</op:operator> <call><name><name pos:line="263" pos:column="35">styler</name><op:operator pos:line="263" pos:column="41">.</op:operator><name pos:line="263" pos:column="42">GetLine</name></name><argument_list pos:line="263" pos:column="49">(<argument><expr><name><name pos:line="263" pos:column="50">sc</name><op:operator pos:line="263" pos:column="52">.</op:operator><name pos:line="263" pos:column="53">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="264" pos:column="25">styler</name><op:operator pos:line="264" pos:column="31">.</op:operator><name pos:line="264" pos:column="32">SetLineState</name></name><argument_list pos:line="264" pos:column="44">(<argument><expr><name pos:line="264" pos:column="45">curLine</name></expr></argument>, <argument><expr><name pos:line="264" pos:column="54">curNcLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="267" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="268" pos:column="17">switch <condition pos:line="268" pos:column="24">(<expr><name><name pos:line="268" pos:column="25">sc</name><op:operator pos:line="268" pos:column="27">.</op:operator><name pos:line="268" pos:column="28">state</name></name></expr>)</condition> <block pos:line="268" pos:column="35">{
			<case pos:line="269" pos:column="25">case <expr><name pos:line="269" pos:column="30">SCE_D_OPERATOR</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="270" pos:column="33">sc</name><op:operator pos:line="270" pos:column="35">.</op:operator><name pos:line="270" pos:column="36">SetState</name></name><argument_list pos:line="270" pos:column="44">(<argument><expr><name pos:line="270" pos:column="45">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="271" pos:column="33">break;</break>
			</case><case pos:line="272" pos:column="25">case <expr><name pos:line="272" pos:column="30">SCE_D_NUMBER</name></expr>:
				<comment type="line" pos:line="273" pos:column="33">// We accept almost anything because of hex. and number suffixes</comment>
				<if pos:line="274" pos:column="33">if <condition pos:line="274" pos:column="36">(<expr><call><name pos:line="274" pos:column="37">isascii</name><argument_list pos:line="274" pos:column="44">(<argument><expr><name><name pos:line="274" pos:column="45">sc</name><op:operator pos:line="274" pos:column="47">.</op:operator><name pos:line="274" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="274" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="274" pos:column="55">(</op:operator><call><name pos:line="274" pos:column="56">isalnum</name><argument_list pos:line="274" pos:column="63">(<argument><expr><name><name pos:line="274" pos:column="64">sc</name><op:operator pos:line="274" pos:column="66">.</op:operator><name pos:line="274" pos:column="67">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="274" pos:column="71">||</op:operator> <name><name pos:line="274" pos:column="74">sc</name><op:operator pos:line="274" pos:column="76">.</op:operator><name pos:line="274" pos:column="77">ch</name></name> <op:operator pos:line="274" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="274" pos:column="83">'_'</lit:literal><op:operator pos:line="274" pos:column="86">)</op:operator></expr>)</condition><then pos:line="274" pos:column="88"> <block pos:line="274" pos:column="89">{
					<continue pos:line="275" pos:column="41">continue;</continue>
				}</block></then> <else pos:line="276" pos:column="35">else <if pos:line="276" pos:column="40">if <condition pos:line="276" pos:column="43">(<expr><name><name pos:line="276" pos:column="44">sc</name><op:operator pos:line="276" pos:column="46">.</op:operator><name pos:line="276" pos:column="47">ch</name></name> <op:operator pos:line="276" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="276" pos:column="53">'.'</lit:literal> <op:operator pos:line="276" pos:column="57">&amp;&amp;</op:operator> <name><name pos:line="276" pos:column="60">sc</name><op:operator pos:line="276" pos:column="62">.</op:operator><name pos:line="276" pos:column="63">chNext</name></name> <op:operator pos:line="276" pos:column="70">!=</op:operator> <lit:literal type="char" pos:line="276" pos:column="73">'.'</lit:literal> <op:operator pos:line="276" pos:column="77">&amp;&amp;</op:operator> <op:operator pos:line="276" pos:column="80">!</op:operator><name pos:line="276" pos:column="81">numFloat</name></expr>)</condition><then pos:line="276" pos:column="90"> <block pos:line="276" pos:column="91">{
					<comment type="line" pos:line="277" pos:column="41">// Don't parse 0..2 as number.</comment>
					<expr_stmt><expr><name pos:line="278" pos:column="41">numFloat</name><op:operator pos:line="278" pos:column="49">=</op:operator><lit:literal type="boolean" pos:line="278" pos:column="50">true</lit:literal></expr>;</expr_stmt>
					<continue pos:line="279" pos:column="41">continue;</continue>
				}</block></then> <else pos:line="280" pos:column="35">else <if pos:line="280" pos:column="40">if <condition pos:line="280" pos:column="43">( <expr><op:operator pos:line="280" pos:column="45">(</op:operator> <name><name pos:line="280" pos:column="47">sc</name><op:operator pos:line="280" pos:column="49">.</op:operator><name pos:line="280" pos:column="50">ch</name></name> <op:operator pos:line="280" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="56">'-'</lit:literal> <op:operator pos:line="280" pos:column="60">||</op:operator> <name><name pos:line="280" pos:column="63">sc</name><op:operator pos:line="280" pos:column="65">.</op:operator><name pos:line="280" pos:column="66">ch</name></name> <op:operator pos:line="280" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="72">'+'</lit:literal> <op:operator pos:line="280" pos:column="76">)</op:operator> <op:operator pos:line="280" pos:column="78">&amp;&amp;</op:operator> <op:operator pos:line="280" pos:column="81">(</op:operator>		<comment type="block" pos:line="280" pos:column="97">/*sign and*/</comment>
					<op:operator pos:line="281" pos:column="41">(</op:operator> <op:operator pos:line="281" pos:column="43">!</op:operator><name pos:line="281" pos:column="44">numHex</name> <op:operator pos:line="281" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="281" pos:column="54">(</op:operator> <name><name pos:line="281" pos:column="56">sc</name><op:operator pos:line="281" pos:column="58">.</op:operator><name pos:line="281" pos:column="59">chPrev</name></name> <op:operator pos:line="281" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="281" pos:column="69">'e'</lit:literal> <op:operator pos:line="281" pos:column="73">||</op:operator> <name><name pos:line="281" pos:column="76">sc</name><op:operator pos:line="281" pos:column="78">.</op:operator><name pos:line="281" pos:column="79">chPrev</name></name> <op:operator pos:line="281" pos:column="86">==</op:operator> <lit:literal type="char" pos:line="281" pos:column="89">'E'</lit:literal> <op:operator pos:line="281" pos:column="93">)</op:operator> <op:operator pos:line="281" pos:column="95">)</op:operator> <op:operator pos:line="281" pos:column="97">||</op:operator> <comment type="block" pos:line="281" pos:column="100">/*decimal or*/</comment>
					<op:operator pos:line="282" pos:column="41">(</op:operator> <name><name pos:line="282" pos:column="43">sc</name><op:operator pos:line="282" pos:column="45">.</op:operator><name pos:line="282" pos:column="46">chPrev</name></name> <op:operator pos:line="282" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="282" pos:column="56">'p'</lit:literal> <op:operator pos:line="282" pos:column="60">||</op:operator> <name><name pos:line="282" pos:column="63">sc</name><op:operator pos:line="282" pos:column="65">.</op:operator><name pos:line="282" pos:column="66">chPrev</name></name> <op:operator pos:line="282" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="282" pos:column="76">'P'</lit:literal> <op:operator pos:line="282" pos:column="80">)</op:operator> <op:operator pos:line="282" pos:column="82">)</op:operator></expr> )</condition><then pos:line="282" pos:column="85"> <block pos:line="282" pos:column="86">{		<comment type="block" pos:line="282" pos:column="97">/*hex*/</comment>
					<comment type="line" pos:line="283" pos:column="41">// Parse exponent sign in float literals: 2e+10 0x2e+10</comment>
					<continue pos:line="284" pos:column="41">continue;</continue>
				}</block></then> <else pos:line="285" pos:column="35">else <block pos:line="285" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="286" pos:column="41">sc</name><op:operator pos:line="286" pos:column="43">.</op:operator><name pos:line="286" pos:column="44">SetState</name></name><argument_list pos:line="286" pos:column="52">(<argument><expr><name pos:line="286" pos:column="53">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if>
				<break pos:line="288" pos:column="33">break;</break>
			</case><case pos:line="289" pos:column="25">case <expr><name pos:line="289" pos:column="30">SCE_D_IDENTIFIER</name></expr>:
				<if pos:line="290" pos:column="33">if <condition pos:line="290" pos:column="36">(<expr><op:operator pos:line="290" pos:column="37">!</op:operator><call><name pos:line="290" pos:column="38">IsWord</name><argument_list pos:line="290" pos:column="44">(<argument><expr><name><name pos:line="290" pos:column="45">sc</name><op:operator pos:line="290" pos:column="47">.</op:operator><name pos:line="290" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="290" pos:column="52"> <block pos:line="290" pos:column="53">{
					<decl_stmt><decl><type><name pos:line="291" pos:column="41">char</name></type> <name><name pos:line="291" pos:column="46">s</name><index pos:line="291" pos:column="47">[<expr><lit:literal type="number" pos:line="291" pos:column="48">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<if pos:line="292" pos:column="41">if <condition pos:line="292" pos:column="44">(<expr><name pos:line="292" pos:column="45">caseSensitive</name></expr>)</condition><then pos:line="292" pos:column="59"> <block pos:line="292" pos:column="60">{
						<expr_stmt><expr><call><name><name pos:line="293" pos:column="49">sc</name><op:operator pos:line="293" pos:column="51">.</op:operator><name pos:line="293" pos:column="52">GetCurrent</name></name><argument_list pos:line="293" pos:column="62">(<argument><expr><name pos:line="293" pos:column="63">s</name></expr></argument>, <argument><expr><sizeof pos:line="293" pos:column="66">sizeof<argument_list pos:line="293" pos:column="72">(<argument><expr><name pos:line="293" pos:column="73">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="294" pos:column="43">else <block pos:line="294" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="295" pos:column="49">sc</name><op:operator pos:line="295" pos:column="51">.</op:operator><name pos:line="295" pos:column="52">GetCurrentLowered</name></name><argument_list pos:line="295" pos:column="69">(<argument><expr><name pos:line="295" pos:column="70">s</name></expr></argument>, <argument><expr><sizeof pos:line="295" pos:column="73">sizeof<argument_list pos:line="295" pos:column="79">(<argument><expr><name pos:line="295" pos:column="80">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<if pos:line="297" pos:column="41">if <condition pos:line="297" pos:column="44">(<expr><call><name><name pos:line="297" pos:column="45">keywords</name><op:operator pos:line="297" pos:column="53">.</op:operator><name pos:line="297" pos:column="54">InList</name></name><argument_list pos:line="297" pos:column="60">(<argument><expr><name pos:line="297" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="297" pos:column="64"> <block pos:line="297" pos:column="65">{
						<expr_stmt><expr><call><name><name pos:line="298" pos:column="49">sc</name><op:operator pos:line="298" pos:column="51">.</op:operator><name pos:line="298" pos:column="52">ChangeState</name></name><argument_list pos:line="298" pos:column="63">(<argument><expr><name pos:line="298" pos:column="64">SCE_D_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="299" pos:column="43">else <if pos:line="299" pos:column="48">if <condition pos:line="299" pos:column="51">(<expr><call><name><name pos:line="299" pos:column="52">keywords2</name><op:operator pos:line="299" pos:column="61">.</op:operator><name pos:line="299" pos:column="62">InList</name></name><argument_list pos:line="299" pos:column="68">(<argument><expr><name pos:line="299" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="299" pos:column="72"> <block pos:line="299" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="300" pos:column="49">sc</name><op:operator pos:line="300" pos:column="51">.</op:operator><name pos:line="300" pos:column="52">ChangeState</name></name><argument_list pos:line="300" pos:column="63">(<argument><expr><name pos:line="300" pos:column="64">SCE_D_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="301" pos:column="43">else <if pos:line="301" pos:column="48">if <condition pos:line="301" pos:column="51">(<expr><call><name><name pos:line="301" pos:column="52">keywords4</name><op:operator pos:line="301" pos:column="61">.</op:operator><name pos:line="301" pos:column="62">InList</name></name><argument_list pos:line="301" pos:column="68">(<argument><expr><name pos:line="301" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="301" pos:column="72"> <block pos:line="301" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="302" pos:column="49">sc</name><op:operator pos:line="302" pos:column="51">.</op:operator><name pos:line="302" pos:column="52">ChangeState</name></name><argument_list pos:line="302" pos:column="63">(<argument><expr><name pos:line="302" pos:column="64">SCE_D_TYPEDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="303" pos:column="43">else <if pos:line="303" pos:column="48">if <condition pos:line="303" pos:column="51">(<expr><call><name><name pos:line="303" pos:column="52">keywords5</name><op:operator pos:line="303" pos:column="61">.</op:operator><name pos:line="303" pos:column="62">InList</name></name><argument_list pos:line="303" pos:column="68">(<argument><expr><name pos:line="303" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="303" pos:column="72"> <block pos:line="303" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="304" pos:column="49">sc</name><op:operator pos:line="304" pos:column="51">.</op:operator><name pos:line="304" pos:column="52">ChangeState</name></name><argument_list pos:line="304" pos:column="63">(<argument><expr><name pos:line="304" pos:column="64">SCE_D_WORD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="305" pos:column="43">else <if pos:line="305" pos:column="48">if <condition pos:line="305" pos:column="51">(<expr><call><name><name pos:line="305" pos:column="52">keywords6</name><op:operator pos:line="305" pos:column="61">.</op:operator><name pos:line="305" pos:column="62">InList</name></name><argument_list pos:line="305" pos:column="68">(<argument><expr><name pos:line="305" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="305" pos:column="72"> <block pos:line="305" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="306" pos:column="49">sc</name><op:operator pos:line="306" pos:column="51">.</op:operator><name pos:line="306" pos:column="52">ChangeState</name></name><argument_list pos:line="306" pos:column="63">(<argument><expr><name pos:line="306" pos:column="64">SCE_D_WORD6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="307" pos:column="43">else <if pos:line="307" pos:column="48">if <condition pos:line="307" pos:column="51">(<expr><call><name><name pos:line="307" pos:column="52">keywords7</name><op:operator pos:line="307" pos:column="61">.</op:operator><name pos:line="307" pos:column="62">InList</name></name><argument_list pos:line="307" pos:column="68">(<argument><expr><name pos:line="307" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="307" pos:column="72"> <block pos:line="307" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="308" pos:column="49">sc</name><op:operator pos:line="308" pos:column="51">.</op:operator><name pos:line="308" pos:column="52">ChangeState</name></name><argument_list pos:line="308" pos:column="63">(<argument><expr><name pos:line="308" pos:column="64">SCE_D_WORD7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if></else></if></else></if></else></if>
					<expr_stmt><expr><call><name><name pos:line="310" pos:column="41">sc</name><op:operator pos:line="310" pos:column="43">.</op:operator><name pos:line="310" pos:column="44">SetState</name></name><argument_list pos:line="310" pos:column="52">(<argument><expr><name pos:line="310" pos:column="53">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="312" pos:column="33">break;</break>
			</case><case pos:line="313" pos:column="25">case <expr><name pos:line="313" pos:column="30">SCE_D_COMMENT</name></expr>:
				<if pos:line="314" pos:column="33">if <condition pos:line="314" pos:column="36">(<expr><call><name><name pos:line="314" pos:column="37">sc</name><op:operator pos:line="314" pos:column="39">.</op:operator><name pos:line="314" pos:column="40">Match</name></name><argument_list pos:line="314" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="314" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="314" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="314" pos:column="56"> <block pos:line="314" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="315" pos:column="41">sc</name><op:operator pos:line="315" pos:column="43">.</op:operator><name pos:line="315" pos:column="44">Forward</name></name><argument_list pos:line="315" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="316" pos:column="41">sc</name><op:operator pos:line="316" pos:column="43">.</op:operator><name pos:line="316" pos:column="44">ForwardSetState</name></name><argument_list pos:line="316" pos:column="59">(<argument><expr><name pos:line="316" pos:column="60">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="318" pos:column="33">break;</break>
			</case><case pos:line="319" pos:column="25">case <expr><name pos:line="319" pos:column="30">SCE_D_COMMENTDOC</name></expr>:
				<if pos:line="320" pos:column="33">if <condition pos:line="320" pos:column="36">(<expr><call><name><name pos:line="320" pos:column="37">sc</name><op:operator pos:line="320" pos:column="39">.</op:operator><name pos:line="320" pos:column="40">Match</name></name><argument_list pos:line="320" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="320" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="320" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="320" pos:column="56"> <block pos:line="320" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="321" pos:column="41">sc</name><op:operator pos:line="321" pos:column="43">.</op:operator><name pos:line="321" pos:column="44">Forward</name></name><argument_list pos:line="321" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="322" pos:column="41">sc</name><op:operator pos:line="322" pos:column="43">.</op:operator><name pos:line="322" pos:column="44">ForwardSetState</name></name><argument_list pos:line="322" pos:column="59">(<argument><expr><name pos:line="322" pos:column="60">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="323" pos:column="35">else <if pos:line="323" pos:column="40">if <condition pos:line="323" pos:column="43">(<expr><name><name pos:line="323" pos:column="44">sc</name><op:operator pos:line="323" pos:column="46">.</op:operator><name pos:line="323" pos:column="47">ch</name></name> <op:operator pos:line="323" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="323" pos:column="53">'@'</lit:literal> <op:operator pos:line="323" pos:column="57">||</op:operator> <name><name pos:line="323" pos:column="60">sc</name><op:operator pos:line="323" pos:column="62">.</op:operator><name pos:line="323" pos:column="63">ch</name></name> <op:operator pos:line="323" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="323" pos:column="69">'\\'</lit:literal></expr>)</condition><then pos:line="323" pos:column="74"> <block pos:line="323" pos:column="75">{ <comment type="line" pos:line="323" pos:column="77">// JavaDoc and Doxygen support</comment>
					<comment type="line" pos:line="324" pos:column="41">// Verify that we have the conditions to mark a comment-doc-keyword</comment>
					<if pos:line="325" pos:column="41">if <condition pos:line="325" pos:column="44">(<expr><op:operator pos:line="325" pos:column="45">(</op:operator><call><name pos:line="325" pos:column="46">IsASpace</name><argument_list pos:line="325" pos:column="54">(<argument><expr><name><name pos:line="325" pos:column="55">sc</name><op:operator pos:line="325" pos:column="57">.</op:operator><name pos:line="325" pos:column="58">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="325" pos:column="66">||</op:operator> <name><name pos:line="325" pos:column="69">sc</name><op:operator pos:line="325" pos:column="71">.</op:operator><name pos:line="325" pos:column="72">chPrev</name></name> <op:operator pos:line="325" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="325" pos:column="82">'*'</lit:literal><op:operator pos:line="325" pos:column="85">)</op:operator> <op:operator pos:line="325" pos:column="87">&amp;&amp;</op:operator> <op:operator pos:line="325" pos:column="90">(</op:operator><op:operator pos:line="325" pos:column="91">!</op:operator><call><name pos:line="325" pos:column="92">IsASpace</name><argument_list pos:line="325" pos:column="100">(<argument><expr><name><name pos:line="325" pos:column="101">sc</name><op:operator pos:line="325" pos:column="103">.</op:operator><name pos:line="325" pos:column="104">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="325" pos:column="111">)</op:operator></expr>)</condition><then pos:line="325" pos:column="113"> <block pos:line="325" pos:column="114">{
						<expr_stmt><expr><name pos:line="326" pos:column="49">styleBeforeDCKeyword</name> <op:operator pos:line="326" pos:column="70">=</op:operator> <name pos:line="326" pos:column="72">SCE_D_COMMENTDOC</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="327" pos:column="49">sc</name><op:operator pos:line="327" pos:column="51">.</op:operator><name pos:line="327" pos:column="52">SetState</name></name><argument_list pos:line="327" pos:column="60">(<argument><expr><name pos:line="327" pos:column="61">SCE_D_COMMENTDOCKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="330" pos:column="33">break;</break>
			</case><case pos:line="331" pos:column="25">case <expr><name pos:line="331" pos:column="30">SCE_D_COMMENTLINE</name></expr>:
				<if pos:line="332" pos:column="33">if <condition pos:line="332" pos:column="36">(<expr><name><name pos:line="332" pos:column="37">sc</name><op:operator pos:line="332" pos:column="39">.</op:operator><name pos:line="332" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="332" pos:column="52"> <block pos:line="332" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="333" pos:column="41">sc</name><op:operator pos:line="333" pos:column="43">.</op:operator><name pos:line="333" pos:column="44">SetState</name></name><argument_list pos:line="333" pos:column="52">(<argument><expr><name pos:line="333" pos:column="53">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="335" pos:column="33">break;</break>
			</case><case pos:line="336" pos:column="25">case <expr><name pos:line="336" pos:column="30">SCE_D_COMMENTLINEDOC</name></expr>:
				<if pos:line="337" pos:column="33">if <condition pos:line="337" pos:column="36">(<expr><name><name pos:line="337" pos:column="37">sc</name><op:operator pos:line="337" pos:column="39">.</op:operator><name pos:line="337" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="337" pos:column="52"> <block pos:line="337" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="338" pos:column="41">sc</name><op:operator pos:line="338" pos:column="43">.</op:operator><name pos:line="338" pos:column="44">SetState</name></name><argument_list pos:line="338" pos:column="52">(<argument><expr><name pos:line="338" pos:column="53">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="339" pos:column="35">else <if pos:line="339" pos:column="40">if <condition pos:line="339" pos:column="43">(<expr><name><name pos:line="339" pos:column="44">sc</name><op:operator pos:line="339" pos:column="46">.</op:operator><name pos:line="339" pos:column="47">ch</name></name> <op:operator pos:line="339" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="339" pos:column="53">'@'</lit:literal> <op:operator pos:line="339" pos:column="57">||</op:operator> <name><name pos:line="339" pos:column="60">sc</name><op:operator pos:line="339" pos:column="62">.</op:operator><name pos:line="339" pos:column="63">ch</name></name> <op:operator pos:line="339" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="339" pos:column="69">'\\'</lit:literal></expr>)</condition><then pos:line="339" pos:column="74"> <block pos:line="339" pos:column="75">{ <comment type="line" pos:line="339" pos:column="77">// JavaDoc and Doxygen support</comment>
					<comment type="line" pos:line="340" pos:column="41">// Verify that we have the conditions to mark a comment-doc-keyword</comment>
					<if pos:line="341" pos:column="41">if <condition pos:line="341" pos:column="44">(<expr><op:operator pos:line="341" pos:column="45">(</op:operator><call><name pos:line="341" pos:column="46">IsASpace</name><argument_list pos:line="341" pos:column="54">(<argument><expr><name><name pos:line="341" pos:column="55">sc</name><op:operator pos:line="341" pos:column="57">.</op:operator><name pos:line="341" pos:column="58">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="341" pos:column="66">||</op:operator> <name><name pos:line="341" pos:column="69">sc</name><op:operator pos:line="341" pos:column="71">.</op:operator><name pos:line="341" pos:column="72">chPrev</name></name> <op:operator pos:line="341" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="341" pos:column="82">'/'</lit:literal> <op:operator pos:line="341" pos:column="86">||</op:operator> <name><name pos:line="341" pos:column="89">sc</name><op:operator pos:line="341" pos:column="91">.</op:operator><name pos:line="341" pos:column="92">chPrev</name></name> <op:operator pos:line="341" pos:column="99">==</op:operator> <lit:literal type="char" pos:line="341" pos:column="102">'!'</lit:literal><op:operator pos:line="341" pos:column="105">)</op:operator> <op:operator pos:line="341" pos:column="107">&amp;&amp;</op:operator> <op:operator pos:line="341" pos:column="110">(</op:operator><op:operator pos:line="341" pos:column="111">!</op:operator><call><name pos:line="341" pos:column="112">IsASpace</name><argument_list pos:line="341" pos:column="120">(<argument><expr><name><name pos:line="341" pos:column="121">sc</name><op:operator pos:line="341" pos:column="123">.</op:operator><name pos:line="341" pos:column="124">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="341" pos:column="131">)</op:operator></expr>)</condition><then pos:line="341" pos:column="133"> <block pos:line="341" pos:column="134">{
						<expr_stmt><expr><name pos:line="342" pos:column="49">styleBeforeDCKeyword</name> <op:operator pos:line="342" pos:column="70">=</op:operator> <name pos:line="342" pos:column="72">SCE_D_COMMENTLINEDOC</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="343" pos:column="49">sc</name><op:operator pos:line="343" pos:column="51">.</op:operator><name pos:line="343" pos:column="52">SetState</name></name><argument_list pos:line="343" pos:column="60">(<argument><expr><name pos:line="343" pos:column="61">SCE_D_COMMENTDOCKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="346" pos:column="33">break;</break>
			</case><case pos:line="347" pos:column="25">case <expr><name pos:line="347" pos:column="30">SCE_D_COMMENTDOCKEYWORD</name></expr>:
				<if pos:line="348" pos:column="33">if <condition pos:line="348" pos:column="36">(<expr><op:operator pos:line="348" pos:column="37">(</op:operator><name pos:line="348" pos:column="38">styleBeforeDCKeyword</name> <op:operator pos:line="348" pos:column="59">==</op:operator> <name pos:line="348" pos:column="62">SCE_D_COMMENTDOC</name><op:operator pos:line="348" pos:column="78">)</op:operator> <op:operator pos:line="348" pos:column="80">&amp;&amp;</op:operator> <call><name><name pos:line="348" pos:column="83">sc</name><op:operator pos:line="348" pos:column="85">.</op:operator><name pos:line="348" pos:column="86">Match</name></name><argument_list pos:line="348" pos:column="91">(<argument><expr><lit:literal type="char" pos:line="348" pos:column="92">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="348" pos:column="97">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="348" pos:column="102"> <block pos:line="348" pos:column="103">{
					<expr_stmt><expr><call><name><name pos:line="349" pos:column="41">sc</name><op:operator pos:line="349" pos:column="43">.</op:operator><name pos:line="349" pos:column="44">ChangeState</name></name><argument_list pos:line="349" pos:column="55">(<argument><expr><name pos:line="349" pos:column="56">SCE_D_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="350" pos:column="41">sc</name><op:operator pos:line="350" pos:column="43">.</op:operator><name pos:line="350" pos:column="44">Forward</name></name><argument_list pos:line="350" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="351" pos:column="41">sc</name><op:operator pos:line="351" pos:column="43">.</op:operator><name pos:line="351" pos:column="44">ForwardSetState</name></name><argument_list pos:line="351" pos:column="59">(<argument><expr><name pos:line="351" pos:column="60">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="352" pos:column="35">else <if pos:line="352" pos:column="40">if <condition pos:line="352" pos:column="43">(<expr><op:operator pos:line="352" pos:column="44">!</op:operator><call><name pos:line="352" pos:column="45">IsDoxygen</name><argument_list pos:line="352" pos:column="54">(<argument><expr><name><name pos:line="352" pos:column="55">sc</name><op:operator pos:line="352" pos:column="57">.</op:operator><name pos:line="352" pos:column="58">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="352" pos:column="62"> <block pos:line="352" pos:column="63">{
					<decl_stmt><decl><type><name pos:line="353" pos:column="41">char</name></type> <name><name pos:line="353" pos:column="46">s</name><index pos:line="353" pos:column="47">[<expr><lit:literal type="number" pos:line="353" pos:column="48">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<if pos:line="354" pos:column="41">if <condition pos:line="354" pos:column="44">(<expr><name pos:line="354" pos:column="45">caseSensitive</name></expr>)</condition><then pos:line="354" pos:column="59"> <block pos:line="354" pos:column="60">{
						<expr_stmt><expr><call><name><name pos:line="355" pos:column="49">sc</name><op:operator pos:line="355" pos:column="51">.</op:operator><name pos:line="355" pos:column="52">GetCurrent</name></name><argument_list pos:line="355" pos:column="62">(<argument><expr><name pos:line="355" pos:column="63">s</name></expr></argument>, <argument><expr><sizeof pos:line="355" pos:column="66">sizeof<argument_list pos:line="355" pos:column="72">(<argument><expr><name pos:line="355" pos:column="73">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="356" pos:column="43">else <block pos:line="356" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="357" pos:column="49">sc</name><op:operator pos:line="357" pos:column="51">.</op:operator><name pos:line="357" pos:column="52">GetCurrentLowered</name></name><argument_list pos:line="357" pos:column="69">(<argument><expr><name pos:line="357" pos:column="70">s</name></expr></argument>, <argument><expr><sizeof pos:line="357" pos:column="73">sizeof<argument_list pos:line="357" pos:column="79">(<argument><expr><name pos:line="357" pos:column="80">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<if pos:line="359" pos:column="41">if <condition pos:line="359" pos:column="44">(<expr><op:operator pos:line="359" pos:column="45">!</op:operator><call><name pos:line="359" pos:column="46">IsASpace</name><argument_list pos:line="359" pos:column="54">(<argument><expr><name><name pos:line="359" pos:column="55">sc</name><op:operator pos:line="359" pos:column="57">.</op:operator><name pos:line="359" pos:column="58">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="359" pos:column="62">||</op:operator> <op:operator pos:line="359" pos:column="65">!</op:operator><call><name><name pos:line="359" pos:column="66">keywords3</name><op:operator pos:line="359" pos:column="75">.</op:operator><name pos:line="359" pos:column="76">InList</name></name><argument_list pos:line="359" pos:column="82">(<argument><expr><name pos:line="359" pos:column="83">s</name> <op:operator pos:line="359" pos:column="85">+</op:operator> <lit:literal type="number" pos:line="359" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="359" pos:column="90"> <block pos:line="359" pos:column="91">{
						<expr_stmt><expr><call><name><name pos:line="360" pos:column="49">sc</name><op:operator pos:line="360" pos:column="51">.</op:operator><name pos:line="360" pos:column="52">ChangeState</name></name><argument_list pos:line="360" pos:column="63">(<argument><expr><name pos:line="360" pos:column="64">SCE_D_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name pos:line="362" pos:column="41">sc</name><op:operator pos:line="362" pos:column="43">.</op:operator><name pos:line="362" pos:column="44">SetState</name></name><argument_list pos:line="362" pos:column="52">(<argument><expr><name pos:line="362" pos:column="53">styleBeforeDCKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="364" pos:column="33">break;</break>
			</case><case pos:line="365" pos:column="25">case <expr><name pos:line="365" pos:column="30">SCE_D_COMMENTNESTED</name></expr>:
				<if pos:line="366" pos:column="33">if <condition pos:line="366" pos:column="36">(<expr><call><name><name pos:line="366" pos:column="37">sc</name><op:operator pos:line="366" pos:column="39">.</op:operator><name pos:line="366" pos:column="40">Match</name></name><argument_list pos:line="366" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="366" pos:column="46">'+'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="366" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="366" pos:column="56"> <block pos:line="366" pos:column="57">{
					<if pos:line="367" pos:column="41">if <condition pos:line="367" pos:column="44">(<expr><name pos:line="367" pos:column="45">curNcLevel</name> <op:operator pos:line="367" pos:column="56">&gt;</op:operator> <lit:literal type="number" pos:line="367" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="367" pos:column="60">
						<expr_stmt><expr><name pos:line="368" pos:column="49">curNcLevel</name> <op:operator pos:line="368" pos:column="60">-=</op:operator> <lit:literal type="number" pos:line="368" pos:column="63">1</lit:literal></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><name pos:line="369" pos:column="41">curLine</name> <op:operator pos:line="369" pos:column="49">=</op:operator> <call><name><name pos:line="369" pos:column="51">styler</name><op:operator pos:line="369" pos:column="57">.</op:operator><name pos:line="369" pos:column="58">GetLine</name></name><argument_list pos:line="369" pos:column="65">(<argument><expr><name><name pos:line="369" pos:column="66">sc</name><op:operator pos:line="369" pos:column="68">.</op:operator><name pos:line="369" pos:column="69">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="370" pos:column="41">styler</name><op:operator pos:line="370" pos:column="47">.</op:operator><name pos:line="370" pos:column="48">SetLineState</name></name><argument_list pos:line="370" pos:column="60">(<argument><expr><name pos:line="370" pos:column="61">curLine</name></expr></argument>, <argument><expr><name pos:line="370" pos:column="70">curNcLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="371" pos:column="41">sc</name><op:operator pos:line="371" pos:column="43">.</op:operator><name pos:line="371" pos:column="44">Forward</name></name><argument_list pos:line="371" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="372" pos:column="41">if <condition pos:line="372" pos:column="44">(<expr><name pos:line="372" pos:column="45">curNcLevel</name> <op:operator pos:line="372" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="372" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="372" pos:column="61"> <block pos:line="372" pos:column="62">{
						<expr_stmt><expr><call><name><name pos:line="373" pos:column="49">sc</name><op:operator pos:line="373" pos:column="51">.</op:operator><name pos:line="373" pos:column="52">ForwardSetState</name></name><argument_list pos:line="373" pos:column="67">(<argument><expr><name pos:line="373" pos:column="68">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="375" pos:column="35">else <if pos:line="375" pos:column="40">if <condition pos:line="375" pos:column="43">(<expr><call><name><name pos:line="375" pos:column="44">sc</name><op:operator pos:line="375" pos:column="46">.</op:operator><name pos:line="375" pos:column="47">Match</name></name><argument_list pos:line="375" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="375" pos:column="53">'/'</lit:literal></expr></argument>,<argument><expr><lit:literal type="char" pos:line="375" pos:column="57">'+'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="375" pos:column="62"> <block pos:line="375" pos:column="63">{
					<expr_stmt><expr><name pos:line="376" pos:column="41">curNcLevel</name> <op:operator pos:line="376" pos:column="52">+=</op:operator> <lit:literal type="number" pos:line="376" pos:column="55">1</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="377" pos:column="41">curLine</name> <op:operator pos:line="377" pos:column="49">=</op:operator> <call><name><name pos:line="377" pos:column="51">styler</name><op:operator pos:line="377" pos:column="57">.</op:operator><name pos:line="377" pos:column="58">GetLine</name></name><argument_list pos:line="377" pos:column="65">(<argument><expr><name><name pos:line="377" pos:column="66">sc</name><op:operator pos:line="377" pos:column="68">.</op:operator><name pos:line="377" pos:column="69">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="378" pos:column="41">styler</name><op:operator pos:line="378" pos:column="47">.</op:operator><name pos:line="378" pos:column="48">SetLineState</name></name><argument_list pos:line="378" pos:column="60">(<argument><expr><name pos:line="378" pos:column="61">curLine</name></expr></argument>, <argument><expr><name pos:line="378" pos:column="70">curNcLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="379" pos:column="41">sc</name><op:operator pos:line="379" pos:column="43">.</op:operator><name pos:line="379" pos:column="44">Forward</name></name><argument_list pos:line="379" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="381" pos:column="33">break;</break>
			</case><case pos:line="382" pos:column="25">case <expr><name pos:line="382" pos:column="30">SCE_D_STRING</name></expr>:
				<if pos:line="383" pos:column="33">if <condition pos:line="383" pos:column="36">(<expr><name><name pos:line="383" pos:column="37">sc</name><op:operator pos:line="383" pos:column="39">.</op:operator><name pos:line="383" pos:column="40">ch</name></name> <op:operator pos:line="383" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="383" pos:column="46">'\\'</lit:literal></expr>)</condition><then pos:line="383" pos:column="51"> <block pos:line="383" pos:column="52">{
					<if pos:line="384" pos:column="41">if <condition pos:line="384" pos:column="44">(<expr><name><name pos:line="384" pos:column="45">sc</name><op:operator pos:line="384" pos:column="47">.</op:operator><name pos:line="384" pos:column="48">chNext</name></name> <op:operator pos:line="384" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="384" pos:column="58">'"'</lit:literal> <op:operator pos:line="384" pos:column="62">||</op:operator> <name><name pos:line="384" pos:column="65">sc</name><op:operator pos:line="384" pos:column="67">.</op:operator><name pos:line="384" pos:column="68">chNext</name></name> <op:operator pos:line="384" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="384" pos:column="78">'\\'</lit:literal></expr>)</condition><then pos:line="384" pos:column="83"> <block pos:line="384" pos:column="84">{
						<expr_stmt><expr><call><name><name pos:line="385" pos:column="49">sc</name><op:operator pos:line="385" pos:column="51">.</op:operator><name pos:line="385" pos:column="52">Forward</name></name><argument_list pos:line="385" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="387" pos:column="35">else <if pos:line="387" pos:column="40">if <condition pos:line="387" pos:column="43">(<expr><name><name pos:line="387" pos:column="44">sc</name><op:operator pos:line="387" pos:column="46">.</op:operator><name pos:line="387" pos:column="47">ch</name></name> <op:operator pos:line="387" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="387" pos:column="53">'"'</lit:literal></expr>)</condition><then pos:line="387" pos:column="57"> <block pos:line="387" pos:column="58">{
					<if pos:line="388" pos:column="41">if<condition pos:line="388" pos:column="43">(<expr><call><name pos:line="388" pos:column="44">IsStringSuffix</name><argument_list pos:line="388" pos:column="58">(<argument><expr><name><name pos:line="388" pos:column="59">sc</name><op:operator pos:line="388" pos:column="61">.</op:operator><name pos:line="388" pos:column="62">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="388" pos:column="70">
						<expr_stmt><expr><call><name><name pos:line="389" pos:column="49">sc</name><op:operator pos:line="389" pos:column="51">.</op:operator><name pos:line="389" pos:column="52">Forward</name></name><argument_list pos:line="389" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><call><name><name pos:line="390" pos:column="41">sc</name><op:operator pos:line="390" pos:column="43">.</op:operator><name pos:line="390" pos:column="44">ForwardSetState</name></name><argument_list pos:line="390" pos:column="59">(<argument><expr><name pos:line="390" pos:column="60">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="392" pos:column="33">break;</break>
			</case><case pos:line="393" pos:column="25">case <expr><name pos:line="393" pos:column="30">SCE_D_CHARACTER</name></expr>:
				<if pos:line="394" pos:column="33">if <condition pos:line="394" pos:column="36">(<expr><name><name pos:line="394" pos:column="37">sc</name><op:operator pos:line="394" pos:column="39">.</op:operator><name pos:line="394" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="394" pos:column="50"> <block pos:line="394" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="395" pos:column="41">sc</name><op:operator pos:line="395" pos:column="43">.</op:operator><name pos:line="395" pos:column="44">ChangeState</name></name><argument_list pos:line="395" pos:column="55">(<argument><expr><name pos:line="395" pos:column="56">SCE_D_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="396" pos:column="35">else <if pos:line="396" pos:column="40">if <condition pos:line="396" pos:column="43">(<expr><name><name pos:line="396" pos:column="44">sc</name><op:operator pos:line="396" pos:column="46">.</op:operator><name pos:line="396" pos:column="47">ch</name></name> <op:operator pos:line="396" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="396" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="396" pos:column="58"> <block pos:line="396" pos:column="59">{
					<if pos:line="397" pos:column="41">if <condition pos:line="397" pos:column="44">(<expr><name><name pos:line="397" pos:column="45">sc</name><op:operator pos:line="397" pos:column="47">.</op:operator><name pos:line="397" pos:column="48">chNext</name></name> <op:operator pos:line="397" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="397" pos:column="58">'\''</lit:literal> <op:operator pos:line="397" pos:column="63">||</op:operator> <name><name pos:line="397" pos:column="66">sc</name><op:operator pos:line="397" pos:column="68">.</op:operator><name pos:line="397" pos:column="69">chNext</name></name> <op:operator pos:line="397" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="397" pos:column="79">'\\'</lit:literal></expr>)</condition><then pos:line="397" pos:column="84"> <block pos:line="397" pos:column="85">{
						<expr_stmt><expr><call><name><name pos:line="398" pos:column="49">sc</name><op:operator pos:line="398" pos:column="51">.</op:operator><name pos:line="398" pos:column="52">Forward</name></name><argument_list pos:line="398" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="400" pos:column="35">else <if pos:line="400" pos:column="40">if <condition pos:line="400" pos:column="43">(<expr><name><name pos:line="400" pos:column="44">sc</name><op:operator pos:line="400" pos:column="46">.</op:operator><name pos:line="400" pos:column="47">ch</name></name> <op:operator pos:line="400" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="400" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="400" pos:column="58"> <block pos:line="400" pos:column="59">{
					<comment type="line" pos:line="401" pos:column="41">// Char has no suffixes</comment>
					<expr_stmt><expr><call><name><name pos:line="402" pos:column="41">sc</name><op:operator pos:line="402" pos:column="43">.</op:operator><name pos:line="402" pos:column="44">ForwardSetState</name></name><argument_list pos:line="402" pos:column="59">(<argument><expr><name pos:line="402" pos:column="60">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="404" pos:column="33">break;</break>
			</case><case pos:line="405" pos:column="25">case <expr><name pos:line="405" pos:column="30">SCE_D_STRINGEOL</name></expr>:
				<if pos:line="406" pos:column="33">if <condition pos:line="406" pos:column="36">(<expr><name><name pos:line="406" pos:column="37">sc</name><op:operator pos:line="406" pos:column="39">.</op:operator><name pos:line="406" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="406" pos:column="52"> <block pos:line="406" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="407" pos:column="41">sc</name><op:operator pos:line="407" pos:column="43">.</op:operator><name pos:line="407" pos:column="44">SetState</name></name><argument_list pos:line="407" pos:column="52">(<argument><expr><name pos:line="407" pos:column="53">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="409" pos:column="33">break;</break>
			</case><case pos:line="410" pos:column="25">case <expr><name pos:line="410" pos:column="30">SCE_D_STRINGB</name></expr>:
				<if pos:line="411" pos:column="33">if <condition pos:line="411" pos:column="36">(<expr><name><name pos:line="411" pos:column="37">sc</name><op:operator pos:line="411" pos:column="39">.</op:operator><name pos:line="411" pos:column="40">ch</name></name> <op:operator pos:line="411" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="411" pos:column="46">'`'</lit:literal></expr>)</condition><then pos:line="411" pos:column="50"> <block pos:line="411" pos:column="51">{
					<if pos:line="412" pos:column="41">if<condition pos:line="412" pos:column="43">(<expr><call><name pos:line="412" pos:column="44">IsStringSuffix</name><argument_list pos:line="412" pos:column="58">(<argument><expr><name><name pos:line="412" pos:column="59">sc</name><op:operator pos:line="412" pos:column="61">.</op:operator><name pos:line="412" pos:column="62">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="412" pos:column="70">
						<expr_stmt><expr><call><name><name pos:line="413" pos:column="49">sc</name><op:operator pos:line="413" pos:column="51">.</op:operator><name pos:line="413" pos:column="52">Forward</name></name><argument_list pos:line="413" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><call><name><name pos:line="414" pos:column="41">sc</name><op:operator pos:line="414" pos:column="43">.</op:operator><name pos:line="414" pos:column="44">ForwardSetState</name></name><argument_list pos:line="414" pos:column="59">(<argument><expr><name pos:line="414" pos:column="60">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="416" pos:column="33">break;</break>
			</case><case pos:line="417" pos:column="25">case <expr><name pos:line="417" pos:column="30">SCE_D_STRINGR</name></expr>:
				<if pos:line="418" pos:column="33">if <condition pos:line="418" pos:column="36">(<expr><name><name pos:line="418" pos:column="37">sc</name><op:operator pos:line="418" pos:column="39">.</op:operator><name pos:line="418" pos:column="40">ch</name></name> <op:operator pos:line="418" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="418" pos:column="46">'"'</lit:literal></expr>)</condition><then pos:line="418" pos:column="50"> <block pos:line="418" pos:column="51">{
					<if pos:line="419" pos:column="41">if<condition pos:line="419" pos:column="43">(<expr><call><name pos:line="419" pos:column="44">IsStringSuffix</name><argument_list pos:line="419" pos:column="58">(<argument><expr><name><name pos:line="419" pos:column="59">sc</name><op:operator pos:line="419" pos:column="61">.</op:operator><name pos:line="419" pos:column="62">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="419" pos:column="70">
						<expr_stmt><expr><call><name><name pos:line="420" pos:column="49">sc</name><op:operator pos:line="420" pos:column="51">.</op:operator><name pos:line="420" pos:column="52">Forward</name></name><argument_list pos:line="420" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><call><name><name pos:line="421" pos:column="41">sc</name><op:operator pos:line="421" pos:column="43">.</op:operator><name pos:line="421" pos:column="44">ForwardSetState</name></name><argument_list pos:line="421" pos:column="59">(<argument><expr><name pos:line="421" pos:column="60">SCE_D_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="423" pos:column="33">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="426" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="427" pos:column="17">if <condition pos:line="427" pos:column="20">(<expr><name><name pos:line="427" pos:column="21">sc</name><op:operator pos:line="427" pos:column="23">.</op:operator><name pos:line="427" pos:column="24">state</name></name> <op:operator pos:line="427" pos:column="30">==</op:operator> <name pos:line="427" pos:column="33">SCE_D_DEFAULT</name></expr>)</condition><then pos:line="427" pos:column="47"> <block pos:line="427" pos:column="48">{
			<if pos:line="428" pos:column="25">if <condition pos:line="428" pos:column="28">(<expr><call><name pos:line="428" pos:column="29">IsADigit</name><argument_list pos:line="428" pos:column="37">(<argument><expr><name><name pos:line="428" pos:column="38">sc</name><op:operator pos:line="428" pos:column="40">.</op:operator><name pos:line="428" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="428" pos:column="45">||</op:operator> <op:operator pos:line="428" pos:column="48">(</op:operator><name><name pos:line="428" pos:column="49">sc</name><op:operator pos:line="428" pos:column="51">.</op:operator><name pos:line="428" pos:column="52">ch</name></name> <op:operator pos:line="428" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="428" pos:column="58">'.'</lit:literal> <op:operator pos:line="428" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="428" pos:column="65">IsADigit</name><argument_list pos:line="428" pos:column="73">(<argument><expr><name><name pos:line="428" pos:column="74">sc</name><op:operator pos:line="428" pos:column="76">.</op:operator><name pos:line="428" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="428" pos:column="84">)</op:operator></expr>)</condition><then pos:line="428" pos:column="86"> <block pos:line="428" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="429" pos:column="33">sc</name><op:operator pos:line="429" pos:column="35">.</op:operator><name pos:line="429" pos:column="36">SetState</name></name><argument_list pos:line="429" pos:column="44">(<argument><expr><name pos:line="429" pos:column="45">SCE_D_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="430" pos:column="33">numFloat</name> <op:operator pos:line="430" pos:column="42">=</op:operator> <name><name pos:line="430" pos:column="44">sc</name><op:operator pos:line="430" pos:column="46">.</op:operator><name pos:line="430" pos:column="47">ch</name></name> <op:operator pos:line="430" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="430" pos:column="53">'.'</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="431" pos:column="33">// Remember hex literal</comment>
				<expr_stmt><expr><name pos:line="432" pos:column="33">numHex</name> <op:operator pos:line="432" pos:column="40">=</op:operator> <name><name pos:line="432" pos:column="42">sc</name><op:operator pos:line="432" pos:column="44">.</op:operator><name pos:line="432" pos:column="45">ch</name></name> <op:operator pos:line="432" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="432" pos:column="51">'0'</lit:literal> <op:operator pos:line="432" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="432" pos:column="58">(</op:operator> <name><name pos:line="432" pos:column="60">sc</name><op:operator pos:line="432" pos:column="62">.</op:operator><name pos:line="432" pos:column="63">chNext</name></name> <op:operator pos:line="432" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="432" pos:column="73">'x'</lit:literal> <op:operator pos:line="432" pos:column="77">||</op:operator> <name><name pos:line="432" pos:column="80">sc</name><op:operator pos:line="432" pos:column="82">.</op:operator><name pos:line="432" pos:column="83">chNext</name></name> <op:operator pos:line="432" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="432" pos:column="93">'X'</lit:literal> <op:operator pos:line="432" pos:column="97">)</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="433" pos:column="27">else <if pos:line="433" pos:column="32">if <condition pos:line="433" pos:column="35">( <expr><op:operator pos:line="433" pos:column="37">(</op:operator><name><name pos:line="433" pos:column="38">sc</name><op:operator pos:line="433" pos:column="40">.</op:operator><name pos:line="433" pos:column="41">ch</name></name> <op:operator pos:line="433" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="433" pos:column="47">'r'</lit:literal> <op:operator pos:line="433" pos:column="51">||</op:operator> <name><name pos:line="433" pos:column="54">sc</name><op:operator pos:line="433" pos:column="56">.</op:operator><name pos:line="433" pos:column="57">ch</name></name> <op:operator pos:line="433" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="433" pos:column="63">'x'</lit:literal> <op:operator pos:line="433" pos:column="67">||</op:operator> <name><name pos:line="433" pos:column="70">sc</name><op:operator pos:line="433" pos:column="72">.</op:operator><name pos:line="433" pos:column="73">ch</name></name> <op:operator pos:line="433" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="433" pos:column="79">'q'</lit:literal><op:operator pos:line="433" pos:column="82">)</op:operator>
				<op:operator pos:line="434" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="434" pos:column="36">sc</name><op:operator pos:line="434" pos:column="38">.</op:operator><name pos:line="434" pos:column="39">chNext</name></name> <op:operator pos:line="434" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="434" pos:column="49">'"'</lit:literal></expr> )</condition><then pos:line="434" pos:column="54"> <block pos:line="434" pos:column="55">{
				<comment type="line" pos:line="435" pos:column="33">// Limited support for hex and delimited strings: parse as r""</comment>
				<expr_stmt><expr><call><name><name pos:line="436" pos:column="33">sc</name><op:operator pos:line="436" pos:column="35">.</op:operator><name pos:line="436" pos:column="36">SetState</name></name><argument_list pos:line="436" pos:column="44">(<argument><expr><name pos:line="436" pos:column="45">SCE_D_STRINGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="437" pos:column="33">sc</name><op:operator pos:line="437" pos:column="35">.</op:operator><name pos:line="437" pos:column="36">Forward</name></name><argument_list pos:line="437" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="438" pos:column="27">else <if pos:line="438" pos:column="32">if <condition pos:line="438" pos:column="35">(<expr><call><name pos:line="438" pos:column="36">IsWordStart</name><argument_list pos:line="438" pos:column="47">(<argument><expr><name><name pos:line="438" pos:column="48">sc</name><op:operator pos:line="438" pos:column="50">.</op:operator><name pos:line="438" pos:column="51">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="438" pos:column="55">||</op:operator> <name><name pos:line="438" pos:column="58">sc</name><op:operator pos:line="438" pos:column="60">.</op:operator><name pos:line="438" pos:column="61">ch</name></name> <op:operator pos:line="438" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="438" pos:column="67">'$'</lit:literal></expr>)</condition><then pos:line="438" pos:column="71"> <block pos:line="438" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="439" pos:column="33">sc</name><op:operator pos:line="439" pos:column="35">.</op:operator><name pos:line="439" pos:column="36">SetState</name></name><argument_list pos:line="439" pos:column="44">(<argument><expr><name pos:line="439" pos:column="45">SCE_D_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="440" pos:column="27">else <if pos:line="440" pos:column="32">if <condition pos:line="440" pos:column="35">(<expr><call><name><name pos:line="440" pos:column="36">sc</name><op:operator pos:line="440" pos:column="38">.</op:operator><name pos:line="440" pos:column="39">Match</name></name><argument_list pos:line="440" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="440" pos:column="45">'/'</lit:literal></expr></argument>,<argument><expr><lit:literal type="char" pos:line="440" pos:column="49">'+'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="440" pos:column="54"> <block pos:line="440" pos:column="55">{
				<expr_stmt><expr><name pos:line="441" pos:column="33">curNcLevel</name> <op:operator pos:line="441" pos:column="44">+=</op:operator> <lit:literal type="number" pos:line="441" pos:column="47">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="442" pos:column="33">curLine</name> <op:operator pos:line="442" pos:column="41">=</op:operator> <call><name><name pos:line="442" pos:column="43">styler</name><op:operator pos:line="442" pos:column="49">.</op:operator><name pos:line="442" pos:column="50">GetLine</name></name><argument_list pos:line="442" pos:column="57">(<argument><expr><name><name pos:line="442" pos:column="58">sc</name><op:operator pos:line="442" pos:column="60">.</op:operator><name pos:line="442" pos:column="61">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="443" pos:column="33">styler</name><op:operator pos:line="443" pos:column="39">.</op:operator><name pos:line="443" pos:column="40">SetLineState</name></name><argument_list pos:line="443" pos:column="52">(<argument><expr><name pos:line="443" pos:column="53">curLine</name></expr></argument>, <argument><expr><name pos:line="443" pos:column="62">curNcLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="444" pos:column="33">sc</name><op:operator pos:line="444" pos:column="35">.</op:operator><name pos:line="444" pos:column="36">SetState</name></name><argument_list pos:line="444" pos:column="44">(<argument><expr><name pos:line="444" pos:column="45">SCE_D_COMMENTNESTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="445" pos:column="33">sc</name><op:operator pos:line="445" pos:column="35">.</op:operator><name pos:line="445" pos:column="36">Forward</name></name><argument_list pos:line="445" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="446" pos:column="27">else <if pos:line="446" pos:column="32">if <condition pos:line="446" pos:column="35">(<expr><call><name><name pos:line="446" pos:column="36">sc</name><op:operator pos:line="446" pos:column="38">.</op:operator><name pos:line="446" pos:column="39">Match</name></name><argument_list pos:line="446" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="446" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="446" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="446" pos:column="55"> <block pos:line="446" pos:column="56">{
				<if pos:line="447" pos:column="33">if <condition pos:line="447" pos:column="36">(<expr><call><name><name pos:line="447" pos:column="37">sc</name><op:operator pos:line="447" pos:column="39">.</op:operator><name pos:line="447" pos:column="40">Match</name></name><argument_list pos:line="447" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="447" pos:column="46">"/**"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="447" pos:column="53">||</op:operator> <call><name><name pos:line="447" pos:column="56">sc</name><op:operator pos:line="447" pos:column="58">.</op:operator><name pos:line="447" pos:column="59">Match</name></name><argument_list pos:line="447" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="447" pos:column="65">"/*!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="447" pos:column="72"> <block pos:line="447" pos:column="73">{   <comment type="line" pos:line="447" pos:column="77">// Support of Qt/Doxygen doc. style</comment>
					<expr_stmt><expr><call><name><name pos:line="448" pos:column="41">sc</name><op:operator pos:line="448" pos:column="43">.</op:operator><name pos:line="448" pos:column="44">SetState</name></name><argument_list pos:line="448" pos:column="52">(<argument><expr><name pos:line="448" pos:column="53">SCE_D_COMMENTDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="449" pos:column="35">else <block pos:line="449" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="450" pos:column="41">sc</name><op:operator pos:line="450" pos:column="43">.</op:operator><name pos:line="450" pos:column="44">SetState</name></name><argument_list pos:line="450" pos:column="52">(<argument><expr><name pos:line="450" pos:column="53">SCE_D_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name pos:line="452" pos:column="33">sc</name><op:operator pos:line="452" pos:column="35">.</op:operator><name pos:line="452" pos:column="36">Forward</name></name><argument_list pos:line="452" pos:column="43">()</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:line="452" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> <else pos:line="453" pos:column="27">else <if pos:line="453" pos:column="32">if <condition pos:line="453" pos:column="35">(<expr><call><name><name pos:line="453" pos:column="36">sc</name><op:operator pos:line="453" pos:column="38">.</op:operator><name pos:line="453" pos:column="39">Match</name></name><argument_list pos:line="453" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="453" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="453" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="453" pos:column="55"> <block pos:line="453" pos:column="56">{
				<if pos:line="454" pos:column="33">if <condition pos:line="454" pos:column="36">(<expr><op:operator pos:line="454" pos:column="37">(</op:operator><call><name><name pos:line="454" pos:column="38">sc</name><op:operator pos:line="454" pos:column="40">.</op:operator><name pos:line="454" pos:column="41">Match</name></name><argument_list pos:line="454" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="454" pos:column="47">"///"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="454" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="454" pos:column="57">!</op:operator><call><name><name pos:line="454" pos:column="58">sc</name><op:operator pos:line="454" pos:column="60">.</op:operator><name pos:line="454" pos:column="61">Match</name></name><argument_list pos:line="454" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="454" pos:column="67">"////"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="454" pos:column="74">)</op:operator> <op:operator pos:line="454" pos:column="76">||</op:operator> <call><name><name pos:line="454" pos:column="79">sc</name><op:operator pos:line="454" pos:column="81">.</op:operator><name pos:line="454" pos:column="82">Match</name></name><argument_list pos:line="454" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="454" pos:column="88">"//!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="454" pos:column="95">
					<comment type="line" pos:line="455" pos:column="41">// Support of Qt/Doxygen doc. style</comment>
					<expr_stmt><expr><call><name><name pos:line="456" pos:column="41">sc</name><op:operator pos:line="456" pos:column="43">.</op:operator><name pos:line="456" pos:column="44">SetState</name></name><argument_list pos:line="456" pos:column="52">(<argument><expr><name pos:line="456" pos:column="53">SCE_D_COMMENTLINEDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="457" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="458" pos:column="41">sc</name><op:operator pos:line="458" pos:column="43">.</op:operator><name pos:line="458" pos:column="44">SetState</name></name><argument_list pos:line="458" pos:column="52">(<argument><expr><name pos:line="458" pos:column="53">SCE_D_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then> <else pos:line="459" pos:column="27">else <if pos:line="459" pos:column="32">if <condition pos:line="459" pos:column="35">(<expr><name><name pos:line="459" pos:column="36">sc</name><op:operator pos:line="459" pos:column="38">.</op:operator><name pos:line="459" pos:column="39">ch</name></name> <op:operator pos:line="459" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="459" pos:column="45">'"'</lit:literal></expr>)</condition><then pos:line="459" pos:column="49"> <block pos:line="459" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="460" pos:column="33">sc</name><op:operator pos:line="460" pos:column="35">.</op:operator><name pos:line="460" pos:column="36">SetState</name></name><argument_list pos:line="460" pos:column="44">(<argument><expr><name pos:line="460" pos:column="45">SCE_D_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="461" pos:column="27">else <if pos:line="461" pos:column="32">if <condition pos:line="461" pos:column="35">(<expr><name><name pos:line="461" pos:column="36">sc</name><op:operator pos:line="461" pos:column="38">.</op:operator><name pos:line="461" pos:column="39">ch</name></name> <op:operator pos:line="461" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="461" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="461" pos:column="50"> <block pos:line="461" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="462" pos:column="33">sc</name><op:operator pos:line="462" pos:column="35">.</op:operator><name pos:line="462" pos:column="36">SetState</name></name><argument_list pos:line="462" pos:column="44">(<argument><expr><name pos:line="462" pos:column="45">SCE_D_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="463" pos:column="27">else <if pos:line="463" pos:column="32">if <condition pos:line="463" pos:column="35">(<expr><name><name pos:line="463" pos:column="36">sc</name><op:operator pos:line="463" pos:column="38">.</op:operator><name pos:line="463" pos:column="39">ch</name></name> <op:operator pos:line="463" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="463" pos:column="45">'`'</lit:literal></expr>)</condition><then pos:line="463" pos:column="49"> <block pos:line="463" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="464" pos:column="33">sc</name><op:operator pos:line="464" pos:column="35">.</op:operator><name pos:line="464" pos:column="36">SetState</name></name><argument_list pos:line="464" pos:column="44">(<argument><expr><name pos:line="464" pos:column="45">SCE_D_STRINGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="465" pos:column="27">else <if pos:line="465" pos:column="32">if <condition pos:line="465" pos:column="35">(<expr><call><name pos:line="465" pos:column="36">isoperator</name><argument_list pos:line="465" pos:column="46">(<argument><expr><call><name><name pos:line="465" pos:column="47">static_cast</name><argument_list pos:line="465" pos:column="58">&lt;<argument><expr><name pos:line="465" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="465" pos:column="64">(<argument><expr><name><name pos:line="465" pos:column="65">sc</name><op:operator pos:line="465" pos:column="67">.</op:operator><name pos:line="465" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="465" pos:column="73"> <block pos:line="465" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="466" pos:column="33">sc</name><op:operator pos:line="466" pos:column="35">.</op:operator><name pos:line="466" pos:column="36">SetState</name></name><argument_list pos:line="466" pos:column="44">(<argument><expr><name pos:line="466" pos:column="45">SCE_D_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="467" pos:column="33">if <condition pos:line="467" pos:column="36">(<expr><name><name pos:line="467" pos:column="37">sc</name><op:operator pos:line="467" pos:column="39">.</op:operator><name pos:line="467" pos:column="40">ch</name></name> <op:operator pos:line="467" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="467" pos:column="46">'.'</lit:literal> <op:operator pos:line="467" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="467" pos:column="53">sc</name><op:operator pos:line="467" pos:column="55">.</op:operator><name pos:line="467" pos:column="56">chNext</name></name> <op:operator pos:line="467" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="467" pos:column="66">'.'</lit:literal></expr>)</condition><then pos:line="467" pos:column="70"> <expr_stmt><expr><call><name><name pos:line="467" pos:column="71">sc</name><op:operator pos:line="467" pos:column="73">.</op:operator><name pos:line="467" pos:column="74">Forward</name></name><argument_list pos:line="467" pos:column="81">()</argument_list></call></expr>;</expr_stmt></then></if> <comment type="line" pos:line="467" pos:column="85">// Range operator</comment>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="471" pos:column="9">sc</name><op:operator pos:line="471" pos:column="11">.</op:operator><name pos:line="471" pos:column="12">Complete</name></name><argument_list pos:line="471" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="474" pos:column="1">// Store both the current line's fold level and the next lines in the</comment>
<comment type="line" pos:line="475" pos:column="1">// level store to make it easy to pick up with each increment</comment>
<comment type="line" pos:line="476" pos:column="1">// and to make it possible to fiddle the current level for "} else {".</comment>

<function><type><name pos:line="478" pos:column="1">void</name> <name pos:line="478" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="478" pos:column="17">LexerD</name><op:operator pos:line="478" pos:column="23">::</op:operator><name pos:line="478" pos:column="25">Fold</name></name><parameter_list pos:line="478" pos:column="29">(<param><decl><type><name pos:line="478" pos:column="30">unsigned</name> <name pos:line="478" pos:column="39">int</name></type> <name pos:line="478" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="478" pos:column="53">int</name></type> <name pos:line="478" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="478" pos:column="65">int</name></type> <name pos:line="478" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="478" pos:column="80">IDocument</name> <type:modifier pos:line="478" pos:column="90">*</type:modifier></type><name pos:line="478" pos:column="91">pAccess</name></decl></param>)</parameter_list> <block pos:line="478" pos:column="100">{

	<if pos:line="480" pos:column="9">if <condition pos:line="480" pos:column="12">(<expr><op:operator pos:line="480" pos:column="13">!</op:operator><name><name pos:line="480" pos:column="14">options</name><op:operator pos:line="480" pos:column="21">.</op:operator><name pos:line="480" pos:column="22">fold</name></name></expr>)</condition><then pos:line="480" pos:column="27">
		<return pos:line="481" pos:column="17">return;</return></then></if>

	<function_decl><type><name pos:line="483" pos:column="9">LexAccessor</name></type> <name pos:line="483" pos:column="21">styler</name><parameter_list pos:line="483" pos:column="27">(<param><decl><type><name pos:line="483" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="485" pos:column="9">unsigned</name> <name pos:line="485" pos:column="18">int</name></type> <name pos:line="485" pos:column="22">endPos</name> <init pos:line="485" pos:column="29">= <expr><name pos:line="485" pos:column="31">startPos</name> <op:operator pos:line="485" pos:column="40">+</op:operator> <name pos:line="485" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="486" pos:column="9">int</name></type> <name pos:line="486" pos:column="13">visibleChars</name> <init pos:line="486" pos:column="26">= <expr><lit:literal type="number" pos:line="486" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="487" pos:column="9">int</name></type> <name pos:line="487" pos:column="13">lineCurrent</name> <init pos:line="487" pos:column="25">= <expr><call><name><name pos:line="487" pos:column="27">styler</name><op:operator pos:line="487" pos:column="33">.</op:operator><name pos:line="487" pos:column="34">GetLine</name></name><argument_list pos:line="487" pos:column="41">(<argument><expr><name pos:line="487" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="488" pos:column="9">int</name></type> <name pos:line="488" pos:column="13">levelCurrent</name> <init pos:line="488" pos:column="26">= <expr><name pos:line="488" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="489" pos:column="9">if <condition pos:line="489" pos:column="12">(<expr><name pos:line="489" pos:column="13">lineCurrent</name> <op:operator pos:line="489" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="489" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="489" pos:column="29">
		<expr_stmt><expr><name pos:line="490" pos:column="17">levelCurrent</name> <op:operator pos:line="490" pos:column="30">=</op:operator> <call><name><name pos:line="490" pos:column="32">styler</name><op:operator pos:line="490" pos:column="38">.</op:operator><name pos:line="490" pos:column="39">LevelAt</name></name><argument_list pos:line="490" pos:column="46">(<argument><expr><name pos:line="490" pos:column="47">lineCurrent</name><op:operator pos:line="490" pos:column="58">-</op:operator><lit:literal type="number" pos:line="490" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="490" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="490" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="491" pos:column="9">int</name></type> <name pos:line="491" pos:column="13">levelMinCurrent</name> <init pos:line="491" pos:column="29">= <expr><name pos:line="491" pos:column="31">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="492" pos:column="9">int</name></type> <name pos:line="492" pos:column="13">levelNext</name> <init pos:line="492" pos:column="23">= <expr><name pos:line="492" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="493" pos:column="9">char</name></type> <name pos:line="493" pos:column="14">chNext</name> <init pos:line="493" pos:column="21">= <expr><name><name pos:line="493" pos:column="23">styler</name><index pos:line="493" pos:column="29">[<expr><name pos:line="493" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="494" pos:column="9">int</name></type> <name pos:line="494" pos:column="13">styleNext</name> <init pos:line="494" pos:column="23">= <expr><call><name><name pos:line="494" pos:column="25">styler</name><op:operator pos:line="494" pos:column="31">.</op:operator><name pos:line="494" pos:column="32">StyleAt</name></name><argument_list pos:line="494" pos:column="39">(<argument><expr><name pos:line="494" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="495" pos:column="9">int</name></type> <name pos:line="495" pos:column="13">style</name> <init pos:line="495" pos:column="19">= <expr><name pos:line="495" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="496" pos:column="9">bool</name></type> <name pos:line="496" pos:column="14">foldAtElse</name> <init pos:line="496" pos:column="25">= <expr><name><name pos:line="496" pos:column="27">options</name><op:operator pos:line="496" pos:column="34">.</op:operator><name pos:line="496" pos:column="35">foldAtElseInt</name></name> <op:operator pos:line="496" pos:column="49">&gt;=</op:operator> <lit:literal type="number" pos:line="496" pos:column="52">0</lit:literal> <op:operator pos:line="496" pos:column="54">?</op:operator> <name><name pos:line="496" pos:column="56">options</name><op:operator pos:line="496" pos:column="63">.</op:operator><name pos:line="496" pos:column="64">foldAtElseInt</name></name> <op:operator pos:line="496" pos:column="78">!=</op:operator> <lit:literal type="number" pos:line="496" pos:column="81">0</lit:literal> <op:operator pos:line="496" pos:column="83">:</op:operator> <name><name pos:line="496" pos:column="85">options</name><op:operator pos:line="496" pos:column="92">.</op:operator><name pos:line="496" pos:column="93">foldAtElse</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="497" pos:column="9">const</specifier> <name pos:line="497" pos:column="15">bool</name></type> <name pos:line="497" pos:column="20">userDefinedFoldMarkers</name> <init pos:line="497" pos:column="43">= <expr><op:operator pos:line="497" pos:column="45">!</op:operator><call><name><name pos:line="497" pos:column="46">options</name><op:operator pos:line="497" pos:column="53">.</op:operator><name pos:line="497" pos:column="54">foldExplicitStart</name><op:operator pos:line="497" pos:column="71">.</op:operator><name pos:line="497" pos:column="72">empty</name></name><argument_list pos:line="497" pos:column="77">()</argument_list></call> <op:operator pos:line="497" pos:column="80">&amp;&amp;</op:operator> <op:operator pos:line="497" pos:column="83">!</op:operator><call><name><name pos:line="497" pos:column="84">options</name><op:operator pos:line="497" pos:column="91">.</op:operator><name pos:line="497" pos:column="92">foldExplicitEnd</name><op:operator pos:line="497" pos:column="107">.</op:operator><name pos:line="497" pos:column="108">empty</name></name><argument_list pos:line="497" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="498" pos:column="9">for (<init><decl><type><name pos:line="498" pos:column="14">unsigned</name> <name pos:line="498" pos:column="23">int</name></type> <name pos:line="498" pos:column="27">i</name> <init pos:line="498" pos:column="29">= <expr><name pos:line="498" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="498" pos:column="41">i</name> <op:operator pos:line="498" pos:column="43">&lt;</op:operator> <name pos:line="498" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="498" pos:column="53">i</name><op:operator pos:line="498" pos:column="54">++</op:operator></expr></incr>) <block pos:line="498" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="499" pos:column="17">char</name></type> <name pos:line="499" pos:column="22">ch</name> <init pos:line="499" pos:column="25">= <expr><name pos:line="499" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="500" pos:column="17">chNext</name> <op:operator pos:line="500" pos:column="24">=</op:operator> <call><name><name pos:line="500" pos:column="26">styler</name><op:operator pos:line="500" pos:column="32">.</op:operator><name pos:line="500" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="500" pos:column="46">(<argument><expr><name pos:line="500" pos:column="47">i</name> <op:operator pos:line="500" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="500" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="501" pos:column="17">int</name></type> <name pos:line="501" pos:column="21">stylePrev</name> <init pos:line="501" pos:column="31">= <expr><name pos:line="501" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="502" pos:column="17">style</name> <op:operator pos:line="502" pos:column="23">=</op:operator> <name pos:line="502" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="503" pos:column="17">styleNext</name> <op:operator pos:line="503" pos:column="27">=</op:operator> <call><name><name pos:line="503" pos:column="29">styler</name><op:operator pos:line="503" pos:column="35">.</op:operator><name pos:line="503" pos:column="36">StyleAt</name></name><argument_list pos:line="503" pos:column="43">(<argument><expr><name pos:line="503" pos:column="44">i</name> <op:operator pos:line="503" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="503" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="504" pos:column="17">bool</name></type> <name pos:line="504" pos:column="22">atEOL</name> <init pos:line="504" pos:column="28">= <expr><op:operator pos:line="504" pos:column="30">(</op:operator><name pos:line="504" pos:column="31">ch</name> <op:operator pos:line="504" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="504" pos:column="37">'\r'</lit:literal> <op:operator pos:line="504" pos:column="42">&amp;&amp;</op:operator> <name pos:line="504" pos:column="45">chNext</name> <op:operator pos:line="504" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="504" pos:column="55">'\n'</lit:literal><op:operator pos:line="504" pos:column="59">)</op:operator> <op:operator pos:line="504" pos:column="61">||</op:operator> <op:operator pos:line="504" pos:column="64">(</op:operator><name pos:line="504" pos:column="65">ch</name> <op:operator pos:line="504" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="504" pos:column="71">'\n'</lit:literal><op:operator pos:line="504" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="505" pos:column="17">if <condition pos:line="505" pos:column="20">(<expr><name><name pos:line="505" pos:column="21">options</name><op:operator pos:line="505" pos:column="28">.</op:operator><name pos:line="505" pos:column="29">foldComment</name></name> <op:operator pos:line="505" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="505" pos:column="44">options</name><op:operator pos:line="505" pos:column="51">.</op:operator><name pos:line="505" pos:column="52">foldCommentMultiline</name></name> <op:operator pos:line="505" pos:column="73">&amp;&amp;</op:operator> <call><name pos:line="505" pos:column="76">IsStreamCommentStyle</name><argument_list pos:line="505" pos:column="96">(<argument><expr><name pos:line="505" pos:column="97">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="505" pos:column="104"> <block pos:line="505" pos:column="105">{
			<if pos:line="506" pos:column="25">if <condition pos:line="506" pos:column="28">(<expr><op:operator pos:line="506" pos:column="29">!</op:operator><call><name pos:line="506" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="506" pos:column="50">(<argument><expr><name pos:line="506" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="506" pos:column="62"> <block pos:line="506" pos:column="63">{
				<expr_stmt><expr><name pos:line="507" pos:column="33">levelNext</name><op:operator pos:line="507" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="508" pos:column="27">else <if pos:line="508" pos:column="32">if <condition pos:line="508" pos:column="35">(<expr><op:operator pos:line="508" pos:column="36">!</op:operator><call><name pos:line="508" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="508" pos:column="57">(<argument><expr><name pos:line="508" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="508" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="508" pos:column="72">!</op:operator><name pos:line="508" pos:column="73">atEOL</name></expr>)</condition><then pos:line="508" pos:column="79"> <block pos:line="508" pos:column="80">{
				<comment type="line" pos:line="509" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="510" pos:column="33">levelNext</name><op:operator pos:line="510" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="513" pos:column="17">if <condition pos:line="513" pos:column="20">(<expr><name><name pos:line="513" pos:column="21">options</name><op:operator pos:line="513" pos:column="28">.</op:operator><name pos:line="513" pos:column="29">foldComment</name></name> <op:operator pos:line="513" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="513" pos:column="44">options</name><op:operator pos:line="513" pos:column="51">.</op:operator><name pos:line="513" pos:column="52">foldCommentExplicit</name></name> <op:operator pos:line="513" pos:column="72">&amp;&amp;</op:operator> <op:operator pos:line="513" pos:column="75">(</op:operator><op:operator pos:line="513" pos:column="76">(</op:operator><name pos:line="513" pos:column="77">style</name> <op:operator pos:line="513" pos:column="83">==</op:operator> <name pos:line="513" pos:column="86">SCE_D_COMMENTLINE</name><op:operator pos:line="513" pos:column="103">)</op:operator> <op:operator pos:line="513" pos:column="105">||</op:operator> <name><name pos:line="513" pos:column="108">options</name><op:operator pos:line="513" pos:column="115">.</op:operator><name pos:line="513" pos:column="116">foldExplicitAnywhere</name></name><op:operator pos:line="513" pos:column="136">)</op:operator></expr>)</condition><then pos:line="513" pos:column="138"> <block pos:line="513" pos:column="139">{
			<if pos:line="514" pos:column="25">if <condition pos:line="514" pos:column="28">(<expr><name pos:line="514" pos:column="29">userDefinedFoldMarkers</name></expr>)</condition><then pos:line="514" pos:column="52"> <block pos:line="514" pos:column="53">{
				<if pos:line="515" pos:column="33">if <condition pos:line="515" pos:column="36">(<expr><call><name><name pos:line="515" pos:column="37">styler</name><op:operator pos:line="515" pos:column="43">.</op:operator><name pos:line="515" pos:column="44">Match</name></name><argument_list pos:line="515" pos:column="49">(<argument><expr><name pos:line="515" pos:column="50">i</name></expr></argument>, <argument><expr><call><name><name pos:line="515" pos:column="53">options</name><op:operator pos:line="515" pos:column="60">.</op:operator><name pos:line="515" pos:column="61">foldExplicitStart</name><op:operator pos:line="515" pos:column="78">.</op:operator><name pos:line="515" pos:column="79">c_str</name></name><argument_list pos:line="515" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="515" pos:column="88"> <block pos:line="515" pos:column="89">{
 					<expr_stmt><expr><name pos:line="516" pos:column="41">levelNext</name><op:operator pos:line="516" pos:column="50">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="517" pos:column="35">else <if pos:line="517" pos:column="40">if <condition pos:line="517" pos:column="43">(<expr><call><name><name pos:line="517" pos:column="44">styler</name><op:operator pos:line="517" pos:column="50">.</op:operator><name pos:line="517" pos:column="51">Match</name></name><argument_list pos:line="517" pos:column="56">(<argument><expr><name pos:line="517" pos:column="57">i</name></expr></argument>, <argument><expr><call><name><name pos:line="517" pos:column="60">options</name><op:operator pos:line="517" pos:column="67">.</op:operator><name pos:line="517" pos:column="68">foldExplicitEnd</name><op:operator pos:line="517" pos:column="83">.</op:operator><name pos:line="517" pos:column="84">c_str</name></name><argument_list pos:line="517" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="517" pos:column="93"> <block pos:line="517" pos:column="94">{
 					<expr_stmt><expr><name pos:line="518" pos:column="41">levelNext</name><op:operator pos:line="518" pos:column="50">--</op:operator></expr>;</expr_stmt>
 				}</block></then></if></else></if>
			}</block></then> <else pos:line="520" pos:column="27">else <block pos:line="520" pos:column="32">{
				<if pos:line="521" pos:column="33">if <condition pos:line="521" pos:column="36">(<expr><op:operator pos:line="521" pos:column="37">(</op:operator><name pos:line="521" pos:column="38">ch</name> <op:operator pos:line="521" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="521" pos:column="44">'/'</lit:literal><op:operator pos:line="521" pos:column="47">)</op:operator> <op:operator pos:line="521" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="521" pos:column="52">(</op:operator><name pos:line="521" pos:column="53">chNext</name> <op:operator pos:line="521" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="521" pos:column="63">'/'</lit:literal><op:operator pos:line="521" pos:column="66">)</op:operator></expr>)</condition><then pos:line="521" pos:column="68"> <block pos:line="521" pos:column="69">{
					<decl_stmt><decl><type><name pos:line="522" pos:column="41">char</name></type> <name pos:line="522" pos:column="46">chNext2</name> <init pos:line="522" pos:column="54">= <expr><call><name><name pos:line="522" pos:column="56">styler</name><op:operator pos:line="522" pos:column="62">.</op:operator><name pos:line="522" pos:column="63">SafeGetCharAt</name></name><argument_list pos:line="522" pos:column="76">(<argument><expr><name pos:line="522" pos:column="77">i</name> <op:operator pos:line="522" pos:column="79">+</op:operator> <lit:literal type="number" pos:line="522" pos:column="81">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="523" pos:column="41">if <condition pos:line="523" pos:column="44">(<expr><name pos:line="523" pos:column="45">chNext2</name> <op:operator pos:line="523" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="523" pos:column="56">'{'</lit:literal></expr>)</condition><then pos:line="523" pos:column="60"> <block pos:line="523" pos:column="61">{
						<expr_stmt><expr><name pos:line="524" pos:column="49">levelNext</name><op:operator pos:line="524" pos:column="58">++</op:operator></expr>;</expr_stmt>
					}</block></then> <else pos:line="525" pos:column="43">else <if pos:line="525" pos:column="48">if <condition pos:line="525" pos:column="51">(<expr><name pos:line="525" pos:column="52">chNext2</name> <op:operator pos:line="525" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="525" pos:column="63">'}'</lit:literal></expr>)</condition><then pos:line="525" pos:column="67"> <block pos:line="525" pos:column="68">{
						<expr_stmt><expr><name pos:line="526" pos:column="49">levelNext</name><op:operator pos:line="526" pos:column="58">--</op:operator></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then></if>
 			}</block></else></if>
 		}</block></then></if>
		<if pos:line="531" pos:column="17">if <condition pos:line="531" pos:column="20">(<expr><name><name pos:line="531" pos:column="21">options</name><op:operator pos:line="531" pos:column="28">.</op:operator><name pos:line="531" pos:column="29">foldSyntaxBased</name></name> <op:operator pos:line="531" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="531" pos:column="48">(</op:operator><name pos:line="531" pos:column="49">style</name> <op:operator pos:line="531" pos:column="55">==</op:operator> <name pos:line="531" pos:column="58">SCE_D_OPERATOR</name><op:operator pos:line="531" pos:column="72">)</op:operator></expr>)</condition><then pos:line="531" pos:column="74"> <block pos:line="531" pos:column="75">{
			<if pos:line="532" pos:column="25">if <condition pos:line="532" pos:column="28">(<expr><name pos:line="532" pos:column="29">ch</name> <op:operator pos:line="532" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="532" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="532" pos:column="39"> <block pos:line="532" pos:column="40">{
				<comment type="line" pos:line="533" pos:column="33">// Measure the minimum before a '{' to allow</comment>
				<comment type="line" pos:line="534" pos:column="33">// folding on "} else {"</comment>
				<if pos:line="535" pos:column="33">if <condition pos:line="535" pos:column="36">(<expr><name pos:line="535" pos:column="37">levelMinCurrent</name> <op:operator pos:line="535" pos:column="53">&gt;</op:operator> <name pos:line="535" pos:column="55">levelNext</name></expr>)</condition><then pos:line="535" pos:column="65"> <block pos:line="535" pos:column="66">{
					<expr_stmt><expr><name pos:line="536" pos:column="41">levelMinCurrent</name> <op:operator pos:line="536" pos:column="57">=</op:operator> <name pos:line="536" pos:column="59">levelNext</name></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="538" pos:column="33">levelNext</name><op:operator pos:line="538" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="539" pos:column="27">else <if pos:line="539" pos:column="32">if <condition pos:line="539" pos:column="35">(<expr><name pos:line="539" pos:column="36">ch</name> <op:operator pos:line="539" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="539" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="539" pos:column="46"> <block pos:line="539" pos:column="47">{
				<expr_stmt><expr><name pos:line="540" pos:column="33">levelNext</name><op:operator pos:line="540" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="543" pos:column="17">if <condition pos:line="543" pos:column="20">(<expr><name pos:line="543" pos:column="21">atEOL</name> <op:operator pos:line="543" pos:column="27">||</op:operator> <op:operator pos:line="543" pos:column="30">(</op:operator><name pos:line="543" pos:column="31">i</name> <op:operator pos:line="543" pos:column="33">==</op:operator> <name pos:line="543" pos:column="36">endPos</name><op:operator pos:line="543" pos:column="42">-</op:operator><lit:literal type="number" pos:line="543" pos:column="43">1</lit:literal><op:operator pos:line="543" pos:column="44">)</op:operator></expr>)</condition><then pos:line="543" pos:column="46"> <block pos:line="543" pos:column="47">{
			<if pos:line="544" pos:column="25">if <condition pos:line="544" pos:column="28">(<expr><name><name pos:line="544" pos:column="29">options</name><op:operator pos:line="544" pos:column="36">.</op:operator><name pos:line="544" pos:column="37">foldComment</name></name> <op:operator pos:line="544" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="544" pos:column="52">options</name><op:operator pos:line="544" pos:column="59">.</op:operator><name pos:line="544" pos:column="60">foldCommentMultiline</name></name></expr>)</condition><then pos:line="544" pos:column="81"> <block pos:line="544" pos:column="82">{  <comment type="line" pos:line="544" pos:column="85">// Handle nested comments</comment>
				<decl_stmt><decl><type><name pos:line="545" pos:column="33">int</name></type> <name pos:line="545" pos:column="37">nc</name></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="546" pos:column="33">nc</name> <op:operator pos:line="546" pos:column="36">=</op:operator>  <call><name><name pos:line="546" pos:column="39">styler</name><op:operator pos:line="546" pos:column="45">.</op:operator><name pos:line="546" pos:column="46">GetLineState</name></name><argument_list pos:line="546" pos:column="58">(<argument><expr><name pos:line="546" pos:column="59">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="547" pos:column="33">nc</name> <op:operator pos:line="547" pos:column="36">-=</op:operator> <name pos:line="547" pos:column="39">lineCurrent</name><op:operator pos:line="547" pos:column="50">&gt;</op:operator><lit:literal type="number" pos:line="547" pos:column="51">0</lit:literal><op:operator pos:line="547" pos:column="52">?</op:operator> <call><name><name pos:line="547" pos:column="54">styler</name><op:operator pos:line="547" pos:column="60">.</op:operator><name pos:line="547" pos:column="61">GetLineState</name></name><argument_list pos:line="547" pos:column="73">(<argument><expr><name pos:line="547" pos:column="74">lineCurrent</name><op:operator pos:line="547" pos:column="85">-</op:operator><lit:literal type="number" pos:line="547" pos:column="86">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="547" pos:column="88">:</op:operator> <lit:literal type="number" pos:line="547" pos:column="90">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="548" pos:column="33">levelNext</name> <op:operator pos:line="548" pos:column="43">+=</op:operator> <name pos:line="548" pos:column="46">nc</name></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="550" pos:column="25">int</name></type> <name pos:line="550" pos:column="29">levelUse</name> <init pos:line="550" pos:column="38">= <expr><name pos:line="550" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<if pos:line="551" pos:column="25">if <condition pos:line="551" pos:column="28">(<expr><name><name pos:line="551" pos:column="29">options</name><op:operator pos:line="551" pos:column="36">.</op:operator><name pos:line="551" pos:column="37">foldSyntaxBased</name></name> <op:operator pos:line="551" pos:column="53">&amp;&amp;</op:operator> <name pos:line="551" pos:column="56">foldAtElse</name></expr>)</condition><then pos:line="551" pos:column="67"> <block pos:line="551" pos:column="68">{
				<expr_stmt><expr><name pos:line="552" pos:column="33">levelUse</name> <op:operator pos:line="552" pos:column="42">=</op:operator> <name pos:line="552" pos:column="44">levelMinCurrent</name></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="554" pos:column="25">int</name></type> <name pos:line="554" pos:column="29">lev</name> <init pos:line="554" pos:column="33">= <expr><name pos:line="554" pos:column="35">levelUse</name> <op:operator pos:line="554" pos:column="44">|</op:operator> <name pos:line="554" pos:column="46">levelNext</name> <op:operator pos:line="554" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="554" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="555" pos:column="25">if <condition pos:line="555" pos:column="28">(<expr><name pos:line="555" pos:column="29">visibleChars</name> <op:operator pos:line="555" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="555" pos:column="45">0</lit:literal> <op:operator pos:line="555" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="555" pos:column="50">options</name><op:operator pos:line="555" pos:column="57">.</op:operator><name pos:line="555" pos:column="58">foldCompact</name></name></expr>)</condition><then pos:line="555" pos:column="70">
				<expr_stmt><expr><name pos:line="556" pos:column="33">lev</name> <op:operator pos:line="556" pos:column="37">|=</op:operator> <name pos:line="556" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="557" pos:column="25">if <condition pos:line="557" pos:column="28">(<expr><name pos:line="557" pos:column="29">levelUse</name> <op:operator pos:line="557" pos:column="38">&lt;</op:operator> <name pos:line="557" pos:column="40">levelNext</name></expr>)</condition><then pos:line="557" pos:column="50">
				<expr_stmt><expr><name pos:line="558" pos:column="33">lev</name> <op:operator pos:line="558" pos:column="37">|=</op:operator> <name pos:line="558" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="559" pos:column="25">if <condition pos:line="559" pos:column="28">(<expr><name pos:line="559" pos:column="29">lev</name> <op:operator pos:line="559" pos:column="33">!=</op:operator> <call><name><name pos:line="559" pos:column="36">styler</name><op:operator pos:line="559" pos:column="42">.</op:operator><name pos:line="559" pos:column="43">LevelAt</name></name><argument_list pos:line="559" pos:column="50">(<argument><expr><name pos:line="559" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="559" pos:column="64"> <block pos:line="559" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="560" pos:column="33">styler</name><op:operator pos:line="560" pos:column="39">.</op:operator><name pos:line="560" pos:column="40">SetLevel</name></name><argument_list pos:line="560" pos:column="48">(<argument><expr><name pos:line="560" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="560" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="562" pos:column="25">lineCurrent</name><op:operator pos:line="562" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="563" pos:column="25">levelCurrent</name> <op:operator pos:line="563" pos:column="38">=</op:operator> <name pos:line="563" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="564" pos:column="25">levelMinCurrent</name> <op:operator pos:line="564" pos:column="41">=</op:operator> <name pos:line="564" pos:column="43">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="565" pos:column="25">visibleChars</name> <op:operator pos:line="565" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="565" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="567" pos:column="17">if <condition pos:line="567" pos:column="20">(<expr><op:operator pos:line="567" pos:column="21">!</op:operator><call><name pos:line="567" pos:column="22">IsASpace</name><argument_list pos:line="567" pos:column="30">(<argument><expr><name pos:line="567" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="567" pos:column="35">
			<expr_stmt><expr><name pos:line="568" pos:column="25">visibleChars</name><op:operator pos:line="568" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name pos:line="572" pos:column="1">LexerModule</name></type> <name pos:line="572" pos:column="13">lmD</name><argument_list pos:line="572" pos:column="16">(<argument><expr><name pos:line="572" pos:column="17">SCLEX_D</name></expr></argument>, <argument><expr><name><name pos:line="572" pos:column="26">LexerD</name><op:operator pos:line="572" pos:column="32">::</op:operator><name pos:line="572" pos:column="34">LexerFactoryD</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="572" pos:column="49">"d"</lit:literal></expr></argument>, <argument><expr><name pos:line="572" pos:column="54">dWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
