<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexA68k.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexA68k.cxx
 ** Lexer for Assembler, just for the MASM syntax
 ** Written by Martial Demolins AKA Folco
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 2010 Martial Demolins &lt;mdemolins(a)gmail.com&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software</comment>
<comment type="line" pos:line="8" pos:column="1">// may be distributed.</comment>


<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>


<comment type="line" pos:line="34" pos:column="1">// Return values for GetOperatorType</comment>
<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">NO_OPERATOR</name></cpp:macro>     <cpp:value pos:line="35" pos:column="25">0</cpp:value></cpp:define>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">OPERATOR_1CHAR</name></cpp:macro>  <cpp:value pos:line="36" pos:column="25">1</cpp:value></cpp:define>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">OPERATOR_2CHAR</name></cpp:macro>  <cpp:value pos:line="37" pos:column="25">2</cpp:value></cpp:define>


<comment type="block" format="doxygen" pos:line="40" pos:column="1">/**
 *  IsIdentifierStart
 *
 *  Return true if the given char is a valid identifier first char
 */</comment>

<function><type><specifier pos:line="46" pos:column="1">static</specifier> <specifier pos:line="46" pos:column="8">inline</specifier> <name pos:line="46" pos:column="15">bool</name></type> <name pos:line="46" pos:column="20">IsIdentifierStart</name> <parameter_list pos:line="46" pos:column="38">(<param><decl><type><specifier pos:line="46" pos:column="39">const</specifier> <name pos:line="46" pos:column="45">int</name></type> <name pos:line="46" pos:column="49">ch</name></decl></param>)</parameter_list>
<block pos:line="47" pos:column="1">{
    <return pos:line="48" pos:column="5">return <expr><op:operator pos:line="48" pos:column="12">(</op:operator><call><name pos:line="48" pos:column="13">isalpha</name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="25">||</op:operator> <op:operator pos:line="48" pos:column="28">(</op:operator><name pos:line="48" pos:column="29">ch</name> <op:operator pos:line="48" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="35">'_'</lit:literal><op:operator pos:line="48" pos:column="38">)</op:operator> <op:operator pos:line="48" pos:column="40">||</op:operator> <op:operator pos:line="48" pos:column="43">(</op:operator><name pos:line="48" pos:column="44">ch</name> <op:operator pos:line="48" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="50">'\\'</lit:literal><op:operator pos:line="48" pos:column="54">)</op:operator><op:operator pos:line="48" pos:column="55">)</op:operator></expr>;</return>
}</block></function>


<comment type="block" format="doxygen" pos:line="52" pos:column="1">/**
 *  IsIdentifierChar
 *
 *  Return true if the given char is a valid identifier char
 */</comment>

<function><type><specifier pos:line="58" pos:column="1">static</specifier> <specifier pos:line="58" pos:column="8">inline</specifier> <name pos:line="58" pos:column="15">bool</name></type> <name pos:line="58" pos:column="20">IsIdentifierChar</name> <parameter_list pos:line="58" pos:column="37">(<param><decl><type><specifier pos:line="58" pos:column="38">const</specifier> <name pos:line="58" pos:column="44">int</name></type> <name pos:line="58" pos:column="48">ch</name></decl></param>)</parameter_list>
<block pos:line="59" pos:column="1">{
    <return pos:line="60" pos:column="5">return <expr><op:operator pos:line="60" pos:column="12">(</op:operator><call><name pos:line="60" pos:column="13">isalnum</name><argument_list pos:line="60" pos:column="20">(<argument><expr><name pos:line="60" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="60" pos:column="25">||</op:operator> <op:operator pos:line="60" pos:column="28">(</op:operator><name pos:line="60" pos:column="29">ch</name> <op:operator pos:line="60" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="35">'_'</lit:literal><op:operator pos:line="60" pos:column="38">)</op:operator> <op:operator pos:line="60" pos:column="40">||</op:operator> <op:operator pos:line="60" pos:column="43">(</op:operator><name pos:line="60" pos:column="44">ch</name> <op:operator pos:line="60" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="50">'@'</lit:literal><op:operator pos:line="60" pos:column="53">)</op:operator> <op:operator pos:line="60" pos:column="55">||</op:operator> <op:operator pos:line="60" pos:column="58">(</op:operator><name pos:line="60" pos:column="59">ch</name> <op:operator pos:line="60" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="65">':'</lit:literal><op:operator pos:line="60" pos:column="68">)</op:operator> <op:operator pos:line="60" pos:column="70">||</op:operator> <op:operator pos:line="60" pos:column="73">(</op:operator><name pos:line="60" pos:column="74">ch</name> <op:operator pos:line="60" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="80">'.'</lit:literal><op:operator pos:line="60" pos:column="83">)</op:operator><op:operator pos:line="60" pos:column="84">)</op:operator></expr>;</return>
}</block></function>


<comment type="block" format="doxygen" pos:line="64" pos:column="1">/**
 *  GetOperatorType
 *
 *  Return:
 *  NO_OPERATOR     if char is not an operator
 *  OPERATOR_1CHAR  if the operator is one char long
 *  OPERATOR_2CHAR  if the operator is two chars long
 */</comment>

<function><type><specifier pos:line="73" pos:column="1">static</specifier> <specifier pos:line="73" pos:column="8">inline</specifier> <name pos:line="73" pos:column="15">int</name></type> <name pos:line="73" pos:column="19">GetOperatorType</name> <parameter_list pos:line="73" pos:column="35">(<param><decl><type><specifier pos:line="73" pos:column="36">const</specifier> <name pos:line="73" pos:column="42">int</name></type> <name pos:line="73" pos:column="46">ch1</name></decl></param>, <param><decl><type><specifier pos:line="73" pos:column="51">const</specifier> <name pos:line="73" pos:column="57">int</name></type> <name pos:line="73" pos:column="61">ch2</name></decl></param>)</parameter_list>
<block pos:line="74" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">int</name></type> <name pos:line="75" pos:column="9">OpType</name> <init pos:line="75" pos:column="16">= <expr><name pos:line="75" pos:column="18">NO_OPERATOR</name></expr></init></decl>;</decl_stmt>

    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><op:operator pos:line="77" pos:column="9">(</op:operator><name pos:line="77" pos:column="10">ch1</name> <op:operator pos:line="77" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="17">'+'</lit:literal><op:operator pos:line="77" pos:column="20">)</op:operator> <op:operator pos:line="77" pos:column="22">||</op:operator> <op:operator pos:line="77" pos:column="25">(</op:operator><name pos:line="77" pos:column="26">ch1</name> <op:operator pos:line="77" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="33">'-'</lit:literal><op:operator pos:line="77" pos:column="36">)</op:operator> <op:operator pos:line="77" pos:column="38">||</op:operator> <op:operator pos:line="77" pos:column="41">(</op:operator><name pos:line="77" pos:column="42">ch1</name> <op:operator pos:line="77" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="49">'*'</lit:literal><op:operator pos:line="77" pos:column="52">)</op:operator> <op:operator pos:line="77" pos:column="54">||</op:operator> <op:operator pos:line="77" pos:column="57">(</op:operator><name pos:line="77" pos:column="58">ch1</name> <op:operator pos:line="77" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="65">'/'</lit:literal><op:operator pos:line="77" pos:column="68">)</op:operator> <op:operator pos:line="77" pos:column="70">||</op:operator> <op:operator pos:line="77" pos:column="73">(</op:operator><name pos:line="77" pos:column="74">ch1</name> <op:operator pos:line="77" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="81">'#'</lit:literal><op:operator pos:line="77" pos:column="84">)</op:operator> <op:operator pos:line="77" pos:column="86">||</op:operator>
        <op:operator pos:line="78" pos:column="9">(</op:operator><name pos:line="78" pos:column="10">ch1</name> <op:operator pos:line="78" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="17">'('</lit:literal><op:operator pos:line="78" pos:column="20">)</op:operator> <op:operator pos:line="78" pos:column="22">||</op:operator> <op:operator pos:line="78" pos:column="25">(</op:operator><name pos:line="78" pos:column="26">ch1</name> <op:operator pos:line="78" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="33">')'</lit:literal><op:operator pos:line="78" pos:column="36">)</op:operator> <op:operator pos:line="78" pos:column="38">||</op:operator> <op:operator pos:line="78" pos:column="41">(</op:operator><name pos:line="78" pos:column="42">ch1</name> <op:operator pos:line="78" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="49">'~'</lit:literal><op:operator pos:line="78" pos:column="52">)</op:operator> <op:operator pos:line="78" pos:column="54">||</op:operator> <op:operator pos:line="78" pos:column="57">(</op:operator><name pos:line="78" pos:column="58">ch1</name> <op:operator pos:line="78" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="65">'&amp;'</lit:literal><op:operator pos:line="78" pos:column="68">)</op:operator> <op:operator pos:line="78" pos:column="70">||</op:operator> <op:operator pos:line="78" pos:column="73">(</op:operator><name pos:line="78" pos:column="74">ch1</name> <op:operator pos:line="78" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="81">'|'</lit:literal><op:operator pos:line="78" pos:column="84">)</op:operator> <op:operator pos:line="78" pos:column="86">||</op:operator> <op:operator pos:line="78" pos:column="89">(</op:operator><name pos:line="78" pos:column="90">ch1</name> <op:operator pos:line="78" pos:column="94">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="97">','</lit:literal><op:operator pos:line="78" pos:column="100">)</op:operator></expr>)</condition><then pos:line="78" pos:column="102">
        <expr_stmt><expr><name pos:line="79" pos:column="9">OpType</name> <op:operator pos:line="79" pos:column="16">=</op:operator> <name pos:line="79" pos:column="18">OPERATOR_1CHAR</name></expr>;</expr_stmt></then>

    <else pos:line="81" pos:column="5">else <if pos:line="81" pos:column="10">if <condition pos:line="81" pos:column="13">(<expr><op:operator pos:line="81" pos:column="14">(</op:operator><name pos:line="81" pos:column="15">ch1</name> <op:operator pos:line="81" pos:column="19">==</op:operator> <name pos:line="81" pos:column="22">ch2</name><op:operator pos:line="81" pos:column="25">)</op:operator> <op:operator pos:line="81" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="81" pos:column="30">(</op:operator><name pos:line="81" pos:column="31">ch1</name> <op:operator pos:line="81" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="38">'&lt;'</lit:literal> <op:operator pos:line="81" pos:column="42">||</op:operator> <name pos:line="81" pos:column="45">ch1</name> <op:operator pos:line="81" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="52">'&gt;'</lit:literal><op:operator pos:line="81" pos:column="55">)</op:operator></expr>)</condition><then pos:line="81" pos:column="57">
        <expr_stmt><expr><name pos:line="82" pos:column="9">OpType</name> <op:operator pos:line="82" pos:column="16">=</op:operator> <name pos:line="82" pos:column="18">OPERATOR_2CHAR</name></expr>;</expr_stmt></then></if></else></if>

    <return pos:line="84" pos:column="5">return <expr><name pos:line="84" pos:column="12">OpType</name></expr>;</return>
}</block></function>


<comment type="block" format="doxygen" pos:line="88" pos:column="1">/**
 *  IsBin
 *
 *  Return true if the given char is 0 or 1
 */</comment>

<function><type><specifier pos:line="94" pos:column="1">static</specifier> <specifier pos:line="94" pos:column="8">inline</specifier> <name pos:line="94" pos:column="15">bool</name></type> <name pos:line="94" pos:column="20">IsBin</name> <parameter_list pos:line="94" pos:column="26">(<param><decl><type><specifier pos:line="94" pos:column="27">const</specifier> <name pos:line="94" pos:column="33">int</name></type> <name pos:line="94" pos:column="37">ch</name></decl></param>)</parameter_list>
<block pos:line="95" pos:column="1">{
    <return pos:line="96" pos:column="5">return <expr><op:operator pos:line="96" pos:column="12">(</op:operator><name pos:line="96" pos:column="13">ch</name> <op:operator pos:line="96" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="19">'0'</lit:literal><op:operator pos:line="96" pos:column="22">)</op:operator> <op:operator pos:line="96" pos:column="24">||</op:operator> <op:operator pos:line="96" pos:column="27">(</op:operator><name pos:line="96" pos:column="28">ch</name> <op:operator pos:line="96" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="34">'1'</lit:literal><op:operator pos:line="96" pos:column="37">)</op:operator></expr>;</return>
}</block></function>


<comment type="block" format="doxygen" pos:line="100" pos:column="1">/**
 *  IsDoxygenChar
 *
 *  Return true if the char may be part of a Doxygen keyword
 */</comment>

<function><type><specifier pos:line="106" pos:column="1">static</specifier> <specifier pos:line="106" pos:column="8">inline</specifier> <name pos:line="106" pos:column="15">bool</name></type> <name pos:line="106" pos:column="20">IsDoxygenChar</name> <parameter_list pos:line="106" pos:column="34">(<param><decl><type><specifier pos:line="106" pos:column="35">const</specifier> <name pos:line="106" pos:column="41">int</name></type> <name pos:line="106" pos:column="45">ch</name></decl></param>)</parameter_list>
<block pos:line="107" pos:column="1">{
    <return pos:line="108" pos:column="5">return <expr><call><name pos:line="108" pos:column="12">isalpha</name><argument_list pos:line="108" pos:column="19">(<argument><expr><name pos:line="108" pos:column="20">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="24">||</op:operator> <op:operator pos:line="108" pos:column="27">(</op:operator><name pos:line="108" pos:column="28">ch</name> <op:operator pos:line="108" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="34">'$'</lit:literal><op:operator pos:line="108" pos:column="37">)</op:operator> <op:operator pos:line="108" pos:column="39">||</op:operator> <op:operator pos:line="108" pos:column="42">(</op:operator><name pos:line="108" pos:column="43">ch</name> <op:operator pos:line="108" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="49">'['</lit:literal><op:operator pos:line="108" pos:column="52">)</op:operator> <op:operator pos:line="108" pos:column="54">||</op:operator> <op:operator pos:line="108" pos:column="57">(</op:operator><name pos:line="108" pos:column="58">ch</name> <op:operator pos:line="108" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="64">']'</lit:literal><op:operator pos:line="108" pos:column="67">)</op:operator> <op:operator pos:line="108" pos:column="69">||</op:operator> <op:operator pos:line="108" pos:column="72">(</op:operator><name pos:line="108" pos:column="73">ch</name> <op:operator pos:line="108" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="79">'{'</lit:literal><op:operator pos:line="108" pos:column="82">)</op:operator> <op:operator pos:line="108" pos:column="84">||</op:operator> <op:operator pos:line="108" pos:column="87">(</op:operator><name pos:line="108" pos:column="88">ch</name> <op:operator pos:line="108" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="94">'}'</lit:literal><op:operator pos:line="108" pos:column="97">)</op:operator></expr>;</return>
}</block></function>


<comment type="block" format="doxygen" pos:line="112" pos:column="1">/**
 *  ColouriseA68kDoc
 *
 *  Main function, which colourises a 68k source
 */</comment>

<function><type><specifier pos:line="118" pos:column="1">static</specifier> <name pos:line="118" pos:column="8">void</name></type> <name pos:line="118" pos:column="13">ColouriseA68kDoc</name> <parameter_list pos:line="118" pos:column="30">(<param><decl><type><name pos:line="118" pos:column="31">unsigned</name> <name pos:line="118" pos:column="40">int</name></type> <name pos:line="118" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="54">int</name></type> <name pos:line="118" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="66">int</name></type> <name pos:line="118" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="81">WordList</name> <type:modifier pos:line="118" pos:column="90">*</type:modifier></type><name><name pos:line="118" pos:column="91">keywordlists</name><index pos:line="118" pos:column="103">[]</index></name></decl></param>, <param><decl><type><name pos:line="118" pos:column="107">Accessor</name> <type:modifier pos:line="118" pos:column="116">&amp;</type:modifier></type><name pos:line="118" pos:column="117">styler</name></decl></param>)</parameter_list>
<block pos:line="119" pos:column="1">{

    <comment type="line" pos:line="121" pos:column="5">// Get references to keywords lists</comment>
    <decl_stmt><decl><type><name pos:line="122" pos:column="5">WordList</name> <type:modifier pos:line="122" pos:column="14">&amp;</type:modifier></type><name pos:line="122" pos:column="15">cpuInstruction</name> <init pos:line="122" pos:column="30">= <expr><op:operator pos:line="122" pos:column="32">*</op:operator><name><name pos:line="122" pos:column="33">keywordlists</name><index pos:line="122" pos:column="45">[<expr><lit:literal type="number" pos:line="122" pos:column="46">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="123" pos:column="5">WordList</name> <type:modifier pos:line="123" pos:column="14">&amp;</type:modifier></type><name pos:line="123" pos:column="15">registers</name> <init pos:line="123" pos:column="25">= <expr><op:operator pos:line="123" pos:column="27">*</op:operator><name><name pos:line="123" pos:column="28">keywordlists</name><index pos:line="123" pos:column="40">[<expr><lit:literal type="number" pos:line="123" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="124" pos:column="5">WordList</name> <type:modifier pos:line="124" pos:column="14">&amp;</type:modifier></type><name pos:line="124" pos:column="15">directive</name> <init pos:line="124" pos:column="25">= <expr><op:operator pos:line="124" pos:column="27">*</op:operator><name><name pos:line="124" pos:column="28">keywordlists</name><index pos:line="124" pos:column="40">[<expr><lit:literal type="number" pos:line="124" pos:column="41">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="125" pos:column="5">WordList</name> <type:modifier pos:line="125" pos:column="14">&amp;</type:modifier></type><name pos:line="125" pos:column="15">extInstruction</name> <init pos:line="125" pos:column="30">= <expr><op:operator pos:line="125" pos:column="32">*</op:operator><name><name pos:line="125" pos:column="33">keywordlists</name><index pos:line="125" pos:column="45">[<expr><lit:literal type="number" pos:line="125" pos:column="46">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="126" pos:column="5">WordList</name> <type:modifier pos:line="126" pos:column="14">&amp;</type:modifier></type><name pos:line="126" pos:column="15">commentSpecial</name> <init pos:line="126" pos:column="30">= <expr><op:operator pos:line="126" pos:column="32">*</op:operator><name><name pos:line="126" pos:column="33">keywordlists</name><index pos:line="126" pos:column="45">[<expr><lit:literal type="number" pos:line="126" pos:column="46">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="127" pos:column="5">WordList</name> <type:modifier pos:line="127" pos:column="14">&amp;</type:modifier></type><name pos:line="127" pos:column="15">doxygenKeyword</name> <init pos:line="127" pos:column="30">= <expr><op:operator pos:line="127" pos:column="32">*</op:operator><name><name pos:line="127" pos:column="33">keywordlists</name><index pos:line="127" pos:column="45">[<expr><lit:literal type="number" pos:line="127" pos:column="46">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


    <comment type="line" pos:line="130" pos:column="5">// Instanciate a context for our source</comment>
    <function_decl><type><name pos:line="131" pos:column="5">StyleContext</name></type> <name pos:line="131" pos:column="18">sc</name><parameter_list pos:line="131" pos:column="20">(<param><decl><type><name pos:line="131" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="131" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="131" pos:column="39">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="131" pos:column="50">styler</name></type></decl></param>)</parameter_list>;</function_decl>


    <comment type="block" format="doxygen" pos:line="134" pos:column="5">/************************************************************
    *
    *   Parse the text
    *
    ************************************************************/</comment>

    <for pos:line="140" pos:column="5">for ( <init pos:line="140" pos:column="11">;</init> <condition><expr><call><name><name pos:line="140" pos:column="13">sc</name><op:operator pos:line="140" pos:column="15">.</op:operator><name pos:line="140" pos:column="16">More</name></name><argument_list pos:line="140" pos:column="20">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="140" pos:column="24">sc</name><op:operator pos:line="140" pos:column="26">.</op:operator><name pos:line="140" pos:column="27">Forward</name></name><argument_list pos:line="140" pos:column="34">()</argument_list></call></expr></incr>)
    <block pos:line="141" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="142" pos:column="9">char</name></type> <name><name pos:line="142" pos:column="14">Buffer</name><index pos:line="142" pos:column="20">[<expr><lit:literal type="number" pos:line="142" pos:column="21">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="143" pos:column="9">int</name></type> <name pos:line="143" pos:column="13">OpType</name></decl>;</decl_stmt>

        <comment type="line" pos:line="145" pos:column="9">// Reset style at beginning of line</comment>
        <if pos:line="146" pos:column="9">if <condition pos:line="146" pos:column="12">(<expr><name><name pos:line="146" pos:column="13">sc</name><op:operator pos:line="146" pos:column="15">.</op:operator><name pos:line="146" pos:column="16">atLineStart</name></name></expr>)</condition><then pos:line="146" pos:column="28">
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">sc</name><op:operator pos:line="147" pos:column="15">.</op:operator><name pos:line="147" pos:column="16">SetState</name></name><argument_list pos:line="147" pos:column="24">(<argument><expr><name pos:line="147" pos:column="25">SCE_A68K_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>


        <comment type="block" format="doxygen" pos:line="150" pos:column="9">/************************************************************
        *
        *   Handle current state if we are not in the "default style"
        *
        ************************************************************/</comment>

        <if pos:line="156" pos:column="9">if <condition pos:line="156" pos:column="12">(<expr><name><name pos:line="156" pos:column="13">sc</name><op:operator pos:line="156" pos:column="15">.</op:operator><name pos:line="156" pos:column="16">state</name></name> <op:operator pos:line="156" pos:column="22">!=</op:operator> <name pos:line="156" pos:column="25">SCE_A68K_DEFAULT</name></expr>)</condition><then pos:line="156" pos:column="42">
        <block pos:line="157" pos:column="9">{
            <comment type="line" pos:line="158" pos:column="13">// Check if current style continue.</comment>
            <comment type="line" pos:line="159" pos:column="13">// If this case, we loop because there is nothing else to do</comment>
            <if pos:line="160" pos:column="13">if <condition pos:line="160" pos:column="16">(<expr><op:operator pos:line="160" pos:column="17">(</op:operator><op:operator pos:line="160" pos:column="18">(</op:operator><name><name pos:line="160" pos:column="19">sc</name><op:operator pos:line="160" pos:column="21">.</op:operator><name pos:line="160" pos:column="22">state</name></name> <op:operator pos:line="160" pos:column="28">==</op:operator> <name pos:line="160" pos:column="31">SCE_A68K_NUMBER_DEC</name><op:operator pos:line="160" pos:column="50">)</op:operator> <op:operator pos:line="160" pos:column="52">&amp;&amp;</op:operator> <call><name pos:line="160" pos:column="55">isdigit</name><argument_list pos:line="160" pos:column="62">(<argument><expr><name><name pos:line="160" pos:column="63">sc</name><op:operator pos:line="160" pos:column="65">.</op:operator><name pos:line="160" pos:column="66">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="160" pos:column="69">)</op:operator>                                       <comment type="line" pos:line="160" pos:column="109">// Decimal number</comment>
                <op:operator pos:line="161" pos:column="17">||</op:operator> <op:operator pos:line="161" pos:column="20">(</op:operator><op:operator pos:line="161" pos:column="21">(</op:operator><name><name pos:line="161" pos:column="22">sc</name><op:operator pos:line="161" pos:column="24">.</op:operator><name pos:line="161" pos:column="25">state</name></name> <op:operator pos:line="161" pos:column="31">==</op:operator> <name pos:line="161" pos:column="34">SCE_A68K_NUMBER_BIN</name><op:operator pos:line="161" pos:column="53">)</op:operator> <op:operator pos:line="161" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="161" pos:column="58">IsBin</name><argument_list pos:line="161" pos:column="63">(<argument><expr><name><name pos:line="161" pos:column="64">sc</name><op:operator pos:line="161" pos:column="66">.</op:operator><name pos:line="161" pos:column="67">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="161" pos:column="70">)</op:operator>                                      <comment type="line" pos:line="161" pos:column="109">// Binary number</comment>
                <op:operator pos:line="162" pos:column="17">||</op:operator> <op:operator pos:line="162" pos:column="20">(</op:operator><op:operator pos:line="162" pos:column="21">(</op:operator><name><name pos:line="162" pos:column="22">sc</name><op:operator pos:line="162" pos:column="24">.</op:operator><name pos:line="162" pos:column="25">state</name></name> <op:operator pos:line="162" pos:column="31">==</op:operator> <name pos:line="162" pos:column="34">SCE_A68K_NUMBER_HEX</name><op:operator pos:line="162" pos:column="53">)</op:operator> <op:operator pos:line="162" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="162" pos:column="58">isxdigit</name><argument_list pos:line="162" pos:column="66">(<argument><expr><name><name pos:line="162" pos:column="67">sc</name><op:operator pos:line="162" pos:column="69">.</op:operator><name pos:line="162" pos:column="70">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="162" pos:column="73">)</op:operator>                                   <comment type="line" pos:line="162" pos:column="109">// Hexa number</comment>
                <op:operator pos:line="163" pos:column="17">||</op:operator> <op:operator pos:line="163" pos:column="20">(</op:operator><op:operator pos:line="163" pos:column="21">(</op:operator><name><name pos:line="163" pos:column="22">sc</name><op:operator pos:line="163" pos:column="24">.</op:operator><name pos:line="163" pos:column="25">state</name></name> <op:operator pos:line="163" pos:column="31">==</op:operator> <name pos:line="163" pos:column="34">SCE_A68K_MACRO_ARG</name><op:operator pos:line="163" pos:column="52">)</op:operator>  <op:operator pos:line="163" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="163" pos:column="58">isdigit</name><argument_list pos:line="163" pos:column="65">(<argument><expr><name><name pos:line="163" pos:column="66">sc</name><op:operator pos:line="163" pos:column="68">.</op:operator><name pos:line="163" pos:column="69">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="72">)</op:operator>                                    <comment type="line" pos:line="163" pos:column="109">// Arg of macro</comment>
                <op:operator pos:line="164" pos:column="17">||</op:operator> <op:operator pos:line="164" pos:column="20">(</op:operator><op:operator pos:line="164" pos:column="21">(</op:operator><name><name pos:line="164" pos:column="22">sc</name><op:operator pos:line="164" pos:column="24">.</op:operator><name pos:line="164" pos:column="25">state</name></name> <op:operator pos:line="164" pos:column="31">==</op:operator> <name pos:line="164" pos:column="34">SCE_A68K_STRING1</name><op:operator pos:line="164" pos:column="50">)</op:operator>    <op:operator pos:line="164" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="164" pos:column="58">(</op:operator><name><name pos:line="164" pos:column="59">sc</name><op:operator pos:line="164" pos:column="61">.</op:operator><name pos:line="164" pos:column="62">ch</name></name> <op:operator pos:line="164" pos:column="65">!=</op:operator> <lit:literal type="char" pos:line="164" pos:column="68">'\''</lit:literal><op:operator pos:line="164" pos:column="72">)</op:operator><op:operator pos:line="164" pos:column="73">)</op:operator>                                   <comment type="line" pos:line="164" pos:column="109">// String single-quoted</comment>
                <op:operator pos:line="165" pos:column="17">||</op:operator> <op:operator pos:line="165" pos:column="20">(</op:operator><op:operator pos:line="165" pos:column="21">(</op:operator><name><name pos:line="165" pos:column="22">sc</name><op:operator pos:line="165" pos:column="24">.</op:operator><name pos:line="165" pos:column="25">state</name></name> <op:operator pos:line="165" pos:column="31">==</op:operator> <name pos:line="165" pos:column="34">SCE_A68K_STRING2</name><op:operator pos:line="165" pos:column="50">)</op:operator>    <op:operator pos:line="165" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="165" pos:column="58">(</op:operator><name><name pos:line="165" pos:column="59">sc</name><op:operator pos:line="165" pos:column="61">.</op:operator><name pos:line="165" pos:column="62">ch</name></name> <op:operator pos:line="165" pos:column="65">!=</op:operator> <lit:literal type="char" pos:line="165" pos:column="68">'\"'</lit:literal><op:operator pos:line="165" pos:column="72">)</op:operator><op:operator pos:line="165" pos:column="73">)</op:operator>                                   <comment type="line" pos:line="165" pos:column="109">// String double-quoted</comment>
                <op:operator pos:line="166" pos:column="17">||</op:operator> <op:operator pos:line="166" pos:column="20">(</op:operator><op:operator pos:line="166" pos:column="21">(</op:operator><name><name pos:line="166" pos:column="22">sc</name><op:operator pos:line="166" pos:column="24">.</op:operator><name pos:line="166" pos:column="25">state</name></name> <op:operator pos:line="166" pos:column="31">==</op:operator> <name pos:line="166" pos:column="34">SCE_A68K_MACRO_ARG</name><op:operator pos:line="166" pos:column="52">)</op:operator>  <op:operator pos:line="166" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="166" pos:column="58">isdigit</name><argument_list pos:line="166" pos:column="65">(<argument><expr><name><name pos:line="166" pos:column="66">sc</name><op:operator pos:line="166" pos:column="68">.</op:operator><name pos:line="166" pos:column="69">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="166" pos:column="72">)</op:operator>                                    <comment type="line" pos:line="166" pos:column="109">// Macro argument</comment>
                <comment type="line" pos:line="167" pos:column="17">// Label. ' ' and '\t' are needed to handle macro declarations</comment>
                <op:operator pos:line="168" pos:column="17">||</op:operator> <op:operator pos:line="168" pos:column="20">(</op:operator><op:operator pos:line="168" pos:column="21">(</op:operator><name><name pos:line="168" pos:column="22">sc</name><op:operator pos:line="168" pos:column="24">.</op:operator><name pos:line="168" pos:column="25">state</name></name> <op:operator pos:line="168" pos:column="31">==</op:operator> <name pos:line="168" pos:column="34">SCE_A68K_LABEL</name><op:operator pos:line="168" pos:column="48">)</op:operator>      <op:operator pos:line="168" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="168" pos:column="58">(</op:operator><name><name pos:line="168" pos:column="59">sc</name><op:operator pos:line="168" pos:column="61">.</op:operator><name pos:line="168" pos:column="62">ch</name></name> <op:operator pos:line="168" pos:column="65">!=</op:operator> <lit:literal type="char" pos:line="168" pos:column="68">':'</lit:literal><op:operator pos:line="168" pos:column="71">)</op:operator> <op:operator pos:line="168" pos:column="73">&amp;&amp;</op:operator> <op:operator pos:line="168" pos:column="76">(</op:operator><name><name pos:line="168" pos:column="77">sc</name><op:operator pos:line="168" pos:column="79">.</op:operator><name pos:line="168" pos:column="80">ch</name></name> <op:operator pos:line="168" pos:column="83">!=</op:operator> <lit:literal type="char" pos:line="168" pos:column="86">' '</lit:literal><op:operator pos:line="168" pos:column="89">)</op:operator> <op:operator pos:line="168" pos:column="91">&amp;&amp;</op:operator> <op:operator pos:line="168" pos:column="94">(</op:operator><name><name pos:line="168" pos:column="95">sc</name><op:operator pos:line="168" pos:column="97">.</op:operator><name pos:line="168" pos:column="98">ch</name></name> <op:operator pos:line="168" pos:column="101">!=</op:operator> <lit:literal type="char" pos:line="168" pos:column="104">'\t'</lit:literal><op:operator pos:line="168" pos:column="108">)</op:operator><op:operator pos:line="168" pos:column="109">)</op:operator>
                <op:operator pos:line="169" pos:column="17">||</op:operator> <op:operator pos:line="169" pos:column="20">(</op:operator><op:operator pos:line="169" pos:column="21">(</op:operator><name><name pos:line="169" pos:column="22">sc</name><op:operator pos:line="169" pos:column="24">.</op:operator><name pos:line="169" pos:column="25">state</name></name> <op:operator pos:line="169" pos:column="31">==</op:operator> <name pos:line="169" pos:column="34">SCE_A68K_IDENTIFIER</name><op:operator pos:line="169" pos:column="53">)</op:operator> <op:operator pos:line="169" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="169" pos:column="58">(</op:operator><name><name pos:line="169" pos:column="59">sc</name><op:operator pos:line="169" pos:column="61">.</op:operator><name pos:line="169" pos:column="62">ch</name></name> <op:operator pos:line="169" pos:column="65">&lt;</op:operator> <lit:literal type="number" pos:line="169" pos:column="67">0x80</lit:literal><op:operator pos:line="169" pos:column="71">)</op:operator> <op:operator pos:line="169" pos:column="73">&amp;&amp;</op:operator> <call><name pos:line="169" pos:column="76">IsIdentifierChar</name><argument_list pos:line="169" pos:column="92">(<argument><expr><name><name pos:line="169" pos:column="93">sc</name><op:operator pos:line="169" pos:column="95">.</op:operator><name pos:line="169" pos:column="96">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="169" pos:column="99">)</op:operator>         <comment type="line" pos:line="169" pos:column="109">// Identifier</comment>
                <op:operator pos:line="170" pos:column="17">||</op:operator> <op:operator pos:line="170" pos:column="20">(</op:operator><op:operator pos:line="170" pos:column="21">(</op:operator><name><name pos:line="170" pos:column="22">sc</name><op:operator pos:line="170" pos:column="24">.</op:operator><name pos:line="170" pos:column="25">state</name></name> <op:operator pos:line="170" pos:column="31">==</op:operator> <name pos:line="170" pos:column="34">SCE_A68K_COMMENT_DOXYGEN</name><op:operator pos:line="170" pos:column="58">)</op:operator> <op:operator pos:line="170" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="170" pos:column="63">(</op:operator><name><name pos:line="170" pos:column="64">sc</name><op:operator pos:line="170" pos:column="66">.</op:operator><name pos:line="170" pos:column="67">ch</name></name> <op:operator pos:line="170" pos:column="70">&lt;</op:operator> <lit:literal type="number" pos:line="170" pos:column="72">0x80</lit:literal><op:operator pos:line="170" pos:column="76">)</op:operator> <op:operator pos:line="170" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="170" pos:column="81">IsDoxygenChar</name><argument_list pos:line="170" pos:column="94">(<argument><expr><name><name pos:line="170" pos:column="95">sc</name><op:operator pos:line="170" pos:column="97">.</op:operator><name pos:line="170" pos:column="98">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="101">)</op:operator>       <comment type="line" pos:line="170" pos:column="109">// Doxygen keyword</comment>
                <op:operator pos:line="171" pos:column="17">||</op:operator> <op:operator pos:line="171" pos:column="20">(</op:operator><op:operator pos:line="171" pos:column="21">(</op:operator><name><name pos:line="171" pos:column="22">sc</name><op:operator pos:line="171" pos:column="24">.</op:operator><name pos:line="171" pos:column="25">state</name></name> <op:operator pos:line="171" pos:column="31">==</op:operator> <name pos:line="171" pos:column="34">SCE_A68K_COMMENT_WORD</name><op:operator pos:line="171" pos:column="55">)</op:operator> <op:operator pos:line="171" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="171" pos:column="60">(</op:operator><name><name pos:line="171" pos:column="61">sc</name><op:operator pos:line="171" pos:column="63">.</op:operator><name pos:line="171" pos:column="64">ch</name></name> <op:operator pos:line="171" pos:column="67">&lt;</op:operator> <lit:literal type="number" pos:line="171" pos:column="69">0x80</lit:literal><op:operator pos:line="171" pos:column="73">)</op:operator> <op:operator pos:line="171" pos:column="75">&amp;&amp;</op:operator> <call><name pos:line="171" pos:column="78">isalpha</name><argument_list pos:line="171" pos:column="85">(<argument><expr><name><name pos:line="171" pos:column="86">sc</name><op:operator pos:line="171" pos:column="88">.</op:operator><name pos:line="171" pos:column="89">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="171" pos:column="92">)</op:operator></expr>)</condition><then pos:line="171" pos:column="94">               <comment type="line" pos:line="171" pos:column="109">// Comment current word</comment>
            <block pos:line="172" pos:column="13">{
                <continue pos:line="173" pos:column="17">continue;</continue>
            }</block></then>

            <comment type="line" pos:line="176" pos:column="13">// Check if some states terminate at the current char:</comment>
            <comment type="line" pos:line="177" pos:column="13">// we must include this char in the current style context</comment>
            <else pos:line="178" pos:column="13">else <if pos:line="178" pos:column="18">if <condition pos:line="178" pos:column="21">(<expr><op:operator pos:line="178" pos:column="22">(</op:operator><op:operator pos:line="178" pos:column="23">(</op:operator><name><name pos:line="178" pos:column="24">sc</name><op:operator pos:line="178" pos:column="26">.</op:operator><name pos:line="178" pos:column="27">state</name></name> <op:operator pos:line="178" pos:column="33">==</op:operator> <name pos:line="178" pos:column="36">SCE_A68K_STRING1</name><op:operator pos:line="178" pos:column="52">)</op:operator>    <op:operator pos:line="178" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="178" pos:column="60">(</op:operator><name><name pos:line="178" pos:column="61">sc</name><op:operator pos:line="178" pos:column="63">.</op:operator><name pos:line="178" pos:column="64">ch</name></name> <op:operator pos:line="178" pos:column="67">&lt;</op:operator> <lit:literal type="number" pos:line="178" pos:column="69">0x80</lit:literal><op:operator pos:line="178" pos:column="73">)</op:operator> <op:operator pos:line="178" pos:column="75">&amp;&amp;</op:operator> <op:operator pos:line="178" pos:column="78">(</op:operator><name><name pos:line="178" pos:column="79">sc</name><op:operator pos:line="178" pos:column="81">.</op:operator><name pos:line="178" pos:column="82">ch</name></name> <op:operator pos:line="178" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="178" pos:column="88">'\''</lit:literal><op:operator pos:line="178" pos:column="92">)</op:operator><op:operator pos:line="178" pos:column="93">)</op:operator>       <comment type="line" pos:line="178" pos:column="101">// String single-quoted</comment>
                     <op:operator pos:line="179" pos:column="22">||</op:operator> <op:operator pos:line="179" pos:column="25">(</op:operator><op:operator pos:line="179" pos:column="26">(</op:operator><name><name pos:line="179" pos:column="27">sc</name><op:operator pos:line="179" pos:column="29">.</op:operator><name pos:line="179" pos:column="30">state</name></name> <op:operator pos:line="179" pos:column="36">==</op:operator> <name pos:line="179" pos:column="39">SCE_A68K_STRING2</name><op:operator pos:line="179" pos:column="55">)</op:operator> <op:operator pos:line="179" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="179" pos:column="60">(</op:operator><name><name pos:line="179" pos:column="61">sc</name><op:operator pos:line="179" pos:column="63">.</op:operator><name pos:line="179" pos:column="64">ch</name></name> <op:operator pos:line="179" pos:column="67">&lt;</op:operator> <lit:literal type="number" pos:line="179" pos:column="69">0x80</lit:literal><op:operator pos:line="179" pos:column="73">)</op:operator> <op:operator pos:line="179" pos:column="75">&amp;&amp;</op:operator> <op:operator pos:line="179" pos:column="78">(</op:operator><name><name pos:line="179" pos:column="79">sc</name><op:operator pos:line="179" pos:column="81">.</op:operator><name pos:line="179" pos:column="82">ch</name></name> <op:operator pos:line="179" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="88">'\"'</lit:literal><op:operator pos:line="179" pos:column="92">)</op:operator><op:operator pos:line="179" pos:column="93">)</op:operator>       <comment type="line" pos:line="179" pos:column="101">// String double-quoted</comment>
                     <op:operator pos:line="180" pos:column="22">||</op:operator> <op:operator pos:line="180" pos:column="25">(</op:operator><op:operator pos:line="180" pos:column="26">(</op:operator><name><name pos:line="180" pos:column="27">sc</name><op:operator pos:line="180" pos:column="29">.</op:operator><name pos:line="180" pos:column="30">state</name></name> <op:operator pos:line="180" pos:column="36">==</op:operator> <name pos:line="180" pos:column="39">SCE_A68K_LABEL</name><op:operator pos:line="180" pos:column="53">)</op:operator>   <op:operator pos:line="180" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="180" pos:column="60">(</op:operator><name><name pos:line="180" pos:column="61">sc</name><op:operator pos:line="180" pos:column="63">.</op:operator><name pos:line="180" pos:column="64">ch</name></name> <op:operator pos:line="180" pos:column="67">&lt;</op:operator> <lit:literal type="number" pos:line="180" pos:column="69">0x80</lit:literal><op:operator pos:line="180" pos:column="73">)</op:operator> <op:operator pos:line="180" pos:column="75">&amp;&amp;</op:operator> <op:operator pos:line="180" pos:column="78">(</op:operator><name><name pos:line="180" pos:column="79">sc</name><op:operator pos:line="180" pos:column="81">.</op:operator><name pos:line="180" pos:column="82">ch</name></name> <op:operator pos:line="180" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="180" pos:column="88">':'</lit:literal><op:operator pos:line="180" pos:column="91">)</op:operator><op:operator pos:line="180" pos:column="92">)</op:operator></expr>)</condition><then pos:line="180" pos:column="94">       <comment type="line" pos:line="180" pos:column="101">// Label</comment>
            <block pos:line="181" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="182" pos:column="17">sc</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">ForwardSetState</name></name><argument_list pos:line="182" pos:column="35">(<argument><expr><name pos:line="182" pos:column="36">SCE_A68K_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>

            <comment type="line" pos:line="185" pos:column="13">// Check for special words or Doxygen keywords in comments</comment>
            <else pos:line="186" pos:column="13">else <if pos:line="186" pos:column="18">if <condition pos:line="186" pos:column="21">(<expr><name><name pos:line="186" pos:column="22">sc</name><op:operator pos:line="186" pos:column="24">.</op:operator><name pos:line="186" pos:column="25">state</name></name> <op:operator pos:line="186" pos:column="31">==</op:operator> <name pos:line="186" pos:column="34">SCE_A68K_COMMENT</name></expr>)</condition><then pos:line="186" pos:column="51">
            <block pos:line="187" pos:column="13">{
                <if pos:line="188" pos:column="17">if <condition pos:line="188" pos:column="20">(<expr><name><name pos:line="188" pos:column="21">sc</name><op:operator pos:line="188" pos:column="23">.</op:operator><name pos:line="188" pos:column="24">ch</name></name> <op:operator pos:line="188" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="188" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="188" pos:column="35"> <block pos:line="188" pos:column="36">{
                    <expr_stmt><expr><call><name><name pos:line="189" pos:column="21">sc</name><op:operator pos:line="189" pos:column="23">.</op:operator><name pos:line="189" pos:column="24">SetState</name></name><argument_list pos:line="189" pos:column="32">(<argument><expr><name pos:line="189" pos:column="33">SCE_A68K_COMMENT_DOXYGEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="191" pos:column="17">else <if pos:line="191" pos:column="22">if <condition pos:line="191" pos:column="25">(<expr><op:operator pos:line="191" pos:column="26">(</op:operator><name><name pos:line="191" pos:column="27">sc</name><op:operator pos:line="191" pos:column="29">.</op:operator><name pos:line="191" pos:column="30">ch</name></name> <op:operator pos:line="191" pos:column="33">&lt;</op:operator> <lit:literal type="number" pos:line="191" pos:column="35">0x80</lit:literal><op:operator pos:line="191" pos:column="39">)</op:operator> <op:operator pos:line="191" pos:column="41">&amp;&amp;</op:operator> <call><name pos:line="191" pos:column="44">isalpha</name><argument_list pos:line="191" pos:column="51">(<argument><expr><name><name pos:line="191" pos:column="52">sc</name><op:operator pos:line="191" pos:column="54">.</op:operator><name pos:line="191" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="191" pos:column="59"> <block pos:line="191" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="192" pos:column="21">sc</name><op:operator pos:line="192" pos:column="23">.</op:operator><name pos:line="192" pos:column="24">SetState</name></name><argument_list pos:line="192" pos:column="32">(<argument><expr><name pos:line="192" pos:column="33">SCE_A68K_COMMENT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
                <continue pos:line="194" pos:column="17">continue;</continue>
            }</block></then>

            <comment type="line" pos:line="197" pos:column="13">// Check for special words in comment</comment>
            <else pos:line="198" pos:column="13">else <if pos:line="198" pos:column="18">if <condition pos:line="198" pos:column="21">(<expr><op:operator pos:line="198" pos:column="22">(</op:operator><name><name pos:line="198" pos:column="23">sc</name><op:operator pos:line="198" pos:column="25">.</op:operator><name pos:line="198" pos:column="26">state</name></name> <op:operator pos:line="198" pos:column="32">==</op:operator> <name pos:line="198" pos:column="35">SCE_A68K_COMMENT_WORD</name><op:operator pos:line="198" pos:column="56">)</op:operator> <op:operator pos:line="198" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="198" pos:column="61">(</op:operator><name><name pos:line="198" pos:column="62">sc</name><op:operator pos:line="198" pos:column="64">.</op:operator><name pos:line="198" pos:column="65">ch</name></name> <op:operator pos:line="198" pos:column="68">&lt;</op:operator> <lit:literal type="number" pos:line="198" pos:column="70">0x80</lit:literal><op:operator pos:line="198" pos:column="74">)</op:operator> <op:operator pos:line="198" pos:column="76">&amp;&amp;</op:operator> <op:operator pos:line="198" pos:column="79">!</op:operator><call><name pos:line="198" pos:column="80">isalpha</name><argument_list pos:line="198" pos:column="87">(<argument><expr><name><name pos:line="198" pos:column="88">sc</name><op:operator pos:line="198" pos:column="90">.</op:operator><name pos:line="198" pos:column="91">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="198" pos:column="95">
            <block pos:line="199" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="200" pos:column="17">sc</name><op:operator pos:line="200" pos:column="19">.</op:operator><name pos:line="200" pos:column="20">GetCurrent</name></name><argument_list pos:line="200" pos:column="30">(<argument><expr><name pos:line="200" pos:column="31">Buffer</name></expr></argument>, <argument><expr><sizeof pos:line="200" pos:column="39">sizeof<argument_list pos:line="200" pos:column="45">(<argument><expr><name pos:line="200" pos:column="46">Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="201" pos:column="17">if <condition pos:line="201" pos:column="20">(<expr><call><name><name pos:line="201" pos:column="21">commentSpecial</name><op:operator pos:line="201" pos:column="35">.</op:operator><name pos:line="201" pos:column="36">InList</name></name><argument_list pos:line="201" pos:column="42">(<argument><expr><name pos:line="201" pos:column="43">Buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="201" pos:column="51"> <block pos:line="201" pos:column="52">{
                    <expr_stmt><expr><call><name><name pos:line="202" pos:column="21">sc</name><op:operator pos:line="202" pos:column="23">.</op:operator><name pos:line="202" pos:column="24">ChangeState</name></name><argument_list pos:line="202" pos:column="35">(<argument><expr><name pos:line="202" pos:column="36">SCE_A68K_COMMENT_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="204" pos:column="17">else <block pos:line="204" pos:column="22">{
                    <expr_stmt><expr><call><name><name pos:line="205" pos:column="21">sc</name><op:operator pos:line="205" pos:column="23">.</op:operator><name pos:line="205" pos:column="24">ChangeState</name></name><argument_list pos:line="205" pos:column="35">(<argument><expr><name pos:line="205" pos:column="36">SCE_A68K_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name pos:line="207" pos:column="17">sc</name><op:operator pos:line="207" pos:column="19">.</op:operator><name pos:line="207" pos:column="20">SetState</name></name><argument_list pos:line="207" pos:column="28">(<argument><expr><name pos:line="207" pos:column="29">SCE_A68K_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue pos:line="208" pos:column="17">continue;</continue>
            }</block></then>

            <comment type="line" pos:line="211" pos:column="13">// Check for Doxygen keywords</comment>
            <else pos:line="212" pos:column="13">else <if pos:line="212" pos:column="18">if <condition pos:line="212" pos:column="21">(<expr><op:operator pos:line="212" pos:column="22">(</op:operator><name><name pos:line="212" pos:column="23">sc</name><op:operator pos:line="212" pos:column="25">.</op:operator><name pos:line="212" pos:column="26">state</name></name> <op:operator pos:line="212" pos:column="32">==</op:operator> <name pos:line="212" pos:column="35">SCE_A68K_COMMENT_DOXYGEN</name><op:operator pos:line="212" pos:column="59">)</op:operator> <op:operator pos:line="212" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="212" pos:column="64">(</op:operator><name><name pos:line="212" pos:column="65">sc</name><op:operator pos:line="212" pos:column="67">.</op:operator><name pos:line="212" pos:column="68">ch</name></name> <op:operator pos:line="212" pos:column="71">&lt;</op:operator> <lit:literal type="number" pos:line="212" pos:column="73">0x80</lit:literal><op:operator pos:line="212" pos:column="77">)</op:operator> <op:operator pos:line="212" pos:column="79">&amp;&amp;</op:operator> <op:operator pos:line="212" pos:column="82">!</op:operator><call><name pos:line="212" pos:column="83">IsDoxygenChar</name><argument_list pos:line="212" pos:column="96">(<argument><expr><name><name pos:line="212" pos:column="97">sc</name><op:operator pos:line="212" pos:column="99">.</op:operator><name pos:line="212" pos:column="100">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="212" pos:column="104">
            <block pos:line="213" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="214" pos:column="17">sc</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">GetCurrentLowered</name></name><argument_list pos:line="214" pos:column="37">(<argument><expr><name pos:line="214" pos:column="38">Buffer</name></expr></argument>, <argument><expr><sizeof pos:line="214" pos:column="46">sizeof<argument_list pos:line="214" pos:column="52">(<argument><expr><name pos:line="214" pos:column="53">Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="line" pos:line="214" pos:column="89">// Buffer the string of the current context</comment>
                <if pos:line="215" pos:column="17">if <condition pos:line="215" pos:column="20">(<expr><op:operator pos:line="215" pos:column="21">!</op:operator><call><name><name pos:line="215" pos:column="22">doxygenKeyword</name><op:operator pos:line="215" pos:column="36">.</op:operator><name pos:line="215" pos:column="37">InList</name></name><argument_list pos:line="215" pos:column="43">(<argument><expr><name pos:line="215" pos:column="44">Buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="215" pos:column="52"> <block pos:line="215" pos:column="53">{
                    <expr_stmt><expr><call><name><name pos:line="216" pos:column="21">sc</name><op:operator pos:line="216" pos:column="23">.</op:operator><name pos:line="216" pos:column="24">ChangeState</name></name><argument_list pos:line="216" pos:column="35">(<argument><expr><name pos:line="216" pos:column="36">SCE_A68K_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="218" pos:column="17">sc</name><op:operator pos:line="218" pos:column="19">.</op:operator><name pos:line="218" pos:column="20">SetState</name></name><argument_list pos:line="218" pos:column="28">(<argument><expr><name pos:line="218" pos:column="29">SCE_A68K_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue pos:line="219" pos:column="17">continue;</continue>
            }</block></then>

            <comment type="line" pos:line="222" pos:column="13">// Check if we are in the case of a label which terminates without ':'</comment>
            <comment type="line" pos:line="223" pos:column="13">// It should be a macro declaration, not a label</comment>
            <else pos:line="224" pos:column="13">else <if pos:line="224" pos:column="18">if <condition pos:line="224" pos:column="21">(<expr><op:operator pos:line="224" pos:column="22">(</op:operator><name><name pos:line="224" pos:column="23">sc</name><op:operator pos:line="224" pos:column="25">.</op:operator><name pos:line="224" pos:column="26">state</name></name> <op:operator pos:line="224" pos:column="32">==</op:operator> <name pos:line="224" pos:column="35">SCE_A68K_LABEL</name><op:operator pos:line="224" pos:column="49">)</op:operator> <op:operator pos:line="224" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="224" pos:column="54">(</op:operator><name><name pos:line="224" pos:column="55">sc</name><op:operator pos:line="224" pos:column="57">.</op:operator><name pos:line="224" pos:column="58">ch</name></name> <op:operator pos:line="224" pos:column="61">&lt;</op:operator> <lit:literal type="number" pos:line="224" pos:column="63">0x80</lit:literal><op:operator pos:line="224" pos:column="67">)</op:operator> <op:operator pos:line="224" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="224" pos:column="72">(</op:operator><op:operator pos:line="224" pos:column="73">(</op:operator><name><name pos:line="224" pos:column="74">sc</name><op:operator pos:line="224" pos:column="76">.</op:operator><name pos:line="224" pos:column="77">ch</name></name> <op:operator pos:line="224" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="224" pos:column="83">' '</lit:literal><op:operator pos:line="224" pos:column="86">)</op:operator> <op:operator pos:line="224" pos:column="88">||</op:operator> <op:operator pos:line="224" pos:column="91">(</op:operator><name><name pos:line="224" pos:column="92">sc</name><op:operator pos:line="224" pos:column="94">.</op:operator><name pos:line="224" pos:column="95">ch</name></name> <op:operator pos:line="224" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="224" pos:column="101">'\t'</lit:literal><op:operator pos:line="224" pos:column="105">)</op:operator><op:operator pos:line="224" pos:column="106">)</op:operator></expr>)</condition><then pos:line="224" pos:column="108">
            <block pos:line="225" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="226" pos:column="17">sc</name><op:operator pos:line="226" pos:column="19">.</op:operator><name pos:line="226" pos:column="20">ChangeState</name></name><argument_list pos:line="226" pos:column="31">(<argument><expr><name pos:line="226" pos:column="32">SCE_A68K_MACRO_DECLARATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>

            <comment type="line" pos:line="229" pos:column="13">// Check if we are at the end of an identifier</comment>
            <comment type="line" pos:line="230" pos:column="13">// In this case, colourise it if was a keyword.</comment>
            <else pos:line="231" pos:column="13">else <if pos:line="231" pos:column="18">if <condition pos:line="231" pos:column="21">(<expr><op:operator pos:line="231" pos:column="22">(</op:operator><name><name pos:line="231" pos:column="23">sc</name><op:operator pos:line="231" pos:column="25">.</op:operator><name pos:line="231" pos:column="26">state</name></name> <op:operator pos:line="231" pos:column="32">==</op:operator> <name pos:line="231" pos:column="35">SCE_A68K_IDENTIFIER</name><op:operator pos:line="231" pos:column="54">)</op:operator> <op:operator pos:line="231" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="231" pos:column="59">!</op:operator><call><name pos:line="231" pos:column="60">IsIdentifierChar</name><argument_list pos:line="231" pos:column="76">(<argument><expr><name><name pos:line="231" pos:column="77">sc</name><op:operator pos:line="231" pos:column="79">.</op:operator><name pos:line="231" pos:column="80">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="231" pos:column="84">
            <block pos:line="232" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="233" pos:column="17">sc</name><op:operator pos:line="233" pos:column="19">.</op:operator><name pos:line="233" pos:column="20">GetCurrentLowered</name></name><argument_list pos:line="233" pos:column="37">(<argument><expr><name pos:line="233" pos:column="38">Buffer</name></expr></argument>, <argument><expr><sizeof pos:line="233" pos:column="46">sizeof<argument_list pos:line="233" pos:column="52">(<argument><expr><name pos:line="233" pos:column="53">Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="line" pos:line="233" pos:column="89">// Buffer the string of the current context</comment>
                <if pos:line="234" pos:column="17">if <condition pos:line="234" pos:column="20">(<expr><call><name><name pos:line="234" pos:column="21">cpuInstruction</name><op:operator pos:line="234" pos:column="35">.</op:operator><name pos:line="234" pos:column="36">InList</name></name><argument_list pos:line="234" pos:column="42">(<argument><expr><name pos:line="234" pos:column="43">Buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="234" pos:column="51"> <block pos:line="234" pos:column="52">{                                    <comment type="line" pos:line="234" pos:column="89">// And check if it belongs to a keyword list</comment>
                    <expr_stmt><expr><call><name><name pos:line="235" pos:column="21">sc</name><op:operator pos:line="235" pos:column="23">.</op:operator><name pos:line="235" pos:column="24">ChangeState</name></name><argument_list pos:line="235" pos:column="35">(<argument><expr><name pos:line="235" pos:column="36">SCE_A68K_CPUINSTRUCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="237" pos:column="17">else <if pos:line="237" pos:column="22">if <condition pos:line="237" pos:column="25">(<expr><call><name><name pos:line="237" pos:column="26">extInstruction</name><op:operator pos:line="237" pos:column="40">.</op:operator><name pos:line="237" pos:column="41">InList</name></name><argument_list pos:line="237" pos:column="47">(<argument><expr><name pos:line="237" pos:column="48">Buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="237" pos:column="56"> <block pos:line="237" pos:column="57">{
                    <expr_stmt><expr><call><name><name pos:line="238" pos:column="21">sc</name><op:operator pos:line="238" pos:column="23">.</op:operator><name pos:line="238" pos:column="24">ChangeState</name></name><argument_list pos:line="238" pos:column="35">(<argument><expr><name pos:line="238" pos:column="36">SCE_A68K_EXTINSTRUCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="240" pos:column="17">else <if pos:line="240" pos:column="22">if <condition pos:line="240" pos:column="25">(<expr><call><name><name pos:line="240" pos:column="26">registers</name><op:operator pos:line="240" pos:column="35">.</op:operator><name pos:line="240" pos:column="36">InList</name></name><argument_list pos:line="240" pos:column="42">(<argument><expr><name pos:line="240" pos:column="43">Buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="240" pos:column="51"> <block pos:line="240" pos:column="52">{
                    <expr_stmt><expr><call><name><name pos:line="241" pos:column="21">sc</name><op:operator pos:line="241" pos:column="23">.</op:operator><name pos:line="241" pos:column="24">ChangeState</name></name><argument_list pos:line="241" pos:column="35">(<argument><expr><name pos:line="241" pos:column="36">SCE_A68K_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="243" pos:column="17">else <if pos:line="243" pos:column="22">if <condition pos:line="243" pos:column="25">(<expr><call><name><name pos:line="243" pos:column="26">directive</name><op:operator pos:line="243" pos:column="35">.</op:operator><name pos:line="243" pos:column="36">InList</name></name><argument_list pos:line="243" pos:column="42">(<argument><expr><name pos:line="243" pos:column="43">Buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="243" pos:column="51"> <block pos:line="243" pos:column="52">{
                    <expr_stmt><expr><call><name><name pos:line="244" pos:column="21">sc</name><op:operator pos:line="244" pos:column="23">.</op:operator><name pos:line="244" pos:column="24">ChangeState</name></name><argument_list pos:line="244" pos:column="35">(<argument><expr><name pos:line="244" pos:column="36">SCE_A68K_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if></else></if>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

            <comment type="line" pos:line="248" pos:column="13">// All special contexts are now handled.Come back to default style</comment>
            <expr_stmt><expr><call><name><name pos:line="249" pos:column="13">sc</name><op:operator pos:line="249" pos:column="15">.</op:operator><name pos:line="249" pos:column="16">SetState</name></name><argument_list pos:line="249" pos:column="24">(<argument><expr><name pos:line="249" pos:column="25">SCE_A68K_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>


        <comment type="block" format="doxygen" pos:line="253" pos:column="9">/************************************************************
        *
        *   Check if we must enter a new state
        *
        ************************************************************/</comment>

        <comment type="line" pos:line="259" pos:column="9">// Label and macro identifiers start at the beginning of a line</comment>
        <comment type="line" pos:line="260" pos:column="9">// We set both as a label, but if it wasn't one (no ':' at the end),</comment>
        <comment type="line" pos:line="261" pos:column="9">// it will be changed as a macro identifier.</comment>
        <if pos:line="262" pos:column="9">if <condition pos:line="262" pos:column="12">(<expr><name><name pos:line="262" pos:column="13">sc</name><op:operator pos:line="262" pos:column="15">.</op:operator><name pos:line="262" pos:column="16">atLineStart</name></name> <op:operator pos:line="262" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="262" pos:column="31">(</op:operator><name><name pos:line="262" pos:column="32">sc</name><op:operator pos:line="262" pos:column="34">.</op:operator><name pos:line="262" pos:column="35">ch</name></name> <op:operator pos:line="262" pos:column="38">&lt;</op:operator> <lit:literal type="number" pos:line="262" pos:column="40">0x80</lit:literal><op:operator pos:line="262" pos:column="44">)</op:operator> <op:operator pos:line="262" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="262" pos:column="49">IsIdentifierStart</name><argument_list pos:line="262" pos:column="66">(<argument><expr><name><name pos:line="262" pos:column="67">sc</name><op:operator pos:line="262" pos:column="69">.</op:operator><name pos:line="262" pos:column="70">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="262" pos:column="74"> <block pos:line="262" pos:column="75">{
            <expr_stmt><expr><call><name><name pos:line="263" pos:column="13">sc</name><op:operator pos:line="263" pos:column="15">.</op:operator><name pos:line="263" pos:column="16">SetState</name></name><argument_list pos:line="263" pos:column="24">(<argument><expr><name pos:line="263" pos:column="25">SCE_A68K_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="265" pos:column="9">else <if pos:line="265" pos:column="14">if <condition pos:line="265" pos:column="17">(<expr><op:operator pos:line="265" pos:column="18">(</op:operator><name><name pos:line="265" pos:column="19">sc</name><op:operator pos:line="265" pos:column="21">.</op:operator><name pos:line="265" pos:column="22">ch</name></name> <op:operator pos:line="265" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="265" pos:column="27">0x80</lit:literal><op:operator pos:line="265" pos:column="31">)</op:operator> <op:operator pos:line="265" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="265" pos:column="36">(</op:operator><name><name pos:line="265" pos:column="37">sc</name><op:operator pos:line="265" pos:column="39">.</op:operator><name pos:line="265" pos:column="40">ch</name></name> <op:operator pos:line="265" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="265" pos:column="46">';'</lit:literal><op:operator pos:line="265" pos:column="49">)</op:operator></expr>)</condition><then pos:line="265" pos:column="51"> <block pos:line="265" pos:column="52">{                            <comment type="line" pos:line="265" pos:column="81">// Comment</comment>
            <expr_stmt><expr><call><name><name pos:line="266" pos:column="13">sc</name><op:operator pos:line="266" pos:column="15">.</op:operator><name pos:line="266" pos:column="16">SetState</name></name><argument_list pos:line="266" pos:column="24">(<argument><expr><name pos:line="266" pos:column="25">SCE_A68K_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="268" pos:column="9">else <if pos:line="268" pos:column="14">if <condition pos:line="268" pos:column="17">(<expr><op:operator pos:line="268" pos:column="18">(</op:operator><name><name pos:line="268" pos:column="19">sc</name><op:operator pos:line="268" pos:column="21">.</op:operator><name pos:line="268" pos:column="22">ch</name></name> <op:operator pos:line="268" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="268" pos:column="27">0x80</lit:literal><op:operator pos:line="268" pos:column="31">)</op:operator> <op:operator pos:line="268" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="268" pos:column="36">isdigit</name><argument_list pos:line="268" pos:column="43">(<argument><expr><name><name pos:line="268" pos:column="44">sc</name><op:operator pos:line="268" pos:column="46">.</op:operator><name pos:line="268" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="268" pos:column="51"> <block pos:line="268" pos:column="52">{                            <comment type="line" pos:line="268" pos:column="81">// Decimal numbers haven't prefix</comment>
            <expr_stmt><expr><call><name><name pos:line="269" pos:column="13">sc</name><op:operator pos:line="269" pos:column="15">.</op:operator><name pos:line="269" pos:column="16">SetState</name></name><argument_list pos:line="269" pos:column="24">(<argument><expr><name pos:line="269" pos:column="25">SCE_A68K_NUMBER_DEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="271" pos:column="9">else <if pos:line="271" pos:column="14">if <condition pos:line="271" pos:column="17">(<expr><op:operator pos:line="271" pos:column="18">(</op:operator><name><name pos:line="271" pos:column="19">sc</name><op:operator pos:line="271" pos:column="21">.</op:operator><name pos:line="271" pos:column="22">ch</name></name> <op:operator pos:line="271" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="271" pos:column="27">0x80</lit:literal><op:operator pos:line="271" pos:column="31">)</op:operator> <op:operator pos:line="271" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="271" pos:column="36">(</op:operator><name><name pos:line="271" pos:column="37">sc</name><op:operator pos:line="271" pos:column="39">.</op:operator><name pos:line="271" pos:column="40">ch</name></name> <op:operator pos:line="271" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="271" pos:column="46">'%'</lit:literal><op:operator pos:line="271" pos:column="49">)</op:operator></expr>)</condition><then pos:line="271" pos:column="51"> <block pos:line="271" pos:column="52">{                            <comment type="line" pos:line="271" pos:column="81">// Binary numbers are prefixed with '%'</comment>
            <expr_stmt><expr><call><name><name pos:line="272" pos:column="13">sc</name><op:operator pos:line="272" pos:column="15">.</op:operator><name pos:line="272" pos:column="16">SetState</name></name><argument_list pos:line="272" pos:column="24">(<argument><expr><name pos:line="272" pos:column="25">SCE_A68K_NUMBER_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="274" pos:column="9">else <if pos:line="274" pos:column="14">if <condition pos:line="274" pos:column="17">(<expr><op:operator pos:line="274" pos:column="18">(</op:operator><name><name pos:line="274" pos:column="19">sc</name><op:operator pos:line="274" pos:column="21">.</op:operator><name pos:line="274" pos:column="22">ch</name></name> <op:operator pos:line="274" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="274" pos:column="27">0x80</lit:literal><op:operator pos:line="274" pos:column="31">)</op:operator> <op:operator pos:line="274" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="274" pos:column="36">(</op:operator><name><name pos:line="274" pos:column="37">sc</name><op:operator pos:line="274" pos:column="39">.</op:operator><name pos:line="274" pos:column="40">ch</name></name> <op:operator pos:line="274" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="274" pos:column="46">'$'</lit:literal><op:operator pos:line="274" pos:column="49">)</op:operator></expr>)</condition><then pos:line="274" pos:column="51"> <block pos:line="274" pos:column="52">{                            <comment type="line" pos:line="274" pos:column="81">// Hexadecimal numbers are prefixed with '$'</comment>
            <expr_stmt><expr><call><name><name pos:line="275" pos:column="13">sc</name><op:operator pos:line="275" pos:column="15">.</op:operator><name pos:line="275" pos:column="16">SetState</name></name><argument_list pos:line="275" pos:column="24">(<argument><expr><name pos:line="275" pos:column="25">SCE_A68K_NUMBER_HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="277" pos:column="9">else <if pos:line="277" pos:column="14">if <condition pos:line="277" pos:column="17">(<expr><op:operator pos:line="277" pos:column="18">(</op:operator><name><name pos:line="277" pos:column="19">sc</name><op:operator pos:line="277" pos:column="21">.</op:operator><name pos:line="277" pos:column="22">ch</name></name> <op:operator pos:line="277" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="277" pos:column="27">0x80</lit:literal><op:operator pos:line="277" pos:column="31">)</op:operator> <op:operator pos:line="277" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="277" pos:column="36">(</op:operator><name><name pos:line="277" pos:column="37">sc</name><op:operator pos:line="277" pos:column="39">.</op:operator><name pos:line="277" pos:column="40">ch</name></name> <op:operator pos:line="277" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="277" pos:column="46">'\''</lit:literal><op:operator pos:line="277" pos:column="50">)</op:operator></expr>)</condition><then pos:line="277" pos:column="52"> <block pos:line="277" pos:column="53">{                           <comment type="line" pos:line="277" pos:column="81">// String (single-quoted)</comment>
            <expr_stmt><expr><call><name><name pos:line="278" pos:column="13">sc</name><op:operator pos:line="278" pos:column="15">.</op:operator><name pos:line="278" pos:column="16">SetState</name></name><argument_list pos:line="278" pos:column="24">(<argument><expr><name pos:line="278" pos:column="25">SCE_A68K_STRING1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="280" pos:column="9">else <if pos:line="280" pos:column="14">if <condition pos:line="280" pos:column="17">(<expr><op:operator pos:line="280" pos:column="18">(</op:operator><name><name pos:line="280" pos:column="19">sc</name><op:operator pos:line="280" pos:column="21">.</op:operator><name pos:line="280" pos:column="22">ch</name></name> <op:operator pos:line="280" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="280" pos:column="27">0x80</lit:literal><op:operator pos:line="280" pos:column="31">)</op:operator> <op:operator pos:line="280" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="280" pos:column="36">(</op:operator><name><name pos:line="280" pos:column="37">sc</name><op:operator pos:line="280" pos:column="39">.</op:operator><name pos:line="280" pos:column="40">ch</name></name> <op:operator pos:line="280" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="46">'\"'</lit:literal><op:operator pos:line="280" pos:column="50">)</op:operator></expr>)</condition><then pos:line="280" pos:column="52"> <block pos:line="280" pos:column="53">{                           <comment type="line" pos:line="280" pos:column="81">// String (double-quoted)</comment>
            <expr_stmt><expr><call><name><name pos:line="281" pos:column="13">sc</name><op:operator pos:line="281" pos:column="15">.</op:operator><name pos:line="281" pos:column="16">SetState</name></name><argument_list pos:line="281" pos:column="24">(<argument><expr><name pos:line="281" pos:column="25">SCE_A68K_STRING2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="283" pos:column="9">else <if pos:line="283" pos:column="14">if <condition pos:line="283" pos:column="17">(<expr><op:operator pos:line="283" pos:column="18">(</op:operator><name><name pos:line="283" pos:column="19">sc</name><op:operator pos:line="283" pos:column="21">.</op:operator><name pos:line="283" pos:column="22">ch</name></name> <op:operator pos:line="283" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="283" pos:column="27">0x80</lit:literal><op:operator pos:line="283" pos:column="31">)</op:operator> <op:operator pos:line="283" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="283" pos:column="36">(</op:operator><name><name pos:line="283" pos:column="37">sc</name><op:operator pos:line="283" pos:column="39">.</op:operator><name pos:line="283" pos:column="40">ch</name></name> <op:operator pos:line="283" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="283" pos:column="46">'\\'</lit:literal><op:operator pos:line="283" pos:column="50">)</op:operator> <op:operator pos:line="283" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="283" pos:column="55">(</op:operator><call><name pos:line="283" pos:column="56">isdigit</name><argument_list pos:line="283" pos:column="63">(<argument><expr><name><name pos:line="283" pos:column="64">sc</name><op:operator pos:line="283" pos:column="66">.</op:operator><name pos:line="283" pos:column="67">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="283" pos:column="74">)</op:operator></expr>)</condition><then pos:line="283" pos:column="76"> <block pos:line="283" pos:column="77">{   <comment type="line" pos:line="283" pos:column="81">// Replacement symbols in macro</comment>
            <expr_stmt><expr><call><name><name pos:line="284" pos:column="13">sc</name><op:operator pos:line="284" pos:column="15">.</op:operator><name pos:line="284" pos:column="16">SetState</name></name><argument_list pos:line="284" pos:column="24">(<argument><expr><name pos:line="284" pos:column="25">SCE_A68K_MACRO_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="286" pos:column="9">else <if pos:line="286" pos:column="14">if <condition pos:line="286" pos:column="17">(<expr><op:operator pos:line="286" pos:column="18">(</op:operator><name><name pos:line="286" pos:column="19">sc</name><op:operator pos:line="286" pos:column="21">.</op:operator><name pos:line="286" pos:column="22">ch</name></name> <op:operator pos:line="286" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="286" pos:column="27">0x80</lit:literal><op:operator pos:line="286" pos:column="31">)</op:operator> <op:operator pos:line="286" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="286" pos:column="36">IsIdentifierStart</name><argument_list pos:line="286" pos:column="53">(<argument><expr><name><name pos:line="286" pos:column="54">sc</name><op:operator pos:line="286" pos:column="56">.</op:operator><name pos:line="286" pos:column="57">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="286" pos:column="61"> <block pos:line="286" pos:column="62">{                  <comment type="line" pos:line="286" pos:column="81">// An identifier: constant, label, etc...</comment>
            <expr_stmt><expr><call><name><name pos:line="287" pos:column="13">sc</name><op:operator pos:line="287" pos:column="15">.</op:operator><name pos:line="287" pos:column="16">SetState</name></name><argument_list pos:line="287" pos:column="24">(<argument><expr><name pos:line="287" pos:column="25">SCE_A68K_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="289" pos:column="9">else <block pos:line="289" pos:column="14">{
            <if pos:line="290" pos:column="13">if <condition pos:line="290" pos:column="16">(<expr><name><name pos:line="290" pos:column="17">sc</name><op:operator pos:line="290" pos:column="19">.</op:operator><name pos:line="290" pos:column="20">ch</name></name> <op:operator pos:line="290" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="290" pos:column="25">0x80</lit:literal></expr>)</condition><then pos:line="290" pos:column="30"> <block pos:line="290" pos:column="31">{
                <expr_stmt><expr><name pos:line="291" pos:column="17">OpType</name> <op:operator pos:line="291" pos:column="24">=</op:operator> <call><name pos:line="291" pos:column="26">GetOperatorType</name><argument_list pos:line="291" pos:column="41">(<argument><expr><name><name pos:line="291" pos:column="42">sc</name><op:operator pos:line="291" pos:column="44">.</op:operator><name pos:line="291" pos:column="45">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="291" pos:column="49">sc</name><op:operator pos:line="291" pos:column="51">.</op:operator><name pos:line="291" pos:column="52">chNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="line" pos:line="291" pos:column="81">// Check if current char is an operator</comment>
                <if pos:line="292" pos:column="17">if <condition pos:line="292" pos:column="20">(<expr><name pos:line="292" pos:column="21">OpType</name> <op:operator pos:line="292" pos:column="28">!=</op:operator> <name pos:line="292" pos:column="31">NO_OPERATOR</name></expr>)</condition><then pos:line="292" pos:column="43"> <block pos:line="292" pos:column="44">{
                    <expr_stmt><expr><call><name><name pos:line="293" pos:column="21">sc</name><op:operator pos:line="293" pos:column="23">.</op:operator><name pos:line="293" pos:column="24">SetState</name></name><argument_list pos:line="293" pos:column="32">(<argument><expr><name pos:line="293" pos:column="33">SCE_A68K_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="294" pos:column="21">if <condition pos:line="294" pos:column="24">(<expr><name pos:line="294" pos:column="25">OpType</name> <op:operator pos:line="294" pos:column="32">==</op:operator> <name pos:line="294" pos:column="35">OPERATOR_2CHAR</name></expr>)</condition><then pos:line="294" pos:column="50"> <block pos:line="294" pos:column="51">{                             <comment type="line" pos:line="294" pos:column="81">// Check if the operator is 2 bytes long</comment>
                        <expr_stmt><expr><call><name><name pos:line="295" pos:column="25">sc</name><op:operator pos:line="295" pos:column="27">.</op:operator><name pos:line="295" pos:column="28">ForwardSetState</name></name><argument_list pos:line="295" pos:column="43">(<argument><expr><name pos:line="295" pos:column="44">SCE_A68K_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="line" pos:line="295" pos:column="81">// (&gt;&gt; or &lt;&lt;)</comment>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></for>                                                                           <comment type="line" pos:line="300" pos:column="81">// End of for()</comment>
    <expr_stmt><expr><call><name><name pos:line="301" pos:column="5">sc</name><op:operator pos:line="301" pos:column="7">.</op:operator><name pos:line="301" pos:column="8">Complete</name></name><argument_list pos:line="301" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="line" pos:line="305" pos:column="1">// Names of the keyword lists</comment>

<decl_stmt><decl><type><specifier pos:line="307" pos:column="1">static</specifier> <specifier pos:line="307" pos:column="8">const</specifier> <name pos:line="307" pos:column="14">char</name> <type:modifier pos:line="307" pos:column="19">*</type:modifier> <specifier pos:line="307" pos:column="21">const</specifier></type> <name><name pos:line="307" pos:column="27">a68kWordListDesc</name><index pos:line="307" pos:column="43">[]</index></name> <init pos:line="307" pos:column="46">=
<expr><block pos:line="308" pos:column="1">{
    <expr><lit:literal type="string" pos:line="309" pos:column="5">"CPU instructions"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="310" pos:column="5">"Registers"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="311" pos:column="5">"Directives"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="312" pos:column="5">"Extended instructions"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="313" pos:column="5">"Comment special words"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="314" pos:column="5">"Doxygen keywords"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="315" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="318" pos:column="1">LexerModule</name></type> <name pos:line="318" pos:column="13">lmA68k</name><argument_list pos:line="318" pos:column="19">(<argument><expr><name pos:line="318" pos:column="20">SCLEX_A68K</name></expr></argument>, <argument><expr><name pos:line="318" pos:column="32">ColouriseA68kDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="318" pos:column="50">"a68k"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="318" pos:column="58">0</lit:literal></expr></argument>, <argument><expr><name pos:line="318" pos:column="61">a68kWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
