<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\LexerModule.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexerModule.cxx
 ** Colourise for particular languages.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexerBase.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerSimple.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="33" pos:column="1">LexerModule</name><op:operator pos:line="33" pos:column="12">::</op:operator><name pos:line="33" pos:column="14">LexerModule</name></name><parameter_list pos:line="33" pos:column="25">(<param><decl><type><name pos:line="33" pos:column="26">int</name></type> <name pos:line="33" pos:column="30">language_</name></decl></param>,
	<param><decl><type><name pos:line="34" pos:column="9">LexerFunction</name></type> <name pos:line="34" pos:column="23">fnLexer_</name></decl></param>,
	<param><decl><type><specifier pos:line="35" pos:column="9">const</specifier> <name pos:line="35" pos:column="15">char</name> <type:modifier pos:line="35" pos:column="20">*</type:modifier></type><name pos:line="35" pos:column="21">languageName_</name></decl></param>,
	<param><decl><type><name pos:line="36" pos:column="9">LexerFunction</name></type> <name pos:line="36" pos:column="23">fnFolder_</name></decl></param>,
        <param><decl><type><specifier pos:line="37" pos:column="9">const</specifier> <name pos:line="37" pos:column="15">char</name> <type:modifier pos:line="37" pos:column="20">*</type:modifier><specifier pos:line="37" pos:column="21">const</specifier></type> <name><name pos:line="37" pos:column="27">wordListDescriptions_</name><index pos:line="37" pos:column="48">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="38" pos:column="9">int</name></type> <name pos:line="38" pos:column="13">styleBits_</name></decl></param>)</parameter_list> <member_list pos:line="38" pos:column="25">:
	<call><name pos:line="39" pos:column="9">language</name><argument_list pos:line="39" pos:column="17">(<argument><expr><name pos:line="39" pos:column="18">language_</name></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="28">,</op:operator>
	<call><name pos:line="40" pos:column="9">fnLexer</name><argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">fnLexer_</name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="26">,</op:operator>
	<call><name pos:line="41" pos:column="9">fnFolder</name><argument_list pos:line="41" pos:column="17">(<argument><expr><name pos:line="41" pos:column="18">fnFolder_</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="28">,</op:operator>
	<call><name pos:line="42" pos:column="9">fnFactory</name><argument_list pos:line="42" pos:column="18">(<argument><expr><lit:literal type="number" pos:line="42" pos:column="19">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="21">,</op:operator>
	<call><name pos:line="43" pos:column="9">wordListDescriptions</name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">wordListDescriptions_</name></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="52">,</op:operator>
	<call><name pos:line="44" pos:column="9">styleBits</name><argument_list pos:line="44" pos:column="18">(<argument><expr><name pos:line="44" pos:column="19">styleBits_</name></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="30">,</op:operator>
	<call><name pos:line="45" pos:column="9">languageName</name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">languageName_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="45" pos:column="37">{
}</block></constructor>

<constructor><name><name pos:line="48" pos:column="1">LexerModule</name><op:operator pos:line="48" pos:column="12">::</op:operator><name pos:line="48" pos:column="14">LexerModule</name></name><parameter_list pos:line="48" pos:column="25">(<param><decl><type><name pos:line="48" pos:column="26">int</name></type> <name pos:line="48" pos:column="30">language_</name></decl></param>,
	<param><decl><type><name pos:line="49" pos:column="9">LexerFactoryFunction</name></type> <name pos:line="49" pos:column="30">fnFactory_</name></decl></param>,
	<param><decl><type><specifier pos:line="50" pos:column="9">const</specifier> <name pos:line="50" pos:column="15">char</name> <type:modifier pos:line="50" pos:column="20">*</type:modifier></type><name pos:line="50" pos:column="21">languageName_</name></decl></param>,
	<param><decl><type><specifier pos:line="51" pos:column="9">const</specifier> <name pos:line="51" pos:column="15">char</name> <type:modifier pos:line="51" pos:column="20">*</type:modifier> <specifier pos:line="51" pos:column="22">const</specifier></type> <name><name pos:line="51" pos:column="28">wordListDescriptions_</name><index pos:line="51" pos:column="49">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="52" pos:column="9">int</name></type> <name pos:line="52" pos:column="13">styleBits_</name></decl></param>)</parameter_list> <member_list pos:line="52" pos:column="25">:
	<call><name pos:line="53" pos:column="9">language</name><argument_list pos:line="53" pos:column="17">(<argument><expr><name pos:line="53" pos:column="18">language_</name></expr></argument>)</argument_list></call><op:operator pos:line="53" pos:column="28">,</op:operator>
	<call><name pos:line="54" pos:column="9">fnLexer</name><argument_list pos:line="54" pos:column="16">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="17">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="19">,</op:operator>
	<call><name pos:line="55" pos:column="9">fnFolder</name><argument_list pos:line="55" pos:column="17">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="18">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="20">,</op:operator>
	<call><name pos:line="56" pos:column="9">fnFactory</name><argument_list pos:line="56" pos:column="18">(<argument><expr><name pos:line="56" pos:column="19">fnFactory_</name></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="30">,</op:operator>
	<call><name pos:line="57" pos:column="9">wordListDescriptions</name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">wordListDescriptions_</name></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="52">,</op:operator>
	<call><name pos:line="58" pos:column="9">styleBits</name><argument_list pos:line="58" pos:column="18">(<argument><expr><name pos:line="58" pos:column="19">styleBits_</name></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="30">,</op:operator>
	<call><name pos:line="59" pos:column="9">languageName</name><argument_list pos:line="59" pos:column="21">(<argument><expr><name pos:line="59" pos:column="22">languageName_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="59" pos:column="37">{
}</block></constructor>

<function><type><name pos:line="62" pos:column="1">int</name></type> <name><name pos:line="62" pos:column="5">LexerModule</name><op:operator pos:line="62" pos:column="16">::</op:operator><name pos:line="62" pos:column="18">GetNumWordLists</name></name><parameter_list pos:line="62" pos:column="33">()</parameter_list> <specifier pos:line="62" pos:column="36">const</specifier> <block pos:line="62" pos:column="42">{
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">wordListDescriptions</name> <op:operator pos:line="63" pos:column="34">==</op:operator> <name pos:line="63" pos:column="37">NULL</name></expr>)</condition><then pos:line="63" pos:column="42"> <block pos:line="63" pos:column="43">{
		<return pos:line="64" pos:column="17">return <expr><op:operator pos:line="64" pos:column="24">-</op:operator><lit:literal type="number" pos:line="64" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="65" pos:column="11">else <block pos:line="65" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="66" pos:column="17">int</name></type> <name pos:line="66" pos:column="21">numWordLists</name> <init pos:line="66" pos:column="34">= <expr><lit:literal type="number" pos:line="66" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>

		<while pos:line="68" pos:column="17">while <condition pos:line="68" pos:column="23">(<expr><name><name pos:line="68" pos:column="24">wordListDescriptions</name><index pos:line="68" pos:column="44">[<expr><name pos:line="68" pos:column="45">numWordLists</name></expr>]</index></name></expr>)</condition> <block pos:line="68" pos:column="60">{
			<expr_stmt><expr><op:operator pos:line="69" pos:column="25">++</op:operator><name pos:line="69" pos:column="27">numWordLists</name></expr>;</expr_stmt>
		}</block></while>

		<return pos:line="72" pos:column="17">return <expr><name pos:line="72" pos:column="24">numWordLists</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="76" pos:column="1">const</specifier> <name pos:line="76" pos:column="7">char</name> <type:modifier pos:line="76" pos:column="12">*</type:modifier></type><name><name pos:line="76" pos:column="13">LexerModule</name><op:operator pos:line="76" pos:column="24">::</op:operator><name pos:line="76" pos:column="26">GetWordListDescription</name></name><parameter_list pos:line="76" pos:column="48">(<param><decl><type><name pos:line="76" pos:column="49">int</name></type> <name pos:line="76" pos:column="53">index</name></decl></param>)</parameter_list> <specifier pos:line="76" pos:column="60">const</specifier> <block pos:line="76" pos:column="66">{
	<decl_stmt><decl><type><specifier pos:line="77" pos:column="9">static</specifier> <specifier pos:line="77" pos:column="16">const</specifier> <name pos:line="77" pos:column="22">char</name> <type:modifier pos:line="77" pos:column="27">*</type:modifier></type><name pos:line="77" pos:column="28">emptyStr</name> <init pos:line="77" pos:column="37">= <expr><lit:literal type="string" pos:line="77" pos:column="39">""</lit:literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="79" pos:column="9">assert</name><argument_list pos:line="79" pos:column="15">(<argument><expr><name pos:line="79" pos:column="16">index</name> <op:operator pos:line="79" pos:column="22">&lt;</op:operator> <call><name pos:line="79" pos:column="24">GetNumWordLists</name><argument_list pos:line="79" pos:column="39">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">index</name> <op:operator pos:line="80" pos:column="19">&gt;=</op:operator> <call><name pos:line="80" pos:column="22">GetNumWordLists</name><argument_list pos:line="80" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="80" pos:column="40"> <block pos:line="80" pos:column="41">{
		<return pos:line="81" pos:column="17">return <expr><name pos:line="81" pos:column="24">emptyStr</name></expr>;</return>
	}</block></then> <else pos:line="82" pos:column="11">else <block pos:line="82" pos:column="16">{
		<return pos:line="83" pos:column="17">return <expr><name><name pos:line="83" pos:column="24">wordListDescriptions</name><index pos:line="83" pos:column="44">[<expr><name pos:line="83" pos:column="45">index</name></expr>]</index></name></expr>;</return>
 	}</block></else></if>
}</block></function>

<function><type><name pos:line="87" pos:column="1">int</name></type> <name><name pos:line="87" pos:column="5">LexerModule</name><op:operator pos:line="87" pos:column="16">::</op:operator><name pos:line="87" pos:column="18">GetStyleBitsNeeded</name></name><parameter_list pos:line="87" pos:column="36">()</parameter_list> <specifier pos:line="87" pos:column="39">const</specifier> <block pos:line="87" pos:column="45">{
	<return pos:line="88" pos:column="9">return <expr><name pos:line="88" pos:column="16">styleBits</name></expr>;</return>
}</block></function>

<function><type><name pos:line="91" pos:column="1">ILexer</name> <type:modifier pos:line="91" pos:column="8">*</type:modifier></type><name><name pos:line="91" pos:column="9">LexerModule</name><op:operator pos:line="91" pos:column="20">::</op:operator><name pos:line="91" pos:column="22">Create</name></name><parameter_list pos:line="91" pos:column="28">()</parameter_list> <specifier pos:line="91" pos:column="31">const</specifier> <block pos:line="91" pos:column="37">{
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">fnFactory</name></expr>)</condition><then pos:line="92" pos:column="23">
		<return pos:line="93" pos:column="17">return <expr><call><name pos:line="93" pos:column="24">fnFactory</name><argument_list pos:line="93" pos:column="33">()</argument_list></call></expr>;</return></then>
	<else pos:line="94" pos:column="9">else
		<return pos:line="95" pos:column="17">return <expr><op:operator pos:line="95" pos:column="24">new</op:operator> <call><name pos:line="95" pos:column="28">LexerSimple</name><argument_list pos:line="95" pos:column="39">(<argument><expr><name pos:line="95" pos:column="40">this</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="98" pos:column="1">void</name></type> <name><name pos:line="98" pos:column="6">LexerModule</name><op:operator pos:line="98" pos:column="17">::</op:operator><name pos:line="98" pos:column="19">Lex</name></name><parameter_list pos:line="98" pos:column="22">(<param><decl><type><name pos:line="98" pos:column="23">unsigned</name> <name pos:line="98" pos:column="32">int</name></type> <name pos:line="98" pos:column="36">startPos</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="46">int</name></type> <name pos:line="98" pos:column="50">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="61">int</name></type> <name pos:line="98" pos:column="65">initStyle</name></decl></param>,
	  <param><decl><type><name pos:line="99" pos:column="11">WordList</name> <type:modifier pos:line="99" pos:column="20">*</type:modifier></type><name><name pos:line="99" pos:column="21">keywordlists</name><index pos:line="99" pos:column="33">[]</index></name></decl></param>, <param><decl><type><name pos:line="99" pos:column="37">Accessor</name> <type:modifier pos:line="99" pos:column="46">&amp;</type:modifier></type><name pos:line="99" pos:column="47">styler</name></decl></param>)</parameter_list> <specifier pos:line="99" pos:column="55">const</specifier> <block pos:line="99" pos:column="61">{
	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name pos:line="100" pos:column="13">fnLexer</name></expr>)</condition><then pos:line="100" pos:column="21">
		<expr_stmt><expr><call><name pos:line="101" pos:column="17">fnLexer</name><argument_list pos:line="101" pos:column="24">(<argument><expr><name pos:line="101" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="35">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="46">initStyle</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="57">keywordlists</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="71">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="104" pos:column="1">void</name></type> <name><name pos:line="104" pos:column="6">LexerModule</name><op:operator pos:line="104" pos:column="17">::</op:operator><name pos:line="104" pos:column="19">Fold</name></name><parameter_list pos:line="104" pos:column="23">(<param><decl><type><name pos:line="104" pos:column="24">unsigned</name> <name pos:line="104" pos:column="33">int</name></type> <name pos:line="104" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="47">int</name></type> <name pos:line="104" pos:column="51">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="62">int</name></type> <name pos:line="104" pos:column="66">initStyle</name></decl></param>,
	  <param><decl><type><name pos:line="105" pos:column="11">WordList</name> <type:modifier pos:line="105" pos:column="20">*</type:modifier></type><name><name pos:line="105" pos:column="21">keywordlists</name><index pos:line="105" pos:column="33">[]</index></name></decl></param>, <param><decl><type><name pos:line="105" pos:column="37">Accessor</name> <type:modifier pos:line="105" pos:column="46">&amp;</type:modifier></type><name pos:line="105" pos:column="47">styler</name></decl></param>)</parameter_list> <specifier pos:line="105" pos:column="55">const</specifier> <block pos:line="105" pos:column="61">{
	<if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><name pos:line="106" pos:column="13">fnFolder</name></expr>)</condition><then pos:line="106" pos:column="22"> <block pos:line="106" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="107" pos:column="17">int</name></type> <name pos:line="107" pos:column="21">lineCurrent</name> <init pos:line="107" pos:column="33">= <expr><call><name><name pos:line="107" pos:column="35">styler</name><op:operator pos:line="107" pos:column="41">.</op:operator><name pos:line="107" pos:column="42">GetLine</name></name><argument_list pos:line="107" pos:column="49">(<argument><expr><name pos:line="107" pos:column="50">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="108" pos:column="17">// Move back one line in case deletion wrecked current line fold state</comment>
		<if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><name pos:line="109" pos:column="21">lineCurrent</name> <op:operator pos:line="109" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="109" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="109" pos:column="37"> <block pos:line="109" pos:column="38">{
			<expr_stmt><expr><name pos:line="110" pos:column="25">lineCurrent</name><op:operator pos:line="110" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="111" pos:column="25">int</name></type> <name pos:line="111" pos:column="29">newStartPos</name> <init pos:line="111" pos:column="41">= <expr><call><name><name pos:line="111" pos:column="43">styler</name><op:operator pos:line="111" pos:column="49">.</op:operator><name pos:line="111" pos:column="50">LineStart</name></name><argument_list pos:line="111" pos:column="59">(<argument><expr><name pos:line="111" pos:column="60">lineCurrent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="112" pos:column="25">lengthDoc</name> <op:operator pos:line="112" pos:column="35">+=</op:operator> <name pos:line="112" pos:column="38">startPos</name> <op:operator pos:line="112" pos:column="47">-</op:operator> <name pos:line="112" pos:column="49">newStartPos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="113" pos:column="25">startPos</name> <op:operator pos:line="113" pos:column="34">=</op:operator> <name pos:line="113" pos:column="36">newStartPos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="114" pos:column="25">initStyle</name> <op:operator pos:line="114" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="114" pos:column="37">0</lit:literal></expr>;</expr_stmt>
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><name pos:line="115" pos:column="29">startPos</name> <op:operator pos:line="115" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="115" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="115" pos:column="42"> <block pos:line="115" pos:column="43">{
				<expr_stmt><expr><name pos:line="116" pos:column="33">initStyle</name> <op:operator pos:line="116" pos:column="43">=</op:operator> <call><name><name pos:line="116" pos:column="45">styler</name><op:operator pos:line="116" pos:column="51">.</op:operator><name pos:line="116" pos:column="52">StyleAt</name></name><argument_list pos:line="116" pos:column="59">(<argument><expr><name pos:line="116" pos:column="60">startPos</name> <op:operator pos:line="116" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="116" pos:column="71">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="119" pos:column="17">fnFolder</name><argument_list pos:line="119" pos:column="25">(<argument><expr><name pos:line="119" pos:column="26">startPos</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="36">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="47">initStyle</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="58">keywordlists</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="72">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
</unit>
