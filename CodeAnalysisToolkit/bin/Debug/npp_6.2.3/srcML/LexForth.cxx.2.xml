<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexForth.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexForth.cxx
 ** Lexer for FORTH
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="30" pos:column="1">static</specifier> <specifier pos:line="30" pos:column="8">inline</specifier> <name pos:line="30" pos:column="15">bool</name></type> <name pos:line="30" pos:column="20">IsAWordChar</name><parameter_list pos:line="30" pos:column="31">(<param><decl><type><name pos:line="30" pos:column="32">int</name></type> <name pos:line="30" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="40">{
	<return pos:line="31" pos:column="9">return <expr><op:operator pos:line="31" pos:column="16">(</op:operator><name pos:line="31" pos:column="17">ch</name> <op:operator pos:line="31" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="31" pos:column="22">0x80</lit:literal><op:operator pos:line="31" pos:column="26">)</op:operator> <op:operator pos:line="31" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="31" pos:column="31">(</op:operator><call><name pos:line="31" pos:column="32">isalnum</name><argument_list pos:line="31" pos:column="39">(<argument><expr><name pos:line="31" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="31" pos:column="44">||</op:operator> <name pos:line="31" pos:column="47">ch</name> <op:operator pos:line="31" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="31" pos:column="53">'.'</lit:literal> <op:operator pos:line="31" pos:column="57">||</op:operator>
		<name pos:line="32" pos:column="17">ch</name> <op:operator pos:line="32" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="23">'_'</lit:literal> <op:operator pos:line="32" pos:column="27">||</op:operator> <name pos:line="32" pos:column="30">ch</name> <op:operator pos:line="32" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="36">'?'</lit:literal> <op:operator pos:line="32" pos:column="40">||</op:operator> <name pos:line="32" pos:column="43">ch</name> <op:operator pos:line="32" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="49">'"'</lit:literal> <op:operator pos:line="32" pos:column="53">||</op:operator> <name pos:line="32" pos:column="56">ch</name> <op:operator pos:line="32" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="62">'@'</lit:literal> <op:operator pos:line="32" pos:column="66">||</op:operator>
		<name pos:line="33" pos:column="17">ch</name> <op:operator pos:line="33" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="23">'!'</lit:literal> <op:operator pos:line="33" pos:column="27">||</op:operator> <name pos:line="33" pos:column="30">ch</name> <op:operator pos:line="33" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="36">'['</lit:literal> <op:operator pos:line="33" pos:column="40">||</op:operator> <name pos:line="33" pos:column="43">ch</name> <op:operator pos:line="33" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="49">']'</lit:literal> <op:operator pos:line="33" pos:column="53">||</op:operator> <name pos:line="33" pos:column="56">ch</name> <op:operator pos:line="33" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="62">'/'</lit:literal> <op:operator pos:line="33" pos:column="66">||</op:operator>
		<name pos:line="34" pos:column="17">ch</name> <op:operator pos:line="34" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="23">'+'</lit:literal> <op:operator pos:line="34" pos:column="27">||</op:operator> <name pos:line="34" pos:column="30">ch</name> <op:operator pos:line="34" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="36">'-'</lit:literal> <op:operator pos:line="34" pos:column="40">||</op:operator> <name pos:line="34" pos:column="43">ch</name> <op:operator pos:line="34" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="49">'*'</lit:literal> <op:operator pos:line="34" pos:column="53">||</op:operator> <name pos:line="34" pos:column="56">ch</name> <op:operator pos:line="34" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="62">'&lt;'</lit:literal> <op:operator pos:line="34" pos:column="66">||</op:operator>
		<name pos:line="35" pos:column="17">ch</name> <op:operator pos:line="35" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="23">'&gt;'</lit:literal> <op:operator pos:line="35" pos:column="27">||</op:operator> <name pos:line="35" pos:column="30">ch</name> <op:operator pos:line="35" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="36">'='</lit:literal> <op:operator pos:line="35" pos:column="40">||</op:operator> <name pos:line="35" pos:column="43">ch</name> <op:operator pos:line="35" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="49">';'</lit:literal> <op:operator pos:line="35" pos:column="53">||</op:operator> <name pos:line="35" pos:column="56">ch</name> <op:operator pos:line="35" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="62">'('</lit:literal> <op:operator pos:line="35" pos:column="66">||</op:operator>
		<name pos:line="36" pos:column="17">ch</name> <op:operator pos:line="36" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="23">')'</lit:literal> <op:operator pos:line="36" pos:column="27">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <specifier pos:line="39" pos:column="8">inline</specifier> <name pos:line="39" pos:column="15">bool</name></type> <name pos:line="39" pos:column="20">IsAWordStart</name><parameter_list pos:line="39" pos:column="32">(<param><decl><type><name pos:line="39" pos:column="33">int</name></type> <name pos:line="39" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="41">{
	<return pos:line="40" pos:column="9">return <expr><op:operator pos:line="40" pos:column="16">(</op:operator><name pos:line="40" pos:column="17">ch</name> <op:operator pos:line="40" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="40" pos:column="22">0x80</lit:literal><op:operator pos:line="40" pos:column="26">)</op:operator> <op:operator pos:line="40" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="40" pos:column="31">(</op:operator><call><name pos:line="40" pos:column="32">isalnum</name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="40" pos:column="44">||</op:operator> <name pos:line="40" pos:column="47">ch</name> <op:operator pos:line="40" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="53">'_'</lit:literal> <op:operator pos:line="40" pos:column="57">||</op:operator> <name pos:line="40" pos:column="60">ch</name> <op:operator pos:line="40" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="66">'.'</lit:literal><op:operator pos:line="40" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <specifier pos:line="43" pos:column="8">inline</specifier> <name pos:line="43" pos:column="15">bool</name></type> <name pos:line="43" pos:column="20">IsANumChar</name><parameter_list pos:line="43" pos:column="30">(<param><decl><type><name pos:line="43" pos:column="31">int</name></type> <name pos:line="43" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="39">{
	<return pos:line="44" pos:column="9">return <expr><op:operator pos:line="44" pos:column="16">(</op:operator><name pos:line="44" pos:column="17">ch</name> <op:operator pos:line="44" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="44" pos:column="22">0x80</lit:literal><op:operator pos:line="44" pos:column="26">)</op:operator> <op:operator pos:line="44" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="31">(</op:operator><call><name pos:line="44" pos:column="32">isxdigit</name><argument_list pos:line="44" pos:column="40">(<argument><expr><name pos:line="44" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="45">||</op:operator> <name pos:line="44" pos:column="48">ch</name> <op:operator pos:line="44" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="54">'.'</lit:literal> <op:operator pos:line="44" pos:column="58">||</op:operator> <name pos:line="44" pos:column="61">ch</name> <op:operator pos:line="44" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="67">'e'</lit:literal> <op:operator pos:line="44" pos:column="71">||</op:operator> <name pos:line="44" pos:column="74">ch</name> <op:operator pos:line="44" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="80">'E'</lit:literal> <op:operator pos:line="44" pos:column="84">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <specifier pos:line="47" pos:column="8">inline</specifier> <name pos:line="47" pos:column="15">bool</name></type> <name pos:line="47" pos:column="20">IsASpaceChar</name><parameter_list pos:line="47" pos:column="32">(<param><decl><type><name pos:line="47" pos:column="33">int</name></type> <name pos:line="47" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="41">{
	<return pos:line="48" pos:column="9">return <expr><op:operator pos:line="48" pos:column="16">(</op:operator><name pos:line="48" pos:column="17">ch</name> <op:operator pos:line="48" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="48" pos:column="22">0x80</lit:literal><op:operator pos:line="48" pos:column="26">)</op:operator> <op:operator pos:line="48" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="48" pos:column="31">isspace</name><argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <name pos:line="51" pos:column="8">void</name></type> <name pos:line="51" pos:column="13">ColouriseForthDoc</name><parameter_list pos:line="51" pos:column="30">(<param><decl><type><name pos:line="51" pos:column="31">unsigned</name> <name pos:line="51" pos:column="40">int</name></type> <name pos:line="51" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="54">int</name></type> <name pos:line="51" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="66">int</name></type> <name pos:line="51" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="81">WordList</name> <type:modifier pos:line="51" pos:column="90">*</type:modifier></type><name><name pos:line="51" pos:column="91">keywordLists</name><index pos:line="51" pos:column="103">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="52" pos:column="29">Accessor</name> <type:modifier pos:line="52" pos:column="38">&amp;</type:modifier></type><name pos:line="52" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="47">{

    <decl_stmt><decl><type><name pos:line="54" pos:column="5">WordList</name> <type:modifier pos:line="54" pos:column="14">&amp;</type:modifier></type><name pos:line="54" pos:column="15">control</name> <init pos:line="54" pos:column="23">= <expr><op:operator pos:line="54" pos:column="25">*</op:operator><name><name pos:line="54" pos:column="26">keywordLists</name><index pos:line="54" pos:column="38">[<expr><lit:literal type="number" pos:line="54" pos:column="39">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="55" pos:column="5">WordList</name> <type:modifier pos:line="55" pos:column="14">&amp;</type:modifier></type><name pos:line="55" pos:column="15">keyword</name> <init pos:line="55" pos:column="23">= <expr><op:operator pos:line="55" pos:column="25">*</op:operator><name><name pos:line="55" pos:column="26">keywordLists</name><index pos:line="55" pos:column="38">[<expr><lit:literal type="number" pos:line="55" pos:column="39">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="56" pos:column="5">WordList</name> <type:modifier pos:line="56" pos:column="14">&amp;</type:modifier></type><name pos:line="56" pos:column="15">defword</name> <init pos:line="56" pos:column="23">= <expr><op:operator pos:line="56" pos:column="25">*</op:operator><name><name pos:line="56" pos:column="26">keywordLists</name><index pos:line="56" pos:column="38">[<expr><lit:literal type="number" pos:line="56" pos:column="39">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="57" pos:column="5">WordList</name> <type:modifier pos:line="57" pos:column="14">&amp;</type:modifier></type><name pos:line="57" pos:column="15">preword1</name> <init pos:line="57" pos:column="24">= <expr><op:operator pos:line="57" pos:column="26">*</op:operator><name><name pos:line="57" pos:column="27">keywordLists</name><index pos:line="57" pos:column="39">[<expr><lit:literal type="number" pos:line="57" pos:column="40">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="58" pos:column="5">WordList</name> <type:modifier pos:line="58" pos:column="14">&amp;</type:modifier></type><name pos:line="58" pos:column="15">preword2</name> <init pos:line="58" pos:column="24">= <expr><op:operator pos:line="58" pos:column="26">*</op:operator><name><name pos:line="58" pos:column="27">keywordLists</name><index pos:line="58" pos:column="39">[<expr><lit:literal type="number" pos:line="58" pos:column="40">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="59" pos:column="5">WordList</name> <type:modifier pos:line="59" pos:column="14">&amp;</type:modifier></type><name pos:line="59" pos:column="15">strings</name> <init pos:line="59" pos:column="23">= <expr><op:operator pos:line="59" pos:column="25">*</op:operator><name><name pos:line="59" pos:column="26">keywordLists</name><index pos:line="59" pos:column="38">[<expr><lit:literal type="number" pos:line="59" pos:column="39">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="61" pos:column="9">StyleContext</name></type> <name pos:line="61" pos:column="22">sc</name><parameter_list pos:line="61" pos:column="24">(<param><decl><type><name pos:line="61" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="61" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="61" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="61" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="63" pos:column="9">for (<init pos:line="63" pos:column="14">;</init> <condition><expr><call><name><name pos:line="63" pos:column="16">sc</name><op:operator pos:line="63" pos:column="18">.</op:operator><name pos:line="63" pos:column="19">More</name></name><argument_list pos:line="63" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="63" pos:column="27">sc</name><op:operator pos:line="63" pos:column="29">.</op:operator><name pos:line="63" pos:column="30">Forward</name></name><argument_list pos:line="63" pos:column="37">()</argument_list></call></expr></incr>)
	<block pos:line="64" pos:column="9">{
		<comment type="line" pos:line="65" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name><name pos:line="66" pos:column="21">sc</name><op:operator pos:line="66" pos:column="23">.</op:operator><name pos:line="66" pos:column="24">state</name></name> <op:operator pos:line="66" pos:column="30">==</op:operator> <name pos:line="66" pos:column="33">SCE_FORTH_COMMENT</name></expr>)</condition><then pos:line="66" pos:column="51"> <block pos:line="66" pos:column="52">{
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name><name pos:line="67" pos:column="29">sc</name><op:operator pos:line="67" pos:column="31">.</op:operator><name pos:line="67" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="67" pos:column="42"> <block pos:line="67" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="68" pos:column="33">sc</name><op:operator pos:line="68" pos:column="35">.</op:operator><name pos:line="68" pos:column="36">SetState</name></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">SCE_FORTH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then><else pos:line="70" pos:column="18">else <if pos:line="70" pos:column="23">if <condition pos:line="70" pos:column="26">(<expr><name><name pos:line="70" pos:column="27">sc</name><op:operator pos:line="70" pos:column="29">.</op:operator><name pos:line="70" pos:column="30">state</name></name> <op:operator pos:line="70" pos:column="36">==</op:operator> <name pos:line="70" pos:column="39">SCE_FORTH_COMMENT_ML</name></expr>)</condition><then pos:line="70" pos:column="60"> <block pos:line="70" pos:column="61">{
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name><name pos:line="71" pos:column="29">sc</name><op:operator pos:line="71" pos:column="31">.</op:operator><name pos:line="71" pos:column="32">ch</name></name> <op:operator pos:line="71" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="71" pos:column="38">')'</lit:literal></expr>)</condition><then pos:line="71" pos:column="42"> <block pos:line="71" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="72" pos:column="33">sc</name><op:operator pos:line="72" pos:column="35">.</op:operator><name pos:line="72" pos:column="36">ForwardSetState</name></name><argument_list pos:line="72" pos:column="51">(<argument><expr><name pos:line="72" pos:column="52">SCE_FORTH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then><else pos:line="74" pos:column="18">else <if pos:line="74" pos:column="23">if <condition pos:line="74" pos:column="26">(<expr><name><name pos:line="74" pos:column="27">sc</name><op:operator pos:line="74" pos:column="29">.</op:operator><name pos:line="74" pos:column="30">state</name></name> <op:operator pos:line="74" pos:column="36">==</op:operator> <name pos:line="74" pos:column="39">SCE_FORTH_IDENTIFIER</name> <op:operator pos:line="74" pos:column="60">||</op:operator> <name><name pos:line="74" pos:column="63">sc</name><op:operator pos:line="74" pos:column="65">.</op:operator><name pos:line="74" pos:column="66">state</name></name> <op:operator pos:line="74" pos:column="72">==</op:operator> <name pos:line="74" pos:column="75">SCE_FORTH_NUMBER</name></expr>)</condition><then pos:line="74" pos:column="92"> <block pos:line="74" pos:column="93">{
			<comment type="line" pos:line="75" pos:column="25">// handle numbers here too, because what we thought was a number might</comment>
			<comment type="line" pos:line="76" pos:column="25">// turn out to be a keyword e.g. 2DUP</comment>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><call><name pos:line="77" pos:column="29">IsASpaceChar</name><argument_list pos:line="77" pos:column="41">(<argument><expr><name><name pos:line="77" pos:column="42">sc</name><op:operator pos:line="77" pos:column="44">.</op:operator><name pos:line="77" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="77" pos:column="50"> <block pos:line="77" pos:column="51">{
				<decl_stmt><decl><type><name pos:line="78" pos:column="33">char</name></type> <name><name pos:line="78" pos:column="38">s</name><index pos:line="78" pos:column="39">[<expr><lit:literal type="number" pos:line="78" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="79" pos:column="33">sc</name><op:operator pos:line="79" pos:column="35">.</op:operator><name pos:line="79" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="79" pos:column="53">(<argument><expr><name pos:line="79" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="79" pos:column="57">sizeof<argument_list pos:line="79" pos:column="63">(<argument><expr><name pos:line="79" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="80" pos:column="33">int</name></type> <name pos:line="80" pos:column="37">newState</name> <init pos:line="80" pos:column="46">= <expr><name><name pos:line="80" pos:column="48">sc</name><op:operator pos:line="80" pos:column="50">.</op:operator><name pos:line="80" pos:column="51">state</name></name> <op:operator pos:line="80" pos:column="57">==</op:operator> <name pos:line="80" pos:column="60">SCE_FORTH_NUMBER</name> <op:operator pos:line="80" pos:column="77">?</op:operator> <name pos:line="80" pos:column="79">SCE_FORTH_NUMBER</name> <op:operator pos:line="80" pos:column="96">:</op:operator> <name pos:line="80" pos:column="98">SCE_FORTH_DEFAULT</name></expr></init></decl>;</decl_stmt>
				<if pos:line="81" pos:column="33">if <condition pos:line="81" pos:column="36">(<expr><call><name><name pos:line="81" pos:column="37">control</name><op:operator pos:line="81" pos:column="44">.</op:operator><name pos:line="81" pos:column="45">InList</name></name><argument_list pos:line="81" pos:column="51">(<argument><expr><name pos:line="81" pos:column="52">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="81" pos:column="55"> <block pos:line="81" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="82" pos:column="41">sc</name><op:operator pos:line="82" pos:column="43">.</op:operator><name pos:line="82" pos:column="44">ChangeState</name></name><argument_list pos:line="82" pos:column="55">(<argument><expr><name pos:line="82" pos:column="56">SCE_FORTH_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="83" pos:column="35">else <if pos:line="83" pos:column="40">if <condition pos:line="83" pos:column="43">(<expr><call><name><name pos:line="83" pos:column="44">keyword</name><op:operator pos:line="83" pos:column="51">.</op:operator><name pos:line="83" pos:column="52">InList</name></name><argument_list pos:line="83" pos:column="58">(<argument><expr><name pos:line="83" pos:column="59">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="83" pos:column="62"> <block pos:line="83" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="84" pos:column="41">sc</name><op:operator pos:line="84" pos:column="43">.</op:operator><name pos:line="84" pos:column="44">ChangeState</name></name><argument_list pos:line="84" pos:column="55">(<argument><expr><name pos:line="84" pos:column="56">SCE_FORTH_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="85" pos:column="35">else <if pos:line="85" pos:column="40">if <condition pos:line="85" pos:column="43">(<expr><call><name><name pos:line="85" pos:column="44">defword</name><op:operator pos:line="85" pos:column="51">.</op:operator><name pos:line="85" pos:column="52">InList</name></name><argument_list pos:line="85" pos:column="58">(<argument><expr><name pos:line="85" pos:column="59">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="85" pos:column="62"> <block pos:line="85" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="86" pos:column="41">sc</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">ChangeState</name></name><argument_list pos:line="86" pos:column="55">(<argument><expr><name pos:line="86" pos:column="56">SCE_FORTH_DEFWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>  <else pos:line="87" pos:column="36">else <if pos:line="87" pos:column="41">if <condition pos:line="87" pos:column="44">(<expr><call><name><name pos:line="87" pos:column="45">preword1</name><op:operator pos:line="87" pos:column="53">.</op:operator><name pos:line="87" pos:column="54">InList</name></name><argument_list pos:line="87" pos:column="60">(<argument><expr><name pos:line="87" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="87" pos:column="64"> <block pos:line="87" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="88" pos:column="41">sc</name><op:operator pos:line="88" pos:column="43">.</op:operator><name pos:line="88" pos:column="44">ChangeState</name></name><argument_list pos:line="88" pos:column="55">(<argument><expr><name pos:line="88" pos:column="56">SCE_FORTH_PREWORD1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="89" pos:column="35">else <if pos:line="89" pos:column="40">if <condition pos:line="89" pos:column="43">(<expr><call><name><name pos:line="89" pos:column="44">preword2</name><op:operator pos:line="89" pos:column="52">.</op:operator><name pos:line="89" pos:column="53">InList</name></name><argument_list pos:line="89" pos:column="59">(<argument><expr><name pos:line="89" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="63"> <block pos:line="89" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="90" pos:column="41">sc</name><op:operator pos:line="90" pos:column="43">.</op:operator><name pos:line="90" pos:column="44">ChangeState</name></name><argument_list pos:line="90" pos:column="55">(<argument><expr><name pos:line="90" pos:column="56">SCE_FORTH_PREWORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="91" pos:column="35">else <if pos:line="91" pos:column="40">if <condition pos:line="91" pos:column="43">(<expr><call><name><name pos:line="91" pos:column="44">strings</name><op:operator pos:line="91" pos:column="51">.</op:operator><name pos:line="91" pos:column="52">InList</name></name><argument_list pos:line="91" pos:column="58">(<argument><expr><name pos:line="91" pos:column="59">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="62"> <block pos:line="91" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="92" pos:column="41">sc</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">ChangeState</name></name><argument_list pos:line="92" pos:column="55">(<argument><expr><name pos:line="92" pos:column="56">SCE_FORTH_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="93" pos:column="41">newState</name> <op:operator pos:line="93" pos:column="50">=</op:operator> <name pos:line="93" pos:column="52">SCE_FORTH_STRING</name></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">sc</name><op:operator pos:line="95" pos:column="35">.</op:operator><name pos:line="95" pos:column="36">SetState</name></name><argument_list pos:line="95" pos:column="44">(<argument><expr><name pos:line="95" pos:column="45">newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><name><name pos:line="97" pos:column="29">sc</name><op:operator pos:line="97" pos:column="31">.</op:operator><name pos:line="97" pos:column="32">state</name></name> <op:operator pos:line="97" pos:column="38">==</op:operator> <name pos:line="97" pos:column="41">SCE_FORTH_NUMBER</name></expr>)</condition><then pos:line="97" pos:column="58"> <block pos:line="97" pos:column="59">{
				<if pos:line="98" pos:column="33">if <condition pos:line="98" pos:column="36">(<expr><call><name pos:line="98" pos:column="37">IsASpaceChar</name><argument_list pos:line="98" pos:column="49">(<argument><expr><name><name pos:line="98" pos:column="50">sc</name><op:operator pos:line="98" pos:column="52">.</op:operator><name pos:line="98" pos:column="53">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="57"> <block pos:line="98" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="99" pos:column="41">sc</name><op:operator pos:line="99" pos:column="43">.</op:operator><name pos:line="99" pos:column="44">SetState</name></name><argument_list pos:line="99" pos:column="52">(<argument><expr><name pos:line="99" pos:column="53">SCE_FORTH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="100" pos:column="35">else <if pos:line="100" pos:column="40">if <condition pos:line="100" pos:column="43">(<expr><op:operator pos:line="100" pos:column="44">!</op:operator><call><name pos:line="100" pos:column="45">IsANumChar</name><argument_list pos:line="100" pos:column="55">(<argument><expr><name><name pos:line="100" pos:column="56">sc</name><op:operator pos:line="100" pos:column="58">.</op:operator><name pos:line="100" pos:column="59">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="63"> <block pos:line="100" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="101" pos:column="41">sc</name><op:operator pos:line="101" pos:column="43">.</op:operator><name pos:line="101" pos:column="44">ChangeState</name></name><argument_list pos:line="101" pos:column="55">(<argument><expr><name pos:line="101" pos:column="56">SCE_FORTH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then><else pos:line="104" pos:column="18">else <if pos:line="104" pos:column="23">if <condition pos:line="104" pos:column="26">(<expr><name><name pos:line="104" pos:column="27">sc</name><op:operator pos:line="104" pos:column="29">.</op:operator><name pos:line="104" pos:column="30">state</name></name> <op:operator pos:line="104" pos:column="36">==</op:operator> <name pos:line="104" pos:column="39">SCE_FORTH_STRING</name></expr>)</condition><then pos:line="104" pos:column="56"> <block pos:line="104" pos:column="57">{
			<if pos:line="105" pos:column="25">if <condition pos:line="105" pos:column="28">(<expr><name><name pos:line="105" pos:column="29">sc</name><op:operator pos:line="105" pos:column="31">.</op:operator><name pos:line="105" pos:column="32">ch</name></name> <op:operator pos:line="105" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="38">'\"'</lit:literal></expr>)</condition><then pos:line="105" pos:column="43"> <block pos:line="105" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="106" pos:column="33">sc</name><op:operator pos:line="106" pos:column="35">.</op:operator><name pos:line="106" pos:column="36">ForwardSetState</name></name><argument_list pos:line="106" pos:column="51">(<argument><expr><name pos:line="106" pos:column="52">SCE_FORTH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then><else pos:line="108" pos:column="18">else <if pos:line="108" pos:column="23">if <condition pos:line="108" pos:column="26">(<expr><name><name pos:line="108" pos:column="27">sc</name><op:operator pos:line="108" pos:column="29">.</op:operator><name pos:line="108" pos:column="30">state</name></name> <op:operator pos:line="108" pos:column="36">==</op:operator> <name pos:line="108" pos:column="39">SCE_FORTH_LOCALE</name></expr>)</condition><then pos:line="108" pos:column="56"> <block pos:line="108" pos:column="57">{
			<if pos:line="109" pos:column="25">if <condition pos:line="109" pos:column="28">(<expr><name><name pos:line="109" pos:column="29">sc</name><op:operator pos:line="109" pos:column="31">.</op:operator><name pos:line="109" pos:column="32">ch</name></name> <op:operator pos:line="109" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="109" pos:column="38">'}'</lit:literal></expr>)</condition><then pos:line="109" pos:column="42"> <block pos:line="109" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="110" pos:column="33">sc</name><op:operator pos:line="110" pos:column="35">.</op:operator><name pos:line="110" pos:column="36">ForwardSetState</name></name><argument_list pos:line="110" pos:column="51">(<argument><expr><name pos:line="110" pos:column="52">SCE_FORTH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then><else pos:line="112" pos:column="18">else <if pos:line="112" pos:column="23">if <condition pos:line="112" pos:column="26">(<expr><name><name pos:line="112" pos:column="27">sc</name><op:operator pos:line="112" pos:column="29">.</op:operator><name pos:line="112" pos:column="30">state</name></name> <op:operator pos:line="112" pos:column="36">==</op:operator> <name pos:line="112" pos:column="39">SCE_FORTH_DEFWORD</name></expr>)</condition><then pos:line="112" pos:column="57"> <block pos:line="112" pos:column="58">{
			<if pos:line="113" pos:column="25">if <condition pos:line="113" pos:column="28">(<expr><call><name pos:line="113" pos:column="29">IsASpaceChar</name><argument_list pos:line="113" pos:column="41">(<argument><expr><name><name pos:line="113" pos:column="42">sc</name><op:operator pos:line="113" pos:column="44">.</op:operator><name pos:line="113" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="113" pos:column="49"> <block pos:line="113" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="114" pos:column="33">sc</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">SetState</name></name><argument_list pos:line="114" pos:column="44">(<argument><expr><name pos:line="114" pos:column="45">SCE_FORTH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="118" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name><name pos:line="119" pos:column="21">sc</name><op:operator pos:line="119" pos:column="23">.</op:operator><name pos:line="119" pos:column="24">state</name></name> <op:operator pos:line="119" pos:column="30">==</op:operator> <name pos:line="119" pos:column="33">SCE_FORTH_DEFAULT</name></expr>)</condition><then pos:line="119" pos:column="51"> <block pos:line="119" pos:column="52">{
			<if pos:line="120" pos:column="25">if <condition pos:line="120" pos:column="28">(<expr><name><name pos:line="120" pos:column="29">sc</name><op:operator pos:line="120" pos:column="31">.</op:operator><name pos:line="120" pos:column="32">ch</name></name> <op:operator pos:line="120" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="38">'\\'</lit:literal></expr>)</condition><then><block pos:line="120" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="121" pos:column="33">sc</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">SetState</name></name><argument_list pos:line="121" pos:column="44">(<argument><expr><name pos:line="121" pos:column="45">SCE_FORTH_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="122" pos:column="27">else <if pos:line="122" pos:column="32">if <condition pos:line="122" pos:column="35">(<expr><name><name pos:line="122" pos:column="36">sc</name><op:operator pos:line="122" pos:column="38">.</op:operator><name pos:line="122" pos:column="39">ch</name></name> <op:operator pos:line="122" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="45">'('</lit:literal> <op:operator pos:line="122" pos:column="49">&amp;&amp;</op:operator>
					<op:operator pos:line="123" pos:column="41">(</op:operator><name><name pos:line="123" pos:column="42">sc</name><op:operator pos:line="123" pos:column="44">.</op:operator><name pos:line="123" pos:column="45">atLineStart</name></name> <op:operator pos:line="123" pos:column="57">||</op:operator> <call><name pos:line="123" pos:column="60">IsASpaceChar</name><argument_list pos:line="123" pos:column="72">(<argument><expr><name><name pos:line="123" pos:column="73">sc</name><op:operator pos:line="123" pos:column="75">.</op:operator><name pos:line="123" pos:column="76">chPrev</name></name></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="83">)</op:operator> <op:operator pos:line="123" pos:column="85">&amp;&amp;</op:operator>
					<op:operator pos:line="124" pos:column="41">(</op:operator><name><name pos:line="124" pos:column="42">sc</name><op:operator pos:line="124" pos:column="44">.</op:operator><name pos:line="124" pos:column="45">atLineEnd</name></name>   <op:operator pos:line="124" pos:column="57">||</op:operator> <call><name pos:line="124" pos:column="60">IsASpaceChar</name><argument_list pos:line="124" pos:column="72">(<argument><expr><name><name pos:line="124" pos:column="73">sc</name><op:operator pos:line="124" pos:column="75">.</op:operator><name pos:line="124" pos:column="76">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="124" pos:column="83">)</op:operator></expr>)</condition><then pos:line="124" pos:column="85"> <block pos:line="124" pos:column="86">{
				<expr_stmt><expr><call><name><name pos:line="125" pos:column="33">sc</name><op:operator pos:line="125" pos:column="35">.</op:operator><name pos:line="125" pos:column="36">SetState</name></name><argument_list pos:line="125" pos:column="44">(<argument><expr><name pos:line="125" pos:column="45">SCE_FORTH_COMMENT_ML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="126" pos:column="27">else <if pos:line="126" pos:column="32">if <condition pos:line="126" pos:column="35">(	<expr><op:operator pos:line="126" pos:column="41">(</op:operator><name><name pos:line="126" pos:column="42">sc</name><op:operator pos:line="126" pos:column="44">.</op:operator><name pos:line="126" pos:column="45">ch</name></name> <op:operator pos:line="126" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="51">'$'</lit:literal> <op:operator pos:line="126" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="126" pos:column="58">(</op:operator><call><name pos:line="126" pos:column="59">isascii</name><argument_list pos:line="126" pos:column="66">(<argument><expr><name><name pos:line="126" pos:column="67">sc</name><op:operator pos:line="126" pos:column="69">.</op:operator><name pos:line="126" pos:column="70">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="126" pos:column="81">isxdigit</name><argument_list pos:line="126" pos:column="89">(<argument><expr><name><name pos:line="126" pos:column="90">sc</name><op:operator pos:line="126" pos:column="92">.</op:operator><name pos:line="126" pos:column="93">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="100">)</op:operator><op:operator pos:line="126" pos:column="101">)</op:operator></expr> )</condition><then pos:line="126" pos:column="104"> <block pos:line="126" pos:column="105">{
				<comment type="line" pos:line="127" pos:column="33">// number starting with $ is a hex number</comment>
				<expr_stmt><expr><call><name><name pos:line="128" pos:column="33">sc</name><op:operator pos:line="128" pos:column="35">.</op:operator><name pos:line="128" pos:column="36">SetState</name></name><argument_list pos:line="128" pos:column="44">(<argument><expr><name pos:line="128" pos:column="45">SCE_FORTH_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="129" pos:column="33">while<condition pos:line="129" pos:column="38">(<expr><call><name><name pos:line="129" pos:column="39">sc</name><op:operator pos:line="129" pos:column="41">.</op:operator><name pos:line="129" pos:column="42">More</name></name><argument_list pos:line="129" pos:column="46">()</argument_list></call> <op:operator pos:line="129" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="129" pos:column="52">isascii</name><argument_list pos:line="129" pos:column="59">(<argument><expr><name><name pos:line="129" pos:column="60">sc</name><op:operator pos:line="129" pos:column="62">.</op:operator><name pos:line="129" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="129" pos:column="71">&amp;&amp;</op:operator> <call><name pos:line="129" pos:column="74">isxdigit</name><argument_list pos:line="129" pos:column="82">(<argument><expr><name><name pos:line="129" pos:column="83">sc</name><op:operator pos:line="129" pos:column="85">.</op:operator><name pos:line="129" pos:column="86">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><call><name><name pos:line="130" pos:column="41">sc</name><op:operator pos:line="130" pos:column="43">.</op:operator><name pos:line="130" pos:column="44">Forward</name></name><argument_list pos:line="130" pos:column="51">()</argument_list></call></expr>;</expr_stmt></while>
			}</block></then> <else pos:line="131" pos:column="27">else <if pos:line="131" pos:column="32">if <condition pos:line="131" pos:column="35">( <expr><op:operator pos:line="131" pos:column="37">(</op:operator><name><name pos:line="131" pos:column="38">sc</name><op:operator pos:line="131" pos:column="40">.</op:operator><name pos:line="131" pos:column="41">ch</name></name> <op:operator pos:line="131" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="47">'%'</lit:literal> <op:operator pos:line="131" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="131" pos:column="54">(</op:operator><call><name pos:line="131" pos:column="55">isascii</name><argument_list pos:line="131" pos:column="62">(<argument><expr><name><name pos:line="131" pos:column="63">sc</name><op:operator pos:line="131" pos:column="65">.</op:operator><name pos:line="131" pos:column="66">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="131" pos:column="74">&amp;&amp;</op:operator> <op:operator pos:line="131" pos:column="77">(</op:operator><name><name pos:line="131" pos:column="78">sc</name><op:operator pos:line="131" pos:column="80">.</op:operator><name pos:line="131" pos:column="81">chNext</name></name> <op:operator pos:line="131" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="91">'0'</lit:literal> <op:operator pos:line="131" pos:column="95">||</op:operator> <name><name pos:line="131" pos:column="98">sc</name><op:operator pos:line="131" pos:column="100">.</op:operator><name pos:line="131" pos:column="101">chNext</name></name> <op:operator pos:line="131" pos:column="108">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="111">'1'</lit:literal><op:operator pos:line="131" pos:column="114">)</op:operator><op:operator pos:line="131" pos:column="115">)</op:operator><op:operator pos:line="131" pos:column="116">)</op:operator></expr> )</condition><then pos:line="131" pos:column="119"> <block pos:line="131" pos:column="120">{
				<comment type="line" pos:line="132" pos:column="33">// number starting with % is binary</comment>
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">sc</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">SetState</name></name><argument_list pos:line="133" pos:column="44">(<argument><expr><name pos:line="133" pos:column="45">SCE_FORTH_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="134" pos:column="33">while<condition pos:line="134" pos:column="38">(<expr><call><name><name pos:line="134" pos:column="39">sc</name><op:operator pos:line="134" pos:column="41">.</op:operator><name pos:line="134" pos:column="42">More</name></name><argument_list pos:line="134" pos:column="46">()</argument_list></call> <op:operator pos:line="134" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="134" pos:column="52">isascii</name><argument_list pos:line="134" pos:column="59">(<argument><expr><name><name pos:line="134" pos:column="60">sc</name><op:operator pos:line="134" pos:column="62">.</op:operator><name pos:line="134" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="134" pos:column="71">&amp;&amp;</op:operator> <op:operator pos:line="134" pos:column="74">(</op:operator><name><name pos:line="134" pos:column="75">sc</name><op:operator pos:line="134" pos:column="77">.</op:operator><name pos:line="134" pos:column="78">chNext</name></name> <op:operator pos:line="134" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="88">'0'</lit:literal> <op:operator pos:line="134" pos:column="92">||</op:operator> <name><name pos:line="134" pos:column="95">sc</name><op:operator pos:line="134" pos:column="97">.</op:operator><name pos:line="134" pos:column="98">chNext</name></name> <op:operator pos:line="134" pos:column="105">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="108">'1'</lit:literal><op:operator pos:line="134" pos:column="111">)</op:operator></expr>)</condition>
					<expr_stmt><expr><call><name><name pos:line="135" pos:column="41">sc</name><op:operator pos:line="135" pos:column="43">.</op:operator><name pos:line="135" pos:column="44">Forward</name></name><argument_list pos:line="135" pos:column="51">()</argument_list></call></expr>;</expr_stmt></while>
			}</block></then> <else pos:line="136" pos:column="27">else <if pos:line="136" pos:column="32">if <condition pos:line="136" pos:column="35">(	<expr><call><name pos:line="136" pos:column="41">isascii</name><argument_list pos:line="136" pos:column="48">(<argument><expr><name><name pos:line="136" pos:column="49">sc</name><op:operator pos:line="136" pos:column="51">.</op:operator><name pos:line="136" pos:column="52">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="136" pos:column="56">&amp;&amp;</op:operator>
						<op:operator pos:line="137" pos:column="49">(</op:operator><call><name pos:line="137" pos:column="50">isxdigit</name><argument_list pos:line="137" pos:column="58">(<argument><expr><name><name pos:line="137" pos:column="59">sc</name><op:operator pos:line="137" pos:column="61">.</op:operator><name pos:line="137" pos:column="62">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="137" pos:column="66">||</op:operator> <op:operator pos:line="137" pos:column="69">(</op:operator><op:operator pos:line="137" pos:column="70">(</op:operator><name><name pos:line="137" pos:column="71">sc</name><op:operator pos:line="137" pos:column="73">.</op:operator><name pos:line="137" pos:column="74">ch</name></name> <op:operator pos:line="137" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="80">'.'</lit:literal> <op:operator pos:line="137" pos:column="84">||</op:operator> <name><name pos:line="137" pos:column="87">sc</name><op:operator pos:line="137" pos:column="89">.</op:operator><name pos:line="137" pos:column="90">ch</name></name> <op:operator pos:line="137" pos:column="93">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="96">'-'</lit:literal><op:operator pos:line="137" pos:column="99">)</op:operator> <op:operator pos:line="137" pos:column="101">&amp;&amp;</op:operator> <call><name pos:line="137" pos:column="104">isascii</name><argument_list pos:line="137" pos:column="111">(<argument><expr><name><name pos:line="137" pos:column="112">sc</name><op:operator pos:line="137" pos:column="114">.</op:operator><name pos:line="137" pos:column="115">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="137" pos:column="123">&amp;&amp;</op:operator> <call><name pos:line="137" pos:column="126">isxdigit</name><argument_list pos:line="137" pos:column="134">(<argument><expr><name><name pos:line="137" pos:column="135">sc</name><op:operator pos:line="137" pos:column="137">.</op:operator><name pos:line="137" pos:column="138">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="137" pos:column="145">)</op:operator> <op:operator pos:line="137" pos:column="147">)</op:operator></expr>
					)</condition><then><block pos:line="138" pos:column="42">{
				<expr_stmt><expr><call><name><name pos:line="139" pos:column="33">sc</name><op:operator pos:line="139" pos:column="35">.</op:operator><name pos:line="139" pos:column="36">SetState</name></name><argument_list pos:line="139" pos:column="44">(<argument><expr><name pos:line="139" pos:column="45">SCE_FORTH_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="140" pos:column="27">else <if pos:line="140" pos:column="32">if <condition pos:line="140" pos:column="35">(<expr><call><name pos:line="140" pos:column="36">IsAWordStart</name><argument_list pos:line="140" pos:column="48">(<argument><expr><name><name pos:line="140" pos:column="49">sc</name><op:operator pos:line="140" pos:column="51">.</op:operator><name pos:line="140" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="56"> <block pos:line="140" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="141" pos:column="33">sc</name><op:operator pos:line="141" pos:column="35">.</op:operator><name pos:line="141" pos:column="36">SetState</name></name><argument_list pos:line="141" pos:column="44">(<argument><expr><name pos:line="141" pos:column="45">SCE_FORTH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="142" pos:column="27">else <if pos:line="142" pos:column="32">if <condition pos:line="142" pos:column="35">(<expr><name><name pos:line="142" pos:column="36">sc</name><op:operator pos:line="142" pos:column="38">.</op:operator><name pos:line="142" pos:column="39">ch</name></name> <op:operator pos:line="142" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="142" pos:column="45">'{'</lit:literal></expr>)</condition><then pos:line="142" pos:column="49"> <block pos:line="142" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="143" pos:column="33">sc</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">SetState</name></name><argument_list pos:line="143" pos:column="44">(<argument><expr><name pos:line="143" pos:column="45">SCE_FORTH_LOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="144" pos:column="27">else <if pos:line="144" pos:column="32">if <condition pos:line="144" pos:column="35">(<expr><name><name pos:line="144" pos:column="36">sc</name><op:operator pos:line="144" pos:column="38">.</op:operator><name pos:line="144" pos:column="39">ch</name></name> <op:operator pos:line="144" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="45">':'</lit:literal> <op:operator pos:line="144" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="144" pos:column="52">isascii</name><argument_list pos:line="144" pos:column="59">(<argument><expr><name><name pos:line="144" pos:column="60">sc</name><op:operator pos:line="144" pos:column="62">.</op:operator><name pos:line="144" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="144" pos:column="71">&amp;&amp;</op:operator> <call><name pos:line="144" pos:column="74">isspace</name><argument_list pos:line="144" pos:column="81">(<argument><expr><name><name pos:line="144" pos:column="82">sc</name><op:operator pos:line="144" pos:column="84">.</op:operator><name pos:line="144" pos:column="85">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="144" pos:column="93"> <block pos:line="144" pos:column="94">{
				<comment type="line" pos:line="145" pos:column="33">// highlight word definitions e.g.  : GCD ( n n -- n ) ..... ;</comment>
				<comment type="line" pos:line="146" pos:column="33">//                                  ^ ^^^</comment>
				<expr_stmt><expr><call><name><name pos:line="147" pos:column="33">sc</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">SetState</name></name><argument_list pos:line="147" pos:column="44">(<argument><expr><name pos:line="147" pos:column="45">SCE_FORTH_DEFWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="148" pos:column="33">while<condition pos:line="148" pos:column="38">(<expr><call><name><name pos:line="148" pos:column="39">sc</name><op:operator pos:line="148" pos:column="41">.</op:operator><name pos:line="148" pos:column="42">More</name></name><argument_list pos:line="148" pos:column="46">()</argument_list></call> <op:operator pos:line="148" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="148" pos:column="52">isascii</name><argument_list pos:line="148" pos:column="59">(<argument><expr><name><name pos:line="148" pos:column="60">sc</name><op:operator pos:line="148" pos:column="62">.</op:operator><name pos:line="148" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="148" pos:column="71">&amp;&amp;</op:operator> <call><name pos:line="148" pos:column="74">isspace</name><argument_list pos:line="148" pos:column="81">(<argument><expr><name><name pos:line="148" pos:column="82">sc</name><op:operator pos:line="148" pos:column="84">.</op:operator><name pos:line="148" pos:column="85">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><call><name><name pos:line="149" pos:column="41">sc</name><op:operator pos:line="149" pos:column="43">.</op:operator><name pos:line="149" pos:column="44">Forward</name></name><argument_list pos:line="149" pos:column="51">()</argument_list></call></expr>;</expr_stmt></while>
			}</block></then> <else pos:line="150" pos:column="27">else <if pos:line="150" pos:column="32">if <condition pos:line="150" pos:column="35">(<expr><name><name pos:line="150" pos:column="36">sc</name><op:operator pos:line="150" pos:column="38">.</op:operator><name pos:line="150" pos:column="39">ch</name></name> <op:operator pos:line="150" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="150" pos:column="45">';'</lit:literal> <op:operator pos:line="150" pos:column="49">&amp;&amp;</op:operator>
					<op:operator pos:line="151" pos:column="41">(</op:operator><name><name pos:line="151" pos:column="42">sc</name><op:operator pos:line="151" pos:column="44">.</op:operator><name pos:line="151" pos:column="45">atLineStart</name></name> <op:operator pos:line="151" pos:column="57">||</op:operator> <call><name pos:line="151" pos:column="60">IsASpaceChar</name><argument_list pos:line="151" pos:column="72">(<argument><expr><name><name pos:line="151" pos:column="73">sc</name><op:operator pos:line="151" pos:column="75">.</op:operator><name pos:line="151" pos:column="76">chPrev</name></name></expr></argument>)</argument_list></call><op:operator pos:line="151" pos:column="83">)</op:operator> <op:operator pos:line="151" pos:column="85">&amp;&amp;</op:operator>
					<op:operator pos:line="152" pos:column="41">(</op:operator><name><name pos:line="152" pos:column="42">sc</name><op:operator pos:line="152" pos:column="44">.</op:operator><name pos:line="152" pos:column="45">atLineEnd</name></name>   <op:operator pos:line="152" pos:column="57">||</op:operator> <call><name pos:line="152" pos:column="60">IsASpaceChar</name><argument_list pos:line="152" pos:column="72">(<argument><expr><name><name pos:line="152" pos:column="73">sc</name><op:operator pos:line="152" pos:column="75">.</op:operator><name pos:line="152" pos:column="76">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="152" pos:column="83">)</op:operator></expr>	)</condition><then pos:line="152" pos:column="90"> <block pos:line="152" pos:column="91">{
				<comment type="line" pos:line="153" pos:column="33">// mark the ';' that ends a word</comment>
				<expr_stmt><expr><call><name><name pos:line="154" pos:column="33">sc</name><op:operator pos:line="154" pos:column="35">.</op:operator><name pos:line="154" pos:column="36">SetState</name></name><argument_list pos:line="154" pos:column="44">(<argument><expr><name pos:line="154" pos:column="45">SCE_FORTH_DEFWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="155" pos:column="33">sc</name><op:operator pos:line="155" pos:column="35">.</op:operator><name pos:line="155" pos:column="36">ForwardSetState</name></name><argument_list pos:line="155" pos:column="51">(<argument><expr><name pos:line="155" pos:column="52">SCE_FORTH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="160" pos:column="9">sc</name><op:operator pos:line="160" pos:column="11">.</op:operator><name pos:line="160" pos:column="12">Complete</name></name><argument_list pos:line="160" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="163" pos:column="1">static</specifier> <name pos:line="163" pos:column="8">void</name></type> <name pos:line="163" pos:column="13">FoldForthDoc</name><parameter_list pos:line="163" pos:column="25">(<param><decl><type><name pos:line="163" pos:column="26">unsigned</name></type> <name pos:line="163" pos:column="35">int</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="40">int</name></type></decl></param>, <param><decl><type><name pos:line="163" pos:column="45">int</name></type></decl></param>, <param><decl><type><name><name pos:line="163" pos:column="50">WordList</name> <type:modifier pos:line="163" pos:column="59">*</type:modifier><index pos:line="163" pos:column="60">[]</index></name></type></decl></param>,
						<param><decl><type><name pos:line="164" pos:column="49">Accessor</name> <type:modifier pos:line="164" pos:column="58">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="164" pos:column="61">{
}</block></function>

<decl_stmt><decl><type><specifier pos:line="167" pos:column="1">static</specifier> <specifier pos:line="167" pos:column="8">const</specifier> <name pos:line="167" pos:column="14">char</name> <type:modifier pos:line="167" pos:column="19">*</type:modifier> <specifier pos:line="167" pos:column="21">const</specifier></type> <name><name pos:line="167" pos:column="27">forthWordLists</name><index pos:line="167" pos:column="41">[]</index></name> <init pos:line="167" pos:column="44">= <expr><block pos:line="167" pos:column="46">{
			<expr><lit:literal type="string" pos:line="168" pos:column="25">"control keywords"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="169" pos:column="25">"keywords"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="170" pos:column="25">"definition words"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="171" pos:column="25">"prewords with one argument"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="172" pos:column="25">"prewords with two arguments"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="173" pos:column="25">"string definition keywords"</lit:literal></expr>,
			<expr><lit:literal type="number" pos:line="174" pos:column="25">0</lit:literal></expr>,
		}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="177" pos:column="1">LexerModule</name></type> <name pos:line="177" pos:column="13">lmForth</name><argument_list pos:line="177" pos:column="20">(<argument><expr><name pos:line="177" pos:column="21">SCLEX_FORTH</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="34">ColouriseForthDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="53">"forth"</lit:literal></expr></argument>, <argument><expr><name pos:line="177" pos:column="62">FoldForthDoc</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="76">forthWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>


</unit>
