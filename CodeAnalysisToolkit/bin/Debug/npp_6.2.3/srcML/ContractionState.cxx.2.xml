<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\ContractionState.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file ContractionState.cxx
 ** Manages visibility of lines for folding and wrapping.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2007 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="10" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ContractionState.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef</cpp:directive> <name pos:line="17" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="18" pos:column="1">using namespace <name pos:line="18" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="21" pos:column="1">ContractionState</name><op:operator pos:line="21" pos:column="17">::</op:operator><name pos:line="21" pos:column="19">ContractionState</name></name><parameter_list pos:line="21" pos:column="35">()</parameter_list> <member_list pos:line="21" pos:column="38">: <call><name pos:line="21" pos:column="40">visible</name><argument_list pos:line="21" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="48">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="21" pos:column="50">,</op:operator> <call><name pos:line="21" pos:column="52">expanded</name><argument_list pos:line="21" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="21" pos:column="63">,</op:operator> <call><name pos:line="21" pos:column="65">heights</name><argument_list pos:line="21" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="21" pos:column="75">,</op:operator> <call><name pos:line="21" pos:column="77">displayLines</name><argument_list pos:line="21" pos:column="89">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="90">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="21" pos:column="92">,</op:operator> <call><name pos:line="21" pos:column="94">linesInDocument</name><argument_list pos:line="21" pos:column="109">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="110">1</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="21" pos:column="113">{
	<comment type="line" pos:line="22" pos:column="9">//InsertLine(0);</comment>
}</block></constructor>

<destructor><name><name pos:line="25" pos:column="1">ContractionState</name><op:operator pos:line="25" pos:column="17">::</op:operator>~<name pos:line="25" pos:column="20">ContractionState</name></name><parameter_list pos:line="25" pos:column="36">()</parameter_list> <block pos:line="25" pos:column="39">{
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">Clear</name><argument_list pos:line="26" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="29" pos:column="1">void</name></type> <name><name pos:line="29" pos:column="6">ContractionState</name><op:operator pos:line="29" pos:column="22">::</op:operator><name pos:line="29" pos:column="24">EnsureData</name></name><parameter_list pos:line="29" pos:column="34">()</parameter_list> <block pos:line="29" pos:column="37">{
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">OneToOne</name><argument_list pos:line="30" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="30" pos:column="24"> <block pos:line="30" pos:column="25">{
		<expr_stmt><expr><name pos:line="31" pos:column="17">visible</name> <op:operator pos:line="31" pos:column="25">=</op:operator> <op:operator pos:line="31" pos:column="27">new</op:operator> <call><name pos:line="31" pos:column="31">RunStyles</name><argument_list pos:line="31" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">expanded</name> <op:operator pos:line="32" pos:column="26">=</op:operator> <op:operator pos:line="32" pos:column="28">new</op:operator> <call><name pos:line="32" pos:column="32">RunStyles</name><argument_list pos:line="32" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">heights</name> <op:operator pos:line="33" pos:column="25">=</op:operator> <op:operator pos:line="33" pos:column="27">new</op:operator> <call><name pos:line="33" pos:column="31">RunStyles</name><argument_list pos:line="33" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">displayLines</name> <op:operator pos:line="34" pos:column="30">=</op:operator> <op:operator pos:line="34" pos:column="32">new</op:operator> <call><name pos:line="34" pos:column="36">Partitioning</name><argument_list pos:line="34" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="34" pos:column="49">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">InsertLines</name><argument_list pos:line="35" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="35" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="32">linesInDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="39" pos:column="1">void</name></type> <name><name pos:line="39" pos:column="6">ContractionState</name><op:operator pos:line="39" pos:column="22">::</op:operator><name pos:line="39" pos:column="24">Clear</name></name><parameter_list pos:line="39" pos:column="29">()</parameter_list> <block pos:line="39" pos:column="32">{
	<expr_stmt><expr><op:operator pos:line="40" pos:column="9">delete</op:operator> <name pos:line="40" pos:column="16">visible</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="41" pos:column="9">visible</name> <op:operator pos:line="41" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="41" pos:column="19">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="42" pos:column="9">delete</op:operator> <name pos:line="42" pos:column="16">expanded</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="43" pos:column="9">expanded</name> <op:operator pos:line="43" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="43" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="44" pos:column="9">delete</op:operator> <name pos:line="44" pos:column="16">heights</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="45" pos:column="9">heights</name> <op:operator pos:line="45" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="45" pos:column="19">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="46" pos:column="9">delete</op:operator> <name pos:line="46" pos:column="16">displayLines</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="47" pos:column="9">displayLines</name> <op:operator pos:line="47" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="47" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="48" pos:column="9">linesInDocument</name> <op:operator pos:line="48" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="48" pos:column="27">1</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="51" pos:column="1">int</name></type> <name><name pos:line="51" pos:column="5">ContractionState</name><op:operator pos:line="51" pos:column="21">::</op:operator><name pos:line="51" pos:column="23">LinesInDoc</name></name><parameter_list pos:line="51" pos:column="33">()</parameter_list> <specifier pos:line="51" pos:column="36">const</specifier> <block pos:line="51" pos:column="42">{
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">OneToOne</name><argument_list pos:line="52" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="52" pos:column="24"> <block pos:line="52" pos:column="25">{
		<return pos:line="53" pos:column="17">return <expr><name pos:line="53" pos:column="24">linesInDocument</name></expr>;</return>
	}</block></then> <else pos:line="54" pos:column="11">else <block pos:line="54" pos:column="16">{
		<return pos:line="55" pos:column="17">return <expr><call><name><name pos:line="55" pos:column="24">displayLines</name><op:operator pos:line="55" pos:column="36">-&gt;</op:operator><name pos:line="55" pos:column="38">Partitions</name></name><argument_list pos:line="55" pos:column="48">()</argument_list></call> <op:operator pos:line="55" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="55" pos:column="53">1</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="59" pos:column="1">int</name></type> <name><name pos:line="59" pos:column="5">ContractionState</name><op:operator pos:line="59" pos:column="21">::</op:operator><name pos:line="59" pos:column="23">LinesDisplayed</name></name><parameter_list pos:line="59" pos:column="37">()</parameter_list> <specifier pos:line="59" pos:column="40">const</specifier> <block pos:line="59" pos:column="46">{
	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><call><name pos:line="60" pos:column="13">OneToOne</name><argument_list pos:line="60" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="60" pos:column="24"> <block pos:line="60" pos:column="25">{
		<return pos:line="61" pos:column="17">return <expr><name pos:line="61" pos:column="24">linesInDocument</name></expr>;</return>
	}</block></then> <else pos:line="62" pos:column="11">else <block pos:line="62" pos:column="16">{
		<return pos:line="63" pos:column="17">return <expr><call><name><name pos:line="63" pos:column="24">displayLines</name><op:operator pos:line="63" pos:column="36">-&gt;</op:operator><name pos:line="63" pos:column="38">PositionFromPartition</name></name><argument_list pos:line="63" pos:column="59">(<argument><expr><call><name pos:line="63" pos:column="60">LinesInDoc</name><argument_list pos:line="63" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="67" pos:column="1">int</name></type> <name><name pos:line="67" pos:column="5">ContractionState</name><op:operator pos:line="67" pos:column="21">::</op:operator><name pos:line="67" pos:column="23">DisplayFromDoc</name></name><parameter_list pos:line="67" pos:column="37">(<param><decl><type><name pos:line="67" pos:column="38">int</name></type> <name pos:line="67" pos:column="42">lineDoc</name></decl></param>)</parameter_list> <specifier pos:line="67" pos:column="51">const</specifier> <block pos:line="67" pos:column="57">{
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">OneToOne</name><argument_list pos:line="68" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="68" pos:column="24"> <block pos:line="68" pos:column="25">{
		<return pos:line="69" pos:column="17">return <expr><name pos:line="69" pos:column="24">lineDoc</name></expr>;</return>
	}</block></then> <else pos:line="70" pos:column="11">else <block pos:line="70" pos:column="16">{
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">lineDoc</name> <op:operator pos:line="71" pos:column="29">&gt;</op:operator> <call><name><name pos:line="71" pos:column="31">displayLines</name><op:operator pos:line="71" pos:column="43">-&gt;</op:operator><name pos:line="71" pos:column="45">Partitions</name></name><argument_list pos:line="71" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="71" pos:column="58">
			<expr_stmt><expr><name pos:line="72" pos:column="25">lineDoc</name> <op:operator pos:line="72" pos:column="33">=</op:operator> <call><name><name pos:line="72" pos:column="35">displayLines</name><op:operator pos:line="72" pos:column="47">-&gt;</op:operator><name pos:line="72" pos:column="49">Partitions</name></name><argument_list pos:line="72" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="73" pos:column="17">return <expr><call><name><name pos:line="73" pos:column="24">displayLines</name><op:operator pos:line="73" pos:column="36">-&gt;</op:operator><name pos:line="73" pos:column="38">PositionFromPartition</name></name><argument_list pos:line="73" pos:column="59">(<argument><expr><name pos:line="73" pos:column="60">lineDoc</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="77" pos:column="1">int</name></type> <name><name pos:line="77" pos:column="5">ContractionState</name><op:operator pos:line="77" pos:column="21">::</op:operator><name pos:line="77" pos:column="23">DocFromDisplay</name></name><parameter_list pos:line="77" pos:column="37">(<param><decl><type><name pos:line="77" pos:column="38">int</name></type> <name pos:line="77" pos:column="42">lineDisplay</name></decl></param>)</parameter_list> <specifier pos:line="77" pos:column="55">const</specifier> <block pos:line="77" pos:column="61">{
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><call><name pos:line="78" pos:column="13">OneToOne</name><argument_list pos:line="78" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="78" pos:column="24"> <block pos:line="78" pos:column="25">{
		<return pos:line="79" pos:column="17">return <expr><name pos:line="79" pos:column="24">lineDisplay</name></expr>;</return>
	}</block></then> <else pos:line="80" pos:column="11">else <block pos:line="80" pos:column="16">{
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">lineDisplay</name> <op:operator pos:line="81" pos:column="33">&lt;=</op:operator> <lit:literal type="number" pos:line="81" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="81" pos:column="38"> <block pos:line="81" pos:column="39">{
			<return pos:line="82" pos:column="25">return <expr><lit:literal type="number" pos:line="82" pos:column="32">0</lit:literal></expr>;</return>
		}</block></then></if>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">lineDisplay</name> <op:operator pos:line="84" pos:column="33">&gt;</op:operator> <call><name pos:line="84" pos:column="35">LinesDisplayed</name><argument_list pos:line="84" pos:column="49">()</argument_list></call></expr>)</condition><then pos:line="84" pos:column="52"> <block pos:line="84" pos:column="53">{
			<return pos:line="85" pos:column="25">return <expr><call><name><name pos:line="85" pos:column="32">displayLines</name><op:operator pos:line="85" pos:column="44">-&gt;</op:operator><name pos:line="85" pos:column="46">PartitionFromPosition</name></name><argument_list pos:line="85" pos:column="67">(<argument><expr><call><name pos:line="85" pos:column="68">LinesDisplayed</name><argument_list pos:line="85" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">int</name></type> <name pos:line="87" pos:column="21">lineDoc</name> <init pos:line="87" pos:column="29">= <expr><call><name><name pos:line="87" pos:column="31">displayLines</name><op:operator pos:line="87" pos:column="43">-&gt;</op:operator><name pos:line="87" pos:column="45">PartitionFromPosition</name></name><argument_list pos:line="87" pos:column="66">(<argument><expr><name pos:line="87" pos:column="67">lineDisplay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="88" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="88" pos:column="32">(<argument><expr><call><name pos:line="88" pos:column="33">GetVisible</name><argument_list pos:line="88" pos:column="43">(<argument><expr><name pos:line="88" pos:column="44">lineDoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="89" pos:column="17">return <expr><name pos:line="89" pos:column="24">lineDoc</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="93" pos:column="1">void</name></type> <name><name pos:line="93" pos:column="6">ContractionState</name><op:operator pos:line="93" pos:column="22">::</op:operator><name pos:line="93" pos:column="24">InsertLine</name></name><parameter_list pos:line="93" pos:column="34">(<param><decl><type><name pos:line="93" pos:column="35">int</name></type> <name pos:line="93" pos:column="39">lineDoc</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="48">{
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><call><name pos:line="94" pos:column="13">OneToOne</name><argument_list pos:line="94" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="94" pos:column="24"> <block pos:line="94" pos:column="25">{
		<expr_stmt><expr><name pos:line="95" pos:column="17">linesInDocument</name><op:operator pos:line="95" pos:column="32">++</op:operator></expr>;</expr_stmt>
	}</block></then> <else pos:line="96" pos:column="11">else <block pos:line="96" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="97" pos:column="17">visible</name><op:operator pos:line="97" pos:column="24">-&gt;</op:operator><name pos:line="97" pos:column="26">InsertSpace</name></name><argument_list pos:line="97" pos:column="37">(<argument><expr><name pos:line="97" pos:column="38">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="97" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="98" pos:column="17">visible</name><op:operator pos:line="98" pos:column="24">-&gt;</op:operator><name pos:line="98" pos:column="26">SetValueAt</name></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name pos:line="98" pos:column="37">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="98" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="99" pos:column="17">expanded</name><op:operator pos:line="99" pos:column="25">-&gt;</op:operator><name pos:line="99" pos:column="27">InsertSpace</name></name><argument_list pos:line="99" pos:column="38">(<argument><expr><name pos:line="99" pos:column="39">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="99" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="100" pos:column="17">expanded</name><op:operator pos:line="100" pos:column="25">-&gt;</op:operator><name pos:line="100" pos:column="27">SetValueAt</name></name><argument_list pos:line="100" pos:column="37">(<argument><expr><name pos:line="100" pos:column="38">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="100" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="101" pos:column="17">heights</name><op:operator pos:line="101" pos:column="24">-&gt;</op:operator><name pos:line="101" pos:column="26">InsertSpace</name></name><argument_list pos:line="101" pos:column="37">(<argument><expr><name pos:line="101" pos:column="38">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="101" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="102" pos:column="17">heights</name><op:operator pos:line="102" pos:column="24">-&gt;</op:operator><name pos:line="102" pos:column="26">SetValueAt</name></name><argument_list pos:line="102" pos:column="36">(<argument><expr><name pos:line="102" pos:column="37">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="102" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="103" pos:column="17">int</name></type> <name pos:line="103" pos:column="21">lineDisplay</name> <init pos:line="103" pos:column="33">= <expr><call><name pos:line="103" pos:column="35">DisplayFromDoc</name><argument_list pos:line="103" pos:column="49">(<argument><expr><name pos:line="103" pos:column="50">lineDoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="104" pos:column="17">displayLines</name><op:operator pos:line="104" pos:column="29">-&gt;</op:operator><name pos:line="104" pos:column="31">InsertPartition</name></name><argument_list pos:line="104" pos:column="46">(<argument><expr><name pos:line="104" pos:column="47">lineDoc</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="56">lineDisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="105" pos:column="17">displayLines</name><op:operator pos:line="105" pos:column="29">-&gt;</op:operator><name pos:line="105" pos:column="31">InsertText</name></name><argument_list pos:line="105" pos:column="41">(<argument><expr><name pos:line="105" pos:column="42">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="105" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="109" pos:column="1">void</name></type> <name><name pos:line="109" pos:column="6">ContractionState</name><op:operator pos:line="109" pos:column="22">::</op:operator><name pos:line="109" pos:column="24">InsertLines</name></name><parameter_list pos:line="109" pos:column="35">(<param><decl><type><name pos:line="109" pos:column="36">int</name></type> <name pos:line="109" pos:column="40">lineDoc</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="49">int</name></type> <name pos:line="109" pos:column="53">lineCount</name></decl></param>)</parameter_list> <block pos:line="109" pos:column="64">{
	<for pos:line="110" pos:column="9">for (<init><decl><type><name pos:line="110" pos:column="14">int</name></type> <name pos:line="110" pos:column="18">l</name> <init pos:line="110" pos:column="20">= <expr><lit:literal type="number" pos:line="110" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="110" pos:column="25">l</name> <op:operator pos:line="110" pos:column="27">&lt;</op:operator> <name pos:line="110" pos:column="29">lineCount</name></expr>;</condition> <incr><expr><name pos:line="110" pos:column="40">l</name><op:operator pos:line="110" pos:column="41">++</op:operator></expr></incr>) <block pos:line="110" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="111" pos:column="17">InsertLine</name><argument_list pos:line="111" pos:column="27">(<argument><expr><name pos:line="111" pos:column="28">lineDoc</name> <op:operator pos:line="111" pos:column="36">+</op:operator> <name pos:line="111" pos:column="38">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">Check</name><argument_list pos:line="113" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="116" pos:column="1">void</name></type> <name><name pos:line="116" pos:column="6">ContractionState</name><op:operator pos:line="116" pos:column="22">::</op:operator><name pos:line="116" pos:column="24">DeleteLine</name></name><parameter_list pos:line="116" pos:column="34">(<param><decl><type><name pos:line="116" pos:column="35">int</name></type> <name pos:line="116" pos:column="39">lineDoc</name></decl></param>)</parameter_list> <block pos:line="116" pos:column="48">{
	<if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><call><name pos:line="117" pos:column="13">OneToOne</name><argument_list pos:line="117" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="117" pos:column="24"> <block pos:line="117" pos:column="25">{
		<expr_stmt><expr><name pos:line="118" pos:column="17">linesInDocument</name><op:operator pos:line="118" pos:column="32">--</op:operator></expr>;</expr_stmt>
	}</block></then> <else pos:line="119" pos:column="11">else <block pos:line="119" pos:column="16">{
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><call><name pos:line="120" pos:column="21">GetVisible</name><argument_list pos:line="120" pos:column="31">(<argument><expr><name pos:line="120" pos:column="32">lineDoc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="120" pos:column="41"> <block pos:line="120" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="121" pos:column="25">displayLines</name><op:operator pos:line="121" pos:column="37">-&gt;</op:operator><name pos:line="121" pos:column="39">InsertText</name></name><argument_list pos:line="121" pos:column="49">(<argument><expr><name pos:line="121" pos:column="50">lineDoc</name></expr></argument>, <argument><expr><op:operator pos:line="121" pos:column="59">-</op:operator><call><name><name pos:line="121" pos:column="60">heights</name><op:operator pos:line="121" pos:column="67">-&gt;</op:operator><name pos:line="121" pos:column="69">ValueAt</name></name><argument_list pos:line="121" pos:column="76">(<argument><expr><name pos:line="121" pos:column="77">lineDoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="123" pos:column="17">displayLines</name><op:operator pos:line="123" pos:column="29">-&gt;</op:operator><name pos:line="123" pos:column="31">RemovePartition</name></name><argument_list pos:line="123" pos:column="46">(<argument><expr><name pos:line="123" pos:column="47">lineDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="124" pos:column="17">visible</name><op:operator pos:line="124" pos:column="24">-&gt;</op:operator><name pos:line="124" pos:column="26">DeleteRange</name></name><argument_list pos:line="124" pos:column="37">(<argument><expr><name pos:line="124" pos:column="38">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="125" pos:column="17">expanded</name><op:operator pos:line="125" pos:column="25">-&gt;</op:operator><name pos:line="125" pos:column="27">DeleteRange</name></name><argument_list pos:line="125" pos:column="38">(<argument><expr><name pos:line="125" pos:column="39">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="125" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="126" pos:column="17">heights</name><op:operator pos:line="126" pos:column="24">-&gt;</op:operator><name pos:line="126" pos:column="26">DeleteRange</name></name><argument_list pos:line="126" pos:column="37">(<argument><expr><name pos:line="126" pos:column="38">lineDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="126" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="130" pos:column="1">void</name></type> <name><name pos:line="130" pos:column="6">ContractionState</name><op:operator pos:line="130" pos:column="22">::</op:operator><name pos:line="130" pos:column="24">DeleteLines</name></name><parameter_list pos:line="130" pos:column="35">(<param><decl><type><name pos:line="130" pos:column="36">int</name></type> <name pos:line="130" pos:column="40">lineDoc</name></decl></param>, <param><decl><type><name pos:line="130" pos:column="49">int</name></type> <name pos:line="130" pos:column="53">lineCount</name></decl></param>)</parameter_list> <block pos:line="130" pos:column="64">{
	<for pos:line="131" pos:column="9">for (<init><decl><type><name pos:line="131" pos:column="14">int</name></type> <name pos:line="131" pos:column="18">l</name> <init pos:line="131" pos:column="20">= <expr><lit:literal type="number" pos:line="131" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="131" pos:column="25">l</name> <op:operator pos:line="131" pos:column="27">&lt;</op:operator> <name pos:line="131" pos:column="29">lineCount</name></expr>;</condition> <incr><expr><name pos:line="131" pos:column="40">l</name><op:operator pos:line="131" pos:column="41">++</op:operator></expr></incr>) <block pos:line="131" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="132" pos:column="17">DeleteLine</name><argument_list pos:line="132" pos:column="27">(<argument><expr><name pos:line="132" pos:column="28">lineDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="134" pos:column="9">Check</name><argument_list pos:line="134" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="137" pos:column="1">bool</name></type> <name><name pos:line="137" pos:column="6">ContractionState</name><op:operator pos:line="137" pos:column="22">::</op:operator><name pos:line="137" pos:column="24">GetVisible</name></name><parameter_list pos:line="137" pos:column="34">(<param><decl><type><name pos:line="137" pos:column="35">int</name></type> <name pos:line="137" pos:column="39">lineDoc</name></decl></param>)</parameter_list> <specifier pos:line="137" pos:column="48">const</specifier> <block pos:line="137" pos:column="54">{
	<if pos:line="138" pos:column="9">if <condition pos:line="138" pos:column="12">(<expr><call><name pos:line="138" pos:column="13">OneToOne</name><argument_list pos:line="138" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="138" pos:column="24"> <block pos:line="138" pos:column="25">{
		<return pos:line="139" pos:column="17">return <expr><lit:literal type="boolean" pos:line="139" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then> <else pos:line="140" pos:column="11">else <block pos:line="140" pos:column="16">{
		<if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><name pos:line="141" pos:column="21">lineDoc</name> <op:operator pos:line="141" pos:column="29">&gt;=</op:operator> <call><name><name pos:line="141" pos:column="32">visible</name><op:operator pos:line="141" pos:column="39">-&gt;</op:operator><name pos:line="141" pos:column="41">Length</name></name><argument_list pos:line="141" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="141" pos:column="50">
			<return pos:line="142" pos:column="25">return <expr><lit:literal type="boolean" pos:line="142" pos:column="32">true</lit:literal></expr>;</return></then></if>
		<return pos:line="143" pos:column="17">return <expr><call><name><name pos:line="143" pos:column="24">visible</name><op:operator pos:line="143" pos:column="31">-&gt;</op:operator><name pos:line="143" pos:column="33">ValueAt</name></name><argument_list pos:line="143" pos:column="40">(<argument><expr><name pos:line="143" pos:column="41">lineDoc</name></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="143" pos:column="53">1</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="147" pos:column="1">bool</name></type> <name><name pos:line="147" pos:column="6">ContractionState</name><op:operator pos:line="147" pos:column="22">::</op:operator><name pos:line="147" pos:column="24">SetVisible</name></name><parameter_list pos:line="147" pos:column="34">(<param><decl><type><name pos:line="147" pos:column="35">int</name></type> <name pos:line="147" pos:column="39">lineDocStart</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="53">int</name></type> <name pos:line="147" pos:column="57">lineDocEnd</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="69">bool</name></type> <name pos:line="147" pos:column="74">visible_</name></decl></param>)</parameter_list> <block pos:line="147" pos:column="84">{
	<if pos:line="148" pos:column="9">if <condition pos:line="148" pos:column="12">(<expr><call><name pos:line="148" pos:column="13">OneToOne</name><argument_list pos:line="148" pos:column="21">()</argument_list></call> <op:operator pos:line="148" pos:column="24">&amp;&amp;</op:operator> <name pos:line="148" pos:column="27">visible_</name></expr>)</condition><then pos:line="148" pos:column="36"> <block pos:line="148" pos:column="37">{
		<return pos:line="149" pos:column="17">return <expr><lit:literal type="boolean" pos:line="149" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="150" pos:column="11">else <block pos:line="150" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="151" pos:column="17">EnsureData</name><argument_list pos:line="151" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">int</name></type> <name pos:line="152" pos:column="21">delta</name> <init pos:line="152" pos:column="27">= <expr><lit:literal type="number" pos:line="152" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="153" pos:column="17">Check</name><argument_list pos:line="153" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><op:operator pos:line="154" pos:column="21">(</op:operator><name pos:line="154" pos:column="22">lineDocStart</name> <op:operator pos:line="154" pos:column="35">&lt;=</op:operator> <name pos:line="154" pos:column="38">lineDocEnd</name><op:operator pos:line="154" pos:column="48">)</op:operator> <op:operator pos:line="154" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="154" pos:column="53">(</op:operator><name pos:line="154" pos:column="54">lineDocStart</name> <op:operator pos:line="154" pos:column="67">&gt;=</op:operator> <lit:literal type="number" pos:line="154" pos:column="70">0</lit:literal><op:operator pos:line="154" pos:column="71">)</op:operator> <op:operator pos:line="154" pos:column="73">&amp;&amp;</op:operator> <op:operator pos:line="154" pos:column="76">(</op:operator><name pos:line="154" pos:column="77">lineDocEnd</name> <op:operator pos:line="154" pos:column="88">&lt;</op:operator> <call><name pos:line="154" pos:column="90">LinesInDoc</name><argument_list pos:line="154" pos:column="100">()</argument_list></call><op:operator pos:line="154" pos:column="102">)</op:operator></expr>)</condition><then pos:line="154" pos:column="104"> <block pos:line="154" pos:column="105">{
			<for pos:line="155" pos:column="25">for (<init><decl><type><name pos:line="155" pos:column="30">int</name></type> <name pos:line="155" pos:column="34">line</name> <init pos:line="155" pos:column="39">= <expr><name pos:line="155" pos:column="41">lineDocStart</name></expr></init></decl>;</init> <condition><expr><name pos:line="155" pos:column="55">line</name> <op:operator pos:line="155" pos:column="60">&lt;=</op:operator> <name pos:line="155" pos:column="63">lineDocEnd</name></expr>;</condition> <incr><expr><name pos:line="155" pos:column="75">line</name><op:operator pos:line="155" pos:column="79">++</op:operator></expr></incr>) <block pos:line="155" pos:column="83">{
				<if pos:line="156" pos:column="33">if <condition pos:line="156" pos:column="36">(<expr><call><name pos:line="156" pos:column="37">GetVisible</name><argument_list pos:line="156" pos:column="47">(<argument><expr><name pos:line="156" pos:column="48">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="156" pos:column="54">!=</op:operator> <name pos:line="156" pos:column="57">visible_</name></expr>)</condition><then pos:line="156" pos:column="66"> <block pos:line="156" pos:column="67">{
					<decl_stmt><decl><type><name pos:line="157" pos:column="41">int</name></type> <name pos:line="157" pos:column="45">difference</name> <init pos:line="157" pos:column="56">= <expr><name pos:line="157" pos:column="58">visible_</name> <op:operator pos:line="157" pos:column="67">?</op:operator> <call><name><name pos:line="157" pos:column="69">heights</name><op:operator pos:line="157" pos:column="76">-&gt;</op:operator><name pos:line="157" pos:column="78">ValueAt</name></name><argument_list pos:line="157" pos:column="85">(<argument><expr><name pos:line="157" pos:column="86">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="157" pos:column="92">:</op:operator> <op:operator pos:line="157" pos:column="94">-</op:operator><call><name><name pos:line="157" pos:column="95">heights</name><op:operator pos:line="157" pos:column="102">-&gt;</op:operator><name pos:line="157" pos:column="104">ValueAt</name></name><argument_list pos:line="157" pos:column="111">(<argument><expr><name pos:line="157" pos:column="112">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="158" pos:column="41">visible</name><op:operator pos:line="158" pos:column="48">-&gt;</op:operator><name pos:line="158" pos:column="50">SetValueAt</name></name><argument_list pos:line="158" pos:column="60">(<argument><expr><name pos:line="158" pos:column="61">line</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="67">visible_</name> <op:operator pos:line="158" pos:column="76">?</op:operator> <lit:literal type="number" pos:line="158" pos:column="78">1</lit:literal> <op:operator pos:line="158" pos:column="80">:</op:operator> <lit:literal type="number" pos:line="158" pos:column="82">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="159" pos:column="41">displayLines</name><op:operator pos:line="159" pos:column="53">-&gt;</op:operator><name pos:line="159" pos:column="55">InsertText</name></name><argument_list pos:line="159" pos:column="65">(<argument><expr><name pos:line="159" pos:column="66">line</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="72">difference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="160" pos:column="41">delta</name> <op:operator pos:line="160" pos:column="47">+=</op:operator> <name pos:line="160" pos:column="50">difference</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></then> <else pos:line="163" pos:column="19">else <block pos:line="163" pos:column="24">{
			<return pos:line="164" pos:column="25">return <expr><lit:literal type="boolean" pos:line="164" pos:column="32">false</lit:literal></expr>;</return>
		}</block></else></if>
		<expr_stmt><expr><call><name pos:line="166" pos:column="17">Check</name><argument_list pos:line="166" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="167" pos:column="17">return <expr><name pos:line="167" pos:column="24">delta</name> <op:operator pos:line="167" pos:column="30">!=</op:operator> <lit:literal type="number" pos:line="167" pos:column="33">0</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="171" pos:column="1">bool</name></type> <name><name pos:line="171" pos:column="6">ContractionState</name><op:operator pos:line="171" pos:column="22">::</op:operator><name pos:line="171" pos:column="24">HiddenLines</name></name><parameter_list pos:line="171" pos:column="35">()</parameter_list> <specifier pos:line="171" pos:column="38">const</specifier> <block pos:line="171" pos:column="44">{
	<if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><call><name pos:line="172" pos:column="13">OneToOne</name><argument_list pos:line="172" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="172" pos:column="24"> <block pos:line="172" pos:column="25">{
		<return pos:line="173" pos:column="17">return <expr><lit:literal type="boolean" pos:line="173" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="174" pos:column="11">else <block pos:line="174" pos:column="16">{
		<return pos:line="175" pos:column="17">return <expr><op:operator pos:line="175" pos:column="24">!</op:operator><call><name><name pos:line="175" pos:column="25">visible</name><op:operator pos:line="175" pos:column="32">-&gt;</op:operator><name pos:line="175" pos:column="34">AllSameAs</name></name><argument_list pos:line="175" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="175" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="179" pos:column="1">bool</name></type> <name><name pos:line="179" pos:column="6">ContractionState</name><op:operator pos:line="179" pos:column="22">::</op:operator><name pos:line="179" pos:column="24">GetExpanded</name></name><parameter_list pos:line="179" pos:column="35">(<param><decl><type><name pos:line="179" pos:column="36">int</name></type> <name pos:line="179" pos:column="40">lineDoc</name></decl></param>)</parameter_list> <specifier pos:line="179" pos:column="49">const</specifier> <block pos:line="179" pos:column="55">{
	<if pos:line="180" pos:column="9">if <condition pos:line="180" pos:column="12">(<expr><call><name pos:line="180" pos:column="13">OneToOne</name><argument_list pos:line="180" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="180" pos:column="24"> <block pos:line="180" pos:column="25">{
		<return pos:line="181" pos:column="17">return <expr><lit:literal type="boolean" pos:line="181" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then> <else pos:line="182" pos:column="11">else <block pos:line="182" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="183" pos:column="17">Check</name><argument_list pos:line="183" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="184" pos:column="17">return <expr><call><name><name pos:line="184" pos:column="24">expanded</name><op:operator pos:line="184" pos:column="32">-&gt;</op:operator><name pos:line="184" pos:column="34">ValueAt</name></name><argument_list pos:line="184" pos:column="41">(<argument><expr><name pos:line="184" pos:column="42">lineDoc</name></expr></argument>)</argument_list></call> <op:operator pos:line="184" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="184" pos:column="54">1</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="188" pos:column="1">bool</name></type> <name><name pos:line="188" pos:column="6">ContractionState</name><op:operator pos:line="188" pos:column="22">::</op:operator><name pos:line="188" pos:column="24">SetExpanded</name></name><parameter_list pos:line="188" pos:column="35">(<param><decl><type><name pos:line="188" pos:column="36">int</name></type> <name pos:line="188" pos:column="40">lineDoc</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="49">bool</name></type> <name pos:line="188" pos:column="54">expanded_</name></decl></param>)</parameter_list> <block pos:line="188" pos:column="65">{
	<if pos:line="189" pos:column="9">if <condition pos:line="189" pos:column="12">(<expr><call><name pos:line="189" pos:column="13">OneToOne</name><argument_list pos:line="189" pos:column="21">()</argument_list></call> <op:operator pos:line="189" pos:column="24">&amp;&amp;</op:operator> <name pos:line="189" pos:column="27">expanded_</name></expr>)</condition><then pos:line="189" pos:column="37"> <block pos:line="189" pos:column="38">{
		<return pos:line="190" pos:column="17">return <expr><lit:literal type="boolean" pos:line="190" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="191" pos:column="11">else <block pos:line="191" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="192" pos:column="17">EnsureData</name><argument_list pos:line="192" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="193" pos:column="17">if <condition pos:line="193" pos:column="20">(<expr><name pos:line="193" pos:column="21">expanded_</name> <op:operator pos:line="193" pos:column="31">!=</op:operator> <op:operator pos:line="193" pos:column="34">(</op:operator><call><name><name pos:line="193" pos:column="35">expanded</name><op:operator pos:line="193" pos:column="43">-&gt;</op:operator><name pos:line="193" pos:column="45">ValueAt</name></name><argument_list pos:line="193" pos:column="52">(<argument><expr><name pos:line="193" pos:column="53">lineDoc</name></expr></argument>)</argument_list></call> <op:operator pos:line="193" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="193" pos:column="65">1</lit:literal><op:operator pos:line="193" pos:column="66">)</op:operator></expr>)</condition><then pos:line="193" pos:column="68"> <block pos:line="193" pos:column="69">{
			<expr_stmt><expr><call><name><name pos:line="194" pos:column="25">expanded</name><op:operator pos:line="194" pos:column="33">-&gt;</op:operator><name pos:line="194" pos:column="35">SetValueAt</name></name><argument_list pos:line="194" pos:column="45">(<argument><expr><name pos:line="194" pos:column="46">lineDoc</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="55">expanded_</name> <op:operator pos:line="194" pos:column="65">?</op:operator> <lit:literal type="number" pos:line="194" pos:column="67">1</lit:literal> <op:operator pos:line="194" pos:column="69">:</op:operator> <lit:literal type="number" pos:line="194" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="195" pos:column="25">Check</name><argument_list pos:line="195" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="196" pos:column="25">return <expr><lit:literal type="boolean" pos:line="196" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then> <else pos:line="197" pos:column="19">else <block pos:line="197" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="198" pos:column="25">Check</name><argument_list pos:line="198" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="199" pos:column="25">return <expr><lit:literal type="boolean" pos:line="199" pos:column="32">false</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="204" pos:column="1">int</name></type> <name><name pos:line="204" pos:column="5">ContractionState</name><op:operator pos:line="204" pos:column="21">::</op:operator><name pos:line="204" pos:column="23">ContractedNext</name></name><parameter_list pos:line="204" pos:column="37">(<param><decl><type><name pos:line="204" pos:column="38">int</name></type> <name pos:line="204" pos:column="42">lineDocStart</name></decl></param>)</parameter_list> <specifier pos:line="204" pos:column="56">const</specifier> <block pos:line="204" pos:column="62">{
	<if pos:line="205" pos:column="9">if <condition pos:line="205" pos:column="12">(<expr><call><name pos:line="205" pos:column="13">OneToOne</name><argument_list pos:line="205" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="205" pos:column="24"> <block pos:line="205" pos:column="25">{
		<return pos:line="206" pos:column="17">return <expr><op:operator pos:line="206" pos:column="24">-</op:operator><lit:literal type="number" pos:line="206" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="207" pos:column="11">else <block pos:line="207" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="208" pos:column="17">Check</name><argument_list pos:line="208" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="209" pos:column="17">if <condition pos:line="209" pos:column="20">(<expr><op:operator pos:line="209" pos:column="21">!</op:operator><call><name><name pos:line="209" pos:column="22">expanded</name><op:operator pos:line="209" pos:column="30">-&gt;</op:operator><name pos:line="209" pos:column="32">ValueAt</name></name><argument_list pos:line="209" pos:column="39">(<argument><expr><name pos:line="209" pos:column="40">lineDocStart</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="209" pos:column="54"> <block pos:line="209" pos:column="55">{
			<return pos:line="210" pos:column="25">return <expr><name pos:line="210" pos:column="32">lineDocStart</name></expr>;</return>
		}</block></then> <else pos:line="211" pos:column="19">else <block pos:line="211" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="212" pos:column="25">int</name></type> <name pos:line="212" pos:column="29">lineDocNextChange</name> <init pos:line="212" pos:column="47">= <expr><call><name><name pos:line="212" pos:column="49">expanded</name><op:operator pos:line="212" pos:column="57">-&gt;</op:operator><name pos:line="212" pos:column="59">EndRun</name></name><argument_list pos:line="212" pos:column="65">(<argument><expr><name pos:line="212" pos:column="66">lineDocStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><name pos:line="213" pos:column="29">lineDocNextChange</name> <op:operator pos:line="213" pos:column="47">&lt;</op:operator> <call><name pos:line="213" pos:column="49">LinesInDoc</name><argument_list pos:line="213" pos:column="59">()</argument_list></call></expr>)</condition><then pos:line="213" pos:column="62">
				<return pos:line="214" pos:column="33">return <expr><name pos:line="214" pos:column="40">lineDocNextChange</name></expr>;</return></then>
			<else pos:line="215" pos:column="25">else
				<return pos:line="216" pos:column="33">return <expr><op:operator pos:line="216" pos:column="40">-</op:operator><lit:literal type="number" pos:line="216" pos:column="41">1</lit:literal></expr>;</return></else></if>
		}</block></else></if>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="221" pos:column="1">int</name></type> <name><name pos:line="221" pos:column="5">ContractionState</name><op:operator pos:line="221" pos:column="21">::</op:operator><name pos:line="221" pos:column="23">GetHeight</name></name><parameter_list pos:line="221" pos:column="32">(<param><decl><type><name pos:line="221" pos:column="33">int</name></type> <name pos:line="221" pos:column="37">lineDoc</name></decl></param>)</parameter_list> <specifier pos:line="221" pos:column="46">const</specifier> <block pos:line="221" pos:column="52">{
	<if pos:line="222" pos:column="9">if <condition pos:line="222" pos:column="12">(<expr><call><name pos:line="222" pos:column="13">OneToOne</name><argument_list pos:line="222" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="222" pos:column="24"> <block pos:line="222" pos:column="25">{
		<return pos:line="223" pos:column="17">return <expr><lit:literal type="number" pos:line="223" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="224" pos:column="11">else <block pos:line="224" pos:column="16">{
		<return pos:line="225" pos:column="17">return <expr><call><name><name pos:line="225" pos:column="24">heights</name><op:operator pos:line="225" pos:column="31">-&gt;</op:operator><name pos:line="225" pos:column="33">ValueAt</name></name><argument_list pos:line="225" pos:column="40">(<argument><expr><name pos:line="225" pos:column="41">lineDoc</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="229" pos:column="1">// Set the number of display lines needed for this line.</comment>
<comment type="line" pos:line="230" pos:column="1">// Return true if this is a change.</comment>
<function><type><name pos:line="231" pos:column="1">bool</name></type> <name><name pos:line="231" pos:column="6">ContractionState</name><op:operator pos:line="231" pos:column="22">::</op:operator><name pos:line="231" pos:column="24">SetHeight</name></name><parameter_list pos:line="231" pos:column="33">(<param><decl><type><name pos:line="231" pos:column="34">int</name></type> <name pos:line="231" pos:column="38">lineDoc</name></decl></param>, <param><decl><type><name pos:line="231" pos:column="47">int</name></type> <name pos:line="231" pos:column="51">height</name></decl></param>)</parameter_list> <block pos:line="231" pos:column="59">{
	<if pos:line="232" pos:column="9">if <condition pos:line="232" pos:column="12">(<expr><call><name pos:line="232" pos:column="13">OneToOne</name><argument_list pos:line="232" pos:column="21">()</argument_list></call> <op:operator pos:line="232" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="232" pos:column="27">(</op:operator><name pos:line="232" pos:column="28">height</name> <op:operator pos:line="232" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="232" pos:column="38">1</lit:literal><op:operator pos:line="232" pos:column="39">)</op:operator></expr>)</condition><then pos:line="232" pos:column="41"> <block pos:line="232" pos:column="42">{
		<return pos:line="233" pos:column="17">return <expr><lit:literal type="boolean" pos:line="233" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="234" pos:column="11">else <block pos:line="234" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="235" pos:column="17">EnsureData</name><argument_list pos:line="235" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="236" pos:column="17">if <condition pos:line="236" pos:column="20">(<expr><call><name pos:line="236" pos:column="21">GetHeight</name><argument_list pos:line="236" pos:column="30">(<argument><expr><name pos:line="236" pos:column="31">lineDoc</name></expr></argument>)</argument_list></call> <op:operator pos:line="236" pos:column="40">!=</op:operator> <name pos:line="236" pos:column="43">height</name></expr>)</condition><then pos:line="236" pos:column="50"> <block pos:line="236" pos:column="51">{
			<if pos:line="237" pos:column="25">if <condition pos:line="237" pos:column="28">(<expr><call><name pos:line="237" pos:column="29">GetVisible</name><argument_list pos:line="237" pos:column="39">(<argument><expr><name pos:line="237" pos:column="40">lineDoc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="237" pos:column="49"> <block pos:line="237" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="238" pos:column="33">displayLines</name><op:operator pos:line="238" pos:column="45">-&gt;</op:operator><name pos:line="238" pos:column="47">InsertText</name></name><argument_list pos:line="238" pos:column="57">(<argument><expr><name pos:line="238" pos:column="58">lineDoc</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="67">height</name> <op:operator pos:line="238" pos:column="74">-</op:operator> <call><name pos:line="238" pos:column="76">GetHeight</name><argument_list pos:line="238" pos:column="85">(<argument><expr><name pos:line="238" pos:column="86">lineDoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="240" pos:column="25">heights</name><op:operator pos:line="240" pos:column="32">-&gt;</op:operator><name pos:line="240" pos:column="34">SetValueAt</name></name><argument_list pos:line="240" pos:column="44">(<argument><expr><name pos:line="240" pos:column="45">lineDoc</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="54">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="241" pos:column="25">Check</name><argument_list pos:line="241" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="242" pos:column="25">return <expr><lit:literal type="boolean" pos:line="242" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then> <else pos:line="243" pos:column="19">else <block pos:line="243" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="244" pos:column="25">Check</name><argument_list pos:line="244" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="245" pos:column="25">return <expr><lit:literal type="boolean" pos:line="245" pos:column="32">false</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="250" pos:column="1">void</name></type> <name><name pos:line="250" pos:column="6">ContractionState</name><op:operator pos:line="250" pos:column="22">::</op:operator><name pos:line="250" pos:column="24">ShowAll</name></name><parameter_list pos:line="250" pos:column="31">()</parameter_list> <block pos:line="250" pos:column="34">{
	<decl_stmt><decl><type><name pos:line="251" pos:column="9">int</name></type> <name pos:line="251" pos:column="13">lines</name> <init pos:line="251" pos:column="19">= <expr><call><name pos:line="251" pos:column="21">LinesInDoc</name><argument_list pos:line="251" pos:column="31">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="252" pos:column="9">Clear</name><argument_list pos:line="252" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="253" pos:column="9">linesInDocument</name> <op:operator pos:line="253" pos:column="25">=</op:operator> <name pos:line="253" pos:column="27">lines</name></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="256" pos:column="1">// Debugging checks</comment>

<function><type><name pos:line="258" pos:column="1">void</name></type> <name><name pos:line="258" pos:column="6">ContractionState</name><op:operator pos:line="258" pos:column="22">::</op:operator><name pos:line="258" pos:column="24">Check</name></name><parameter_list pos:line="258" pos:column="29">()</parameter_list> <specifier pos:line="258" pos:column="32">const</specifier> <block pos:line="258" pos:column="38">{
<cpp:ifdef pos:line="259" pos:column="1">#<cpp:directive pos:line="259" pos:column="2">ifdef</cpp:directive> <name pos:line="259" pos:column="8">CHECK_CORRECTNESS</name></cpp:ifdef>
	<for pos:line="260" pos:column="9">for (<init><decl><type><name pos:line="260" pos:column="14">int</name></type> <name pos:line="260" pos:column="18">vline</name> <init pos:line="260" pos:column="24">= <expr><lit:literal type="number" pos:line="260" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="260" pos:column="29">vline</name> <op:operator pos:line="260" pos:column="35">&lt;</op:operator> <call><name pos:line="260" pos:column="37">LinesDisplayed</name><argument_list pos:line="260" pos:column="51">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="260" pos:column="55">vline</name><op:operator pos:line="260" pos:column="60">++</op:operator></expr></incr>) <block pos:line="260" pos:column="64">{
		<decl_stmt><decl><type><specifier pos:line="261" pos:column="17">const</specifier> <name pos:line="261" pos:column="23">int</name></type> <name pos:line="261" pos:column="27">lineDoc</name> <init pos:line="261" pos:column="35">= <expr><call><name pos:line="261" pos:column="37">DocFromDisplay</name><argument_list pos:line="261" pos:column="51">(<argument><expr><name pos:line="261" pos:column="52">vline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="262" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="262" pos:column="32">(<argument><expr><call><name pos:line="262" pos:column="33">GetVisible</name><argument_list pos:line="262" pos:column="43">(<argument><expr><name pos:line="262" pos:column="44">lineDoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for pos:line="264" pos:column="9">for (<init><decl><type><name pos:line="264" pos:column="14">int</name></type> <name pos:line="264" pos:column="18">lineDoc</name> <init pos:line="264" pos:column="26">= <expr><lit:literal type="number" pos:line="264" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="264" pos:column="31">lineDoc</name> <op:operator pos:line="264" pos:column="39">&lt;</op:operator> <call><name pos:line="264" pos:column="41">LinesInDoc</name><argument_list pos:line="264" pos:column="51">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="264" pos:column="55">lineDoc</name><op:operator pos:line="264" pos:column="62">++</op:operator></expr></incr>) <block pos:line="264" pos:column="66">{
		<decl_stmt><decl><type><specifier pos:line="265" pos:column="17">const</specifier> <name pos:line="265" pos:column="23">int</name></type> <name pos:line="265" pos:column="27">displayThis</name> <init pos:line="265" pos:column="39">= <expr><call><name pos:line="265" pos:column="41">DisplayFromDoc</name><argument_list pos:line="265" pos:column="55">(<argument><expr><name pos:line="265" pos:column="56">lineDoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="266" pos:column="17">const</specifier> <name pos:line="266" pos:column="23">int</name></type> <name pos:line="266" pos:column="27">displayNext</name> <init pos:line="266" pos:column="39">= <expr><call><name pos:line="266" pos:column="41">DisplayFromDoc</name><argument_list pos:line="266" pos:column="55">(<argument><expr><name pos:line="266" pos:column="56">lineDoc</name> <op:operator pos:line="266" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="266" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="267" pos:column="17">const</specifier> <name pos:line="267" pos:column="23">int</name></type> <name pos:line="267" pos:column="27">height</name> <init pos:line="267" pos:column="34">= <expr><name pos:line="267" pos:column="36">displayNext</name> <op:operator pos:line="267" pos:column="48">-</op:operator> <name pos:line="267" pos:column="50">displayThis</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="268" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="268" pos:column="32">(<argument><expr><name pos:line="268" pos:column="33">height</name> <op:operator pos:line="268" pos:column="40">&gt;=</op:operator> <lit:literal type="number" pos:line="268" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="269" pos:column="17">if <condition pos:line="269" pos:column="20">(<expr><call><name pos:line="269" pos:column="21">GetVisible</name><argument_list pos:line="269" pos:column="31">(<argument><expr><name pos:line="269" pos:column="32">lineDoc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="269" pos:column="41"> <block pos:line="269" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="270" pos:column="25">PLATFORM_ASSERT</name><argument_list pos:line="270" pos:column="40">(<argument><expr><call><name pos:line="270" pos:column="41">GetHeight</name><argument_list pos:line="270" pos:column="50">(<argument><expr><name pos:line="270" pos:column="51">lineDoc</name></expr></argument>)</argument_list></call> <op:operator pos:line="270" pos:column="60">==</op:operator> <name pos:line="270" pos:column="63">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="271" pos:column="19">else <block pos:line="271" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="272" pos:column="25">PLATFORM_ASSERT</name><argument_list pos:line="272" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="272" pos:column="41">0</lit:literal> <op:operator pos:line="272" pos:column="43">==</op:operator> <name pos:line="272" pos:column="46">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
<cpp:endif pos:line="275" pos:column="1">#<cpp:directive pos:line="275" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
