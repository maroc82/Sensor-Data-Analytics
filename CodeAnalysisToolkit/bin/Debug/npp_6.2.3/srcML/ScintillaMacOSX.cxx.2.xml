<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\macosx\ScintillaMacOSX.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// ScintillaMacOSX.cxx - Mac OS X subclass of ScintillaBase</comment>
<comment type="line" pos:line="3" pos:column="1">// Copyright 2003 by Evan Jones &lt;ejones@uwaterloo.ca&gt;</comment>
<comment type="line" pos:line="4" pos:column="1">// Based on ScintillaGTK.cxx Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="5" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>


<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="8" pos:column="10">"ScintillaMacOSX.h"</lit:literal></cpp:file></cpp:include>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef</cpp:directive> <name pos:line="9" pos:column="8">EXT_INPUT</name></cpp:ifdef>
<comment type="line" pos:line="10" pos:column="1">// External Input Editor</comment>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="11" pos:column="10">"ExtInput.h"</lit:literal></cpp:file></cpp:include>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else</cpp:directive></cpp:else>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"UniConversion.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif</cpp:directive></cpp:endif>

<using pos:line="16" pos:column="1">using namespace <name pos:line="16" pos:column="17">Scintilla</name>;</using>

<decl_stmt><decl><type><specifier pos:line="18" pos:column="1">const</specifier> <name pos:line="18" pos:column="7">CFStringRef</name></type> <name><name pos:line="18" pos:column="19">ScintillaMacOSX</name><op:operator pos:line="18" pos:column="34">::</op:operator><name pos:line="18" pos:column="36">kScintillaClassID</name></name> <init pos:line="18" pos:column="54">= <expr><call><name pos:line="18" pos:column="56">CFSTR</name><argument_list pos:line="18" pos:column="61">( <argument><expr><lit:literal type="string" pos:line="18" pos:column="63">"org.scintilla.scintilla"</lit:literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="19" pos:column="1">const</specifier> <name pos:line="19" pos:column="7">ControlKind</name></type> <name><name pos:line="19" pos:column="19">ScintillaMacOSX</name><op:operator pos:line="19" pos:column="34">::</op:operator><name pos:line="19" pos:column="36">kScintillaKind</name></name> <init pos:line="19" pos:column="51">= <expr><block pos:line="19" pos:column="53">{ <expr><lit:literal type="char" pos:line="19" pos:column="55">'ejon'</lit:literal></expr>, <expr><lit:literal type="char" pos:line="19" pos:column="63">'Scin'</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

<extern pos:line="21" pos:column="1">extern <lit:literal type="string" pos:line="21" pos:column="8">"C"</lit:literal> <function_decl><type><name pos:line="21" pos:column="12">HIViewRef</name></type> <name pos:line="21" pos:column="22">scintilla_calltip_new</name><parameter_list pos:line="21" pos:column="43">(<param><decl><type><name pos:line="21" pos:column="44">void</name></type></decl></param>)</parameter_list>;</function_decl></extern>

<cpp:ifndef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifndef</cpp:directive> <name pos:line="23" pos:column="9">WM_UNICHAR</name></cpp:ifndef>
<cpp:define pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="24" pos:column="9">WM_UNICHAR</name></cpp:macro>                      <cpp:value pos:line="24" pos:column="41">0x0109</cpp:value></cpp:define>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="27" pos:column="1">// required for paste/dragdrop, see comment in paste function below</comment>
<function><type><specifier pos:line="28" pos:column="1">static</specifier> <name pos:line="28" pos:column="8">int</name></type> <name pos:line="28" pos:column="12">BOMlen</name><parameter_list pos:line="28" pos:column="18">(<param><decl><type><name pos:line="28" pos:column="19">unsigned</name> <name pos:line="28" pos:column="28">char</name> <type:modifier pos:line="28" pos:column="33">*</type:modifier></type><name pos:line="28" pos:column="34">cstr</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="40">{
  <switch pos:line="29" pos:column="3">switch<condition pos:line="29" pos:column="9">(<expr><name><name pos:line="29" pos:column="10">cstr</name><index pos:line="29" pos:column="14">[<expr><lit:literal type="number" pos:line="29" pos:column="15">0</lit:literal></expr>]</index></name></expr>)</condition> <block pos:line="29" pos:column="19">{
  <case pos:line="30" pos:column="3">case <expr><lit:literal type="number" pos:line="30" pos:column="8">0xEF</lit:literal></expr>: <comment type="line" pos:line="30" pos:column="14">// BOM_UTF8</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">cstr</name><index pos:line="31" pos:column="13">[<expr><lit:literal type="number" pos:line="31" pos:column="14">1</lit:literal></expr>]</index></name> <op:operator pos:line="31" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="31" pos:column="20">0xBB</lit:literal> <op:operator pos:line="31" pos:column="25">&amp;&amp;</op:operator> <name><name pos:line="31" pos:column="28">cstr</name><index pos:line="31" pos:column="32">[<expr><lit:literal type="number" pos:line="31" pos:column="33">2</lit:literal></expr>]</index></name> <op:operator pos:line="31" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="31" pos:column="39">0xBF</lit:literal></expr>)</condition><then pos:line="31" pos:column="44"> <block pos:line="31" pos:column="45">{
      <return pos:line="32" pos:column="7">return <expr><lit:literal type="number" pos:line="32" pos:column="14">3</lit:literal></expr>;</return>
    }</block></then></if>
    <break pos:line="34" pos:column="5">break;</break>
  </case><case pos:line="35" pos:column="3">case <expr><lit:literal type="number" pos:line="35" pos:column="8">0xFE</lit:literal></expr>:
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name><name pos:line="36" pos:column="9">cstr</name><index pos:line="36" pos:column="13">[<expr><lit:literal type="number" pos:line="36" pos:column="14">1</lit:literal></expr>]</index></name> <op:operator pos:line="36" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="36" pos:column="20">0xFF</lit:literal></expr>)</condition><then pos:line="36" pos:column="25"> <block pos:line="36" pos:column="26">{
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><name><name pos:line="37" pos:column="11">cstr</name><index pos:line="37" pos:column="15">[<expr><lit:literal type="number" pos:line="37" pos:column="16">2</lit:literal></expr>]</index></name> <op:operator pos:line="37" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="37" pos:column="22">0x00</lit:literal> <op:operator pos:line="37" pos:column="27">&amp;&amp;</op:operator> <name><name pos:line="37" pos:column="30">cstr</name><index pos:line="37" pos:column="34">[<expr><lit:literal type="number" pos:line="37" pos:column="35">3</lit:literal></expr>]</index></name> <op:operator pos:line="37" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="37" pos:column="41">0x00</lit:literal></expr>)</condition><then pos:line="37" pos:column="46"> <block pos:line="37" pos:column="47">{
        <return pos:line="38" pos:column="9">return <expr><lit:literal type="number" pos:line="38" pos:column="16">4</lit:literal></expr>;</return>
      }</block></then></if>
      <return pos:line="40" pos:column="7">return <expr><lit:literal type="number" pos:line="40" pos:column="14">2</lit:literal></expr>;</return>
    }</block></then></if>
    <break pos:line="42" pos:column="5">break;</break>
  </case><case pos:line="43" pos:column="3">case <expr><lit:literal type="number" pos:line="43" pos:column="8">0xFF</lit:literal></expr>:
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name><name pos:line="44" pos:column="9">cstr</name><index pos:line="44" pos:column="13">[<expr><lit:literal type="number" pos:line="44" pos:column="14">1</lit:literal></expr>]</index></name> <op:operator pos:line="44" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="44" pos:column="20">0xFE</lit:literal></expr>)</condition><then pos:line="44" pos:column="25"> <block pos:line="44" pos:column="26">{
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><name><name pos:line="45" pos:column="11">cstr</name><index pos:line="45" pos:column="15">[<expr><lit:literal type="number" pos:line="45" pos:column="16">2</lit:literal></expr>]</index></name> <op:operator pos:line="45" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="45" pos:column="22">0x00</lit:literal> <op:operator pos:line="45" pos:column="27">&amp;&amp;</op:operator> <name><name pos:line="45" pos:column="30">cstr</name><index pos:line="45" pos:column="34">[<expr><lit:literal type="number" pos:line="45" pos:column="35">3</lit:literal></expr>]</index></name> <op:operator pos:line="45" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="45" pos:column="41">0x00</lit:literal></expr>)</condition><then pos:line="45" pos:column="46"> <block pos:line="45" pos:column="47">{
        <return pos:line="46" pos:column="9">return <expr><lit:literal type="number" pos:line="46" pos:column="16">4</lit:literal></expr>;</return>
      }</block></then></if>
      <return pos:line="48" pos:column="7">return <expr><lit:literal type="number" pos:line="48" pos:column="14">2</lit:literal></expr>;</return>
    }</block></then></if>
    <break pos:line="50" pos:column="5">break;</break>
  </case><case pos:line="51" pos:column="3">case <expr><lit:literal type="number" pos:line="51" pos:column="8">0x00</lit:literal></expr>:
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name><name pos:line="52" pos:column="9">cstr</name><index pos:line="52" pos:column="13">[<expr><lit:literal type="number" pos:line="52" pos:column="14">1</lit:literal></expr>]</index></name> <op:operator pos:line="52" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="52" pos:column="20">0x00</lit:literal></expr>)</condition><then pos:line="52" pos:column="25"> <block pos:line="52" pos:column="26">{
      <if pos:line="53" pos:column="7">if <condition pos:line="53" pos:column="10">(<expr><name><name pos:line="53" pos:column="11">cstr</name><index pos:line="53" pos:column="15">[<expr><lit:literal type="number" pos:line="53" pos:column="16">2</lit:literal></expr>]</index></name> <op:operator pos:line="53" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="53" pos:column="22">0xFE</lit:literal> <op:operator pos:line="53" pos:column="27">&amp;&amp;</op:operator> <name><name pos:line="53" pos:column="30">cstr</name><index pos:line="53" pos:column="34">[<expr><lit:literal type="number" pos:line="53" pos:column="35">3</lit:literal></expr>]</index></name> <op:operator pos:line="53" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="53" pos:column="41">0xFF</lit:literal></expr>)</condition><then pos:line="53" pos:column="46"> <block pos:line="53" pos:column="47">{
        <return pos:line="54" pos:column="9">return <expr><lit:literal type="number" pos:line="54" pos:column="16">4</lit:literal></expr>;</return>
      }</block></then></if>
      <if pos:line="56" pos:column="7">if <condition pos:line="56" pos:column="10">(<expr><name><name pos:line="56" pos:column="11">cstr</name><index pos:line="56" pos:column="15">[<expr><lit:literal type="number" pos:line="56" pos:column="16">2</lit:literal></expr>]</index></name> <op:operator pos:line="56" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="56" pos:column="22">0xFF</lit:literal> <op:operator pos:line="56" pos:column="27">&amp;&amp;</op:operator> <name><name pos:line="56" pos:column="30">cstr</name><index pos:line="56" pos:column="34">[<expr><lit:literal type="number" pos:line="56" pos:column="35">3</lit:literal></expr>]</index></name> <op:operator pos:line="56" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="56" pos:column="41">0xFE</lit:literal></expr>)</condition><then pos:line="56" pos:column="46"> <block pos:line="56" pos:column="47">{
        <return pos:line="57" pos:column="9">return <expr><lit:literal type="number" pos:line="57" pos:column="16">4</lit:literal></expr>;</return>
      }</block></then></if>
      <return pos:line="59" pos:column="7">return <expr><lit:literal type="number" pos:line="59" pos:column="14">2</lit:literal></expr>;</return>
    }</block></then></if>
    <break pos:line="61" pos:column="5">break;</break>
  </case>}</block></switch>

  <return pos:line="64" pos:column="3">return <expr><lit:literal type="number" pos:line="64" pos:column="10">0</lit:literal></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">ifdef</cpp:directive> <name pos:line="67" pos:column="8">EXT_INPUT</name></cpp:ifdef>
<cpp:define pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="68" pos:column="9">SCI_CMD</name></cpp:macro> <cpp:value pos:line="68" pos:column="17">( SCI_ALT | SCI_CTRL | SCI_SHIFT)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier pos:line="70" pos:column="1">static</specifier> <specifier pos:line="70" pos:column="8">const</specifier> <name pos:line="70" pos:column="14">KeyToCommand</name></type> <name><name pos:line="70" pos:column="27">macMapDefault</name><index pos:line="70" pos:column="40">[]</index></name> <init pos:line="70" pos:column="43">= <expr><block pos:line="70" pos:column="45">{
    <expr><block pos:line="71" pos:column="5">{<expr><name pos:line="71" pos:column="6">SCK_DOWN</name></expr>,		<expr><name pos:line="71" pos:column="25">SCI_CMD</name></expr>,	<expr><name pos:line="71" pos:column="41">SCI_DOCUMENTEND</name></expr>}</block></expr>,
    <expr><block pos:line="72" pos:column="5">{<expr><name pos:line="72" pos:column="6">SCK_UP</name></expr>,		<expr><name pos:line="72" pos:column="25">SCI_CMD</name></expr>,	<expr><name pos:line="72" pos:column="41">SCI_DOCUMENTSTART</name></expr>}</block></expr>,
    <expr><block pos:line="73" pos:column="5">{<expr><name pos:line="73" pos:column="6">SCK_LEFT</name></expr>,		<expr><name pos:line="73" pos:column="25">SCI_CMD</name></expr>,	<expr><name pos:line="73" pos:column="41">SCI_VCHOME</name></expr>}</block></expr>,
    <expr><block pos:line="74" pos:column="5">{<expr><name pos:line="74" pos:column="6">SCK_RIGHT</name></expr>,		<expr><name pos:line="74" pos:column="25">SCI_CMD</name></expr>,	<expr><name pos:line="74" pos:column="41">SCI_LINEEND</name></expr>}</block></expr>,
    <expr><block pos:line="75" pos:column="5">{<expr><name pos:line="75" pos:column="6">SCK_DOWN</name></expr>,		<expr><name pos:line="75" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="75" pos:column="41">SCI_LINEDOWN</name></expr>}</block></expr>,
    <expr><block pos:line="76" pos:column="5">{<expr><name pos:line="76" pos:column="6">SCK_DOWN</name></expr>,		<expr><name pos:line="76" pos:column="25">SCI_SHIFT</name></expr>,	<expr><name pos:line="76" pos:column="41">SCI_LINEDOWNEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="77" pos:column="5">{<expr><name pos:line="77" pos:column="6">SCK_DOWN</name></expr>,		<expr><name pos:line="77" pos:column="25">SCI_CTRL</name></expr>,	<expr><name pos:line="77" pos:column="41">SCI_LINESCROLLDOWN</name></expr>}</block></expr>,
    <expr><block pos:line="78" pos:column="5">{<expr><name pos:line="78" pos:column="6">SCK_DOWN</name></expr>,		<expr><name pos:line="78" pos:column="25">SCI_ASHIFT</name></expr>,	<expr><name pos:line="78" pos:column="41">SCI_LINEDOWNRECTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="79" pos:column="5">{<expr><name pos:line="79" pos:column="6">SCK_UP</name></expr>,		<expr><name pos:line="79" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="79" pos:column="41">SCI_LINEUP</name></expr>}</block></expr>,
    <expr><block pos:line="80" pos:column="5">{<expr><name pos:line="80" pos:column="6">SCK_UP</name></expr>,			<expr><name pos:line="80" pos:column="33">SCI_SHIFT</name></expr>,	<expr><name pos:line="80" pos:column="49">SCI_LINEUPEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="81" pos:column="5">{<expr><name pos:line="81" pos:column="6">SCK_UP</name></expr>,			<expr><name pos:line="81" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="81" pos:column="49">SCI_LINESCROLLUP</name></expr>}</block></expr>,
    <expr><block pos:line="82" pos:column="5">{<expr><name pos:line="82" pos:column="6">SCK_UP</name></expr>,		<expr><name pos:line="82" pos:column="25">SCI_ASHIFT</name></expr>,	<expr><name pos:line="82" pos:column="41">SCI_LINEUPRECTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="83" pos:column="5">{<expr><lit:literal type="char" pos:line="83" pos:column="6">'['</lit:literal></expr>,			<expr><name pos:line="83" pos:column="33">SCI_CTRL</name></expr>,		<expr><name pos:line="83" pos:column="57">SCI_PARAUP</name></expr>}</block></expr>,
    <expr><block pos:line="84" pos:column="5">{<expr><lit:literal type="char" pos:line="84" pos:column="6">'['</lit:literal></expr>,			<expr><name pos:line="84" pos:column="33">SCI_CSHIFT</name></expr>,	<expr><name pos:line="84" pos:column="49">SCI_PARAUPEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="85" pos:column="5">{<expr><lit:literal type="char" pos:line="85" pos:column="6">']'</lit:literal></expr>,			<expr><name pos:line="85" pos:column="33">SCI_CTRL</name></expr>,		<expr><name pos:line="85" pos:column="57">SCI_PARADOWN</name></expr>}</block></expr>,
    <expr><block pos:line="86" pos:column="5">{<expr><lit:literal type="char" pos:line="86" pos:column="6">']'</lit:literal></expr>,			<expr><name pos:line="86" pos:column="33">SCI_CSHIFT</name></expr>,	<expr><name pos:line="86" pos:column="49">SCI_PARADOWNEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="87" pos:column="5">{<expr><name pos:line="87" pos:column="6">SCK_LEFT</name></expr>,		<expr><name pos:line="87" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="87" pos:column="41">SCI_CHARLEFT</name></expr>}</block></expr>,
    <expr><block pos:line="88" pos:column="5">{<expr><name pos:line="88" pos:column="6">SCK_LEFT</name></expr>,		<expr><name pos:line="88" pos:column="25">SCI_SHIFT</name></expr>,	<expr><name pos:line="88" pos:column="41">SCI_CHARLEFTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="89" pos:column="5">{<expr><name pos:line="89" pos:column="6">SCK_LEFT</name></expr>,		<expr><name pos:line="89" pos:column="25">SCI_ALT</name></expr>,	<expr><name pos:line="89" pos:column="41">SCI_WORDLEFT</name></expr>}</block></expr>,
    <expr><block pos:line="90" pos:column="5">{<expr><name pos:line="90" pos:column="6">SCK_LEFT</name></expr>,		<expr><name pos:line="90" pos:column="25">SCI_CSHIFT</name></expr>,	<expr><name pos:line="90" pos:column="41">SCI_WORDLEFTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="91" pos:column="5">{<expr><name pos:line="91" pos:column="6">SCK_LEFT</name></expr>,		<expr><name pos:line="91" pos:column="25">SCI_ASHIFT</name></expr>,	<expr><name pos:line="91" pos:column="41">SCI_CHARLEFTRECTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="92" pos:column="5">{<expr><name pos:line="92" pos:column="6">SCK_RIGHT</name></expr>,		<expr><name pos:line="92" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="92" pos:column="41">SCI_CHARRIGHT</name></expr>}</block></expr>,
    <expr><block pos:line="93" pos:column="5">{<expr><name pos:line="93" pos:column="6">SCK_RIGHT</name></expr>,		<expr><name pos:line="93" pos:column="25">SCI_SHIFT</name></expr>,	<expr><name pos:line="93" pos:column="41">SCI_CHARRIGHTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="94" pos:column="5">{<expr><name pos:line="94" pos:column="6">SCK_RIGHT</name></expr>,		<expr><name pos:line="94" pos:column="25">SCI_ALT</name></expr>,	<expr><name pos:line="94" pos:column="41">SCI_WORDRIGHT</name></expr>}</block></expr>,
    <expr><block pos:line="95" pos:column="5">{<expr><name pos:line="95" pos:column="6">SCK_RIGHT</name></expr>,		<expr><name pos:line="95" pos:column="25">SCI_CSHIFT</name></expr>,	<expr><name pos:line="95" pos:column="41">SCI_WORDRIGHTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="96" pos:column="5">{<expr><name pos:line="96" pos:column="6">SCK_RIGHT</name></expr>,		<expr><name pos:line="96" pos:column="25">SCI_ASHIFT</name></expr>,	<expr><name pos:line="96" pos:column="41">SCI_CHARRIGHTRECTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="97" pos:column="5">{<expr><lit:literal type="char" pos:line="97" pos:column="6">'/'</lit:literal></expr>,		<expr><name pos:line="97" pos:column="25">SCI_CTRL</name></expr>,		<expr><name pos:line="97" pos:column="49">SCI_WORDPARTLEFT</name></expr>}</block></expr>,
    <expr><block pos:line="98" pos:column="5">{<expr><lit:literal type="char" pos:line="98" pos:column="6">'/'</lit:literal></expr>,		<expr><name pos:line="98" pos:column="25">SCI_CSHIFT</name></expr>,	<expr><name pos:line="98" pos:column="41">SCI_WORDPARTLEFTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="99" pos:column="5">{<expr><lit:literal type="char" pos:line="99" pos:column="6">'\\'</lit:literal></expr>,		<expr><name pos:line="99" pos:column="25">SCI_CTRL</name></expr>,		<expr><name pos:line="99" pos:column="49">SCI_WORDPARTRIGHT</name></expr>}</block></expr>,
    <expr><block pos:line="100" pos:column="5">{<expr><lit:literal type="char" pos:line="100" pos:column="6">'\\'</lit:literal></expr>,		<expr><name pos:line="100" pos:column="25">SCI_CSHIFT</name></expr>,	<expr><name pos:line="100" pos:column="41">SCI_WORDPARTRIGHTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="101" pos:column="5">{<expr><name pos:line="101" pos:column="6">SCK_HOME</name></expr>,		<expr><name pos:line="101" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="101" pos:column="41">SCI_VCHOME</name></expr>}</block></expr>,
    <expr><block pos:line="102" pos:column="5">{<expr><name pos:line="102" pos:column="6">SCK_HOME</name></expr>, 		<expr><name pos:line="102" pos:column="25">SCI_SHIFT</name></expr>, 	<expr><name pos:line="102" pos:column="41">SCI_VCHOMEEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="103" pos:column="5">{<expr><name pos:line="103" pos:column="6">SCK_HOME</name></expr>, 		<expr><name pos:line="103" pos:column="25">SCI_CTRL</name></expr>, 	<expr><name pos:line="103" pos:column="41">SCI_DOCUMENTSTART</name></expr>}</block></expr>,
    <expr><block pos:line="104" pos:column="5">{<expr><name pos:line="104" pos:column="6">SCK_HOME</name></expr>, 		<expr><name pos:line="104" pos:column="25">SCI_CSHIFT</name></expr>, 	<expr><name pos:line="104" pos:column="41">SCI_DOCUMENTSTARTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="105" pos:column="5">{<expr><name pos:line="105" pos:column="6">SCK_HOME</name></expr>, 		<expr><name pos:line="105" pos:column="25">SCI_ALT</name></expr>, 	<expr><name pos:line="105" pos:column="41">SCI_HOMEDISPLAY</name></expr>}</block></expr>,
<comment type="line" pos:line="106" pos:column="1">//    {SCK_HOME,		SCI_ASHIFT,	SCI_HOMEDISPLAYEXTEND},</comment>
    <expr><block pos:line="107" pos:column="5">{<expr><name pos:line="107" pos:column="6">SCK_HOME</name></expr>,		<expr><name pos:line="107" pos:column="25">SCI_ASHIFT</name></expr>,	<expr><name pos:line="107" pos:column="41">SCI_VCHOMERECTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="108" pos:column="5">{<expr><name pos:line="108" pos:column="6">SCK_END</name></expr>,	 	<expr><name pos:line="108" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="108" pos:column="41">SCI_LINEEND</name></expr>}</block></expr>,
    <expr><block pos:line="109" pos:column="5">{<expr><name pos:line="109" pos:column="6">SCK_END</name></expr>,	 	<expr><name pos:line="109" pos:column="25">SCI_SHIFT</name></expr>, 	<expr><name pos:line="109" pos:column="41">SCI_LINEENDEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="110" pos:column="5">{<expr><name pos:line="110" pos:column="6">SCK_END</name></expr>, 		<expr><name pos:line="110" pos:column="25">SCI_CTRL</name></expr>, 	<expr><name pos:line="110" pos:column="41">SCI_DOCUMENTEND</name></expr>}</block></expr>,
    <expr><block pos:line="111" pos:column="5">{<expr><name pos:line="111" pos:column="6">SCK_END</name></expr>, 		<expr><name pos:line="111" pos:column="25">SCI_CSHIFT</name></expr>, 	<expr><name pos:line="111" pos:column="41">SCI_DOCUMENTENDEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="112" pos:column="5">{<expr><name pos:line="112" pos:column="6">SCK_END</name></expr>, 		<expr><name pos:line="112" pos:column="25">SCI_ALT</name></expr>, 	<expr><name pos:line="112" pos:column="41">SCI_LINEENDDISPLAY</name></expr>}</block></expr>,
<comment type="line" pos:line="113" pos:column="1">//    {SCK_END,		SCI_ASHIFT,	SCI_LINEENDDISPLAYEXTEND},</comment>
    <expr><block pos:line="114" pos:column="5">{<expr><name pos:line="114" pos:column="6">SCK_END</name></expr>,		<expr><name pos:line="114" pos:column="25">SCI_ASHIFT</name></expr>,	<expr><name pos:line="114" pos:column="41">SCI_LINEENDRECTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="115" pos:column="5">{<expr><name pos:line="115" pos:column="6">SCK_PRIOR</name></expr>,		<expr><name pos:line="115" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="115" pos:column="41">SCI_PAGEUP</name></expr>}</block></expr>,
    <expr><block pos:line="116" pos:column="5">{<expr><name pos:line="116" pos:column="6">SCK_PRIOR</name></expr>,		<expr><name pos:line="116" pos:column="25">SCI_SHIFT</name></expr>, 	<expr><name pos:line="116" pos:column="41">SCI_PAGEUPEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="117" pos:column="5">{<expr><name pos:line="117" pos:column="6">SCK_PRIOR</name></expr>,		<expr><name pos:line="117" pos:column="25">SCI_ASHIFT</name></expr>,	<expr><name pos:line="117" pos:column="41">SCI_PAGEUPRECTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="118" pos:column="5">{<expr><name pos:line="118" pos:column="6">SCK_NEXT</name></expr>, 		<expr><name pos:line="118" pos:column="25">SCI_NORM</name></expr>, 	<expr><name pos:line="118" pos:column="41">SCI_PAGEDOWN</name></expr>}</block></expr>,
    <expr><block pos:line="119" pos:column="5">{<expr><name pos:line="119" pos:column="6">SCK_NEXT</name></expr>, 		<expr><name pos:line="119" pos:column="25">SCI_SHIFT</name></expr>, 	<expr><name pos:line="119" pos:column="41">SCI_PAGEDOWNEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="120" pos:column="5">{<expr><name pos:line="120" pos:column="6">SCK_NEXT</name></expr>,		<expr><name pos:line="120" pos:column="25">SCI_ASHIFT</name></expr>,	<expr><name pos:line="120" pos:column="41">SCI_PAGEDOWNRECTEXTEND</name></expr>}</block></expr>,
    <expr><block pos:line="121" pos:column="5">{<expr><name pos:line="121" pos:column="6">SCK_DELETE</name></expr>, 	<expr><name pos:line="121" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="121" pos:column="41">SCI_CLEAR</name></expr>}</block></expr>,
    <expr><block pos:line="122" pos:column="5">{<expr><name pos:line="122" pos:column="6">SCK_DELETE</name></expr>, 	<expr><name pos:line="122" pos:column="25">SCI_SHIFT</name></expr>,	<expr><name pos:line="122" pos:column="41">SCI_CUT</name></expr>}</block></expr>,
    <expr><block pos:line="123" pos:column="5">{<expr><name pos:line="123" pos:column="6">SCK_DELETE</name></expr>, 	<expr><name pos:line="123" pos:column="25">SCI_CTRL</name></expr>,	<expr><name pos:line="123" pos:column="41">SCI_DELWORDRIGHT</name></expr>}</block></expr>,
    <expr><block pos:line="124" pos:column="5">{<expr><name pos:line="124" pos:column="6">SCK_DELETE</name></expr>,	<expr><name pos:line="124" pos:column="25">SCI_CSHIFT</name></expr>,	<expr><name pos:line="124" pos:column="41">SCI_DELLINERIGHT</name></expr>}</block></expr>,
    <expr><block pos:line="125" pos:column="5">{<expr><name pos:line="125" pos:column="6">SCK_INSERT</name></expr>, 		<expr><name pos:line="125" pos:column="33">SCI_NORM</name></expr>,	<expr><name pos:line="125" pos:column="49">SCI_EDITTOGGLEOVERTYPE</name></expr>}</block></expr>,
    <expr><block pos:line="126" pos:column="5">{<expr><name pos:line="126" pos:column="6">SCK_INSERT</name></expr>, 		<expr><name pos:line="126" pos:column="33">SCI_SHIFT</name></expr>,	<expr><name pos:line="126" pos:column="49">SCI_PASTE</name></expr>}</block></expr>,
    <expr><block pos:line="127" pos:column="5">{<expr><name pos:line="127" pos:column="6">SCK_INSERT</name></expr>, 		<expr><name pos:line="127" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="127" pos:column="49">SCI_COPY</name></expr>}</block></expr>,
    <expr><block pos:line="128" pos:column="5">{<expr><name pos:line="128" pos:column="6">SCK_ESCAPE</name></expr>,  	<expr><name pos:line="128" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="128" pos:column="41">SCI_CANCEL</name></expr>}</block></expr>,
    <expr><block pos:line="129" pos:column="5">{<expr><name pos:line="129" pos:column="6">SCK_BACK</name></expr>,		<expr><name pos:line="129" pos:column="25">SCI_NORM</name></expr>, 	<expr><name pos:line="129" pos:column="41">SCI_DELETEBACK</name></expr>}</block></expr>,
    <expr><block pos:line="130" pos:column="5">{<expr><name pos:line="130" pos:column="6">SCK_BACK</name></expr>,		<expr><name pos:line="130" pos:column="25">SCI_SHIFT</name></expr>, 	<expr><name pos:line="130" pos:column="41">SCI_DELETEBACK</name></expr>}</block></expr>,
    <expr><block pos:line="131" pos:column="5">{<expr><name pos:line="131" pos:column="6">SCK_BACK</name></expr>,		<expr><name pos:line="131" pos:column="25">SCI_CTRL</name></expr>, 	<expr><name pos:line="131" pos:column="41">SCI_DELWORDLEFT</name></expr>}</block></expr>,
    <expr><block pos:line="132" pos:column="5">{<expr><name pos:line="132" pos:column="6">SCK_BACK</name></expr>, 		<expr><name pos:line="132" pos:column="25">SCI_ALT</name></expr>,	<expr><name pos:line="132" pos:column="41">SCI_UNDO</name></expr>}</block></expr>,
    <expr><block pos:line="133" pos:column="5">{<expr><name pos:line="133" pos:column="6">SCK_BACK</name></expr>,		<expr><name pos:line="133" pos:column="25">SCI_CSHIFT</name></expr>,	<expr><name pos:line="133" pos:column="41">SCI_DELLINELEFT</name></expr>}</block></expr>,
    <expr><block pos:line="134" pos:column="5">{<expr><lit:literal type="char" pos:line="134" pos:column="6">'Z'</lit:literal></expr>, 			<expr><name pos:line="134" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="134" pos:column="49">SCI_UNDO</name></expr>}</block></expr>,
    <expr><block pos:line="135" pos:column="5">{<expr><lit:literal type="char" pos:line="135" pos:column="6">'Y'</lit:literal></expr>, 			<expr><name pos:line="135" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="135" pos:column="49">SCI_REDO</name></expr>}</block></expr>,
    <expr><block pos:line="136" pos:column="5">{<expr><lit:literal type="char" pos:line="136" pos:column="6">'X'</lit:literal></expr>, 			<expr><name pos:line="136" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="136" pos:column="49">SCI_CUT</name></expr>}</block></expr>,
    <expr><block pos:line="137" pos:column="5">{<expr><lit:literal type="char" pos:line="137" pos:column="6">'C'</lit:literal></expr>, 			<expr><name pos:line="137" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="137" pos:column="49">SCI_COPY</name></expr>}</block></expr>,
    <expr><block pos:line="138" pos:column="5">{<expr><lit:literal type="char" pos:line="138" pos:column="6">'V'</lit:literal></expr>, 			<expr><name pos:line="138" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="138" pos:column="49">SCI_PASTE</name></expr>}</block></expr>,
    <expr><block pos:line="139" pos:column="5">{<expr><lit:literal type="char" pos:line="139" pos:column="6">'A'</lit:literal></expr>, 			<expr><name pos:line="139" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="139" pos:column="49">SCI_SELECTALL</name></expr>}</block></expr>,
    <expr><block pos:line="140" pos:column="5">{<expr><name pos:line="140" pos:column="6">SCK_TAB</name></expr>,		<expr><name pos:line="140" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="140" pos:column="41">SCI_TAB</name></expr>}</block></expr>,
    <expr><block pos:line="141" pos:column="5">{<expr><name pos:line="141" pos:column="6">SCK_TAB</name></expr>,		<expr><name pos:line="141" pos:column="25">SCI_SHIFT</name></expr>,	<expr><name pos:line="141" pos:column="41">SCI_BACKTAB</name></expr>}</block></expr>,
    <expr><block pos:line="142" pos:column="5">{<expr><name pos:line="142" pos:column="6">SCK_RETURN</name></expr>, 	<expr><name pos:line="142" pos:column="25">SCI_NORM</name></expr>,	<expr><name pos:line="142" pos:column="41">SCI_NEWLINE</name></expr>}</block></expr>,
    <expr><block pos:line="143" pos:column="5">{<expr><name pos:line="143" pos:column="6">SCK_RETURN</name></expr>, 	<expr><name pos:line="143" pos:column="25">SCI_SHIFT</name></expr>,	<expr><name pos:line="143" pos:column="41">SCI_NEWLINE</name></expr>}</block></expr>,
    <expr><block pos:line="144" pos:column="5">{<expr><name pos:line="144" pos:column="6">SCK_ADD</name></expr>, 		<expr><name pos:line="144" pos:column="25">SCI_CTRL</name></expr>,	<expr><name pos:line="144" pos:column="41">SCI_ZOOMIN</name></expr>}</block></expr>,
    <expr><block pos:line="145" pos:column="5">{<expr><name pos:line="145" pos:column="6">SCK_SUBTRACT</name></expr>,	<expr><name pos:line="145" pos:column="25">SCI_CTRL</name></expr>,	<expr><name pos:line="145" pos:column="41">SCI_ZOOMOUT</name></expr>}</block></expr>,
    <expr><block pos:line="146" pos:column="5">{<expr><name pos:line="146" pos:column="6">SCK_DIVIDE</name></expr>,	<expr><name pos:line="146" pos:column="25">SCI_CTRL</name></expr>,	<expr><name pos:line="146" pos:column="41">SCI_SETZOOM</name></expr>}</block></expr>,
    <comment type="line" pos:line="147" pos:column="5">//'L', 			SCI_CTRL,		SCI_FORMFEED,</comment>
    <expr><block pos:line="148" pos:column="5">{<expr><lit:literal type="char" pos:line="148" pos:column="6">'L'</lit:literal></expr>, 			<expr><name pos:line="148" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="148" pos:column="49">SCI_LINECUT</name></expr>}</block></expr>,
    <expr><block pos:line="149" pos:column="5">{<expr><lit:literal type="char" pos:line="149" pos:column="6">'L'</lit:literal></expr>, 			<expr><name pos:line="149" pos:column="33">SCI_CSHIFT</name></expr>,	<expr><name pos:line="149" pos:column="49">SCI_LINEDELETE</name></expr>}</block></expr>,
    <expr><block pos:line="150" pos:column="5">{<expr><lit:literal type="char" pos:line="150" pos:column="6">'T'</lit:literal></expr>, 			<expr><name pos:line="150" pos:column="33">SCI_CSHIFT</name></expr>,	<expr><name pos:line="150" pos:column="49">SCI_LINECOPY</name></expr>}</block></expr>,
    <expr><block pos:line="151" pos:column="5">{<expr><lit:literal type="char" pos:line="151" pos:column="6">'T'</lit:literal></expr>, 			<expr><name pos:line="151" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="151" pos:column="49">SCI_LINETRANSPOSE</name></expr>}</block></expr>,
    <expr><block pos:line="152" pos:column="5">{<expr><lit:literal type="char" pos:line="152" pos:column="6">'D'</lit:literal></expr>, 			<expr><name pos:line="152" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="152" pos:column="49">SCI_SELECTIONDUPLICATE</name></expr>}</block></expr>,
    <expr><block pos:line="153" pos:column="5">{<expr><lit:literal type="char" pos:line="153" pos:column="6">'U'</lit:literal></expr>, 			<expr><name pos:line="153" pos:column="33">SCI_CTRL</name></expr>,	<expr><name pos:line="153" pos:column="49">SCI_LOWERCASE</name></expr>}</block></expr>,
    <expr><block pos:line="154" pos:column="5">{<expr><lit:literal type="char" pos:line="154" pos:column="6">'U'</lit:literal></expr>, 			<expr><name pos:line="154" pos:column="33">SCI_CSHIFT</name></expr>,	<expr><name pos:line="154" pos:column="49">SCI_UPPERCASE</name></expr>}</block></expr>,
    <expr><block pos:line="155" pos:column="5">{<expr><lit:literal type="number" pos:line="155" pos:column="6">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="155" pos:column="8">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="155" pos:column="10">0</lit:literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="159" pos:column="1">ScintillaMacOSX</name><op:operator pos:line="159" pos:column="16">::</op:operator><name pos:line="159" pos:column="18">ScintillaMacOSX</name></name><parameter_list pos:line="159" pos:column="33">( <param><decl><type><name pos:line="159" pos:column="35">void</name><type:modifier pos:line="159" pos:column="39">*</type:modifier></type> <name pos:line="159" pos:column="41">windowid</name></decl></param> )</parameter_list> <member_list pos:line="159" pos:column="52">:
        <call><name pos:line="160" pos:column="9">TView</name><argument_list pos:line="160" pos:column="14">( <argument><expr><call><name><name pos:line="160" pos:column="16">reinterpret_cast</name><argument_list pos:line="160" pos:column="32">&lt;<argument><expr><name pos:line="160" pos:column="33">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="160" pos:column="43">( <argument><expr><name pos:line="160" pos:column="45">windowid</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call>
</member_list><block pos:line="161" pos:column="1">{
    <expr_stmt><expr><name pos:line="162" pos:column="5">notifyObj</name> <op:operator pos:line="162" pos:column="15">=</op:operator> <name pos:line="162" pos:column="17">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="163" pos:column="5">notifyProc</name> <op:operator pos:line="163" pos:column="16">=</op:operator> <name pos:line="163" pos:column="18">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="164" pos:column="5">wMain</name> <op:operator pos:line="164" pos:column="11">=</op:operator> <name pos:line="164" pos:column="13">windowid</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="165" pos:column="5">OSStatus</name></type> <name pos:line="165" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="166" pos:column="5">err</name> <op:operator pos:line="166" pos:column="9">=</op:operator> <call><name pos:line="166" pos:column="11">GetThemeMetric</name><argument_list pos:line="166" pos:column="25">( <argument><expr><name pos:line="166" pos:column="27">kThemeMetricScrollBarWidth</name></expr></argument>, <argument><expr><op:operator pos:line="166" pos:column="55">&amp;</op:operator><name pos:line="166" pos:column="56">scrollBarFixedSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="167" pos:column="5">assert</name><argument_list pos:line="167" pos:column="11">( <argument><expr><name pos:line="167" pos:column="13">err</name> <op:operator pos:line="167" pos:column="17">==</op:operator> <name pos:line="167" pos:column="20">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name pos:line="169" pos:column="5">mouseTrackingRef</name> <op:operator pos:line="169" pos:column="22">=</op:operator> <name pos:line="169" pos:column="24">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="170" pos:column="5">mouseTrackingID</name><op:operator pos:line="170" pos:column="20">.</op:operator><name pos:line="170" pos:column="21">signature</name></name> <op:operator pos:line="170" pos:column="31">=</op:operator> <name pos:line="170" pos:column="33">scintillaMacOSType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="171" pos:column="5">mouseTrackingID</name><op:operator pos:line="171" pos:column="20">.</op:operator><name pos:line="171" pos:column="21">id</name></name> <op:operator pos:line="171" pos:column="24">=</op:operator> <op:operator pos:line="171" pos:column="26">(</op:operator><name pos:line="171" pos:column="27">SInt32</name><op:operator pos:line="171" pos:column="33">)</op:operator><name pos:line="171" pos:column="34">this</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="172" pos:column="5">capturedMouse</name> <op:operator pos:line="172" pos:column="19">=</op:operator> <lit:literal type="boolean" pos:line="172" pos:column="21">false</lit:literal></expr>;</expr_stmt>

    <comment type="line" pos:line="174" pos:column="5">// Enable keyboard events and mouse events</comment>
<cpp:if pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="175" pos:column="5">!</op:operator><call><name pos:line="175" pos:column="6">defined</name><argument_list pos:line="175" pos:column="13">(<argument><expr><name pos:line="175" pos:column="14">CONTAINER_HANDLES_EVENTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="176" pos:column="5">ActivateInterface</name><argument_list pos:line="176" pos:column="22">( <argument><expr><name pos:line="176" pos:column="24">kKeyboardFocus</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="177" pos:column="5">ActivateInterface</name><argument_list pos:line="177" pos:column="22">( <argument><expr><name pos:line="177" pos:column="24">kMouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="178" pos:column="5">ActivateInterface</name><argument_list pos:line="178" pos:column="22">( <argument><expr><name pos:line="178" pos:column="24">kDragAndDrop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="179" pos:column="1">#<cpp:directive pos:line="179" pos:column="2">endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="180" pos:column="5">ActivateInterface</name><argument_list pos:line="180" pos:column="22">( <argument><expr><name pos:line="180" pos:column="24">kMouseTracking</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="182" pos:column="5">Initialise</name><argument_list pos:line="182" pos:column="15">()</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="184" pos:column="5">// Create some bounds rectangle which will just get reset to the correct rectangle later</comment>
    <decl_stmt><decl><type><name pos:line="185" pos:column="5">Rect</name></type> <name pos:line="185" pos:column="10">tempScrollRect</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="186" pos:column="5">tempScrollRect</name><op:operator pos:line="186" pos:column="19">.</op:operator><name pos:line="186" pos:column="20">top</name></name> <op:operator pos:line="186" pos:column="24">=</op:operator> <op:operator pos:line="186" pos:column="26">-</op:operator><lit:literal type="number" pos:line="186" pos:column="27">1</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="187" pos:column="5">tempScrollRect</name><op:operator pos:line="187" pos:column="19">.</op:operator><name pos:line="187" pos:column="20">left</name></name> <op:operator pos:line="187" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="187" pos:column="27">400</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="188" pos:column="5">tempScrollRect</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">bottom</name></name> <op:operator pos:line="188" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="188" pos:column="29">300</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="189" pos:column="5">tempScrollRect</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">right</name></name> <op:operator pos:line="189" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="189" pos:column="28">450</lit:literal></expr>;</expr_stmt>

    <comment type="line" pos:line="191" pos:column="5">// Create the scroll bar with fake values that will get set correctly later</comment>
    <expr_stmt><expr><name pos:line="192" pos:column="5">err</name> <op:operator pos:line="192" pos:column="9">=</op:operator> <call><name pos:line="192" pos:column="11">CreateScrollBarControl</name><argument_list pos:line="192" pos:column="33">( <argument><expr><call><name><name pos:line="192" pos:column="35">this</name><op:operator pos:line="192" pos:column="39">-&gt;</op:operator><name pos:line="192" pos:column="41">GetOwner</name></name><argument_list pos:line="192" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="192" pos:column="53">&amp;</op:operator><name pos:line="192" pos:column="54">tempScrollRect</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="73">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="76">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="81">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="192" pos:column="86">true</lit:literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="92">LiveScrollHandler</name></expr></argument>, <argument><expr><op:operator pos:line="192" pos:column="111">&amp;</op:operator><name pos:line="192" pos:column="112">vScrollBar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="193" pos:column="5">assert</name><argument_list pos:line="193" pos:column="11">( <argument><expr><name pos:line="193" pos:column="13">vScrollBar</name> <op:operator pos:line="193" pos:column="24">!=</op:operator> <name pos:line="193" pos:column="27">NULL</name> <op:operator pos:line="193" pos:column="32">&amp;&amp;</op:operator> <name pos:line="193" pos:column="35">err</name> <op:operator pos:line="193" pos:column="39">==</op:operator> <name pos:line="193" pos:column="42">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="194" pos:column="5">err</name> <op:operator pos:line="194" pos:column="9">=</op:operator> <call><name pos:line="194" pos:column="11">CreateScrollBarControl</name><argument_list pos:line="194" pos:column="33">( <argument><expr><call><name><name pos:line="194" pos:column="35">this</name><op:operator pos:line="194" pos:column="39">-&gt;</op:operator><name pos:line="194" pos:column="41">GetOwner</name></name><argument_list pos:line="194" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="194" pos:column="53">&amp;</op:operator><name pos:line="194" pos:column="54">tempScrollRect</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="194" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="194" pos:column="73">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="194" pos:column="76">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="194" pos:column="81">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="194" pos:column="86">true</lit:literal></expr></argument>, <argument><expr><name pos:line="194" pos:column="92">LiveScrollHandler</name></expr></argument>, <argument><expr><op:operator pos:line="194" pos:column="111">&amp;</op:operator><name pos:line="194" pos:column="112">hScrollBar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="195" pos:column="5">assert</name><argument_list pos:line="195" pos:column="11">( <argument><expr><name pos:line="195" pos:column="13">hScrollBar</name> <op:operator pos:line="195" pos:column="24">!=</op:operator> <name pos:line="195" pos:column="27">NULL</name> <op:operator pos:line="195" pos:column="32">&amp;&amp;</op:operator> <name pos:line="195" pos:column="35">err</name> <op:operator pos:line="195" pos:column="39">==</op:operator> <name pos:line="195" pos:column="42">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="197" pos:column="5">// Set a property on the scrollbars to store a pointer to the Scintilla object</comment>
    <decl_stmt><decl><type><name pos:line="198" pos:column="5">ScintillaMacOSX</name><type:modifier pos:line="198" pos:column="20">*</type:modifier></type> <name pos:line="198" pos:column="22">objectPtr</name> <init pos:line="198" pos:column="32">= <expr><name pos:line="198" pos:column="34">this</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="199" pos:column="5">err</name> <op:operator pos:line="199" pos:column="9">=</op:operator> <call><name pos:line="199" pos:column="11">SetControlProperty</name><argument_list pos:line="199" pos:column="29">( <argument><expr><name pos:line="199" pos:column="31">vScrollBar</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="43">scintillaMacOSType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="199" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="199" pos:column="66">sizeof<argument_list pos:line="199" pos:column="72">( <argument><expr><name pos:line="199" pos:column="74">this</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="199" pos:column="82">&amp;</op:operator><name pos:line="199" pos:column="83">objectPtr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="200" pos:column="5">assert</name><argument_list pos:line="200" pos:column="11">( <argument><expr><name pos:line="200" pos:column="13">err</name> <op:operator pos:line="200" pos:column="17">==</op:operator> <name pos:line="200" pos:column="20">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="201" pos:column="5">err</name> <op:operator pos:line="201" pos:column="9">=</op:operator> <call><name pos:line="201" pos:column="11">SetControlProperty</name><argument_list pos:line="201" pos:column="29">( <argument><expr><name pos:line="201" pos:column="31">hScrollBar</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="43">scintillaMacOSType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="201" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="201" pos:column="66">sizeof<argument_list pos:line="201" pos:column="72">( <argument><expr><name pos:line="201" pos:column="74">this</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="201" pos:column="82">&amp;</op:operator><name pos:line="201" pos:column="83">objectPtr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="202" pos:column="5">assert</name><argument_list pos:line="202" pos:column="11">( <argument><expr><name pos:line="202" pos:column="13">err</name> <op:operator pos:line="202" pos:column="17">==</op:operator> <name pos:line="202" pos:column="20">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="204" pos:column="5">// set this into our parent control so we can be retrieved easily at a later time</comment>
    <comment type="line" pos:line="205" pos:column="5">// (see scintilla_send below)</comment>
    <expr_stmt><expr><name pos:line="206" pos:column="5">err</name> <op:operator pos:line="206" pos:column="9">=</op:operator> <call><name pos:line="206" pos:column="11">SetControlProperty</name><argument_list pos:line="206" pos:column="29">( <argument><expr><call><name><name pos:line="206" pos:column="31">reinterpret_cast</name><argument_list pos:line="206" pos:column="47">&lt;<argument><expr><name pos:line="206" pos:column="48">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="206" pos:column="58">( <argument><expr><name pos:line="206" pos:column="60">windowid</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="206" pos:column="72">scintillaMacOSType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="206" pos:column="92">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="206" pos:column="95">sizeof<argument_list pos:line="206" pos:column="101">( <argument><expr><name pos:line="206" pos:column="103">this</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="206" pos:column="111">&amp;</op:operator><name pos:line="206" pos:column="112">objectPtr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="207" pos:column="5">assert</name><argument_list pos:line="207" pos:column="11">( <argument><expr><name pos:line="207" pos:column="13">err</name> <op:operator pos:line="207" pos:column="17">==</op:operator> <name pos:line="207" pos:column="20">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="209" pos:column="5">// Tell Scintilla not to buffer: Quartz buffers drawing for us</comment>
    <comment type="line" pos:line="210" pos:column="5">// TODO: Can we disable this option on Mac OS X?</comment>
    <expr_stmt><expr><call><name pos:line="211" pos:column="5">WndProc</name><argument_list pos:line="211" pos:column="12">( <argument><expr><name pos:line="211" pos:column="14">SCI_SETBUFFEREDDRAW</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="211" pos:column="35">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="211" pos:column="38">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="212" pos:column="5">// Turn on UniCode mode</comment>
    <expr_stmt><expr><call><name pos:line="213" pos:column="5">WndProc</name><argument_list pos:line="213" pos:column="12">( <argument><expr><name pos:line="213" pos:column="14">SCI_SETCODEPAGE</name></expr></argument>, <argument><expr><name pos:line="213" pos:column="31">SC_CP_UTF8</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="213" pos:column="43">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="215" pos:column="5">const</specifier> <name pos:line="215" pos:column="11">EventTypeSpec</name></type> <name><name pos:line="215" pos:column="25">commandEventInfo</name><index pos:line="215" pos:column="41">[]</index></name> <init pos:line="215" pos:column="44">= <expr><block pos:line="215" pos:column="46">{
        <expr><block pos:line="216" pos:column="9">{ <expr><name pos:line="216" pos:column="11">kEventClassCommand</name></expr>, <expr><name pos:line="216" pos:column="31">kEventProcessCommand</name></expr> }</block></expr>,
        <expr><block pos:line="217" pos:column="9">{ <expr><name pos:line="217" pos:column="11">kEventClassCommand</name></expr>, <expr><name pos:line="217" pos:column="31">kEventCommandUpdateStatus</name></expr> }</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name pos:line="220" pos:column="5">err</name> <op:operator pos:line="220" pos:column="9">=</op:operator> <call><name pos:line="220" pos:column="11">InstallEventHandler</name><argument_list pos:line="220" pos:column="30">( <argument><expr><call><name pos:line="220" pos:column="32">GetControlEventTarget</name><argument_list pos:line="220" pos:column="53">( <argument><expr><call><name><name pos:line="220" pos:column="55">reinterpret_cast</name><argument_list pos:line="220" pos:column="71">&lt;<argument><expr><name pos:line="220" pos:column="72">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="220" pos:column="82">( <argument><expr><name pos:line="220" pos:column="84">windowid</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
                   <argument><expr><name pos:line="221" pos:column="20">CommandEventHandler</name></expr></argument>,
                   <argument><expr><call><name pos:line="222" pos:column="20">GetEventTypeCount</name><argument_list pos:line="222" pos:column="37">( <argument><expr><name pos:line="222" pos:column="39">commandEventInfo</name></expr></argument> )</argument_list></call></expr></argument>,
                   <argument><expr><name pos:line="223" pos:column="20">commandEventInfo</name></expr></argument>,
                   <argument><expr><name pos:line="224" pos:column="20">this</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="225" pos:column="1">#<cpp:directive pos:line="225" pos:column="2">ifdef</cpp:directive> <name pos:line="225" pos:column="8">EXT_INPUT</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name pos:line="226" pos:column="5">ExtInput</name><op:operator pos:line="226" pos:column="13">::</op:operator><name pos:line="226" pos:column="15">attach</name></name> <argument_list pos:line="226" pos:column="22">(<argument><expr><call><name pos:line="226" pos:column="23">GetViewRef</name><argument_list pos:line="226" pos:column="33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:line="227" pos:column="5">for (<init><decl><type><name pos:line="227" pos:column="10">int</name></type> <name pos:line="227" pos:column="14">i</name> <init pos:line="227" pos:column="16">= <expr><lit:literal type="number" pos:line="227" pos:column="18">0</lit:literal></expr></init></decl>;</init> <condition><expr><name><name pos:line="227" pos:column="21">macMapDefault</name><index pos:line="227" pos:column="34">[<expr><name pos:line="227" pos:column="35">i</name></expr>]</index></name><op:operator pos:line="227" pos:column="37">.</op:operator><name pos:line="227" pos:column="38">key</name></expr>;</condition> <incr><expr><name pos:line="227" pos:column="43">i</name><op:operator pos:line="227" pos:column="44">++</op:operator></expr></incr>)
    <block pos:line="228" pos:column="5">{
        <expr_stmt><expr><call><name><name pos:line="229" pos:column="9">this</name><op:operator pos:line="229" pos:column="13">-&gt;</op:operator><name pos:line="229" pos:column="15">kmap</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">AssignCmdKey</name></name><argument_list pos:line="229" pos:column="32">(<argument><expr><name><name pos:line="229" pos:column="33">macMapDefault</name><index pos:line="229" pos:column="46">[<expr><name pos:line="229" pos:column="47">i</name></expr>]</index></name><op:operator pos:line="229" pos:column="49">.</op:operator><name pos:line="229" pos:column="50">key</name></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="55">macMapDefault</name><index pos:line="229" pos:column="68">[<expr><name pos:line="229" pos:column="69">i</name></expr>]</index></name><op:operator pos:line="229" pos:column="71">.</op:operator><name pos:line="229" pos:column="72">modifiers</name></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="83">macMapDefault</name><index pos:line="229" pos:column="96">[<expr><name pos:line="229" pos:column="97">i</name></expr>]</index></name><op:operator pos:line="229" pos:column="99">.</op:operator><name pos:line="229" pos:column="100">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
<cpp:endif pos:line="231" pos:column="1">#<cpp:directive pos:line="231" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></constructor>

<destructor><name><name pos:line="234" pos:column="1">ScintillaMacOSX</name><op:operator pos:line="234" pos:column="16">::</op:operator>~<name pos:line="234" pos:column="19">ScintillaMacOSX</name></name><parameter_list pos:line="234" pos:column="34">()</parameter_list> <block pos:line="234" pos:column="37">{
    <comment type="line" pos:line="235" pos:column="5">// If the window is closed and the timer is not removed,</comment>
    <comment type="line" pos:line="236" pos:column="5">// A segment violation will occur when it attempts to fire the timer next.</comment>
    <if pos:line="237" pos:column="5">if <condition pos:line="237" pos:column="8">( <expr><name pos:line="237" pos:column="10">mouseTrackingRef</name> <op:operator pos:line="237" pos:column="27">!=</op:operator> <name pos:line="237" pos:column="30">NULL</name></expr> )</condition><then pos:line="237" pos:column="36"> <block pos:line="237" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="238" pos:column="9">ReleaseMouseTrackingRegion</name><argument_list pos:line="238" pos:column="35">(<argument><expr><name pos:line="238" pos:column="36">mouseTrackingRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="240" pos:column="5">mouseTrackingRef</name> <op:operator pos:line="240" pos:column="22">=</op:operator> <name pos:line="240" pos:column="24">NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="241" pos:column="5">SetTicking</name><argument_list pos:line="241" pos:column="15">(<argument><expr><lit:literal type="boolean" pos:line="241" pos:column="16">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="242" pos:column="1">#<cpp:directive pos:line="242" pos:column="2">ifdef</cpp:directive> <name pos:line="242" pos:column="8">EXT_INPUT</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name pos:line="243" pos:column="5">ExtInput</name><op:operator pos:line="243" pos:column="13">::</op:operator><name pos:line="243" pos:column="15">detach</name></name> <argument_list pos:line="243" pos:column="22">(<argument><expr><call><name pos:line="243" pos:column="23">GetViewRef</name><argument_list pos:line="243" pos:column="33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="244" pos:column="1">#<cpp:directive pos:line="244" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></destructor>

<function><type><name pos:line="247" pos:column="1">void</name></type> <name><name pos:line="247" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="247" pos:column="21">::</op:operator><name pos:line="247" pos:column="23">Initialise</name></name><parameter_list pos:line="247" pos:column="33">()</parameter_list> <block pos:line="247" pos:column="36">{
    <comment type="line" pos:line="248" pos:column="5">// TODO: Do anything here? Maybe this stuff should be here instead of the constructor?</comment>
}</block></function>

<function><type><name pos:line="251" pos:column="1">void</name></type> <name><name pos:line="251" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="251" pos:column="21">::</op:operator><name pos:line="251" pos:column="23">Finalise</name></name><parameter_list pos:line="251" pos:column="31">()</parameter_list> <block pos:line="251" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="252" pos:column="5">SetTicking</name><argument_list pos:line="252" pos:column="15">(<argument><expr><lit:literal type="boolean" pos:line="252" pos:column="16">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="253" pos:column="5">ScintillaBase</name><op:operator pos:line="253" pos:column="18">::</op:operator><name pos:line="253" pos:column="20">Finalise</name></name><argument_list pos:line="253" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="256" pos:column="1">// --------------------------------------------------------------------------------------------------------------</comment>
<comment type="line" pos:line="257" pos:column="1">//</comment>
<comment type="line" pos:line="258" pos:column="1">// IsDropInFinderTrash - Returns true if the given dropLocation AEDesc is a descriptor of the Finder's Trash.</comment>
<comment type="line" pos:line="259" pos:column="1">//</comment>
<cpp:pragma pos:line="260" pos:column="1">#<cpp:directive pos:line="260" pos:column="2">pragma</cpp:directive> segment Drag</cpp:pragma>

<function><type><name pos:line="262" pos:column="1">Boolean</name></type> <name pos:line="262" pos:column="9">IsDropInFinderTrash</name><parameter_list pos:line="262" pos:column="28">(<param><decl><type><name pos:line="262" pos:column="29">AEDesc</name> <type:modifier pos:line="262" pos:column="36">*</type:modifier></type><name pos:line="262" pos:column="37">dropLocation</name></decl></param>)</parameter_list>
<block pos:line="263" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="264" pos:column="5">OSErr</name></type>      <name pos:line="264" pos:column="16">result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="265" pos:column="5">AEDesc</name></type>      <name pos:line="265" pos:column="17">dropSpec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="266" pos:column="5">FSSpec</name>      <type:modifier pos:line="266" pos:column="17">*</type:modifier></type><name pos:line="266" pos:column="18">theSpec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="267" pos:column="5">CInfoPBRec</name></type>    <name pos:line="267" pos:column="19">thePB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="268" pos:column="5">short</name></type>      <name pos:line="268" pos:column="16">trashVRefNum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="269" pos:column="5">long</name></type>      <name pos:line="269" pos:column="15">trashDirID</name></decl>;</decl_stmt>

    <comment type="line" pos:line="271" pos:column="5">//  Coerce the dropLocation descriptor into an FSSpec. If there's no dropLocation or</comment>
    <comment type="line" pos:line="272" pos:column="5">//  it can't be coerced into an FSSpec, then it couldn't have been the Trash.</comment>

  <if pos:line="274" pos:column="3">if <condition pos:line="274" pos:column="6">(<expr><op:operator pos:line="274" pos:column="7">(</op:operator><name><name pos:line="274" pos:column="8">dropLocation</name><op:operator pos:line="274" pos:column="20">-&gt;</op:operator><name pos:line="274" pos:column="22">descriptorType</name></name> <op:operator pos:line="274" pos:column="37">!=</op:operator> <name pos:line="274" pos:column="40">typeNull</name><op:operator pos:line="274" pos:column="48">)</op:operator> <op:operator pos:line="274" pos:column="50">&amp;&amp;</op:operator>
    <op:operator pos:line="275" pos:column="5">(</op:operator><call><name pos:line="275" pos:column="6">AECoerceDesc</name><argument_list pos:line="275" pos:column="18">(<argument><expr><name pos:line="275" pos:column="19">dropLocation</name></expr></argument>, <argument><expr><name pos:line="275" pos:column="33">typeFSS</name></expr></argument>, <argument><expr><op:operator pos:line="275" pos:column="42">&amp;</op:operator><name pos:line="275" pos:column="43">dropSpec</name></expr></argument>)</argument_list></call> <op:operator pos:line="275" pos:column="53">==</op:operator> <name pos:line="275" pos:column="56">noErr</name><op:operator pos:line="275" pos:column="61">)</op:operator></expr>)</condition><then pos:line="275" pos:column="63">
    <block pos:line="276" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="277" pos:column="9">unsigned</name> <name pos:line="277" pos:column="18">char</name></type> <name pos:line="277" pos:column="23">flags</name> <init pos:line="277" pos:column="29">= <expr><call><name pos:line="277" pos:column="31">HGetState</name><argument_list pos:line="277" pos:column="40">(<argument><expr><op:operator pos:line="277" pos:column="41">(</op:operator><name pos:line="277" pos:column="42">Handle</name><op:operator pos:line="277" pos:column="48">)</op:operator><name><name pos:line="277" pos:column="49">dropSpec</name><op:operator pos:line="277" pos:column="57">.</op:operator><name pos:line="277" pos:column="58">dataHandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name pos:line="279" pos:column="9">HLock</name><argument_list pos:line="279" pos:column="14">(<argument><expr><op:operator pos:line="279" pos:column="15">(</op:operator><name pos:line="279" pos:column="16">Handle</name><op:operator pos:line="279" pos:column="22">)</op:operator><name><name pos:line="279" pos:column="23">dropSpec</name><op:operator pos:line="279" pos:column="31">.</op:operator><name pos:line="279" pos:column="32">dataHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="280" pos:column="9">theSpec</name> <op:operator pos:line="280" pos:column="17">=</op:operator> <op:operator pos:line="280" pos:column="19">(</op:operator><name pos:line="280" pos:column="20">FSSpec</name> <op:operator pos:line="280" pos:column="27">*</op:operator><op:operator pos:line="280" pos:column="28">)</op:operator> <op:operator pos:line="280" pos:column="30">*</op:operator><name><name pos:line="280" pos:column="31">dropSpec</name><op:operator pos:line="280" pos:column="39">.</op:operator><name pos:line="280" pos:column="40">dataHandle</name></name></expr>;</expr_stmt>

        <comment type="line" pos:line="282" pos:column="9">//  Get the directory ID of the given dropLocation object.</comment>

        <expr_stmt><expr><name><name pos:line="284" pos:column="9">thePB</name><op:operator pos:line="284" pos:column="14">.</op:operator><name pos:line="284" pos:column="15">dirInfo</name><op:operator pos:line="284" pos:column="22">.</op:operator><name pos:line="284" pos:column="23">ioCompletion</name></name> <op:operator pos:line="284" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="284" pos:column="38">0L</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="285" pos:column="9">thePB</name><op:operator pos:line="285" pos:column="14">.</op:operator><name pos:line="285" pos:column="15">dirInfo</name><op:operator pos:line="285" pos:column="22">.</op:operator><name pos:line="285" pos:column="23">ioNamePtr</name></name> <op:operator pos:line="285" pos:column="33">=</op:operator> <op:operator pos:line="285" pos:column="35">(</op:operator><name pos:line="285" pos:column="36">StringPtr</name><op:operator pos:line="285" pos:column="45">)</op:operator> <op:operator pos:line="285" pos:column="47">&amp;</op:operator><name><name pos:line="285" pos:column="48">theSpec</name><op:operator pos:line="285" pos:column="55">-&gt;</op:operator><name pos:line="285" pos:column="57">name</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="286" pos:column="9">thePB</name><op:operator pos:line="286" pos:column="14">.</op:operator><name pos:line="286" pos:column="15">dirInfo</name><op:operator pos:line="286" pos:column="22">.</op:operator><name pos:line="286" pos:column="23">ioVRefNum</name></name> <op:operator pos:line="286" pos:column="33">=</op:operator> <name><name pos:line="286" pos:column="35">theSpec</name><op:operator pos:line="286" pos:column="42">-&gt;</op:operator><name pos:line="286" pos:column="44">vRefNum</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="287" pos:column="9">thePB</name><op:operator pos:line="287" pos:column="14">.</op:operator><name pos:line="287" pos:column="15">dirInfo</name><op:operator pos:line="287" pos:column="22">.</op:operator><name pos:line="287" pos:column="23">ioFDirIndex</name></name> <op:operator pos:line="287" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="287" pos:column="37">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="288" pos:column="9">thePB</name><op:operator pos:line="288" pos:column="14">.</op:operator><name pos:line="288" pos:column="15">dirInfo</name><op:operator pos:line="288" pos:column="22">.</op:operator><name pos:line="288" pos:column="23">ioDrDirID</name></name> <op:operator pos:line="288" pos:column="33">=</op:operator> <name><name pos:line="288" pos:column="35">theSpec</name><op:operator pos:line="288" pos:column="42">-&gt;</op:operator><name pos:line="288" pos:column="44">parID</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name pos:line="290" pos:column="9">result</name> <op:operator pos:line="290" pos:column="16">=</op:operator> <call><name pos:line="290" pos:column="18">PBGetCatInfoSync</name><argument_list pos:line="290" pos:column="34">(<argument><expr><op:operator pos:line="290" pos:column="35">&amp;</op:operator><name pos:line="290" pos:column="36">thePB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="292" pos:column="9">HSetState</name><argument_list pos:line="292" pos:column="18">(<argument><expr><op:operator pos:line="292" pos:column="19">(</op:operator><name pos:line="292" pos:column="20">Handle</name><op:operator pos:line="292" pos:column="26">)</op:operator><name><name pos:line="292" pos:column="27">dropSpec</name><op:operator pos:line="292" pos:column="35">.</op:operator><name pos:line="292" pos:column="36">dataHandle</name></name></expr></argument>, <argument><expr><name pos:line="292" pos:column="48">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="293" pos:column="9">AEDisposeDesc</name><argument_list pos:line="293" pos:column="22">(<argument><expr><op:operator pos:line="293" pos:column="23">&amp;</op:operator><name pos:line="293" pos:column="24">dropSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if pos:line="295" pos:column="9">if <condition pos:line="295" pos:column="12">(<expr><name pos:line="295" pos:column="13">result</name> <op:operator pos:line="295" pos:column="20">!=</op:operator> <name pos:line="295" pos:column="23">noErr</name></expr>)</condition><then pos:line="295" pos:column="29">
            <return pos:line="296" pos:column="13">return <expr><lit:literal type="boolean" pos:line="296" pos:column="20">false</lit:literal></expr>;</return></then></if>

        <comment type="line" pos:line="298" pos:column="9">//  If the result is not a directory, it must not be the Trash.</comment>

        <if pos:line="300" pos:column="9">if <condition pos:line="300" pos:column="12">(<expr><op:operator pos:line="300" pos:column="13">!</op:operator><op:operator pos:line="300" pos:column="14">(</op:operator><name><name pos:line="300" pos:column="15">thePB</name><op:operator pos:line="300" pos:column="20">.</op:operator><name pos:line="300" pos:column="21">dirInfo</name><op:operator pos:line="300" pos:column="28">.</op:operator><name pos:line="300" pos:column="29">ioFlAttrib</name></name> <op:operator pos:line="300" pos:column="40">&amp;</op:operator> <op:operator pos:line="300" pos:column="42">(</op:operator><lit:literal type="number" pos:line="300" pos:column="43">1</lit:literal> <op:operator pos:line="300" pos:column="45">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="300" pos:column="48">4</lit:literal><op:operator pos:line="300" pos:column="49">)</op:operator><op:operator pos:line="300" pos:column="50">)</op:operator></expr>)</condition><then pos:line="300" pos:column="52">
            <return pos:line="301" pos:column="13">return <expr><lit:literal type="boolean" pos:line="301" pos:column="20">false</lit:literal></expr>;</return></then></if>

        <comment type="line" pos:line="303" pos:column="9">//  Get information about the Trash folder.</comment>

        <expr_stmt><expr><call><name pos:line="305" pos:column="9">FindFolder</name><argument_list pos:line="305" pos:column="19">(<argument><expr><name><name pos:line="305" pos:column="20">theSpec</name><op:operator pos:line="305" pos:column="27">-&gt;</op:operator><name pos:line="305" pos:column="29">vRefNum</name></name></expr></argument>, <argument><expr><name pos:line="305" pos:column="38">kTrashFolderType</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="56">kCreateFolder</name></expr></argument>, <argument><expr><op:operator pos:line="305" pos:column="71">&amp;</op:operator><name pos:line="305" pos:column="72">trashVRefNum</name></expr></argument>, <argument><expr><op:operator pos:line="305" pos:column="86">&amp;</op:operator><name pos:line="305" pos:column="87">trashDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="307" pos:column="9">//  If the directory ID of the dropLocation object is the same as the directory ID</comment>
        <comment type="line" pos:line="308" pos:column="9">//  returned by FindFolder, then the drop must have occurred into the Trash.</comment>

        <if pos:line="310" pos:column="9">if <condition pos:line="310" pos:column="12">(<expr><name><name pos:line="310" pos:column="13">thePB</name><op:operator pos:line="310" pos:column="18">.</op:operator><name pos:line="310" pos:column="19">dirInfo</name><op:operator pos:line="310" pos:column="26">.</op:operator><name pos:line="310" pos:column="27">ioDrDirID</name></name> <op:operator pos:line="310" pos:column="37">==</op:operator> <name pos:line="310" pos:column="40">trashDirID</name></expr>)</condition><then pos:line="310" pos:column="51">
            <return pos:line="311" pos:column="13">return <expr><lit:literal type="boolean" pos:line="311" pos:column="20">true</lit:literal></expr>;</return></then></if>
    }</block></then></if>

    <return pos:line="314" pos:column="5">return <expr><lit:literal type="boolean" pos:line="314" pos:column="12">false</lit:literal></expr>;</return>

}</block></function> <comment type="line" pos:line="316" pos:column="3">// IsDropInFinderTrash</comment>

<function><type><name pos:line="318" pos:column="1">HIPoint</name></type> <name><name pos:line="318" pos:column="9">ScintillaMacOSX</name><op:operator pos:line="318" pos:column="24">::</op:operator><name pos:line="318" pos:column="26">GetLocalPoint</name></name><parameter_list pos:line="318" pos:column="39">(<param><decl><type><name><op:operator pos:line="318" pos:column="40">::</op:operator><name pos:line="318" pos:column="42">Point</name></name></type> <name pos:line="318" pos:column="48">pt</name></decl></param>)</parameter_list>
<block pos:line="319" pos:column="1">{
    <comment type="line" pos:line="320" pos:column="5">// get the mouse position so we can offset it</comment>
    <decl_stmt><decl><type><name pos:line="321" pos:column="5">Rect</name></type> <name pos:line="321" pos:column="10">bounds</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="322" pos:column="5">GetWindowBounds</name><argument_list pos:line="322" pos:column="20">( <argument><expr><call><name pos:line="322" pos:column="22">GetOwner</name><argument_list pos:line="322" pos:column="30">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="322" pos:column="34">kWindowStructureRgn</name></expr></argument>, <argument><expr><op:operator pos:line="322" pos:column="55">&amp;</op:operator><name pos:line="322" pos:column="56">bounds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="324" pos:column="5">PRectangle</name></type> <name pos:line="324" pos:column="16">hbounds</name> <init pos:line="324" pos:column="24">= <expr><call><name><name pos:line="324" pos:column="26">wMain</name><op:operator pos:line="324" pos:column="31">.</op:operator><name pos:line="324" pos:column="32">GetPosition</name></name><argument_list pos:line="324" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="325" pos:column="5">HIViewRef</name></type> <name pos:line="325" pos:column="15">parent</name> <init pos:line="325" pos:column="22">= <expr><call><name pos:line="325" pos:column="24">HIViewGetSuperview</name><argument_list pos:line="325" pos:column="42">(<argument><expr><call><name pos:line="325" pos:column="43">GetViewRef</name><argument_list pos:line="325" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="326" pos:column="5">Rect</name></type> <name pos:line="326" pos:column="10">pbounds</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="327" pos:column="5">GetControlBounds</name><argument_list pos:line="327" pos:column="21">(<argument><expr><name pos:line="327" pos:column="22">parent</name></expr></argument>, <argument><expr><op:operator pos:line="327" pos:column="30">&amp;</op:operator><name pos:line="327" pos:column="31">pbounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name pos:line="329" pos:column="5">bounds</name><op:operator pos:line="329" pos:column="11">.</op:operator><name pos:line="329" pos:column="12">left</name></name> <op:operator pos:line="329" pos:column="17">+=</op:operator> <name><name pos:line="329" pos:column="20">pbounds</name><op:operator pos:line="329" pos:column="27">.</op:operator><name pos:line="329" pos:column="28">left</name></name> <op:operator pos:line="329" pos:column="33">+</op:operator> <name><name pos:line="329" pos:column="35">hbounds</name><op:operator pos:line="329" pos:column="42">.</op:operator><name pos:line="329" pos:column="43">left</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="330" pos:column="5">bounds</name><op:operator pos:line="330" pos:column="11">.</op:operator><name pos:line="330" pos:column="12">top</name></name> <op:operator pos:line="330" pos:column="16">+=</op:operator> <name><name pos:line="330" pos:column="19">pbounds</name><op:operator pos:line="330" pos:column="26">.</op:operator><name pos:line="330" pos:column="27">top</name></name> <op:operator pos:line="330" pos:column="31">+</op:operator> <name><name pos:line="330" pos:column="33">hbounds</name><op:operator pos:line="330" pos:column="40">.</op:operator><name pos:line="330" pos:column="41">top</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="332" pos:column="5">HIPoint</name></type> <name pos:line="332" pos:column="13">offset</name> <init pos:line="332" pos:column="20">= <expr><block pos:line="332" pos:column="22">{ <expr><name><name pos:line="332" pos:column="24">pt</name><op:operator pos:line="332" pos:column="26">.</op:operator><name pos:line="332" pos:column="27">h</name></name> <op:operator pos:line="332" pos:column="29">-</op:operator> <name><name pos:line="332" pos:column="31">bounds</name><op:operator pos:line="332" pos:column="37">.</op:operator><name pos:line="332" pos:column="38">left</name></name></expr>, <expr><name><name pos:line="332" pos:column="44">pt</name><op:operator pos:line="332" pos:column="46">.</op:operator><name pos:line="332" pos:column="47">v</name></name> <op:operator pos:line="332" pos:column="49">-</op:operator> <name><name pos:line="332" pos:column="51">bounds</name><op:operator pos:line="332" pos:column="57">.</op:operator><name pos:line="332" pos:column="58">top</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <return pos:line="333" pos:column="5">return <expr><name pos:line="333" pos:column="12">offset</name></expr>;</return>
}</block></function>

<function><type><name pos:line="336" pos:column="1">void</name></type> <name><name pos:line="336" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="336" pos:column="21">::</op:operator><name pos:line="336" pos:column="23">StartDrag</name></name><parameter_list pos:line="336" pos:column="32">()</parameter_list> <block pos:line="336" pos:column="35">{
    <if pos:line="337" pos:column="5">if <condition pos:line="337" pos:column="8">(<expr><call><name><name pos:line="337" pos:column="9">sel</name><op:operator pos:line="337" pos:column="12">.</op:operator><name pos:line="337" pos:column="13">Empty</name></name><argument_list pos:line="337" pos:column="18">()</argument_list></call></expr>)</condition><then pos:line="337" pos:column="21"> <return pos:line="337" pos:column="22">return;</return></then></if>

    <comment type="line" pos:line="339" pos:column="5">// calculate the bounds of the selection</comment>
        <decl_stmt><decl><type><name pos:line="340" pos:column="9">PRectangle</name></type> <name pos:line="340" pos:column="20">client</name> <init pos:line="340" pos:column="27">= <expr><call><name pos:line="340" pos:column="29">GetTextRectangle</name><argument_list pos:line="340" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="341" pos:column="5">int</name></type> <name pos:line="341" pos:column="9">selStart</name> <init pos:line="341" pos:column="18">= <expr><call><name><name pos:line="341" pos:column="20">sel</name><op:operator pos:line="341" pos:column="23">.</op:operator><name pos:line="341" pos:column="24">RangeMain</name></name><argument_list pos:line="341" pos:column="33">()</argument_list></call><op:operator pos:line="341" pos:column="35">.</op:operator><call><name pos:line="341" pos:column="36">Start</name><argument_list pos:line="341" pos:column="41">()</argument_list></call><op:operator pos:line="341" pos:column="43">.</op:operator><call><name pos:line="341" pos:column="44">Position</name><argument_list pos:line="341" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="342" pos:column="5">int</name></type> <name pos:line="342" pos:column="9">selEnd</name> <init pos:line="342" pos:column="16">= <expr><call><name><name pos:line="342" pos:column="18">sel</name><op:operator pos:line="342" pos:column="21">.</op:operator><name pos:line="342" pos:column="22">RangeMain</name></name><argument_list pos:line="342" pos:column="31">()</argument_list></call><op:operator pos:line="342" pos:column="33">.</op:operator><call><name pos:line="342" pos:column="34">End</name><argument_list pos:line="342" pos:column="37">()</argument_list></call><op:operator pos:line="342" pos:column="39">.</op:operator><call><name pos:line="342" pos:column="40">Position</name><argument_list pos:line="342" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="343" pos:column="5">int</name></type> <name pos:line="343" pos:column="9">startLine</name> <init pos:line="343" pos:column="19">= <expr><call><name><name pos:line="343" pos:column="21">pdoc</name><op:operator pos:line="343" pos:column="25">-&gt;</op:operator><name pos:line="343" pos:column="27">LineFromPosition</name></name><argument_list pos:line="343" pos:column="43">(<argument><expr><name pos:line="343" pos:column="44">selStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="344" pos:column="5">int</name></type> <name pos:line="344" pos:column="9">endLine</name> <init pos:line="344" pos:column="17">= <expr><call><name><name pos:line="344" pos:column="19">pdoc</name><op:operator pos:line="344" pos:column="23">-&gt;</op:operator><name pos:line="344" pos:column="25">LineFromPosition</name></name><argument_list pos:line="344" pos:column="41">(<argument><expr><name pos:line="344" pos:column="42">selEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="345" pos:column="5">Point</name></type> <name pos:line="345" pos:column="11">pt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="346" pos:column="5">int</name></type> <name pos:line="346" pos:column="9">startPos</name></decl><op:operator pos:line="346" pos:column="17">,</op:operator> <decl><type ref="prev"/><name pos:line="346" pos:column="19">endPos</name></decl><op:operator pos:line="346" pos:column="25">,</op:operator> <decl><type ref="prev"/><name pos:line="346" pos:column="27">ep</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="347" pos:column="5">Rect</name></type> <name pos:line="347" pos:column="10">rcSel</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="348" pos:column="5">rcSel</name><op:operator pos:line="348" pos:column="10">.</op:operator><name pos:line="348" pos:column="11">top</name></name> <op:operator pos:line="348" pos:column="15">=</op:operator> <name><name pos:line="348" pos:column="17">rcSel</name><op:operator pos:line="348" pos:column="22">.</op:operator><name pos:line="348" pos:column="23">bottom</name></name> <op:operator pos:line="348" pos:column="30">=</op:operator> <name><name pos:line="348" pos:column="32">rcSel</name><op:operator pos:line="348" pos:column="37">.</op:operator><name pos:line="348" pos:column="38">right</name></name> <op:operator pos:line="348" pos:column="44">=</op:operator> <name><name pos:line="348" pos:column="46">rcSel</name><op:operator pos:line="348" pos:column="51">.</op:operator><name pos:line="348" pos:column="52">left</name></name> <op:operator pos:line="348" pos:column="57">=</op:operator> <op:operator pos:line="348" pos:column="59">-</op:operator><lit:literal type="number" pos:line="348" pos:column="60">1</lit:literal></expr>;</expr_stmt>
    <for pos:line="349" pos:column="5">for (<init><decl><type><name pos:line="349" pos:column="10">int</name></type> <name pos:line="349" pos:column="14">l</name> <init pos:line="349" pos:column="16">= <expr><name pos:line="349" pos:column="18">startLine</name></expr></init></decl>;</init> <condition><expr><name pos:line="349" pos:column="29">l</name> <op:operator pos:line="349" pos:column="31">&lt;=</op:operator> <name pos:line="349" pos:column="34">endLine</name></expr>;</condition> <incr><expr><name pos:line="349" pos:column="43">l</name><op:operator pos:line="349" pos:column="44">++</op:operator></expr></incr>) <block pos:line="349" pos:column="48">{
        <expr_stmt><expr><name pos:line="350" pos:column="9">startPos</name> <op:operator pos:line="350" pos:column="18">=</op:operator> <call><name pos:line="350" pos:column="20">WndProc</name><argument_list pos:line="350" pos:column="27">(<argument><expr><name pos:line="350" pos:column="28">SCI_GETLINESELSTARTPOSITION</name></expr></argument>, <argument><expr><name pos:line="350" pos:column="57">l</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="350" pos:column="60">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="351" pos:column="9">endPos</name> <op:operator pos:line="351" pos:column="16">=</op:operator> <call><name pos:line="351" pos:column="18">WndProc</name><argument_list pos:line="351" pos:column="25">(<argument><expr><name pos:line="351" pos:column="26">SCI_GETLINESELENDPOSITION</name></expr></argument>, <argument><expr><name pos:line="351" pos:column="53">l</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="351" pos:column="56">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="352" pos:column="9">if <condition pos:line="352" pos:column="12">(<expr><name pos:line="352" pos:column="13">endPos</name> <op:operator pos:line="352" pos:column="20">==</op:operator> <name pos:line="352" pos:column="23">startPos</name></expr>)</condition><then pos:line="352" pos:column="32"> <continue pos:line="352" pos:column="33">continue;</continue></then></if>
        <comment type="line" pos:line="353" pos:column="9">// step back a position if we're counting the newline</comment>
        <expr_stmt><expr><name pos:line="354" pos:column="9">ep</name> <op:operator pos:line="354" pos:column="12">=</op:operator> <call><name pos:line="354" pos:column="14">WndProc</name><argument_list pos:line="354" pos:column="21">(<argument><expr><name pos:line="354" pos:column="22">SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name pos:line="354" pos:column="46">l</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="354" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="355" pos:column="9">if <condition pos:line="355" pos:column="12">(<expr><name pos:line="355" pos:column="13">endPos</name> <op:operator pos:line="355" pos:column="20">&gt;</op:operator> <name pos:line="355" pos:column="22">ep</name></expr>)</condition><then pos:line="355" pos:column="25"> <expr_stmt><expr><name pos:line="355" pos:column="26">endPos</name> <op:operator pos:line="355" pos:column="33">=</op:operator> <name pos:line="355" pos:column="35">ep</name></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name pos:line="357" pos:column="9">pt</name> <op:operator pos:line="357" pos:column="12">=</op:operator> <call><name pos:line="357" pos:column="14">LocationFromPosition</name><argument_list pos:line="357" pos:column="34">(<argument><expr><name pos:line="357" pos:column="35">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="357" pos:column="46">// top left of line selection</comment>
        <if pos:line="358" pos:column="9">if <condition pos:line="358" pos:column="12">(<expr><name><name pos:line="358" pos:column="13">pt</name><op:operator pos:line="358" pos:column="15">.</op:operator><name pos:line="358" pos:column="16">x</name></name> <op:operator pos:line="358" pos:column="18">&lt;</op:operator> <name><name pos:line="358" pos:column="20">rcSel</name><op:operator pos:line="358" pos:column="25">.</op:operator><name pos:line="358" pos:column="26">left</name></name> <op:operator pos:line="358" pos:column="31">||</op:operator> <name><name pos:line="358" pos:column="34">rcSel</name><op:operator pos:line="358" pos:column="39">.</op:operator><name pos:line="358" pos:column="40">left</name></name> <op:operator pos:line="358" pos:column="45">&lt;</op:operator> <lit:literal type="number" pos:line="358" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="358" pos:column="49"> <expr_stmt><expr><name><name pos:line="358" pos:column="50">rcSel</name><op:operator pos:line="358" pos:column="55">.</op:operator><name pos:line="358" pos:column="56">left</name></name> <op:operator pos:line="358" pos:column="61">=</op:operator> <name><name pos:line="358" pos:column="63">pt</name><op:operator pos:line="358" pos:column="65">.</op:operator><name pos:line="358" pos:column="66">x</name></name></expr>;</expr_stmt></then></if>
        <if pos:line="359" pos:column="9">if <condition pos:line="359" pos:column="12">(<expr><name><name pos:line="359" pos:column="13">pt</name><op:operator pos:line="359" pos:column="15">.</op:operator><name pos:line="359" pos:column="16">y</name></name> <op:operator pos:line="359" pos:column="18">&lt;</op:operator> <name><name pos:line="359" pos:column="20">rcSel</name><op:operator pos:line="359" pos:column="25">.</op:operator><name pos:line="359" pos:column="26">top</name></name> <op:operator pos:line="359" pos:column="30">||</op:operator> <name><name pos:line="359" pos:column="33">rcSel</name><op:operator pos:line="359" pos:column="38">.</op:operator><name pos:line="359" pos:column="39">top</name></name> <op:operator pos:line="359" pos:column="43">&lt;</op:operator> <lit:literal type="number" pos:line="359" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="359" pos:column="47"> <expr_stmt><expr><name><name pos:line="359" pos:column="48">rcSel</name><op:operator pos:line="359" pos:column="53">.</op:operator><name pos:line="359" pos:column="54">top</name></name> <op:operator pos:line="359" pos:column="58">=</op:operator> <name><name pos:line="359" pos:column="60">pt</name><op:operator pos:line="359" pos:column="62">.</op:operator><name pos:line="359" pos:column="63">y</name></name></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name pos:line="361" pos:column="9">pt</name> <op:operator pos:line="361" pos:column="12">=</op:operator> <call><name pos:line="361" pos:column="14">LocationFromPosition</name><argument_list pos:line="361" pos:column="34">(<argument><expr><name pos:line="361" pos:column="35">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="361" pos:column="44">// top right of line selection</comment>
        <expr_stmt><expr><name><name pos:line="362" pos:column="9">pt</name><op:operator pos:line="362" pos:column="11">.</op:operator><name pos:line="362" pos:column="12">y</name></name> <op:operator pos:line="362" pos:column="14">+=</op:operator> <name><name pos:line="362" pos:column="17">vs</name><op:operator pos:line="362" pos:column="19">.</op:operator><name pos:line="362" pos:column="20">lineHeight</name></name></expr>;</expr_stmt> <comment type="line" pos:line="362" pos:column="32">// get to the bottom of the line</comment>
        <if pos:line="363" pos:column="9">if <condition pos:line="363" pos:column="12">(<expr><name><name pos:line="363" pos:column="13">pt</name><op:operator pos:line="363" pos:column="15">.</op:operator><name pos:line="363" pos:column="16">x</name></name> <op:operator pos:line="363" pos:column="18">&gt;</op:operator> <name><name pos:line="363" pos:column="20">rcSel</name><op:operator pos:line="363" pos:column="25">.</op:operator><name pos:line="363" pos:column="26">right</name></name> <op:operator pos:line="363" pos:column="32">||</op:operator> <name><name pos:line="363" pos:column="35">rcSel</name><op:operator pos:line="363" pos:column="40">.</op:operator><name pos:line="363" pos:column="41">right</name></name> <op:operator pos:line="363" pos:column="47">&lt;</op:operator> <lit:literal type="number" pos:line="363" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="363" pos:column="51"> <block pos:line="363" pos:column="52">{
            <if pos:line="364" pos:column="13">if <condition pos:line="364" pos:column="16">(<expr><name><name pos:line="364" pos:column="17">pt</name><op:operator pos:line="364" pos:column="19">.</op:operator><name pos:line="364" pos:column="20">x</name></name> <op:operator pos:line="364" pos:column="22">&gt;</op:operator> <name><name pos:line="364" pos:column="24">client</name><op:operator pos:line="364" pos:column="30">.</op:operator><name pos:line="364" pos:column="31">right</name></name></expr>)</condition><then pos:line="364" pos:column="37">
                <expr_stmt><expr><name><name pos:line="365" pos:column="17">rcSel</name><op:operator pos:line="365" pos:column="22">.</op:operator><name pos:line="365" pos:column="23">right</name></name> <op:operator pos:line="365" pos:column="29">=</op:operator> <name><name pos:line="365" pos:column="31">client</name><op:operator pos:line="365" pos:column="37">.</op:operator><name pos:line="365" pos:column="38">right</name></name></expr>;</expr_stmt></then>
            <else pos:line="366" pos:column="13">else
                <expr_stmt><expr><name><name pos:line="367" pos:column="17">rcSel</name><op:operator pos:line="367" pos:column="22">.</op:operator><name pos:line="367" pos:column="23">right</name></name> <op:operator pos:line="367" pos:column="29">=</op:operator> <name><name pos:line="367" pos:column="31">pt</name><op:operator pos:line="367" pos:column="33">.</op:operator><name pos:line="367" pos:column="34">x</name></name></expr>;</expr_stmt></else></if>
        }</block></then></if>
        <if pos:line="369" pos:column="9">if <condition pos:line="369" pos:column="12">(<expr><name><name pos:line="369" pos:column="13">pt</name><op:operator pos:line="369" pos:column="15">.</op:operator><name pos:line="369" pos:column="16">y</name></name> <op:operator pos:line="369" pos:column="18">&gt;</op:operator> <name><name pos:line="369" pos:column="20">rcSel</name><op:operator pos:line="369" pos:column="25">.</op:operator><name pos:line="369" pos:column="26">bottom</name></name> <op:operator pos:line="369" pos:column="33">||</op:operator> <name><name pos:line="369" pos:column="36">rcSel</name><op:operator pos:line="369" pos:column="41">.</op:operator><name pos:line="369" pos:column="42">bottom</name></name> <op:operator pos:line="369" pos:column="49">&lt;</op:operator> <lit:literal type="number" pos:line="369" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="369" pos:column="53"> <block pos:line="369" pos:column="54">{
            <if pos:line="370" pos:column="13">if <condition pos:line="370" pos:column="16">(<expr><name><name pos:line="370" pos:column="17">pt</name><op:operator pos:line="370" pos:column="19">.</op:operator><name pos:line="370" pos:column="20">y</name></name> <op:operator pos:line="370" pos:column="22">&gt;</op:operator> <name><name pos:line="370" pos:column="24">client</name><op:operator pos:line="370" pos:column="30">.</op:operator><name pos:line="370" pos:column="31">bottom</name></name></expr>)</condition><then pos:line="370" pos:column="38">
                <expr_stmt><expr><name><name pos:line="371" pos:column="17">rcSel</name><op:operator pos:line="371" pos:column="22">.</op:operator><name pos:line="371" pos:column="23">bottom</name></name> <op:operator pos:line="371" pos:column="30">=</op:operator> <name><name pos:line="371" pos:column="32">client</name><op:operator pos:line="371" pos:column="38">.</op:operator><name pos:line="371" pos:column="39">bottom</name></name></expr>;</expr_stmt></then>
            <else pos:line="372" pos:column="13">else
                <expr_stmt><expr><name><name pos:line="373" pos:column="17">rcSel</name><op:operator pos:line="373" pos:column="22">.</op:operator><name pos:line="373" pos:column="23">bottom</name></name> <op:operator pos:line="373" pos:column="30">=</op:operator> <name><name pos:line="373" pos:column="32">pt</name><op:operator pos:line="373" pos:column="34">.</op:operator><name pos:line="373" pos:column="35">y</name></name></expr>;</expr_stmt></else></if>
        }</block></then></if>
    }</block></for>

    <comment type="line" pos:line="377" pos:column="5">// must convert to global coordinates for drag regions, but also save the</comment>
    <comment type="line" pos:line="378" pos:column="5">// image rectangle for further calculations and copy operations</comment>
    <decl_stmt><decl><type><name pos:line="379" pos:column="5">PRectangle</name></type> <name pos:line="379" pos:column="16">imageRect</name> <init pos:line="379" pos:column="26">= <expr><call><name pos:line="379" pos:column="28">PRectangle</name><argument_list pos:line="379" pos:column="38">(<argument><expr><name><name pos:line="379" pos:column="39">rcSel</name><op:operator pos:line="379" pos:column="44">.</op:operator><name pos:line="379" pos:column="45">left</name></name></expr></argument>, <argument><expr><name><name pos:line="379" pos:column="51">rcSel</name><op:operator pos:line="379" pos:column="56">.</op:operator><name pos:line="379" pos:column="57">top</name></name></expr></argument>, <argument><expr><name><name pos:line="379" pos:column="62">rcSel</name><op:operator pos:line="379" pos:column="67">.</op:operator><name pos:line="379" pos:column="68">right</name></name></expr></argument>, <argument><expr><name><name pos:line="379" pos:column="75">rcSel</name><op:operator pos:line="379" pos:column="80">.</op:operator><name pos:line="379" pos:column="81">bottom</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="380" pos:column="5">QDLocalToGlobalRect</name><argument_list pos:line="380" pos:column="24">(<argument><expr><call><name pos:line="380" pos:column="25">GetWindowPort</name><argument_list pos:line="380" pos:column="38">(<argument><expr><call><name pos:line="380" pos:column="39">GetOwner</name><argument_list pos:line="380" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="380" pos:column="52">&amp;</op:operator><name pos:line="380" pos:column="53">rcSel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="382" pos:column="5">// get the mouse position so we can offset it</comment>
    <decl_stmt><decl><type><name pos:line="383" pos:column="5">HIPoint</name></type> <name pos:line="383" pos:column="13">offset</name> <init pos:line="383" pos:column="20">= <expr><call><name pos:line="383" pos:column="22">GetLocalPoint</name><argument_list pos:line="383" pos:column="35">(<argument><expr><name><name pos:line="383" pos:column="36">mouseDownEvent</name><op:operator pos:line="383" pos:column="50">.</op:operator><name pos:line="383" pos:column="51">where</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="384" pos:column="5">offset</name><op:operator pos:line="384" pos:column="11">.</op:operator><name pos:line="384" pos:column="12">y</name></name> <op:operator pos:line="384" pos:column="14">=</op:operator> <op:operator pos:line="384" pos:column="16">(</op:operator><name><name pos:line="384" pos:column="17">imageRect</name><op:operator pos:line="384" pos:column="26">.</op:operator><name pos:line="384" pos:column="27">top</name></name> <op:operator pos:line="384" pos:column="31">*</op:operator> <lit:literal type="number" pos:line="384" pos:column="33">1.0</lit:literal><op:operator pos:line="384" pos:column="36">)</op:operator> <op:operator pos:line="384" pos:column="38">-</op:operator> <name><name pos:line="384" pos:column="40">offset</name><op:operator pos:line="384" pos:column="46">.</op:operator><name pos:line="384" pos:column="47">y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="385" pos:column="5">offset</name><op:operator pos:line="385" pos:column="11">.</op:operator><name pos:line="385" pos:column="12">x</name></name> <op:operator pos:line="385" pos:column="14">=</op:operator> <op:operator pos:line="385" pos:column="16">(</op:operator><name><name pos:line="385" pos:column="17">imageRect</name><op:operator pos:line="385" pos:column="26">.</op:operator><name pos:line="385" pos:column="27">left</name></name> <op:operator pos:line="385" pos:column="32">*</op:operator> <lit:literal type="number" pos:line="385" pos:column="34">1.0</lit:literal><op:operator pos:line="385" pos:column="37">)</op:operator> <op:operator pos:line="385" pos:column="39">-</op:operator> <name><name pos:line="385" pos:column="41">offset</name><op:operator pos:line="385" pos:column="47">.</op:operator><name pos:line="385" pos:column="48">x</name></name></expr>;</expr_stmt>

    <comment type="line" pos:line="387" pos:column="5">// to get a bitmap of the text we're dragging, we just use Paint on a</comment>
    <comment type="line" pos:line="388" pos:column="5">// pixmap surface.</comment>
    <decl_stmt><decl><type><name pos:line="389" pos:column="5">SurfaceImpl</name> <type:modifier pos:line="389" pos:column="17">*</type:modifier></type><name pos:line="389" pos:column="18">sw</name> <init pos:line="389" pos:column="21">= <expr><op:operator pos:line="389" pos:column="23">new</op:operator> <call><name pos:line="389" pos:column="27">SurfaceImpl</name><argument_list pos:line="389" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="390" pos:column="5">SurfaceImpl</name> <type:modifier pos:line="390" pos:column="17">*</type:modifier></type><name pos:line="390" pos:column="18">pixmap</name> <init pos:line="390" pos:column="25">= <expr><name pos:line="390" pos:column="27">NULL</name></expr></init></decl>;</decl_stmt>

    <if pos:line="392" pos:column="5">if <condition pos:line="392" pos:column="8">(<expr><name pos:line="392" pos:column="9">sw</name></expr>)</condition><then pos:line="392" pos:column="12"> <block pos:line="392" pos:column="13">{
        <expr_stmt><expr><name pos:line="393" pos:column="9">pixmap</name> <op:operator pos:line="393" pos:column="16">=</op:operator> <op:operator pos:line="393" pos:column="18">new</op:operator> <call><name pos:line="393" pos:column="22">SurfaceImpl</name><argument_list pos:line="393" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
        <if pos:line="394" pos:column="9">if <condition pos:line="394" pos:column="12">(<expr><name pos:line="394" pos:column="13">pixmap</name></expr>)</condition><then pos:line="394" pos:column="20"> <block pos:line="394" pos:column="21">{
            <expr_stmt><expr><name pos:line="395" pos:column="13">client</name> <op:operator pos:line="395" pos:column="20">=</op:operator> <call><name pos:line="395" pos:column="22">GetClientRectangle</name><argument_list pos:line="395" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="396" pos:column="13">paintState</name> <op:operator pos:line="396" pos:column="24">=</op:operator> <name pos:line="396" pos:column="26">painting</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="397" pos:column="13">sw</name><op:operator pos:line="397" pos:column="15">-&gt;</op:operator><name pos:line="397" pos:column="17">InitPixMap</name></name><argument_list pos:line="397" pos:column="27">( <argument><expr><call><name><name pos:line="397" pos:column="29">client</name><op:operator pos:line="397" pos:column="35">.</op:operator><name pos:line="397" pos:column="36">Width</name></name><argument_list pos:line="397" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="397" pos:column="45">client</name><op:operator pos:line="397" pos:column="51">.</op:operator><name pos:line="397" pos:column="52">Height</name></name><argument_list pos:line="397" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="397" pos:column="62">NULL</name></expr></argument>, <argument><expr><name pos:line="397" pos:column="68">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="398" pos:column="13">paintingAllText</name> <op:operator pos:line="398" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="398" pos:column="31">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="399" pos:column="13">Paint</name><argument_list pos:line="399" pos:column="18">(<argument><expr><name pos:line="399" pos:column="19">sw</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="23">imageRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="400" pos:column="13">paintState</name> <op:operator pos:line="400" pos:column="24">=</op:operator> <name pos:line="400" pos:column="26">notPainting</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="402" pos:column="13">pixmap</name><op:operator pos:line="402" pos:column="19">-&gt;</op:operator><name pos:line="402" pos:column="21">InitPixMap</name></name><argument_list pos:line="402" pos:column="31">( <argument><expr><call><name><name pos:line="402" pos:column="33">imageRect</name><op:operator pos:line="402" pos:column="42">.</op:operator><name pos:line="402" pos:column="43">Width</name></name><argument_list pos:line="402" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="402" pos:column="52">imageRect</name><op:operator pos:line="402" pos:column="61">.</op:operator><name pos:line="402" pos:column="62">Height</name></name><argument_list pos:line="402" pos:column="68">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="402" pos:column="72">NULL</name></expr></argument>, <argument><expr><name pos:line="402" pos:column="78">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="404" pos:column="13">CGContextRef</name></type> <name pos:line="404" pos:column="26">gc</name> <init pos:line="404" pos:column="29">= <expr><call><name><name pos:line="404" pos:column="31">pixmap</name><op:operator pos:line="404" pos:column="37">-&gt;</op:operator><name pos:line="404" pos:column="39">GetContext</name></name><argument_list pos:line="404" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="406" pos:column="13">// to make Paint() work on a bitmap, we have to flip our coordinates</comment>
            <comment type="line" pos:line="407" pos:column="13">// and translate the origin</comment>
            <comment type="line" pos:line="408" pos:column="13">//fprintf(stderr, "translate to %d\n", client.Height() );</comment>
            <expr_stmt><expr><call><name pos:line="409" pos:column="13">CGContextTranslateCTM</name><argument_list pos:line="409" pos:column="34">(<argument><expr><name pos:line="409" pos:column="35">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="409" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="409" pos:column="42">imageRect</name><op:operator pos:line="409" pos:column="51">.</op:operator><name pos:line="409" pos:column="52">Height</name></name><argument_list pos:line="409" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="410" pos:column="13">CGContextScaleCTM</name><argument_list pos:line="410" pos:column="30">(<argument><expr><name pos:line="410" pos:column="31">gc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="410" pos:column="35">1.0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="410" pos:column="40">-</op:operator><lit:literal type="number" pos:line="410" pos:column="41">1.0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="412" pos:column="13">pixmap</name><op:operator pos:line="412" pos:column="19">-&gt;</op:operator><name pos:line="412" pos:column="21">CopyImageRectangle</name></name><argument_list pos:line="412" pos:column="39">( <argument><expr><op:operator pos:line="412" pos:column="41">*</op:operator><name pos:line="412" pos:column="42">sw</name></expr></argument>, <argument><expr><name pos:line="412" pos:column="46">imageRect</name></expr></argument>, <argument><expr><call><name pos:line="412" pos:column="57">PRectangle</name><argument_list pos:line="412" pos:column="67">( <argument><expr><lit:literal type="number" pos:line="412" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="412" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="412" pos:column="75">imageRect</name><op:operator pos:line="412" pos:column="84">.</op:operator><name pos:line="412" pos:column="85">Width</name></name><argument_list pos:line="412" pos:column="90">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="412" pos:column="94">imageRect</name><op:operator pos:line="412" pos:column="103">.</op:operator><name pos:line="412" pos:column="104">Height</name></name><argument_list pos:line="412" pos:column="110">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="413" pos:column="13">// XXX TODO: overwrite any part of the image that is not part of the</comment>
            <comment type="line" pos:line="414" pos:column="13">//           selection to make it transparent.  right now we just use</comment>
            <comment type="line" pos:line="415" pos:column="13">//           the full rectangle which may include non-selected text.</comment>
        }</block></then></if>
        <expr_stmt><expr><call><name><name pos:line="417" pos:column="9">sw</name><op:operator pos:line="417" pos:column="11">-&gt;</op:operator><name pos:line="417" pos:column="13">Release</name></name><argument_list pos:line="417" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><op:operator pos:line="418" pos:column="9">delete</op:operator> <name pos:line="418" pos:column="16">sw</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line" pos:line="421" pos:column="5">// now we initiate the drag session</comment>

    <decl_stmt><decl><type><name pos:line="423" pos:column="5">RgnHandle</name></type> <name pos:line="423" pos:column="15">dragRegion</name> <init pos:line="423" pos:column="26">= <expr><call><name pos:line="423" pos:column="28">NewRgn</name><argument_list pos:line="423" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="424" pos:column="5">RgnHandle</name></type> <name pos:line="424" pos:column="15">tempRegion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="425" pos:column="5">DragRef</name></type> <name pos:line="425" pos:column="13">inDrag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="426" pos:column="5">DragAttributes</name></type> <name pos:line="426" pos:column="20">attributes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="427" pos:column="5">AEDesc</name></type> <name pos:line="427" pos:column="12">dropLocation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="428" pos:column="5">SInt16</name></type> <name pos:line="428" pos:column="12">mouseDownModifiers</name></decl><op:operator pos:line="428" pos:column="30">,</op:operator> <decl><type ref="prev"/><name pos:line="428" pos:column="32">mouseUpModifiers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="429" pos:column="5">bool</name></type> <name pos:line="429" pos:column="10">copyText</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="430" pos:column="5">CGImageRef</name></type> <name pos:line="430" pos:column="16">image</name> <init pos:line="430" pos:column="22">= <expr><name pos:line="430" pos:column="24">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name pos:line="432" pos:column="5">RectRgn</name><argument_list pos:line="432" pos:column="12">(<argument><expr><name pos:line="432" pos:column="13">dragRegion</name></expr></argument>, <argument><expr><op:operator pos:line="432" pos:column="25">&amp;</op:operator><name pos:line="432" pos:column="26">rcSel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="434" pos:column="5">SelectionText</name></type> <name pos:line="434" pos:column="19">selectedText</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="435" pos:column="5">CopySelectionRange</name><argument_list pos:line="435" pos:column="23">(<argument><expr><op:operator pos:line="435" pos:column="24">&amp;</op:operator><name pos:line="435" pos:column="25">selectedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="436" pos:column="5">PasteboardRef</name></type> <name pos:line="436" pos:column="19">theClipboard</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="437" pos:column="5">SetPasteboardData</name><argument_list pos:line="437" pos:column="22">(<argument><expr><name pos:line="437" pos:column="23">theClipboard</name></expr></argument>, <argument><expr><name pos:line="437" pos:column="37">selectedText</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="437" pos:column="51">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="438" pos:column="5">NewDragWithPasteboard</name><argument_list pos:line="438" pos:column="26">( <argument><expr><name pos:line="438" pos:column="28">theClipboard</name></expr></argument>, <argument><expr><op:operator pos:line="438" pos:column="42">&amp;</op:operator><name pos:line="438" pos:column="43">inDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="439" pos:column="5">CFRelease</name><argument_list pos:line="439" pos:column="14">( <argument><expr><name pos:line="439" pos:column="16">theClipboard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="441" pos:column="5">//  Set the item's bounding rectangle in global coordinates.</comment>
    <expr_stmt><expr><call><name pos:line="442" pos:column="5">SetDragItemBounds</name><argument_list pos:line="442" pos:column="22">(<argument><expr><name pos:line="442" pos:column="23">inDrag</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="442" pos:column="31">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="442" pos:column="34">&amp;</op:operator><name pos:line="442" pos:column="35">rcSel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="444" pos:column="5">//  Prepare the drag region.</comment>
    <expr_stmt><expr><name pos:line="445" pos:column="5">tempRegion</name> <op:operator pos:line="445" pos:column="16">=</op:operator> <call><name pos:line="445" pos:column="18">NewRgn</name><argument_list pos:line="445" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="446" pos:column="5">CopyRgn</name><argument_list pos:line="446" pos:column="12">(<argument><expr><name pos:line="446" pos:column="13">dragRegion</name></expr></argument>, <argument><expr><name pos:line="446" pos:column="25">tempRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="447" pos:column="5">InsetRgn</name><argument_list pos:line="447" pos:column="13">(<argument><expr><name pos:line="447" pos:column="14">tempRegion</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="447" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="447" pos:column="29">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="448" pos:column="5">DiffRgn</name><argument_list pos:line="448" pos:column="12">(<argument><expr><name pos:line="448" pos:column="13">dragRegion</name></expr></argument>, <argument><expr><name pos:line="448" pos:column="25">tempRegion</name></expr></argument>, <argument><expr><name pos:line="448" pos:column="37">dragRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="449" pos:column="5">DisposeRgn</name><argument_list pos:line="449" pos:column="15">(<argument><expr><name pos:line="449" pos:column="16">tempRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="451" pos:column="5">// if we have a pixmap, lets use that</comment>
    <if pos:line="452" pos:column="5">if <condition pos:line="452" pos:column="8">(<expr><name pos:line="452" pos:column="9">pixmap</name></expr>)</condition><then pos:line="452" pos:column="16"> <block pos:line="452" pos:column="17">{
        <expr_stmt><expr><name pos:line="453" pos:column="9">image</name> <op:operator pos:line="453" pos:column="15">=</op:operator> <call><name><name pos:line="453" pos:column="17">pixmap</name><op:operator pos:line="453" pos:column="23">-&gt;</op:operator><name pos:line="453" pos:column="25">GetImage</name></name><argument_list pos:line="453" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="454" pos:column="9">SetDragImageWithCGImage</name> <argument_list pos:line="454" pos:column="33">(<argument><expr><name pos:line="454" pos:column="34">inDrag</name></expr></argument>, <argument><expr><name pos:line="454" pos:column="42">image</name></expr></argument>, <argument><expr><op:operator pos:line="454" pos:column="49">&amp;</op:operator><name pos:line="454" pos:column="50">offset</name></expr></argument>, <argument><expr><name pos:line="454" pos:column="58">kDragStandardTranslucency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line" pos:line="457" pos:column="5">//  Drag the text. TrackDrag will return userCanceledErr if the drop whooshed back for any reason.</comment>
    <expr_stmt><expr><name pos:line="458" pos:column="5">inDragDrop</name> <op:operator pos:line="458" pos:column="16">=</op:operator> <name pos:line="458" pos:column="18">ddDragging</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="459" pos:column="5">OSErr</name></type> <name pos:line="459" pos:column="11">error</name> <init pos:line="459" pos:column="17">= <expr><call><name pos:line="459" pos:column="19">TrackDrag</name><argument_list pos:line="459" pos:column="28">(<argument><expr><name pos:line="459" pos:column="29">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="459" pos:column="37">&amp;</op:operator><name pos:line="459" pos:column="38">mouseDownEvent</name></expr></argument>, <argument><expr><name pos:line="459" pos:column="54">dragRegion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="460" pos:column="5">inDragDrop</name> <op:operator pos:line="460" pos:column="16">=</op:operator> <name pos:line="460" pos:column="18">ddNone</name></expr>;</expr_stmt>

    <comment type="line" pos:line="462" pos:column="5">//  Check to see if the drop occurred in the Finder's Trash. If the drop occurred</comment>
    <comment type="line" pos:line="463" pos:column="5">//  in the Finder's Trash and a copy operation wasn't specified, delete the</comment>
    <comment type="line" pos:line="464" pos:column="5">//  source selection. Note that we can continute to get the attributes, drop location</comment>
    <comment type="line" pos:line="465" pos:column="5">//  modifiers, etc. of the drag until we dispose of it using DisposeDrag.</comment>
    <if pos:line="466" pos:column="5">if <condition pos:line="466" pos:column="8">(<expr><name pos:line="466" pos:column="9">error</name> <op:operator pos:line="466" pos:column="15">==</op:operator> <name pos:line="466" pos:column="18">noErr</name></expr>)</condition><then pos:line="466" pos:column="24"> <block pos:line="466" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="467" pos:column="9">GetDragAttributes</name><argument_list pos:line="467" pos:column="26">(<argument><expr><name pos:line="467" pos:column="27">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="467" pos:column="35">&amp;</op:operator><name pos:line="467" pos:column="36">attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="468" pos:column="9">if <condition pos:line="468" pos:column="12">(<expr><op:operator pos:line="468" pos:column="13">!</op:operator><op:operator pos:line="468" pos:column="14">(</op:operator><name pos:line="468" pos:column="15">attributes</name> <op:operator pos:line="468" pos:column="26">&amp;</op:operator> <name pos:line="468" pos:column="28">kDragInsideSenderApplication</name><op:operator pos:line="468" pos:column="56">)</op:operator></expr>)</condition><then pos:line="468" pos:column="58">
        <block pos:line="469" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="470" pos:column="13">GetDropLocation</name><argument_list pos:line="470" pos:column="28">(<argument><expr><name pos:line="470" pos:column="29">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="470" pos:column="37">&amp;</op:operator><name pos:line="470" pos:column="38">dropLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="472" pos:column="13">GetDragModifiers</name><argument_list pos:line="472" pos:column="29">(<argument><expr><name pos:line="472" pos:column="30">inDrag</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="472" pos:column="38">0L</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="472" pos:column="42">&amp;</op:operator><name pos:line="472" pos:column="43">mouseDownModifiers</name></expr></argument>, <argument><expr><op:operator pos:line="472" pos:column="63">&amp;</op:operator><name pos:line="472" pos:column="64">mouseUpModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="473" pos:column="13">copyText</name> <op:operator pos:line="473" pos:column="22">=</op:operator> <op:operator pos:line="473" pos:column="24">(</op:operator><name pos:line="473" pos:column="25">mouseDownModifiers</name> <op:operator pos:line="473" pos:column="44">|</op:operator> <name pos:line="473" pos:column="46">mouseUpModifiers</name><op:operator pos:line="473" pos:column="62">)</op:operator> <op:operator pos:line="473" pos:column="64">&amp;</op:operator> <name pos:line="473" pos:column="66">optionKey</name></expr>;</expr_stmt>

            <if pos:line="475" pos:column="13">if <condition pos:line="475" pos:column="16">(<expr><op:operator pos:line="475" pos:column="17">(</op:operator><op:operator pos:line="475" pos:column="18">!</op:operator><name pos:line="475" pos:column="19">copyText</name><op:operator pos:line="475" pos:column="27">)</op:operator> <op:operator pos:line="475" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="475" pos:column="32">(</op:operator><call><name pos:line="475" pos:column="33">IsDropInFinderTrash</name><argument_list pos:line="475" pos:column="52">(<argument><expr><op:operator pos:line="475" pos:column="53">&amp;</op:operator><name pos:line="475" pos:column="54">dropLocation</name></expr></argument>)</argument_list></call><op:operator pos:line="475" pos:column="67">)</op:operator></expr>)</condition><then pos:line="475" pos:column="69">
            <block pos:line="476" pos:column="13">{
                <comment type="line" pos:line="477" pos:column="17">// delete the selected text from the buffer</comment>
                <expr_stmt><expr><call><name pos:line="478" pos:column="17">ClearSelection</name><argument_list pos:line="478" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="481" pos:column="13">AEDisposeDesc</name><argument_list pos:line="481" pos:column="26">(<argument><expr><op:operator pos:line="481" pos:column="27">&amp;</op:operator><name pos:line="481" pos:column="28">dropLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="line" pos:line="485" pos:column="5">// Dispose of this drag, 'cause we're done.</comment>
    <expr_stmt><expr><call><name pos:line="486" pos:column="5">DisposeDrag</name><argument_list pos:line="486" pos:column="16">(<argument><expr><name pos:line="486" pos:column="17">inDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="487" pos:column="5">DisposeRgn</name><argument_list pos:line="487" pos:column="15">(<argument><expr><name pos:line="487" pos:column="16">dragRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if pos:line="489" pos:column="5">if <condition pos:line="489" pos:column="8">(<expr><name pos:line="489" pos:column="9">pixmap</name></expr>)</condition><then pos:line="489" pos:column="16"> <block pos:line="489" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="490" pos:column="9">CGImageRelease</name><argument_list pos:line="490" pos:column="23">(<argument><expr><name pos:line="490" pos:column="24">image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="491" pos:column="9">pixmap</name><op:operator pos:line="491" pos:column="15">-&gt;</op:operator><name pos:line="491" pos:column="17">Release</name></name><argument_list pos:line="491" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><op:operator pos:line="492" pos:column="9">delete</op:operator> <name pos:line="492" pos:column="16">pixmap</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="496" pos:column="1">void</name></type> <name><name pos:line="496" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="496" pos:column="21">::</op:operator><name pos:line="496" pos:column="23">SetDragCursor</name></name><parameter_list pos:line="496" pos:column="36">(<param><decl><type><name pos:line="496" pos:column="37">DragRef</name></type> <name pos:line="496" pos:column="45">inDrag</name></decl></param>)</parameter_list>
<block pos:line="497" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="498" pos:column="5">DragAttributes</name></type> <name pos:line="498" pos:column="20">attributes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="499" pos:column="5">SInt16</name></type> <name pos:line="499" pos:column="12">modifiers</name> <init pos:line="499" pos:column="22">= <expr><lit:literal type="number" pos:line="499" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="500" pos:column="5">ThemeCursor</name></type> <name pos:line="500" pos:column="17">cursor</name> <init pos:line="500" pos:column="24">= <expr><name pos:line="500" pos:column="26">kThemeCopyArrowCursor</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="501" pos:column="5">GetDragAttributes</name><argument_list pos:line="501" pos:column="22">( <argument><expr><name pos:line="501" pos:column="24">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="501" pos:column="32">&amp;</op:operator><name pos:line="501" pos:column="33">attributes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if pos:line="503" pos:column="5">if <condition pos:line="503" pos:column="8">( <expr><name pos:line="503" pos:column="10">attributes</name> <op:operator pos:line="503" pos:column="21">&amp;</op:operator> <name pos:line="503" pos:column="23">kDragInsideSenderWindow</name></expr> )</condition><then pos:line="503" pos:column="48"> <block pos:line="503" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="504" pos:column="9">GetDragModifiers</name><argument_list pos:line="504" pos:column="25">(<argument><expr><name pos:line="504" pos:column="26">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="504" pos:column="34">&amp;</op:operator><name pos:line="504" pos:column="35">modifiers</name></expr></argument>, <argument><expr><name pos:line="504" pos:column="46">NULL</name></expr></argument>, <argument><expr><name pos:line="504" pos:column="52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:line="505" pos:column="9">switch <condition pos:line="505" pos:column="16">(<expr><name pos:line="505" pos:column="17">modifiers</name> <op:operator pos:line="505" pos:column="27">&amp;</op:operator> <op:operator pos:line="505" pos:column="29">~</op:operator><name pos:line="505" pos:column="30">btnState</name></expr>)</condition>  <comment type="line" pos:line="505" pos:column="41">// Filter out btnState (on for drop)</comment>
        <block pos:line="506" pos:column="9">{
        <case pos:line="507" pos:column="9">case <expr><name pos:line="507" pos:column="14">optionKey</name></expr>:
            <comment type="line" pos:line="508" pos:column="13">// it's a copy, leave it as a copy arrow</comment>
            <break pos:line="509" pos:column="13">break;</break>

        </case><case pos:line="511" pos:column="9">case <expr><name pos:line="511" pos:column="14">cmdKey</name></expr>:
        </case><case pos:line="512" pos:column="9">case <expr><name pos:line="512" pos:column="14">cmdKey</name> <op:operator pos:line="512" pos:column="21">|</op:operator> <name pos:line="512" pos:column="23">optionKey</name></expr>:
        </case><default pos:line="513" pos:column="9">default:
            <comment type="line" pos:line="514" pos:column="13">// what to do with these?  rectangular drag?</comment>
            <expr_stmt><expr><name pos:line="515" pos:column="13">cursor</name> <op:operator pos:line="515" pos:column="20">=</op:operator> <name pos:line="515" pos:column="22">kThemeArrowCursor</name></expr>;</expr_stmt>
            <break pos:line="516" pos:column="13">break;</break>
        </default>}</block></switch>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="519" pos:column="5">SetThemeCursor</name><argument_list pos:line="519" pos:column="19">(<argument><expr><name pos:line="519" pos:column="20">cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="522" pos:column="1">bool</name></type> <name><name pos:line="522" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="522" pos:column="21">::</op:operator><name pos:line="522" pos:column="23">DragEnter</name></name><parameter_list pos:line="522" pos:column="32">(<param><decl><type><name pos:line="522" pos:column="33">DragRef</name></type> <name pos:line="522" pos:column="41">inDrag</name></decl></param> )</parameter_list>
<block pos:line="523" pos:column="1">{
    <if pos:line="524" pos:column="5">if <condition pos:line="524" pos:column="8">(<expr><op:operator pos:line="524" pos:column="9">!</op:operator><call><name pos:line="524" pos:column="10">DragWithin</name><argument_list pos:line="524" pos:column="20">(<argument><expr><name pos:line="524" pos:column="21">inDrag</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="524" pos:column="29">
        <return pos:line="525" pos:column="9">return <expr><lit:literal type="boolean" pos:line="525" pos:column="16">false</lit:literal></expr>;</return></then></if>

    <decl_stmt><decl><type><name pos:line="527" pos:column="5">DragAttributes</name></type> <name pos:line="527" pos:column="20">attributes</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="528" pos:column="5">GetDragAttributes</name><argument_list pos:line="528" pos:column="22">( <argument><expr><name pos:line="528" pos:column="24">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="528" pos:column="32">&amp;</op:operator><name pos:line="528" pos:column="33">attributes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="530" pos:column="5">// only show the drag hilight if the drag has left the sender window per HI spec</comment>
    <if pos:line="531" pos:column="5">if<condition pos:line="531" pos:column="7">( <expr><name pos:line="531" pos:column="9">attributes</name> <op:operator pos:line="531" pos:column="20">&amp;</op:operator> <name pos:line="531" pos:column="22">kDragHasLeftSenderWindow</name></expr> )</condition><then pos:line="531" pos:column="48">
    <block pos:line="532" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="533" pos:column="9">HIRect</name></type>    <name pos:line="533" pos:column="19">textFrame</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="534" pos:column="9">RgnHandle</name></type>  <name pos:line="534" pos:column="20">hiliteRgn</name> <init pos:line="534" pos:column="30">= <expr><call><name pos:line="534" pos:column="32">NewRgn</name><argument_list pos:line="534" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="536" pos:column="9">// get the text view's frame ...</comment>
        <expr_stmt><expr><call><name pos:line="537" pos:column="9">HIViewGetFrame</name><argument_list pos:line="537" pos:column="23">( <argument><expr><call><name pos:line="537" pos:column="25">GetViewRef</name><argument_list pos:line="537" pos:column="35">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="537" pos:column="39">&amp;</op:operator><name pos:line="537" pos:column="40">textFrame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="539" pos:column="9">// ... and convert it into a region for ShowDragHilite</comment>
        <decl_stmt><decl><type><name pos:line="540" pos:column="9">HIShapeRef</name></type> <name pos:line="540" pos:column="20">textShape</name> <init pos:line="540" pos:column="30">= <expr><call><name pos:line="540" pos:column="32">HIShapeCreateWithRect</name><argument_list pos:line="540" pos:column="53">( <argument><expr><op:operator pos:line="540" pos:column="55">&amp;</op:operator><name pos:line="540" pos:column="56">textFrame</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="541" pos:column="9">HIShapeGetAsQDRgn</name><argument_list pos:line="541" pos:column="26">( <argument><expr><name pos:line="541" pos:column="28">textShape</name></expr></argument>, <argument><expr><name pos:line="541" pos:column="39">hiliteRgn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="542" pos:column="9">CFRelease</name><argument_list pos:line="542" pos:column="18">( <argument><expr><name pos:line="542" pos:column="20">textShape</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="544" pos:column="9">// add the drag hilight to the inside of the text view</comment>
        <expr_stmt><expr><call><name pos:line="545" pos:column="9">ShowDragHilite</name><argument_list pos:line="545" pos:column="23">( <argument><expr><name pos:line="545" pos:column="25">inDrag</name></expr></argument>, <argument><expr><name pos:line="545" pos:column="33">hiliteRgn</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="545" pos:column="44">true</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="547" pos:column="9">DisposeRgn</name><argument_list pos:line="547" pos:column="19">( <argument><expr><name pos:line="547" pos:column="21">hiliteRgn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="549" pos:column="5">SetDragCursor</name><argument_list pos:line="549" pos:column="18">(<argument><expr><name pos:line="549" pos:column="19">inDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="550" pos:column="5">return <expr><lit:literal type="boolean" pos:line="550" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name><name pos:line="553" pos:column="1">Scintilla</name><op:operator pos:line="553" pos:column="10">::</op:operator><name pos:line="553" pos:column="12">Point</name></name></type> <name><name pos:line="553" pos:column="18">ScintillaMacOSX</name><op:operator pos:line="553" pos:column="33">::</op:operator><name pos:line="553" pos:column="35">GetDragPoint</name></name><parameter_list pos:line="553" pos:column="47">(<param><decl><type><name pos:line="553" pos:column="48">DragRef</name></type> <name pos:line="553" pos:column="56">inDrag</name></decl></param>)</parameter_list>
<block pos:line="554" pos:column="1">{
    <decl_stmt><decl><type><name><op:operator pos:line="555" pos:column="5">::</op:operator><name pos:line="555" pos:column="7">Point</name></name></type> <name pos:line="555" pos:column="13">mouse</name></decl><op:operator pos:line="555" pos:column="18">,</op:operator> <decl><type ref="prev"/><name pos:line="555" pos:column="20">globalMouse</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="556" pos:column="5">GetDragMouse</name><argument_list pos:line="556" pos:column="17">(<argument><expr><name pos:line="556" pos:column="18">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="556" pos:column="26">&amp;</op:operator><name pos:line="556" pos:column="27">mouse</name></expr></argument>, <argument><expr><op:operator pos:line="556" pos:column="34">&amp;</op:operator><name pos:line="556" pos:column="35">globalMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="557" pos:column="5">HIPoint</name></type> <name pos:line="557" pos:column="13">hiPoint</name> <init pos:line="557" pos:column="21">= <expr><call><name pos:line="557" pos:column="23">GetLocalPoint</name> <argument_list pos:line="557" pos:column="37">(<argument><expr><name pos:line="557" pos:column="38">globalMouse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="558" pos:column="5">return <expr><call><name pos:line="558" pos:column="12">Point</name><argument_list pos:line="558" pos:column="17">(<argument><expr><call><name><name pos:line="558" pos:column="18">static_cast</name><argument_list pos:line="558" pos:column="29">&lt;<argument><expr><name pos:line="558" pos:column="30">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="558" pos:column="34">(<argument><expr><name><name pos:line="558" pos:column="35">hiPoint</name><op:operator pos:line="558" pos:column="42">.</op:operator><name pos:line="558" pos:column="43">x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="558" pos:column="47">static_cast</name><argument_list pos:line="558" pos:column="58">&lt;<argument><expr><name pos:line="558" pos:column="59">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="558" pos:column="63">(<argument><expr><name><name pos:line="558" pos:column="64">hiPoint</name><op:operator pos:line="558" pos:column="71">.</op:operator><name pos:line="558" pos:column="72">y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="562" pos:column="1">void</name></type> <name><name pos:line="562" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="562" pos:column="21">::</op:operator><name pos:line="562" pos:column="23">DragScroll</name></name><parameter_list pos:line="562" pos:column="33">()</parameter_list>
<block pos:line="563" pos:column="1">{
<cpp:define pos:line="564" pos:column="1">#<cpp:directive pos:line="564" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="564" pos:column="9">RESET_SCROLL_TIMER</name><parameter_list pos:line="564" pos:column="27">(<param><type><name pos:line="564" pos:column="28">lines</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value pos:line="565" pos:column="3">scrollSpeed = (lines); \
  scrollTicks = 2000;</cpp:value></cpp:define>

    <if pos:line="568" pos:column="5">if <condition pos:line="568" pos:column="8">(<expr><op:operator pos:line="568" pos:column="9">!</op:operator><call><name><name pos:line="568" pos:column="10">posDrag</name><op:operator pos:line="568" pos:column="17">.</op:operator><name pos:line="568" pos:column="18">IsValid</name></name><argument_list pos:line="568" pos:column="25">()</argument_list></call></expr>)</condition><then pos:line="568" pos:column="28"> <block pos:line="568" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="569" pos:column="9">RESET_SCROLL_TIMER</name><argument_list pos:line="569" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="569" pos:column="28">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="570" pos:column="9">return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name pos:line="572" pos:column="5">Point</name></type> <name pos:line="572" pos:column="11">dragMouse</name> <init pos:line="572" pos:column="21">= <expr><call><name pos:line="572" pos:column="23">LocationFromPosition</name><argument_list pos:line="572" pos:column="43">(<argument><expr><name pos:line="572" pos:column="44">posDrag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="573" pos:column="5">int</name></type> <name pos:line="573" pos:column="9">line</name> <init pos:line="573" pos:column="14">= <expr><call><name><name pos:line="573" pos:column="16">pdoc</name><op:operator pos:line="573" pos:column="20">-&gt;</op:operator><name pos:line="573" pos:column="22">LineFromPosition</name></name><argument_list pos:line="573" pos:column="38">(<argument><expr><call><name><name pos:line="573" pos:column="39">posDrag</name><op:operator pos:line="573" pos:column="46">.</op:operator><name pos:line="573" pos:column="47">Position</name></name><argument_list pos:line="573" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="574" pos:column="5">int</name></type> <name pos:line="574" pos:column="9">currentVisibleLine</name> <init pos:line="574" pos:column="28">= <expr><call><name><name pos:line="574" pos:column="30">cs</name><op:operator pos:line="574" pos:column="32">.</op:operator><name pos:line="574" pos:column="33">DisplayFromDoc</name></name><argument_list pos:line="574" pos:column="47">(<argument><expr><name pos:line="574" pos:column="48">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="575" pos:column="5">int</name></type> <name pos:line="575" pos:column="9">lastVisibleLine</name> <init pos:line="575" pos:column="25">= <expr><call><name><name pos:line="575" pos:column="27">Platform</name><op:operator pos:line="575" pos:column="35">::</op:operator><name pos:line="575" pos:column="37">Minimum</name></name><argument_list pos:line="575" pos:column="44">(<argument><expr><name pos:line="575" pos:column="45">topLine</name> <op:operator pos:line="575" pos:column="53">+</op:operator> <call><name pos:line="575" pos:column="55">LinesOnScreen</name><argument_list pos:line="575" pos:column="68">()</argument_list></call> <op:operator pos:line="575" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="575" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="575" pos:column="76">pdoc</name><op:operator pos:line="575" pos:column="80">-&gt;</op:operator><name pos:line="575" pos:column="82">LinesTotal</name></name><argument_list pos:line="575" pos:column="92">()</argument_list></call> <op:operator pos:line="575" pos:column="95">-</op:operator> <lit:literal type="number" pos:line="575" pos:column="97">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if pos:line="577" pos:column="5">if <condition pos:line="577" pos:column="8">(<expr><name pos:line="577" pos:column="9">currentVisibleLine</name> <op:operator pos:line="577" pos:column="28">&lt;=</op:operator> <name pos:line="577" pos:column="31">topLine</name> <op:operator pos:line="577" pos:column="39">&amp;&amp;</op:operator> <name pos:line="577" pos:column="42">topLine</name> <op:operator pos:line="577" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="577" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="577" pos:column="54"> <block pos:line="577" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="578" pos:column="9">ScrollTo</name><argument_list pos:line="578" pos:column="17">( <argument><expr><name pos:line="578" pos:column="19">topLine</name> <op:operator pos:line="578" pos:column="27">-</op:operator> <name pos:line="578" pos:column="29">scrollSpeed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="579" pos:column="7">else <if pos:line="579" pos:column="12">if <condition pos:line="579" pos:column="15">(<expr><name pos:line="579" pos:column="16">currentVisibleLine</name> <op:operator pos:line="579" pos:column="35">&gt;=</op:operator> <name pos:line="579" pos:column="38">lastVisibleLine</name></expr>)</condition><then pos:line="579" pos:column="54"> <block pos:line="579" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="580" pos:column="9">ScrollTo</name><argument_list pos:line="580" pos:column="17">( <argument><expr><name pos:line="580" pos:column="19">topLine</name> <op:operator pos:line="580" pos:column="27">+</op:operator> <name pos:line="580" pos:column="29">scrollSpeed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="581" pos:column="7">else <block pos:line="581" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="582" pos:column="9">RESET_SCROLL_TIMER</name><argument_list pos:line="582" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="582" pos:column="28">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="583" pos:column="9">return;</return>
    }</block></else></if></else></if>
    <if pos:line="585" pos:column="5">if <condition pos:line="585" pos:column="8">(<expr><name pos:line="585" pos:column="9">scrollSpeed</name> <op:operator pos:line="585" pos:column="21">==</op:operator> <lit:literal type="number" pos:line="585" pos:column="24">1</lit:literal></expr>)</condition><then pos:line="585" pos:column="26"> <block pos:line="585" pos:column="27">{
        <expr_stmt><expr><name pos:line="586" pos:column="9">scrollTicks</name> <op:operator pos:line="586" pos:column="21">-=</op:operator> <name><name pos:line="586" pos:column="24">timer</name><op:operator pos:line="586" pos:column="29">.</op:operator><name pos:line="586" pos:column="30">tickSize</name></name></expr>;</expr_stmt>
        <if pos:line="587" pos:column="9">if <condition pos:line="587" pos:column="12">(<expr><name pos:line="587" pos:column="13">scrollTicks</name> <op:operator pos:line="587" pos:column="25">&lt;=</op:operator> <lit:literal type="number" pos:line="587" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="587" pos:column="30"> <block pos:line="587" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="588" pos:column="13">RESET_SCROLL_TIMER</name><argument_list pos:line="588" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="588" pos:column="32">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name pos:line="592" pos:column="5">SetDragPosition</name><argument_list pos:line="592" pos:column="20">(<argument><expr><call><name pos:line="592" pos:column="21">SPositionFromLocation</name><argument_list pos:line="592" pos:column="42">(<argument><expr><name pos:line="592" pos:column="43">dragMouse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef pos:line="594" pos:column="1">#<cpp:directive pos:line="594" pos:column="2">undef</cpp:directive> <name pos:line="594" pos:column="8">RESET_SCROLL_TIMER</name></cpp:undef>
}</block></function>

<function><type><name pos:line="597" pos:column="1">bool</name></type> <name><name pos:line="597" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="597" pos:column="21">::</op:operator><name pos:line="597" pos:column="23">DragWithin</name></name><parameter_list pos:line="597" pos:column="33">(<param><decl><type><name pos:line="597" pos:column="34">DragRef</name></type> <name pos:line="597" pos:column="42">inDrag</name></decl></param> )</parameter_list>
<block pos:line="598" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="599" pos:column="5">PasteboardRef</name></type> <name pos:line="599" pos:column="19">pasteBoard</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="600" pos:column="5">bool</name></type> <name pos:line="600" pos:column="10">isFileURL</name> <init pos:line="600" pos:column="20">= <expr><lit:literal type="boolean" pos:line="600" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="601" pos:column="5">if <condition pos:line="601" pos:column="8">(<expr><op:operator pos:line="601" pos:column="9">!</op:operator><call><name pos:line="601" pos:column="10">GetDragData</name><argument_list pos:line="601" pos:column="21">(<argument><expr><name pos:line="601" pos:column="22">inDrag</name></expr></argument>, <argument><expr><name pos:line="601" pos:column="30">pasteBoard</name></expr></argument>, <argument><expr><name pos:line="601" pos:column="42">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="601" pos:column="48">&amp;</op:operator><name pos:line="601" pos:column="49">isFileURL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="601" pos:column="60"> <block pos:line="601" pos:column="61">{
        <return pos:line="602" pos:column="9">return <expr><lit:literal type="boolean" pos:line="602" pos:column="16">false</lit:literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name pos:line="605" pos:column="5">Point</name></type> <name pos:line="605" pos:column="11">pt</name> <init pos:line="605" pos:column="14">= <expr><call><name pos:line="605" pos:column="16">GetDragPoint</name> <argument_list pos:line="605" pos:column="29">(<argument><expr><name pos:line="605" pos:column="30">inDrag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="606" pos:column="5">SetDragPosition</name><argument_list pos:line="606" pos:column="20">(<argument><expr><call><name pos:line="606" pos:column="21">SPositionFromLocation</name><argument_list pos:line="606" pos:column="42">(<argument><expr><name pos:line="606" pos:column="43">pt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="607" pos:column="5">SetDragCursor</name><argument_list pos:line="607" pos:column="18">(<argument><expr><name pos:line="607" pos:column="19">inDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:line="609" pos:column="5">return <expr><lit:literal type="boolean" pos:line="609" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="612" pos:column="1">bool</name></type> <name><name pos:line="612" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="612" pos:column="21">::</op:operator><name pos:line="612" pos:column="23">DragLeave</name></name><parameter_list pos:line="612" pos:column="32">(<param><decl><type><name pos:line="612" pos:column="33">DragRef</name></type> <name pos:line="612" pos:column="41">inDrag</name></decl></param> )</parameter_list>
<block pos:line="613" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="614" pos:column="5">HideDragHilite</name><argument_list pos:line="614" pos:column="19">( <argument><expr><name pos:line="614" pos:column="21">inDrag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="615" pos:column="5">SetDragPosition</name><argument_list pos:line="615" pos:column="20">(<argument><expr><call><name pos:line="615" pos:column="21">SelectionPosition</name><argument_list pos:line="615" pos:column="38">(<argument><expr><name pos:line="615" pos:column="39">invalidPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="616" pos:column="5">WndProc</name><argument_list pos:line="616" pos:column="12">(<argument><expr><name pos:line="616" pos:column="13">SCI_SETCURSOR</name></expr></argument>, <argument><expr><name><name pos:line="616" pos:column="28">Window</name><op:operator pos:line="616" pos:column="34">::</op:operator><name pos:line="616" pos:column="36">cursorArrow</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="616" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="617" pos:column="5">return <expr><lit:literal type="boolean" pos:line="617" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<enum pos:line="620" pos:column="1">enum
<block pos:line="621" pos:column="1">{
    <decl><name pos:line="622" pos:column="5">kFormatBad</name></decl><op:operator pos:line="622" pos:column="15">,</op:operator>
    <decl><name pos:line="623" pos:column="5">kFormatText</name></decl><op:operator pos:line="623" pos:column="16">,</op:operator>
    <decl><name pos:line="624" pos:column="5">kFormatUnicode</name></decl><op:operator pos:line="624" pos:column="19">,</op:operator>
    <decl><name pos:line="625" pos:column="5">kFormatUTF8</name></decl><op:operator pos:line="625" pos:column="16">,</op:operator>
    <decl><name pos:line="626" pos:column="5">kFormatFile</name></decl>
}</block>;</enum>

<function><type><name pos:line="629" pos:column="1">bool</name></type> <name><name pos:line="629" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="629" pos:column="21">::</op:operator><name pos:line="629" pos:column="23">GetDragData</name></name><parameter_list pos:line="629" pos:column="34">(<param><decl><type><name pos:line="629" pos:column="35">DragRef</name></type> <name pos:line="629" pos:column="43">inDrag</name></decl></param>, <param><decl><type><name pos:line="629" pos:column="51">PasteboardRef</name> <type:modifier pos:line="629" pos:column="65">&amp;</type:modifier></type><name pos:line="629" pos:column="66">pasteBoard</name></decl></param>,
                                  <param><decl><type><name pos:line="630" pos:column="35">SelectionText</name> <type:modifier pos:line="630" pos:column="49">*</type:modifier></type><name pos:line="630" pos:column="50">selectedText</name></decl></param>, <param><decl><type><name pos:line="630" pos:column="64">bool</name> <type:modifier pos:line="630" pos:column="69">*</type:modifier></type><name pos:line="630" pos:column="70">isFileURL</name></decl></param>)</parameter_list>
<block pos:line="631" pos:column="1">{
  <comment type="line" pos:line="632" pos:column="3">// TODO: add support for special flavors: flavorTypeHFS and flavorTypePromiseHFS so we</comment>
  <comment type="line" pos:line="633" pos:column="3">//       can handle files being dropped on the editor</comment>
    <decl_stmt><decl><type><name pos:line="634" pos:column="5">OSStatus</name></type> <name pos:line="634" pos:column="14">status</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="635" pos:column="5">status</name> <op:operator pos:line="635" pos:column="12">=</op:operator> <call><name pos:line="635" pos:column="14">GetDragPasteboard</name><argument_list pos:line="635" pos:column="31">(<argument><expr><name pos:line="635" pos:column="32">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="635" pos:column="40">&amp;</op:operator><name pos:line="635" pos:column="41">pasteBoard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="636" pos:column="5">if <condition pos:line="636" pos:column="8">(<expr><name pos:line="636" pos:column="9">status</name> <op:operator pos:line="636" pos:column="16">!=</op:operator> <name pos:line="636" pos:column="19">noErr</name></expr>)</condition><then pos:line="636" pos:column="25"> <block pos:line="636" pos:column="26">{
        <return pos:line="637" pos:column="9">return <expr><lit:literal type="boolean" pos:line="637" pos:column="16">false</lit:literal></expr>;</return>
    }</block></then></if>
    <return pos:line="639" pos:column="5">return <expr><call><name pos:line="639" pos:column="12">GetPasteboardData</name><argument_list pos:line="639" pos:column="29">(<argument><expr><name pos:line="639" pos:column="30">pasteBoard</name></expr></argument>, <argument><expr><name pos:line="639" pos:column="42">selectedText</name></expr></argument>, <argument><expr><name pos:line="639" pos:column="56">isFileURL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="642" pos:column="1">void</name></type> <name><name pos:line="642" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="642" pos:column="21">::</op:operator><name pos:line="642" pos:column="23">SetPasteboardData</name></name><parameter_list pos:line="642" pos:column="40">(<param><decl><type><name pos:line="642" pos:column="41">PasteboardRef</name> <type:modifier pos:line="642" pos:column="55">&amp;</type:modifier></type><name pos:line="642" pos:column="56">theClipboard</name></decl></param>, <param><decl><type><specifier pos:line="642" pos:column="70">const</specifier> <name pos:line="642" pos:column="76">SelectionText</name> <type:modifier pos:line="642" pos:column="90">&amp;</type:modifier></type><name pos:line="642" pos:column="91">selectedText</name></decl></param>, <param><decl><type><name pos:line="642" pos:column="105">bool</name></type> <name pos:line="642" pos:column="110">inDragDropSession</name></decl></param>)</parameter_list>
<block pos:line="643" pos:column="1">{
    <if pos:line="644" pos:column="5">if <condition pos:line="644" pos:column="8">(<expr><name><name pos:line="644" pos:column="9">selectedText</name><op:operator pos:line="644" pos:column="21">.</op:operator><name pos:line="644" pos:column="22">len</name></name> <op:operator pos:line="644" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="644" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="644" pos:column="31">
        <return pos:line="645" pos:column="9">return;</return></then></if>

    <decl_stmt><decl><type><name pos:line="647" pos:column="5">CFStringEncoding</name></type> <name pos:line="647" pos:column="22">encoding</name> <init pos:line="647" pos:column="31">= <expr><op:operator pos:line="647" pos:column="33">(</op:operator> <call><name pos:line="647" pos:column="35">IsUnicodeMode</name><argument_list pos:line="647" pos:column="48">()</argument_list></call> <op:operator pos:line="647" pos:column="51">?</op:operator> <name pos:line="647" pos:column="53">kCFStringEncodingUTF8</name> <op:operator pos:line="647" pos:column="75">:</op:operator> <name pos:line="647" pos:column="77">kCFStringEncodingMacRoman</name><op:operator pos:line="647" pos:column="102">)</op:operator></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="649" pos:column="5">// Create a CFString from the ASCII/UTF8 data, convert it to UTF16</comment>
    <decl_stmt><decl><type><name pos:line="650" pos:column="5">CFStringRef</name></type> <name pos:line="650" pos:column="17">string</name> <init pos:line="650" pos:column="24">= <expr><call><name pos:line="650" pos:column="26">CFStringCreateWithBytes</name><argument_list pos:line="650" pos:column="49">( <argument><expr><name pos:line="650" pos:column="51">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="650" pos:column="57">reinterpret_cast</name><argument_list pos:line="650" pos:column="73">&lt;<argument><expr><name pos:line="650" pos:column="74">UInt8</name><op:operator pos:line="650" pos:column="79">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="650" pos:column="81">( <argument><expr><name><name pos:line="650" pos:column="83">selectedText</name><op:operator pos:line="650" pos:column="95">.</op:operator><name pos:line="650" pos:column="96">s</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="650" pos:column="101">selectedText</name><op:operator pos:line="650" pos:column="113">.</op:operator><name pos:line="650" pos:column="114">len</name></name> <op:operator pos:line="650" pos:column="118">-</op:operator> <lit:literal type="number" pos:line="650" pos:column="120">1</lit:literal></expr></argument>, <argument><expr><name pos:line="650" pos:column="123">encoding</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="650" pos:column="133">false</lit:literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name pos:line="652" pos:column="5">PasteboardCreate</name><argument_list pos:line="652" pos:column="21">(<argument><expr><op:operator pos:line="652" pos:column="22">(</op:operator><name pos:line="652" pos:column="23">inDragDropSession</name>
                      <op:operator pos:line="653" pos:column="23">?</op:operator> <name pos:line="653" pos:column="25">kPasteboardUniqueName</name>
                      <op:operator pos:line="654" pos:column="23">:</op:operator> <name pos:line="654" pos:column="25">kPasteboardClipboard</name><op:operator pos:line="654" pos:column="45">)</op:operator></expr></argument>, <argument><expr><op:operator pos:line="654" pos:column="48">&amp;</op:operator><name pos:line="654" pos:column="49">theClipboard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="655" pos:column="5">PasteboardClear</name><argument_list pos:line="655" pos:column="20">( <argument><expr><name pos:line="655" pos:column="22">theClipboard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="657" pos:column="5">CFDataRef</name></type> <name pos:line="657" pos:column="15">data</name> <init pos:line="657" pos:column="20">= <expr><name pos:line="657" pos:column="22">NULL</name></expr></init></decl>;</decl_stmt>
    <if pos:line="658" pos:column="5">if <condition pos:line="658" pos:column="8">(<expr><name><name pos:line="658" pos:column="9">selectedText</name><op:operator pos:line="658" pos:column="21">.</op:operator><name pos:line="658" pos:column="22">rectangular</name></name></expr>)</condition><then pos:line="658" pos:column="34"> <block pos:line="658" pos:column="35">{
        <comment type="line" pos:line="659" pos:column="9">// This is specific to scintilla, allows us to drag rectangular selections</comment>
        <comment type="line" pos:line="660" pos:column="9">// around the document</comment>
        <expr_stmt><expr><name pos:line="661" pos:column="9">data</name> <op:operator pos:line="661" pos:column="14">=</op:operator> <call><name pos:line="661" pos:column="16">CFStringCreateExternalRepresentation</name> <argument_list pos:line="661" pos:column="53">( <argument><expr><name pos:line="661" pos:column="55">kCFAllocatorDefault</name></expr></argument>, <argument><expr><name pos:line="661" pos:column="76">string</name></expr></argument>, <argument><expr><name pos:line="661" pos:column="84">kCFStringEncodingUnicode</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="661" pos:column="110">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if pos:line="662" pos:column="9">if <condition pos:line="662" pos:column="12">(<expr><name pos:line="662" pos:column="13">data</name></expr>)</condition><then pos:line="662" pos:column="18"> <block pos:line="662" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="663" pos:column="13">PasteboardPutItemFlavor</name><argument_list pos:line="663" pos:column="36">( <argument><expr><name pos:line="663" pos:column="38">theClipboard</name></expr></argument>, <argument><expr><op:operator pos:line="663" pos:column="52">(</op:operator><name pos:line="663" pos:column="53">PasteboardItemID</name><op:operator pos:line="663" pos:column="69">)</op:operator><lit:literal type="number" pos:line="663" pos:column="70">1</lit:literal></expr></argument>,
                              <argument><expr><call><name pos:line="664" pos:column="31">CFSTR</name><argument_list pos:line="664" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="664" pos:column="37">"com.scintilla.utf16-plain-text.rectangular"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name pos:line="665" pos:column="31">data</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="665" pos:column="37">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="666" pos:column="13">CFRelease</name><argument_list pos:line="666" pos:column="22">(<argument><expr><name pos:line="666" pos:column="23">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="669" pos:column="5">data</name> <op:operator pos:line="669" pos:column="10">=</op:operator> <call><name pos:line="669" pos:column="12">CFStringCreateExternalRepresentation</name> <argument_list pos:line="669" pos:column="49">( <argument><expr><name pos:line="669" pos:column="51">kCFAllocatorDefault</name></expr></argument>, <argument><expr><name pos:line="669" pos:column="72">string</name></expr></argument>, <argument><expr><name pos:line="669" pos:column="80">kCFStringEncodingUnicode</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="669" pos:column="106">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if pos:line="670" pos:column="5">if <condition pos:line="670" pos:column="8">(<expr><name pos:line="670" pos:column="9">data</name></expr>)</condition><then pos:line="670" pos:column="14"> <block pos:line="670" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="671" pos:column="9">PasteboardPutItemFlavor</name><argument_list pos:line="671" pos:column="32">( <argument><expr><name pos:line="671" pos:column="34">theClipboard</name></expr></argument>, <argument><expr><op:operator pos:line="671" pos:column="48">(</op:operator><name pos:line="671" pos:column="49">PasteboardItemID</name><op:operator pos:line="671" pos:column="65">)</op:operator><lit:literal type="number" pos:line="671" pos:column="66">1</lit:literal></expr></argument>,
                                <argument><expr><call><name pos:line="672" pos:column="33">CFSTR</name><argument_list pos:line="672" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="672" pos:column="39">"public.utf16-plain-text"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name pos:line="673" pos:column="33">data</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="673" pos:column="39">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="674" pos:column="9">CFRelease</name><argument_list pos:line="674" pos:column="18">(<argument><expr><name pos:line="674" pos:column="19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="675" pos:column="9">data</name> <op:operator pos:line="675" pos:column="14">=</op:operator> <name pos:line="675" pos:column="16">NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="677" pos:column="5">data</name> <op:operator pos:line="677" pos:column="10">=</op:operator> <call><name pos:line="677" pos:column="12">CFStringCreateExternalRepresentation</name> <argument_list pos:line="677" pos:column="49">( <argument><expr><name pos:line="677" pos:column="51">kCFAllocatorDefault</name></expr></argument>, <argument><expr><name pos:line="677" pos:column="72">string</name></expr></argument>, <argument><expr><name pos:line="677" pos:column="80">kCFStringEncodingMacRoman</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="677" pos:column="107">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if pos:line="678" pos:column="5">if <condition pos:line="678" pos:column="8">(<expr><name pos:line="678" pos:column="9">data</name></expr>)</condition><then pos:line="678" pos:column="14"> <block pos:line="678" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="679" pos:column="9">PasteboardPutItemFlavor</name><argument_list pos:line="679" pos:column="32">( <argument><expr><name pos:line="679" pos:column="34">theClipboard</name></expr></argument>, <argument><expr><op:operator pos:line="679" pos:column="48">(</op:operator><name pos:line="679" pos:column="49">PasteboardItemID</name><op:operator pos:line="679" pos:column="65">)</op:operator><lit:literal type="number" pos:line="679" pos:column="66">1</lit:literal></expr></argument>,
                                <argument><expr><call><name pos:line="680" pos:column="33">CFSTR</name><argument_list pos:line="680" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="680" pos:column="39">"com.apple.traditional-mac-plain-text"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name pos:line="681" pos:column="33">data</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="681" pos:column="39">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="682" pos:column="9">CFRelease</name><argument_list pos:line="682" pos:column="18">(<argument><expr><name pos:line="682" pos:column="19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="683" pos:column="9">data</name> <op:operator pos:line="683" pos:column="14">=</op:operator> <name pos:line="683" pos:column="16">NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="685" pos:column="5">CFRelease</name><argument_list pos:line="685" pos:column="14">(<argument><expr><name pos:line="685" pos:column="15">string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="688" pos:column="1">bool</name></type> <name><name pos:line="688" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="688" pos:column="21">::</op:operator><name pos:line="688" pos:column="23">GetPasteboardData</name></name><parameter_list pos:line="688" pos:column="40">(<param><decl><type><name pos:line="688" pos:column="41">PasteboardRef</name> <type:modifier pos:line="688" pos:column="55">&amp;</type:modifier></type><name pos:line="688" pos:column="56">pasteBoard</name></decl></param>,
                                        <param><decl><type><name pos:line="689" pos:column="41">SelectionText</name> <type:modifier pos:line="689" pos:column="55">*</type:modifier></type><name pos:line="689" pos:column="56">selectedText</name></decl></param>,
                                        <param><decl><type><name pos:line="690" pos:column="41">bool</name> <type:modifier pos:line="690" pos:column="46">*</type:modifier></type><name pos:line="690" pos:column="47">isFileURL</name></decl></param>)</parameter_list>
<block pos:line="691" pos:column="1">{
    <comment type="line" pos:line="692" pos:column="5">// how many items in the pasteboard?</comment>
    <decl_stmt><decl><type><name pos:line="693" pos:column="5">CFDataRef</name></type> <name pos:line="693" pos:column="15">data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="694" pos:column="5">CFStringRef</name></type> <name pos:line="694" pos:column="17">textString</name> <init pos:line="694" pos:column="28">= <expr><name pos:line="694" pos:column="30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="695" pos:column="5">bool</name></type> <name pos:line="695" pos:column="10">isRectangular</name> <init pos:line="695" pos:column="24">= <expr><name pos:line="695" pos:column="26">selectedText</name> <op:operator pos:line="695" pos:column="39">?</op:operator> <name><name pos:line="695" pos:column="41">selectedText</name><op:operator pos:line="695" pos:column="53">-&gt;</op:operator><name pos:line="695" pos:column="55">rectangular</name></name> <op:operator pos:line="695" pos:column="67">:</op:operator> <lit:literal type="boolean" pos:line="695" pos:column="69">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="696" pos:column="5">ItemCount</name></type> <name pos:line="696" pos:column="15">i</name></decl><op:operator pos:line="696" pos:column="16">,</op:operator> <decl><type ref="prev"/><name pos:line="696" pos:column="18">itemCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="697" pos:column="5">OSStatus</name></type> <name pos:line="697" pos:column="14">status</name> <init pos:line="697" pos:column="21">= <expr><call><name pos:line="697" pos:column="23">PasteboardGetItemCount</name><argument_list pos:line="697" pos:column="45">(<argument><expr><name pos:line="697" pos:column="46">pasteBoard</name></expr></argument>, <argument><expr><op:operator pos:line="697" pos:column="58">&amp;</op:operator><name pos:line="697" pos:column="59">itemCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="698" pos:column="5">if <condition pos:line="698" pos:column="8">(<expr><name pos:line="698" pos:column="9">status</name> <op:operator pos:line="698" pos:column="16">!=</op:operator> <name pos:line="698" pos:column="19">noErr</name></expr>)</condition><then pos:line="698" pos:column="25"> <block pos:line="698" pos:column="26">{
        <return pos:line="699" pos:column="9">return <expr><lit:literal type="boolean" pos:line="699" pos:column="16">false</lit:literal></expr>;</return>
    }</block></then></if>

    <comment type="line" pos:line="702" pos:column="5">// as long as we didn't get our text, let's loop on the items. We stop as soon as we get it</comment>
    <decl_stmt><decl><type><name pos:line="703" pos:column="5">CFArrayRef</name></type> <name pos:line="703" pos:column="16">flavorTypeArray</name> <init pos:line="703" pos:column="32">= <expr><name pos:line="703" pos:column="34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="704" pos:column="5">bool</name></type> <name pos:line="704" pos:column="10">haveMatch</name> <init pos:line="704" pos:column="20">= <expr><lit:literal type="boolean" pos:line="704" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="705" pos:column="5">for (<init><expr><name pos:line="705" pos:column="10">i</name> <op:operator pos:line="705" pos:column="12">=</op:operator> <lit:literal type="number" pos:line="705" pos:column="14">1</lit:literal></expr>;</init> <condition><expr><name pos:line="705" pos:column="17">i</name> <op:operator pos:line="705" pos:column="19">&lt;=</op:operator> <name pos:line="705" pos:column="22">itemCount</name></expr>;</condition> <incr><expr><name pos:line="705" pos:column="33">i</name><op:operator pos:line="705" pos:column="34">++</op:operator></expr></incr>)
    <block pos:line="706" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="707" pos:column="9">PasteboardItemID</name></type> <name pos:line="707" pos:column="26">itemID</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="708" pos:column="9">CFIndex</name></type> <name pos:line="708" pos:column="17">j</name></decl><op:operator pos:line="708" pos:column="18">,</op:operator> <decl><type ref="prev"/><name pos:line="708" pos:column="20">flavorCount</name> <init pos:line="708" pos:column="32">= <expr><lit:literal type="number" pos:line="708" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name pos:line="710" pos:column="9">status</name> <op:operator pos:line="710" pos:column="16">=</op:operator> <call><name pos:line="710" pos:column="18">PasteboardGetItemIdentifier</name><argument_list pos:line="710" pos:column="45">(<argument><expr><name pos:line="710" pos:column="46">pasteBoard</name></expr></argument>, <argument><expr><name pos:line="710" pos:column="58">i</name></expr></argument>, <argument><expr><op:operator pos:line="710" pos:column="61">&amp;</op:operator><name pos:line="710" pos:column="62">itemID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="711" pos:column="9">if <condition pos:line="711" pos:column="12">(<expr><name pos:line="711" pos:column="13">status</name> <op:operator pos:line="711" pos:column="20">!=</op:operator> <name pos:line="711" pos:column="23">noErr</name></expr>)</condition><then pos:line="711" pos:column="29"> <block pos:line="711" pos:column="30">{
            <return pos:line="712" pos:column="13">return <expr><lit:literal type="boolean" pos:line="712" pos:column="20">false</lit:literal></expr>;</return>
        }</block></then></if>

        <comment type="line" pos:line="715" pos:column="9">// how many flavors in this item?</comment>
        <expr_stmt><expr><name pos:line="716" pos:column="9">status</name> <op:operator pos:line="716" pos:column="16">=</op:operator> <call><name pos:line="716" pos:column="18">PasteboardCopyItemFlavors</name><argument_list pos:line="716" pos:column="43">(<argument><expr><name pos:line="716" pos:column="44">pasteBoard</name></expr></argument>, <argument><expr><name pos:line="716" pos:column="56">itemID</name></expr></argument>, <argument><expr><op:operator pos:line="716" pos:column="64">&amp;</op:operator><name pos:line="716" pos:column="65">flavorTypeArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="717" pos:column="9">if <condition pos:line="717" pos:column="12">(<expr><name pos:line="717" pos:column="13">status</name> <op:operator pos:line="717" pos:column="20">!=</op:operator> <name pos:line="717" pos:column="23">noErr</name></expr>)</condition><then pos:line="717" pos:column="29"> <block pos:line="717" pos:column="30">{
            <return pos:line="718" pos:column="13">return <expr><lit:literal type="boolean" pos:line="718" pos:column="20">false</lit:literal></expr>;</return>
        }</block></then></if>

        <if pos:line="721" pos:column="9">if <condition pos:line="721" pos:column="12">(<expr><name pos:line="721" pos:column="13">flavorTypeArray</name> <op:operator pos:line="721" pos:column="29">!=</op:operator> <name pos:line="721" pos:column="32">NULL</name></expr>)</condition><then pos:line="721" pos:column="37">
            <expr_stmt><expr><name pos:line="722" pos:column="13">flavorCount</name> <op:operator pos:line="722" pos:column="25">=</op:operator> <call><name pos:line="722" pos:column="27">CFArrayGetCount</name><argument_list pos:line="722" pos:column="42">(<argument><expr><name pos:line="722" pos:column="43">flavorTypeArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="line" pos:line="724" pos:column="9">// as long as we didn't get our text, let's loop on the flavors. We stop as soon as we get it</comment>
        <for pos:line="725" pos:column="9">for(<init><expr><name pos:line="725" pos:column="13">j</name> <op:operator pos:line="725" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="725" pos:column="17">0</lit:literal></expr>;</init> <condition><expr><name pos:line="725" pos:column="20">j</name> <op:operator pos:line="725" pos:column="22">&lt;</op:operator> <name pos:line="725" pos:column="24">flavorCount</name></expr>;</condition> <incr><expr><name pos:line="725" pos:column="37">j</name><op:operator pos:line="725" pos:column="38">++</op:operator></expr></incr>)
        <block pos:line="726" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="727" pos:column="13">CFDataRef</name></type> <name pos:line="727" pos:column="23">flavorData</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="728" pos:column="13">CFStringRef</name></type> <name pos:line="728" pos:column="25">flavorType</name> <init pos:line="728" pos:column="36">= <expr><op:operator pos:line="728" pos:column="38">(</op:operator><name pos:line="728" pos:column="39">CFStringRef</name><op:operator pos:line="728" pos:column="50">)</op:operator><call><name pos:line="728" pos:column="51">CFArrayGetValueAtIndex</name><argument_list pos:line="728" pos:column="73">(<argument><expr><name pos:line="728" pos:column="74">flavorTypeArray</name></expr></argument>, <argument><expr><name pos:line="728" pos:column="91">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="729" pos:column="13">if <condition pos:line="729" pos:column="16">(<expr><name pos:line="729" pos:column="17">flavorType</name> <op:operator pos:line="729" pos:column="28">!=</op:operator> <name pos:line="729" pos:column="31">NULL</name></expr>)</condition><then pos:line="729" pos:column="36">
            <block pos:line="730" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="731" pos:column="17">int</name></type> <name pos:line="731" pos:column="21">format</name> <init pos:line="731" pos:column="28">= <expr><name pos:line="731" pos:column="30">kFormatBad</name></expr></init></decl>;</decl_stmt>
                <if pos:line="732" pos:column="17">if <condition pos:line="732" pos:column="20">(<expr><call><name pos:line="732" pos:column="21">UTTypeConformsTo</name><argument_list pos:line="732" pos:column="37">(<argument><expr><name pos:line="732" pos:column="38">flavorType</name></expr></argument>, <argument><expr><call><name pos:line="732" pos:column="50">CFSTR</name><argument_list pos:line="732" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="732" pos:column="56">"public.file-url"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="732" pos:column="76"> <block pos:line="732" pos:column="77">{
                    <expr_stmt><expr><name pos:line="733" pos:column="21">format</name> <op:operator pos:line="733" pos:column="28">=</op:operator> <name pos:line="733" pos:column="30">kFormatFile</name></expr>;</expr_stmt>
                    <expr_stmt><expr><op:operator pos:line="734" pos:column="21">*</op:operator><name pos:line="734" pos:column="22">isFileURL</name> <op:operator pos:line="734" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="734" pos:column="34">true</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="736" pos:column="17">else <if pos:line="736" pos:column="22">if <condition pos:line="736" pos:column="25">(<expr><call><name pos:line="736" pos:column="26">UTTypeConformsTo</name><argument_list pos:line="736" pos:column="42">(<argument><expr><name pos:line="736" pos:column="43">flavorType</name></expr></argument>, <argument><expr><call><name pos:line="736" pos:column="55">CFSTR</name><argument_list pos:line="736" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="736" pos:column="61">"com.scintilla.utf16-plain-text.rectangular"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="736" pos:column="108"> <block pos:line="736" pos:column="109">{
                    <expr_stmt><expr><name pos:line="737" pos:column="21">format</name> <op:operator pos:line="737" pos:column="28">=</op:operator> <name pos:line="737" pos:column="30">kFormatUnicode</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="738" pos:column="21">isRectangular</name> <op:operator pos:line="738" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="738" pos:column="37">true</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="740" pos:column="17">else <if pos:line="740" pos:column="22">if <condition pos:line="740" pos:column="25">(<expr><call><name pos:line="740" pos:column="26">UTTypeConformsTo</name><argument_list pos:line="740" pos:column="42">(<argument><expr><name pos:line="740" pos:column="43">flavorType</name></expr></argument>, <argument><expr><call><name pos:line="740" pos:column="55">CFSTR</name><argument_list pos:line="740" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="740" pos:column="61">"public.utf16-plain-text"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="740" pos:column="89"> <block pos:line="740" pos:column="90">{ <comment type="line" pos:line="740" pos:column="92">// this is 'utxt'</comment>
                    <expr_stmt><expr><name pos:line="741" pos:column="21">format</name> <op:operator pos:line="741" pos:column="28">=</op:operator> <name pos:line="741" pos:column="30">kFormatUnicode</name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="743" pos:column="17">else <if pos:line="743" pos:column="22">if <condition pos:line="743" pos:column="25">(<expr><call><name pos:line="743" pos:column="26">UTTypeConformsTo</name><argument_list pos:line="743" pos:column="42">(<argument><expr><name pos:line="743" pos:column="43">flavorType</name></expr></argument>, <argument><expr><call><name pos:line="743" pos:column="55">CFSTR</name><argument_list pos:line="743" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="743" pos:column="61">"public.utf8-plain-text"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="743" pos:column="88"> <block pos:line="743" pos:column="89">{
                    <expr_stmt><expr><name pos:line="744" pos:column="21">format</name> <op:operator pos:line="744" pos:column="28">=</op:operator> <name pos:line="744" pos:column="30">kFormatUTF8</name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="746" pos:column="17">else <if pos:line="746" pos:column="22">if <condition pos:line="746" pos:column="25">(<expr><call><name pos:line="746" pos:column="26">UTTypeConformsTo</name><argument_list pos:line="746" pos:column="42">(<argument><expr><name pos:line="746" pos:column="43">flavorType</name></expr></argument>, <argument><expr><call><name pos:line="746" pos:column="55">CFSTR</name><argument_list pos:line="746" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="746" pos:column="61">"com.apple.traditional-mac-plain-text"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="746" pos:column="102"> <block pos:line="746" pos:column="103">{ <comment type="line" pos:line="746" pos:column="105">// this is 'TEXT'</comment>
                    <expr_stmt><expr><name pos:line="747" pos:column="21">format</name> <op:operator pos:line="747" pos:column="28">=</op:operator> <name pos:line="747" pos:column="30">kFormatText</name></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if></else></if></else></if>
                <if pos:line="749" pos:column="17">if <condition pos:line="749" pos:column="20">(<expr><name pos:line="749" pos:column="21">format</name> <op:operator pos:line="749" pos:column="28">==</op:operator> <name pos:line="749" pos:column="31">kFormatBad</name></expr>)</condition><then pos:line="749" pos:column="42">
                    <continue pos:line="750" pos:column="21">continue;</continue></then></if>

                <comment type="line" pos:line="752" pos:column="17">// if we got a flavor match, and we have no textString, we just want</comment>
                <comment type="line" pos:line="753" pos:column="17">// to know that we can accept this data, so jump out now</comment>
                <if pos:line="754" pos:column="17">if <condition pos:line="754" pos:column="20">(<expr><name pos:line="754" pos:column="21">selectedText</name> <op:operator pos:line="754" pos:column="34">==</op:operator> <name pos:line="754" pos:column="37">NULL</name></expr>)</condition><then pos:line="754" pos:column="42"> <block pos:line="754" pos:column="43">{
                    <expr_stmt><expr><name pos:line="755" pos:column="21">haveMatch</name> <op:operator pos:line="755" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="755" pos:column="33">true</lit:literal></expr>;</expr_stmt>
                    <goto pos:line="756" pos:column="21">goto <name pos:line="756" pos:column="26">PasteboardDataRetrieved</name>;</goto>
                }</block></then></if>
                <if pos:line="758" pos:column="17">if <condition pos:line="758" pos:column="20">(<expr><call><name pos:line="758" pos:column="21">PasteboardCopyItemFlavorData</name><argument_list pos:line="758" pos:column="49">(<argument><expr><name pos:line="758" pos:column="50">pasteBoard</name></expr></argument>, <argument><expr><name pos:line="758" pos:column="62">itemID</name></expr></argument>, <argument><expr><name pos:line="758" pos:column="70">flavorType</name></expr></argument>, <argument><expr><op:operator pos:line="758" pos:column="82">&amp;</op:operator><name pos:line="758" pos:column="83">flavorData</name></expr></argument>)</argument_list></call> <op:operator pos:line="758" pos:column="95">==</op:operator> <name pos:line="758" pos:column="98">noErr</name></expr>)</condition><then pos:line="758" pos:column="104">
                <block pos:line="759" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="760" pos:column="21">CFIndex</name></type> <name pos:line="760" pos:column="29">dataSize</name> <init pos:line="760" pos:column="38">= <expr><call><name pos:line="760" pos:column="40">CFDataGetLength</name> <argument_list pos:line="760" pos:column="56">(<argument><expr><name pos:line="760" pos:column="57">flavorData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier pos:line="761" pos:column="21">const</specifier> <name pos:line="761" pos:column="27">UInt8</name><type:modifier pos:line="761" pos:column="32">*</type:modifier></type> <name pos:line="761" pos:column="34">dataBytes</name> <init pos:line="761" pos:column="44">= <expr><call><name pos:line="761" pos:column="46">CFDataGetBytePtr</name> <argument_list pos:line="761" pos:column="63">(<argument><expr><name pos:line="761" pos:column="64">flavorData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <switch pos:line="762" pos:column="21">switch <condition pos:line="762" pos:column="28">(<expr><name pos:line="762" pos:column="29">format</name></expr>)</condition>
                    <block pos:line="763" pos:column="21">{
                        <case pos:line="764" pos:column="25">case <expr><name pos:line="764" pos:column="30">kFormatFile</name></expr>:
                        </case><case pos:line="765" pos:column="25">case <expr><name pos:line="765" pos:column="30">kFormatText</name></expr>:
                            <expr_stmt><expr><name pos:line="766" pos:column="29">data</name> <op:operator pos:line="766" pos:column="34">=</op:operator> <call><name pos:line="766" pos:column="36">CFDataCreate</name> <argument_list pos:line="766" pos:column="49">(<argument><expr><name pos:line="766" pos:column="50">NULL</name></expr></argument>, <argument><expr><name pos:line="766" pos:column="56">dataBytes</name></expr></argument>, <argument><expr><name pos:line="766" pos:column="67">dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="767" pos:column="29">textString</name> <op:operator pos:line="767" pos:column="40">=</op:operator> <call><name pos:line="767" pos:column="42">CFStringCreateFromExternalRepresentation</name> <argument_list pos:line="767" pos:column="83">(<argument><expr><name pos:line="767" pos:column="84">NULL</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="90">data</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="96">kCFStringEncodingMacRoman</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break pos:line="768" pos:column="29">break;</break>
                        </case><case pos:line="769" pos:column="25">case <expr><name pos:line="769" pos:column="30">kFormatUnicode</name></expr>:
                            <expr_stmt><expr><name pos:line="770" pos:column="29">data</name> <op:operator pos:line="770" pos:column="34">=</op:operator> <call><name pos:line="770" pos:column="36">CFDataCreate</name> <argument_list pos:line="770" pos:column="49">(<argument><expr><name pos:line="770" pos:column="50">NULL</name></expr></argument>, <argument><expr><name pos:line="770" pos:column="56">dataBytes</name></expr></argument>, <argument><expr><name pos:line="770" pos:column="67">dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="771" pos:column="29">textString</name> <op:operator pos:line="771" pos:column="40">=</op:operator> <call><name pos:line="771" pos:column="42">CFStringCreateFromExternalRepresentation</name> <argument_list pos:line="771" pos:column="83">(<argument><expr><name pos:line="771" pos:column="84">NULL</name></expr></argument>, <argument><expr><name pos:line="771" pos:column="90">data</name></expr></argument>, <argument><expr><name pos:line="771" pos:column="96">kCFStringEncodingUnicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break pos:line="772" pos:column="29">break;</break>
                        </case><case pos:line="773" pos:column="25">case <expr><name pos:line="773" pos:column="30">kFormatUTF8</name></expr>:
                            <expr_stmt><expr><name pos:line="774" pos:column="29">data</name> <op:operator pos:line="774" pos:column="34">=</op:operator> <call><name pos:line="774" pos:column="36">CFDataCreate</name> <argument_list pos:line="774" pos:column="49">(<argument><expr><name pos:line="774" pos:column="50">NULL</name></expr></argument>, <argument><expr><name pos:line="774" pos:column="56">dataBytes</name></expr></argument>, <argument><expr><name pos:line="774" pos:column="67">dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="775" pos:column="29">textString</name> <op:operator pos:line="775" pos:column="40">=</op:operator> <call><name pos:line="775" pos:column="42">CFStringCreateFromExternalRepresentation</name> <argument_list pos:line="775" pos:column="83">(<argument><expr><name pos:line="775" pos:column="84">NULL</name></expr></argument>, <argument><expr><name pos:line="775" pos:column="90">data</name></expr></argument>, <argument><expr><name pos:line="775" pos:column="96">kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break pos:line="776" pos:column="29">break;</break>
                    </case>}</block></switch>
                    <expr_stmt><expr><call><name pos:line="778" pos:column="21">CFRelease</name> <argument_list pos:line="778" pos:column="31">(<argument><expr><name pos:line="778" pos:column="32">flavorData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:line="779" pos:column="21">goto <name pos:line="779" pos:column="26">PasteboardDataRetrieved</name>;</goto>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></for>
<label><name pos:line="784" pos:column="1">PasteboardDataRetrieved</name>:</label>
    <if pos:line="785" pos:column="5">if <condition pos:line="785" pos:column="8">(<expr><name pos:line="785" pos:column="9">flavorTypeArray</name> <op:operator pos:line="785" pos:column="25">!=</op:operator> <name pos:line="785" pos:column="28">NULL</name></expr>)</condition><then pos:line="785" pos:column="33"> <expr_stmt><expr><call><name pos:line="785" pos:column="34">CFRelease</name><argument_list pos:line="785" pos:column="43">(<argument><expr><name pos:line="785" pos:column="44">flavorTypeArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <decl_stmt><decl><type><name pos:line="786" pos:column="9">int</name></type> <name pos:line="786" pos:column="13">newlen</name> <init pos:line="786" pos:column="20">= <expr><lit:literal type="number" pos:line="786" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="787" pos:column="5">if <condition pos:line="787" pos:column="8">(<expr><name pos:line="787" pos:column="9">textString</name> <op:operator pos:line="787" pos:column="20">!=</op:operator> <name pos:line="787" pos:column="23">NULL</name></expr>)</condition><then pos:line="787" pos:column="28"> <block pos:line="787" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="788" pos:column="9">selectedText</name><op:operator pos:line="788" pos:column="21">-&gt;</op:operator><name pos:line="788" pos:column="23">s</name></name> <op:operator pos:line="788" pos:column="25">=</op:operator> <call><name pos:line="788" pos:column="27">GetStringFromCFString</name><argument_list pos:line="788" pos:column="48">(<argument><expr><name pos:line="788" pos:column="49">textString</name></expr></argument>, <argument><expr><op:operator pos:line="788" pos:column="61">&amp;</op:operator><name><name pos:line="788" pos:column="62">selectedText</name><op:operator pos:line="788" pos:column="74">-&gt;</op:operator><name pos:line="788" pos:column="76">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="789" pos:column="9">selectedText</name><op:operator pos:line="789" pos:column="21">-&gt;</op:operator><name pos:line="789" pos:column="23">rectangular</name></name> <op:operator pos:line="789" pos:column="35">=</op:operator> <name pos:line="789" pos:column="37">isRectangular</name></expr>;</expr_stmt>
        <comment type="line" pos:line="790" pos:column="9">// Default allocator releases both the CFString and the UniChar buffer (text)</comment>
        <expr_stmt><expr><call><name pos:line="791" pos:column="9">CFRelease</name><argument_list pos:line="791" pos:column="18">( <argument><expr><name pos:line="791" pos:column="20">textString</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="792" pos:column="9">textString</name> <op:operator pos:line="792" pos:column="20">=</op:operator> <name pos:line="792" pos:column="22">NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <if pos:line="794" pos:column="5">if <condition pos:line="794" pos:column="8">(<expr><name pos:line="794" pos:column="9">haveMatch</name> <op:operator pos:line="794" pos:column="19">||</op:operator> <name pos:line="794" pos:column="22">selectedText</name> <op:operator pos:line="794" pos:column="35">!=</op:operator> <name pos:line="794" pos:column="38">NULL</name> <op:operator pos:line="794" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="794" pos:column="46">selectedText</name><op:operator pos:line="794" pos:column="58">-&gt;</op:operator><name pos:line="794" pos:column="60">s</name></name> <op:operator pos:line="794" pos:column="62">!=</op:operator> <name pos:line="794" pos:column="65">NULL</name></expr>)</condition><then pos:line="794" pos:column="70"> <block pos:line="794" pos:column="71">{
        <return pos:line="795" pos:column="9">return <expr><lit:literal type="boolean" pos:line="795" pos:column="16">true</lit:literal></expr>;</return>
    }</block></then></if>
    <return pos:line="797" pos:column="5">return <expr><lit:literal type="boolean" pos:line="797" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="800" pos:column="1">char</name> <type:modifier pos:line="800" pos:column="6">*</type:modifier></type><name><name pos:line="800" pos:column="7">ScintillaMacOSX</name><op:operator pos:line="800" pos:column="22">::</op:operator><name pos:line="800" pos:column="24">GetStringFromCFString</name></name><parameter_list pos:line="800" pos:column="45">(<param><decl><type><name pos:line="800" pos:column="46">CFStringRef</name> <type:modifier pos:line="800" pos:column="58">&amp;</type:modifier></type><name pos:line="800" pos:column="59">textString</name></decl></param>, <param><decl><type><name pos:line="800" pos:column="71">int</name> <type:modifier pos:line="800" pos:column="75">*</type:modifier></type><name pos:line="800" pos:column="76">textLen</name></decl></param>)</parameter_list>
<block pos:line="801" pos:column="1">{

    <comment type="line" pos:line="803" pos:column="5">// Allocate a buffer, plus the null byte</comment>
    <decl_stmt><decl><type><name pos:line="804" pos:column="5">CFIndex</name></type> <name pos:line="804" pos:column="13">numUniChars</name> <init pos:line="804" pos:column="25">= <expr><call><name pos:line="804" pos:column="27">CFStringGetLength</name><argument_list pos:line="804" pos:column="44">( <argument><expr><name pos:line="804" pos:column="46">textString</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="805" pos:column="5">CFStringEncoding</name></type> <name pos:line="805" pos:column="22">encoding</name> <init pos:line="805" pos:column="31">= <expr><op:operator pos:line="805" pos:column="33">(</op:operator> <call><name pos:line="805" pos:column="35">IsUnicodeMode</name><argument_list pos:line="805" pos:column="48">()</argument_list></call> <op:operator pos:line="805" pos:column="51">?</op:operator> <name pos:line="805" pos:column="53">kCFStringEncodingUTF8</name> <op:operator pos:line="805" pos:column="75">:</op:operator> <name pos:line="805" pos:column="77">kCFStringEncodingMacRoman</name><op:operator pos:line="805" pos:column="102">)</op:operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="806" pos:column="5">CFIndex</name></type> <name pos:line="806" pos:column="13">maximumByteLength</name> <init pos:line="806" pos:column="31">= <expr><call><name pos:line="806" pos:column="33">CFStringGetMaximumSizeForEncoding</name><argument_list pos:line="806" pos:column="66">( <argument><expr><name pos:line="806" pos:column="68">numUniChars</name></expr></argument>, <argument><expr><name pos:line="806" pos:column="81">encoding</name></expr></argument> )</argument_list></call> <op:operator pos:line="806" pos:column="92">+</op:operator> <lit:literal type="number" pos:line="806" pos:column="94">1</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="807" pos:column="5">char</name><type:modifier pos:line="807" pos:column="9">*</type:modifier></type> <name pos:line="807" pos:column="11">cstring</name> <init pos:line="807" pos:column="19">= <expr><op:operator pos:line="807" pos:column="21">new</op:operator> <name><name pos:line="807" pos:column="25">char</name><index pos:line="807" pos:column="29">[<expr><name pos:line="807" pos:column="30">maximumByteLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="808" pos:column="5">CFIndex</name></type> <name pos:line="808" pos:column="13">usedBufferLength</name> <init pos:line="808" pos:column="30">= <expr><lit:literal type="number" pos:line="808" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="809" pos:column="5">CFIndex</name></type> <name pos:line="809" pos:column="13">numCharsConverted</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="810" pos:column="5">numCharsConverted</name> <op:operator pos:line="810" pos:column="23">=</op:operator> <call><name pos:line="810" pos:column="25">CFStringGetBytes</name><argument_list pos:line="810" pos:column="41">( <argument><expr><name pos:line="810" pos:column="43">textString</name></expr></argument>, <argument><expr><call><name pos:line="810" pos:column="55">CFRangeMake</name><argument_list pos:line="810" pos:column="66">( <argument><expr><lit:literal type="number" pos:line="810" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><name pos:line="810" pos:column="71">numUniChars</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="810" pos:column="86">encoding</name></expr></argument>,
                              <argument><expr><lit:literal type="char" pos:line="811" pos:column="31">'?'</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="811" pos:column="36">false</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="811" pos:column="43">reinterpret_cast</name><argument_list pos:line="811" pos:column="59">&lt;<argument><expr><name pos:line="811" pos:column="60">UInt8</name><op:operator pos:line="811" pos:column="65">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="811" pos:column="67">( <argument><expr><name pos:line="811" pos:column="69">cstring</name></expr></argument> )</argument_list></call></expr></argument>,
                              <argument><expr><name pos:line="812" pos:column="31">maximumByteLength</name></expr></argument>, <argument><expr><op:operator pos:line="812" pos:column="50">&amp;</op:operator><name pos:line="812" pos:column="51">usedBufferLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="813" pos:column="5">cstring</name><index pos:line="813" pos:column="12">[<expr><name pos:line="813" pos:column="13">usedBufferLength</name></expr>]</index></name> <op:operator pos:line="813" pos:column="31">=</op:operator> <lit:literal type="char" pos:line="813" pos:column="33">'\0'</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="813" pos:column="39">// null terminate the ASCII/UTF8 string</comment>

    <comment type="line" pos:line="815" pos:column="5">// determine whether a BOM is in the string.  Apps like Emacs prepends a BOM</comment>
    <comment type="line" pos:line="816" pos:column="5">// to the string, CFStrinGetBytes reflects that (though it may change in the conversion)</comment>
    <comment type="line" pos:line="817" pos:column="5">// so we need to remove it before pasting into our buffer.  TextWrangler has no</comment>
    <comment type="line" pos:line="818" pos:column="5">// problem dealing with BOM when pasting into it.</comment>
    <decl_stmt><decl><type><name pos:line="819" pos:column="5">int</name></type> <name pos:line="819" pos:column="9">bomLen</name> <init pos:line="819" pos:column="16">= <expr><call><name pos:line="819" pos:column="18">BOMlen</name><argument_list pos:line="819" pos:column="24">(<argument><expr><op:operator pos:line="819" pos:column="25">(</op:operator><name pos:line="819" pos:column="26">unsigned</name> <name pos:line="819" pos:column="35">char</name> <op:operator pos:line="819" pos:column="40">*</op:operator><op:operator pos:line="819" pos:column="41">)</op:operator><name pos:line="819" pos:column="42">cstring</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="821" pos:column="5">// convert line endings to the document line ending</comment>
    <expr_stmt><expr><op:operator pos:line="822" pos:column="5">*</op:operator><name pos:line="822" pos:column="6">textLen</name> <op:operator pos:line="822" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="822" pos:column="16">0</lit:literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="823" pos:column="5">char</name> <type:modifier pos:line="823" pos:column="10">*</type:modifier></type><name pos:line="823" pos:column="11">result</name> <init pos:line="823" pos:column="18">= <expr><call><name><name pos:line="823" pos:column="20">Document</name><op:operator pos:line="823" pos:column="28">::</op:operator><name pos:line="823" pos:column="30">TransformLineEnds</name></name><argument_list pos:line="823" pos:column="47">(<argument><expr><name pos:line="823" pos:column="48">textLen</name></expr></argument>,
                                      <argument><expr><name pos:line="824" pos:column="39">cstring</name> <op:operator pos:line="824" pos:column="47">+</op:operator> <name pos:line="824" pos:column="49">bomLen</name></expr></argument>,
                                      <argument><expr><name pos:line="825" pos:column="39">usedBufferLength</name> <op:operator pos:line="825" pos:column="56">-</op:operator> <name pos:line="825" pos:column="58">bomLen</name></expr></argument>,
                                      <argument><expr><name><name pos:line="826" pos:column="39">pdoc</name><op:operator pos:line="826" pos:column="43">-&gt;</op:operator><name pos:line="826" pos:column="45">eolMode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><op:operator pos:line="827" pos:column="5">delete</op:operator><index pos:line="827" pos:column="11">[]</index> <name pos:line="827" pos:column="14">cstring</name></expr>;</expr_stmt>
    <return pos:line="828" pos:column="5">return <expr><name pos:line="828" pos:column="12">result</name></expr>;</return>
}</block></function>

<function><type><name pos:line="831" pos:column="1">OSStatus</name></type> <name><name pos:line="831" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="831" pos:column="25">::</op:operator><name pos:line="831" pos:column="27">DragReceive</name></name><parameter_list pos:line="831" pos:column="38">(<param><decl><type><name pos:line="831" pos:column="39">DragRef</name></type> <name pos:line="831" pos:column="47">inDrag</name></decl></param> )</parameter_list>
<block pos:line="832" pos:column="1">{
    <comment type="line" pos:line="833" pos:column="5">// dragleave IS called, but for some reason (probably to do with inDrag)</comment>
    <comment type="line" pos:line="834" pos:column="5">// the hide hilite does not happen unless we do it here</comment>
    <expr_stmt><expr><call><name pos:line="835" pos:column="5">HideDragHilite</name><argument_list pos:line="835" pos:column="19">( <argument><expr><name pos:line="835" pos:column="21">inDrag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="837" pos:column="5">PasteboardRef</name></type> <name pos:line="837" pos:column="19">pasteBoard</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="838" pos:column="5">SelectionText</name></type> <name pos:line="838" pos:column="19">selectedText</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="839" pos:column="5">CFStringRef</name></type> <name pos:line="839" pos:column="17">textString</name> <init pos:line="839" pos:column="28">= <expr><name pos:line="839" pos:column="30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="840" pos:column="5">bool</name></type> <name pos:line="840" pos:column="10">isFileURL</name> <init pos:line="840" pos:column="20">= <expr><lit:literal type="boolean" pos:line="840" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="841" pos:column="5">if <condition pos:line="841" pos:column="8">(<expr><op:operator pos:line="841" pos:column="9">!</op:operator><call><name pos:line="841" pos:column="10">GetDragData</name><argument_list pos:line="841" pos:column="21">(<argument><expr><name pos:line="841" pos:column="22">inDrag</name></expr></argument>, <argument><expr><name pos:line="841" pos:column="30">pasteBoard</name></expr></argument>, <argument><expr><op:operator pos:line="841" pos:column="42">&amp;</op:operator><name pos:line="841" pos:column="43">selectedText</name></expr></argument>, <argument><expr><op:operator pos:line="841" pos:column="57">&amp;</op:operator><name pos:line="841" pos:column="58">isFileURL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="841" pos:column="69"> <block pos:line="841" pos:column="70">{
        <return pos:line="842" pos:column="9">return <expr><name pos:line="842" pos:column="16">dragNotAcceptedErr</name></expr>;</return>
    }</block></then></if>

    <if pos:line="845" pos:column="5">if <condition pos:line="845" pos:column="8">(<expr><name pos:line="845" pos:column="9">isFileURL</name></expr>)</condition><then pos:line="845" pos:column="19"> <block pos:line="845" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="846" pos:column="9">NotifyURIDropped</name><argument_list pos:line="846" pos:column="25">(<argument><expr><name><name pos:line="846" pos:column="26">selectedText</name><op:operator pos:line="846" pos:column="38">.</op:operator><name pos:line="846" pos:column="39">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="847" pos:column="7">else <block pos:line="847" pos:column="12">{
        <comment type="line" pos:line="848" pos:column="9">// figure out if this is a move or a paste</comment>
        <decl_stmt><decl><type><name pos:line="849" pos:column="9">DragAttributes</name></type> <name pos:line="849" pos:column="24">attributes</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="850" pos:column="9">SInt16</name></type> <name pos:line="850" pos:column="16">modifiers</name> <init pos:line="850" pos:column="26">= <expr><lit:literal type="number" pos:line="850" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="851" pos:column="9">GetDragAttributes</name><argument_list pos:line="851" pos:column="26">( <argument><expr><name pos:line="851" pos:column="28">inDrag</name></expr></argument>, <argument><expr><op:operator pos:line="851" pos:column="36">&amp;</op:operator><name pos:line="851" pos:column="37">attributes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="852" pos:column="9">bool</name></type> <name pos:line="852" pos:column="14">moving</name> <init pos:line="852" pos:column="21">= <expr><lit:literal type="boolean" pos:line="852" pos:column="23">true</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name pos:line="854" pos:column="9">SelectionPosition</name></type> <name pos:line="854" pos:column="27">position</name> <init pos:line="854" pos:column="36">= <expr><call><name pos:line="854" pos:column="38">SPositionFromLocation</name><argument_list pos:line="854" pos:column="59">(<argument><expr><call><name pos:line="854" pos:column="60">GetDragPoint</name><argument_list pos:line="854" pos:column="72">(<argument><expr><name pos:line="854" pos:column="73">inDrag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="855" pos:column="9">if <condition pos:line="855" pos:column="12">( <expr><name pos:line="855" pos:column="14">attributes</name> <op:operator pos:line="855" pos:column="25">&amp;</op:operator> <name pos:line="855" pos:column="27">kDragInsideSenderWindow</name></expr> )</condition><then pos:line="855" pos:column="52"> <block pos:line="855" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="856" pos:column="13">GetDragModifiers</name><argument_list pos:line="856" pos:column="29">(<argument><expr><name pos:line="856" pos:column="30">inDrag</name></expr></argument>, <argument><expr><name pos:line="856" pos:column="38">NULL</name></expr></argument>, <argument><expr><name pos:line="856" pos:column="44">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="856" pos:column="50">&amp;</op:operator><name pos:line="856" pos:column="51">modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:line="857" pos:column="13">switch <condition pos:line="857" pos:column="20">(<expr><name pos:line="857" pos:column="21">modifiers</name> <op:operator pos:line="857" pos:column="31">&amp;</op:operator> <op:operator pos:line="857" pos:column="33">~</op:operator><name pos:line="857" pos:column="34">btnState</name></expr>)</condition>  <comment type="line" pos:line="857" pos:column="45">// Filter out btnState (on for drop)</comment>
            <block pos:line="858" pos:column="13">{
            <case pos:line="859" pos:column="13">case <expr><name pos:line="859" pos:column="18">optionKey</name></expr>:
                <comment type="line" pos:line="860" pos:column="17">// default is copy text</comment>
                <expr_stmt><expr><name pos:line="861" pos:column="17">moving</name> <op:operator pos:line="861" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="861" pos:column="26">false</lit:literal></expr>;</expr_stmt>
                <break pos:line="862" pos:column="17">break;</break>
            </case><case pos:line="863" pos:column="13">case <expr><name pos:line="863" pos:column="18">cmdKey</name></expr>:
            </case><case pos:line="864" pos:column="13">case <expr><name pos:line="864" pos:column="18">cmdKey</name> <op:operator pos:line="864" pos:column="25">|</op:operator> <name pos:line="864" pos:column="27">optionKey</name></expr>:
            </case><default pos:line="865" pos:column="13">default:
                <comment type="line" pos:line="866" pos:column="17">// what to do with these?  rectangular drag?</comment>
                <break pos:line="867" pos:column="17">break;</break>
            </default>}</block></switch>
        }</block></then></if>

        <expr_stmt><expr><call><name pos:line="871" pos:column="9">DropAt</name><argument_list pos:line="871" pos:column="15">(<argument><expr><name pos:line="871" pos:column="16">position</name></expr></argument>, <argument><expr><name><name pos:line="871" pos:column="26">selectedText</name><op:operator pos:line="871" pos:column="38">.</op:operator><name pos:line="871" pos:column="39">s</name></name></expr></argument>, <argument><expr><name pos:line="871" pos:column="42">moving</name></expr></argument>, <argument><expr><name><name pos:line="871" pos:column="50">selectedText</name><op:operator pos:line="871" pos:column="62">.</op:operator><name pos:line="871" pos:column="63">rectangular</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return pos:line="874" pos:column="5">return <expr><name pos:line="874" pos:column="12">noErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="877" pos:column="1">// Extended UTF8-UTF6-conversion to handle surrogate pairs correctly (CL265070)</comment>
<function><type><name pos:line="878" pos:column="1">void</name></type> <name><name pos:line="878" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="878" pos:column="21">::</op:operator><name pos:line="878" pos:column="23">InsertCharacters</name></name> <parameter_list pos:line="878" pos:column="40">(<param><decl><type><specifier pos:line="878" pos:column="41">const</specifier> <name pos:line="878" pos:column="47">UniChar</name><type:modifier pos:line="878" pos:column="54">*</type:modifier></type> <name pos:line="878" pos:column="56">buf</name></decl></param>, <param><decl><type><name pos:line="878" pos:column="61">int</name></type> <name pos:line="878" pos:column="65">len</name></decl></param>)</parameter_list>
<block pos:line="879" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="880" pos:column="5">CFStringRef</name></type> <name pos:line="880" pos:column="17">str</name> <init pos:line="880" pos:column="21">= <expr><call><name pos:line="880" pos:column="23">CFStringCreateWithCharactersNoCopy</name> <argument_list pos:line="880" pos:column="58">(<argument><expr><name pos:line="880" pos:column="59">NULL</name></expr></argument>, <argument><expr><name pos:line="880" pos:column="65">buf</name></expr></argument>, <argument><expr><op:operator pos:line="880" pos:column="70">(</op:operator><name pos:line="880" pos:column="71">UInt32</name><op:operator pos:line="880" pos:column="77">)</op:operator> <name pos:line="880" pos:column="79">len</name></expr></argument>, <argument><expr><name pos:line="880" pos:column="84">kCFAllocatorNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="881" pos:column="5">CFStringEncoding</name></type> <name pos:line="881" pos:column="22">encoding</name> <init pos:line="881" pos:column="31">= <expr><op:operator pos:line="881" pos:column="33">(</op:operator> <call><name pos:line="881" pos:column="35">IsUnicodeMode</name><argument_list pos:line="881" pos:column="48">()</argument_list></call> <op:operator pos:line="881" pos:column="51">?</op:operator> <name pos:line="881" pos:column="53">kCFStringEncodingUTF8</name> <op:operator pos:line="881" pos:column="75">:</op:operator> <name pos:line="881" pos:column="77">kCFStringEncodingMacRoman</name><op:operator pos:line="881" pos:column="102">)</op:operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="882" pos:column="5">CFRange</name></type> <name pos:line="882" pos:column="13">range</name> <init pos:line="882" pos:column="19">= <expr><block pos:line="882" pos:column="21">{ <expr><lit:literal type="number" pos:line="882" pos:column="23">0</lit:literal></expr>, <expr><name pos:line="882" pos:column="26">len</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="883" pos:column="5">CFIndex</name></type> <name pos:line="883" pos:column="13">bufLen</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="884" pos:column="5">CFStringGetBytes</name> <argument_list pos:line="884" pos:column="22">(<argument><expr><name pos:line="884" pos:column="23">str</name></expr></argument>, <argument><expr><name pos:line="884" pos:column="28">range</name></expr></argument>, <argument><expr><name pos:line="884" pos:column="35">encoding</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="884" pos:column="45">'?'</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="884" pos:column="50">false</lit:literal></expr></argument>, <argument><expr><name pos:line="884" pos:column="57">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="884" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="884" pos:column="66">&amp;</op:operator><name pos:line="884" pos:column="67">bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="885" pos:column="5">UInt8</name><type:modifier pos:line="885" pos:column="10">*</type:modifier></type> <name pos:line="885" pos:column="12">utf8buf</name> <init pos:line="885" pos:column="20">= <expr><op:operator pos:line="885" pos:column="22">new</op:operator> <name><name pos:line="885" pos:column="26">UInt8</name> <index pos:line="885" pos:column="32">[<expr><name pos:line="885" pos:column="33">bufLen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="886" pos:column="5">CFStringGetBytes</name> <argument_list pos:line="886" pos:column="22">(<argument><expr><name pos:line="886" pos:column="23">str</name></expr></argument>, <argument><expr><name pos:line="886" pos:column="28">range</name></expr></argument>, <argument><expr><name pos:line="886" pos:column="35">encoding</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="886" pos:column="45">'?'</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="886" pos:column="50">false</lit:literal></expr></argument>, <argument><expr><name pos:line="886" pos:column="57">utf8buf</name></expr></argument>, <argument><expr><name pos:line="886" pos:column="66">bufLen</name></expr></argument>, <argument><expr><name pos:line="886" pos:column="74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="887" pos:column="5">AddCharUTF</name> <argument_list pos:line="887" pos:column="16">(<argument><expr><op:operator pos:line="887" pos:column="17">(</op:operator><name pos:line="887" pos:column="18">char</name><op:operator pos:line="887" pos:column="22">*</op:operator><op:operator pos:line="887" pos:column="23">)</op:operator> <name pos:line="887" pos:column="25">utf8buf</name></expr></argument>, <argument><expr><name pos:line="887" pos:column="34">bufLen</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="887" pos:column="42">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><op:operator pos:line="888" pos:column="5">delete</op:operator> <index pos:line="888" pos:column="12">[]</index> <name pos:line="888" pos:column="15">utf8buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="889" pos:column="5">CFRelease</name> <argument_list pos:line="889" pos:column="15">(<argument><expr><name pos:line="889" pos:column="16">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" pos:line="892" pos:column="1">/** The simulated message loop. */</comment>
<function><type><name pos:line="893" pos:column="1">sptr_t</name></type> <name><name pos:line="893" pos:column="8">ScintillaMacOSX</name><op:operator pos:line="893" pos:column="23">::</op:operator><name pos:line="893" pos:column="25">WndProc</name></name><parameter_list pos:line="893" pos:column="32">(<param><decl><type><name pos:line="893" pos:column="33">unsigned</name> <name pos:line="893" pos:column="42">int</name></type> <name pos:line="893" pos:column="46">iMessage</name></decl></param>, <param><decl><type><name pos:line="893" pos:column="56">uptr_t</name></type> <name pos:line="893" pos:column="63">wParam</name></decl></param>, <param><decl><type><name pos:line="893" pos:column="71">sptr_t</name></type> <name pos:line="893" pos:column="78">lParam</name></decl></param>)</parameter_list> <block pos:line="893" pos:column="86">{
    <switch pos:line="894" pos:column="5">switch <condition pos:line="894" pos:column="12">(<expr><name pos:line="894" pos:column="13">iMessage</name></expr>)</condition> <block pos:line="894" pos:column="23">{
    <case pos:line="895" pos:column="5">case <expr><name pos:line="895" pos:column="10">SCI_GETDIRECTFUNCTION</name></expr>:
        <expr_stmt><expr><call><name><name pos:line="896" pos:column="9">Platform</name><op:operator pos:line="896" pos:column="17">::</op:operator><name pos:line="896" pos:column="19">DebugDisplay</name></name><argument_list pos:line="896" pos:column="31">( <argument><expr><lit:literal type="string" pos:line="896" pos:column="33">"ScintillaMacOSX::WndProc: Returning DirectFunction address.\n"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return pos:line="897" pos:column="9">return <expr><call><name><name pos:line="897" pos:column="16">reinterpret_cast</name><argument_list pos:line="897" pos:column="32">&lt;<argument><expr><name pos:line="897" pos:column="33">sptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="897" pos:column="40">( <argument><expr><name pos:line="897" pos:column="42">DirectFunction</name></expr></argument> )</argument_list></call></expr>;</return>

    </case><case pos:line="899" pos:column="5">case <expr><name pos:line="899" pos:column="10">SCI_GETDIRECTPOINTER</name></expr>:
        <expr_stmt><expr><call><name><name pos:line="900" pos:column="9">Platform</name><op:operator pos:line="900" pos:column="17">::</op:operator><name pos:line="900" pos:column="19">DebugDisplay</name></name><argument_list pos:line="900" pos:column="31">( <argument><expr><lit:literal type="string" pos:line="900" pos:column="33">"ScintillaMacOSX::WndProc: Returning Direct pointer address.\n"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return pos:line="901" pos:column="9">return <expr><call><name><name pos:line="901" pos:column="16">reinterpret_cast</name><argument_list pos:line="901" pos:column="32">&lt;<argument><expr><name pos:line="901" pos:column="33">sptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="901" pos:column="40">( <argument><expr><name pos:line="901" pos:column="42">this</name></expr></argument> )</argument_list></call></expr>;</return>

    </case><case pos:line="903" pos:column="5">case <expr><name pos:line="903" pos:column="10">SCI_GRABFOCUS</name></expr>:
        <expr_stmt><expr><call><name><name pos:line="904" pos:column="9">Platform</name><op:operator pos:line="904" pos:column="17">::</op:operator><name pos:line="904" pos:column="19">DebugDisplay</name></name><argument_list pos:line="904" pos:column="31">( <argument><expr><lit:literal type="string" pos:line="904" pos:column="33">"ScintillaMacOSX::WndProc: Got an unhandled message. Ignoring it.\n"</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
         <break pos:line="905" pos:column="10">break;</break>
    </case><case pos:line="906" pos:column="5">case <expr><name pos:line="906" pos:column="10">WM_UNICHAR</name></expr>:
        <if pos:line="907" pos:column="9">if <condition pos:line="907" pos:column="12">(<expr><call><name pos:line="907" pos:column="13">IsUnicodeMode</name><argument_list pos:line="907" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="907" pos:column="29"> <block pos:line="907" pos:column="30">{
            <comment type="line" pos:line="908" pos:column="13">// Extended UTF8-UTF6-conversion to handle surrogate pairs correctly (CL265070)</comment>
            <decl_stmt><decl><type><name pos:line="909" pos:column="13">UniChar</name></type> <name><name pos:line="909" pos:column="21">wcs</name><index pos:line="909" pos:column="24">[<expr><lit:literal type="number" pos:line="909" pos:column="25">1</lit:literal></expr>]</index></name> <init pos:line="909" pos:column="28">= <expr><block pos:line="909" pos:column="30">{ <expr><op:operator pos:line="909" pos:column="32">(</op:operator><name pos:line="909" pos:column="33">UniChar</name><op:operator pos:line="909" pos:column="40">)</op:operator> <name pos:line="909" pos:column="42">wParam</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="910" pos:column="13">InsertCharacters</name><argument_list pos:line="910" pos:column="29">(<argument><expr><name pos:line="910" pos:column="30">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="910" pos:column="35">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="911" pos:column="13">return <expr><lit:literal type="number" pos:line="911" pos:column="20">1</lit:literal></expr>;</return>
        }</block></then> <else pos:line="912" pos:column="11">else <block pos:line="912" pos:column="16">{
            <return pos:line="913" pos:column="13">return <expr><lit:literal type="number" pos:line="913" pos:column="20">0</lit:literal></expr>;</return>
        }</block></else></if>

    </case><default pos:line="916" pos:column="5">default:
        <decl_stmt><decl><type><name pos:line="917" pos:column="9">unsigned</name> <name pos:line="917" pos:column="18">int</name></type> <name pos:line="917" pos:column="22">r</name> <init pos:line="917" pos:column="24">= <expr><call><name><name pos:line="917" pos:column="26">ScintillaBase</name><op:operator pos:line="917" pos:column="39">::</op:operator><name pos:line="917" pos:column="41">WndProc</name></name><argument_list pos:line="917" pos:column="48">(<argument><expr><name pos:line="917" pos:column="49">iMessage</name></expr></argument>, <argument><expr><name pos:line="917" pos:column="59">wParam</name></expr></argument>, <argument><expr><name pos:line="917" pos:column="67">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return pos:line="919" pos:column="9">return <expr><name pos:line="919" pos:column="16">r</name></expr>;</return>
    </default>}</block></switch>
    <return pos:line="921" pos:column="5">return <expr><lit:literal type="number" pos:line="921" pos:column="12">0l</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="924" pos:column="1">sptr_t</name></type> <name><name pos:line="924" pos:column="8">ScintillaMacOSX</name><op:operator pos:line="924" pos:column="23">::</op:operator><name pos:line="924" pos:column="25">DefWndProc</name></name><parameter_list pos:line="924" pos:column="35">(<param><decl><type><name pos:line="924" pos:column="36">unsigned</name></type> <name pos:line="924" pos:column="45">int</name></decl></param>, <param><decl><type><name pos:line="924" pos:column="50">uptr_t</name></type></decl></param>, <param><decl><type><name pos:line="924" pos:column="58">sptr_t</name></type></decl></param>)</parameter_list> <block pos:line="924" pos:column="66">{
    <return pos:line="925" pos:column="5">return <expr><lit:literal type="number" pos:line="925" pos:column="12">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="928" pos:column="1">void</name></type> <name><name pos:line="928" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="928" pos:column="21">::</op:operator><name pos:line="928" pos:column="23">SetTicking</name></name><parameter_list pos:line="928" pos:column="33">(<param><decl><type><name pos:line="928" pos:column="34">bool</name></type> <name pos:line="928" pos:column="39">on</name></decl></param>)</parameter_list> <block pos:line="928" pos:column="43">{
    <if pos:line="929" pos:column="5">if <condition pos:line="929" pos:column="8">(<expr><name><name pos:line="929" pos:column="9">timer</name><op:operator pos:line="929" pos:column="14">.</op:operator><name pos:line="929" pos:column="15">ticking</name></name> <op:operator pos:line="929" pos:column="23">!=</op:operator> <name pos:line="929" pos:column="26">on</name></expr>)</condition><then pos:line="929" pos:column="29"> <block pos:line="929" pos:column="30">{
        <expr_stmt><expr><name><name pos:line="930" pos:column="9">timer</name><op:operator pos:line="930" pos:column="14">.</op:operator><name pos:line="930" pos:column="15">ticking</name></name> <op:operator pos:line="930" pos:column="23">=</op:operator> <name pos:line="930" pos:column="25">on</name></expr>;</expr_stmt>
        <if pos:line="931" pos:column="9">if <condition pos:line="931" pos:column="12">(<expr><name><name pos:line="931" pos:column="13">timer</name><op:operator pos:line="931" pos:column="18">.</op:operator><name pos:line="931" pos:column="19">ticking</name></name></expr>)</condition><then pos:line="931" pos:column="27"> <block pos:line="931" pos:column="28">{
            <comment type="line" pos:line="932" pos:column="13">// Scintilla ticks = milliseconds</comment>
            <decl_stmt><decl><type><name pos:line="933" pos:column="13">EventLoopTimerRef</name></type> <name pos:line="933" pos:column="31">timerRef</name> <init pos:line="933" pos:column="40">= <expr><name pos:line="933" pos:column="42">NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="934" pos:column="13">InstallTimer</name><argument_list pos:line="934" pos:column="25">( <argument><expr><name><name pos:line="934" pos:column="27">timer</name><op:operator pos:line="934" pos:column="32">.</op:operator><name pos:line="934" pos:column="33">tickSize</name></name> <op:operator pos:line="934" pos:column="42">*</op:operator> <name pos:line="934" pos:column="44">kEventDurationMillisecond</name></expr></argument>, <argument><expr><op:operator pos:line="934" pos:column="71">&amp;</op:operator><name pos:line="934" pos:column="72">timerRef</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="935" pos:column="13">assert</name><argument_list pos:line="935" pos:column="19">( <argument><expr><name pos:line="935" pos:column="21">timerRef</name> <op:operator pos:line="935" pos:column="30">!=</op:operator> <name pos:line="935" pos:column="33">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="936" pos:column="13">timer</name><op:operator pos:line="936" pos:column="18">.</op:operator><name pos:line="936" pos:column="19">tickerID</name></name> <op:operator pos:line="936" pos:column="28">=</op:operator> <call><name><name pos:line="936" pos:column="30">reinterpret_cast</name><argument_list pos:line="936" pos:column="46">&lt;<argument><expr><name pos:line="936" pos:column="47">TickerID</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="936" pos:column="56">( <argument><expr><name pos:line="936" pos:column="58">timerRef</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="937" pos:column="11">else <if pos:line="937" pos:column="16">if <condition pos:line="937" pos:column="19">( <expr><name><name pos:line="937" pos:column="21">timer</name><op:operator pos:line="937" pos:column="26">.</op:operator><name pos:line="937" pos:column="27">tickerID</name></name> <op:operator pos:line="937" pos:column="36">!=</op:operator> <name pos:line="937" pos:column="39">NULL</name></expr> )</condition><then pos:line="937" pos:column="45"> <block pos:line="937" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="938" pos:column="13">RemoveEventLoopTimer</name><argument_list pos:line="938" pos:column="33">( <argument><expr><call><name><name pos:line="938" pos:column="35">reinterpret_cast</name><argument_list pos:line="938" pos:column="51">&lt;<argument><expr><name pos:line="938" pos:column="52">EventLoopTimerRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="938" pos:column="70">( <argument><expr><name><name pos:line="938" pos:column="72">timer</name><op:operator pos:line="938" pos:column="77">.</op:operator><name pos:line="938" pos:column="78">tickerID</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></then></if>
    <expr_stmt><expr><name><name pos:line="941" pos:column="5">timer</name><op:operator pos:line="941" pos:column="10">.</op:operator><name pos:line="941" pos:column="11">ticksToWait</name></name> <op:operator pos:line="941" pos:column="23">=</op:operator> <name><name pos:line="941" pos:column="25">caret</name><op:operator pos:line="941" pos:column="30">.</op:operator><name pos:line="941" pos:column="31">period</name></name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="944" pos:column="1">bool</name></type> <name><name pos:line="944" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="944" pos:column="21">::</op:operator><name pos:line="944" pos:column="23">SetIdle</name></name><parameter_list pos:line="944" pos:column="30">(<param><decl><type><name pos:line="944" pos:column="31">bool</name></type> <name pos:line="944" pos:column="36">on</name></decl></param>)</parameter_list> <block pos:line="944" pos:column="40">{
    <if pos:line="945" pos:column="5">if <condition pos:line="945" pos:column="8">(<expr><name pos:line="945" pos:column="9">on</name></expr>)</condition><then pos:line="945" pos:column="12"> <block pos:line="945" pos:column="13">{
        <comment type="line" pos:line="946" pos:column="9">// Start idler, if it's not running.</comment>
        <if pos:line="947" pos:column="9">if <condition pos:line="947" pos:column="12">(<expr><name><name pos:line="947" pos:column="13">idler</name><op:operator pos:line="947" pos:column="18">.</op:operator><name pos:line="947" pos:column="19">state</name></name> <op:operator pos:line="947" pos:column="25">==</op:operator> <lit:literal type="boolean" pos:line="947" pos:column="28">false</lit:literal></expr>)</condition><then pos:line="947" pos:column="34"> <block pos:line="947" pos:column="35">{
            <expr_stmt><expr><name><name pos:line="948" pos:column="13">idler</name><op:operator pos:line="948" pos:column="18">.</op:operator><name pos:line="948" pos:column="19">state</name></name> <op:operator pos:line="948" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="948" pos:column="27">true</lit:literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="949" pos:column="13">EventLoopTimerRef</name></type> <name pos:line="949" pos:column="31">idlTimer</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="950" pos:column="13">InstallEventLoopIdleTimer</name><argument_list pos:line="950" pos:column="38">(<argument><expr><call><name pos:line="950" pos:column="39">GetCurrentEventLoop</name><argument_list pos:line="950" pos:column="58">()</argument_list></call></expr></argument>,
                                      <argument><expr><name><name pos:line="951" pos:column="39">timer</name><op:operator pos:line="951" pos:column="44">.</op:operator><name pos:line="951" pos:column="45">tickSize</name></name> <op:operator pos:line="951" pos:column="54">*</op:operator> <name pos:line="951" pos:column="56">kEventDurationMillisecond</name></expr></argument>,
                                      <argument><expr><lit:literal type="number" pos:line="952" pos:column="39">75</lit:literal> <op:operator pos:line="952" pos:column="42">*</op:operator> <name pos:line="952" pos:column="44">kEventDurationMillisecond</name></expr></argument>,
                                      <argument><expr><name pos:line="953" pos:column="39">IdleTimerEventHandler</name></expr></argument>, <argument><expr><name pos:line="953" pos:column="62">this</name></expr></argument>, <argument><expr><op:operator pos:line="953" pos:column="68">&amp;</op:operator><name pos:line="953" pos:column="69">idlTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="954" pos:column="13">idler</name><op:operator pos:line="954" pos:column="18">.</op:operator><name pos:line="954" pos:column="19">idlerID</name></name> <op:operator pos:line="954" pos:column="27">=</op:operator> <call><name><name pos:line="954" pos:column="29">reinterpret_cast</name><argument_list pos:line="954" pos:column="45">&lt;<argument><expr><name pos:line="954" pos:column="46">IdlerID</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="954" pos:column="54">( <argument><expr><name pos:line="954" pos:column="56">idlTimer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then> <else pos:line="956" pos:column="7">else <block pos:line="956" pos:column="12">{
        <comment type="line" pos:line="957" pos:column="9">// Stop idler, if it's running</comment>
        <if pos:line="958" pos:column="9">if <condition pos:line="958" pos:column="12">(<expr><name><name pos:line="958" pos:column="13">idler</name><op:operator pos:line="958" pos:column="18">.</op:operator><name pos:line="958" pos:column="19">state</name></name> <op:operator pos:line="958" pos:column="25">==</op:operator> <lit:literal type="boolean" pos:line="958" pos:column="28">true</lit:literal></expr>)</condition><then pos:line="958" pos:column="33"> <block pos:line="958" pos:column="34">{
            <expr_stmt><expr><name><name pos:line="959" pos:column="13">idler</name><op:operator pos:line="959" pos:column="18">.</op:operator><name pos:line="959" pos:column="19">state</name></name> <op:operator pos:line="959" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="959" pos:column="27">false</lit:literal></expr>;</expr_stmt>
            <if pos:line="960" pos:column="13">if <condition pos:line="960" pos:column="16">(<expr><name><name pos:line="960" pos:column="17">idler</name><op:operator pos:line="960" pos:column="22">.</op:operator><name pos:line="960" pos:column="23">idlerID</name></name> <op:operator pos:line="960" pos:column="31">!=</op:operator> <name pos:line="960" pos:column="34">NULL</name></expr>)</condition><then pos:line="960" pos:column="39">
                <expr_stmt><expr><call><name pos:line="961" pos:column="17">RemoveEventLoopTimer</name><argument_list pos:line="961" pos:column="37">( <argument><expr><call><name><name pos:line="961" pos:column="39">reinterpret_cast</name><argument_list pos:line="961" pos:column="55">&lt;<argument><expr><name pos:line="961" pos:column="56">EventLoopTimerRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="961" pos:column="74">( <argument><expr><name><name pos:line="961" pos:column="76">idler</name><op:operator pos:line="961" pos:column="81">.</op:operator><name pos:line="961" pos:column="82">idlerID</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></else></if>
    <return pos:line="964" pos:column="5">return <expr><lit:literal type="boolean" pos:line="964" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="967" pos:column="1">pascal</name> <name pos:line="967" pos:column="8">void</name></type> <name><name pos:line="967" pos:column="13">ScintillaMacOSX</name><op:operator pos:line="967" pos:column="28">::</op:operator><name pos:line="967" pos:column="30">IdleTimerEventHandler</name></name><parameter_list pos:line="967" pos:column="51">( <param><decl><type><name pos:line="967" pos:column="53">EventLoopTimerRef</name></type> <name pos:line="967" pos:column="71">inTimer</name></decl></param>,
                                                    <param><decl><type><name pos:line="968" pos:column="53">EventLoopIdleTimerMessage</name></type> <name pos:line="968" pos:column="79">inState</name></decl></param>,
                                                    <param><decl><type><name pos:line="969" pos:column="53">void</name> <type:modifier pos:line="969" pos:column="58">*</type:modifier></type><name pos:line="969" pos:column="59">scintilla</name></decl></param> )</parameter_list>
<block pos:line="970" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="971" pos:column="5">ScintillaMacOSX</name> <type:modifier pos:line="971" pos:column="21">*</type:modifier></type><name pos:line="971" pos:column="22">sciThis</name> <init pos:line="971" pos:column="30">= <expr><call><name><name pos:line="971" pos:column="32">reinterpret_cast</name><argument_list pos:line="971" pos:column="48">&lt;<argument><expr><name pos:line="971" pos:column="49">ScintillaMacOSX</name><op:operator pos:line="971" pos:column="64">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="971" pos:column="66">( <argument><expr><name pos:line="971" pos:column="68">scintilla</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="972" pos:column="5">bool</name></type> <name pos:line="972" pos:column="10">ret</name> <init pos:line="972" pos:column="14">= <expr><call><name><name pos:line="972" pos:column="16">sciThis</name><op:operator pos:line="972" pos:column="23">-&gt;</op:operator><name pos:line="972" pos:column="25">Idle</name></name><argument_list pos:line="972" pos:column="29">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="973" pos:column="5">if <condition pos:line="973" pos:column="8">(<expr><name pos:line="973" pos:column="9">ret</name> <op:operator pos:line="973" pos:column="13">==</op:operator> <lit:literal type="boolean" pos:line="973" pos:column="16">false</lit:literal></expr>)</condition><then pos:line="973" pos:column="22"> <block pos:line="973" pos:column="23">{
        <expr_stmt><expr><call><name><name pos:line="974" pos:column="9">sciThis</name><op:operator pos:line="974" pos:column="16">-&gt;</op:operator><name pos:line="974" pos:column="18">SetIdle</name></name><argument_list pos:line="974" pos:column="25">(<argument><expr><lit:literal type="boolean" pos:line="974" pos:column="26">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="978" pos:column="1">void</name></type> <name><name pos:line="978" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="978" pos:column="21">::</op:operator><name pos:line="978" pos:column="23">SetMouseCapture</name></name><parameter_list pos:line="978" pos:column="38">(<param><decl><type><name pos:line="978" pos:column="39">bool</name></type> <name pos:line="978" pos:column="44">on</name></decl></param>)</parameter_list> <block pos:line="978" pos:column="48">{
    <expr_stmt><expr><name pos:line="979" pos:column="5">capturedMouse</name> <op:operator pos:line="979" pos:column="19">=</op:operator> <name pos:line="979" pos:column="21">on</name></expr>;</expr_stmt>
    <if pos:line="980" pos:column="5">if <condition pos:line="980" pos:column="8">(<expr><name pos:line="980" pos:column="9">mouseDownCaptures</name></expr>)</condition><then pos:line="980" pos:column="27"> <block pos:line="980" pos:column="28">{
        <if pos:line="981" pos:column="9">if <condition pos:line="981" pos:column="12">(<expr><name pos:line="981" pos:column="13">capturedMouse</name></expr>)</condition><then pos:line="981" pos:column="27"> <block pos:line="981" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="982" pos:column="13">WndProc</name><argument_list pos:line="982" pos:column="20">(<argument><expr><name pos:line="982" pos:column="21">SCI_SETCURSOR</name></expr></argument>, <argument><expr><name><name pos:line="982" pos:column="36">Window</name><op:operator pos:line="982" pos:column="42">::</op:operator><name pos:line="982" pos:column="44">cursorArrow</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="982" pos:column="57">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="983" pos:column="11">else <block pos:line="983" pos:column="16">{
            <comment type="line" pos:line="984" pos:column="13">// reset to normal, buttonmove will change for other area's in the editor</comment>
            <expr_stmt><expr><call><name pos:line="985" pos:column="13">WndProc</name><argument_list pos:line="985" pos:column="20">(<argument><expr><name pos:line="985" pos:column="21">SCI_SETCURSOR</name></expr></argument>, <argument><expr><op:operator pos:line="985" pos:column="36">(</op:operator><name pos:line="985" pos:column="37">long</name> <name pos:line="985" pos:column="42">int</name><op:operator pos:line="985" pos:column="45">)</op:operator><name pos:line="985" pos:column="46">SC_CURSORNORMAL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="985" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="990" pos:column="1">bool</name></type> <name><name pos:line="990" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="990" pos:column="21">::</op:operator><name pos:line="990" pos:column="23">HaveMouseCapture</name></name><parameter_list pos:line="990" pos:column="39">()</parameter_list> <block pos:line="990" pos:column="42">{
    <return pos:line="991" pos:column="5">return <expr><name pos:line="991" pos:column="12">capturedMouse</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="994" pos:column="1">// The default GetClientRectangle calls GetClientPosition on wMain.</comment>
<comment type="line" pos:line="995" pos:column="1">// We override it to return "view local" co-ordinates so we can draw properly</comment>
<comment type="line" pos:line="996" pos:column="1">// plus we need to remove the space occupied by the scroll bars</comment>
<function><type><name pos:line="997" pos:column="1">PRectangle</name></type> <name><name pos:line="997" pos:column="12">ScintillaMacOSX</name><op:operator pos:line="997" pos:column="27">::</op:operator><name pos:line="997" pos:column="29">GetClientRectangle</name></name><parameter_list pos:line="997" pos:column="47">()</parameter_list> <block pos:line="997" pos:column="50">{
    <decl_stmt><decl><type><name pos:line="998" pos:column="5">PRectangle</name></type> <name pos:line="998" pos:column="16">rc</name> <init pos:line="998" pos:column="19">= <expr><call><name><name pos:line="998" pos:column="21">wMain</name><op:operator pos:line="998" pos:column="26">.</op:operator><name pos:line="998" pos:column="27">GetClientPosition</name></name><argument_list pos:line="998" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="999" pos:column="5">if <condition pos:line="999" pos:column="8">(<expr><name pos:line="999" pos:column="9">verticalScrollBarVisible</name></expr>)</condition><then pos:line="999" pos:column="34">
        <expr_stmt><expr><name><name pos:line="1000" pos:column="9">rc</name><op:operator pos:line="1000" pos:column="11">.</op:operator><name pos:line="1000" pos:column="12">right</name></name> <op:operator pos:line="1000" pos:column="18">-=</op:operator> <name pos:line="1000" pos:column="21">scrollBarFixedSize</name> <op:operator pos:line="1000" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="1000" pos:column="42">1</lit:literal></expr>;</expr_stmt></then></if>
    <if pos:line="1001" pos:column="5">if <condition pos:line="1001" pos:column="8">(<expr><name pos:line="1001" pos:column="9">horizontalScrollBarVisible</name> <op:operator pos:line="1001" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="1001" pos:column="39">(</op:operator><name pos:line="1001" pos:column="40">wrapState</name> <op:operator pos:line="1001" pos:column="50">==</op:operator> <name pos:line="1001" pos:column="53">eWrapNone</name><op:operator pos:line="1001" pos:column="62">)</op:operator></expr>)</condition><then pos:line="1001" pos:column="64">
        <expr_stmt><expr><name><name pos:line="1002" pos:column="9">rc</name><op:operator pos:line="1002" pos:column="11">.</op:operator><name pos:line="1002" pos:column="12">bottom</name></name> <op:operator pos:line="1002" pos:column="19">-=</op:operator> <name pos:line="1002" pos:column="22">scrollBarFixedSize</name> <op:operator pos:line="1002" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="1002" pos:column="43">1</lit:literal></expr>;</expr_stmt></then></if>
    <comment type="line" pos:line="1003" pos:column="5">// Move to origin</comment>
    <expr_stmt><expr><name><name pos:line="1004" pos:column="5">rc</name><op:operator pos:line="1004" pos:column="7">.</op:operator><name pos:line="1004" pos:column="8">right</name></name> <op:operator pos:line="1004" pos:column="14">-=</op:operator> <name><name pos:line="1004" pos:column="17">rc</name><op:operator pos:line="1004" pos:column="19">.</op:operator><name pos:line="1004" pos:column="20">left</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1005" pos:column="5">rc</name><op:operator pos:line="1005" pos:column="7">.</op:operator><name pos:line="1005" pos:column="8">bottom</name></name> <op:operator pos:line="1005" pos:column="15">-=</op:operator> <name><name pos:line="1005" pos:column="18">rc</name><op:operator pos:line="1005" pos:column="20">.</op:operator><name pos:line="1005" pos:column="21">top</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1006" pos:column="5">rc</name><op:operator pos:line="1006" pos:column="7">.</op:operator><name pos:line="1006" pos:column="8">left</name></name> <op:operator pos:line="1006" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="1006" pos:column="15">0</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1007" pos:column="5">rc</name><op:operator pos:line="1007" pos:column="7">.</op:operator><name pos:line="1007" pos:column="8">top</name></name> <op:operator pos:line="1007" pos:column="12">=</op:operator> <lit:literal type="number" pos:line="1007" pos:column="14">0</lit:literal></expr>;</expr_stmt>
    <return pos:line="1008" pos:column="5">return <expr><name pos:line="1008" pos:column="12">rc</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1011" pos:column="1">// Synchronously paint a rectangle of the window.</comment>
<function><type><name pos:line="1012" pos:column="1">void</name></type> <name><name pos:line="1012" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1012" pos:column="21">::</op:operator><name pos:line="1012" pos:column="23">SyncPaint</name></name><parameter_list pos:line="1012" pos:column="32">(<param><decl><type><name pos:line="1012" pos:column="33">void</name><type:modifier pos:line="1012" pos:column="37">*</type:modifier></type> <name pos:line="1012" pos:column="39">gc</name></decl></param>, <param><decl><type><name pos:line="1012" pos:column="43">PRectangle</name></type> <name pos:line="1012" pos:column="54">rc</name></decl></param>)</parameter_list> <block pos:line="1012" pos:column="58">{
    <expr_stmt><expr><name pos:line="1013" pos:column="5">paintState</name> <op:operator pos:line="1013" pos:column="16">=</op:operator> <name pos:line="1013" pos:column="18">painting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1014" pos:column="5">rcPaint</name> <op:operator pos:line="1014" pos:column="13">=</op:operator> <name pos:line="1014" pos:column="15">rc</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1015" pos:column="5">PRectangle</name></type> <name pos:line="1015" pos:column="16">rcText</name> <init pos:line="1015" pos:column="23">= <expr><call><name pos:line="1015" pos:column="25">GetTextRectangle</name><argument_list pos:line="1015" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1016" pos:column="5">paintingAllText</name> <op:operator pos:line="1016" pos:column="21">=</op:operator> <call><name><name pos:line="1016" pos:column="23">rcPaint</name><op:operator pos:line="1016" pos:column="30">.</op:operator><name pos:line="1016" pos:column="31">Contains</name></name><argument_list pos:line="1016" pos:column="39">(<argument><expr><name pos:line="1016" pos:column="40">rcText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1017" pos:column="5">//Platform::DebugPrintf("ScintillaMacOSX::SyncPaint %0d,%0d %0d,%0d\n",</comment>
    <comment type="line" pos:line="1018" pos:column="5">//  rcPaint.left, rcPaint.top, rcPaint.right, rcPaint.bottom);</comment>
    <decl_stmt><decl><type><name pos:line="1019" pos:column="5">Surface</name> <type:modifier pos:line="1019" pos:column="13">*</type:modifier></type><name pos:line="1019" pos:column="14">sw</name> <init pos:line="1019" pos:column="17">= <expr><call><name><name pos:line="1019" pos:column="19">Surface</name><op:operator pos:line="1019" pos:column="26">::</op:operator><name pos:line="1019" pos:column="28">Allocate</name></name><argument_list pos:line="1019" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1020" pos:column="5">if <condition pos:line="1020" pos:column="8">(<expr><name pos:line="1020" pos:column="9">sw</name></expr>)</condition><then pos:line="1020" pos:column="12"> <block pos:line="1020" pos:column="13">{
        <expr_stmt><expr><call><name><name pos:line="1021" pos:column="9">sw</name><op:operator pos:line="1021" pos:column="11">-&gt;</op:operator><name pos:line="1021" pos:column="13">Init</name></name><argument_list pos:line="1021" pos:column="17">( <argument><expr><name pos:line="1021" pos:column="19">gc</name></expr></argument>, <argument><expr><call><name><name pos:line="1021" pos:column="23">wMain</name><op:operator pos:line="1021" pos:column="28">.</op:operator><name pos:line="1021" pos:column="29">GetID</name></name><argument_list pos:line="1021" pos:column="34">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1022" pos:column="9">Paint</name><argument_list pos:line="1022" pos:column="14">(<argument><expr><name pos:line="1022" pos:column="15">sw</name></expr></argument>, <argument><expr><name pos:line="1022" pos:column="19">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="1023" pos:column="9">if <condition pos:line="1023" pos:column="12">(<expr><name pos:line="1023" pos:column="13">paintState</name> <op:operator pos:line="1023" pos:column="24">==</op:operator> <name pos:line="1023" pos:column="27">paintAbandoned</name></expr>)</condition><then pos:line="1023" pos:column="42"> <block pos:line="1023" pos:column="43">{
          <comment type="line" pos:line="1024" pos:column="11">// do a FULL paint.</comment>
          <expr_stmt><expr><name pos:line="1025" pos:column="11">rcPaint</name> <op:operator pos:line="1025" pos:column="19">=</op:operator> <call><name pos:line="1025" pos:column="21">GetClientRectangle</name><argument_list pos:line="1025" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="1026" pos:column="11">paintState</name> <op:operator pos:line="1026" pos:column="22">=</op:operator> <name pos:line="1026" pos:column="24">painting</name></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="1027" pos:column="11">paintingAllText</name> <op:operator pos:line="1027" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="1027" pos:column="29">true</lit:literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name pos:line="1028" pos:column="11">Paint</name><argument_list pos:line="1028" pos:column="16">(<argument><expr><name pos:line="1028" pos:column="17">sw</name></expr></argument>, <argument><expr><name pos:line="1028" pos:column="21">rcPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="1029" pos:column="11">wMain</name><op:operator pos:line="1029" pos:column="16">.</op:operator><name pos:line="1029" pos:column="17">InvalidateAll</name></name><argument_list pos:line="1029" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name pos:line="1031" pos:column="9">sw</name><op:operator pos:line="1031" pos:column="11">-&gt;</op:operator><name pos:line="1031" pos:column="13">Release</name></name><argument_list pos:line="1031" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><op:operator pos:line="1032" pos:column="9">delete</op:operator> <name pos:line="1032" pos:column="16">sw</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name pos:line="1034" pos:column="5">paintState</name> <op:operator pos:line="1034" pos:column="16">=</op:operator> <name pos:line="1034" pos:column="18">notPainting</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1037" pos:column="1">void</name></type> <name><name pos:line="1037" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1037" pos:column="21">::</op:operator><name pos:line="1037" pos:column="23">ScrollText</name></name><parameter_list pos:line="1037" pos:column="33">(<param><decl><type><name pos:line="1037" pos:column="34">int</name></type></decl></param> <comment type="block" pos:line="1037" pos:column="38">/*linesToMove*/</comment>)</parameter_list> <block pos:line="1037" pos:column="55">{
    <comment type="line" pos:line="1038" pos:column="5">// This function will invalidate the correct regions of the view,</comment>
    <comment type="line" pos:line="1039" pos:column="5">// So shortly after this happens, draw will be called.</comment>
    <comment type="line" pos:line="1040" pos:column="5">// But I'm not quite sure how this works ...</comment>
    <comment type="line" pos:line="1041" pos:column="5">// I have a feeling that it is only supposed to work in conjunction with an HIScrollView.</comment>
    <comment type="line" pos:line="1042" pos:column="5">// TODO: Cook up my own bitblt scroll: Grab the bits on screen, blit them shifted, invalidate the remaining stuff</comment>
    <comment type="line" pos:line="1043" pos:column="5">//CGRect r = CGRectMake( 0, 0, rc.Width(), rc.Height() );</comment>
    <comment type="line" pos:line="1044" pos:column="5">//HIViewScrollRect( reinterpret_cast&lt;HIViewRef&gt;( wMain.GetID() ), NULL, 0, vs.lineHeight * linesToMove );</comment>
    <expr_stmt><expr><call><name><name pos:line="1045" pos:column="5">wMain</name><op:operator pos:line="1045" pos:column="10">.</op:operator><name pos:line="1045" pos:column="11">InvalidateAll</name></name><argument_list pos:line="1045" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1048" pos:column="1">void</name></type> <name><name pos:line="1048" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1048" pos:column="21">::</op:operator><name pos:line="1048" pos:column="23">SetVerticalScrollPos</name></name><parameter_list pos:line="1048" pos:column="43">()</parameter_list> <block pos:line="1048" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="1049" pos:column="5">SetControl32BitValue</name><argument_list pos:line="1049" pos:column="25">( <argument><expr><name pos:line="1049" pos:column="27">vScrollBar</name></expr></argument>, <argument><expr><name pos:line="1049" pos:column="39">topLine</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1052" pos:column="1">void</name></type> <name><name pos:line="1052" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1052" pos:column="21">::</op:operator><name pos:line="1052" pos:column="23">SetHorizontalScrollPos</name></name><parameter_list pos:line="1052" pos:column="45">()</parameter_list> <block pos:line="1052" pos:column="48">{
    <expr_stmt><expr><call><name pos:line="1053" pos:column="5">SetControl32BitValue</name><argument_list pos:line="1053" pos:column="25">( <argument><expr><name pos:line="1053" pos:column="27">hScrollBar</name></expr></argument>, <argument><expr><name pos:line="1053" pos:column="39">xOffset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1056" pos:column="1">bool</name></type> <name><name pos:line="1056" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1056" pos:column="21">::</op:operator><name pos:line="1056" pos:column="23">ModifyScrollBars</name></name><parameter_list pos:line="1056" pos:column="39">(<param><decl><type><name pos:line="1056" pos:column="40">int</name></type> <name pos:line="1056" pos:column="44">nMax</name></decl></param>, <param><decl><type><name pos:line="1056" pos:column="50">int</name></type> <name pos:line="1056" pos:column="54">nPage</name></decl></param>)</parameter_list> <block pos:line="1056" pos:column="61">{
    <expr_stmt><expr><call><name><name pos:line="1057" pos:column="5">Platform</name><op:operator pos:line="1057" pos:column="13">::</op:operator><name pos:line="1057" pos:column="15">DebugPrintf</name></name><argument_list pos:line="1057" pos:column="26">( <argument><expr><lit:literal type="string" pos:line="1057" pos:column="28">"nMax: %d nPage: %d hScroll (%d -&gt; %d) page: %d\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="1057" pos:column="80">nMax</name></expr></argument>, <argument><expr><name pos:line="1057" pos:column="86">nPage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1057" pos:column="93">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1057" pos:column="96">scrollWidth</name></expr></argument>, <argument><expr><call><name pos:line="1057" pos:column="109">GetTextRectangle</name><argument_list pos:line="1057" pos:column="125">()</argument_list></call><op:operator pos:line="1057" pos:column="127">.</op:operator><call><name pos:line="1057" pos:column="128">Width</name><argument_list pos:line="1057" pos:column="133">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1058" pos:column="5">// Minimum value = 0</comment>
    <comment type="line" pos:line="1059" pos:column="5">// TODO: This is probably not needed, since we set this when the scroll bars are created</comment>
    <expr_stmt><expr><call><name pos:line="1060" pos:column="5">SetControl32BitMinimum</name><argument_list pos:line="1060" pos:column="27">( <argument><expr><name pos:line="1060" pos:column="29">vScrollBar</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1060" pos:column="41">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1061" pos:column="5">SetControl32BitMinimum</name><argument_list pos:line="1061" pos:column="27">( <argument><expr><name pos:line="1061" pos:column="29">hScrollBar</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1061" pos:column="41">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1063" pos:column="5">// Maximum vertical value = nMax + 1 - nPage (lines available to scroll)</comment>
    <expr_stmt><expr><call><name pos:line="1064" pos:column="5">SetControl32BitMaximum</name><argument_list pos:line="1064" pos:column="27">( <argument><expr><name pos:line="1064" pos:column="29">vScrollBar</name></expr></argument>, <argument><expr><call><name><name pos:line="1064" pos:column="41">Platform</name><op:operator pos:line="1064" pos:column="49">::</op:operator><name pos:line="1064" pos:column="51">Maximum</name></name><argument_list pos:line="1064" pos:column="58">( <argument><expr><name pos:line="1064" pos:column="60">nMax</name> <op:operator pos:line="1064" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="1064" pos:column="67">1</lit:literal> <op:operator pos:line="1064" pos:column="69">-</op:operator> <name pos:line="1064" pos:column="71">nPage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1064" pos:column="78">0</lit:literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1065" pos:column="5">// Maximum horizontal value = scrollWidth - GetTextRectangle().Width() (pixels available to scroll)</comment>
    <expr_stmt><expr><call><name pos:line="1066" pos:column="5">SetControl32BitMaximum</name><argument_list pos:line="1066" pos:column="27">( <argument><expr><name pos:line="1066" pos:column="29">hScrollBar</name></expr></argument>, <argument><expr><call><name><name pos:line="1066" pos:column="41">Platform</name><op:operator pos:line="1066" pos:column="49">::</op:operator><name pos:line="1066" pos:column="51">Maximum</name></name><argument_list pos:line="1066" pos:column="58">( <argument><expr><name pos:line="1066" pos:column="60">scrollWidth</name> <op:operator pos:line="1066" pos:column="72">-</op:operator> <call><name pos:line="1066" pos:column="74">GetTextRectangle</name><argument_list pos:line="1066" pos:column="90">()</argument_list></call><op:operator pos:line="1066" pos:column="92">.</op:operator><call><name pos:line="1066" pos:column="93">Width</name><argument_list pos:line="1066" pos:column="98">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1066" pos:column="102">0</lit:literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1068" pos:column="5">// Vertical page size = nPage</comment>
    <expr_stmt><expr><call><name pos:line="1069" pos:column="5">SetControlViewSize</name><argument_list pos:line="1069" pos:column="23">( <argument><expr><name pos:line="1069" pos:column="25">vScrollBar</name></expr></argument>, <argument><expr><name pos:line="1069" pos:column="37">nPage</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1070" pos:column="5">// Horizontal page size = TextRectangle().Width()</comment>
    <expr_stmt><expr><call><name pos:line="1071" pos:column="5">SetControlViewSize</name><argument_list pos:line="1071" pos:column="23">( <argument><expr><name pos:line="1071" pos:column="25">hScrollBar</name></expr></argument>, <argument><expr><call><name pos:line="1071" pos:column="37">GetTextRectangle</name><argument_list pos:line="1071" pos:column="53">()</argument_list></call><op:operator pos:line="1071" pos:column="55">.</op:operator><call><name pos:line="1071" pos:column="56">Width</name><argument_list pos:line="1071" pos:column="61">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1073" pos:column="5">// TODO: Verify what this return value is for</comment>
    <comment type="line" pos:line="1074" pos:column="5">// The scroll bar components will handle if they need to be rerendered or not</comment>
    <return pos:line="1075" pos:column="5">return <expr><lit:literal type="boolean" pos:line="1075" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1078" pos:column="1">void</name></type> <name><name pos:line="1078" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1078" pos:column="21">::</op:operator><name pos:line="1078" pos:column="23">ReconfigureScrollBars</name></name><parameter_list pos:line="1078" pos:column="44">()</parameter_list> <block pos:line="1078" pos:column="47">{
    <decl_stmt><decl><type><name pos:line="1079" pos:column="5">PRectangle</name></type> <name pos:line="1079" pos:column="16">rc</name> <init pos:line="1079" pos:column="19">= <expr><call><name><name pos:line="1079" pos:column="21">wMain</name><op:operator pos:line="1079" pos:column="26">.</op:operator><name pos:line="1079" pos:column="27">GetClientPosition</name></name><argument_list pos:line="1079" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1080" pos:column="5">Resize</name><argument_list pos:line="1080" pos:column="11">(<argument><expr><call><name><name pos:line="1080" pos:column="12">rc</name><op:operator pos:line="1080" pos:column="14">.</op:operator><name pos:line="1080" pos:column="15">Width</name></name><argument_list pos:line="1080" pos:column="20">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1080" pos:column="24">rc</name><op:operator pos:line="1080" pos:column="26">.</op:operator><name pos:line="1080" pos:column="27">Height</name></name><argument_list pos:line="1080" pos:column="33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1083" pos:column="1">void</name></type> <name><name pos:line="1083" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1083" pos:column="21">::</op:operator><name pos:line="1083" pos:column="23">Resize</name></name><parameter_list pos:line="1083" pos:column="29">(<param><decl><type><name pos:line="1083" pos:column="30">int</name></type> <name pos:line="1083" pos:column="34">width</name></decl></param>, <param><decl><type><name pos:line="1083" pos:column="41">int</name></type> <name pos:line="1083" pos:column="45">height</name></decl></param>)</parameter_list> <block pos:line="1083" pos:column="53">{
    <comment type="line" pos:line="1084" pos:column="5">// Get the horizontal/vertical size of the scroll bars</comment>
    <expr_stmt><expr><call><name pos:line="1085" pos:column="5">GetThemeMetric</name><argument_list pos:line="1085" pos:column="19">( <argument><expr><name pos:line="1085" pos:column="21">kThemeMetricScrollBarWidth</name></expr></argument>, <argument><expr><op:operator pos:line="1085" pos:column="49">&amp;</op:operator><name pos:line="1085" pos:column="50">scrollBarFixedSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1087" pos:column="5">bool</name></type> <name pos:line="1087" pos:column="10">showSBHorizontal</name> <init pos:line="1087" pos:column="27">= <expr><name pos:line="1087" pos:column="29">horizontalScrollBarVisible</name> <op:operator pos:line="1087" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="1087" pos:column="59">(</op:operator><name pos:line="1087" pos:column="60">wrapState</name> <op:operator pos:line="1087" pos:column="70">==</op:operator> <name pos:line="1087" pos:column="73">eWrapNone</name><op:operator pos:line="1087" pos:column="82">)</op:operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1088" pos:column="5">HIRect</name></type> <name pos:line="1088" pos:column="12">scrollRect</name></decl>;</decl_stmt>
    <if pos:line="1089" pos:column="5">if <condition pos:line="1089" pos:column="8">(<expr><name pos:line="1089" pos:column="9">verticalScrollBarVisible</name></expr>)</condition><then pos:line="1089" pos:column="34"> <block pos:line="1089" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="1090" pos:column="9">scrollRect</name><op:operator pos:line="1090" pos:column="19">.</op:operator><name pos:line="1090" pos:column="20">origin</name><op:operator pos:line="1090" pos:column="26">.</op:operator><name pos:line="1090" pos:column="27">x</name></name> <op:operator pos:line="1090" pos:column="29">=</op:operator> <name pos:line="1090" pos:column="31">width</name> <op:operator pos:line="1090" pos:column="37">-</op:operator> <name pos:line="1090" pos:column="39">scrollBarFixedSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1091" pos:column="9">scrollRect</name><op:operator pos:line="1091" pos:column="19">.</op:operator><name pos:line="1091" pos:column="20">origin</name><op:operator pos:line="1091" pos:column="26">.</op:operator><name pos:line="1091" pos:column="27">y</name></name> <op:operator pos:line="1091" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="1091" pos:column="31">0</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1092" pos:column="9">scrollRect</name><op:operator pos:line="1092" pos:column="19">.</op:operator><name pos:line="1092" pos:column="20">size</name><op:operator pos:line="1092" pos:column="24">.</op:operator><name pos:line="1092" pos:column="25">width</name></name> <op:operator pos:line="1092" pos:column="31">=</op:operator> <name pos:line="1092" pos:column="33">scrollBarFixedSize</name></expr>;</expr_stmt>
        <if pos:line="1093" pos:column="9">if <condition pos:line="1093" pos:column="12">(<expr><name pos:line="1093" pos:column="13">showSBHorizontal</name></expr>)</condition><then pos:line="1093" pos:column="30"> <block pos:line="1093" pos:column="31">{
            <expr_stmt><expr><name><name pos:line="1094" pos:column="13">scrollRect</name><op:operator pos:line="1094" pos:column="23">.</op:operator><name pos:line="1094" pos:column="24">size</name><op:operator pos:line="1094" pos:column="28">.</op:operator><name pos:line="1094" pos:column="29">height</name></name> <op:operator pos:line="1094" pos:column="36">=</op:operator> <call><name><name pos:line="1094" pos:column="38">Platform</name><op:operator pos:line="1094" pos:column="46">::</op:operator><name pos:line="1094" pos:column="48">Maximum</name></name><argument_list pos:line="1094" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="1094" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1094" pos:column="59">height</name> <op:operator pos:line="1094" pos:column="66">-</op:operator> <name pos:line="1094" pos:column="68">scrollBarFixedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="1095" pos:column="11">else <block pos:line="1095" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="1096" pos:column="13">scrollRect</name><op:operator pos:line="1096" pos:column="23">.</op:operator><name pos:line="1096" pos:column="24">size</name><op:operator pos:line="1096" pos:column="28">.</op:operator><name pos:line="1096" pos:column="29">height</name></name> <op:operator pos:line="1096" pos:column="36">=</op:operator> <name pos:line="1096" pos:column="38">height</name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name pos:line="1099" pos:column="9">HIViewSetFrame</name><argument_list pos:line="1099" pos:column="23">( <argument><expr><name pos:line="1099" pos:column="25">vScrollBar</name></expr></argument>, <argument><expr><op:operator pos:line="1099" pos:column="37">&amp;</op:operator><name pos:line="1099" pos:column="38">scrollRect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if pos:line="1100" pos:column="9">if <condition pos:line="1100" pos:column="12">(<expr><call><name pos:line="1100" pos:column="13">HIViewGetSuperview</name><argument_list pos:line="1100" pos:column="31">(<argument><expr><name pos:line="1100" pos:column="32">vScrollBar</name></expr></argument>)</argument_list></call> <op:operator pos:line="1100" pos:column="44">==</op:operator> <name pos:line="1100" pos:column="47">NULL</name></expr>)</condition><then pos:line="1100" pos:column="52"> <block pos:line="1100" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="1101" pos:column="13">HIViewSetDrawingEnabled</name><argument_list pos:line="1101" pos:column="36">( <argument><expr><name pos:line="1101" pos:column="38">vScrollBar</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1101" pos:column="50">true</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="1102" pos:column="13">HIViewSetVisible</name><argument_list pos:line="1102" pos:column="29">(<argument><expr><name pos:line="1102" pos:column="30">vScrollBar</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1102" pos:column="42">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="1103" pos:column="13">HIViewAddSubview</name><argument_list pos:line="1103" pos:column="29">(<argument><expr><call><name pos:line="1103" pos:column="30">GetViewRef</name><argument_list pos:line="1103" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1103" pos:column="44">vScrollBar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="1104" pos:column="13">Draw1Control</name><argument_list pos:line="1104" pos:column="25">(<argument><expr><name pos:line="1104" pos:column="26">vScrollBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then> <else pos:line="1106" pos:column="7">else <if pos:line="1106" pos:column="12">if <condition pos:line="1106" pos:column="15">(<expr><call><name pos:line="1106" pos:column="16">HIViewGetSuperview</name><argument_list pos:line="1106" pos:column="34">(<argument><expr><name pos:line="1106" pos:column="35">vScrollBar</name></expr></argument>)</argument_list></call> <op:operator pos:line="1106" pos:column="47">!=</op:operator> <name pos:line="1106" pos:column="50">NULL</name></expr>)</condition><then pos:line="1106" pos:column="55"> <block pos:line="1106" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="1107" pos:column="9">HIViewSetDrawingEnabled</name><argument_list pos:line="1107" pos:column="32">( <argument><expr><name pos:line="1107" pos:column="34">vScrollBar</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1107" pos:column="46">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1108" pos:column="9">HIViewRemoveFromSuperview</name><argument_list pos:line="1108" pos:column="34">(<argument><expr><name pos:line="1108" pos:column="35">vScrollBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <if pos:line="1111" pos:column="5">if <condition pos:line="1111" pos:column="8">(<expr><name pos:line="1111" pos:column="9">showSBHorizontal</name></expr>)</condition><then pos:line="1111" pos:column="26"> <block pos:line="1111" pos:column="27">{
        <expr_stmt><expr><name><name pos:line="1112" pos:column="9">scrollRect</name><op:operator pos:line="1112" pos:column="19">.</op:operator><name pos:line="1112" pos:column="20">origin</name><op:operator pos:line="1112" pos:column="26">.</op:operator><name pos:line="1112" pos:column="27">x</name></name> <op:operator pos:line="1112" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="1112" pos:column="31">0</lit:literal></expr>;</expr_stmt>
        <comment type="line" pos:line="1113" pos:column="9">// Always draw the scrollbar to avoid the "potiential" horizontal scroll bar and to avoid the resize box.</comment>
        <comment type="line" pos:line="1114" pos:column="9">// This should be "good enough". Best would be to avoid the resize box.</comment>
        <comment type="line" pos:line="1115" pos:column="9">// Even better would be to embed Scintilla inside an HIScrollView, which would handle this for us.</comment>
        <expr_stmt><expr><name><name pos:line="1116" pos:column="9">scrollRect</name><op:operator pos:line="1116" pos:column="19">.</op:operator><name pos:line="1116" pos:column="20">origin</name><op:operator pos:line="1116" pos:column="26">.</op:operator><name pos:line="1116" pos:column="27">y</name></name> <op:operator pos:line="1116" pos:column="29">=</op:operator> <name pos:line="1116" pos:column="31">height</name> <op:operator pos:line="1116" pos:column="38">-</op:operator> <name pos:line="1116" pos:column="40">scrollBarFixedSize</name></expr>;</expr_stmt>
        <if pos:line="1117" pos:column="9">if <condition pos:line="1117" pos:column="12">(<expr><name pos:line="1117" pos:column="13">verticalScrollBarVisible</name></expr>)</condition><then pos:line="1117" pos:column="38"> <block pos:line="1117" pos:column="39">{
            <expr_stmt><expr><name><name pos:line="1118" pos:column="13">scrollRect</name><op:operator pos:line="1118" pos:column="23">.</op:operator><name pos:line="1118" pos:column="24">size</name><op:operator pos:line="1118" pos:column="28">.</op:operator><name pos:line="1118" pos:column="29">width</name></name> <op:operator pos:line="1118" pos:column="35">=</op:operator> <call><name><name pos:line="1118" pos:column="37">Platform</name><op:operator pos:line="1118" pos:column="45">::</op:operator><name pos:line="1118" pos:column="47">Maximum</name></name><argument_list pos:line="1118" pos:column="54">( <argument><expr><lit:literal type="number" pos:line="1118" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1118" pos:column="59">width</name> <op:operator pos:line="1118" pos:column="65">-</op:operator> <name pos:line="1118" pos:column="67">scrollBarFixedSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="1119" pos:column="11">else <block pos:line="1119" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="1120" pos:column="13">scrollRect</name><op:operator pos:line="1120" pos:column="23">.</op:operator><name pos:line="1120" pos:column="24">size</name><op:operator pos:line="1120" pos:column="28">.</op:operator><name pos:line="1120" pos:column="29">width</name></name> <op:operator pos:line="1120" pos:column="35">=</op:operator> <name pos:line="1120" pos:column="37">width</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name pos:line="1122" pos:column="9">scrollRect</name><op:operator pos:line="1122" pos:column="19">.</op:operator><name pos:line="1122" pos:column="20">size</name><op:operator pos:line="1122" pos:column="24">.</op:operator><name pos:line="1122" pos:column="25">height</name></name> <op:operator pos:line="1122" pos:column="32">=</op:operator> <name pos:line="1122" pos:column="34">scrollBarFixedSize</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="1124" pos:column="9">HIViewSetFrame</name><argument_list pos:line="1124" pos:column="23">( <argument><expr><name pos:line="1124" pos:column="25">hScrollBar</name></expr></argument>, <argument><expr><op:operator pos:line="1124" pos:column="37">&amp;</op:operator><name pos:line="1124" pos:column="38">scrollRect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if pos:line="1125" pos:column="9">if <condition pos:line="1125" pos:column="12">(<expr><call><name pos:line="1125" pos:column="13">HIViewGetSuperview</name><argument_list pos:line="1125" pos:column="31">(<argument><expr><name pos:line="1125" pos:column="32">hScrollBar</name></expr></argument>)</argument_list></call> <op:operator pos:line="1125" pos:column="44">==</op:operator> <name pos:line="1125" pos:column="47">NULL</name></expr>)</condition><then pos:line="1125" pos:column="52"> <block pos:line="1125" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="1126" pos:column="13">HIViewSetDrawingEnabled</name><argument_list pos:line="1126" pos:column="36">( <argument><expr><name pos:line="1126" pos:column="38">hScrollBar</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1126" pos:column="50">true</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="1127" pos:column="13">HIViewAddSubview</name><argument_list pos:line="1127" pos:column="29">( <argument><expr><call><name pos:line="1127" pos:column="31">GetViewRef</name><argument_list pos:line="1127" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1127" pos:column="45">hScrollBar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="1128" pos:column="13">Draw1Control</name><argument_list pos:line="1128" pos:column="25">(<argument><expr><name pos:line="1128" pos:column="26">hScrollBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then> <else pos:line="1130" pos:column="7">else  <if pos:line="1130" pos:column="13">if <condition pos:line="1130" pos:column="16">(<expr><call><name pos:line="1130" pos:column="17">HIViewGetSuperview</name><argument_list pos:line="1130" pos:column="35">(<argument><expr><name pos:line="1130" pos:column="36">hScrollBar</name></expr></argument>)</argument_list></call> <op:operator pos:line="1130" pos:column="48">!=</op:operator> <name pos:line="1130" pos:column="51">NULL</name></expr>)</condition><then pos:line="1130" pos:column="56"> <block pos:line="1130" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="1131" pos:column="9">HIViewSetDrawingEnabled</name><argument_list pos:line="1131" pos:column="32">( <argument><expr><name pos:line="1131" pos:column="34">hScrollBar</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1131" pos:column="46">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1132" pos:column="9">HIViewRemoveFromSuperview</name><argument_list pos:line="1132" pos:column="34">(<argument><expr><name pos:line="1132" pos:column="35">hScrollBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <expr_stmt><expr><call><name pos:line="1135" pos:column="5">ChangeSize</name><argument_list pos:line="1135" pos:column="15">()</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1137" pos:column="5">// fixup mouse tracking regions, this causes mouseenter/exit to work</comment>
    <if pos:line="1138" pos:column="5">if <condition pos:line="1138" pos:column="8">(<expr><call><name pos:line="1138" pos:column="9">HIViewGetSuperview</name><argument_list pos:line="1138" pos:column="27">(<argument><expr><call><name pos:line="1138" pos:column="28">GetViewRef</name><argument_list pos:line="1138" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1138" pos:column="42">!=</op:operator> <name pos:line="1138" pos:column="45">NULL</name></expr>)</condition><then pos:line="1138" pos:column="50"> <block pos:line="1138" pos:column="51">{
        <decl_stmt><decl><type><name pos:line="1139" pos:column="9">RgnHandle</name></type> <name pos:line="1139" pos:column="19">rgn</name> <init pos:line="1139" pos:column="23">= <expr><call><name pos:line="1139" pos:column="25">NewRgn</name><argument_list pos:line="1139" pos:column="31">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1140" pos:column="9">HIRect</name></type> <name pos:line="1140" pos:column="16">r</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1141" pos:column="9">HIViewGetFrame</name><argument_list pos:line="1141" pos:column="23">( <argument><expr><call><name><name pos:line="1141" pos:column="25">reinterpret_cast</name><argument_list pos:line="1141" pos:column="41">&lt;<argument><expr><name pos:line="1141" pos:column="42">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1141" pos:column="52">( <argument><expr><call><name pos:line="1141" pos:column="54">GetViewRef</name><argument_list pos:line="1141" pos:column="64">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1141" pos:column="70">&amp;</op:operator><name pos:line="1141" pos:column="71">r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1142" pos:column="9">SetRectRgn</name><argument_list pos:line="1142" pos:column="19">(<argument><expr><name pos:line="1142" pos:column="20">rgn</name></expr></argument>, <argument><expr><call><name pos:line="1142" pos:column="25">short</name> <argument_list pos:line="1142" pos:column="31">(<argument><expr><name><name pos:line="1142" pos:column="32">r</name><op:operator pos:line="1142" pos:column="33">.</op:operator><name pos:line="1142" pos:column="34">origin</name><op:operator pos:line="1142" pos:column="40">.</op:operator><name pos:line="1142" pos:column="41">x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1142" pos:column="45">short</name> <argument_list pos:line="1142" pos:column="51">(<argument><expr><name><name pos:line="1142" pos:column="52">r</name><op:operator pos:line="1142" pos:column="53">.</op:operator><name pos:line="1142" pos:column="54">origin</name><op:operator pos:line="1142" pos:column="60">.</op:operator><name pos:line="1142" pos:column="61">y</name></name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name pos:line="1143" pos:column="19">short</name> <argument_list pos:line="1143" pos:column="25">(<argument><expr><name><name pos:line="1143" pos:column="26">r</name><op:operator pos:line="1143" pos:column="27">.</op:operator><name pos:line="1143" pos:column="28">origin</name><op:operator pos:line="1143" pos:column="34">.</op:operator><name pos:line="1143" pos:column="35">x</name></name> <op:operator pos:line="1143" pos:column="37">+</op:operator> <name><name pos:line="1143" pos:column="39">r</name><op:operator pos:line="1143" pos:column="40">.</op:operator><name pos:line="1143" pos:column="41">size</name><op:operator pos:line="1143" pos:column="45">.</op:operator><name pos:line="1143" pos:column="46">width</name></name> <op:operator pos:line="1143" pos:column="52">-</op:operator> <op:operator pos:line="1143" pos:column="54">(</op:operator><name pos:line="1143" pos:column="55">verticalScrollBarVisible</name> <op:operator pos:line="1143" pos:column="80">?</op:operator> <name pos:line="1143" pos:column="82">scrollBarFixedSize</name> <op:operator pos:line="1143" pos:column="101">:</op:operator> <lit:literal type="number" pos:line="1143" pos:column="103">0</lit:literal><op:operator pos:line="1143" pos:column="104">)</op:operator></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name pos:line="1144" pos:column="19">short</name> <argument_list pos:line="1144" pos:column="25">(<argument><expr><name><name pos:line="1144" pos:column="26">r</name><op:operator pos:line="1144" pos:column="27">.</op:operator><name pos:line="1144" pos:column="28">origin</name><op:operator pos:line="1144" pos:column="34">.</op:operator><name pos:line="1144" pos:column="35">y</name></name> <op:operator pos:line="1144" pos:column="37">+</op:operator> <name><name pos:line="1144" pos:column="39">r</name><op:operator pos:line="1144" pos:column="40">.</op:operator><name pos:line="1144" pos:column="41">size</name><op:operator pos:line="1144" pos:column="45">.</op:operator><name pos:line="1144" pos:column="46">height</name></name> <op:operator pos:line="1144" pos:column="53">-</op:operator> <op:operator pos:line="1144" pos:column="55">(</op:operator><name pos:line="1144" pos:column="56">showSBHorizontal</name> <op:operator pos:line="1144" pos:column="73">?</op:operator> <name pos:line="1144" pos:column="75">scrollBarFixedSize</name> <op:operator pos:line="1144" pos:column="94">:</op:operator> <lit:literal type="number" pos:line="1144" pos:column="96">0</lit:literal><op:operator pos:line="1144" pos:column="97">)</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="1145" pos:column="9">if <condition pos:line="1145" pos:column="12">(<expr><name pos:line="1145" pos:column="13">mouseTrackingRef</name> <op:operator pos:line="1145" pos:column="30">==</op:operator> <name pos:line="1145" pos:column="33">NULL</name></expr>)</condition><then pos:line="1145" pos:column="38"> <block pos:line="1145" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="1146" pos:column="13">CreateMouseTrackingRegion</name><argument_list pos:line="1146" pos:column="38">(<argument><expr><call><name pos:line="1146" pos:column="39">GetOwner</name><argument_list pos:line="1146" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1146" pos:column="51">rgn</name></expr></argument>, <argument><expr><name pos:line="1146" pos:column="56">NULL</name></expr></argument>,
                                        <argument><expr><name pos:line="1147" pos:column="41">kMouseTrackingOptionsLocalClip</name></expr></argument>,
                                        <argument><expr><name pos:line="1148" pos:column="41">mouseTrackingID</name></expr></argument>, <argument><expr><name pos:line="1148" pos:column="58">NULL</name></expr></argument>,
                                        <argument><expr><call><name pos:line="1149" pos:column="41">GetControlEventTarget</name><argument_list pos:line="1149" pos:column="62">( <argument><expr><call><name pos:line="1149" pos:column="64">GetViewRef</name><argument_list pos:line="1149" pos:column="74">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
                                        <argument><expr><op:operator pos:line="1150" pos:column="41">&amp;</op:operator><name pos:line="1150" pos:column="42">mouseTrackingRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="1151" pos:column="11">else <block pos:line="1151" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="1152" pos:column="13">ChangeMouseTrackingRegion</name><argument_list pos:line="1152" pos:column="38">(<argument><expr><name pos:line="1152" pos:column="39">mouseTrackingRef</name></expr></argument>, <argument><expr><name pos:line="1152" pos:column="57">rgn</name></expr></argument>, <argument><expr><name pos:line="1152" pos:column="62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name pos:line="1154" pos:column="9">DisposeRgn</name><argument_list pos:line="1154" pos:column="19">(<argument><expr><name pos:line="1154" pos:column="20">rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="1155" pos:column="7">else <block pos:line="1155" pos:column="12">{
        <if pos:line="1156" pos:column="9">if <condition pos:line="1156" pos:column="12">(<expr><name pos:line="1156" pos:column="13">mouseTrackingRef</name> <op:operator pos:line="1156" pos:column="30">!=</op:operator> <name pos:line="1156" pos:column="33">NULL</name></expr>)</condition><then pos:line="1156" pos:column="38"> <block pos:line="1156" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="1157" pos:column="13">ReleaseMouseTrackingRegion</name><argument_list pos:line="1157" pos:column="39">(<argument><expr><name pos:line="1157" pos:column="40">mouseTrackingRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name pos:line="1159" pos:column="9">mouseTrackingRef</name> <op:operator pos:line="1159" pos:column="26">=</op:operator> <name pos:line="1159" pos:column="28">NULL</name></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name pos:line="1163" pos:column="1">pascal</name> <name pos:line="1163" pos:column="8">void</name></type> <name><name pos:line="1163" pos:column="13">ScintillaMacOSX</name><op:operator pos:line="1163" pos:column="28">::</op:operator><name pos:line="1163" pos:column="30">LiveScrollHandler</name></name><parameter_list pos:line="1163" pos:column="47">( <param><decl><type><name pos:line="1163" pos:column="49">HIViewRef</name></type> <name pos:line="1163" pos:column="59">control</name></decl></param>, <param><decl><type><name pos:line="1163" pos:column="68">SInt16</name></type> <name pos:line="1163" pos:column="75">part</name></decl></param> )</parameter_list>
<block pos:line="1164" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1165" pos:column="5">int</name></type> <name pos:line="1165" pos:column="9">currentValue</name> <init pos:line="1165" pos:column="22">= <expr><call><name pos:line="1165" pos:column="24">GetControl32BitValue</name><argument_list pos:line="1165" pos:column="44">( <argument><expr><name pos:line="1165" pos:column="46">control</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1166" pos:column="5">int</name></type> <name pos:line="1166" pos:column="9">min</name> <init pos:line="1166" pos:column="13">= <expr><call><name pos:line="1166" pos:column="15">GetControl32BitMinimum</name><argument_list pos:line="1166" pos:column="37">( <argument><expr><name pos:line="1166" pos:column="39">control</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1167" pos:column="5">int</name></type> <name pos:line="1167" pos:column="9">max</name> <init pos:line="1167" pos:column="13">= <expr><call><name pos:line="1167" pos:column="15">GetControl32BitMaximum</name><argument_list pos:line="1167" pos:column="37">( <argument><expr><name pos:line="1167" pos:column="39">control</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1168" pos:column="5">int</name></type> <name pos:line="1168" pos:column="9">page</name> <init pos:line="1168" pos:column="14">= <expr><call><name pos:line="1168" pos:column="16">GetControlViewSize</name><argument_list pos:line="1168" pos:column="34">( <argument><expr><name pos:line="1168" pos:column="36">control</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="1170" pos:column="5">// Get a reference to the Scintilla C++ object</comment>
    <decl_stmt><decl><type><name pos:line="1171" pos:column="5">ScintillaMacOSX</name><type:modifier pos:line="1171" pos:column="20">*</type:modifier></type> <name pos:line="1171" pos:column="22">scintilla</name> <init pos:line="1171" pos:column="32">= <expr><name pos:line="1171" pos:column="34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1172" pos:column="5">OSStatus</name></type> <name pos:line="1172" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1173" pos:column="5">err</name> <op:operator pos:line="1173" pos:column="9">=</op:operator> <call><name pos:line="1173" pos:column="11">GetControlProperty</name><argument_list pos:line="1173" pos:column="29">( <argument><expr><name pos:line="1173" pos:column="31">control</name></expr></argument>, <argument><expr><name pos:line="1173" pos:column="40">scintillaMacOSType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1173" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="1173" pos:column="63">sizeof<argument_list pos:line="1173" pos:column="69">( <argument><expr><name pos:line="1173" pos:column="71">scintilla</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1173" pos:column="84">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1173" pos:column="90">&amp;</op:operator><name pos:line="1173" pos:column="91">scintilla</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1174" pos:column="5">assert</name><argument_list pos:line="1174" pos:column="11">( <argument><expr><name pos:line="1174" pos:column="13">err</name> <op:operator pos:line="1174" pos:column="17">==</op:operator> <name pos:line="1174" pos:column="20">noErr</name> <op:operator pos:line="1174" pos:column="26">&amp;&amp;</op:operator> <name pos:line="1174" pos:column="29">scintilla</name> <op:operator pos:line="1174" pos:column="39">!=</op:operator> <name pos:line="1174" pos:column="42">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1176" pos:column="5">int</name></type> <name pos:line="1176" pos:column="9">singleScroll</name> <init pos:line="1176" pos:column="22">= <expr><lit:literal type="number" pos:line="1176" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="1177" pos:column="5">if <condition pos:line="1177" pos:column="8">( <expr><name pos:line="1177" pos:column="10">control</name> <op:operator pos:line="1177" pos:column="18">==</op:operator> <name><name pos:line="1177" pos:column="21">scintilla</name><op:operator pos:line="1177" pos:column="30">-&gt;</op:operator><name pos:line="1177" pos:column="32">vScrollBar</name></name></expr> )</condition><then pos:line="1177" pos:column="44">
    <block pos:line="1178" pos:column="5">{
        <comment type="line" pos:line="1179" pos:column="9">// Vertical single scroll = one line</comment>
        <comment type="line" pos:line="1180" pos:column="9">// TODO: Is there a Scintilla preference for this somewhere?</comment>
        <expr_stmt><expr><name pos:line="1181" pos:column="9">singleScroll</name> <op:operator pos:line="1181" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="1181" pos:column="24">1</lit:literal></expr>;</expr_stmt>
    }</block></then> <else pos:line="1182" pos:column="7">else <block pos:line="1182" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="1183" pos:column="9">assert</name><argument_list pos:line="1183" pos:column="15">( <argument><expr><name pos:line="1183" pos:column="17">control</name> <op:operator pos:line="1183" pos:column="25">==</op:operator> <name><name pos:line="1183" pos:column="28">scintilla</name><op:operator pos:line="1183" pos:column="37">-&gt;</op:operator><name pos:line="1183" pos:column="39">hScrollBar</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="1184" pos:column="9">// Horizontal single scroll = 20 pixels (hardcoded from ScintillaWin)</comment>
        <comment type="line" pos:line="1185" pos:column="9">// TODO: Is there a Scintilla preference for this somewhere?</comment>
        <expr_stmt><expr><name pos:line="1186" pos:column="9">singleScroll</name> <op:operator pos:line="1186" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="1186" pos:column="24">20</lit:literal></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line" pos:line="1189" pos:column="5">// Determine the new value</comment>
    <decl_stmt><decl><type><name pos:line="1190" pos:column="5">int</name></type> <name pos:line="1190" pos:column="9">newValue</name> <init pos:line="1190" pos:column="18">= <expr><lit:literal type="number" pos:line="1190" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
    <switch pos:line="1191" pos:column="5">switch <condition pos:line="1191" pos:column="12">( <expr><name pos:line="1191" pos:column="14">part</name></expr> )</condition>
    <block pos:line="1192" pos:column="5">{
    <case pos:line="1193" pos:column="5">case <expr><name pos:line="1193" pos:column="10">kControlUpButtonPart</name></expr>:
        <expr_stmt><expr><name pos:line="1194" pos:column="9">newValue</name> <op:operator pos:line="1194" pos:column="18">=</op:operator> <call><name><name pos:line="1194" pos:column="20">Platform</name><op:operator pos:line="1194" pos:column="28">::</op:operator><name pos:line="1194" pos:column="30">Maximum</name></name><argument_list pos:line="1194" pos:column="37">( <argument><expr><name pos:line="1194" pos:column="39">currentValue</name> <op:operator pos:line="1194" pos:column="52">-</op:operator> <name pos:line="1194" pos:column="54">singleScroll</name></expr></argument>, <argument><expr><name pos:line="1194" pos:column="68">min</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <break pos:line="1195" pos:column="9">break;</break>

    </case><case pos:line="1197" pos:column="5">case <expr><name pos:line="1197" pos:column="10">kControlDownButtonPart</name></expr>:
        <comment type="line" pos:line="1198" pos:column="9">// the the user scrolls to the right, allow more scroll space</comment>
        <if pos:line="1199" pos:column="9">if <condition pos:line="1199" pos:column="12">( <expr><name pos:line="1199" pos:column="14">control</name> <op:operator pos:line="1199" pos:column="22">==</op:operator> <name><name pos:line="1199" pos:column="25">scintilla</name><op:operator pos:line="1199" pos:column="34">-&gt;</op:operator><name pos:line="1199" pos:column="36">hScrollBar</name></name> <op:operator pos:line="1199" pos:column="47">&amp;&amp;</op:operator> <name pos:line="1199" pos:column="50">currentValue</name> <op:operator pos:line="1199" pos:column="63">&gt;=</op:operator> <name pos:line="1199" pos:column="66">max</name></expr>)</condition><then pos:line="1199" pos:column="70"> <block pos:line="1199" pos:column="71">{
          <comment type="line" pos:line="1200" pos:column="11">// change the max value</comment>
          <expr_stmt><expr><name><name pos:line="1201" pos:column="11">scintilla</name><op:operator pos:line="1201" pos:column="20">-&gt;</op:operator><name pos:line="1201" pos:column="22">scrollWidth</name></name> <op:operator pos:line="1201" pos:column="34">+=</op:operator> <name pos:line="1201" pos:column="37">singleScroll</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name pos:line="1202" pos:column="11">SetControl32BitMaximum</name><argument_list pos:line="1202" pos:column="33">( <argument><expr><name pos:line="1202" pos:column="35">control</name></expr></argument>,
                           <argument><expr><call><name><name pos:line="1203" pos:column="28">Platform</name><op:operator pos:line="1203" pos:column="36">::</op:operator><name pos:line="1203" pos:column="38">Maximum</name></name><argument_list pos:line="1203" pos:column="45">( <argument><expr><name><name pos:line="1203" pos:column="47">scintilla</name><op:operator pos:line="1203" pos:column="56">-&gt;</op:operator><name pos:line="1203" pos:column="58">scrollWidth</name></name> <op:operator pos:line="1203" pos:column="70">-</op:operator> <call><name><name pos:line="1203" pos:column="72">scintilla</name><op:operator pos:line="1203" pos:column="81">-&gt;</op:operator><name pos:line="1203" pos:column="83">GetTextRectangle</name></name><argument_list pos:line="1203" pos:column="99">()</argument_list></call><op:operator pos:line="1203" pos:column="101">.</op:operator><call><name pos:line="1203" pos:column="102">Width</name><argument_list pos:line="1203" pos:column="107">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1203" pos:column="111">0</lit:literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="1204" pos:column="11">max</name> <op:operator pos:line="1204" pos:column="15">=</op:operator> <call><name pos:line="1204" pos:column="17">GetControl32BitMaximum</name><argument_list pos:line="1204" pos:column="39">( <argument><expr><name pos:line="1204" pos:column="41">control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="1205" pos:column="11">scintilla</name><op:operator pos:line="1205" pos:column="20">-&gt;</op:operator><name pos:line="1205" pos:column="22">SetScrollBars</name></name><argument_list pos:line="1205" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name pos:line="1207" pos:column="9">newValue</name> <op:operator pos:line="1207" pos:column="18">=</op:operator>  <call><name><name pos:line="1207" pos:column="21">Platform</name><op:operator pos:line="1207" pos:column="29">::</op:operator><name pos:line="1207" pos:column="31">Minimum</name></name><argument_list pos:line="1207" pos:column="38">( <argument><expr><name pos:line="1207" pos:column="40">currentValue</name> <op:operator pos:line="1207" pos:column="53">+</op:operator> <name pos:line="1207" pos:column="55">singleScroll</name></expr></argument>, <argument><expr><name pos:line="1207" pos:column="69">max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <break pos:line="1208" pos:column="9">break;</break>

    </case><case pos:line="1210" pos:column="5">case <expr><name pos:line="1210" pos:column="10">kControlPageUpPart</name></expr>:
        <expr_stmt><expr><name pos:line="1211" pos:column="9">newValue</name> <op:operator pos:line="1211" pos:column="18">=</op:operator> <call><name><name pos:line="1211" pos:column="20">Platform</name><op:operator pos:line="1211" pos:column="28">::</op:operator><name pos:line="1211" pos:column="30">Maximum</name></name><argument_list pos:line="1211" pos:column="37">( <argument><expr><name pos:line="1211" pos:column="39">currentValue</name> <op:operator pos:line="1211" pos:column="52">-</op:operator> <name pos:line="1211" pos:column="54">page</name></expr></argument>, <argument><expr><name pos:line="1211" pos:column="60">min</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <break pos:line="1212" pos:column="9">break;</break>

    </case><case pos:line="1214" pos:column="5">case <expr><name pos:line="1214" pos:column="10">kControlPageDownPart</name></expr>:
        <expr_stmt><expr><name pos:line="1215" pos:column="9">newValue</name> <op:operator pos:line="1215" pos:column="18">=</op:operator> <call><name><name pos:line="1215" pos:column="20">Platform</name><op:operator pos:line="1215" pos:column="28">::</op:operator><name pos:line="1215" pos:column="30">Minimum</name></name><argument_list pos:line="1215" pos:column="37">( <argument><expr><name pos:line="1215" pos:column="39">currentValue</name> <op:operator pos:line="1215" pos:column="52">+</op:operator> <name pos:line="1215" pos:column="54">page</name></expr></argument>, <argument><expr><name pos:line="1215" pos:column="60">max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <break pos:line="1216" pos:column="9">break;</break>

    </case><case pos:line="1218" pos:column="5">case <expr><name pos:line="1218" pos:column="10">kControlIndicatorPart</name></expr>:
    </case><case pos:line="1219" pos:column="5">case <expr><name pos:line="1219" pos:column="10">kControlNoPart</name></expr>:
        <expr_stmt><expr><name pos:line="1220" pos:column="9">newValue</name> <op:operator pos:line="1220" pos:column="18">=</op:operator> <name pos:line="1220" pos:column="20">currentValue</name></expr>;</expr_stmt>
        <break pos:line="1221" pos:column="9">break;</break>

    </case><default pos:line="1223" pos:column="5">default:
        <expr_stmt><expr><call><name pos:line="1224" pos:column="9">assert</name><argument_list pos:line="1224" pos:column="15">( <argument><expr><lit:literal type="boolean" pos:line="1224" pos:column="17">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return pos:line="1225" pos:column="9">return;</return>
    </default>}</block></switch>

    <comment type="line" pos:line="1228" pos:column="5">// Set the new value</comment>
    <if pos:line="1229" pos:column="5">if <condition pos:line="1229" pos:column="8">( <expr><name pos:line="1229" pos:column="10">control</name> <op:operator pos:line="1229" pos:column="18">==</op:operator> <name><name pos:line="1229" pos:column="21">scintilla</name><op:operator pos:line="1229" pos:column="30">-&gt;</op:operator><name pos:line="1229" pos:column="32">vScrollBar</name></name></expr> )</condition><then pos:line="1229" pos:column="44">
    <block pos:line="1230" pos:column="5">{
        <expr_stmt><expr><call><name><name pos:line="1231" pos:column="9">scintilla</name><op:operator pos:line="1231" pos:column="18">-&gt;</op:operator><name pos:line="1231" pos:column="20">ScrollTo</name></name><argument_list pos:line="1231" pos:column="28">( <argument><expr><name pos:line="1231" pos:column="30">newValue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="1232" pos:column="7">else <block pos:line="1232" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="1233" pos:column="9">assert</name><argument_list pos:line="1233" pos:column="15">( <argument><expr><name pos:line="1233" pos:column="17">control</name> <op:operator pos:line="1233" pos:column="25">==</op:operator> <name><name pos:line="1233" pos:column="28">scintilla</name><op:operator pos:line="1233" pos:column="37">-&gt;</op:operator><name pos:line="1233" pos:column="39">hScrollBar</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1234" pos:column="9">scintilla</name><op:operator pos:line="1234" pos:column="18">-&gt;</op:operator><name pos:line="1234" pos:column="20">HorizontalScrollTo</name></name><argument_list pos:line="1234" pos:column="38">( <argument><expr><name pos:line="1234" pos:column="40">newValue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name pos:line="1238" pos:column="1">bool</name></type> <name><name pos:line="1238" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1238" pos:column="21">::</op:operator><name pos:line="1238" pos:column="23">ScrollBarHit</name></name><parameter_list pos:line="1238" pos:column="35">(<param><decl><type><name pos:line="1238" pos:column="36">HIPoint</name></type> <name pos:line="1238" pos:column="44">location</name></decl></param>)</parameter_list> <block pos:line="1238" pos:column="54">{
	<comment type="line" pos:line="1239" pos:column="9">// is this on our scrollbars?  If so, track them</comment>
	<decl_stmt><decl><type><name pos:line="1240" pos:column="9">HIViewRef</name></type> <name pos:line="1240" pos:column="19">view</name></decl>;</decl_stmt>
	<comment type="line" pos:line="1241" pos:column="9">// view is null if on editor, otherwise on scrollbar</comment>
	<expr_stmt><expr><call><name pos:line="1242" pos:column="9">HIViewGetSubviewHit</name><argument_list pos:line="1242" pos:column="28">(<argument><expr><call><name><name pos:line="1242" pos:column="29">reinterpret_cast</name><argument_list pos:line="1242" pos:column="45">&lt;<argument><expr><name pos:line="1242" pos:column="46">ControlRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1242" pos:column="57">(<argument><expr><call><name><name pos:line="1242" pos:column="58">wMain</name><op:operator pos:line="1242" pos:column="63">.</op:operator><name pos:line="1242" pos:column="64">GetID</name></name><argument_list pos:line="1242" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><op:operator pos:line="1243" pos:column="29">&amp;</op:operator><name pos:line="1243" pos:column="30">location</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1243" pos:column="40">true</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1243" pos:column="46">&amp;</op:operator><name pos:line="1243" pos:column="47">view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="1244" pos:column="9">if <condition pos:line="1244" pos:column="12">(<expr><name pos:line="1244" pos:column="13">view</name></expr>)</condition><then pos:line="1244" pos:column="18"> <block pos:line="1244" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="1245" pos:column="17">HIViewPartCode</name></type> <name pos:line="1245" pos:column="32">part</name></decl>;</decl_stmt>

		<comment type="line" pos:line="1247" pos:column="17">// make the point local to a scrollbar</comment>
                <decl_stmt><decl><type><name pos:line="1248" pos:column="17">PRectangle</name></type> <name pos:line="1248" pos:column="28">client</name> <init pos:line="1248" pos:column="35">= <expr><call><name pos:line="1248" pos:column="37">GetClientRectangle</name><argument_list pos:line="1248" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1249" pos:column="17">if <condition pos:line="1249" pos:column="20">(<expr><name pos:line="1249" pos:column="21">view</name> <op:operator pos:line="1249" pos:column="26">==</op:operator> <name pos:line="1249" pos:column="29">vScrollBar</name></expr>)</condition><then pos:line="1249" pos:column="40"> <block pos:line="1249" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="1250" pos:column="25">location</name><op:operator pos:line="1250" pos:column="33">.</op:operator><name pos:line="1250" pos:column="34">x</name></name> <op:operator pos:line="1250" pos:column="36">-=</op:operator> <call><name><name pos:line="1250" pos:column="39">client</name><op:operator pos:line="1250" pos:column="45">.</op:operator><name pos:line="1250" pos:column="46">Width</name></name><argument_list pos:line="1250" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1251" pos:column="19">else <if pos:line="1251" pos:column="24">if <condition pos:line="1251" pos:column="27">(<expr><name pos:line="1251" pos:column="28">view</name> <op:operator pos:line="1251" pos:column="33">==</op:operator> <name pos:line="1251" pos:column="36">hScrollBar</name></expr>)</condition><then pos:line="1251" pos:column="47"> <block pos:line="1251" pos:column="48">{
			<expr_stmt><expr><name><name pos:line="1252" pos:column="25">location</name><op:operator pos:line="1252" pos:column="33">.</op:operator><name pos:line="1252" pos:column="34">y</name></name> <op:operator pos:line="1252" pos:column="36">-=</op:operator> <call><name><name pos:line="1252" pos:column="39">client</name><op:operator pos:line="1252" pos:column="45">.</op:operator><name pos:line="1252" pos:column="46">Height</name></name><argument_list pos:line="1252" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1253" pos:column="19">else <block pos:line="1253" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="1254" pos:column="25">fprintf</name><argument_list pos:line="1254" pos:column="32">(<argument><expr><name pos:line="1254" pos:column="33">stderr</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1254" pos:column="41">"got a subview hit, but not a scrollbar???\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="1255" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1255" pos:column="32">false</lit:literal></expr>;</return>
		}</block></else></if></else></if>

		<expr_stmt><expr><call><name pos:line="1258" pos:column="17">HIViewGetPartHit</name><argument_list pos:line="1258" pos:column="33">(<argument><expr><name pos:line="1258" pos:column="34">view</name></expr></argument>, <argument><expr><op:operator pos:line="1258" pos:column="40">&amp;</op:operator><name pos:line="1258" pos:column="41">location</name></expr></argument>, <argument><expr><op:operator pos:line="1258" pos:column="51">&amp;</op:operator><name pos:line="1258" pos:column="52">part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch pos:line="1260" pos:column="17">switch <condition pos:line="1260" pos:column="24">(<expr><name pos:line="1260" pos:column="25">part</name></expr>)</condition>
		<block pos:line="1261" pos:column="17">{
			<case pos:line="1262" pos:column="25">case <expr><name pos:line="1262" pos:column="30">kControlUpButtonPart</name></expr>:
			</case><case pos:line="1263" pos:column="25">case <expr><name pos:line="1263" pos:column="30">kControlDownButtonPart</name></expr>:
			</case><case pos:line="1264" pos:column="25">case <expr><name pos:line="1264" pos:column="30">kControlPageUpPart</name></expr>:
			</case><case pos:line="1265" pos:column="25">case <expr><name pos:line="1265" pos:column="30">kControlPageDownPart</name></expr>:
			</case><case pos:line="1266" pos:column="25">case <expr><name pos:line="1266" pos:column="30">kControlIndicatorPart</name></expr>:
                                <decl_stmt><decl><type><name><op:operator pos:line="1267" pos:column="33">::</op:operator><name pos:line="1267" pos:column="35">Point</name></name></type> <name pos:line="1267" pos:column="41">p</name></decl>;</decl_stmt>
                                <expr_stmt><expr><name><name pos:line="1268" pos:column="33">p</name><op:operator pos:line="1268" pos:column="34">.</op:operator><name pos:line="1268" pos:column="35">h</name></name> <op:operator pos:line="1268" pos:column="37">=</op:operator> <name><name pos:line="1268" pos:column="39">location</name><op:operator pos:line="1268" pos:column="47">.</op:operator><name pos:line="1268" pos:column="48">x</name></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name pos:line="1269" pos:column="33">p</name><op:operator pos:line="1269" pos:column="34">.</op:operator><name pos:line="1269" pos:column="35">v</name></name> <op:operator pos:line="1269" pos:column="37">=</op:operator> <name><name pos:line="1269" pos:column="39">location</name><op:operator pos:line="1269" pos:column="47">.</op:operator><name pos:line="1269" pos:column="48">y</name></name></expr>;</expr_stmt>
				<comment type="line" pos:line="1270" pos:column="33">// We are assuming Appearance 1.1 or later, so we</comment>
				<comment type="line" pos:line="1271" pos:column="33">// have the "live scroll" variant of the scrollbar,</comment>
				<comment type="line" pos:line="1272" pos:column="33">// which lets you pass the action proc to TrackControl</comment>
				<comment type="line" pos:line="1273" pos:column="33">// for the thumb (this was illegal in previous</comment>
				<comment type="line" pos:line="1274" pos:column="33">// versions of the defproc).</comment>
				<expr_stmt><expr><name pos:line="1275" pos:column="33">isTracking</name> <op:operator pos:line="1275" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="1275" pos:column="46">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="1276" pos:column="33">::</op:operator><name pos:line="1276" pos:column="35">TrackControl</name></name><argument_list pos:line="1276" pos:column="47">(<argument><expr><name pos:line="1276" pos:column="48">view</name></expr></argument>, <argument><expr><name pos:line="1276" pos:column="54">p</name></expr></argument>, <argument><expr><name><name pos:line="1276" pos:column="57">ScintillaMacOSX</name><op:operator pos:line="1276" pos:column="72">::</op:operator><name pos:line="1276" pos:column="74">LiveScrollHandler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="1277" pos:column="33">::</op:operator><name pos:line="1277" pos:column="35">HiliteControl</name></name><argument_list pos:line="1277" pos:column="48">(<argument><expr><name pos:line="1277" pos:column="49">view</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1277" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1278" pos:column="33">isTracking</name> <op:operator pos:line="1278" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="1278" pos:column="46">false</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="1279" pos:column="33">// The mouseup was eaten by TrackControl, however if we</comment>
				<comment type="line" pos:line="1280" pos:column="33">// do not get a mouseup in the scintilla xbl widget,</comment>
				<comment type="line" pos:line="1281" pos:column="33">// many bad focus issues happen.  Simply post a mouseup</comment>
				<comment type="line" pos:line="1282" pos:column="33">// and this firey pit becomes a bit cooler.</comment>
				<expr_stmt><expr><call><name pos:line="1283" pos:column="33">PostEvent</name><argument_list pos:line="1283" pos:column="42">(<argument><expr><name pos:line="1283" pos:column="43">mouseUp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1283" pos:column="52">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="1284" pos:column="33">break;</break>
			</case><default pos:line="1285" pos:column="25">default:
				<expr_stmt><expr><call><name pos:line="1286" pos:column="33">fprintf</name><argument_list pos:line="1286" pos:column="40">(<argument><expr><name pos:line="1286" pos:column="41">stderr</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1286" pos:column="49">"PlatformScrollBarHit part %d\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="1286" pos:column="83">part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</default>}</block></switch>
		<return pos:line="1288" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1288" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="1290" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1290" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1293" pos:column="1">void</name></type> <name><name pos:line="1293" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1293" pos:column="21">::</op:operator><name pos:line="1293" pos:column="23">NotifyFocus</name></name><parameter_list pos:line="1293" pos:column="34">(<param><decl><type><name pos:line="1293" pos:column="35">bool</name></type> <name pos:line="1293" pos:column="40">focus</name></decl></param>)</parameter_list> <block pos:line="1293" pos:column="47">{
<cpp:ifdef pos:line="1294" pos:column="1">#<cpp:directive pos:line="1294" pos:column="2">ifdef</cpp:directive> <name pos:line="1294" pos:column="8">EXT_INPUT</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name pos:line="1295" pos:column="5">ExtInput</name><op:operator pos:line="1295" pos:column="13">::</op:operator><name pos:line="1295" pos:column="15">activate</name></name> <argument_list pos:line="1295" pos:column="24">(<argument><expr><call><name pos:line="1295" pos:column="25">GetViewRef</name><argument_list pos:line="1295" pos:column="35">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1295" pos:column="39">focus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1296" pos:column="1">#<cpp:directive pos:line="1296" pos:column="2">endif</cpp:directive></cpp:endif>
    <if pos:line="1297" pos:column="5">if <condition pos:line="1297" pos:column="8">(<expr><name pos:line="1297" pos:column="9">NULL</name> <op:operator pos:line="1297" pos:column="14">!=</op:operator> <name pos:line="1297" pos:column="17">notifyProc</name></expr>)</condition><then pos:line="1297" pos:column="28">
        <expr_stmt><expr><call><name pos:line="1298" pos:column="9">notifyProc</name> <argument_list pos:line="1298" pos:column="20">(<argument><expr><name pos:line="1298" pos:column="21">notifyObj</name></expr></argument>, <argument><expr><name pos:line="1298" pos:column="32">WM_COMMAND</name></expr></argument>,
                <argument><expr><call pos:line="1299" pos:column="17">(<name pos:line="1299" pos:column="18">uintptr_t</name>) <argument_list pos:line="1299" pos:column="29">(<argument><expr><op:operator pos:line="1299" pos:column="30">(</op:operator><name pos:line="1299" pos:column="31">focus</name> <op:operator pos:line="1299" pos:column="37">?</op:operator> <name pos:line="1299" pos:column="39">SCEN_SETFOCUS</name> <op:operator pos:line="1299" pos:column="53">:</op:operator> <name pos:line="1299" pos:column="55">SCEN_KILLFOCUS</name><op:operator pos:line="1299" pos:column="69">)</op:operator> <op:operator pos:line="1299" pos:column="71">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1299" pos:column="74">16</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><op:operator pos:line="1300" pos:column="17">(</op:operator><name pos:line="1300" pos:column="18">uintptr_t</name><op:operator pos:line="1300" pos:column="27">)</op:operator> <call><name pos:line="1300" pos:column="29">GetViewRef</name><argument_list pos:line="1300" pos:column="39">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="1303" pos:column="1">void</name></type> <name><name pos:line="1303" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1303" pos:column="21">::</op:operator><name pos:line="1303" pos:column="23">NotifyChange</name></name><parameter_list pos:line="1303" pos:column="35">()</parameter_list> <block pos:line="1303" pos:column="38">{
    <if pos:line="1304" pos:column="5">if <condition pos:line="1304" pos:column="8">(<expr><name pos:line="1304" pos:column="9">NULL</name> <op:operator pos:line="1304" pos:column="14">!=</op:operator> <name pos:line="1304" pos:column="17">notifyProc</name></expr>)</condition><then pos:line="1304" pos:column="28">
        <expr_stmt><expr><call><name pos:line="1305" pos:column="9">notifyProc</name> <argument_list pos:line="1305" pos:column="20">(<argument><expr><name pos:line="1305" pos:column="21">notifyObj</name></expr></argument>, <argument><expr><name pos:line="1305" pos:column="32">WM_COMMAND</name></expr></argument>,
                <argument><expr><call pos:line="1306" pos:column="17">(<name pos:line="1306" pos:column="18">uintptr_t</name>) <argument_list pos:line="1306" pos:column="29">(<argument><expr><name pos:line="1306" pos:column="30">SCEN_CHANGE</name> <op:operator pos:line="1306" pos:column="42">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1306" pos:column="45">16</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><op:operator pos:line="1307" pos:column="17">(</op:operator><name pos:line="1307" pos:column="18">uintptr_t</name><op:operator pos:line="1307" pos:column="27">)</op:operator> <call><name pos:line="1307" pos:column="29">GetViewRef</name><argument_list pos:line="1307" pos:column="39">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="1310" pos:column="1">void</name></type> <name><name pos:line="1310" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1310" pos:column="21">::</op:operator><name pos:line="1310" pos:column="23">registerNotifyCallback</name></name><parameter_list pos:line="1310" pos:column="45">(<param><decl><type><name pos:line="1310" pos:column="46">intptr_t</name></type> <name pos:line="1310" pos:column="55">windowid</name></decl></param>, <param><decl><type><name pos:line="1310" pos:column="65">SciNotifyFunc</name></type> <name pos:line="1310" pos:column="79">callback</name></decl></param>)</parameter_list> <block pos:line="1310" pos:column="89">{
    <expr_stmt><expr><name pos:line="1311" pos:column="5">notifyObj</name> <op:operator pos:line="1311" pos:column="15">=</op:operator> <name pos:line="1311" pos:column="17">windowid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1312" pos:column="5">notifyProc</name> <op:operator pos:line="1312" pos:column="16">=</op:operator> <name pos:line="1312" pos:column="18">callback</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1315" pos:column="1">void</name></type> <name><name pos:line="1315" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1315" pos:column="21">::</op:operator><name pos:line="1315" pos:column="23">NotifyParent</name></name><parameter_list pos:line="1315" pos:column="35">(<param><decl><type><name pos:line="1315" pos:column="36">SCNotification</name></type> <name pos:line="1315" pos:column="51">scn</name></decl></param>)</parameter_list> <block pos:line="1315" pos:column="56">{
    <if pos:line="1316" pos:column="5">if <condition pos:line="1316" pos:column="8">(<expr><name pos:line="1316" pos:column="9">NULL</name> <op:operator pos:line="1316" pos:column="14">!=</op:operator> <name pos:line="1316" pos:column="17">notifyProc</name></expr>)</condition><then pos:line="1316" pos:column="28"> <block pos:line="1316" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="1317" pos:column="9">scn</name><op:operator pos:line="1317" pos:column="12">.</op:operator><name pos:line="1317" pos:column="13">nmhdr</name><op:operator pos:line="1317" pos:column="18">.</op:operator><name pos:line="1317" pos:column="19">hwndFrom</name></name> <op:operator pos:line="1317" pos:column="28">=</op:operator> <op:operator pos:line="1317" pos:column="30">(</op:operator><name pos:line="1317" pos:column="31">void</name><op:operator pos:line="1317" pos:column="35">*</op:operator><op:operator pos:line="1317" pos:column="36">)</op:operator> <name pos:line="1317" pos:column="38">this</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1318" pos:column="9">scn</name><op:operator pos:line="1318" pos:column="12">.</op:operator><name pos:line="1318" pos:column="13">nmhdr</name><op:operator pos:line="1318" pos:column="18">.</op:operator><name pos:line="1318" pos:column="19">idFrom</name></name> <op:operator pos:line="1318" pos:column="26">=</op:operator> <op:operator pos:line="1318" pos:column="28">(</op:operator><name pos:line="1318" pos:column="29">unsigned</name> <name pos:line="1318" pos:column="38">int</name><op:operator pos:line="1318" pos:column="41">)</op:operator><call><name><name pos:line="1318" pos:column="42">wMain</name><op:operator pos:line="1318" pos:column="47">.</op:operator><name pos:line="1318" pos:column="48">GetID</name></name><argument_list pos:line="1318" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1319" pos:column="9">notifyProc</name> <argument_list pos:line="1319" pos:column="20">(<argument><expr><name pos:line="1319" pos:column="21">notifyObj</name></expr></argument>, <argument><expr><name pos:line="1319" pos:column="32">WM_NOTIFY</name></expr></argument>, <argument><expr><op:operator pos:line="1319" pos:column="43">(</op:operator><name pos:line="1319" pos:column="44">uintptr_t</name><op:operator pos:line="1319" pos:column="53">)</op:operator> <lit:literal type="number" pos:line="1319" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1319" pos:column="58">(</op:operator><name pos:line="1319" pos:column="59">uintptr_t</name><op:operator pos:line="1319" pos:column="68">)</op:operator> <op:operator pos:line="1319" pos:column="70">&amp;</op:operator><name pos:line="1319" pos:column="71">scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="1323" pos:column="1">void</name></type> <name><name pos:line="1323" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1323" pos:column="21">::</op:operator><name pos:line="1323" pos:column="23">NotifyKey</name></name><parameter_list pos:line="1323" pos:column="32">(<param><decl><type><name pos:line="1323" pos:column="33">int</name></type> <name pos:line="1323" pos:column="37">key</name></decl></param>, <param><decl><type><name pos:line="1323" pos:column="42">int</name></type> <name pos:line="1323" pos:column="46">modifiers</name></decl></param>)</parameter_list> <block pos:line="1323" pos:column="57">{
    <decl_stmt><decl><type><name pos:line="1324" pos:column="5">SCNotification</name></type> <name pos:line="1324" pos:column="20">scn</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1325" pos:column="5">scn</name><op:operator pos:line="1325" pos:column="8">.</op:operator><name pos:line="1325" pos:column="9">nmhdr</name><op:operator pos:line="1325" pos:column="14">.</op:operator><name pos:line="1325" pos:column="15">code</name></name> <op:operator pos:line="1325" pos:column="20">=</op:operator> <name pos:line="1325" pos:column="22">SCN_KEY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1326" pos:column="5">scn</name><op:operator pos:line="1326" pos:column="8">.</op:operator><name pos:line="1326" pos:column="9">ch</name></name> <op:operator pos:line="1326" pos:column="12">=</op:operator> <name pos:line="1326" pos:column="14">key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1327" pos:column="5">scn</name><op:operator pos:line="1327" pos:column="8">.</op:operator><name pos:line="1327" pos:column="9">modifiers</name></name> <op:operator pos:line="1327" pos:column="19">=</op:operator> <name pos:line="1327" pos:column="21">modifiers</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1329" pos:column="5">NotifyParent</name><argument_list pos:line="1329" pos:column="17">(<argument><expr><name pos:line="1329" pos:column="18">scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1332" pos:column="1">void</name></type> <name><name pos:line="1332" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1332" pos:column="21">::</op:operator><name pos:line="1332" pos:column="23">NotifyURIDropped</name></name><parameter_list pos:line="1332" pos:column="39">(<param><decl><type><specifier pos:line="1332" pos:column="40">const</specifier> <name pos:line="1332" pos:column="46">char</name> <type:modifier pos:line="1332" pos:column="51">*</type:modifier></type><name pos:line="1332" pos:column="52">list</name></decl></param>)</parameter_list> <block pos:line="1332" pos:column="58">{
    <decl_stmt><decl><type><name pos:line="1333" pos:column="5">SCNotification</name></type> <name pos:line="1333" pos:column="20">scn</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1334" pos:column="5">scn</name><op:operator pos:line="1334" pos:column="8">.</op:operator><name pos:line="1334" pos:column="9">nmhdr</name><op:operator pos:line="1334" pos:column="14">.</op:operator><name pos:line="1334" pos:column="15">code</name></name> <op:operator pos:line="1334" pos:column="20">=</op:operator> <name pos:line="1334" pos:column="22">SCN_URIDROPPED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="1335" pos:column="5">scn</name><op:operator pos:line="1335" pos:column="8">.</op:operator><name pos:line="1335" pos:column="9">text</name></name> <op:operator pos:line="1335" pos:column="14">=</op:operator> <name pos:line="1335" pos:column="16">list</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1337" pos:column="5">NotifyParent</name><argument_list pos:line="1337" pos:column="17">(<argument><expr><name pos:line="1337" pos:column="18">scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef pos:line="1340" pos:column="1">#<cpp:directive pos:line="1340" pos:column="2">ifndef</cpp:directive> <name pos:line="1340" pos:column="9">EXT_INPUT</name></cpp:ifndef>
<comment type="line" pos:line="1341" pos:column="1">// Extended UTF8-UTF6-conversion to handle surrogate pairs correctly (CL265070)</comment>
<function><type><name pos:line="1342" pos:column="1">int</name></type> <name><name pos:line="1342" pos:column="5">ScintillaMacOSX</name><op:operator pos:line="1342" pos:column="20">::</op:operator><name pos:line="1342" pos:column="22">KeyDefault</name></name><parameter_list pos:line="1342" pos:column="32">(<param><decl><type><name pos:line="1342" pos:column="33">int</name></type> <name pos:line="1342" pos:column="37">key</name></decl></param>, <param><decl><type><name pos:line="1342" pos:column="42">int</name></type> <name pos:line="1342" pos:column="46">modifiers</name></decl></param>)</parameter_list> <block pos:line="1342" pos:column="57">{
    <if pos:line="1343" pos:column="5">if <condition pos:line="1343" pos:column="8">(<expr><op:operator pos:line="1343" pos:column="9">!</op:operator><op:operator pos:line="1343" pos:column="10">(</op:operator><name pos:line="1343" pos:column="11">modifiers</name> <op:operator pos:line="1343" pos:column="21">&amp;</op:operator> <name pos:line="1343" pos:column="23">SCI_CTRL</name><op:operator pos:line="1343" pos:column="31">)</op:operator> <op:operator pos:line="1343" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="1343" pos:column="36">!</op:operator><op:operator pos:line="1343" pos:column="37">(</op:operator><name pos:line="1343" pos:column="38">modifiers</name> <op:operator pos:line="1343" pos:column="48">&amp;</op:operator> <name pos:line="1343" pos:column="50">SCI_ALT</name><op:operator pos:line="1343" pos:column="57">)</op:operator> <op:operator pos:line="1343" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="1343" pos:column="62">(</op:operator><name pos:line="1343" pos:column="63">key</name> <op:operator pos:line="1343" pos:column="67">&lt;</op:operator> <lit:literal type="number" pos:line="1343" pos:column="69">256</lit:literal><op:operator pos:line="1343" pos:column="72">)</op:operator></expr>)</condition><then pos:line="1343" pos:column="74"> <block pos:line="1343" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="1344" pos:column="9">AddChar</name><argument_list pos:line="1344" pos:column="16">(<argument><expr><name pos:line="1344" pos:column="17">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="1345" pos:column="9">return <expr><lit:literal type="number" pos:line="1345" pos:column="16">1</lit:literal></expr>;</return>
    }</block></then> <else pos:line="1346" pos:column="7">else <block pos:line="1346" pos:column="12">{
        <comment type="line" pos:line="1347" pos:column="9">// Pass up to container in case it is an accelerator</comment>
        <expr_stmt><expr><call><name pos:line="1348" pos:column="9">NotifyKey</name><argument_list pos:line="1348" pos:column="18">(<argument><expr><name pos:line="1348" pos:column="19">key</name></expr></argument>, <argument><expr><name pos:line="1348" pos:column="24">modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="1349" pos:column="9">return <expr><lit:literal type="number" pos:line="1349" pos:column="16">0</lit:literal></expr>;</return>
    }</block></else></if>
    <comment type="line" pos:line="1351" pos:column="5">//Platform::DebugPrintf("SK-key: %d %x %x\n",key, modifiers);</comment>
}</block></function>
<cpp:endif pos:line="1353" pos:column="1">#<cpp:directive pos:line="1353" pos:column="2">endif</cpp:directive></cpp:endif>

<template pos:line="1355" pos:column="1">template <parameter_list pos:line="1355" pos:column="10">&lt;<param><type><name pos:line="1355" pos:column="11">class</name></type> <name pos:line="1355" pos:column="17">T</name></param>, <param><type><name pos:line="1355" pos:column="20">class</name></type> <name pos:line="1355" pos:column="26">U</name></param>&gt;</parameter_list>
<struct pos:line="1356" pos:column="1">struct <name pos:line="1356" pos:column="8">StupidMap</name>
<block pos:line="1357" pos:column="1">{<public type="default" pos:line="1357" pos:column="2">
</public><public pos:line="1358" pos:column="1">public:
    <decl_stmt><decl><type><name pos:line="1359" pos:column="5">T</name></type> <name pos:line="1359" pos:column="7">key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1360" pos:column="5">U</name></type> <name pos:line="1360" pos:column="7">value</name></decl>;</decl_stmt>
</public>}</block>;</struct></template>

<template pos:line="1363" pos:column="1">template <parameter_list pos:line="1363" pos:column="10">&lt;<param><type><name pos:line="1363" pos:column="11">class</name></type> <name pos:line="1363" pos:column="17">T</name></param>, <param><type><name pos:line="1363" pos:column="20">class</name></type> <name pos:line="1363" pos:column="26">U</name></param>&gt;</parameter_list>
<function><type><specifier pos:line="1364" pos:column="1">inline</specifier> <specifier pos:line="1364" pos:column="8">static</specifier> <name pos:line="1364" pos:column="15">U</name></type> <name pos:line="1364" pos:column="17">StupidMapFindFunction</name><parameter_list pos:line="1364" pos:column="38">( <param><decl><type><specifier pos:line="1364" pos:column="40">const</specifier> <name><name pos:line="1364" pos:column="46">StupidMap</name><argument_list pos:line="1364" pos:column="55">&lt;<argument><expr><name pos:line="1364" pos:column="56">T</name></expr></argument>, <argument><expr><name pos:line="1364" pos:column="59">U</name></expr></argument>&gt;</argument_list></name><type:modifier pos:line="1364" pos:column="61">*</type:modifier></type> <name pos:line="1364" pos:column="63">elements</name></decl></param>, <param><decl><type><name pos:line="1364" pos:column="73">size_t</name></type> <name pos:line="1364" pos:column="80">length</name></decl></param>, <param><decl><type><specifier pos:line="1364" pos:column="88">const</specifier> <name pos:line="1364" pos:column="94">T</name><type:modifier pos:line="1364" pos:column="95">&amp;</type:modifier></type> <name pos:line="1364" pos:column="97">desiredKey</name></decl></param> )</parameter_list>
<block pos:line="1365" pos:column="1">{
    <for pos:line="1366" pos:column="5">for ( <init><decl><type><name pos:line="1366" pos:column="11">size_t</name></type> <name pos:line="1366" pos:column="18">i</name> <init pos:line="1366" pos:column="20">= <expr><lit:literal type="number" pos:line="1366" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1366" pos:column="25">i</name> <op:operator pos:line="1366" pos:column="27">&lt;</op:operator> <name pos:line="1366" pos:column="29">length</name></expr>;</condition> <incr><expr><op:operator pos:line="1366" pos:column="37">++</op:operator> <name pos:line="1366" pos:column="40">i</name></expr></incr> )
    <block pos:line="1367" pos:column="5">{
        <if pos:line="1368" pos:column="9">if <condition pos:line="1368" pos:column="12">( <expr><name><name pos:line="1368" pos:column="14">elements</name><index pos:line="1368" pos:column="22">[<expr><name pos:line="1368" pos:column="23">i</name></expr>]</index></name><op:operator pos:line="1368" pos:column="25">.</op:operator><name pos:line="1368" pos:column="26">key</name> <op:operator pos:line="1368" pos:column="30">==</op:operator> <name pos:line="1368" pos:column="33">desiredKey</name></expr> )</condition><then pos:line="1368" pos:column="45">
        <block pos:line="1369" pos:column="9">{
            <return pos:line="1370" pos:column="13">return <expr><name><name pos:line="1370" pos:column="20">elements</name><index pos:line="1370" pos:column="28">[<expr><name pos:line="1370" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="1370" pos:column="31">.</op:operator><name pos:line="1370" pos:column="32">value</name></expr>;</return>
        }</block></then></if>
    }</block></for>

    <return pos:line="1374" pos:column="5">return <expr><name pos:line="1374" pos:column="12">NULL</name></expr>;</return>
}</block></function></template>

<comment type="line" pos:line="1377" pos:column="1">// NOTE: If this macro is used on a StupidMap that isn't defined by StupidMap x[] = ...</comment>
<comment type="line" pos:line="1378" pos:column="1">// The size calculation will fail!</comment>
<cpp:define pos:line="1379" pos:column="1">#<cpp:directive pos:line="1379" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1379" pos:column="9">StupidMapFind</name><parameter_list pos:line="1379" pos:column="22">( <param><type><name pos:line="1379" pos:column="24">x</name></type></param>, <param><type><name pos:line="1379" pos:column="27">y</name></type></param> )</parameter_list></cpp:macro> <cpp:value pos:line="1379" pos:column="31">StupidMapFindFunction( x, sizeof(x)/sizeof(*x), y )</cpp:value></cpp:define>

<function><type><name pos:line="1381" pos:column="1">pascal</name> <name pos:line="1381" pos:column="8">OSStatus</name></type> <name><name pos:line="1381" pos:column="17">ScintillaMacOSX</name><op:operator pos:line="1381" pos:column="32">::</op:operator><name pos:line="1381" pos:column="34">CommandEventHandler</name></name><parameter_list pos:line="1381" pos:column="53">( <param><decl><type><name pos:line="1381" pos:column="55">EventHandlerCallRef</name></type></decl></param> <comment type="block" pos:line="1381" pos:column="75">/*inCallRef*/</comment>, <param><decl><type><name pos:line="1381" pos:column="90">EventRef</name></type> <name pos:line="1381" pos:column="99">event</name></decl></param>, <param><decl><type><name pos:line="1381" pos:column="106">void</name><type:modifier pos:line="1381" pos:column="110">*</type:modifier></type> <name pos:line="1381" pos:column="112">data</name></decl></param> )</parameter_list>
<block pos:line="1382" pos:column="1">{
    <comment type="line" pos:line="1383" pos:column="5">// TODO: Verify automatically that each constant only appears once?</comment>
    <expr_stmt><expr pos:line="1384" pos:column="5">const <name pos:line="1384" pos:column="11">StupidMap</name><op:operator pos:line="1384" pos:column="20">&lt;</op:operator><name pos:line="1384" pos:column="21">UInt32</name></expr><op:operator pos:line="1384" pos:column="27">,</op:operator> <expr><call><call><name pos:line="1384" pos:column="29">void</name> <argument_list pos:line="1384" pos:column="34">(<argument><expr><name><name pos:line="1384" pos:column="35">ScintillaMacOSX</name><op:operator pos:line="1384" pos:column="50">::</op:operator><type:modifier pos:line="1384" pos:column="52">*</type:modifier></name></expr></argument>)</argument_list></call><argument_list pos:line="1384" pos:column="54">()</argument_list></call><op:operator pos:line="1384" pos:column="56">&gt;</op:operator> <name><name pos:line="1384" pos:column="58">processCommands</name><index pos:line="1384" pos:column="73">[]</index></name> <op:operator pos:line="1384" pos:column="76">=</op:operator> <block pos:line="1384" pos:column="78">{
        <expr><block pos:line="1385" pos:column="9">{ <expr><name pos:line="1385" pos:column="11">kHICommandCopy</name></expr><op:operator pos:line="1385" pos:column="25">,</op:operator> <expr><op:operator pos:line="1385" pos:column="27">&amp;</op:operator><name><name pos:line="1385" pos:column="28">ScintillaMacOSX</name><op:operator pos:line="1385" pos:column="43">::</op:operator><name pos:line="1385" pos:column="45">Copy</name></name></expr> }</block></expr><op:operator pos:line="1385" pos:column="51">,</op:operator>
        <expr><block pos:line="1386" pos:column="9">{ <expr><name pos:line="1386" pos:column="11">kHICommandPaste</name></expr><op:operator pos:line="1386" pos:column="26">,</op:operator> <expr><op:operator pos:line="1386" pos:column="28">&amp;</op:operator><name><name pos:line="1386" pos:column="29">ScintillaMacOSX</name><op:operator pos:line="1386" pos:column="44">::</op:operator><name pos:line="1386" pos:column="46">Paste</name></name></expr> }</block></expr><op:operator pos:line="1386" pos:column="53">,</op:operator>
        <expr><block pos:line="1387" pos:column="9">{ <expr><name pos:line="1387" pos:column="11">kHICommandCut</name></expr><op:operator pos:line="1387" pos:column="24">,</op:operator> <expr><op:operator pos:line="1387" pos:column="26">&amp;</op:operator><name><name pos:line="1387" pos:column="27">ScintillaMacOSX</name><op:operator pos:line="1387" pos:column="42">::</op:operator><name pos:line="1387" pos:column="44">Cut</name></name></expr> }</block></expr><op:operator pos:line="1387" pos:column="49">,</op:operator>
        <expr><block pos:line="1388" pos:column="9">{ <expr><name pos:line="1388" pos:column="11">kHICommandUndo</name></expr><op:operator pos:line="1388" pos:column="25">,</op:operator> <expr><op:operator pos:line="1388" pos:column="27">&amp;</op:operator><name><name pos:line="1388" pos:column="28">ScintillaMacOSX</name><op:operator pos:line="1388" pos:column="43">::</op:operator><name pos:line="1388" pos:column="45">Undo</name></name></expr> }</block></expr><op:operator pos:line="1388" pos:column="51">,</op:operator>
        <expr><block pos:line="1389" pos:column="9">{ <expr><name pos:line="1389" pos:column="11">kHICommandRedo</name></expr><op:operator pos:line="1389" pos:column="25">,</op:operator> <expr><op:operator pos:line="1389" pos:column="27">&amp;</op:operator><name><name pos:line="1389" pos:column="28">ScintillaMacOSX</name><op:operator pos:line="1389" pos:column="43">::</op:operator><name pos:line="1389" pos:column="45">Redo</name></name></expr> }</block></expr><op:operator pos:line="1389" pos:column="51">,</op:operator>
        <expr><block pos:line="1390" pos:column="9">{ <expr><name pos:line="1390" pos:column="11">kHICommandClear</name></expr><op:operator pos:line="1390" pos:column="26">,</op:operator> <expr><op:operator pos:line="1390" pos:column="28">&amp;</op:operator><name><name pos:line="1390" pos:column="29">ScintillaMacOSX</name><op:operator pos:line="1390" pos:column="44">::</op:operator><name pos:line="1390" pos:column="46">ClearSelectionSimple</name></name></expr> }</block></expr><op:operator pos:line="1390" pos:column="68">,</op:operator>
        <expr><block pos:line="1391" pos:column="9">{ <expr><name pos:line="1391" pos:column="11">kHICommandSelectAll</name></expr><op:operator pos:line="1391" pos:column="30">,</op:operator> <expr><op:operator pos:line="1391" pos:column="32">&amp;</op:operator><name><name pos:line="1391" pos:column="33">ScintillaMacOSX</name><op:operator pos:line="1391" pos:column="48">::</op:operator><name pos:line="1391" pos:column="50">SelectAll</name></name></expr> }</block></expr><op:operator pos:line="1391" pos:column="61">,</op:operator>
    }</block></expr>;</expr_stmt>
    <expr_stmt><expr pos:line="1393" pos:column="5">const <name pos:line="1393" pos:column="11">StupidMap</name><op:operator pos:line="1393" pos:column="20">&lt;</op:operator><name pos:line="1393" pos:column="21">UInt32</name></expr><op:operator pos:line="1393" pos:column="27">,</op:operator> <expr><call><call><name pos:line="1393" pos:column="29">bool</name> <argument_list pos:line="1393" pos:column="34">(<argument><expr><name><name pos:line="1393" pos:column="35">ScintillaMacOSX</name><op:operator pos:line="1393" pos:column="50">::</op:operator><type:modifier pos:line="1393" pos:column="52">*</type:modifier></name></expr></argument>)</argument_list></call><argument_list pos:line="1393" pos:column="54">()</argument_list></call><op:operator pos:line="1393" pos:column="56">&gt;</op:operator> <name><name pos:line="1393" pos:column="58">canProcessCommands</name><index pos:line="1393" pos:column="76">[]</index></name> <op:operator pos:line="1393" pos:column="79">=</op:operator> <block pos:line="1393" pos:column="81">{
        <expr><block pos:line="1394" pos:column="9">{ <expr><name pos:line="1394" pos:column="11">kHICommandCopy</name></expr><op:operator pos:line="1394" pos:column="25">,</op:operator> <expr><op:operator pos:line="1394" pos:column="27">&amp;</op:operator><name><name pos:line="1394" pos:column="28">ScintillaMacOSX</name><op:operator pos:line="1394" pos:column="43">::</op:operator><name pos:line="1394" pos:column="45">HasSelection</name></name></expr> }</block></expr><op:operator pos:line="1394" pos:column="59">,</op:operator>
        <expr><block pos:line="1395" pos:column="9">{ <expr><name pos:line="1395" pos:column="11">kHICommandPaste</name></expr><op:operator pos:line="1395" pos:column="26">,</op:operator> <expr><op:operator pos:line="1395" pos:column="28">&amp;</op:operator><name><name pos:line="1395" pos:column="29">ScintillaMacOSX</name><op:operator pos:line="1395" pos:column="44">::</op:operator><name pos:line="1395" pos:column="46">CanPaste</name></name></expr> }</block></expr><op:operator pos:line="1395" pos:column="56">,</op:operator>
        <expr><block pos:line="1396" pos:column="9">{ <expr><name pos:line="1396" pos:column="11">kHICommandCut</name></expr><op:operator pos:line="1396" pos:column="24">,</op:operator> <expr><op:operator pos:line="1396" pos:column="26">&amp;</op:operator><name><name pos:line="1396" pos:column="27">ScintillaMacOSX</name><op:operator pos:line="1396" pos:column="42">::</op:operator><name pos:line="1396" pos:column="44">HasSelection</name></name></expr> }</block></expr><op:operator pos:line="1396" pos:column="58">,</op:operator>
        <expr><block pos:line="1397" pos:column="9">{ <expr><name pos:line="1397" pos:column="11">kHICommandUndo</name></expr><op:operator pos:line="1397" pos:column="25">,</op:operator> <expr><op:operator pos:line="1397" pos:column="27">&amp;</op:operator><name><name pos:line="1397" pos:column="28">ScintillaMacOSX</name><op:operator pos:line="1397" pos:column="43">::</op:operator><name pos:line="1397" pos:column="45">CanUndo</name></name></expr> }</block></expr><op:operator pos:line="1397" pos:column="54">,</op:operator>
        <expr><block pos:line="1398" pos:column="9">{ <expr><name pos:line="1398" pos:column="11">kHICommandRedo</name></expr><op:operator pos:line="1398" pos:column="25">,</op:operator> <expr><op:operator pos:line="1398" pos:column="27">&amp;</op:operator><name><name pos:line="1398" pos:column="28">ScintillaMacOSX</name><op:operator pos:line="1398" pos:column="43">::</op:operator><name pos:line="1398" pos:column="45">CanRedo</name></name></expr> }</block></expr><op:operator pos:line="1398" pos:column="54">,</op:operator>
        <expr><block pos:line="1399" pos:column="9">{ <expr><name pos:line="1399" pos:column="11">kHICommandClear</name></expr><op:operator pos:line="1399" pos:column="26">,</op:operator> <expr><op:operator pos:line="1399" pos:column="28">&amp;</op:operator><name><name pos:line="1399" pos:column="29">ScintillaMacOSX</name><op:operator pos:line="1399" pos:column="44">::</op:operator><name pos:line="1399" pos:column="46">HasSelection</name></name></expr> }</block></expr><op:operator pos:line="1399" pos:column="60">,</op:operator>
        <expr><block pos:line="1400" pos:column="9">{ <expr><name pos:line="1400" pos:column="11">kHICommandSelectAll</name></expr><op:operator pos:line="1400" pos:column="30">,</op:operator> <expr><op:operator pos:line="1400" pos:column="32">&amp;</op:operator><name><name pos:line="1400" pos:column="33">ScintillaMacOSX</name><op:operator pos:line="1400" pos:column="48">::</op:operator><name pos:line="1400" pos:column="50">AlwaysTrue</name></name></expr> }</block></expr><op:operator pos:line="1400" pos:column="62">,</op:operator>
    }</block></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1403" pos:column="5">HICommand</name></type> <name pos:line="1403" pos:column="15">command</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1404" pos:column="5">OSStatus</name></type> <name pos:line="1404" pos:column="14">result</name> <init pos:line="1404" pos:column="21">= <expr><call><name pos:line="1404" pos:column="23">GetEventParameter</name><argument_list pos:line="1404" pos:column="40">( <argument><expr><name pos:line="1404" pos:column="42">event</name></expr></argument>, <argument><expr><name pos:line="1404" pos:column="49">kEventParamDirectObject</name></expr></argument>, <argument><expr><name pos:line="1404" pos:column="74">typeHICommand</name></expr></argument>, <argument><expr><name pos:line="1404" pos:column="89">NULL</name></expr></argument>, <argument><expr><sizeof pos:line="1404" pos:column="95">sizeof<argument_list pos:line="1404" pos:column="101">( <argument><expr><name pos:line="1404" pos:column="103">command</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1404" pos:column="114">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1404" pos:column="120">&amp;</op:operator><name pos:line="1404" pos:column="121">command</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1405" pos:column="5">assert</name><argument_list pos:line="1405" pos:column="11">( <argument><expr><name pos:line="1405" pos:column="13">result</name> <op:operator pos:line="1405" pos:column="20">==</op:operator> <name pos:line="1405" pos:column="23">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1407" pos:column="5">UInt32</name></type> <name pos:line="1407" pos:column="12">kind</name> <init pos:line="1407" pos:column="17">= <expr><call><name pos:line="1407" pos:column="19">GetEventKind</name><argument_list pos:line="1407" pos:column="31">( <argument><expr><name pos:line="1407" pos:column="33">event</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="1408" pos:column="5">Platform</name><op:operator pos:line="1408" pos:column="13">::</op:operator><name pos:line="1408" pos:column="15">DebugPrintf</name></name><argument_list pos:line="1408" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="1408" pos:column="27">"ScintillaMacOSX::CommandEventHandler kind %d\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="1408" pos:column="77">kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1410" pos:column="5">ScintillaMacOSX</name><type:modifier pos:line="1410" pos:column="20">*</type:modifier></type> <name pos:line="1410" pos:column="22">scintilla</name> <init pos:line="1410" pos:column="32">= <expr><call><name><name pos:line="1410" pos:column="34">reinterpret_cast</name><argument_list pos:line="1410" pos:column="50">&lt;<argument><expr><name pos:line="1410" pos:column="51">ScintillaMacOSX</name><op:operator pos:line="1410" pos:column="66">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1410" pos:column="68">( <argument><expr><name pos:line="1410" pos:column="70">data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1411" pos:column="5">assert</name><argument_list pos:line="1411" pos:column="11">( <argument><expr><name pos:line="1411" pos:column="13">scintilla</name> <op:operator pos:line="1411" pos:column="23">!=</op:operator> <name pos:line="1411" pos:column="26">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if pos:line="1413" pos:column="5">if <condition pos:line="1413" pos:column="8">( <expr><name pos:line="1413" pos:column="10">kind</name> <op:operator pos:line="1413" pos:column="15">==</op:operator> <name pos:line="1413" pos:column="18">kEventProcessCommand</name></expr> )</condition><then pos:line="1413" pos:column="40">
    <block pos:line="1414" pos:column="5">{
<cpp:ifdef pos:line="1415" pos:column="1">#<cpp:directive pos:line="1415" pos:column="2">ifdef</cpp:directive> <name pos:line="1415" pos:column="8">EXT_INPUT</name></cpp:ifdef>
        <comment type="line" pos:line="1416" pos:column="9">// We are getting a HI command, so stop extended input</comment>
        <expr_stmt><expr><call><name><name pos:line="1417" pos:column="9">ExtInput</name><op:operator pos:line="1417" pos:column="17">::</op:operator><name pos:line="1417" pos:column="19">stop</name></name> <argument_list pos:line="1417" pos:column="24">(<argument><expr><call><name><name pos:line="1417" pos:column="25">scintilla</name><op:operator pos:line="1417" pos:column="34">-&gt;</op:operator><name pos:line="1417" pos:column="36">GetViewRef</name></name><argument_list pos:line="1417" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1418" pos:column="1">#<cpp:directive pos:line="1418" pos:column="2">endif</cpp:directive></cpp:endif>
        <comment type="line" pos:line="1419" pos:column="9">// Find the method pointer that matches this command</comment>
        <expr_stmt><expr><call><call><name pos:line="1420" pos:column="9">void</name> <argument_list pos:line="1420" pos:column="14">(<argument><expr><name><name pos:line="1420" pos:column="15">ScintillaMacOSX</name><op:operator pos:line="1420" pos:column="30">::</op:operator><type:modifier pos:line="1420" pos:column="32">*</type:modifier><name pos:line="1420" pos:column="33">methodPtr</name></name></expr></argument>)</argument_list></call><argument_list pos:line="1420" pos:column="43">()</argument_list></call> <op:operator pos:line="1420" pos:column="46">=</op:operator> <call><name pos:line="1420" pos:column="48">StupidMapFind</name><argument_list pos:line="1420" pos:column="61">( <argument><expr><name pos:line="1420" pos:column="63">processCommands</name></expr></argument>, <argument><expr><name><name pos:line="1420" pos:column="80">command</name><op:operator pos:line="1420" pos:column="87">.</op:operator><name pos:line="1420" pos:column="88">commandID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if pos:line="1422" pos:column="9">if <condition pos:line="1422" pos:column="12">( <expr><name pos:line="1422" pos:column="14">methodPtr</name> <op:operator pos:line="1422" pos:column="24">!=</op:operator> <name pos:line="1422" pos:column="27">NULL</name></expr> )</condition><then pos:line="1422" pos:column="33">
        <block pos:line="1423" pos:column="9">{
            <comment type="line" pos:line="1424" pos:column="13">// Call the method if we found it, and tell the caller that we handled this event</comment>
            <expr_stmt><expr><call pos:line="1425" pos:column="13">(<name><name pos:line="1425" pos:column="14">scintilla</name><op:operator pos:line="1425" pos:column="23">-&gt;*</op:operator><name pos:line="1425" pos:column="26">methodPtr</name></name>)<argument_list pos:line="1425" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1426" pos:column="13">result</name> <op:operator pos:line="1426" pos:column="20">=</op:operator> <name pos:line="1426" pos:column="22">noErr</name></expr>;</expr_stmt>
        }</block></then> <else pos:line="1427" pos:column="11">else <block pos:line="1427" pos:column="16">{
            <comment type="line" pos:line="1428" pos:column="13">// tell the caller that we did not handle the event</comment>
            <expr_stmt><expr><name pos:line="1429" pos:column="13">result</name> <op:operator pos:line="1429" pos:column="20">=</op:operator> <name pos:line="1429" pos:column="22">eventNotHandledErr</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
    <comment type="line" pos:line="1432" pos:column="5">// The default Mac OS X text editor does not handle these events to enable/disable menu items</comment>
    <comment type="line" pos:line="1433" pos:column="5">// Why not? I think it should, so Scintilla does.</comment>
    <else pos:line="1434" pos:column="5">else <if pos:line="1434" pos:column="10">if <condition pos:line="1434" pos:column="13">( <expr><name pos:line="1434" pos:column="15">kind</name> <op:operator pos:line="1434" pos:column="20">==</op:operator> <name pos:line="1434" pos:column="23">kEventCommandUpdateStatus</name> <op:operator pos:line="1434" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="1434" pos:column="52">(</op:operator> <name><name pos:line="1434" pos:column="54">command</name><op:operator pos:line="1434" pos:column="61">.</op:operator><name pos:line="1434" pos:column="62">attributes</name></name> <op:operator pos:line="1434" pos:column="73">&amp;</op:operator> <name pos:line="1434" pos:column="75">kHICommandFromMenu</name> <op:operator pos:line="1434" pos:column="94">)</op:operator></expr> )</condition><then pos:line="1434" pos:column="97">
    <block pos:line="1435" pos:column="5">{
        <comment type="line" pos:line="1436" pos:column="9">// Find the method pointer that matches this command</comment>
        <expr_stmt><expr><call><call><name pos:line="1437" pos:column="9">bool</name> <argument_list pos:line="1437" pos:column="14">(<argument><expr><name><name pos:line="1437" pos:column="15">ScintillaMacOSX</name><op:operator pos:line="1437" pos:column="30">::</op:operator><type:modifier pos:line="1437" pos:column="32">*</type:modifier><name pos:line="1437" pos:column="33">methodPtr</name></name></expr></argument>)</argument_list></call><argument_list pos:line="1437" pos:column="43">()</argument_list></call> <op:operator pos:line="1437" pos:column="46">=</op:operator> <call><name pos:line="1437" pos:column="48">StupidMapFind</name><argument_list pos:line="1437" pos:column="61">( <argument><expr><name pos:line="1437" pos:column="63">canProcessCommands</name></expr></argument>, <argument><expr><name><name pos:line="1437" pos:column="83">command</name><op:operator pos:line="1437" pos:column="90">.</op:operator><name pos:line="1437" pos:column="91">commandID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if pos:line="1439" pos:column="9">if <condition pos:line="1439" pos:column="12">( <expr><name pos:line="1439" pos:column="14">methodPtr</name> <op:operator pos:line="1439" pos:column="24">!=</op:operator> <name pos:line="1439" pos:column="27">NULL</name></expr> )</condition><then pos:line="1439" pos:column="33"> <block pos:line="1439" pos:column="34">{
            <comment type="line" pos:line="1440" pos:column="13">// Call the method if we found it: enabling/disabling menu items</comment>
            <if pos:line="1441" pos:column="13">if <condition pos:line="1441" pos:column="16">( <expr><call pos:line="1441" pos:column="18">(<name><name pos:line="1441" pos:column="19">scintilla</name><op:operator pos:line="1441" pos:column="28">-&gt;*</op:operator><name pos:line="1441" pos:column="31">methodPtr</name></name>)<argument_list pos:line="1441" pos:column="41">()</argument_list></call></expr> )</condition><then pos:line="1441" pos:column="45"> <block pos:line="1441" pos:column="46">{
                <expr_stmt><expr><call><name pos:line="1442" pos:column="17">EnableMenuItem</name><argument_list pos:line="1442" pos:column="31">( <argument><expr><name><name pos:line="1442" pos:column="33">command</name><op:operator pos:line="1442" pos:column="40">.</op:operator><name pos:line="1442" pos:column="41">menu</name><op:operator pos:line="1442" pos:column="45">.</op:operator><name pos:line="1442" pos:column="46">menuRef</name></name></expr></argument>, <argument><expr><name><name pos:line="1442" pos:column="55">command</name><op:operator pos:line="1442" pos:column="62">.</op:operator><name pos:line="1442" pos:column="63">menu</name><op:operator pos:line="1442" pos:column="67">.</op:operator><name pos:line="1442" pos:column="68">menuItemIndex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1443" pos:column="15">else <block pos:line="1443" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="1444" pos:column="17">DisableMenuItem</name><argument_list pos:line="1444" pos:column="32">( <argument><expr><name><name pos:line="1444" pos:column="34">command</name><op:operator pos:line="1444" pos:column="41">.</op:operator><name pos:line="1444" pos:column="42">menu</name><op:operator pos:line="1444" pos:column="46">.</op:operator><name pos:line="1444" pos:column="47">menuRef</name></name></expr></argument>, <argument><expr><name><name pos:line="1444" pos:column="56">command</name><op:operator pos:line="1444" pos:column="63">.</op:operator><name pos:line="1444" pos:column="64">menu</name><op:operator pos:line="1444" pos:column="68">.</op:operator><name pos:line="1444" pos:column="69">menuItemIndex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name pos:line="1446" pos:column="13">result</name> <op:operator pos:line="1446" pos:column="20">=</op:operator> <name pos:line="1446" pos:column="22">noErr</name></expr>;</expr_stmt>
        }</block></then> <else pos:line="1447" pos:column="11">else <block pos:line="1447" pos:column="16">{
            <comment type="line" pos:line="1448" pos:column="13">// tell the caller that we did not handle the event</comment>
            <expr_stmt><expr><name pos:line="1449" pos:column="13">result</name> <op:operator pos:line="1449" pos:column="20">=</op:operator> <name pos:line="1449" pos:column="22">eventNotHandledErr</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then> <else pos:line="1451" pos:column="7">else <block pos:line="1451" pos:column="12">{
        <comment type="line" pos:line="1452" pos:column="9">// Unhandled event: We should never get here</comment>
        <expr_stmt><expr><call><name pos:line="1453" pos:column="9">assert</name><argument_list pos:line="1453" pos:column="15">( <argument><expr><lit:literal type="boolean" pos:line="1453" pos:column="17">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1454" pos:column="9">result</name> <op:operator pos:line="1454" pos:column="16">=</op:operator> <name pos:line="1454" pos:column="18">eventNotHandledErr</name></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <return pos:line="1457" pos:column="5">return <expr><name pos:line="1457" pos:column="12">result</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1460" pos:column="1">bool</name></type> <name><name pos:line="1460" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1460" pos:column="21">::</op:operator><name pos:line="1460" pos:column="23">HasSelection</name></name><parameter_list pos:line="1460" pos:column="35">()</parameter_list>
<block pos:line="1461" pos:column="1">{
    <return pos:line="1462" pos:column="5">return <expr><op:operator pos:line="1462" pos:column="12">(</op:operator> <op:operator pos:line="1462" pos:column="14">!</op:operator><call><name><name pos:line="1462" pos:column="15">sel</name><op:operator pos:line="1462" pos:column="18">.</op:operator><name pos:line="1462" pos:column="19">Empty</name></name><argument_list pos:line="1462" pos:column="24">()</argument_list></call> <op:operator pos:line="1462" pos:column="27">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="1465" pos:column="1">bool</name></type> <name><name pos:line="1465" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1465" pos:column="21">::</op:operator><name pos:line="1465" pos:column="23">CanUndo</name></name><parameter_list pos:line="1465" pos:column="30">()</parameter_list>
<block pos:line="1466" pos:column="1">{
    <return pos:line="1467" pos:column="5">return <expr><call><name><name pos:line="1467" pos:column="12">pdoc</name><op:operator pos:line="1467" pos:column="16">-&gt;</op:operator><name pos:line="1467" pos:column="18">CanUndo</name></name><argument_list pos:line="1467" pos:column="25">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1470" pos:column="1">bool</name></type> <name><name pos:line="1470" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1470" pos:column="21">::</op:operator><name pos:line="1470" pos:column="23">CanRedo</name></name><parameter_list pos:line="1470" pos:column="30">()</parameter_list>
<block pos:line="1471" pos:column="1">{
    <return pos:line="1472" pos:column="5">return <expr><call><name><name pos:line="1472" pos:column="12">pdoc</name><op:operator pos:line="1472" pos:column="16">-&gt;</op:operator><name pos:line="1472" pos:column="18">CanRedo</name></name><argument_list pos:line="1472" pos:column="25">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1475" pos:column="1">bool</name></type> <name><name pos:line="1475" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1475" pos:column="21">::</op:operator><name pos:line="1475" pos:column="23">AlwaysTrue</name></name><parameter_list pos:line="1475" pos:column="33">()</parameter_list>
<block pos:line="1476" pos:column="1">{
    <return pos:line="1477" pos:column="5">return <expr><lit:literal type="boolean" pos:line="1477" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1480" pos:column="1">void</name></type> <name><name pos:line="1480" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1480" pos:column="21">::</op:operator><name pos:line="1480" pos:column="23">CopyToClipboard</name></name><parameter_list pos:line="1480" pos:column="38">(<param><decl><type><specifier pos:line="1480" pos:column="39">const</specifier> <name pos:line="1480" pos:column="45">SelectionText</name> <type:modifier pos:line="1480" pos:column="59">&amp;</type:modifier></type><name pos:line="1480" pos:column="60">selectedText</name></decl></param>)</parameter_list> <block pos:line="1480" pos:column="74">{
    <decl_stmt><decl><type><name pos:line="1481" pos:column="5">PasteboardRef</name></type> <name pos:line="1481" pos:column="19">theClipboard</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1482" pos:column="5">SetPasteboardData</name><argument_list pos:line="1482" pos:column="22">(<argument><expr><name pos:line="1482" pos:column="23">theClipboard</name></expr></argument>, <argument><expr><name pos:line="1482" pos:column="37">selectedText</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1482" pos:column="51">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1482" pos:column="59">// not in drag/drop</comment>
    <comment type="line" pos:line="1483" pos:column="5">// Done with the CFString</comment>
    <expr_stmt><expr><call><name pos:line="1484" pos:column="5">CFRelease</name><argument_list pos:line="1484" pos:column="14">( <argument><expr><name pos:line="1484" pos:column="16">theClipboard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1487" pos:column="1">void</name></type> <name><name pos:line="1487" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1487" pos:column="21">::</op:operator><name pos:line="1487" pos:column="23">Copy</name></name><parameter_list pos:line="1487" pos:column="27">()</parameter_list>
<block pos:line="1488" pos:column="1">{
    <if pos:line="1489" pos:column="5">if <condition pos:line="1489" pos:column="8">(<expr><op:operator pos:line="1489" pos:column="9">!</op:operator><call><name><name pos:line="1489" pos:column="10">sel</name><op:operator pos:line="1489" pos:column="13">.</op:operator><name pos:line="1489" pos:column="14">Empty</name></name><argument_list pos:line="1489" pos:column="19">()</argument_list></call></expr>)</condition><then pos:line="1489" pos:column="22"> <block pos:line="1489" pos:column="23">{
<cpp:ifdef pos:line="1490" pos:column="1">#<cpp:directive pos:line="1490" pos:column="2">ifdef</cpp:directive> <name pos:line="1490" pos:column="8">EXT_INPUT</name></cpp:ifdef>
        <expr_stmt><expr><call><name><name pos:line="1491" pos:column="9">ExtInput</name><op:operator pos:line="1491" pos:column="17">::</op:operator><name pos:line="1491" pos:column="19">stop</name></name> <argument_list pos:line="1491" pos:column="24">(<argument><expr><call><name pos:line="1491" pos:column="25">GetViewRef</name><argument_list pos:line="1491" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1492" pos:column="1">#<cpp:directive pos:line="1492" pos:column="2">endif</cpp:directive></cpp:endif>
        <decl_stmt><decl><type><name pos:line="1493" pos:column="9">SelectionText</name></type> <name pos:line="1493" pos:column="23">selectedText</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1494" pos:column="9">CopySelectionRange</name><argument_list pos:line="1494" pos:column="27">(<argument><expr><op:operator pos:line="1494" pos:column="28">&amp;</op:operator><name pos:line="1494" pos:column="29">selectedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1495" pos:column="9">fprintf</name><argument_list pos:line="1495" pos:column="16">(<argument><expr><name pos:line="1495" pos:column="17">stderr</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1495" pos:column="25">"copied text is rectangular? %d\n"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1495" pos:column="61">selectedText</name><op:operator pos:line="1495" pos:column="73">.</op:operator><name pos:line="1495" pos:column="74">rectangular</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1496" pos:column="9">CopyToClipboard</name><argument_list pos:line="1496" pos:column="24">(<argument><expr><name pos:line="1496" pos:column="25">selectedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="1500" pos:column="1">bool</name></type> <name><name pos:line="1500" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1500" pos:column="21">::</op:operator><name pos:line="1500" pos:column="23">CanPaste</name></name><parameter_list pos:line="1500" pos:column="31">()</parameter_list>
<block pos:line="1501" pos:column="1">{
    <if pos:line="1502" pos:column="5">if <condition pos:line="1502" pos:column="8">(<expr><op:operator pos:line="1502" pos:column="9">!</op:operator><call><name><name pos:line="1502" pos:column="10">Editor</name><op:operator pos:line="1502" pos:column="16">::</op:operator><name pos:line="1502" pos:column="18">CanPaste</name></name><argument_list pos:line="1502" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="1502" pos:column="29">
        <return pos:line="1503" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1503" pos:column="16">false</lit:literal></expr>;</return></then></if>

    <decl_stmt><decl><type><name pos:line="1505" pos:column="5">PasteboardRef</name></type> <name pos:line="1505" pos:column="19">theClipboard</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1506" pos:column="5">bool</name></type> <name pos:line="1506" pos:column="10">isFileURL</name> <init pos:line="1506" pos:column="20">= <expr><lit:literal type="boolean" pos:line="1506" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name pos:line="1508" pos:column="5">PasteboardCreate</name><argument_list pos:line="1508" pos:column="21">( <argument><expr><name pos:line="1508" pos:column="23">kPasteboardClipboard</name></expr></argument>, <argument><expr><op:operator pos:line="1508" pos:column="45">&amp;</op:operator><name pos:line="1508" pos:column="46">theClipboard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1509" pos:column="5">bool</name></type> <name pos:line="1509" pos:column="10">ok</name> <init pos:line="1509" pos:column="13">= <expr><call><name pos:line="1509" pos:column="15">GetPasteboardData</name><argument_list pos:line="1509" pos:column="32">(<argument><expr><name pos:line="1509" pos:column="33">theClipboard</name></expr></argument>, <argument><expr><name pos:line="1509" pos:column="47">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1509" pos:column="53">&amp;</op:operator><name pos:line="1509" pos:column="54">isFileURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1510" pos:column="5">CFRelease</name><argument_list pos:line="1510" pos:column="14">( <argument><expr><name pos:line="1510" pos:column="16">theClipboard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return pos:line="1511" pos:column="5">return <expr><name pos:line="1511" pos:column="12">ok</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1514" pos:column="1">void</name></type> <name><name pos:line="1514" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1514" pos:column="21">::</op:operator><name pos:line="1514" pos:column="23">Paste</name></name><parameter_list pos:line="1514" pos:column="28">()</parameter_list>
<block pos:line="1515" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="1516" pos:column="5">Paste</name><argument_list pos:line="1516" pos:column="10">(<argument><expr><lit:literal type="boolean" pos:line="1516" pos:column="11">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="1519" pos:column="1">// XXX there is no system flag (I can find) to tell us that a paste is rectangular, so</comment>
<comment type="line" pos:line="1520" pos:column="1">//     applications must implement an additional command (eg. option-V like BBEdit)</comment>
<comment type="line" pos:line="1521" pos:column="1">//     in order to provide rectangular paste</comment>
<function><type><name pos:line="1522" pos:column="1">void</name></type> <name><name pos:line="1522" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1522" pos:column="21">::</op:operator><name pos:line="1522" pos:column="23">Paste</name></name><parameter_list pos:line="1522" pos:column="28">(<param><decl><type><name pos:line="1522" pos:column="29">bool</name></type> <name pos:line="1522" pos:column="34">forceRectangular</name></decl></param>)</parameter_list>
<block pos:line="1523" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1524" pos:column="5">PasteboardRef</name></type> <name pos:line="1524" pos:column="19">theClipboard</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1525" pos:column="5">SelectionText</name></type> <name pos:line="1525" pos:column="19">selectedText</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="1526" pos:column="5">selectedText</name><op:operator pos:line="1526" pos:column="17">.</op:operator><name pos:line="1526" pos:column="18">rectangular</name></name> <op:operator pos:line="1526" pos:column="30">=</op:operator> <name pos:line="1526" pos:column="32">forceRectangular</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1527" pos:column="5">bool</name></type> <name pos:line="1527" pos:column="10">isFileURL</name> <init pos:line="1527" pos:column="20">= <expr><lit:literal type="boolean" pos:line="1527" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1528" pos:column="5">PasteboardCreate</name><argument_list pos:line="1528" pos:column="21">( <argument><expr><name pos:line="1528" pos:column="23">kPasteboardClipboard</name></expr></argument>, <argument><expr><op:operator pos:line="1528" pos:column="45">&amp;</op:operator><name pos:line="1528" pos:column="46">theClipboard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1529" pos:column="5">bool</name></type> <name pos:line="1529" pos:column="10">ok</name> <init pos:line="1529" pos:column="13">= <expr><call><name pos:line="1529" pos:column="15">GetPasteboardData</name><argument_list pos:line="1529" pos:column="32">(<argument><expr><name pos:line="1529" pos:column="33">theClipboard</name></expr></argument>, <argument><expr><op:operator pos:line="1529" pos:column="47">&amp;</op:operator><name pos:line="1529" pos:column="48">selectedText</name></expr></argument>, <argument><expr><op:operator pos:line="1529" pos:column="62">&amp;</op:operator><name pos:line="1529" pos:column="63">isFileURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1530" pos:column="5">CFRelease</name><argument_list pos:line="1530" pos:column="14">( <argument><expr><name pos:line="1530" pos:column="16">theClipboard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1531" pos:column="5">fprintf</name><argument_list pos:line="1531" pos:column="12">(<argument><expr><name pos:line="1531" pos:column="13">stderr</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1531" pos:column="21">"paste is rectangular? %d\n"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1531" pos:column="51">selectedText</name><op:operator pos:line="1531" pos:column="63">.</op:operator><name pos:line="1531" pos:column="64">rectangular</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1532" pos:column="5">if <condition pos:line="1532" pos:column="8">(<expr><op:operator pos:line="1532" pos:column="9">!</op:operator><name pos:line="1532" pos:column="10">ok</name> <op:operator pos:line="1532" pos:column="13">||</op:operator> <op:operator pos:line="1532" pos:column="16">!</op:operator><name><name pos:line="1532" pos:column="17">selectedText</name><op:operator pos:line="1532" pos:column="29">.</op:operator><name pos:line="1532" pos:column="30">s</name></name></expr>)</condition><then pos:line="1532" pos:column="32">
        <comment type="line" pos:line="1533" pos:column="9">// no data or no flavor we support</comment>
        <return pos:line="1534" pos:column="9">return;</return></then></if>

    <expr_stmt><expr><call><name><name pos:line="1536" pos:column="5">pdoc</name><op:operator pos:line="1536" pos:column="9">-&gt;</op:operator><name pos:line="1536" pos:column="11">BeginUndoAction</name></name><argument_list pos:line="1536" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1537" pos:column="5">ClearSelection</name><argument_list pos:line="1537" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1538" pos:column="5">if <condition pos:line="1538" pos:column="8">(<expr><name><name pos:line="1538" pos:column="9">selectedText</name><op:operator pos:line="1538" pos:column="21">.</op:operator><name pos:line="1538" pos:column="22">rectangular</name></name></expr>)</condition><then pos:line="1538" pos:column="34"> <block pos:line="1538" pos:column="35">{
        <decl_stmt><decl><type><name pos:line="1539" pos:column="9">SelectionPosition</name></type> <name pos:line="1539" pos:column="27">selStart</name> <init pos:line="1539" pos:column="36">= <expr><call><name><name pos:line="1539" pos:column="38">sel</name><op:operator pos:line="1539" pos:column="41">.</op:operator><name pos:line="1539" pos:column="42">RangeMain</name></name><argument_list pos:line="1539" pos:column="51">()</argument_list></call><op:operator pos:line="1539" pos:column="53">.</op:operator><call><name pos:line="1539" pos:column="54">Start</name><argument_list pos:line="1539" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1540" pos:column="9">PasteRectangular</name><argument_list pos:line="1540" pos:column="25">(<argument><expr><name pos:line="1540" pos:column="26">selStart</name></expr></argument>, <argument><expr><name><name pos:line="1540" pos:column="36">selectedText</name><op:operator pos:line="1540" pos:column="48">.</op:operator><name pos:line="1540" pos:column="49">s</name></name></expr></argument>, <argument><expr><name><name pos:line="1540" pos:column="52">selectedText</name><op:operator pos:line="1540" pos:column="64">.</op:operator><name pos:line="1540" pos:column="65">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="1541" pos:column="7">else
    <if pos:line="1542" pos:column="5">if <condition pos:line="1542" pos:column="8">( <expr><call><name><name pos:line="1542" pos:column="10">pdoc</name><op:operator pos:line="1542" pos:column="14">-&gt;</op:operator><name pos:line="1542" pos:column="16">InsertString</name></name><argument_list pos:line="1542" pos:column="28">( <argument><expr><call><name><name pos:line="1542" pos:column="30">sel</name><op:operator pos:line="1542" pos:column="33">.</op:operator><name pos:line="1542" pos:column="34">RangeMain</name></name><argument_list pos:line="1542" pos:column="43">()</argument_list></call><op:operator pos:line="1542" pos:column="45">.</op:operator><call><name><name pos:line="1542" pos:column="46">caret</name><op:operator pos:line="1542" pos:column="51">.</op:operator><name pos:line="1542" pos:column="52">Position</name></name><argument_list pos:line="1542" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1542" pos:column="64">selectedText</name><op:operator pos:line="1542" pos:column="76">.</op:operator><name pos:line="1542" pos:column="77">s</name></name></expr></argument>, <argument><expr><name><name pos:line="1542" pos:column="80">selectedText</name><op:operator pos:line="1542" pos:column="92">.</op:operator><name pos:line="1542" pos:column="93">len</name></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="1542" pos:column="100"> <block pos:line="1542" pos:column="101">{
        <expr_stmt><expr><call><name pos:line="1543" pos:column="9">SetEmptySelection</name><argument_list pos:line="1543" pos:column="26">( <argument><expr><call><name><name pos:line="1543" pos:column="28">sel</name><op:operator pos:line="1543" pos:column="31">.</op:operator><name pos:line="1543" pos:column="32">RangeMain</name></name><argument_list pos:line="1543" pos:column="41">()</argument_list></call><op:operator pos:line="1543" pos:column="43">.</op:operator><call><name><name pos:line="1543" pos:column="44">caret</name><op:operator pos:line="1543" pos:column="49">.</op:operator><name pos:line="1543" pos:column="50">Position</name></name><argument_list pos:line="1543" pos:column="58">()</argument_list></call> <op:operator pos:line="1543" pos:column="61">+</op:operator> <name><name pos:line="1543" pos:column="63">selectedText</name><op:operator pos:line="1543" pos:column="75">.</op:operator><name pos:line="1543" pos:column="76">len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <expr_stmt><expr><call><name><name pos:line="1546" pos:column="5">pdoc</name><op:operator pos:line="1546" pos:column="9">-&gt;</op:operator><name pos:line="1546" pos:column="11">EndUndoAction</name></name><argument_list pos:line="1546" pos:column="24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1548" pos:column="5">Redraw</name><argument_list pos:line="1548" pos:column="11">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1549" pos:column="5">EnsureCaretVisible</name><argument_list pos:line="1549" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1552" pos:column="1">void</name></type> <name><name pos:line="1552" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1552" pos:column="21">::</op:operator><name pos:line="1552" pos:column="23">CreateCallTipWindow</name></name><parameter_list pos:line="1552" pos:column="42">(<param><decl><type><name pos:line="1552" pos:column="43">PRectangle</name></type> <name pos:line="1552" pos:column="54">rc</name></decl></param>)</parameter_list> <block pos:line="1552" pos:column="58">{
    <comment type="line" pos:line="1553" pos:column="5">// create a calltip window</comment>
    <if pos:line="1554" pos:column="5">if <condition pos:line="1554" pos:column="8">(<expr><op:operator pos:line="1554" pos:column="9">!</op:operator><call><name><name pos:line="1554" pos:column="10">ct</name><op:operator pos:line="1554" pos:column="12">.</op:operator><name pos:line="1554" pos:column="13">wCallTip</name><op:operator pos:line="1554" pos:column="21">.</op:operator><name pos:line="1554" pos:column="22">Created</name></name><argument_list pos:line="1554" pos:column="29">()</argument_list></call></expr>)</condition><then pos:line="1554" pos:column="32"> <block pos:line="1554" pos:column="33">{
        <decl_stmt><decl><type><name pos:line="1555" pos:column="9">WindowClass</name></type> <name pos:line="1555" pos:column="21">windowClass</name> <init pos:line="1555" pos:column="33">= <expr><name pos:line="1555" pos:column="35">kHelpWindowClass</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1556" pos:column="9">WindowAttributes</name></type> <name pos:line="1556" pos:column="26">attributes</name> <init pos:line="1556" pos:column="37">= <expr><name pos:line="1556" pos:column="39">kWindowNoAttributes</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1557" pos:column="9">Rect</name></type> <name pos:line="1557" pos:column="14">contentBounds</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1558" pos:column="9">WindowRef</name></type> <name pos:line="1558" pos:column="19">outWindow</name></decl>;</decl_stmt>

        <comment type="line" pos:line="1560" pos:column="9">// convert PRectangle to Rect</comment>
        <comment type="line" pos:line="1561" pos:column="9">// this adjustment gets the calltip window placed in the correct location relative</comment>
        <comment type="line" pos:line="1562" pos:column="9">// to our editor window</comment>
        <decl_stmt><decl><type><name pos:line="1563" pos:column="9">Rect</name></type> <name pos:line="1563" pos:column="14">bounds</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1564" pos:column="9">OSStatus</name></type> <name pos:line="1564" pos:column="18">err</name></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="1565" pos:column="9">err</name> <op:operator pos:line="1565" pos:column="13">=</op:operator> <call><name pos:line="1565" pos:column="15">GetWindowBounds</name><argument_list pos:line="1565" pos:column="30">( <argument><expr><call><name><name pos:line="1565" pos:column="32">this</name><op:operator pos:line="1565" pos:column="36">-&gt;</op:operator><name pos:line="1565" pos:column="38">GetOwner</name></name><argument_list pos:line="1565" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1565" pos:column="50">kWindowGlobalPortRgn</name></expr></argument>, <argument><expr><op:operator pos:line="1565" pos:column="72">&amp;</op:operator><name pos:line="1565" pos:column="73">bounds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1566" pos:column="9">assert</name><argument_list pos:line="1566" pos:column="15">( <argument><expr><name pos:line="1566" pos:column="17">err</name> <op:operator pos:line="1566" pos:column="21">==</op:operator> <name pos:line="1566" pos:column="24">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1567" pos:column="9">contentBounds</name><op:operator pos:line="1567" pos:column="22">.</op:operator><name pos:line="1567" pos:column="23">top</name></name> <op:operator pos:line="1567" pos:column="27">=</op:operator> <name><name pos:line="1567" pos:column="29">rc</name><op:operator pos:line="1567" pos:column="31">.</op:operator><name pos:line="1567" pos:column="32">top</name></name> <op:operator pos:line="1567" pos:column="36">+</op:operator> <name><name pos:line="1567" pos:column="38">bounds</name><op:operator pos:line="1567" pos:column="44">.</op:operator><name pos:line="1567" pos:column="45">top</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1568" pos:column="9">contentBounds</name><op:operator pos:line="1568" pos:column="22">.</op:operator><name pos:line="1568" pos:column="23">bottom</name></name> <op:operator pos:line="1568" pos:column="30">=</op:operator> <name><name pos:line="1568" pos:column="32">rc</name><op:operator pos:line="1568" pos:column="34">.</op:operator><name pos:line="1568" pos:column="35">bottom</name></name> <op:operator pos:line="1568" pos:column="42">+</op:operator> <name><name pos:line="1568" pos:column="44">bounds</name><op:operator pos:line="1568" pos:column="50">.</op:operator><name pos:line="1568" pos:column="51">top</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1569" pos:column="9">contentBounds</name><op:operator pos:line="1569" pos:column="22">.</op:operator><name pos:line="1569" pos:column="23">right</name></name> <op:operator pos:line="1569" pos:column="29">=</op:operator> <name><name pos:line="1569" pos:column="31">rc</name><op:operator pos:line="1569" pos:column="33">.</op:operator><name pos:line="1569" pos:column="34">right</name></name> <op:operator pos:line="1569" pos:column="40">+</op:operator> <name><name pos:line="1569" pos:column="42">bounds</name><op:operator pos:line="1569" pos:column="48">.</op:operator><name pos:line="1569" pos:column="49">left</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1570" pos:column="9">contentBounds</name><op:operator pos:line="1570" pos:column="22">.</op:operator><name pos:line="1570" pos:column="23">left</name></name> <op:operator pos:line="1570" pos:column="28">=</op:operator> <name><name pos:line="1570" pos:column="30">rc</name><op:operator pos:line="1570" pos:column="32">.</op:operator><name pos:line="1570" pos:column="33">left</name></name> <op:operator pos:line="1570" pos:column="38">+</op:operator> <name><name pos:line="1570" pos:column="40">bounds</name><op:operator pos:line="1570" pos:column="46">.</op:operator><name pos:line="1570" pos:column="47">left</name></name></expr>;</expr_stmt>

        <comment type="line" pos:line="1572" pos:column="9">// create our calltip hiview</comment>
        <decl_stmt><decl><type><name pos:line="1573" pos:column="9">HIViewRef</name></type> <name pos:line="1573" pos:column="19">ctw</name> <init pos:line="1573" pos:column="23">= <expr><call><name pos:line="1573" pos:column="25">scintilla_calltip_new</name><argument_list pos:line="1573" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1574" pos:column="9">CallTip</name><type:modifier pos:line="1574" pos:column="16">*</type:modifier></type> <name pos:line="1574" pos:column="18">objectPtr</name> <init pos:line="1574" pos:column="28">= <expr><op:operator pos:line="1574" pos:column="30">&amp;</op:operator><name pos:line="1574" pos:column="31">ct</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1575" pos:column="9">ScintillaMacOSX</name><type:modifier pos:line="1575" pos:column="24">*</type:modifier></type> <name pos:line="1575" pos:column="26">sciThis</name> <init pos:line="1575" pos:column="34">= <expr><name pos:line="1575" pos:column="36">this</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1576" pos:column="9">SetControlProperty</name><argument_list pos:line="1576" pos:column="27">( <argument><expr><name pos:line="1576" pos:column="29">ctw</name></expr></argument>, <argument><expr><name pos:line="1576" pos:column="34">scintillaMacOSType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1576" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="1576" pos:column="57">sizeof<argument_list pos:line="1576" pos:column="63">( <argument><expr><name pos:line="1576" pos:column="65">this</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1576" pos:column="73">&amp;</op:operator><name pos:line="1576" pos:column="74">sciThis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1577" pos:column="9">SetControlProperty</name><argument_list pos:line="1577" pos:column="27">( <argument><expr><name pos:line="1577" pos:column="29">ctw</name></expr></argument>, <argument><expr><name pos:line="1577" pos:column="34">scintillaCallTipType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1577" pos:column="56">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="1577" pos:column="59">sizeof<argument_list pos:line="1577" pos:column="65">( <argument><expr><name pos:line="1577" pos:column="67">objectPtr</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1577" pos:column="80">&amp;</op:operator><name pos:line="1577" pos:column="81">objectPtr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="1579" pos:column="9">CreateNewWindow</name><argument_list pos:line="1579" pos:column="24">(<argument><expr><name pos:line="1579" pos:column="25">windowClass</name></expr></argument>, <argument><expr><name pos:line="1579" pos:column="38">attributes</name></expr></argument>, <argument><expr><op:operator pos:line="1579" pos:column="50">&amp;</op:operator><name pos:line="1579" pos:column="51">contentBounds</name></expr></argument>, <argument><expr><op:operator pos:line="1579" pos:column="66">&amp;</op:operator><name pos:line="1579" pos:column="67">outWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="1580" pos:column="9">ControlRef</name></type> <name pos:line="1580" pos:column="20">root</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1581" pos:column="9">CreateRootControl</name><argument_list pos:line="1581" pos:column="26">(<argument><expr><name pos:line="1581" pos:column="27">outWindow</name></expr></argument>, <argument><expr><op:operator pos:line="1581" pos:column="38">&amp;</op:operator><name pos:line="1581" pos:column="39">root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name pos:line="1583" pos:column="9">HIViewRef</name></type> <name pos:line="1583" pos:column="19">hiroot</name> <init pos:line="1583" pos:column="26">= <expr><call><name pos:line="1583" pos:column="28">HIViewGetRoot</name> <argument_list pos:line="1583" pos:column="42">(<argument><expr><name pos:line="1583" pos:column="43">outWindow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1584" pos:column="9">HIViewAddSubview</name><argument_list pos:line="1584" pos:column="25">(<argument><expr><name pos:line="1584" pos:column="26">hiroot</name></expr></argument>, <argument><expr><name pos:line="1584" pos:column="34">ctw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name pos:line="1586" pos:column="9">HIRect</name></type> <name pos:line="1586" pos:column="16">boundsRect</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1587" pos:column="9">HIViewGetFrame</name><argument_list pos:line="1587" pos:column="23">(<argument><expr><name pos:line="1587" pos:column="24">hiroot</name></expr></argument>, <argument><expr><op:operator pos:line="1587" pos:column="32">&amp;</op:operator><name pos:line="1587" pos:column="33">boundsRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1588" pos:column="9">HIViewSetFrame</name><argument_list pos:line="1588" pos:column="23">( <argument><expr><name pos:line="1588" pos:column="25">ctw</name></expr></argument>, <argument><expr><op:operator pos:line="1588" pos:column="30">&amp;</op:operator><name pos:line="1588" pos:column="31">boundsRect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="1590" pos:column="9">// bind the size of the calltip to the size of it's container window</comment>
        <decl_stmt><decl><type><name pos:line="1591" pos:column="9">HILayoutInfo</name></type> <name pos:line="1591" pos:column="22">layout</name> <init pos:line="1591" pos:column="29">= <expr><block pos:line="1591" pos:column="31">{
            <expr><name pos:line="1592" pos:column="13">kHILayoutInfoVersionZero</name></expr>,
            <expr><block pos:line="1593" pos:column="13">{
              <expr><block pos:line="1594" pos:column="15">{ <expr><name pos:line="1594" pos:column="17">NULL</name></expr>, <expr><name pos:line="1594" pos:column="23">kHILayoutBindTop</name></expr>, <expr><lit:literal type="number" pos:line="1594" pos:column="41">0</lit:literal></expr> }</block></expr>,
              <expr><block pos:line="1595" pos:column="15">{ <expr><name pos:line="1595" pos:column="17">NULL</name></expr>, <expr><name pos:line="1595" pos:column="23">kHILayoutBindLeft</name></expr>, <expr><lit:literal type="number" pos:line="1595" pos:column="42">0</lit:literal></expr> }</block></expr>,
              <expr><block pos:line="1596" pos:column="15">{ <expr><name pos:line="1596" pos:column="17">NULL</name></expr>, <expr><name pos:line="1596" pos:column="23">kHILayoutBindBottom</name></expr>, <expr><lit:literal type="number" pos:line="1596" pos:column="44">0</lit:literal></expr> }</block></expr>,
              <expr><block pos:line="1597" pos:column="15">{ <expr><name pos:line="1597" pos:column="17">NULL</name></expr>, <expr><name pos:line="1597" pos:column="23">kHILayoutBindRight</name></expr>, <expr><lit:literal type="number" pos:line="1597" pos:column="43">0</lit:literal></expr> }</block></expr>
            }</block></expr>,
            <expr><block pos:line="1599" pos:column="13">{
                <expr><block pos:line="1600" pos:column="17">{ <expr><name pos:line="1600" pos:column="19">NULL</name></expr>, <expr><name pos:line="1600" pos:column="25">kHILayoutScaleAbsolute</name></expr>, <expr><lit:literal type="number" pos:line="1600" pos:column="49">0</lit:literal></expr> }</block></expr>,
                <expr><block pos:line="1601" pos:column="17">{ <expr><name pos:line="1601" pos:column="19">NULL</name></expr>, <expr><name pos:line="1601" pos:column="25">kHILayoutScaleAbsolute</name></expr>, <expr><lit:literal type="number" pos:line="1601" pos:column="49">0</lit:literal></expr> }</block></expr>

            }</block></expr>,
            <expr><block pos:line="1604" pos:column="13">{
                <expr><block pos:line="1605" pos:column="17">{ <expr><name pos:line="1605" pos:column="19">NULL</name></expr>, <expr><name pos:line="1605" pos:column="25">kHILayoutPositionTop</name></expr>, <expr><lit:literal type="number" pos:line="1605" pos:column="47">0</lit:literal></expr> }</block></expr>,
                <expr><block pos:line="1606" pos:column="17">{ <expr><name pos:line="1606" pos:column="19">NULL</name></expr>, <expr><name pos:line="1606" pos:column="25">kHILayoutPositionLeft</name></expr>, <expr><lit:literal type="number" pos:line="1606" pos:column="48">0</lit:literal></expr> }</block></expr>
            }</block></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="1609" pos:column="9">HIViewSetLayoutInfo</name><argument_list pos:line="1609" pos:column="28">(<argument><expr><name pos:line="1609" pos:column="29">ctw</name></expr></argument>, <argument><expr><op:operator pos:line="1609" pos:column="34">&amp;</op:operator><name pos:line="1609" pos:column="35">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name pos:line="1611" pos:column="9">ct</name><op:operator pos:line="1611" pos:column="11">.</op:operator><name pos:line="1611" pos:column="12">wCallTip</name></name> <op:operator pos:line="1611" pos:column="21">=</op:operator> <name pos:line="1611" pos:column="23">root</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1612" pos:column="9">ct</name><op:operator pos:line="1612" pos:column="11">.</op:operator><name pos:line="1612" pos:column="12">wDraw</name></name> <op:operator pos:line="1612" pos:column="18">=</op:operator> <name pos:line="1612" pos:column="20">ctw</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="1613" pos:column="9">ct</name><op:operator pos:line="1613" pos:column="11">.</op:operator><name pos:line="1613" pos:column="12">wCallTip</name><op:operator pos:line="1613" pos:column="20">.</op:operator><name pos:line="1613" pos:column="21">SetWindow</name></name><argument_list pos:line="1613" pos:column="30">(<argument><expr><name pos:line="1613" pos:column="31">outWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1614" pos:column="9">HIViewSetVisible</name><argument_list pos:line="1614" pos:column="25">(<argument><expr><name pos:line="1614" pos:column="26">ctw</name></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="1614" pos:column="30">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></then></if>
}</block></function>

<function><type><name pos:line="1619" pos:column="1">void</name></type> <name><name pos:line="1619" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1619" pos:column="21">::</op:operator><name pos:line="1619" pos:column="23">CallTipClick</name></name><parameter_list pos:line="1619" pos:column="35">()</parameter_list>
<block pos:line="1620" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="1621" pos:column="5">ScintillaBase</name><op:operator pos:line="1621" pos:column="18">::</op:operator><name pos:line="1621" pos:column="20">CallTipClick</name></name><argument_list pos:line="1621" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1624" pos:column="1">void</name></type> <name><name pos:line="1624" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1624" pos:column="21">::</op:operator><name pos:line="1624" pos:column="23">AddToPopUp</name></name><parameter_list pos:line="1624" pos:column="33">( <param><decl><type><specifier pos:line="1624" pos:column="35">const</specifier> <name pos:line="1624" pos:column="41">char</name> <type:modifier pos:line="1624" pos:column="46">*</type:modifier></type><name pos:line="1624" pos:column="47">label</name></decl></param>, <param><decl><type><name pos:line="1624" pos:column="54">int</name></type> <name pos:line="1624" pos:column="58">cmd</name></decl></param>, <param><decl><type><name pos:line="1624" pos:column="63">bool</name></type> <name pos:line="1624" pos:column="68">enabled</name></decl></param> )</parameter_list>
<block pos:line="1625" pos:column="1">{
    <comment type="line" pos:line="1626" pos:column="5">// Translate stuff into menu item attributes</comment>
    <decl_stmt><decl><type><name pos:line="1627" pos:column="5">MenuItemAttributes</name></type> <name pos:line="1627" pos:column="24">attributes</name> <init pos:line="1627" pos:column="35">= <expr><lit:literal type="number" pos:line="1627" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="1628" pos:column="5">if <condition pos:line="1628" pos:column="8">( <expr><name><name pos:line="1628" pos:column="10">label</name><index pos:line="1628" pos:column="15">[<expr><lit:literal type="number" pos:line="1628" pos:column="16">0</lit:literal></expr>]</index></name> <op:operator pos:line="1628" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="1628" pos:column="22">'\0'</lit:literal></expr> )</condition><then pos:line="1628" pos:column="28"> <expr_stmt><expr><name pos:line="1628" pos:column="29">attributes</name> <op:operator pos:line="1628" pos:column="40">|=</op:operator> <name pos:line="1628" pos:column="43">kMenuItemAttrSeparator</name></expr>;</expr_stmt></then></if>
    <if pos:line="1629" pos:column="5">if <condition pos:line="1629" pos:column="8">( <expr><op:operator pos:line="1629" pos:column="10">!</op:operator> <name pos:line="1629" pos:column="12">enabled</name></expr> )</condition><then pos:line="1629" pos:column="21"> <expr_stmt><expr><name pos:line="1629" pos:column="22">attributes</name> <op:operator pos:line="1629" pos:column="33">|=</op:operator> <name pos:line="1629" pos:column="36">kMenuItemAttrDisabled</name></expr>;</expr_stmt></then></if>

    <comment type="line" pos:line="1631" pos:column="5">// Translate Scintilla commands into Mac OS commands</comment>
    <comment type="line" pos:line="1632" pos:column="5">// TODO: If I create an AEDesc, OS X may insert these standard</comment>
    <comment type="line" pos:line="1633" pos:column="5">// text editing commands into the menu for me</comment>
    <decl_stmt><decl><type><name pos:line="1634" pos:column="5">MenuCommand</name></type> <name pos:line="1634" pos:column="17">macCommand</name></decl>;</decl_stmt>
    <switch pos:line="1635" pos:column="5">switch<condition pos:line="1635" pos:column="11">( <expr><name pos:line="1635" pos:column="13">cmd</name></expr> )</condition>
    <block pos:line="1636" pos:column="5">{
    <case pos:line="1637" pos:column="5">case <expr><name pos:line="1637" pos:column="10">idcmdUndo</name></expr>:
        <expr_stmt><expr><name pos:line="1638" pos:column="9">macCommand</name> <op:operator pos:line="1638" pos:column="20">=</op:operator> <name pos:line="1638" pos:column="22">kHICommandUndo</name></expr>;</expr_stmt>
        <break pos:line="1639" pos:column="9">break;</break>
    </case><case pos:line="1640" pos:column="5">case <expr><name pos:line="1640" pos:column="10">idcmdRedo</name></expr>:
        <expr_stmt><expr><name pos:line="1641" pos:column="9">macCommand</name> <op:operator pos:line="1641" pos:column="20">=</op:operator> <name pos:line="1641" pos:column="22">kHICommandRedo</name></expr>;</expr_stmt>
        <break pos:line="1642" pos:column="9">break;</break>
    </case><case pos:line="1643" pos:column="5">case <expr><name pos:line="1643" pos:column="10">idcmdCut</name></expr>:
        <expr_stmt><expr><name pos:line="1644" pos:column="9">macCommand</name> <op:operator pos:line="1644" pos:column="20">=</op:operator> <name pos:line="1644" pos:column="22">kHICommandCut</name></expr>;</expr_stmt>
        <break pos:line="1645" pos:column="9">break;</break>
    </case><case pos:line="1646" pos:column="5">case <expr><name pos:line="1646" pos:column="10">idcmdCopy</name></expr>:
        <expr_stmt><expr><name pos:line="1647" pos:column="9">macCommand</name> <op:operator pos:line="1647" pos:column="20">=</op:operator> <name pos:line="1647" pos:column="22">kHICommandCopy</name></expr>;</expr_stmt>
        <break pos:line="1648" pos:column="9">break;</break>
    </case><case pos:line="1649" pos:column="5">case <expr><name pos:line="1649" pos:column="10">idcmdPaste</name></expr>:
        <expr_stmt><expr><name pos:line="1650" pos:column="9">macCommand</name> <op:operator pos:line="1650" pos:column="20">=</op:operator> <name pos:line="1650" pos:column="22">kHICommandPaste</name></expr>;</expr_stmt>
        <break pos:line="1651" pos:column="9">break;</break>
    </case><case pos:line="1652" pos:column="5">case <expr><name pos:line="1652" pos:column="10">idcmdDelete</name></expr>:
        <expr_stmt><expr><name pos:line="1653" pos:column="9">macCommand</name> <op:operator pos:line="1653" pos:column="20">=</op:operator> <name pos:line="1653" pos:column="22">kHICommandClear</name></expr>;</expr_stmt>
        <break pos:line="1654" pos:column="9">break;</break>
    </case><case pos:line="1655" pos:column="5">case <expr><name pos:line="1655" pos:column="10">idcmdSelectAll</name></expr>:
        <expr_stmt><expr><name pos:line="1656" pos:column="9">macCommand</name> <op:operator pos:line="1656" pos:column="20">=</op:operator> <name pos:line="1656" pos:column="22">kHICommandSelectAll</name></expr>;</expr_stmt>
        <break pos:line="1657" pos:column="9">break;</break>
    </case><case pos:line="1658" pos:column="5">case <expr><lit:literal type="number" pos:line="1658" pos:column="10">0</lit:literal></expr>:
        <expr_stmt><expr><name pos:line="1659" pos:column="9">macCommand</name> <op:operator pos:line="1659" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="1659" pos:column="22">0</lit:literal></expr>;</expr_stmt>
        <break pos:line="1660" pos:column="9">break;</break>
    </case><default pos:line="1661" pos:column="5">default:
        <expr_stmt><expr><call><name pos:line="1662" pos:column="9">assert</name><argument_list pos:line="1662" pos:column="15">( <argument><expr><lit:literal type="boolean" pos:line="1662" pos:column="17">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return pos:line="1663" pos:column="9">return;</return>
    </default>}</block></switch>

    <decl_stmt><decl><type><name pos:line="1666" pos:column="5">CFStringRef</name></type> <name pos:line="1666" pos:column="17">string</name> <init pos:line="1666" pos:column="24">= <expr><call><name pos:line="1666" pos:column="26">CFStringCreateWithCString</name><argument_list pos:line="1666" pos:column="51">( <argument><expr><name pos:line="1666" pos:column="53">NULL</name></expr></argument>, <argument><expr><name pos:line="1666" pos:column="59">label</name></expr></argument>,  <argument><expr><name pos:line="1666" pos:column="67">kCFStringEncodingUTF8</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1667" pos:column="5">OSStatus</name></type> <name pos:line="1667" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1668" pos:column="5">err</name> <op:operator pos:line="1668" pos:column="9">=</op:operator> <call><name pos:line="1668" pos:column="11">AppendMenuItemTextWithCFString</name><argument_list pos:line="1668" pos:column="41">( <argument><expr><call><name><name pos:line="1668" pos:column="43">reinterpret_cast</name><argument_list pos:line="1668" pos:column="59">&lt;<argument><expr><name pos:line="1668" pos:column="60">MenuRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1668" pos:column="68">( <argument><expr><call><name><name pos:line="1668" pos:column="70">popup</name><op:operator pos:line="1668" pos:column="75">.</op:operator><name pos:line="1668" pos:column="76">GetID</name></name><argument_list pos:line="1668" pos:column="81">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
                               <argument><expr><name pos:line="1669" pos:column="32">string</name></expr></argument>, <argument><expr><name pos:line="1669" pos:column="40">attributes</name></expr></argument>, <argument><expr><name pos:line="1669" pos:column="52">macCommand</name></expr></argument>, <argument><expr><name pos:line="1669" pos:column="64">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1670" pos:column="5">assert</name><argument_list pos:line="1670" pos:column="11">( <argument><expr><name pos:line="1670" pos:column="13">err</name> <op:operator pos:line="1670" pos:column="17">==</op:operator> <name pos:line="1670" pos:column="20">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="1672" pos:column="5">CFRelease</name><argument_list pos:line="1672" pos:column="14">( <argument><expr><name pos:line="1672" pos:column="16">string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1673" pos:column="5">string</name> <op:operator pos:line="1673" pos:column="12">=</op:operator> <name pos:line="1673" pos:column="14">NULL</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1676" pos:column="1">void</name></type> <name><name pos:line="1676" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1676" pos:column="21">::</op:operator><name pos:line="1676" pos:column="23">ClaimSelection</name></name><parameter_list pos:line="1676" pos:column="37">()</parameter_list> <block pos:line="1676" pos:column="40">{
    <comment type="line" pos:line="1677" pos:column="5">// Mac OS X does not have a primary selection</comment>
}</block></function>

<comment type="block" format="doxygen" pos:line="1680" pos:column="1">/** A wrapper function to permit external processes to directly deliver messages to our "message loop". */</comment>
<function><type><name pos:line="1681" pos:column="1">sptr_t</name></type> <name><name pos:line="1681" pos:column="8">ScintillaMacOSX</name><op:operator pos:line="1681" pos:column="23">::</op:operator><name pos:line="1681" pos:column="25">DirectFunction</name></name><parameter_list pos:line="1681" pos:column="39">(
    <param><decl><type><name pos:line="1682" pos:column="5">ScintillaMacOSX</name> <type:modifier pos:line="1682" pos:column="21">*</type:modifier></type><name pos:line="1682" pos:column="22">sciThis</name></decl></param>, <param><decl><type><name pos:line="1682" pos:column="31">unsigned</name> <name pos:line="1682" pos:column="40">int</name></type> <name pos:line="1682" pos:column="44">iMessage</name></decl></param>, <param><decl><type><name pos:line="1682" pos:column="54">uptr_t</name></type> <name pos:line="1682" pos:column="61">wParam</name></decl></param>, <param><decl><type><name pos:line="1682" pos:column="69">sptr_t</name></type> <name pos:line="1682" pos:column="76">lParam</name></decl></param>)</parameter_list> <block pos:line="1682" pos:column="84">{
    <return pos:line="1683" pos:column="5">return <expr><call><name><name pos:line="1683" pos:column="12">sciThis</name><op:operator pos:line="1683" pos:column="19">-&gt;</op:operator><name pos:line="1683" pos:column="21">WndProc</name></name><argument_list pos:line="1683" pos:column="28">(<argument><expr><name pos:line="1683" pos:column="29">iMessage</name></expr></argument>, <argument><expr><name pos:line="1683" pos:column="39">wParam</name></expr></argument>, <argument><expr><name pos:line="1683" pos:column="47">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1686" pos:column="1">sptr_t</name></type> <name pos:line="1686" pos:column="8">scintilla_send_message</name><parameter_list pos:line="1686" pos:column="30">(<param><decl><type><name pos:line="1686" pos:column="31">void</name><type:modifier pos:line="1686" pos:column="35">*</type:modifier></type> <name pos:line="1686" pos:column="37">sci</name></decl></param>, <param><decl><type><name pos:line="1686" pos:column="42">unsigned</name> <name pos:line="1686" pos:column="51">int</name></type> <name pos:line="1686" pos:column="55">iMessage</name></decl></param>, <param><decl><type><name pos:line="1686" pos:column="65">uptr_t</name></type> <name pos:line="1686" pos:column="72">wParam</name></decl></param>, <param><decl><type><name pos:line="1686" pos:column="80">sptr_t</name></type> <name pos:line="1686" pos:column="87">lParam</name></decl></param>)</parameter_list> <block pos:line="1686" pos:column="95">{
        <decl_stmt><decl><type><name pos:line="1687" pos:column="9">HIViewRef</name></type> <name pos:line="1687" pos:column="19">control</name> <init pos:line="1687" pos:column="27">= <expr><call><name><name pos:line="1687" pos:column="29">reinterpret_cast</name><argument_list pos:line="1687" pos:column="45">&lt;<argument><expr><name pos:line="1687" pos:column="46">HIViewRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1687" pos:column="56">(<argument><expr><name pos:line="1687" pos:column="57">sci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="1688" pos:column="5">// Platform::DebugPrintf("scintilla_send_message %08X control %08X\n",sci,control);</comment>
    <comment type="line" pos:line="1689" pos:column="5">// Get a reference to the Scintilla C++ object</comment>
    <decl_stmt><decl><type><name pos:line="1690" pos:column="5">ScintillaMacOSX</name><type:modifier pos:line="1690" pos:column="20">*</type:modifier></type> <name pos:line="1690" pos:column="22">scintilla</name> <init pos:line="1690" pos:column="32">= <expr><name pos:line="1690" pos:column="34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1691" pos:column="5">OSStatus</name></type> <name pos:line="1691" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1692" pos:column="5">err</name> <op:operator pos:line="1692" pos:column="9">=</op:operator> <call><name pos:line="1692" pos:column="11">GetControlProperty</name><argument_list pos:line="1692" pos:column="29">( <argument><expr><name pos:line="1692" pos:column="31">control</name></expr></argument>, <argument><expr><name pos:line="1692" pos:column="40">scintillaMacOSType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1692" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="1692" pos:column="63">sizeof<argument_list pos:line="1692" pos:column="69">( <argument><expr><name pos:line="1692" pos:column="71">scintilla</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1692" pos:column="84">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1692" pos:column="90">&amp;</op:operator><name pos:line="1692" pos:column="91">scintilla</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1693" pos:column="5">assert</name><argument_list pos:line="1693" pos:column="11">( <argument><expr><name pos:line="1693" pos:column="13">err</name> <op:operator pos:line="1693" pos:column="17">==</op:operator> <name pos:line="1693" pos:column="20">noErr</name> <op:operator pos:line="1693" pos:column="26">&amp;&amp;</op:operator> <name pos:line="1693" pos:column="29">scintilla</name> <op:operator pos:line="1693" pos:column="39">!=</op:operator> <name pos:line="1693" pos:column="42">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1694" pos:column="5">//Platform::DebugPrintf("scintilla_send_message scintilla %08X\n",scintilla);</comment>

    <return pos:line="1696" pos:column="5">return <expr><call><name><name pos:line="1696" pos:column="12">scintilla</name><op:operator pos:line="1696" pos:column="21">-&gt;</op:operator><name pos:line="1696" pos:column="23">WndProc</name></name><argument_list pos:line="1696" pos:column="30">(<argument><expr><name pos:line="1696" pos:column="31">iMessage</name></expr></argument>, <argument><expr><name pos:line="1696" pos:column="41">wParam</name></expr></argument>, <argument><expr><name pos:line="1696" pos:column="49">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1699" pos:column="1">void</name></type> <name><name pos:line="1699" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1699" pos:column="21">::</op:operator><name pos:line="1699" pos:column="23">TimerFired</name></name><parameter_list pos:line="1699" pos:column="33">( <param><decl><type><name pos:line="1699" pos:column="35">EventLoopTimerRef</name></type></decl></param> )</parameter_list>
<block pos:line="1700" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="1701" pos:column="5">Tick</name><argument_list pos:line="1701" pos:column="9">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1702" pos:column="5">DragScroll</name><argument_list pos:line="1702" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1705" pos:column="1">OSStatus</name></type> <name><name pos:line="1705" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="1705" pos:column="25">::</op:operator><name pos:line="1705" pos:column="27">BoundsChanged</name></name><parameter_list pos:line="1705" pos:column="40">( <param><decl><type><name pos:line="1705" pos:column="42">UInt32</name></type></decl></param> <comment type="block" pos:line="1705" pos:column="49">/*inOptions*/</comment>, <param><decl><type><specifier pos:line="1705" pos:column="64">const</specifier> <name pos:line="1705" pos:column="70">HIRect</name><type:modifier pos:line="1705" pos:column="76">&amp;</type:modifier></type> <name pos:line="1705" pos:column="78">inOriginalBounds</name></decl></param>, <param><decl><type><specifier pos:line="1705" pos:column="96">const</specifier> <name pos:line="1705" pos:column="102">HIRect</name><type:modifier pos:line="1705" pos:column="108">&amp;</type:modifier></type> <name pos:line="1705" pos:column="110">inCurrentBounds</name></decl></param>, <param><decl><type><name pos:line="1705" pos:column="127">RgnHandle</name></type></decl></param> <comment type="block" pos:line="1705" pos:column="137">/*inInvalRgn*/</comment> )</parameter_list>
<block pos:line="1706" pos:column="1">{
    <comment type="line" pos:line="1707" pos:column="5">// If the width or height changed, modify the scroll bars and notify Scintilla</comment>
    <comment type="line" pos:line="1708" pos:column="5">// This event is also delivered when the window moves, and we don't care about that</comment>
    <if pos:line="1709" pos:column="5">if <condition pos:line="1709" pos:column="8">( <expr><name><name pos:line="1709" pos:column="10">inOriginalBounds</name><op:operator pos:line="1709" pos:column="26">.</op:operator><name pos:line="1709" pos:column="27">size</name><op:operator pos:line="1709" pos:column="31">.</op:operator><name pos:line="1709" pos:column="32">width</name></name> <op:operator pos:line="1709" pos:column="38">!=</op:operator> <name><name pos:line="1709" pos:column="41">inCurrentBounds</name><op:operator pos:line="1709" pos:column="56">.</op:operator><name pos:line="1709" pos:column="57">size</name><op:operator pos:line="1709" pos:column="61">.</op:operator><name pos:line="1709" pos:column="62">width</name></name> <op:operator pos:line="1709" pos:column="68">||</op:operator> <name><name pos:line="1709" pos:column="71">inOriginalBounds</name><op:operator pos:line="1709" pos:column="87">.</op:operator><name pos:line="1709" pos:column="88">size</name><op:operator pos:line="1709" pos:column="92">.</op:operator><name pos:line="1709" pos:column="93">height</name></name> <op:operator pos:line="1709" pos:column="100">!=</op:operator> <name><name pos:line="1709" pos:column="103">inCurrentBounds</name><op:operator pos:line="1709" pos:column="118">.</op:operator><name pos:line="1709" pos:column="119">size</name><op:operator pos:line="1709" pos:column="123">.</op:operator><name pos:line="1709" pos:column="124">height</name></name></expr> )</condition><then pos:line="1709" pos:column="132">
    <block pos:line="1710" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="1711" pos:column="9">Resize</name><argument_list pos:line="1711" pos:column="15">( <argument><expr><call><name><name pos:line="1711" pos:column="17">static_cast</name><argument_list pos:line="1711" pos:column="28">&lt;<argument><expr><name pos:line="1711" pos:column="29">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1711" pos:column="33">( <argument><expr><name><name pos:line="1711" pos:column="35">inCurrentBounds</name><op:operator pos:line="1711" pos:column="50">.</op:operator><name pos:line="1711" pos:column="51">size</name><op:operator pos:line="1711" pos:column="55">.</op:operator><name pos:line="1711" pos:column="56">width</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1711" pos:column="65">static_cast</name><argument_list pos:line="1711" pos:column="76">&lt;<argument><expr><name pos:line="1711" pos:column="77">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1711" pos:column="81">( <argument><expr><name><name pos:line="1711" pos:column="83">inCurrentBounds</name><op:operator pos:line="1711" pos:column="98">.</op:operator><name pos:line="1711" pos:column="99">size</name><op:operator pos:line="1711" pos:column="103">.</op:operator><name pos:line="1711" pos:column="104">height</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return pos:line="1713" pos:column="5">return <expr><name pos:line="1713" pos:column="12">noErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1716" pos:column="1">void</name></type> <name><name pos:line="1716" pos:column="6">ScintillaMacOSX</name><op:operator pos:line="1716" pos:column="21">::</op:operator><name pos:line="1716" pos:column="23">Draw</name></name><parameter_list pos:line="1716" pos:column="27">( <param><decl><type><name pos:line="1716" pos:column="29">RgnHandle</name></type> <name pos:line="1716" pos:column="39">rgn</name></decl></param>, <param><decl><type><name pos:line="1716" pos:column="44">CGContextRef</name></type> <name pos:line="1716" pos:column="57">gc</name></decl></param> )</parameter_list>
<block pos:line="1717" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1718" pos:column="5">Rect</name></type> <name pos:line="1718" pos:column="10">invalidRect</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1719" pos:column="5">GetRegionBounds</name><argument_list pos:line="1719" pos:column="20">( <argument><expr><name pos:line="1719" pos:column="22">rgn</name></expr></argument>, <argument><expr><op:operator pos:line="1719" pos:column="27">&amp;</op:operator><name pos:line="1719" pos:column="28">invalidRect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1721" pos:column="5">// NOTE: We get draw events that include the area covered by the scroll bar. No fear: Scintilla correctly ignores them</comment>
    <expr_stmt><expr><call><name pos:line="1722" pos:column="5">SyncPaint</name><argument_list pos:line="1722" pos:column="14">( <argument><expr><name pos:line="1722" pos:column="16">gc</name></expr></argument>, <argument><expr><call><name pos:line="1722" pos:column="20">PRectangle</name><argument_list pos:line="1722" pos:column="30">( <argument><expr><name><name pos:line="1722" pos:column="32">invalidRect</name><op:operator pos:line="1722" pos:column="43">.</op:operator><name pos:line="1722" pos:column="44">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1722" pos:column="50">invalidRect</name><op:operator pos:line="1722" pos:column="61">.</op:operator><name pos:line="1722" pos:column="62">top</name></name></expr></argument>, <argument><expr><name><name pos:line="1722" pos:column="67">invalidRect</name><op:operator pos:line="1722" pos:column="78">.</op:operator><name pos:line="1722" pos:column="79">right</name></name></expr></argument>, <argument><expr><name><name pos:line="1722" pos:column="86">invalidRect</name><op:operator pos:line="1722" pos:column="97">.</op:operator><name pos:line="1722" pos:column="98">bottom</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1725" pos:column="1">ControlPartCode</name></type> <name><name pos:line="1725" pos:column="17">ScintillaMacOSX</name><op:operator pos:line="1725" pos:column="32">::</op:operator><name pos:line="1725" pos:column="34">HitTest</name></name><parameter_list pos:line="1725" pos:column="41">( <param><decl><type><specifier pos:line="1725" pos:column="43">const</specifier> <name pos:line="1725" pos:column="49">HIPoint</name><type:modifier pos:line="1725" pos:column="56">&amp;</type:modifier></type> <name pos:line="1725" pos:column="58">where</name></decl></param> )</parameter_list>
<block pos:line="1726" pos:column="1">{
    <if pos:line="1727" pos:column="5">if <condition pos:line="1727" pos:column="8">( <expr><call><name pos:line="1727" pos:column="10">CGRectContainsPoint</name><argument_list pos:line="1727" pos:column="29">( <argument><expr><call><name pos:line="1727" pos:column="31">Bounds</name><argument_list pos:line="1727" pos:column="37">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1727" pos:column="41">where</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="1727" pos:column="50">
        <return pos:line="1728" pos:column="9">return <expr><lit:literal type="number" pos:line="1728" pos:column="16">1</lit:literal></expr>;</return></then>
    <else pos:line="1729" pos:column="5">else
        <return pos:line="1730" pos:column="9">return <expr><name pos:line="1730" pos:column="16">kControlNoPart</name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="1733" pos:column="1">OSStatus</name></type> <name><name pos:line="1733" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="1733" pos:column="25">::</op:operator><name pos:line="1733" pos:column="27">SetFocusPart</name></name><parameter_list pos:line="1733" pos:column="39">( <param><decl><type><name pos:line="1733" pos:column="41">ControlPartCode</name></type> <name pos:line="1733" pos:column="57">desiredFocus</name></decl></param>, <param><decl><type><name pos:line="1733" pos:column="71">RgnHandle</name></type></decl></param> <comment type="block" pos:line="1733" pos:column="81">/*invalidRgn*/</comment>, <param><decl><type><name pos:line="1733" pos:column="97">Boolean</name></type></decl></param> <comment type="block" pos:line="1733" pos:column="105">/*inFocusEverything*/</comment>, <param><decl><type><name pos:line="1733" pos:column="128">ControlPartCode</name><type:modifier pos:line="1733" pos:column="143">*</type:modifier></type> <name pos:line="1733" pos:column="145">outActualFocus</name></decl></param> )</parameter_list>
<block pos:line="1734" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="1735" pos:column="5">assert</name><argument_list pos:line="1735" pos:column="11">( <argument><expr><name pos:line="1735" pos:column="13">outActualFocus</name> <op:operator pos:line="1735" pos:column="28">!=</op:operator> <name pos:line="1735" pos:column="31">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if pos:line="1737" pos:column="5">if <condition pos:line="1737" pos:column="8">( <expr><name pos:line="1737" pos:column="10">desiredFocus</name> <op:operator pos:line="1737" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="1737" pos:column="26">0</lit:literal></expr> )</condition><then pos:line="1737" pos:column="29"> <block pos:line="1737" pos:column="30">{
        <comment type="line" pos:line="1738" pos:column="9">// We are losing the focus</comment>
        <expr_stmt><expr><call><name pos:line="1739" pos:column="9">SetFocusState</name><argument_list pos:line="1739" pos:column="22">(<argument><expr><lit:literal type="boolean" pos:line="1739" pos:column="23">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="1740" pos:column="7">else <block pos:line="1740" pos:column="12">{
        <comment type="line" pos:line="1741" pos:column="9">// We are getting the focus</comment>
        <expr_stmt><expr><call><name pos:line="1742" pos:column="9">SetFocusState</name><argument_list pos:line="1742" pos:column="22">(<argument><expr><lit:literal type="boolean" pos:line="1742" pos:column="23">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><op:operator pos:line="1745" pos:column="5">*</op:operator><name pos:line="1745" pos:column="6">outActualFocus</name> <op:operator pos:line="1745" pos:column="21">=</op:operator> <name pos:line="1745" pos:column="23">desiredFocus</name></expr>;</expr_stmt>
    <return pos:line="1746" pos:column="5">return <expr><name pos:line="1746" pos:column="12">noErr</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="1749" pos:column="1">// Map Mac Roman character codes to their equivalent Scintilla codes</comment>
<function><type><specifier pos:line="1750" pos:column="1">static</specifier> <specifier pos:line="1750" pos:column="8">inline</specifier> <name pos:line="1750" pos:column="15">int</name></type> <name pos:line="1750" pos:column="19">KeyTranslate</name><parameter_list pos:line="1750" pos:column="31">( <param><decl><type><name pos:line="1750" pos:column="33">UniChar</name></type> <name pos:line="1750" pos:column="41">unicodeChar</name></decl></param> )</parameter_list>
<block pos:line="1751" pos:column="1">{
    <switch pos:line="1752" pos:column="5">switch <condition pos:line="1752" pos:column="12">( <expr><name pos:line="1752" pos:column="14">unicodeChar</name></expr> )</condition>
    <block pos:line="1753" pos:column="5">{
    <case pos:line="1754" pos:column="5">case <expr><name pos:line="1754" pos:column="10">kDownArrowCharCode</name></expr>:
        <return pos:line="1755" pos:column="9">return <expr><name pos:line="1755" pos:column="16">SCK_DOWN</name></expr>;</return>
    </case><case pos:line="1756" pos:column="5">case <expr><name pos:line="1756" pos:column="10">kUpArrowCharCode</name></expr>:
        <return pos:line="1757" pos:column="9">return <expr><name pos:line="1757" pos:column="16">SCK_UP</name></expr>;</return>
    </case><case pos:line="1758" pos:column="5">case <expr><name pos:line="1758" pos:column="10">kLeftArrowCharCode</name></expr>:
        <return pos:line="1759" pos:column="9">return <expr><name pos:line="1759" pos:column="16">SCK_LEFT</name></expr>;</return>
    </case><case pos:line="1760" pos:column="5">case <expr><name pos:line="1760" pos:column="10">kRightArrowCharCode</name></expr>:
        <return pos:line="1761" pos:column="9">return <expr><name pos:line="1761" pos:column="16">SCK_RIGHT</name></expr>;</return>
    </case><case pos:line="1762" pos:column="5">case <expr><name pos:line="1762" pos:column="10">kHomeCharCode</name></expr>:
        <return pos:line="1763" pos:column="9">return <expr><name pos:line="1763" pos:column="16">SCK_HOME</name></expr>;</return>
    </case><case pos:line="1764" pos:column="5">case <expr><name pos:line="1764" pos:column="10">kEndCharCode</name></expr>:
        <return pos:line="1765" pos:column="9">return <expr><name pos:line="1765" pos:column="16">SCK_END</name></expr>;</return>
<cpp:ifndef pos:line="1766" pos:column="1">#<cpp:directive pos:line="1766" pos:column="2">ifndef</cpp:directive> <name pos:line="1766" pos:column="9">EXT_INPUT</name></cpp:ifndef>
    </case><case pos:line="1767" pos:column="5">case <expr><name pos:line="1767" pos:column="10">kPageUpCharCode</name></expr>:
        <return pos:line="1768" pos:column="9">return <expr><name pos:line="1768" pos:column="16">SCK_PRIOR</name></expr>;</return>
    </case><case pos:line="1769" pos:column="5">case <expr><name pos:line="1769" pos:column="10">kPageDownCharCode</name></expr>:
        <return pos:line="1770" pos:column="9">return <expr><name pos:line="1770" pos:column="16">SCK_NEXT</name></expr>;</return>
<cpp:endif pos:line="1771" pos:column="1">#<cpp:directive pos:line="1771" pos:column="2">endif</cpp:directive></cpp:endif>
    </case><case pos:line="1772" pos:column="5">case <expr><name pos:line="1772" pos:column="10">kDeleteCharCode</name></expr>:
        <return pos:line="1773" pos:column="9">return <expr><name pos:line="1773" pos:column="16">SCK_DELETE</name></expr>;</return>
    <comment type="line" pos:line="1774" pos:column="5">// TODO: Is there an insert key in the mac world? My insert key is the "help" key</comment>
    </case><case pos:line="1775" pos:column="5">case <expr><name pos:line="1775" pos:column="10">kHelpCharCode</name></expr>:
        <return pos:line="1776" pos:column="9">return <expr><name pos:line="1776" pos:column="16">SCK_INSERT</name></expr>;</return>
    </case><case pos:line="1777" pos:column="5">case <expr><name pos:line="1777" pos:column="10">kEnterCharCode</name></expr>:
    </case><case pos:line="1778" pos:column="5">case <expr><name pos:line="1778" pos:column="10">kReturnCharCode</name></expr>:
        <return pos:line="1779" pos:column="9">return <expr><name pos:line="1779" pos:column="16">SCK_RETURN</name></expr>;</return>
<cpp:ifdef pos:line="1780" pos:column="1">#<cpp:directive pos:line="1780" pos:column="2">ifdef</cpp:directive> <name pos:line="1780" pos:column="8">EXT_INPUT</name></cpp:ifdef>
    <comment type="line" pos:line="1781" pos:column="5">// BP 2006-08-22: These codes below should not be translated. Otherwise TextInput() will fail for keys like SCK_ADD, which is '+'.</comment>
    </case><case pos:line="1782" pos:column="5">case <expr><name pos:line="1782" pos:column="10">kBackspaceCharCode</name></expr>:
        <return pos:line="1783" pos:column="9">return <expr><name pos:line="1783" pos:column="16">SCK_BACK</name></expr>;</return>
    </case><case pos:line="1784" pos:column="5">case <expr><name pos:line="1784" pos:column="10">kFunctionKeyCharCode</name></expr>:
    </case><case pos:line="1785" pos:column="5">case <expr><name pos:line="1785" pos:column="10">kBellCharCode</name></expr>:
    </case><case pos:line="1786" pos:column="5">case <expr><name pos:line="1786" pos:column="10">kVerticalTabCharCode</name></expr>:
    </case><case pos:line="1787" pos:column="5">case <expr><name pos:line="1787" pos:column="10">kFormFeedCharCode</name></expr>:
    </case><case pos:line="1788" pos:column="5">case <expr><lit:literal type="number" pos:line="1788" pos:column="10">14</lit:literal></expr>:
    </case><case pos:line="1789" pos:column="5">case <expr><lit:literal type="number" pos:line="1789" pos:column="10">15</lit:literal></expr>:
    </case><case pos:line="1790" pos:column="5">case <expr><name pos:line="1790" pos:column="10">kCommandCharCode</name></expr>:
    </case><case pos:line="1791" pos:column="5">case <expr><name pos:line="1791" pos:column="10">kCheckCharCode</name></expr>:
    </case><case pos:line="1792" pos:column="5">case <expr><name pos:line="1792" pos:column="10">kAppleLogoCharCode</name></expr>:
    </case><case pos:line="1793" pos:column="5">case <expr><lit:literal type="number" pos:line="1793" pos:column="10">21</lit:literal></expr>:
    </case><case pos:line="1794" pos:column="5">case <expr><lit:literal type="number" pos:line="1794" pos:column="10">22</lit:literal></expr>:
    </case><case pos:line="1795" pos:column="5">case <expr><lit:literal type="number" pos:line="1795" pos:column="10">23</lit:literal></expr>:
    </case><case pos:line="1796" pos:column="5">case <expr><lit:literal type="number" pos:line="1796" pos:column="10">24</lit:literal></expr>:
    </case><case pos:line="1797" pos:column="5">case <expr><lit:literal type="number" pos:line="1797" pos:column="10">25</lit:literal></expr>:
    </case><case pos:line="1798" pos:column="5">case <expr><lit:literal type="number" pos:line="1798" pos:column="10">26</lit:literal></expr>:
    </case><case pos:line="1799" pos:column="5">case <expr><name pos:line="1799" pos:column="10">kEscapeCharCode</name></expr>:
        <return pos:line="1800" pos:column="9">return <expr><lit:literal type="number" pos:line="1800" pos:column="16">0</lit:literal></expr>;</return> <comment type="line" pos:line="1800" pos:column="19">// ignore</comment>
    </case><default pos:line="1801" pos:column="5">default:
        <return pos:line="1802" pos:column="9">return <expr><name pos:line="1802" pos:column="16">unicodeChar</name></expr>;</return>
<cpp:else pos:line="1803" pos:column="1">#<cpp:directive pos:line="1803" pos:column="2">else</cpp:directive></cpp:else>
    </default><case pos:line="1804" pos:column="5">case <expr><name pos:line="1804" pos:column="10">kEscapeCharCode</name></expr>:
        <return pos:line="1805" pos:column="9">return <expr><name pos:line="1805" pos:column="16">SCK_ESCAPE</name></expr>;</return>
    </case><case pos:line="1806" pos:column="5">case <expr><name pos:line="1806" pos:column="10">kBackspaceCharCode</name></expr>:
        <return pos:line="1807" pos:column="9">return <expr><name pos:line="1807" pos:column="16">SCK_BACK</name></expr>;</return>
    </case><case pos:line="1808" pos:column="5">case <expr><lit:literal type="char" pos:line="1808" pos:column="10">'\t'</lit:literal></expr>:
         <return pos:line="1809" pos:column="10">return <expr><name pos:line="1809" pos:column="17">SCK_TAB</name></expr>;</return>
    </case><case pos:line="1810" pos:column="5">case <expr><lit:literal type="char" pos:line="1810" pos:column="10">'+'</lit:literal></expr>:
        <return pos:line="1811" pos:column="9">return <expr><name pos:line="1811" pos:column="16">SCK_ADD</name></expr>;</return>
    </case><case pos:line="1812" pos:column="5">case <expr><lit:literal type="char" pos:line="1812" pos:column="10">'-'</lit:literal></expr>:
        <return pos:line="1813" pos:column="9">return <expr><name pos:line="1813" pos:column="16">SCK_SUBTRACT</name></expr>;</return>
    </case><case pos:line="1814" pos:column="5">case <expr><lit:literal type="char" pos:line="1814" pos:column="10">'/'</lit:literal></expr>:
        <return pos:line="1815" pos:column="9">return <expr><name pos:line="1815" pos:column="16">SCK_DIVIDE</name></expr>;</return>
    </case><case pos:line="1816" pos:column="5">case <expr><name pos:line="1816" pos:column="10">kFunctionKeyCharCode</name></expr>:
        <return pos:line="1817" pos:column="9">return <expr><name pos:line="1817" pos:column="16">kFunctionKeyCharCode</name></expr>;</return>
    </case><default pos:line="1818" pos:column="5">default:
        <return pos:line="1819" pos:column="9">return <expr><lit:literal type="number" pos:line="1819" pos:column="16">0</lit:literal></expr>;</return>
<cpp:endif pos:line="1820" pos:column="1">#<cpp:directive pos:line="1820" pos:column="2">endif</cpp:directive></cpp:endif>
    </default>}</block></switch>
}</block></function>

<function><type><specifier pos:line="1824" pos:column="1">static</specifier> <specifier pos:line="1824" pos:column="8">inline</specifier> <name pos:line="1824" pos:column="15">UniChar</name></type> <name pos:line="1824" pos:column="23">GetCharacterWithoutModifiers</name><parameter_list pos:line="1824" pos:column="51">( <param><decl><type><name pos:line="1824" pos:column="53">EventRef</name></type> <name pos:line="1824" pos:column="62">rawKeyboardEvent</name></decl></param> )</parameter_list>
<block pos:line="1825" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1826" pos:column="5">UInt32</name></type> <name pos:line="1826" pos:column="12">keyCode</name></decl>;</decl_stmt>
    <comment type="line" pos:line="1827" pos:column="5">// Get the key code from the raw key event</comment>
    <expr_stmt><expr><call><name pos:line="1828" pos:column="5">GetEventParameter</name><argument_list pos:line="1828" pos:column="22">( <argument><expr><name pos:line="1828" pos:column="24">rawKeyboardEvent</name></expr></argument>, <argument><expr><name pos:line="1828" pos:column="42">kEventParamKeyCode</name></expr></argument>, <argument><expr><name pos:line="1828" pos:column="62">typeUInt32</name></expr></argument>, <argument><expr><name pos:line="1828" pos:column="74">NULL</name></expr></argument>, <argument><expr><sizeof pos:line="1828" pos:column="80">sizeof<argument_list pos:line="1828" pos:column="86">( <argument><expr><name pos:line="1828" pos:column="88">keyCode</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1828" pos:column="99">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1828" pos:column="105">&amp;</op:operator><name pos:line="1828" pos:column="106">keyCode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1830" pos:column="5">// Get the current keyboard layout</comment>
 <comment type="line" pos:line="1831" pos:column="2">// TODO: If this is a performance sink, we need to cache these values</comment>
    <decl_stmt><decl><type><name pos:line="1832" pos:column="5">SInt16</name></type> <name pos:line="1832" pos:column="12">lastKeyLayoutID</name> <init pos:line="1832" pos:column="28">= <expr><call><name pos:line="1832" pos:column="30">GetScriptVariable</name><argument_list pos:line="1832" pos:column="47">( <comment type="block" pos:line="1832" pos:column="49">/*currentKeyScript*/</comment> <argument><expr><call><name pos:line="1832" pos:column="70">GetScriptManagerVariable</name><argument_list pos:line="1832" pos:column="94">(<argument><expr><name pos:line="1832" pos:column="95">smKeyScript</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1832" pos:column="109">smScriptKeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1833" pos:column="5">Handle</name></type> <name pos:line="1833" pos:column="12">uchrHandle</name> <init pos:line="1833" pos:column="23">= <expr><call><name pos:line="1833" pos:column="25">GetResource</name><argument_list pos:line="1833" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="1833" pos:column="37">'uchr'</lit:literal></expr></argument>, <argument><expr><name pos:line="1833" pos:column="45">lastKeyLayoutID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="1835" pos:column="9">if <condition pos:line="1835" pos:column="12">(<expr><name pos:line="1835" pos:column="13">uchrHandle</name></expr>)</condition><then pos:line="1835" pos:column="24"> <block pos:line="1835" pos:column="25">{
		<comment type="line" pos:line="1836" pos:column="17">// Translate the key press ignoring ctrl and option</comment>
		<decl_stmt><decl><type><name pos:line="1837" pos:column="17">UInt32</name></type> <name pos:line="1837" pos:column="24">ignoredDeadKeys</name> <init pos:line="1837" pos:column="40">= <expr><lit:literal type="number" pos:line="1837" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1838" pos:column="17">UInt32</name></type> <name pos:line="1838" pos:column="24">ignoredActualLength</name> <init pos:line="1838" pos:column="44">= <expr><lit:literal type="number" pos:line="1838" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1839" pos:column="17">UniChar</name></type> <name pos:line="1839" pos:column="25">unicodeKey</name> <init pos:line="1839" pos:column="36">= <expr><lit:literal type="number" pos:line="1839" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="1840" pos:column="17">// (((modifiers &amp; shiftKey) &gt;&gt; 8) &amp; 0xFF)</comment>
		<decl_stmt><decl><type><name pos:line="1841" pos:column="17">OSStatus</name></type> <name pos:line="1841" pos:column="26">err</name></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="1842" pos:column="17">err</name> <op:operator pos:line="1842" pos:column="21">=</op:operator> <call><name pos:line="1842" pos:column="23">UCKeyTranslate</name><argument_list pos:line="1842" pos:column="37">( <argument><expr><call><name><name pos:line="1842" pos:column="39">reinterpret_cast</name><argument_list pos:line="1842" pos:column="55">&lt;<argument><expr><name pos:line="1842" pos:column="56">UCKeyboardLayout</name><op:operator pos:line="1842" pos:column="72">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1842" pos:column="74">( <argument><expr><op:operator pos:line="1842" pos:column="76">*</op:operator><name pos:line="1842" pos:column="77">uchrHandle</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="1842" pos:column="91">keyCode</name></expr></argument>, <argument><expr><name pos:line="1842" pos:column="100">kUCKeyActionDown</name></expr></argument>,
									<comment type="block" pos:line="1843" pos:column="73">/* modifierKeyState */</comment> <argument><expr><lit:literal type="number" pos:line="1843" pos:column="96">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="1843" pos:column="99">LMGetKbdType</name><argument_list pos:line="1843" pos:column="111">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1843" pos:column="115">kUCKeyTranslateNoDeadKeysMask</name></expr></argument>, <argument><expr><op:operator pos:line="1843" pos:column="146">&amp;</op:operator><name pos:line="1843" pos:column="147">ignoredDeadKeys</name></expr></argument>,
									<comment type="block" pos:line="1844" pos:column="73">/* buffer length */</comment> <argument><expr><lit:literal type="number" pos:line="1844" pos:column="93">1</lit:literal></expr></argument>,
									<comment type="block" pos:line="1845" pos:column="73">/* actual length */</comment> <argument><expr><op:operator pos:line="1845" pos:column="93">&amp;</op:operator><name pos:line="1845" pos:column="94">ignoredActualLength</name></expr></argument>,
									<comment type="block" pos:line="1846" pos:column="73">/* string */</comment> <argument><expr><op:operator pos:line="1846" pos:column="86">&amp;</op:operator><name pos:line="1846" pos:column="87">unicodeKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1847" pos:column="17">assert</name><argument_list pos:line="1847" pos:column="23">( <argument><expr><name pos:line="1847" pos:column="25">err</name> <op:operator pos:line="1847" pos:column="29">==</op:operator> <name pos:line="1847" pos:column="32">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<return pos:line="1849" pos:column="17">return <expr><name pos:line="1849" pos:column="24">unicodeKey</name></expr>;</return>
	}</block></then></if>
	<return pos:line="1851" pos:column="9">return <expr><lit:literal type="number" pos:line="1851" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="1854" pos:column="1">// Text input is very annoying:</comment>
<comment type="line" pos:line="1855" pos:column="1">// If the control key is pressed, or if the key is a "special" key (eg. arrow keys, function keys, whatever)</comment>
<comment type="line" pos:line="1856" pos:column="1">//  we let Scintilla handle it. If scintilla does not handle it, we do nothing (eventNotHandledErr).</comment>
<comment type="line" pos:line="1857" pos:column="1">// Otherwise, the event is just some text and we add it to the buffer</comment>
<function><type><name pos:line="1858" pos:column="1">OSStatus</name></type> <name><name pos:line="1858" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="1858" pos:column="25">::</op:operator><name pos:line="1858" pos:column="27">TextInput</name></name><parameter_list pos:line="1858" pos:column="36">( <param><decl><type><name pos:line="1858" pos:column="38">TCarbonEvent</name><type:modifier pos:line="1858" pos:column="50">&amp;</type:modifier></type> <name pos:line="1858" pos:column="52">event</name></decl></param> )</parameter_list>
<block pos:line="1859" pos:column="1">{
    <comment type="line" pos:line="1860" pos:column="5">// Obtain the number of bytes of text</comment>
    <decl_stmt><decl><type><name pos:line="1861" pos:column="5">UInt32</name></type> <name pos:line="1861" pos:column="12">actualSize</name> <init pos:line="1861" pos:column="23">= <expr><lit:literal type="number" pos:line="1861" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1862" pos:column="5">OSStatus</name></type> <name pos:line="1862" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1863" pos:column="5">err</name> <op:operator pos:line="1863" pos:column="9">=</op:operator> <call><name><name pos:line="1863" pos:column="11">event</name><op:operator pos:line="1863" pos:column="16">.</op:operator><name pos:line="1863" pos:column="17">GetParameterSize</name></name><argument_list pos:line="1863" pos:column="33">( <argument><expr><name pos:line="1863" pos:column="35">kEventParamTextInputSendText</name></expr></argument>, <argument><expr><op:operator pos:line="1863" pos:column="65">&amp;</op:operator><name pos:line="1863" pos:column="66">actualSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1864" pos:column="5">assert</name><argument_list pos:line="1864" pos:column="11">( <argument><expr><name pos:line="1864" pos:column="13">err</name> <op:operator pos:line="1864" pos:column="17">==</op:operator> <name pos:line="1864" pos:column="20">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1865" pos:column="5">assert</name><argument_list pos:line="1865" pos:column="11">( <argument><expr><name pos:line="1865" pos:column="13">actualSize</name> <op:operator pos:line="1865" pos:column="24">!=</op:operator> <lit:literal type="number" pos:line="1865" pos:column="27">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="1867" pos:column="5">const</specifier> <name pos:line="1867" pos:column="11">int</name></type> <name pos:line="1867" pos:column="15">numUniChars</name> <init pos:line="1867" pos:column="27">= <expr><name pos:line="1867" pos:column="29">actualSize</name> <op:operator pos:line="1867" pos:column="40">/</op:operator> <sizeof pos:line="1867" pos:column="42">sizeof<argument_list pos:line="1867" pos:column="48">( <argument><expr><name pos:line="1867" pos:column="50">UniChar</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:line="1869" pos:column="1">#<cpp:directive pos:line="1869" pos:column="2">ifdef</cpp:directive> <name pos:line="1869" pos:column="8">EXT_INPUT</name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="1870" pos:column="5">UniChar</name><type:modifier pos:line="1870" pos:column="12">*</type:modifier></type> <name pos:line="1870" pos:column="14">text</name> <init pos:line="1870" pos:column="19">= <expr><op:operator pos:line="1870" pos:column="21">new</op:operator> <name><name pos:line="1870" pos:column="25">UniChar</name> <index pos:line="1870" pos:column="33">[<expr><name pos:line="1870" pos:column="34">numUniChars</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="1871" pos:column="5">err</name> <op:operator pos:line="1871" pos:column="9">=</op:operator> <call><name><name pos:line="1871" pos:column="11">event</name><op:operator pos:line="1871" pos:column="16">.</op:operator><name pos:line="1871" pos:column="17">GetParameter</name></name><argument_list pos:line="1871" pos:column="29">( <argument><expr><name pos:line="1871" pos:column="31">kEventParamTextInputSendText</name></expr></argument>, <argument><expr><name pos:line="1871" pos:column="61">typeUnicodeText</name></expr></argument>, <argument><expr><name pos:line="1871" pos:column="78">actualSize</name></expr></argument>, <argument><expr><name pos:line="1871" pos:column="90">text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1872" pos:column="5">PLATFORM_ASSERT</name><argument_list pos:line="1872" pos:column="20">( <argument><expr><name pos:line="1872" pos:column="22">err</name> <op:operator pos:line="1872" pos:column="26">==</op:operator> <name pos:line="1872" pos:column="29">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="1874" pos:column="5">int</name></type> <name pos:line="1874" pos:column="9">modifiers</name> <init pos:line="1874" pos:column="19">= <expr><call><name pos:line="1874" pos:column="21">GetCurrentEventKeyModifiers</name><argument_list pos:line="1874" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="1876" pos:column="5">// Loop over all characters in sequence</comment>
    <for pos:line="1877" pos:column="5">for (<init><decl><type><name pos:line="1877" pos:column="10">int</name></type> <name pos:line="1877" pos:column="14">i</name> <init pos:line="1877" pos:column="16">= <expr><lit:literal type="number" pos:line="1877" pos:column="18">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1877" pos:column="21">i</name> <op:operator pos:line="1877" pos:column="23">&lt;</op:operator> <name pos:line="1877" pos:column="25">numUniChars</name></expr>;</condition> <incr><expr><name pos:line="1877" pos:column="38">i</name><op:operator pos:line="1877" pos:column="39">++</op:operator></expr></incr>)
    <block pos:line="1878" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="1879" pos:column="9">UniChar</name></type> <name pos:line="1879" pos:column="17">key</name> <init pos:line="1879" pos:column="21">= <expr><call><name pos:line="1879" pos:column="23">KeyTranslate</name><argument_list pos:line="1879" pos:column="35">( <argument><expr><name><name pos:line="1879" pos:column="37">text</name><index pos:line="1879" pos:column="41">[<expr><name pos:line="1879" pos:column="42">i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="1880" pos:column="9">if <condition pos:line="1880" pos:column="12">(<expr><op:operator pos:line="1880" pos:column="13">!</op:operator><name pos:line="1880" pos:column="14">key</name></expr>)</condition><then pos:line="1880" pos:column="18">
            <continue pos:line="1881" pos:column="13">continue;</continue></then></if>

        <decl_stmt><decl><type><name pos:line="1883" pos:column="9">bool</name></type> <name pos:line="1883" pos:column="14">consumed</name> <init pos:line="1883" pos:column="23">= <expr><lit:literal type="boolean" pos:line="1883" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="1885" pos:column="9">// need to go here first so e.g. Tab indentation works</comment>
        <expr_stmt><expr><call><name pos:line="1886" pos:column="9">KeyDown</name> <argument_list pos:line="1886" pos:column="17">(<argument><expr><op:operator pos:line="1886" pos:column="18">(</op:operator><name pos:line="1886" pos:column="19">int</name><op:operator pos:line="1886" pos:column="22">)</op:operator> <name pos:line="1886" pos:column="24">key</name></expr></argument>, <argument><expr><op:operator pos:line="1886" pos:column="29">(</op:operator><name pos:line="1886" pos:column="30">modifiers</name> <op:operator pos:line="1886" pos:column="40">&amp;</op:operator> <name pos:line="1886" pos:column="42">shiftKey</name><op:operator pos:line="1886" pos:column="50">)</op:operator> <op:operator pos:line="1886" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="1886" pos:column="55">0</lit:literal> <op:operator pos:line="1886" pos:column="57">||</op:operator> <op:operator pos:line="1886" pos:column="60">(</op:operator><name pos:line="1886" pos:column="61">modifiers</name> <op:operator pos:line="1886" pos:column="71">&amp;</op:operator> <name pos:line="1886" pos:column="73">cmdKey</name><op:operator pos:line="1886" pos:column="79">)</op:operator> <op:operator pos:line="1886" pos:column="81">!=</op:operator> <lit:literal type="number" pos:line="1886" pos:column="84">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1886" pos:column="87">(</op:operator><name pos:line="1886" pos:column="88">modifiers</name> <op:operator pos:line="1886" pos:column="98">&amp;</op:operator> <name pos:line="1886" pos:column="100">controlKey</name><op:operator pos:line="1886" pos:column="110">)</op:operator> <op:operator pos:line="1886" pos:column="112">!=</op:operator> <lit:literal type="number" pos:line="1886" pos:column="115">0</lit:literal> <op:operator pos:line="1886" pos:column="117">||</op:operator> <op:operator pos:line="1886" pos:column="120">(</op:operator><name pos:line="1886" pos:column="121">modifiers</name> <op:operator pos:line="1886" pos:column="131">&amp;</op:operator> <name pos:line="1886" pos:column="133">cmdKey</name><op:operator pos:line="1886" pos:column="139">)</op:operator> <op:operator pos:line="1886" pos:column="141">!=</op:operator> <lit:literal type="number" pos:line="1886" pos:column="144">0</lit:literal></expr></argument>,
                 <argument><expr><op:operator pos:line="1887" pos:column="18">(</op:operator><name pos:line="1887" pos:column="19">modifiers</name> <op:operator pos:line="1887" pos:column="29">&amp;</op:operator> <name pos:line="1887" pos:column="31">optionKey</name><op:operator pos:line="1887" pos:column="40">)</op:operator> <op:operator pos:line="1887" pos:column="42">!=</op:operator> <lit:literal type="number" pos:line="1887" pos:column="45">0</lit:literal> <op:operator pos:line="1887" pos:column="47">||</op:operator> <op:operator pos:line="1887" pos:column="50">(</op:operator><name pos:line="1887" pos:column="51">modifiers</name> <op:operator pos:line="1887" pos:column="61">&amp;</op:operator> <name pos:line="1887" pos:column="63">cmdKey</name><op:operator pos:line="1887" pos:column="69">)</op:operator> <op:operator pos:line="1887" pos:column="71">!=</op:operator> <lit:literal type="number" pos:line="1887" pos:column="74">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1887" pos:column="77">&amp;</op:operator><name pos:line="1887" pos:column="78">consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="1889" pos:column="9">// BP 2007-01-08: 1452623 Second Cmd+s to save doc inserts an "s" into the text on Mac.</comment>
        <comment type="line" pos:line="1890" pos:column="9">// At this point we need to ignore all cmd/option keys with char value smaller than 32</comment>
        <if pos:line="1891" pos:column="9">if<condition pos:line="1891" pos:column="11">( <expr><op:operator pos:line="1891" pos:column="13">!</op:operator><name pos:line="1891" pos:column="14">consumed</name></expr> )</condition><then pos:line="1891" pos:column="24">
            <expr_stmt><expr><name pos:line="1892" pos:column="13">consumed</name> <op:operator pos:line="1892" pos:column="22">=</op:operator> <op:operator pos:line="1892" pos:column="24">(</op:operator> <name pos:line="1892" pos:column="26">modifiers</name> <op:operator pos:line="1892" pos:column="36">&amp;</op:operator> <op:operator pos:line="1892" pos:column="38">(</op:operator> <name pos:line="1892" pos:column="40">cmdKey</name> <op:operator pos:line="1892" pos:column="47">|</op:operator> <name pos:line="1892" pos:column="49">optionKey</name> <op:operator pos:line="1892" pos:column="59">)</op:operator> <op:operator pos:line="1892" pos:column="61">)</op:operator> <op:operator pos:line="1892" pos:column="63">!=</op:operator> <lit:literal type="number" pos:line="1892" pos:column="66">0</lit:literal> <op:operator pos:line="1892" pos:column="68">&amp;&amp;</op:operator> <name><name pos:line="1892" pos:column="71">text</name><index pos:line="1892" pos:column="75">[<expr><name pos:line="1892" pos:column="76">i</name></expr>]</index></name> <op:operator pos:line="1892" pos:column="79">&lt;</op:operator> <lit:literal type="number" pos:line="1892" pos:column="81">32</lit:literal></expr>;</expr_stmt></then></if>

        <comment type="line" pos:line="1894" pos:column="9">// If not consumed, insert the original key</comment>
        <if pos:line="1895" pos:column="9">if <condition pos:line="1895" pos:column="12">(<expr><op:operator pos:line="1895" pos:column="13">!</op:operator><name pos:line="1895" pos:column="14">consumed</name></expr>)</condition><then pos:line="1895" pos:column="23">
            <expr_stmt><expr><call><name pos:line="1896" pos:column="13">InsertCharacters</name> <argument_list pos:line="1896" pos:column="30">(<argument><expr><name pos:line="1896" pos:column="31">text</name><op:operator pos:line="1896" pos:column="35">+</op:operator><name pos:line="1896" pos:column="36">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1896" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>

    <expr_stmt><expr><op:operator pos:line="1899" pos:column="5">delete</op:operator><index pos:line="1899" pos:column="11">[]</index> <name pos:line="1899" pos:column="14">text</name></expr>;</expr_stmt>
    <return pos:line="1900" pos:column="5">return <expr><name pos:line="1900" pos:column="12">noErr</name></expr>;</return>
<cpp:else pos:line="1901" pos:column="1">#<cpp:directive pos:line="1901" pos:column="2">else</cpp:directive></cpp:else>
    <comment type="line" pos:line="1902" pos:column="5">// Allocate a buffer for the text using Core Foundation</comment>
    <decl_stmt><decl><type><name pos:line="1903" pos:column="5">UniChar</name><type:modifier pos:line="1903" pos:column="12">*</type:modifier></type> <name pos:line="1903" pos:column="14">text</name> <init pos:line="1903" pos:column="19">= <expr><call><name><name pos:line="1903" pos:column="21">reinterpret_cast</name><argument_list pos:line="1903" pos:column="37">&lt;<argument><expr><name pos:line="1903" pos:column="38">UniChar</name><op:operator pos:line="1903" pos:column="45">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1903" pos:column="47">( <argument><expr><call><name pos:line="1903" pos:column="49">CFAllocatorAllocate</name><argument_list pos:line="1903" pos:column="68">( <argument><expr><call><name pos:line="1903" pos:column="70">CFAllocatorGetDefault</name><argument_list pos:line="1903" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1903" pos:column="95">actualSize</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1903" pos:column="107">0</lit:literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1904" pos:column="5">assert</name><argument_list pos:line="1904" pos:column="11">( <argument><expr><name pos:line="1904" pos:column="13">text</name> <op:operator pos:line="1904" pos:column="18">!=</op:operator> <name pos:line="1904" pos:column="21">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1906" pos:column="5">// Get a copy of the text</comment>
    <expr_stmt><expr><name pos:line="1907" pos:column="5">err</name> <op:operator pos:line="1907" pos:column="9">=</op:operator> <call><name><name pos:line="1907" pos:column="11">event</name><op:operator pos:line="1907" pos:column="16">.</op:operator><name pos:line="1907" pos:column="17">GetParameter</name></name><argument_list pos:line="1907" pos:column="29">( <argument><expr><name pos:line="1907" pos:column="31">kEventParamTextInputSendText</name></expr></argument>, <argument><expr><name pos:line="1907" pos:column="61">typeUnicodeText</name></expr></argument>, <argument><expr><name pos:line="1907" pos:column="78">actualSize</name></expr></argument>, <argument><expr><name pos:line="1907" pos:column="90">text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1908" pos:column="5">assert</name><argument_list pos:line="1908" pos:column="11">( <argument><expr><name pos:line="1908" pos:column="13">err</name> <op:operator pos:line="1908" pos:column="17">==</op:operator> <name pos:line="1908" pos:column="20">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1910" pos:column="5">// TODO: This is a gross hack to ignore function keys</comment>
    <comment type="line" pos:line="1911" pos:column="5">// Surely we can do better?</comment>
    <if pos:line="1912" pos:column="5">if <condition pos:line="1912" pos:column="8">( <expr><name pos:line="1912" pos:column="10">numUniChars</name> <op:operator pos:line="1912" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="1912" pos:column="25">1</lit:literal> <op:operator pos:line="1912" pos:column="27">&amp;&amp;</op:operator> <name><name pos:line="1912" pos:column="30">text</name><index pos:line="1912" pos:column="34">[<expr><lit:literal type="number" pos:line="1912" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="1912" pos:column="38">==</op:operator> <name pos:line="1912" pos:column="41">kFunctionKeyCharCode</name></expr> )</condition><then pos:line="1912" pos:column="63"> <return pos:line="1912" pos:column="64">return <expr><name pos:line="1912" pos:column="71">eventNotHandledErr</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name pos:line="1913" pos:column="5">int</name></type> <name pos:line="1913" pos:column="9">modifiers</name> <init pos:line="1913" pos:column="19">= <expr><call><name pos:line="1913" pos:column="21">GetCurrentEventKeyModifiers</name><argument_list pos:line="1913" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1914" pos:column="5">int</name></type> <name pos:line="1914" pos:column="9">scintillaKey</name> <init pos:line="1914" pos:column="22">= <expr><call><name pos:line="1914" pos:column="24">KeyTranslate</name><argument_list pos:line="1914" pos:column="36">( <argument><expr><name><name pos:line="1914" pos:column="38">text</name><index pos:line="1914" pos:column="42">[<expr><lit:literal type="number" pos:line="1914" pos:column="43">0</lit:literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="1916" pos:column="5">// Create a CFString which wraps and takes ownership of the "text" buffer</comment>
    <decl_stmt><decl><type><name pos:line="1917" pos:column="5">CFStringRef</name></type> <name pos:line="1917" pos:column="17">string</name> <init pos:line="1917" pos:column="24">= <expr><call><name pos:line="1917" pos:column="26">CFStringCreateWithCharactersNoCopy</name><argument_list pos:line="1917" pos:column="60">( <argument><expr><name pos:line="1917" pos:column="62">NULL</name></expr></argument>, <argument><expr><name pos:line="1917" pos:column="68">text</name></expr></argument>, <argument><expr><name pos:line="1917" pos:column="74">numUniChars</name></expr></argument>, <argument><expr><name pos:line="1917" pos:column="87">NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="1918" pos:column="5">assert</name><argument_list pos:line="1918" pos:column="11">( <argument><expr><name pos:line="1918" pos:column="13">string</name> <op:operator pos:line="1918" pos:column="20">!=</op:operator> <name pos:line="1918" pos:column="23">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:line="1919" pos:column="5">//delete text;</comment>
    <expr_stmt><expr><name pos:line="1920" pos:column="5">text</name> <op:operator pos:line="1920" pos:column="10">=</op:operator> <name pos:line="1920" pos:column="12">NULL</name></expr>;</expr_stmt>

    <comment type="line" pos:line="1922" pos:column="5">// If we have a single unicode character that is special or</comment>
    <comment type="line" pos:line="1923" pos:column="5">// to process a command. Try to do some translation.</comment>
    <if pos:line="1924" pos:column="5">if <condition pos:line="1924" pos:column="8">( <expr><name pos:line="1924" pos:column="10">numUniChars</name> <op:operator pos:line="1924" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="1924" pos:column="25">1</lit:literal> <op:operator pos:line="1924" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="1924" pos:column="30">(</op:operator> <name pos:line="1924" pos:column="32">modifiers</name> <op:operator pos:line="1924" pos:column="42">&amp;</op:operator> <name pos:line="1924" pos:column="44">controlKey</name> <op:operator pos:line="1924" pos:column="55">||</op:operator> <name pos:line="1924" pos:column="58">scintillaKey</name> <op:operator pos:line="1924" pos:column="71">!=</op:operator> <lit:literal type="number" pos:line="1924" pos:column="74">0</lit:literal> <op:operator pos:line="1924" pos:column="76">)</op:operator></expr> )</condition><then pos:line="1924" pos:column="79"> <block pos:line="1924" pos:column="80">{
        <comment type="line" pos:line="1925" pos:column="9">// If we have a modifier, we need to get the character without modifiers</comment>
        <if pos:line="1926" pos:column="9">if <condition pos:line="1926" pos:column="12">( <expr><name pos:line="1926" pos:column="14">modifiers</name> <op:operator pos:line="1926" pos:column="24">&amp;</op:operator> <name pos:line="1926" pos:column="26">controlKey</name></expr> )</condition><then pos:line="1926" pos:column="38"> <block pos:line="1926" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="1927" pos:column="13">EventRef</name></type> <name pos:line="1927" pos:column="22">rawKeyboardEvent</name> <init pos:line="1927" pos:column="39">= <expr><name pos:line="1927" pos:column="41">NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1928" pos:column="13">event</name><op:operator pos:line="1928" pos:column="18">.</op:operator><name pos:line="1928" pos:column="19">GetParameter</name></name><argument_list pos:line="1928" pos:column="31">(
                      <argument><expr><name pos:line="1929" pos:column="23">kEventParamTextInputSendKeyboardEvent</name></expr></argument>,
                      <argument><expr><name pos:line="1930" pos:column="23">typeEventRef</name></expr></argument>,
                      <argument><expr><sizeof pos:line="1931" pos:column="23">sizeof<argument_list pos:line="1931" pos:column="29">( <argument><expr><name pos:line="1931" pos:column="31">EventRef</name></expr></argument> )</argument_list></sizeof></expr></argument>,
                      <argument><expr><op:operator pos:line="1932" pos:column="23">&amp;</op:operator><name pos:line="1932" pos:column="24">rawKeyboardEvent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="1933" pos:column="13">assert</name><argument_list pos:line="1933" pos:column="19">( <argument><expr><name pos:line="1933" pos:column="21">rawKeyboardEvent</name> <op:operator pos:line="1933" pos:column="38">!=</op:operator> <name pos:line="1933" pos:column="41">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1934" pos:column="13">scintillaKey</name> <op:operator pos:line="1934" pos:column="26">=</op:operator> <call><name pos:line="1934" pos:column="28">GetCharacterWithoutModifiers</name><argument_list pos:line="1934" pos:column="56">( <argument><expr><name pos:line="1934" pos:column="58">rawKeyboardEvent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="1936" pos:column="13">// Make sure that we still handle special characters correctly</comment>
            <decl_stmt><decl><type><name pos:line="1937" pos:column="13">int</name></type> <name pos:line="1937" pos:column="17">temp</name> <init pos:line="1937" pos:column="22">= <expr><call><name pos:line="1937" pos:column="24">KeyTranslate</name><argument_list pos:line="1937" pos:column="36">( <argument><expr><name pos:line="1937" pos:column="38">scintillaKey</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1938" pos:column="13">if <condition pos:line="1938" pos:column="16">( <expr><name pos:line="1938" pos:column="18">temp</name> <op:operator pos:line="1938" pos:column="23">!=</op:operator> <lit:literal type="number" pos:line="1938" pos:column="26">0</lit:literal></expr> )</condition><then pos:line="1938" pos:column="29"> <expr_stmt><expr><name pos:line="1938" pos:column="30">scintillaKey</name> <op:operator pos:line="1938" pos:column="43">=</op:operator> <name pos:line="1938" pos:column="45">temp</name></expr>;</expr_stmt></then></if>

            <comment type="line" pos:line="1940" pos:column="13">// TODO: This is a gross Unicode hack: ASCII chars have a value &lt; 127</comment>
            <if pos:line="1941" pos:column="13">if <condition pos:line="1941" pos:column="16">( <expr><name pos:line="1941" pos:column="18">scintillaKey</name> <op:operator pos:line="1941" pos:column="31">&lt;=</op:operator> <lit:literal type="number" pos:line="1941" pos:column="34">127</lit:literal></expr> )</condition><then pos:line="1941" pos:column="39"> <block pos:line="1941" pos:column="40">{
                <expr_stmt><expr><name pos:line="1942" pos:column="17">scintillaKey</name> <op:operator pos:line="1942" pos:column="30">=</op:operator> <call><name pos:line="1942" pos:column="32">toupper</name><argument_list pos:line="1942" pos:column="39">( <argument><expr><op:operator pos:line="1942" pos:column="41">(</op:operator><name pos:line="1942" pos:column="42">char</name><op:operator pos:line="1942" pos:column="46">)</op:operator> <name pos:line="1942" pos:column="48">scintillaKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line" pos:line="1946" pos:column="9">// Code taken from Editor::KeyDown</comment>
        <comment type="line" pos:line="1947" pos:column="9">// It is copied here because we don't want to feed the key via</comment>
        <comment type="line" pos:line="1948" pos:column="9">// KeyDefault if there is no special action</comment>
        <expr_stmt><expr><call><name pos:line="1949" pos:column="9">DwellEnd</name><argument_list pos:line="1949" pos:column="17">(<argument><expr><lit:literal type="boolean" pos:line="1949" pos:column="18">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="1950" pos:column="9">int</name></type> <name pos:line="1950" pos:column="13">scintillaModifiers</name> <init pos:line="1950" pos:column="32">= <expr><op:operator pos:line="1950" pos:column="34">(</op:operator> <op:operator pos:line="1950" pos:column="36">(</op:operator><name pos:line="1950" pos:column="37">modifiers</name> <op:operator pos:line="1950" pos:column="47">&amp;</op:operator> <name pos:line="1950" pos:column="49">shiftKey</name><op:operator pos:line="1950" pos:column="57">)</op:operator> <op:operator pos:line="1950" pos:column="59">?</op:operator> <name pos:line="1950" pos:column="61">SCI_SHIFT</name> <op:operator pos:line="1950" pos:column="71">:</op:operator> <lit:literal type="number" pos:line="1950" pos:column="73">0</lit:literal><op:operator pos:line="1950" pos:column="74">)</op:operator> <op:operator pos:line="1950" pos:column="76">|</op:operator> <op:operator pos:line="1950" pos:column="78">(</op:operator> <op:operator pos:line="1950" pos:column="80">(</op:operator><name pos:line="1950" pos:column="81">modifiers</name> <op:operator pos:line="1950" pos:column="91">&amp;</op:operator> <name pos:line="1950" pos:column="93">controlKey</name><op:operator pos:line="1950" pos:column="103">)</op:operator> <op:operator pos:line="1950" pos:column="105">?</op:operator> <name pos:line="1950" pos:column="107">SCI_CTRL</name> <op:operator pos:line="1950" pos:column="116">:</op:operator> <lit:literal type="number" pos:line="1950" pos:column="118">0</lit:literal><op:operator pos:line="1950" pos:column="119">)</op:operator> <op:operator pos:line="1950" pos:column="121">|</op:operator>
            <op:operator pos:line="1951" pos:column="13">(</op:operator> <op:operator pos:line="1951" pos:column="15">(</op:operator><name pos:line="1951" pos:column="16">modifiers</name> <op:operator pos:line="1951" pos:column="26">&amp;</op:operator> <name pos:line="1951" pos:column="28">optionKey</name><op:operator pos:line="1951" pos:column="37">)</op:operator> <op:operator pos:line="1951" pos:column="39">?</op:operator> <name pos:line="1951" pos:column="41">SCI_ALT</name> <op:operator pos:line="1951" pos:column="49">:</op:operator> <lit:literal type="number" pos:line="1951" pos:column="51">0</lit:literal><op:operator pos:line="1951" pos:column="52">)</op:operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1952" pos:column="9">int</name></type> <name pos:line="1952" pos:column="13">msg</name> <init pos:line="1952" pos:column="17">= <expr><call><name><name pos:line="1952" pos:column="19">kmap</name><op:operator pos:line="1952" pos:column="23">.</op:operator><name pos:line="1952" pos:column="24">Find</name></name><argument_list pos:line="1952" pos:column="28">( <argument><expr><name pos:line="1952" pos:column="30">scintillaKey</name></expr></argument>, <argument><expr><name pos:line="1952" pos:column="44">scintillaModifiers</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="1953" pos:column="9">if <condition pos:line="1953" pos:column="12">(<expr><name pos:line="1953" pos:column="13">msg</name></expr>)</condition><then pos:line="1953" pos:column="17"> <block pos:line="1953" pos:column="18">{
            <comment type="line" pos:line="1954" pos:column="13">// The keymap has a special event for this key: perform the operation</comment>
            <expr_stmt><expr><call><name pos:line="1955" pos:column="13">WndProc</name><argument_list pos:line="1955" pos:column="20">(<argument><expr><name pos:line="1955" pos:column="21">msg</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1955" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1955" pos:column="29">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1956" pos:column="13">err</name> <op:operator pos:line="1956" pos:column="17">=</op:operator> <name pos:line="1956" pos:column="19">noErr</name></expr>;</expr_stmt>
        }</block></then> <else pos:line="1957" pos:column="11">else <block pos:line="1957" pos:column="16">{
            <comment type="line" pos:line="1958" pos:column="13">// We do not handle this event</comment>
            <expr_stmt><expr><name pos:line="1959" pos:column="13">err</name> <op:operator pos:line="1959" pos:column="17">=</op:operator> <name pos:line="1959" pos:column="19">eventNotHandledErr</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then> <else pos:line="1961" pos:column="7">else <block pos:line="1961" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="1962" pos:column="9">CFStringEncoding</name></type> <name pos:line="1962" pos:column="26">encoding</name> <init pos:line="1962" pos:column="35">= <expr><op:operator pos:line="1962" pos:column="37">(</op:operator> <call><name pos:line="1962" pos:column="39">IsUnicodeMode</name><argument_list pos:line="1962" pos:column="52">()</argument_list></call> <op:operator pos:line="1962" pos:column="55">?</op:operator> <name pos:line="1962" pos:column="57">kCFStringEncodingUTF8</name> <op:operator pos:line="1962" pos:column="79">:</op:operator> <name pos:line="1962" pos:column="81">kCFStringEncodingASCII</name><op:operator pos:line="1962" pos:column="103">)</op:operator></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="1964" pos:column="9">// Allocate the buffer (don't forget the null!)</comment>
        <decl_stmt><decl><type><name pos:line="1965" pos:column="9">CFIndex</name></type> <name pos:line="1965" pos:column="17">maximumByteLength</name> <init pos:line="1965" pos:column="35">= <expr><call><name pos:line="1965" pos:column="37">CFStringGetMaximumSizeForEncoding</name><argument_list pos:line="1965" pos:column="70">( <argument><expr><name pos:line="1965" pos:column="72">numUniChars</name></expr></argument>, <argument><expr><name pos:line="1965" pos:column="85">encoding</name></expr></argument> )</argument_list></call> <op:operator pos:line="1965" pos:column="96">+</op:operator> <lit:literal type="number" pos:line="1965" pos:column="98">1</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1966" pos:column="9">char</name><type:modifier pos:line="1966" pos:column="13">*</type:modifier></type> <name pos:line="1966" pos:column="15">buffer</name> <init pos:line="1966" pos:column="22">= <expr><op:operator pos:line="1966" pos:column="24">new</op:operator> <name><name pos:line="1966" pos:column="28">char</name><index pos:line="1966" pos:column="32">[<expr><name pos:line="1966" pos:column="33">maximumByteLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name pos:line="1968" pos:column="9">CFIndex</name></type> <name pos:line="1968" pos:column="17">usedBufferLength</name> <init pos:line="1968" pos:column="34">= <expr><lit:literal type="number" pos:line="1968" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="1969" pos:column="9">CFIndex</name></type> <name pos:line="1969" pos:column="17">numCharsConverted</name></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="1970" pos:column="9">numCharsConverted</name> <op:operator pos:line="1970" pos:column="27">=</op:operator> <call><name pos:line="1970" pos:column="29">CFStringGetBytes</name><argument_list pos:line="1970" pos:column="45">( <argument><expr><name pos:line="1970" pos:column="47">string</name></expr></argument>, <argument><expr><call><name pos:line="1970" pos:column="55">CFRangeMake</name><argument_list pos:line="1970" pos:column="66">( <argument><expr><lit:literal type="number" pos:line="1970" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1970" pos:column="71">numUniChars</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name pos:line="1970" pos:column="86">encoding</name></expr></argument>,
                                                <argument><expr><lit:literal type="char" pos:line="1971" pos:column="49">'?'</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1971" pos:column="54">false</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1971" pos:column="61">reinterpret_cast</name><argument_list pos:line="1971" pos:column="77">&lt;<argument><expr><name pos:line="1971" pos:column="78">UInt8</name><op:operator pos:line="1971" pos:column="83">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1971" pos:column="85">( <argument><expr><name pos:line="1971" pos:column="87">buffer</name></expr></argument> )</argument_list></call></expr></argument>,
                                                <argument><expr><name pos:line="1972" pos:column="49">maximumByteLength</name></expr></argument>, <argument><expr><op:operator pos:line="1972" pos:column="68">&amp;</op:operator><name pos:line="1972" pos:column="69">usedBufferLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="1973" pos:column="9">assert</name><argument_list pos:line="1973" pos:column="15">( <argument><expr><name pos:line="1973" pos:column="17">numCharsConverted</name> <op:operator pos:line="1973" pos:column="35">==</op:operator> <name pos:line="1973" pos:column="38">numUniChars</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="1974" pos:column="9">buffer</name><index pos:line="1974" pos:column="15">[<expr><name pos:line="1974" pos:column="16">usedBufferLength</name></expr>]</index></name> <op:operator pos:line="1974" pos:column="34">=</op:operator> <lit:literal type="char" pos:line="1974" pos:column="36">'\0'</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="1974" pos:column="42">// null terminate</comment>

        <comment type="line" pos:line="1976" pos:column="9">// Add all the characters to the document</comment>
        <comment type="line" pos:line="1977" pos:column="9">// NOTE: OS X doesn't specify that text input events provide only a single character</comment>
        <comment type="line" pos:line="1978" pos:column="9">// if we get a single character, add it as a character</comment>
        <comment type="line" pos:line="1979" pos:column="9">// otherwise, we insert the entire string</comment>
        <if pos:line="1980" pos:column="9">if <condition pos:line="1980" pos:column="12">( <expr><name pos:line="1980" pos:column="14">numUniChars</name> <op:operator pos:line="1980" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="1980" pos:column="29">1</lit:literal></expr> )</condition><then pos:line="1980" pos:column="32"> <block pos:line="1980" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="1981" pos:column="13">AddCharUTF</name><argument_list pos:line="1981" pos:column="23">( <argument><expr><name pos:line="1981" pos:column="25">buffer</name></expr></argument>, <argument><expr><name pos:line="1981" pos:column="33">usedBufferLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="1982" pos:column="11">else <block pos:line="1982" pos:column="16">{
            <comment type="line" pos:line="1983" pos:column="13">// WARNING: This is an untested code path as with my US keyboard, I only enter a single character at a time</comment>
            <if pos:line="1984" pos:column="13">if <condition pos:line="1984" pos:column="16">(<expr><call><name><name pos:line="1984" pos:column="17">pdoc</name><op:operator pos:line="1984" pos:column="21">-&gt;</op:operator><name pos:line="1984" pos:column="23">InsertString</name></name><argument_list pos:line="1984" pos:column="35">(<argument><expr><call><name><name pos:line="1984" pos:column="36">sel</name><op:operator pos:line="1984" pos:column="39">.</op:operator><name pos:line="1984" pos:column="40">RangeMain</name></name><argument_list pos:line="1984" pos:column="49">()</argument_list></call><op:operator pos:line="1984" pos:column="51">.</op:operator><call><name><name pos:line="1984" pos:column="52">caret</name><op:operator pos:line="1984" pos:column="57">.</op:operator><name pos:line="1984" pos:column="58">Position</name></name><argument_list pos:line="1984" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1984" pos:column="70">buffer</name></expr></argument>, <argument><expr><name pos:line="1984" pos:column="78">usedBufferLength</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1984" pos:column="96"> <block pos:line="1984" pos:column="97">{
                <expr_stmt><expr><call><name pos:line="1985" pos:column="17">SetEmptySelection</name><argument_list pos:line="1985" pos:column="34">(<argument><expr><call><name><name pos:line="1985" pos:column="35">sel</name><op:operator pos:line="1985" pos:column="38">.</op:operator><name pos:line="1985" pos:column="39">RangeMain</name></name><argument_list pos:line="1985" pos:column="48">()</argument_list></call><op:operator pos:line="1985" pos:column="50">.</op:operator><call><name><name pos:line="1985" pos:column="51">caret</name><op:operator pos:line="1985" pos:column="56">.</op:operator><name pos:line="1985" pos:column="57">Position</name></name><argument_list pos:line="1985" pos:column="65">()</argument_list></call> <op:operator pos:line="1985" pos:column="68">+</op:operator> <name pos:line="1985" pos:column="70">usedBufferLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>

        <comment type="line" pos:line="1989" pos:column="9">// Free the buffer that was allocated</comment>
        <expr_stmt><expr><op:operator pos:line="1990" pos:column="9">delete</op:operator><index pos:line="1990" pos:column="15">[]</index> <name pos:line="1990" pos:column="18">buffer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1991" pos:column="9">buffer</name> <op:operator pos:line="1991" pos:column="16">=</op:operator> <name pos:line="1991" pos:column="18">NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1992" pos:column="9">err</name> <op:operator pos:line="1992" pos:column="13">=</op:operator> <name pos:line="1992" pos:column="15">noErr</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line" pos:line="1995" pos:column="5">// Default allocator releases both the CFString and the UniChar buffer (text)</comment>
    <expr_stmt><expr><call><name pos:line="1996" pos:column="5">CFRelease</name><argument_list pos:line="1996" pos:column="14">( <argument><expr><name pos:line="1996" pos:column="16">string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="1997" pos:column="5">string</name> <op:operator pos:line="1997" pos:column="12">=</op:operator> <name pos:line="1997" pos:column="14">NULL</name></expr>;</expr_stmt>

    <return pos:line="1999" pos:column="5">return <expr><name pos:line="1999" pos:column="12">err</name></expr>;</return>
<cpp:endif pos:line="2000" pos:column="1">#<cpp:directive pos:line="2000" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2003" pos:column="1">UInt32</name></type> <name><name pos:line="2003" pos:column="8">ScintillaMacOSX</name><op:operator pos:line="2003" pos:column="23">::</op:operator><name pos:line="2003" pos:column="25">GetBehaviors</name></name><parameter_list pos:line="2003" pos:column="37">()</parameter_list>
<block pos:line="2004" pos:column="1">{
    <return pos:line="2005" pos:column="5">return <expr><call><name><name pos:line="2005" pos:column="12">TView</name><op:operator pos:line="2005" pos:column="17">::</op:operator><name pos:line="2005" pos:column="19">GetBehaviors</name></name><argument_list pos:line="2005" pos:column="31">()</argument_list></call> <op:operator pos:line="2005" pos:column="34">|</op:operator> <name pos:line="2005" pos:column="36">kControlGetsFocusOnClick</name> <op:operator pos:line="2005" pos:column="61">|</op:operator> <name pos:line="2005" pos:column="63">kControlSupportsEmbedding</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2008" pos:column="1">OSStatus</name></type> <name><name pos:line="2008" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2008" pos:column="25">::</op:operator><name pos:line="2008" pos:column="27">MouseEntered</name></name><parameter_list pos:line="2008" pos:column="39">(<param><decl><type><name pos:line="2008" pos:column="40">HIPoint</name><type:modifier pos:line="2008" pos:column="47">&amp;</type:modifier></type> <name pos:line="2008" pos:column="49">location</name></decl></param>, <param><decl><type><name pos:line="2008" pos:column="59">UInt32</name></type></decl></param> <comment type="block" pos:line="2008" pos:column="66">/*inKeyModifiers*/</comment>, <param><decl><type><name pos:line="2008" pos:column="86">EventMouseButton</name></type></decl></param> <comment type="block" pos:line="2008" pos:column="103">/*inMouseButton*/</comment>, <param><decl><type><name pos:line="2008" pos:column="122">UInt32</name></type></decl></param> <comment type="block" pos:line="2008" pos:column="129">/*inClickCount*/</comment> )</parameter_list>
<block pos:line="2009" pos:column="1">{
    <if pos:line="2010" pos:column="5">if <condition pos:line="2010" pos:column="8">(<expr><op:operator pos:line="2010" pos:column="9">!</op:operator><call><name pos:line="2010" pos:column="10">HaveMouseCapture</name><argument_list pos:line="2010" pos:column="26">()</argument_list></call> <op:operator pos:line="2010" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="2010" pos:column="32">HIViewGetSuperview</name><argument_list pos:line="2010" pos:column="50">(<argument><expr><call><name pos:line="2010" pos:column="51">GetViewRef</name><argument_list pos:line="2010" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="2010" pos:column="65">!=</op:operator> <name pos:line="2010" pos:column="68">NULL</name></expr>)</condition><then pos:line="2010" pos:column="73"> <block pos:line="2010" pos:column="74">{
        <decl_stmt><decl><type><name pos:line="2011" pos:column="9">HIViewRef</name></type> <name pos:line="2011" pos:column="19">view</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="2012" pos:column="9">HIViewGetSubviewHit</name><argument_list pos:line="2012" pos:column="28">(<argument><expr><call><name><name pos:line="2012" pos:column="29">reinterpret_cast</name><argument_list pos:line="2012" pos:column="45">&lt;<argument><expr><name pos:line="2012" pos:column="46">ControlRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2012" pos:column="57">(<argument><expr><call><name><name pos:line="2012" pos:column="58">wMain</name><op:operator pos:line="2012" pos:column="63">.</op:operator><name pos:line="2012" pos:column="64">GetID</name></name><argument_list pos:line="2012" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2012" pos:column="74">&amp;</op:operator><name pos:line="2012" pos:column="75">location</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2012" pos:column="85">true</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2012" pos:column="91">&amp;</op:operator><name pos:line="2012" pos:column="92">view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="2013" pos:column="9">if <condition pos:line="2013" pos:column="12">(<expr><name pos:line="2013" pos:column="13">view</name></expr>)</condition><then pos:line="2013" pos:column="18"> <block pos:line="2013" pos:column="19">{
            <comment type="line" pos:line="2014" pos:column="13">// the hit is on a subview (ie. scrollbars)</comment>
            <expr_stmt><expr><call><name pos:line="2015" pos:column="13">WndProc</name><argument_list pos:line="2015" pos:column="20">(<argument><expr><name pos:line="2015" pos:column="21">SCI_SETCURSOR</name></expr></argument>, <argument><expr><name><name pos:line="2015" pos:column="36">Window</name><op:operator pos:line="2015" pos:column="42">::</op:operator><name pos:line="2015" pos:column="44">cursorArrow</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2015" pos:column="57">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="2016" pos:column="11">else <block pos:line="2016" pos:column="16">{
            <comment type="line" pos:line="2017" pos:column="13">// reset to normal, buttonmove will change for other area's in the editor</comment>
            <expr_stmt><expr><call><name pos:line="2018" pos:column="13">WndProc</name><argument_list pos:line="2018" pos:column="20">(<argument><expr><name pos:line="2018" pos:column="21">SCI_SETCURSOR</name></expr></argument>, <argument><expr><op:operator pos:line="2018" pos:column="36">(</op:operator><name pos:line="2018" pos:column="37">long</name> <name pos:line="2018" pos:column="42">int</name><op:operator pos:line="2018" pos:column="45">)</op:operator><name pos:line="2018" pos:column="46">SC_CURSORNORMAL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2018" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="2019" pos:column="13">ButtonMove</name><argument_list pos:line="2019" pos:column="23">( <argument><expr><call><name pos:line="2019" pos:column="25">Point</name><argument_list pos:line="2019" pos:column="30">( <argument><expr><call><name><name pos:line="2019" pos:column="32">static_cast</name><argument_list pos:line="2019" pos:column="43">&lt;<argument><expr><name pos:line="2019" pos:column="44">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2019" pos:column="48">( <argument><expr><name><name pos:line="2019" pos:column="50">location</name><op:operator pos:line="2019" pos:column="58">.</op:operator><name pos:line="2019" pos:column="59">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2019" pos:column="64">static_cast</name><argument_list pos:line="2019" pos:column="75">&lt;<argument><expr><name pos:line="2019" pos:column="76">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2019" pos:column="80">( <argument><expr><name><name pos:line="2019" pos:column="82">location</name><op:operator pos:line="2019" pos:column="90">.</op:operator><name pos:line="2019" pos:column="91">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return pos:line="2021" pos:column="9">return <expr><name pos:line="2021" pos:column="16">noErr</name></expr>;</return>
    }</block></then></if>
    <return pos:line="2023" pos:column="5">return <expr><name pos:line="2023" pos:column="12">eventNotHandledErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2026" pos:column="1">OSStatus</name></type> <name><name pos:line="2026" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2026" pos:column="25">::</op:operator><name pos:line="2026" pos:column="27">MouseExited</name></name><parameter_list pos:line="2026" pos:column="38">(<param><decl><type><name pos:line="2026" pos:column="39">HIPoint</name><type:modifier pos:line="2026" pos:column="46">&amp;</type:modifier></type> <name pos:line="2026" pos:column="48">location</name></decl></param>, <param><decl><type><name pos:line="2026" pos:column="58">UInt32</name></type> <name pos:line="2026" pos:column="65">modifiers</name></decl></param>, <param><decl><type><name pos:line="2026" pos:column="76">EventMouseButton</name></type> <name pos:line="2026" pos:column="93">button</name></decl></param>, <param><decl><type><name pos:line="2026" pos:column="101">UInt32</name></type> <name pos:line="2026" pos:column="108">clickCount</name></decl></param> )</parameter_list>
<block pos:line="2027" pos:column="1">{
    <if pos:line="2028" pos:column="5">if <condition pos:line="2028" pos:column="8">(<expr><call><name pos:line="2028" pos:column="9">HIViewGetSuperview</name><argument_list pos:line="2028" pos:column="27">(<argument><expr><call><name pos:line="2028" pos:column="28">GetViewRef</name><argument_list pos:line="2028" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="2028" pos:column="42">!=</op:operator> <name pos:line="2028" pos:column="45">NULL</name></expr>)</condition><then pos:line="2028" pos:column="50"> <block pos:line="2028" pos:column="51">{
        <if pos:line="2029" pos:column="9">if <condition pos:line="2029" pos:column="12">(<expr><call><name pos:line="2029" pos:column="13">HaveMouseCapture</name><argument_list pos:line="2029" pos:column="29">()</argument_list></call></expr>)</condition><then pos:line="2029" pos:column="32"> <block pos:line="2029" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="2030" pos:column="13">ButtonUp</name><argument_list pos:line="2030" pos:column="21">( <argument><expr><call><name><name pos:line="2030" pos:column="23">Scintilla</name><op:operator pos:line="2030" pos:column="32">::</op:operator><name pos:line="2030" pos:column="34">Point</name></name><argument_list pos:line="2030" pos:column="39">( <argument><expr><call><name><name pos:line="2030" pos:column="41">static_cast</name><argument_list pos:line="2030" pos:column="52">&lt;<argument><expr><name pos:line="2030" pos:column="53">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2030" pos:column="57">( <argument><expr><name><name pos:line="2030" pos:column="59">location</name><op:operator pos:line="2030" pos:column="67">.</op:operator><name pos:line="2030" pos:column="68">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2030" pos:column="73">static_cast</name><argument_list pos:line="2030" pos:column="84">&lt;<argument><expr><name pos:line="2030" pos:column="85">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2030" pos:column="89">( <argument><expr><name><name pos:line="2030" pos:column="91">location</name><op:operator pos:line="2030" pos:column="99">.</op:operator><name pos:line="2030" pos:column="100">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name pos:line="2031" pos:column="23">static_cast</name><argument_list pos:line="2031" pos:column="34">&lt;<argument><expr><name pos:line="2031" pos:column="35">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2031" pos:column="39">( <argument><expr><call><name pos:line="2031" pos:column="41">GetCurrentEventTime</name><argument_list pos:line="2031" pos:column="60">()</argument_list></call> <op:operator pos:line="2031" pos:column="63">/</op:operator> <name pos:line="2031" pos:column="65">kEventDurationMillisecond</name></expr></argument> )</argument_list></call></expr></argument>,
                      <argument><expr><op:operator pos:line="2032" pos:column="23">(</op:operator><name pos:line="2032" pos:column="24">modifiers</name> <op:operator pos:line="2032" pos:column="34">&amp;</op:operator> <name pos:line="2032" pos:column="36">controlKey</name><op:operator pos:line="2032" pos:column="46">)</op:operator> <op:operator pos:line="2032" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="2032" pos:column="51">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name pos:line="2034" pos:column="9">WndProc</name><argument_list pos:line="2034" pos:column="16">(<argument><expr><name pos:line="2034" pos:column="17">SCI_SETCURSOR</name></expr></argument>, <argument><expr><name><name pos:line="2034" pos:column="32">Window</name><op:operator pos:line="2034" pos:column="38">::</op:operator><name pos:line="2034" pos:column="40">cursorArrow</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2034" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="2035" pos:column="9">return <expr><name pos:line="2035" pos:column="16">noErr</name></expr>;</return>
    }</block></then></if>
    <return pos:line="2037" pos:column="5">return <expr><name pos:line="2037" pos:column="12">eventNotHandledErr</name></expr>;</return>
}</block></function>


<function><type><name pos:line="2041" pos:column="1">OSStatus</name></type> <name><name pos:line="2041" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2041" pos:column="25">::</op:operator><name pos:line="2041" pos:column="27">MouseDown</name></name><parameter_list pos:line="2041" pos:column="36">( <param><decl><type><name pos:line="2041" pos:column="38">HIPoint</name><type:modifier pos:line="2041" pos:column="45">&amp;</type:modifier></type> <name pos:line="2041" pos:column="47">location</name></decl></param>, <param><decl><type><name pos:line="2041" pos:column="57">UInt32</name></type> <name pos:line="2041" pos:column="64">modifiers</name></decl></param>, <param><decl><type><name pos:line="2041" pos:column="75">EventMouseButton</name></type> <name pos:line="2041" pos:column="92">button</name></decl></param>, <param><decl><type><name pos:line="2041" pos:column="100">UInt32</name></type> <name pos:line="2041" pos:column="107">clickCount</name></decl></param> , <param><decl><type><name pos:line="2041" pos:column="120">TCarbonEvent</name><type:modifier pos:line="2041" pos:column="132">&amp;</type:modifier></type> <name pos:line="2041" pos:column="134">inEvent</name></decl></param>)</parameter_list>
<block pos:line="2042" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="2043" pos:column="5">ConvertEventRefToEventRecord</name><argument_list pos:line="2043" pos:column="33">( <argument><expr><call><name><name pos:line="2043" pos:column="35">inEvent</name><op:operator pos:line="2043" pos:column="42">.</op:operator><name pos:line="2043" pos:column="43">GetEventRef</name></name><argument_list pos:line="2043" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2043" pos:column="58">&amp;</op:operator><name pos:line="2043" pos:column="59">mouseDownEvent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return pos:line="2044" pos:column="5">return <expr><call><name pos:line="2044" pos:column="12">MouseDown</name><argument_list pos:line="2044" pos:column="21">(<argument><expr><name pos:line="2044" pos:column="22">location</name></expr></argument>, <argument><expr><name pos:line="2044" pos:column="32">modifiers</name></expr></argument>, <argument><expr><name pos:line="2044" pos:column="43">button</name></expr></argument>, <argument><expr><name pos:line="2044" pos:column="51">clickCount</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2047" pos:column="1">OSStatus</name></type> <name><name pos:line="2047" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2047" pos:column="25">::</op:operator><name pos:line="2047" pos:column="27">MouseDown</name></name><parameter_list pos:line="2047" pos:column="36">( <param><decl><type><name pos:line="2047" pos:column="38">EventRecord</name> <type:modifier pos:line="2047" pos:column="50">*</type:modifier></type><name pos:line="2047" pos:column="51">event</name></decl></param> )</parameter_list>
<block pos:line="2048" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="2049" pos:column="5">HIPoint</name></type> <name pos:line="2049" pos:column="13">pt</name> <init pos:line="2049" pos:column="16">= <expr><call><name pos:line="2049" pos:column="18">GetLocalPoint</name><argument_list pos:line="2049" pos:column="31">(<argument><expr><name><name pos:line="2049" pos:column="32">event</name><op:operator pos:line="2049" pos:column="37">-&gt;</op:operator><name pos:line="2049" pos:column="39">where</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2050" pos:column="5">int</name></type> <name pos:line="2050" pos:column="9">button</name> <init pos:line="2050" pos:column="16">= <expr><name pos:line="2050" pos:column="18">kEventMouseButtonPrimary</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="2051" pos:column="5">mouseDownEvent</name> <op:operator pos:line="2051" pos:column="20">=</op:operator> <op:operator pos:line="2051" pos:column="22">*</op:operator><name pos:line="2051" pos:column="23">event</name></expr>;</expr_stmt>

    <if pos:line="2053" pos:column="5">if <condition pos:line="2053" pos:column="8">( <expr><name><name pos:line="2053" pos:column="10">event</name><op:operator pos:line="2053" pos:column="15">-&gt;</op:operator><name pos:line="2053" pos:column="17">modifiers</name></name> <op:operator pos:line="2053" pos:column="27">&amp;</op:operator> <name pos:line="2053" pos:column="29">controlKey</name></expr> )</condition><then pos:line="2053" pos:column="41">
        <expr_stmt><expr><name pos:line="2054" pos:column="9">button</name> <op:operator pos:line="2054" pos:column="16">=</op:operator> <name pos:line="2054" pos:column="18">kEventMouseButtonSecondary</name></expr>;</expr_stmt></then></if>
    <return pos:line="2055" pos:column="5">return <expr><call><name pos:line="2055" pos:column="12">MouseDown</name><argument_list pos:line="2055" pos:column="21">(<argument><expr><name pos:line="2055" pos:column="22">pt</name></expr></argument>, <argument><expr><name><name pos:line="2055" pos:column="26">event</name><op:operator pos:line="2055" pos:column="31">-&gt;</op:operator><name pos:line="2055" pos:column="33">modifiers</name></name></expr></argument>, <argument><expr><name pos:line="2055" pos:column="44">button</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2055" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2058" pos:column="1">OSStatus</name></type> <name><name pos:line="2058" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2058" pos:column="25">::</op:operator><name pos:line="2058" pos:column="27">MouseDown</name></name><parameter_list pos:line="2058" pos:column="36">( <param><decl><type><name pos:line="2058" pos:column="38">HIPoint</name><type:modifier pos:line="2058" pos:column="45">&amp;</type:modifier></type> <name pos:line="2058" pos:column="47">location</name></decl></param>, <param><decl><type><name pos:line="2058" pos:column="57">UInt32</name></type> <name pos:line="2058" pos:column="64">modifiers</name></decl></param>, <param><decl><type><name pos:line="2058" pos:column="75">EventMouseButton</name></type> <name pos:line="2058" pos:column="92">button</name></decl></param>, <param><decl><type><name pos:line="2058" pos:column="100">UInt32</name></type></decl></param> <comment type="block" pos:line="2058" pos:column="107">/*clickCount*/</comment> )</parameter_list>
<block pos:line="2059" pos:column="1">{
    <comment type="line" pos:line="2060" pos:column="5">// We only deal with the first mouse button</comment>
    <if pos:line="2061" pos:column="5">if <condition pos:line="2061" pos:column="8">( <expr><name pos:line="2061" pos:column="10">button</name> <op:operator pos:line="2061" pos:column="17">!=</op:operator> <name pos:line="2061" pos:column="20">kEventMouseButtonPrimary</name></expr> )</condition><then pos:line="2061" pos:column="46"> <return pos:line="2061" pos:column="47">return <expr><name pos:line="2061" pos:column="54">eventNotHandledErr</name></expr>;</return></then></if>
    <comment type="line" pos:line="2062" pos:column="5">// TODO: Verify that Scintilla wants the time in milliseconds</comment>
    <if pos:line="2063" pos:column="5">if <condition pos:line="2063" pos:column="8">(<expr><op:operator pos:line="2063" pos:column="9">!</op:operator><call><name pos:line="2063" pos:column="10">HaveMouseCapture</name><argument_list pos:line="2063" pos:column="26">()</argument_list></call> <op:operator pos:line="2063" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="2063" pos:column="32">HIViewGetSuperview</name><argument_list pos:line="2063" pos:column="50">(<argument><expr><call><name pos:line="2063" pos:column="51">GetViewRef</name><argument_list pos:line="2063" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="2063" pos:column="65">!=</op:operator> <name pos:line="2063" pos:column="68">NULL</name></expr>)</condition><then pos:line="2063" pos:column="73"> <block pos:line="2063" pos:column="74">{
        <if pos:line="2064" pos:column="9">if <condition pos:line="2064" pos:column="12">(<expr><call><name pos:line="2064" pos:column="13">ScrollBarHit</name><argument_list pos:line="2064" pos:column="25">(<argument><expr><name pos:line="2064" pos:column="26">location</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2064" pos:column="36"> <return pos:line="2064" pos:column="37">return <expr><name pos:line="2064" pos:column="44">noErr</name></expr>;</return></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="2066" pos:column="5">ButtonDown</name><argument_list pos:line="2066" pos:column="15">( <argument><expr><call><name><name pos:line="2066" pos:column="17">Scintilla</name><op:operator pos:line="2066" pos:column="26">::</op:operator><name pos:line="2066" pos:column="28">Point</name></name><argument_list pos:line="2066" pos:column="33">( <argument><expr><call><name><name pos:line="2066" pos:column="35">static_cast</name><argument_list pos:line="2066" pos:column="46">&lt;<argument><expr><name pos:line="2066" pos:column="47">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2066" pos:column="51">( <argument><expr><name><name pos:line="2066" pos:column="53">location</name><op:operator pos:line="2066" pos:column="61">.</op:operator><name pos:line="2066" pos:column="62">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2066" pos:column="67">static_cast</name><argument_list pos:line="2066" pos:column="78">&lt;<argument><expr><name pos:line="2066" pos:column="79">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2066" pos:column="83">( <argument><expr><name><name pos:line="2066" pos:column="85">location</name><op:operator pos:line="2066" pos:column="93">.</op:operator><name pos:line="2066" pos:column="94">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
             <argument><expr><call><name><name pos:line="2067" pos:column="14">static_cast</name><argument_list pos:line="2067" pos:column="25">&lt;<argument><expr><name pos:line="2067" pos:column="26">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2067" pos:column="30">( <argument><expr><call><name pos:line="2067" pos:column="32">GetCurrentEventTime</name><argument_list pos:line="2067" pos:column="51">()</argument_list></call> <op:operator pos:line="2067" pos:column="54">/</op:operator> <name pos:line="2067" pos:column="56">kEventDurationMillisecond</name></expr></argument> )</argument_list></call></expr></argument>,
             <argument><expr><op:operator pos:line="2068" pos:column="14">(</op:operator><name pos:line="2068" pos:column="15">modifiers</name> <op:operator pos:line="2068" pos:column="25">&amp;</op:operator> <name pos:line="2068" pos:column="27">shiftKey</name><op:operator pos:line="2068" pos:column="35">)</op:operator> <op:operator pos:line="2068" pos:column="37">!=</op:operator> <lit:literal type="number" pos:line="2068" pos:column="40">0</lit:literal></expr></argument>,
             <argument><expr><op:operator pos:line="2069" pos:column="14">(</op:operator><name pos:line="2069" pos:column="15">modifiers</name> <op:operator pos:line="2069" pos:column="25">&amp;</op:operator> <name pos:line="2069" pos:column="27">controlKey</name><op:operator pos:line="2069" pos:column="37">)</op:operator> <op:operator pos:line="2069" pos:column="39">!=</op:operator> <lit:literal type="number" pos:line="2069" pos:column="42">0</lit:literal></expr></argument>,
             <argument><expr><op:operator pos:line="2070" pos:column="14">(</op:operator><name pos:line="2070" pos:column="15">modifiers</name> <op:operator pos:line="2070" pos:column="25">&amp;</op:operator> <name pos:line="2070" pos:column="27">cmdKey</name><op:operator pos:line="2070" pos:column="33">)</op:operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:line="2071" pos:column="1">#<cpp:directive pos:line="2071" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="2071" pos:column="5">!</op:operator><call><name pos:line="2071" pos:column="6">defined</name><argument_list pos:line="2071" pos:column="13">(<argument><expr><name pos:line="2071" pos:column="14">CONTAINER_HANDLES_EVENTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="2072" pos:column="5">OSStatus</name></type> <name pos:line="2072" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="2073" pos:column="5">err</name> <op:operator pos:line="2073" pos:column="9">=</op:operator> <call><name pos:line="2073" pos:column="11">SetKeyboardFocus</name><argument_list pos:line="2073" pos:column="27">( <argument><expr><call><name><name pos:line="2073" pos:column="29">this</name><op:operator pos:line="2073" pos:column="33">-&gt;</op:operator><name pos:line="2073" pos:column="35">GetOwner</name></name><argument_list pos:line="2073" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2073" pos:column="47">this</name><op:operator pos:line="2073" pos:column="51">-&gt;</op:operator><name pos:line="2073" pos:column="53">GetViewRef</name></name><argument_list pos:line="2073" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2073" pos:column="67">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><op:operator pos:line="2074" pos:column="5">::</op:operator><name pos:line="2074" pos:column="7">SetUserFocusWindow</name></name><argument_list pos:line="2074" pos:column="25">(<argument><expr><call><name><op:operator pos:line="2074" pos:column="26">::</op:operator><name pos:line="2074" pos:column="28">HIViewGetWindow</name></name><argument_list pos:line="2074" pos:column="43">( <argument><expr><call><name><name pos:line="2074" pos:column="45">this</name><op:operator pos:line="2074" pos:column="49">-&gt;</op:operator><name pos:line="2074" pos:column="51">GetViewRef</name></name><argument_list pos:line="2074" pos:column="61">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="2075" pos:column="5">return <expr><name pos:line="2075" pos:column="12">noErr</name></expr>;</return>
<cpp:else pos:line="2076" pos:column="1">#<cpp:directive pos:line="2076" pos:column="2">else</cpp:directive></cpp:else>
    <return pos:line="2077" pos:column="5">return <expr><name pos:line="2077" pos:column="12">eventNotHandledErr</name></expr>;</return> <comment type="line" pos:line="2077" pos:column="32">// allow event to go to container</comment>
<cpp:endif pos:line="2078" pos:column="1">#<cpp:directive pos:line="2078" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2081" pos:column="1">OSStatus</name></type> <name><name pos:line="2081" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2081" pos:column="25">::</op:operator><name pos:line="2081" pos:column="27">MouseUp</name></name><parameter_list pos:line="2081" pos:column="34">( <param><decl><type><name pos:line="2081" pos:column="36">EventRecord</name> <type:modifier pos:line="2081" pos:column="48">*</type:modifier></type><name pos:line="2081" pos:column="49">event</name></decl></param> )</parameter_list>
<block pos:line="2082" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="2083" pos:column="5">HIPoint</name></type> <name pos:line="2083" pos:column="13">pt</name> <init pos:line="2083" pos:column="16">= <expr><call><name pos:line="2083" pos:column="18">GetLocalPoint</name><argument_list pos:line="2083" pos:column="31">(<argument><expr><name><name pos:line="2083" pos:column="32">event</name><op:operator pos:line="2083" pos:column="37">-&gt;</op:operator><name pos:line="2083" pos:column="39">where</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2084" pos:column="5">int</name></type> <name pos:line="2084" pos:column="9">button</name> <init pos:line="2084" pos:column="16">= <expr><name pos:line="2084" pos:column="18">kEventMouseButtonPrimary</name></expr></init></decl>;</decl_stmt>
    <if pos:line="2085" pos:column="5">if <condition pos:line="2085" pos:column="8">( <expr><name><name pos:line="2085" pos:column="10">event</name><op:operator pos:line="2085" pos:column="15">-&gt;</op:operator><name pos:line="2085" pos:column="17">modifiers</name></name> <op:operator pos:line="2085" pos:column="27">&amp;</op:operator> <name pos:line="2085" pos:column="29">controlKey</name></expr> )</condition><then pos:line="2085" pos:column="41">
        <expr_stmt><expr><name pos:line="2086" pos:column="9">button</name> <op:operator pos:line="2086" pos:column="16">=</op:operator> <name pos:line="2086" pos:column="18">kEventMouseButtonSecondary</name></expr>;</expr_stmt></then></if>
    <return pos:line="2087" pos:column="5">return <expr><call><name pos:line="2087" pos:column="12">MouseUp</name><argument_list pos:line="2087" pos:column="19">(<argument><expr><name pos:line="2087" pos:column="20">pt</name></expr></argument>, <argument><expr><name><name pos:line="2087" pos:column="24">event</name><op:operator pos:line="2087" pos:column="29">-&gt;</op:operator><name pos:line="2087" pos:column="31">modifiers</name></name></expr></argument>, <argument><expr><name pos:line="2087" pos:column="42">button</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2087" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2090" pos:column="1">OSStatus</name></type> <name><name pos:line="2090" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2090" pos:column="25">::</op:operator><name pos:line="2090" pos:column="27">MouseUp</name></name><parameter_list pos:line="2090" pos:column="34">( <param><decl><type><name pos:line="2090" pos:column="36">HIPoint</name><type:modifier pos:line="2090" pos:column="43">&amp;</type:modifier></type> <name pos:line="2090" pos:column="45">location</name></decl></param>, <param><decl><type><name pos:line="2090" pos:column="55">UInt32</name></type> <name pos:line="2090" pos:column="62">modifiers</name></decl></param>, <param><decl><type><name pos:line="2090" pos:column="73">EventMouseButton</name></type> <name pos:line="2090" pos:column="90">button</name></decl></param>, <param><decl><type><name pos:line="2090" pos:column="98">UInt32</name></type></decl></param> <comment type="block" pos:line="2090" pos:column="105">/*clickCount*/</comment> )</parameter_list>
<block pos:line="2091" pos:column="1">{
    <comment type="line" pos:line="2092" pos:column="5">// We only deal with the first mouse button</comment>
    <if pos:line="2093" pos:column="5">if <condition pos:line="2093" pos:column="8">( <expr><name pos:line="2093" pos:column="10">button</name> <op:operator pos:line="2093" pos:column="17">!=</op:operator> <name pos:line="2093" pos:column="20">kEventMouseButtonPrimary</name></expr> )</condition><then pos:line="2093" pos:column="46"> <return pos:line="2093" pos:column="47">return <expr><name pos:line="2093" pos:column="54">eventNotHandledErr</name></expr>;</return></then></if>
        <expr_stmt><expr><call><name pos:line="2094" pos:column="9">ButtonUp</name><argument_list pos:line="2094" pos:column="17">( <argument><expr><call><name><name pos:line="2094" pos:column="19">Scintilla</name><op:operator pos:line="2094" pos:column="28">::</op:operator><name pos:line="2094" pos:column="30">Point</name></name><argument_list pos:line="2094" pos:column="35">( <argument><expr><call><name><name pos:line="2094" pos:column="37">static_cast</name><argument_list pos:line="2094" pos:column="48">&lt;<argument><expr><name pos:line="2094" pos:column="49">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2094" pos:column="53">( <argument><expr><name><name pos:line="2094" pos:column="55">location</name><op:operator pos:line="2094" pos:column="63">.</op:operator><name pos:line="2094" pos:column="64">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2094" pos:column="69">static_cast</name><argument_list pos:line="2094" pos:column="80">&lt;<argument><expr><name pos:line="2094" pos:column="81">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2094" pos:column="85">( <argument><expr><name><name pos:line="2094" pos:column="87">location</name><op:operator pos:line="2094" pos:column="95">.</op:operator><name pos:line="2094" pos:column="96">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
               <argument><expr><call><name><name pos:line="2095" pos:column="16">static_cast</name><argument_list pos:line="2095" pos:column="27">&lt;<argument><expr><name pos:line="2095" pos:column="28">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2095" pos:column="32">( <argument><expr><call><name pos:line="2095" pos:column="34">GetCurrentEventTime</name><argument_list pos:line="2095" pos:column="53">()</argument_list></call> <op:operator pos:line="2095" pos:column="56">/</op:operator> <name pos:line="2095" pos:column="58">kEventDurationMillisecond</name></expr></argument> )</argument_list></call></expr></argument>,
               <argument><expr><op:operator pos:line="2096" pos:column="16">(</op:operator><name pos:line="2096" pos:column="17">modifiers</name> <op:operator pos:line="2096" pos:column="27">&amp;</op:operator> <name pos:line="2096" pos:column="29">controlKey</name><op:operator pos:line="2096" pos:column="39">)</op:operator> <op:operator pos:line="2096" pos:column="41">!=</op:operator> <lit:literal type="number" pos:line="2096" pos:column="44">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:line="2098" pos:column="1">#<cpp:directive pos:line="2098" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="2098" pos:column="5">!</op:operator><call><name pos:line="2098" pos:column="6">defined</name><argument_list pos:line="2098" pos:column="13">(<argument><expr><name pos:line="2098" pos:column="14">CONTAINER_HANDLES_EVENTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return pos:line="2099" pos:column="5">return <expr><name pos:line="2099" pos:column="12">noErr</name></expr>;</return>
<cpp:else pos:line="2100" pos:column="1">#<cpp:directive pos:line="2100" pos:column="2">else</cpp:directive></cpp:else>
    <return pos:line="2101" pos:column="5">return <expr><name pos:line="2101" pos:column="12">eventNotHandledErr</name></expr>;</return> <comment type="line" pos:line="2101" pos:column="32">// allow event to go to container</comment>
<cpp:endif pos:line="2102" pos:column="1">#<cpp:directive pos:line="2102" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2105" pos:column="1">OSStatus</name></type> <name><name pos:line="2105" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2105" pos:column="25">::</op:operator><name pos:line="2105" pos:column="27">MouseDragged</name></name><parameter_list pos:line="2105" pos:column="39">( <param><decl><type><name pos:line="2105" pos:column="41">EventRecord</name> <type:modifier pos:line="2105" pos:column="53">*</type:modifier></type><name pos:line="2105" pos:column="54">event</name></decl></param> )</parameter_list>
<block pos:line="2106" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="2107" pos:column="5">HIPoint</name></type> <name pos:line="2107" pos:column="13">pt</name> <init pos:line="2107" pos:column="16">= <expr><call><name pos:line="2107" pos:column="18">GetLocalPoint</name><argument_list pos:line="2107" pos:column="31">(<argument><expr><name><name pos:line="2107" pos:column="32">event</name><op:operator pos:line="2107" pos:column="37">-&gt;</op:operator><name pos:line="2107" pos:column="39">where</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2108" pos:column="5">int</name></type> <name pos:line="2108" pos:column="9">button</name> <init pos:line="2108" pos:column="16">= <expr><lit:literal type="number" pos:line="2108" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="2109" pos:column="5">if <condition pos:line="2109" pos:column="8">( <expr><name><name pos:line="2109" pos:column="10">event</name><op:operator pos:line="2109" pos:column="15">-&gt;</op:operator><name pos:line="2109" pos:column="17">modifiers</name></name> <op:operator pos:line="2109" pos:column="27">&amp;</op:operator> <name pos:line="2109" pos:column="29">btnStateBit</name></expr> )</condition><then pos:line="2109" pos:column="42"> <block pos:line="2109" pos:column="43">{
        <expr_stmt><expr><name pos:line="2110" pos:column="9">button</name> <op:operator pos:line="2110" pos:column="16">=</op:operator> <name pos:line="2110" pos:column="18">kEventMouseButtonPrimary</name></expr>;</expr_stmt>
        <if pos:line="2111" pos:column="9">if <condition pos:line="2111" pos:column="12">( <expr><name><name pos:line="2111" pos:column="14">event</name><op:operator pos:line="2111" pos:column="19">-&gt;</op:operator><name pos:line="2111" pos:column="21">modifiers</name></name> <op:operator pos:line="2111" pos:column="31">&amp;</op:operator> <name pos:line="2111" pos:column="33">controlKey</name></expr> )</condition><then pos:line="2111" pos:column="45">
            <expr_stmt><expr><name pos:line="2112" pos:column="13">button</name> <op:operator pos:line="2112" pos:column="20">=</op:operator> <name pos:line="2112" pos:column="22">kEventMouseButtonSecondary</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return pos:line="2114" pos:column="5">return <expr><call><name pos:line="2114" pos:column="12">MouseDragged</name><argument_list pos:line="2114" pos:column="24">(<argument><expr><name pos:line="2114" pos:column="25">pt</name></expr></argument>, <argument><expr><name><name pos:line="2114" pos:column="29">event</name><op:operator pos:line="2114" pos:column="34">-&gt;</op:operator><name pos:line="2114" pos:column="36">modifiers</name></name></expr></argument>, <argument><expr><name pos:line="2114" pos:column="47">button</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2114" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2117" pos:column="1">OSStatus</name></type> <name><name pos:line="2117" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2117" pos:column="25">::</op:operator><name pos:line="2117" pos:column="27">MouseDragged</name></name><parameter_list pos:line="2117" pos:column="39">( <param><decl><type><name pos:line="2117" pos:column="41">HIPoint</name><type:modifier pos:line="2117" pos:column="48">&amp;</type:modifier></type> <name pos:line="2117" pos:column="50">location</name></decl></param>, <param><decl><type><name pos:line="2117" pos:column="60">UInt32</name></type> <name pos:line="2117" pos:column="67">modifiers</name></decl></param>, <param><decl><type><name pos:line="2117" pos:column="78">EventMouseButton</name></type> <name pos:line="2117" pos:column="95">button</name></decl></param>, <param><decl><type><name pos:line="2117" pos:column="103">UInt32</name></type> <name pos:line="2117" pos:column="110">clickCount</name></decl></param> )</parameter_list>
<block pos:line="2118" pos:column="1">{
<cpp:if pos:line="2119" pos:column="1">#<cpp:directive pos:line="2119" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="2119" pos:column="5">!</op:operator><call><name pos:line="2119" pos:column="6">defined</name><argument_list pos:line="2119" pos:column="13">(<argument><expr><name pos:line="2119" pos:column="14">CONTAINER_HANDLES_EVENTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="2120" pos:column="5">ButtonMove</name><argument_list pos:line="2120" pos:column="15">( <argument><expr><call><name><name pos:line="2120" pos:column="17">Scintilla</name><op:operator pos:line="2120" pos:column="26">::</op:operator><name pos:line="2120" pos:column="28">Point</name></name><argument_list pos:line="2120" pos:column="33">( <argument><expr><call><name><name pos:line="2120" pos:column="35">static_cast</name><argument_list pos:line="2120" pos:column="46">&lt;<argument><expr><name pos:line="2120" pos:column="47">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2120" pos:column="51">( <argument><expr><name><name pos:line="2120" pos:column="53">location</name><op:operator pos:line="2120" pos:column="61">.</op:operator><name pos:line="2120" pos:column="62">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2120" pos:column="67">static_cast</name><argument_list pos:line="2120" pos:column="78">&lt;<argument><expr><name pos:line="2120" pos:column="79">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2120" pos:column="83">( <argument><expr><name><name pos:line="2120" pos:column="85">location</name><op:operator pos:line="2120" pos:column="93">.</op:operator><name pos:line="2120" pos:column="94">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return pos:line="2121" pos:column="5">return <expr><name pos:line="2121" pos:column="12">noErr</name></expr>;</return>
<cpp:else pos:line="2122" pos:column="1">#<cpp:directive pos:line="2122" pos:column="2">else</cpp:directive></cpp:else>
    <if pos:line="2123" pos:column="5">if <condition pos:line="2123" pos:column="8">(<expr><call><name pos:line="2123" pos:column="9">HaveMouseCapture</name><argument_list pos:line="2123" pos:column="25">()</argument_list></call> <op:operator pos:line="2123" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="2123" pos:column="31">!</op:operator><name pos:line="2123" pos:column="32">inDragDrop</name></expr>)</condition><then pos:line="2123" pos:column="43"> <block pos:line="2123" pos:column="44">{
        <decl_stmt><decl><type><name pos:line="2124" pos:column="9">MouseTrackingResult</name></type> <name pos:line="2124" pos:column="29">mouseStatus</name> <init pos:line="2124" pos:column="41">= <expr><lit:literal type="number" pos:line="2124" pos:column="43">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><op:operator pos:line="2125" pos:column="9">::</op:operator><name pos:line="2125" pos:column="11">Point</name></name></type> <name pos:line="2125" pos:column="17">theQDPoint</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="2126" pos:column="9">UInt32</name></type> <name pos:line="2126" pos:column="16">outModifiers</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="2127" pos:column="9">EventTimeout</name></type> <name pos:line="2127" pos:column="22">inTimeout</name><init pos:line="2127" pos:column="31">=<expr><lit:literal type="number" pos:line="2127" pos:column="32">0.1</lit:literal></expr></init></decl>;</decl_stmt>
        <while pos:line="2128" pos:column="9">while <condition pos:line="2128" pos:column="15">(<expr><name pos:line="2128" pos:column="16">mouseStatus</name> <op:operator pos:line="2128" pos:column="28">!=</op:operator> <name pos:line="2128" pos:column="31">kMouseTrackingMouseReleased</name></expr>)</condition> <block pos:line="2128" pos:column="60">{
            <expr_stmt><expr><call><name pos:line="2129" pos:column="13">ButtonMove</name><argument_list pos:line="2129" pos:column="23">( <argument><expr><call><name><name pos:line="2129" pos:column="25">Scintilla</name><op:operator pos:line="2129" pos:column="34">::</op:operator><name pos:line="2129" pos:column="36">Point</name></name><argument_list pos:line="2129" pos:column="41">( <argument><expr><call><name><name pos:line="2129" pos:column="43">static_cast</name><argument_list pos:line="2129" pos:column="54">&lt;<argument><expr><name pos:line="2129" pos:column="55">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2129" pos:column="59">( <argument><expr><name><name pos:line="2129" pos:column="61">location</name><op:operator pos:line="2129" pos:column="69">.</op:operator><name pos:line="2129" pos:column="70">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2129" pos:column="75">static_cast</name><argument_list pos:line="2129" pos:column="86">&lt;<argument><expr><name pos:line="2129" pos:column="87">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2129" pos:column="91">( <argument><expr><name><name pos:line="2129" pos:column="93">location</name><op:operator pos:line="2129" pos:column="101">.</op:operator><name pos:line="2129" pos:column="102">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="2130" pos:column="13">TrackMouseLocationWithOptions</name><argument_list pos:line="2130" pos:column="42">(<argument><expr><op:operator pos:line="2130" pos:column="43">(</op:operator><name pos:line="2130" pos:column="44">GrafPtr</name><op:operator pos:line="2130" pos:column="51">)</op:operator><op:operator pos:line="2130" pos:column="52">-</op:operator><lit:literal type="number" pos:line="2130" pos:column="53">1</lit:literal></expr></argument>,
                                          <argument><expr><name pos:line="2131" pos:column="43">kTrackMouseLocationOptionDontConsumeMouseUp</name></expr></argument>,
                                          <argument><expr><name pos:line="2132" pos:column="43">inTimeout</name></expr></argument>,
                                          <argument><expr><op:operator pos:line="2133" pos:column="43">&amp;</op:operator><name pos:line="2133" pos:column="44">theQDPoint</name></expr></argument>,
                                          <argument><expr><op:operator pos:line="2134" pos:column="43">&amp;</op:operator><name pos:line="2134" pos:column="44">outModifiers</name></expr></argument>,
                                          <argument><expr><op:operator pos:line="2135" pos:column="43">&amp;</op:operator><name pos:line="2135" pos:column="44">mouseStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="2136" pos:column="13">location</name> <op:operator pos:line="2136" pos:column="22">=</op:operator> <call><name pos:line="2136" pos:column="24">GetLocalPoint</name><argument_list pos:line="2136" pos:column="37">(<argument><expr><name pos:line="2136" pos:column="38">theQDPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name pos:line="2138" pos:column="9">ButtonUp</name><argument_list pos:line="2138" pos:column="17">( <argument><expr><call><name><name pos:line="2138" pos:column="19">Scintilla</name><op:operator pos:line="2138" pos:column="28">::</op:operator><name pos:line="2138" pos:column="30">Point</name></name><argument_list pos:line="2138" pos:column="35">( <argument><expr><call><name><name pos:line="2138" pos:column="37">static_cast</name><argument_list pos:line="2138" pos:column="48">&lt;<argument><expr><name pos:line="2138" pos:column="49">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2138" pos:column="53">( <argument><expr><name><name pos:line="2138" pos:column="55">location</name><op:operator pos:line="2138" pos:column="63">.</op:operator><name pos:line="2138" pos:column="64">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2138" pos:column="69">static_cast</name><argument_list pos:line="2138" pos:column="80">&lt;<argument><expr><name pos:line="2138" pos:column="81">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2138" pos:column="85">( <argument><expr><name><name pos:line="2138" pos:column="87">location</name><op:operator pos:line="2138" pos:column="95">.</op:operator><name pos:line="2138" pos:column="96">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
                  <argument><expr><call><name><name pos:line="2139" pos:column="19">static_cast</name><argument_list pos:line="2139" pos:column="30">&lt;<argument><expr><name pos:line="2139" pos:column="31">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2139" pos:column="35">( <argument><expr><call><name pos:line="2139" pos:column="37">GetCurrentEventTime</name><argument_list pos:line="2139" pos:column="56">()</argument_list></call> <op:operator pos:line="2139" pos:column="59">/</op:operator> <name pos:line="2139" pos:column="61">kEventDurationMillisecond</name></expr></argument> )</argument_list></call></expr></argument>,
                  <argument><expr><op:operator pos:line="2140" pos:column="19">(</op:operator><name pos:line="2140" pos:column="20">modifiers</name> <op:operator pos:line="2140" pos:column="30">&amp;</op:operator> <name pos:line="2140" pos:column="32">controlKey</name><op:operator pos:line="2140" pos:column="42">)</op:operator> <op:operator pos:line="2140" pos:column="44">!=</op:operator> <lit:literal type="number" pos:line="2140" pos:column="47">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="2141" pos:column="7">else <block pos:line="2141" pos:column="12">{
        <if pos:line="2142" pos:column="9">if <condition pos:line="2142" pos:column="12">(<expr><op:operator pos:line="2142" pos:column="13">!</op:operator><call><name pos:line="2142" pos:column="14">HaveMouseCapture</name><argument_list pos:line="2142" pos:column="30">()</argument_list></call> <op:operator pos:line="2142" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="2142" pos:column="36">HIViewGetSuperview</name><argument_list pos:line="2142" pos:column="54">(<argument><expr><call><name pos:line="2142" pos:column="55">GetViewRef</name><argument_list pos:line="2142" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="2142" pos:column="69">!=</op:operator> <name pos:line="2142" pos:column="72">NULL</name></expr>)</condition><then pos:line="2142" pos:column="77"> <block pos:line="2142" pos:column="78">{
            <decl_stmt><decl><type><name pos:line="2143" pos:column="13">HIViewRef</name></type> <name pos:line="2143" pos:column="23">view</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="2144" pos:column="13">HIViewGetSubviewHit</name><argument_list pos:line="2144" pos:column="32">(<argument><expr><call><name><name pos:line="2144" pos:column="33">reinterpret_cast</name><argument_list pos:line="2144" pos:column="49">&lt;<argument><expr><name pos:line="2144" pos:column="50">ControlRef</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2144" pos:column="61">(<argument><expr><call><name><name pos:line="2144" pos:column="62">wMain</name><op:operator pos:line="2144" pos:column="67">.</op:operator><name pos:line="2144" pos:column="68">GetID</name></name><argument_list pos:line="2144" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2144" pos:column="78">&amp;</op:operator><name pos:line="2144" pos:column="79">location</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2144" pos:column="89">true</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2144" pos:column="95">&amp;</op:operator><name pos:line="2144" pos:column="96">view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="2145" pos:column="13">if <condition pos:line="2145" pos:column="16">(<expr><name pos:line="2145" pos:column="17">view</name></expr>)</condition><then pos:line="2145" pos:column="22"> <block pos:line="2145" pos:column="23">{
                <comment type="line" pos:line="2146" pos:column="17">// the hit is on a subview (ie. scrollbars)</comment>
                <expr_stmt><expr><call><name pos:line="2147" pos:column="17">WndProc</name><argument_list pos:line="2147" pos:column="24">(<argument><expr><name pos:line="2147" pos:column="25">SCI_SETCURSOR</name></expr></argument>, <argument><expr><name><name pos:line="2147" pos:column="40">Window</name><op:operator pos:line="2147" pos:column="46">::</op:operator><name pos:line="2147" pos:column="48">cursorArrow</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2147" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="2148" pos:column="17">return <expr><name pos:line="2148" pos:column="24">eventNotHandledErr</name></expr>;</return>
            }</block></then> <else pos:line="2149" pos:column="15">else <block pos:line="2149" pos:column="20">{
                <comment type="line" pos:line="2150" pos:column="17">// reset to normal, buttonmove will change for other area's in the editor</comment>
                <expr_stmt><expr><call><name pos:line="2151" pos:column="17">WndProc</name><argument_list pos:line="2151" pos:column="24">(<argument><expr><name pos:line="2151" pos:column="25">SCI_SETCURSOR</name></expr></argument>, <argument><expr><op:operator pos:line="2151" pos:column="40">(</op:operator><name pos:line="2151" pos:column="41">long</name> <name pos:line="2151" pos:column="46">int</name><op:operator pos:line="2151" pos:column="49">)</op:operator><name pos:line="2151" pos:column="50">SC_CURSORNORMAL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2151" pos:column="67">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name pos:line="2154" pos:column="9">ButtonMove</name><argument_list pos:line="2154" pos:column="19">( <argument><expr><call><name><name pos:line="2154" pos:column="21">Scintilla</name><op:operator pos:line="2154" pos:column="30">::</op:operator><name pos:line="2154" pos:column="32">Point</name></name><argument_list pos:line="2154" pos:column="37">( <argument><expr><call><name><name pos:line="2154" pos:column="39">static_cast</name><argument_list pos:line="2154" pos:column="50">&lt;<argument><expr><name pos:line="2154" pos:column="51">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2154" pos:column="55">( <argument><expr><name><name pos:line="2154" pos:column="57">location</name><op:operator pos:line="2154" pos:column="65">.</op:operator><name pos:line="2154" pos:column="66">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2154" pos:column="71">static_cast</name><argument_list pos:line="2154" pos:column="82">&lt;<argument><expr><name pos:line="2154" pos:column="83">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2154" pos:column="87">( <argument><expr><name><name pos:line="2154" pos:column="89">location</name><op:operator pos:line="2154" pos:column="97">.</op:operator><name pos:line="2154" pos:column="98">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return pos:line="2156" pos:column="5">return <expr><name pos:line="2156" pos:column="12">eventNotHandledErr</name></expr>;</return> <comment type="line" pos:line="2156" pos:column="32">// allow event to go to container</comment>
<cpp:endif pos:line="2157" pos:column="1">#<cpp:directive pos:line="2157" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2160" pos:column="1">OSStatus</name></type> <name><name pos:line="2160" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2160" pos:column="25">::</op:operator><name pos:line="2160" pos:column="27">MouseWheelMoved</name></name><parameter_list pos:line="2160" pos:column="42">( <param><decl><type><name pos:line="2160" pos:column="44">EventMouseWheelAxis</name></type> <name pos:line="2160" pos:column="64">axis</name></decl></param>, <param><decl><type><name pos:line="2160" pos:column="70">SInt32</name></type> <name pos:line="2160" pos:column="77">delta</name></decl></param>, <param><decl><type><name pos:line="2160" pos:column="84">UInt32</name></type> <name pos:line="2160" pos:column="91">modifiers</name></decl></param> )</parameter_list>
<block pos:line="2161" pos:column="1">{
    <if pos:line="2162" pos:column="5">if <condition pos:line="2162" pos:column="8">( <expr><name pos:line="2162" pos:column="10">axis</name> <op:operator pos:line="2162" pos:column="15">!=</op:operator> <lit:literal type="number" pos:line="2162" pos:column="18">1</lit:literal></expr> )</condition><then pos:line="2162" pos:column="21"> <return pos:line="2162" pos:column="22">return <expr><name pos:line="2162" pos:column="29">eventNotHandledErr</name></expr>;</return></then></if>

    <if pos:line="2164" pos:column="5">if <condition pos:line="2164" pos:column="8">( <expr><name pos:line="2164" pos:column="10">modifiers</name> <op:operator pos:line="2164" pos:column="20">&amp;</op:operator> <name pos:line="2164" pos:column="22">controlKey</name></expr> )</condition><then pos:line="2164" pos:column="34"> <block pos:line="2164" pos:column="35">{
        <comment type="line" pos:line="2165" pos:column="9">// Zoom! We play with the font sizes in the styles.</comment>
        <comment type="line" pos:line="2166" pos:column="9">// Number of steps/line is ignored, we just care if sizing up or down</comment>
        <if pos:line="2167" pos:column="9">if <condition pos:line="2167" pos:column="12">( <expr><name pos:line="2167" pos:column="14">delta</name> <op:operator pos:line="2167" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="2167" pos:column="22">0</lit:literal></expr> )</condition><then pos:line="2167" pos:column="25"> <block pos:line="2167" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="2168" pos:column="13">KeyCommand</name><argument_list pos:line="2168" pos:column="23">( <argument><expr><name pos:line="2168" pos:column="25">SCI_ZOOMIN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="2169" pos:column="11">else <block pos:line="2169" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="2170" pos:column="13">KeyCommand</name><argument_list pos:line="2170" pos:column="23">( <argument><expr><name pos:line="2170" pos:column="25">SCI_ZOOMOUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then> <else pos:line="2172" pos:column="7">else <block pos:line="2172" pos:column="12">{
        <comment type="line" pos:line="2173" pos:column="9">// Decide if this should be optimized?</comment>
        <expr_stmt><expr><call><name pos:line="2174" pos:column="9">ScrollTo</name><argument_list pos:line="2174" pos:column="17">( <argument><expr><name pos:line="2174" pos:column="19">topLine</name> <op:operator pos:line="2174" pos:column="27">-</op:operator> <name pos:line="2174" pos:column="29">delta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return pos:line="2177" pos:column="5">return <expr><name pos:line="2177" pos:column="12">noErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2180" pos:column="1">OSStatus</name></type> <name><name pos:line="2180" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2180" pos:column="25">::</op:operator><name pos:line="2180" pos:column="27">ContextualMenuClick</name></name><parameter_list pos:line="2180" pos:column="46">( <param><decl><type><name pos:line="2180" pos:column="48">HIPoint</name><type:modifier pos:line="2180" pos:column="55">&amp;</type:modifier></type> <name pos:line="2180" pos:column="57">location</name></decl></param> )</parameter_list>
<block pos:line="2181" pos:column="1">{
    <comment type="line" pos:line="2182" pos:column="5">// convert screen coords to window relative</comment>
    <decl_stmt><decl><type><name pos:line="2183" pos:column="5">Rect</name></type> <name pos:line="2183" pos:column="10">bounds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2184" pos:column="5">OSStatus</name></type> <name pos:line="2184" pos:column="14">err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="2185" pos:column="5">err</name> <op:operator pos:line="2185" pos:column="9">=</op:operator> <call><name pos:line="2185" pos:column="11">GetWindowBounds</name><argument_list pos:line="2185" pos:column="26">( <argument><expr><call><name><name pos:line="2185" pos:column="28">this</name><op:operator pos:line="2185" pos:column="32">-&gt;</op:operator><name pos:line="2185" pos:column="34">GetOwner</name></name><argument_list pos:line="2185" pos:column="42">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2185" pos:column="46">kWindowContentRgn</name></expr></argument>, <argument><expr><op:operator pos:line="2185" pos:column="65">&amp;</op:operator><name pos:line="2185" pos:column="66">bounds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="2186" pos:column="5">assert</name><argument_list pos:line="2186" pos:column="11">( <argument><expr><name pos:line="2186" pos:column="13">err</name> <op:operator pos:line="2186" pos:column="17">==</op:operator> <name pos:line="2186" pos:column="20">noErr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="2187" pos:column="5">location</name><op:operator pos:line="2187" pos:column="13">.</op:operator><name pos:line="2187" pos:column="14">x</name></name> <op:operator pos:line="2187" pos:column="16">+=</op:operator> <name><name pos:line="2187" pos:column="19">bounds</name><op:operator pos:line="2187" pos:column="25">.</op:operator><name pos:line="2187" pos:column="26">left</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="2188" pos:column="5">location</name><op:operator pos:line="2188" pos:column="13">.</op:operator><name pos:line="2188" pos:column="14">y</name></name> <op:operator pos:line="2188" pos:column="16">+=</op:operator> <name><name pos:line="2188" pos:column="19">bounds</name><op:operator pos:line="2188" pos:column="25">.</op:operator><name pos:line="2188" pos:column="26">top</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="2189" pos:column="5">ContextMenu</name><argument_list pos:line="2189" pos:column="16">( <argument><expr><call><name><name pos:line="2189" pos:column="18">Scintilla</name><op:operator pos:line="2189" pos:column="27">::</op:operator><name pos:line="2189" pos:column="29">Point</name></name><argument_list pos:line="2189" pos:column="34">( <argument><expr><call><name><name pos:line="2189" pos:column="36">static_cast</name><argument_list pos:line="2189" pos:column="47">&lt;<argument><expr><name pos:line="2189" pos:column="48">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2189" pos:column="52">( <argument><expr><name><name pos:line="2189" pos:column="54">location</name><op:operator pos:line="2189" pos:column="62">.</op:operator><name pos:line="2189" pos:column="63">x</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="2189" pos:column="68">static_cast</name><argument_list pos:line="2189" pos:column="79">&lt;<argument><expr><name pos:line="2189" pos:column="80">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2189" pos:column="84">( <argument><expr><name><name pos:line="2189" pos:column="86">location</name><op:operator pos:line="2189" pos:column="94">.</op:operator><name pos:line="2189" pos:column="95">y</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return pos:line="2190" pos:column="5">return <expr><name pos:line="2190" pos:column="12">noErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2193" pos:column="1">OSStatus</name></type> <name><name pos:line="2193" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2193" pos:column="25">::</op:operator><name pos:line="2193" pos:column="27">ActiveStateChanged</name></name><parameter_list pos:line="2193" pos:column="45">()</parameter_list>
<block pos:line="2194" pos:column="1">{
    <comment type="line" pos:line="2195" pos:column="5">// If the window is being deactivated, lose the focus and turn off the ticking</comment>
    <if pos:line="2196" pos:column="5">if <condition pos:line="2196" pos:column="8">( <expr><op:operator pos:line="2196" pos:column="10">!</op:operator> <call><name><name pos:line="2196" pos:column="12">this</name><op:operator pos:line="2196" pos:column="16">-&gt;</op:operator><name pos:line="2196" pos:column="18">IsActive</name></name><argument_list pos:line="2196" pos:column="26">()</argument_list></call></expr> )</condition><then pos:line="2196" pos:column="30"> <block pos:line="2196" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="2197" pos:column="9">DropCaret</name><argument_list pos:line="2197" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="2198" pos:column="9">//SetFocusState( false );</comment>
        <expr_stmt><expr><call><name pos:line="2199" pos:column="9">SetTicking</name><argument_list pos:line="2199" pos:column="19">( <argument><expr><lit:literal type="boolean" pos:line="2199" pos:column="21">false</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else pos:line="2200" pos:column="7">else <block pos:line="2200" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="2201" pos:column="9">ShowCaretAtCurrentPosition</name><argument_list pos:line="2201" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return pos:line="2203" pos:column="5">return <expr><name pos:line="2203" pos:column="12">noErr</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2206" pos:column="1">HIViewRef</name></type> <name><name pos:line="2206" pos:column="11">ScintillaMacOSX</name><op:operator pos:line="2206" pos:column="26">::</op:operator><name pos:line="2206" pos:column="28">Create</name></name><parameter_list pos:line="2206" pos:column="34">()</parameter_list>
<block pos:line="2207" pos:column="1">{
    <comment type="line" pos:line="2208" pos:column="5">// Register the HIView, if needed</comment>
    <decl_stmt><decl><type><specifier pos:line="2209" pos:column="5">static</specifier> <name pos:line="2209" pos:column="12">bool</name></type> <name pos:line="2209" pos:column="17">registered</name> <init pos:line="2209" pos:column="28">= <expr><lit:literal type="boolean" pos:line="2209" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>

    <if pos:line="2211" pos:column="5">if <condition pos:line="2211" pos:column="8">( <expr><op:operator pos:line="2211" pos:column="10">not</op:operator> <name pos:line="2211" pos:column="14">registered</name></expr> )</condition><then pos:line="2211" pos:column="26"> <block pos:line="2211" pos:column="27">{
        <expr_stmt><expr><call><name><name pos:line="2212" pos:column="9">TView</name><op:operator pos:line="2212" pos:column="14">::</op:operator><name pos:line="2212" pos:column="16">RegisterSubclass</name></name><argument_list pos:line="2212" pos:column="32">( <argument><expr><name pos:line="2212" pos:column="34">kScintillaClassID</name></expr></argument>, <argument><expr><name pos:line="2212" pos:column="53">Construct</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="2213" pos:column="9">registered</name> <op:operator pos:line="2213" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="2213" pos:column="22">true</lit:literal></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name pos:line="2216" pos:column="5">OSStatus</name></type> <name pos:line="2216" pos:column="14">err</name> <init pos:line="2216" pos:column="18">= <expr><name pos:line="2216" pos:column="20">noErr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2217" pos:column="5">EventRef</name></type> <name pos:line="2217" pos:column="14">event</name> <init pos:line="2217" pos:column="20">= <expr><call><name pos:line="2217" pos:column="22">CreateInitializationEvent</name><argument_list pos:line="2217" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="2218" pos:column="5">assert</name><argument_list pos:line="2218" pos:column="11">( <argument><expr><name pos:line="2218" pos:column="13">event</name> <op:operator pos:line="2218" pos:column="19">!=</op:operator> <name pos:line="2218" pos:column="22">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="2220" pos:column="5">HIViewRef</name></type> <name pos:line="2220" pos:column="15">control</name> <init pos:line="2220" pos:column="23">= <expr><name pos:line="2220" pos:column="25">NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="2221" pos:column="5">err</name> <op:operator pos:line="2221" pos:column="9">=</op:operator> <call><name pos:line="2221" pos:column="11">HIObjectCreate</name><argument_list pos:line="2221" pos:column="25">( <argument><expr><name pos:line="2221" pos:column="27">kScintillaClassID</name></expr></argument>, <argument><expr><name pos:line="2221" pos:column="46">event</name></expr></argument>, <argument><expr><call><name><name pos:line="2221" pos:column="53">reinterpret_cast</name><argument_list pos:line="2221" pos:column="69">&lt;<argument><expr><name pos:line="2221" pos:column="70">HIObjectRef</name><op:operator pos:line="2221" pos:column="81">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2221" pos:column="83">( <argument><expr><op:operator pos:line="2221" pos:column="85">&amp;</op:operator><name pos:line="2221" pos:column="86">control</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="2222" pos:column="5">ReleaseEvent</name><argument_list pos:line="2222" pos:column="17">( <argument><expr><name pos:line="2222" pos:column="19">event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if pos:line="2223" pos:column="5">if <condition pos:line="2223" pos:column="8">( <expr><name pos:line="2223" pos:column="10">err</name> <op:operator pos:line="2223" pos:column="14">==</op:operator> <name pos:line="2223" pos:column="17">noErr</name></expr> )</condition><then pos:line="2223" pos:column="24"> <block pos:line="2223" pos:column="25">{
        <expr_stmt><expr><call><name><name pos:line="2224" pos:column="9">Platform</name><op:operator pos:line="2224" pos:column="17">::</op:operator><name pos:line="2224" pos:column="19">DebugPrintf</name></name><argument_list pos:line="2224" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="2224" pos:column="31">"ScintillaMacOSX::Create control %08X\n"</lit:literal></expr></argument>,<argument><expr><name pos:line="2224" pos:column="72">control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="2225" pos:column="9">return <expr><name pos:line="2225" pos:column="16">control</name></expr>;</return>
    }</block></then></if>
    <return pos:line="2227" pos:column="5">return <expr><name pos:line="2227" pos:column="12">NULL</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2230" pos:column="1">OSStatus</name></type> <name><name pos:line="2230" pos:column="10">ScintillaMacOSX</name><op:operator pos:line="2230" pos:column="25">::</op:operator><name pos:line="2230" pos:column="27">Construct</name></name><parameter_list pos:line="2230" pos:column="36">( <param><decl><type><name pos:line="2230" pos:column="38">HIViewRef</name></type> <name pos:line="2230" pos:column="48">inControl</name></decl></param>, <param><decl><type><name pos:line="2230" pos:column="59">TView</name><type:modifier pos:line="2230" pos:column="64">*</type:modifier><type:modifier pos:line="2230" pos:column="65">*</type:modifier></type> <name pos:line="2230" pos:column="67">outView</name></decl></param> )</parameter_list>
<block pos:line="2231" pos:column="1">{
    <expr_stmt><expr><op:operator pos:line="2232" pos:column="5">*</op:operator><name pos:line="2232" pos:column="6">outView</name> <op:operator pos:line="2232" pos:column="14">=</op:operator> <op:operator pos:line="2232" pos:column="16">new</op:operator> <call><name pos:line="2232" pos:column="20">ScintillaMacOSX</name><argument_list pos:line="2232" pos:column="35">( <argument><expr><name pos:line="2232" pos:column="37">inControl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="2233" pos:column="5">Platform</name><op:operator pos:line="2233" pos:column="13">::</op:operator><name pos:line="2233" pos:column="15">DebugPrintf</name></name><argument_list pos:line="2233" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="2233" pos:column="27">"ScintillaMacOSX::Construct scintilla %08X\n"</lit:literal></expr></argument>,<argument><expr><op:operator pos:line="2233" pos:column="73">*</op:operator><name pos:line="2233" pos:column="74">outView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="2234" pos:column="5">if <condition pos:line="2234" pos:column="8">( <expr><op:operator pos:line="2234" pos:column="10">*</op:operator><name pos:line="2234" pos:column="11">outView</name> <op:operator pos:line="2234" pos:column="19">!=</op:operator> <name pos:line="2234" pos:column="22">NULL</name></expr> )</condition><then pos:line="2234" pos:column="28">
        <return pos:line="2235" pos:column="9">return <expr><name pos:line="2235" pos:column="16">noErr</name></expr>;</return></then>
    <else pos:line="2236" pos:column="5">else
        <return pos:line="2237" pos:column="9">return <expr><name pos:line="2237" pos:column="16">memFullErr</name></expr>;</return></else></if>  <comment type="line" pos:line="2237" pos:column="29">// could be a lie</comment>
}</block></function>

<extern pos:line="2240" pos:column="1">extern <lit:literal type="string" pos:line="2240" pos:column="8">"C"</lit:literal> <block pos:line="2240" pos:column="12">{
<function><type><name pos:line="2241" pos:column="1">HIViewRef</name></type> <name pos:line="2241" pos:column="11">scintilla_new</name><parameter_list pos:line="2241" pos:column="24">()</parameter_list> <block pos:line="2241" pos:column="27">{
    <return pos:line="2242" pos:column="5">return <expr><call><name><name pos:line="2242" pos:column="12">ScintillaMacOSX</name><op:operator pos:line="2242" pos:column="27">::</op:operator><name pos:line="2242" pos:column="29">Create</name></name><argument_list pos:line="2242" pos:column="35">()</argument_list></call></expr>;</return>
}</block></function>
}</block></extern>
</unit>
