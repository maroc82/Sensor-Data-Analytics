<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\SparseState.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file SparseState.h
 ** Hold lexer state that may change rarely.
 ** This is often per-line state such as whether a particular type of section has been entered.
 ** A state continues until it is changed.
 **/</comment>
<comment type="line" pos:line="7" pos:column="1">// Copyright 2011 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifndef</cpp:directive> <name pos:line="10" pos:column="9">SPARSESTATE_H</name></cpp:ifndef>
<cpp:define pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="11" pos:column="9">SPARSESTATE_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef</cpp:directive> <name pos:line="13" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="14" pos:column="1">namespace <name pos:line="14" pos:column="11">Scintilla</name> <block pos:line="14" pos:column="21">{
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif</cpp:directive></cpp:endif>

<template pos:line="17" pos:column="1">template <parameter_list pos:line="17" pos:column="10">&lt;<param><type><typename pos:line="17" pos:column="11">typename</typename></type> <name pos:line="17" pos:column="20">T</name></param>&gt;</parameter_list>
<class pos:line="18" pos:column="1">class <name pos:line="18" pos:column="7">SparseState</name> <block pos:line="18" pos:column="19">{<private type="default" pos:line="18" pos:column="20">
	<struct pos:line="19" pos:column="9">struct <name pos:line="19" pos:column="16">State</name> <block pos:line="19" pos:column="22">{<public type="default" pos:line="19" pos:column="23">
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int</name></type> <name pos:line="20" pos:column="21">position</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">T</name></type> <name pos:line="21" pos:column="19">value</name></decl>;</decl_stmt>
		<constructor><name pos:line="22" pos:column="17">State</name><parameter_list pos:line="22" pos:column="22">(<param><decl><type><name pos:line="22" pos:column="23">int</name></type> <name pos:line="22" pos:column="27">position_</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="38">T</name></type> <name pos:line="22" pos:column="40">value_</name></decl></param>)</parameter_list> <member_list pos:line="22" pos:column="48">: <call><name pos:line="22" pos:column="50">position</name><argument_list pos:line="22" pos:column="58">(<argument><expr><name pos:line="22" pos:column="59">position_</name></expr></argument>)</argument_list></call><op:operator pos:line="22" pos:column="69">,</op:operator> <call><name pos:line="22" pos:column="71">value</name><argument_list pos:line="22" pos:column="76">(<argument><expr><name pos:line="22" pos:column="77">value_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="22" pos:column="85">{
		}</block></constructor>
		<function><type><specifier pos:line="24" pos:column="17">inline</specifier> <name pos:line="24" pos:column="24">bool</name></type> <name pos:line="24" pos:column="29">operator&lt;</name><parameter_list pos:line="24" pos:column="38">(<param><decl><type><specifier pos:line="24" pos:column="39">const</specifier> <name pos:line="24" pos:column="45">State</name> <type:modifier pos:line="24" pos:column="51">&amp;</type:modifier></type><name pos:line="24" pos:column="52">other</name></decl></param>)</parameter_list> <specifier pos:line="24" pos:column="59">const</specifier> <block pos:line="24" pos:column="65">{
			<return pos:line="25" pos:column="25">return <expr><name pos:line="25" pos:column="32">position</name> <op:operator pos:line="25" pos:column="41">&lt;</op:operator> <name><name pos:line="25" pos:column="43">other</name><op:operator pos:line="25" pos:column="48">.</op:operator><name pos:line="25" pos:column="49">position</name></name></expr>;</return>
		}</block></function>
		<function><type><specifier pos:line="27" pos:column="17">inline</specifier> <name pos:line="27" pos:column="24">bool</name></type> <name pos:line="27" pos:column="29">operator==</name><parameter_list pos:line="27" pos:column="39">(<param><decl><type><specifier pos:line="27" pos:column="40">const</specifier> <name pos:line="27" pos:column="46">State</name> <type:modifier pos:line="27" pos:column="52">&amp;</type:modifier></type><name pos:line="27" pos:column="53">other</name></decl></param>)</parameter_list> <specifier pos:line="27" pos:column="60">const</specifier> <block pos:line="27" pos:column="66">{
			<return pos:line="28" pos:column="25">return <expr><op:operator pos:line="28" pos:column="32">(</op:operator><name pos:line="28" pos:column="33">position</name> <op:operator pos:line="28" pos:column="42">==</op:operator> <name><name pos:line="28" pos:column="45">other</name><op:operator pos:line="28" pos:column="50">.</op:operator><name pos:line="28" pos:column="51">position</name></name><op:operator pos:line="28" pos:column="59">)</op:operator> <op:operator pos:line="28" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="28" pos:column="64">(</op:operator><name pos:line="28" pos:column="65">value</name> <op:operator pos:line="28" pos:column="71">==</op:operator> <name><name pos:line="28" pos:column="74">other</name><op:operator pos:line="28" pos:column="79">.</op:operator><name pos:line="28" pos:column="80">value</name></name><op:operator pos:line="28" pos:column="85">)</op:operator></expr>;</return>
		}</block></function>
	</public>}</block>;</struct>
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">int</name></type> <name pos:line="31" pos:column="13">positionFirst</name></decl>;</decl_stmt>
	<typedef pos:line="32" pos:column="9">typedef <type><name><name pos:line="32" pos:column="17">std</name><op:operator pos:line="32" pos:column="20">::</op:operator><name><name pos:line="32" pos:column="22">vector</name><argument_list pos:line="32" pos:column="28">&lt;<argument><expr><name pos:line="32" pos:column="29">State</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="32" pos:column="36">stateVector</name>;</typedef>
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">stateVector</name></type> <name pos:line="33" pos:column="21">states</name></decl>;</decl_stmt>

	<function><type><typename pos:line="35" pos:column="9">typename</typename> <name><name pos:line="35" pos:column="18">stateVector</name><op:operator pos:line="35" pos:column="29">::</op:operator><name pos:line="35" pos:column="31">iterator</name></name></type> <name pos:line="35" pos:column="40">Find</name><parameter_list pos:line="35" pos:column="44">(<param><decl><type><name pos:line="35" pos:column="45">int</name></type> <name pos:line="35" pos:column="49">position</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="59">{
		<decl_stmt><decl><type><name pos:line="36" pos:column="17">State</name></type> <name pos:line="36" pos:column="23">searchValue</name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">position</name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="45">T</name><argument_list pos:line="36" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<return pos:line="37" pos:column="17">return <expr><call><name><name pos:line="37" pos:column="24">std</name><op:operator pos:line="37" pos:column="27">::</op:operator><name pos:line="37" pos:column="29">lower_bound</name></name><argument_list pos:line="37" pos:column="40">(<argument><expr><call><name><name pos:line="37" pos:column="41">states</name><op:operator pos:line="37" pos:column="47">.</op:operator><name pos:line="37" pos:column="48">begin</name></name><argument_list pos:line="37" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="57">states</name><op:operator pos:line="37" pos:column="63">.</op:operator><name pos:line="37" pos:column="64">end</name></name><argument_list pos:line="37" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="37" pos:column="71">searchValue</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

</private><public pos:line="40" pos:column="1">public:
	<constructor><name pos:line="41" pos:column="9">SparseState</name><parameter_list pos:line="41" pos:column="20">(<param><decl><type><name pos:line="41" pos:column="21">int</name></type> <name pos:line="41" pos:column="25">positionFirst_</name><init pos:line="41" pos:column="39">=<expr><op:operator pos:line="41" pos:column="40">-</op:operator><lit:literal type="number" pos:line="41" pos:column="41">1</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="41" pos:column="44">{
		<expr_stmt><expr><name pos:line="42" pos:column="17">positionFirst</name> <op:operator pos:line="42" pos:column="31">=</op:operator> <name pos:line="42" pos:column="33">positionFirst_</name></expr>;</expr_stmt>
	}</block></constructor>
	<function><type><name pos:line="44" pos:column="9">void</name></type> <name pos:line="44" pos:column="14">Set</name><parameter_list pos:line="44" pos:column="17">(<param><decl><type><name pos:line="44" pos:column="18">int</name></type> <name pos:line="44" pos:column="22">position</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="32">T</name></type> <name pos:line="44" pos:column="34">value</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">Delete</name><argument_list pos:line="45" pos:column="23">(<argument><expr><name pos:line="45" pos:column="24">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><call><name><name pos:line="46" pos:column="21">states</name><op:operator pos:line="46" pos:column="27">.</op:operator><name pos:line="46" pos:column="28">empty</name></name><argument_list pos:line="46" pos:column="33">()</argument_list></call> <op:operator pos:line="46" pos:column="36">||</op:operator> <op:operator pos:line="46" pos:column="39">(</op:operator><name pos:line="46" pos:column="40">value</name> <op:operator pos:line="46" pos:column="46">!=</op:operator> <name><name pos:line="46" pos:column="49">states</name><index pos:line="46" pos:column="55">[<expr><call><name><name pos:line="46" pos:column="56">states</name><op:operator pos:line="46" pos:column="62">.</op:operator><name pos:line="46" pos:column="63">size</name></name><argument_list pos:line="46" pos:column="67">()</argument_list></call><op:operator pos:line="46" pos:column="69">-</op:operator><lit:literal type="number" pos:line="46" pos:column="70">1</lit:literal></expr>]</index></name><op:operator pos:line="46" pos:column="72">.</op:operator><name pos:line="46" pos:column="73">value</name><op:operator pos:line="46" pos:column="78">)</op:operator></expr>)</condition><then pos:line="46" pos:column="80"> <block pos:line="46" pos:column="81">{
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">states</name><op:operator pos:line="47" pos:column="31">.</op:operator><name pos:line="47" pos:column="32">push_back</name></name><argument_list pos:line="47" pos:column="41">(<argument><expr><call><name pos:line="47" pos:column="42">State</name><argument_list pos:line="47" pos:column="47">(<argument><expr><name pos:line="47" pos:column="48">position</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="58">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><type><name pos:line="50" pos:column="9">T</name></type> <name pos:line="50" pos:column="11">ValueAt</name><parameter_list pos:line="50" pos:column="18">(<param><decl><type><name pos:line="50" pos:column="19">int</name></type> <name pos:line="50" pos:column="23">position</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="33">{
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><call><name><name pos:line="51" pos:column="21">states</name><op:operator pos:line="51" pos:column="27">.</op:operator><name pos:line="51" pos:column="28">empty</name></name><argument_list pos:line="51" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="51" pos:column="36">
			<return pos:line="52" pos:column="25">return <expr><call><name pos:line="52" pos:column="32">T</name><argument_list pos:line="52" pos:column="33">()</argument_list></call></expr>;</return></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">position</name> <op:operator pos:line="53" pos:column="30">&lt;</op:operator> <name><name pos:line="53" pos:column="32">states</name><index pos:line="53" pos:column="38">[<expr><lit:literal type="number" pos:line="53" pos:column="39">0</lit:literal></expr>]</index></name><op:operator pos:line="53" pos:column="41">.</op:operator><name pos:line="53" pos:column="42">position</name></expr>)</condition><then pos:line="53" pos:column="51">
			<return pos:line="54" pos:column="25">return <expr><call><name pos:line="54" pos:column="32">T</name><argument_list pos:line="54" pos:column="33">()</argument_list></call></expr>;</return></then></if>
		<decl_stmt><decl><type><typename pos:line="55" pos:column="17">typename</typename> <name><name pos:line="55" pos:column="26">stateVector</name><op:operator pos:line="55" pos:column="37">::</op:operator><name pos:line="55" pos:column="39">iterator</name></name></type> <name pos:line="55" pos:column="48">low</name> <init pos:line="55" pos:column="52">= <expr><call><name pos:line="55" pos:column="54">Find</name><argument_list pos:line="55" pos:column="58">(<argument><expr><name pos:line="55" pos:column="59">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">low</name> <op:operator pos:line="56" pos:column="25">==</op:operator> <call><name><name pos:line="56" pos:column="28">states</name><op:operator pos:line="56" pos:column="34">.</op:operator><name pos:line="56" pos:column="35">end</name></name><argument_list pos:line="56" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="56" pos:column="41"> <block pos:line="56" pos:column="42">{
			<return pos:line="57" pos:column="25">return <expr><name><name pos:line="57" pos:column="32">states</name><index pos:line="57" pos:column="38">[<expr><call><name><name pos:line="57" pos:column="39">states</name><op:operator pos:line="57" pos:column="45">.</op:operator><name pos:line="57" pos:column="46">size</name></name><argument_list pos:line="57" pos:column="50">()</argument_list></call><op:operator pos:line="57" pos:column="52">-</op:operator><lit:literal type="number" pos:line="57" pos:column="53">1</lit:literal></expr>]</index></name><op:operator pos:line="57" pos:column="55">.</op:operator><name pos:line="57" pos:column="56">value</name></expr>;</return>
		}</block></then> <else pos:line="58" pos:column="19">else <block pos:line="58" pos:column="24">{
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name><name pos:line="59" pos:column="29">low</name><op:operator pos:line="59" pos:column="32">-&gt;</op:operator><name pos:line="59" pos:column="34">position</name></name> <op:operator pos:line="59" pos:column="43">&gt;</op:operator> <name pos:line="59" pos:column="45">position</name></expr>)</condition><then pos:line="59" pos:column="54"> <block pos:line="59" pos:column="55">{
				<expr_stmt><expr><op:operator pos:line="60" pos:column="33">--</op:operator><name pos:line="60" pos:column="35">low</name></expr>;</expr_stmt>
			}</block></then></if>
			<return pos:line="62" pos:column="25">return <expr><name><name pos:line="62" pos:column="32">low</name><op:operator pos:line="62" pos:column="35">-&gt;</op:operator><name pos:line="62" pos:column="37">value</name></name></expr>;</return>
		}</block></else></if>
	}</block></function>
	<function><type><name pos:line="65" pos:column="9">bool</name></type> <name pos:line="65" pos:column="14">Delete</name><parameter_list pos:line="65" pos:column="20">(<param><decl><type><name pos:line="65" pos:column="21">int</name></type> <name pos:line="65" pos:column="25">position</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="35">{
		<decl_stmt><decl><type><typename pos:line="66" pos:column="17">typename</typename> <name><name pos:line="66" pos:column="26">stateVector</name><op:operator pos:line="66" pos:column="37">::</op:operator><name pos:line="66" pos:column="39">iterator</name></name></type> <name pos:line="66" pos:column="48">low</name> <init pos:line="66" pos:column="52">= <expr><call><name pos:line="66" pos:column="54">Find</name><argument_list pos:line="66" pos:column="58">(<argument><expr><name pos:line="66" pos:column="59">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">low</name> <op:operator pos:line="67" pos:column="25">!=</op:operator> <call><name><name pos:line="67" pos:column="28">states</name><op:operator pos:line="67" pos:column="34">.</op:operator><name pos:line="67" pos:column="35">end</name></name><argument_list pos:line="67" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="67" pos:column="41"> <block pos:line="67" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="68" pos:column="25">states</name><op:operator pos:line="68" pos:column="31">.</op:operator><name pos:line="68" pos:column="32">erase</name></name><argument_list pos:line="68" pos:column="37">(<argument><expr><name pos:line="68" pos:column="38">low</name></expr></argument>, <argument><expr><call><name><name pos:line="68" pos:column="43">states</name><op:operator pos:line="68" pos:column="49">.</op:operator><name pos:line="68" pos:column="50">end</name></name><argument_list pos:line="68" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="69" pos:column="25">return <expr><lit:literal type="boolean" pos:line="69" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
		<return pos:line="71" pos:column="17">return <expr><lit:literal type="boolean" pos:line="71" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
	<function><type><name pos:line="73" pos:column="9">size_t</name></type> <name pos:line="73" pos:column="16">size</name><parameter_list pos:line="73" pos:column="20">()</parameter_list> <specifier pos:line="73" pos:column="23">const</specifier> <block pos:line="73" pos:column="29">{
		<return pos:line="74" pos:column="17">return <expr><call><name><name pos:line="74" pos:column="24">states</name><op:operator pos:line="74" pos:column="30">.</op:operator><name pos:line="74" pos:column="31">size</name></name><argument_list pos:line="74" pos:column="35">()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="77" pos:column="9">// Returns true if Merge caused a significant change</comment>
	<function><type><name pos:line="78" pos:column="9">bool</name></type> <name pos:line="78" pos:column="14">Merge</name><parameter_list pos:line="78" pos:column="19">(<param><decl><type><specifier pos:line="78" pos:column="20">const</specifier> <name><name pos:line="78" pos:column="26">SparseState</name><argument_list pos:line="78" pos:column="37">&lt;<argument><expr><name pos:line="78" pos:column="38">T</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="78" pos:column="41">&amp;</type:modifier></type><name pos:line="78" pos:column="42">other</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="49">int</name></type> <name pos:line="78" pos:column="53">ignoreAfter</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="66">{
		<comment type="line" pos:line="79" pos:column="17">// Changes caused beyond ignoreAfter are not significant</comment>
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">Delete</name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">ignoreAfter</name><op:operator pos:line="80" pos:column="35">+</op:operator><lit:literal type="number" pos:line="80" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="82" pos:column="17">bool</name></type> <name pos:line="82" pos:column="22">different</name> <init pos:line="82" pos:column="32">= <expr><lit:literal type="boolean" pos:line="82" pos:column="34">true</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="83" pos:column="17">bool</name></type> <name pos:line="83" pos:column="22">changed</name> <init pos:line="83" pos:column="30">= <expr><lit:literal type="boolean" pos:line="83" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><typename pos:line="84" pos:column="17">typename</typename> <name><name pos:line="84" pos:column="26">stateVector</name><op:operator pos:line="84" pos:column="37">::</op:operator><name pos:line="84" pos:column="39">iterator</name></name></type> <name pos:line="84" pos:column="48">low</name> <init pos:line="84" pos:column="52">= <expr><call><name pos:line="84" pos:column="54">Find</name><argument_list pos:line="84" pos:column="58">(<argument><expr><name><name pos:line="84" pos:column="59">other</name><op:operator pos:line="84" pos:column="64">.</op:operator><name pos:line="84" pos:column="65">positionFirst</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><call><name><name pos:line="85" pos:column="21">static_cast</name><argument_list pos:line="85" pos:column="32">&lt;<argument><expr><name pos:line="85" pos:column="33">size_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="85" pos:column="40">(<argument><expr><call><name><name pos:line="85" pos:column="41">states</name><op:operator pos:line="85" pos:column="47">.</op:operator><name pos:line="85" pos:column="48">end</name></name><argument_list pos:line="85" pos:column="51">()</argument_list></call> <op:operator pos:line="85" pos:column="54">-</op:operator> <name pos:line="85" pos:column="56">low</name></expr></argument>)</argument_list></call> <op:operator pos:line="85" pos:column="61">==</op:operator> <call><name><name pos:line="85" pos:column="64">other</name><op:operator pos:line="85" pos:column="69">.</op:operator><name pos:line="85" pos:column="70">states</name><op:operator pos:line="85" pos:column="76">.</op:operator><name pos:line="85" pos:column="77">size</name></name><argument_list pos:line="85" pos:column="81">()</argument_list></call></expr>)</condition><then pos:line="85" pos:column="84"> <block pos:line="85" pos:column="85">{
			<comment type="line" pos:line="86" pos:column="25">// Same number in other as after positionFirst in this</comment>
			<expr_stmt><expr><name pos:line="87" pos:column="25">different</name> <op:operator pos:line="87" pos:column="35">=</op:operator> <op:operator pos:line="87" pos:column="37">!</op:operator><call><name><name pos:line="87" pos:column="38">std</name><op:operator pos:line="87" pos:column="41">::</op:operator><name pos:line="87" pos:column="43">equal</name></name><argument_list pos:line="87" pos:column="48">(<argument><expr><name pos:line="87" pos:column="49">low</name></expr></argument>, <argument><expr><call><name><name pos:line="87" pos:column="54">states</name><op:operator pos:line="87" pos:column="60">.</op:operator><name pos:line="87" pos:column="61">end</name></name><argument_list pos:line="87" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="87" pos:column="68">other</name><op:operator pos:line="87" pos:column="73">.</op:operator><name pos:line="87" pos:column="74">states</name><op:operator pos:line="87" pos:column="80">.</op:operator><name pos:line="87" pos:column="81">begin</name></name><argument_list pos:line="87" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">different</name></expr>)</condition><then pos:line="89" pos:column="31"> <block pos:line="89" pos:column="32">{
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><name pos:line="90" pos:column="29">low</name> <op:operator pos:line="90" pos:column="33">!=</op:operator> <call><name><name pos:line="90" pos:column="36">states</name><op:operator pos:line="90" pos:column="42">.</op:operator><name pos:line="90" pos:column="43">end</name></name><argument_list pos:line="90" pos:column="46">()</argument_list></call></expr>)</condition><then pos:line="90" pos:column="49"> <block pos:line="90" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">states</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">erase</name></name><argument_list pos:line="91" pos:column="45">(<argument><expr><name pos:line="91" pos:column="46">low</name></expr></argument>, <argument><expr><call><name><name pos:line="91" pos:column="51">states</name><op:operator pos:line="91" pos:column="57">.</op:operator><name pos:line="91" pos:column="58">end</name></name><argument_list pos:line="91" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="92" pos:column="33">changed</name> <op:operator pos:line="92" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="92" pos:column="43">true</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><typename pos:line="94" pos:column="25">typename</typename> <name><name pos:line="94" pos:column="34">stateVector</name><op:operator pos:line="94" pos:column="45">::</op:operator><name pos:line="94" pos:column="47">const_iterator</name></name></type> <name pos:line="94" pos:column="62">startOther</name> <init pos:line="94" pos:column="73">= <expr><call><name><name pos:line="94" pos:column="75">other</name><op:operator pos:line="94" pos:column="80">.</op:operator><name pos:line="94" pos:column="81">states</name><op:operator pos:line="94" pos:column="87">.</op:operator><name pos:line="94" pos:column="88">begin</name></name><argument_list pos:line="94" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><op:operator pos:line="95" pos:column="29">!</op:operator><call><name><name pos:line="95" pos:column="30">states</name><op:operator pos:line="95" pos:column="36">.</op:operator><name pos:line="95" pos:column="37">empty</name></name><argument_list pos:line="95" pos:column="42">()</argument_list></call> <op:operator pos:line="95" pos:column="45">&amp;&amp;</op:operator> <call><name><name pos:line="95" pos:column="48">states</name><op:operator pos:line="95" pos:column="54">.</op:operator><name pos:line="95" pos:column="55">back</name></name><argument_list pos:line="95" pos:column="59">()</argument_list></call><op:operator pos:line="95" pos:column="61">.</op:operator><name pos:line="95" pos:column="62">value</name> <op:operator pos:line="95" pos:column="68">==</op:operator> <name><name pos:line="95" pos:column="71">startOther</name><op:operator pos:line="95" pos:column="81">-&gt;</op:operator><name pos:line="95" pos:column="83">value</name></name></expr>)</condition><then pos:line="95" pos:column="89">
				<expr_stmt><expr><op:operator pos:line="96" pos:column="33">++</op:operator><name pos:line="96" pos:column="35">startOther</name></expr>;</expr_stmt></then></if>
			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><name pos:line="97" pos:column="29">startOther</name> <op:operator pos:line="97" pos:column="40">!=</op:operator> <call><name><name pos:line="97" pos:column="43">other</name><op:operator pos:line="97" pos:column="48">.</op:operator><name pos:line="97" pos:column="49">states</name><op:operator pos:line="97" pos:column="55">.</op:operator><name pos:line="97" pos:column="56">end</name></name><argument_list pos:line="97" pos:column="59">()</argument_list></call></expr>)</condition><then pos:line="97" pos:column="62"> <block pos:line="97" pos:column="63">{
				<expr_stmt><expr><call><name><name pos:line="98" pos:column="33">states</name><op:operator pos:line="98" pos:column="39">.</op:operator><name pos:line="98" pos:column="40">insert</name></name><argument_list pos:line="98" pos:column="46">(<argument><expr><call><name><name pos:line="98" pos:column="47">states</name><op:operator pos:line="98" pos:column="53">.</op:operator><name pos:line="98" pos:column="54">end</name></name><argument_list pos:line="98" pos:column="57">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="98" pos:column="61">startOther</name></expr></argument>, <argument><expr><call><name><name pos:line="98" pos:column="73">other</name><op:operator pos:line="98" pos:column="78">.</op:operator><name pos:line="98" pos:column="79">states</name><op:operator pos:line="98" pos:column="85">.</op:operator><name pos:line="98" pos:column="86">end</name></name><argument_list pos:line="98" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="99" pos:column="33">changed</name> <op:operator pos:line="99" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="99" pos:column="43">true</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<return pos:line="102" pos:column="17">return <expr><name pos:line="102" pos:column="24">changed</name></expr>;</return>
	}</block></function>
</public>}</block>;</class></template>

<cpp:ifdef pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">ifdef</cpp:directive> <name pos:line="106" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
