<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexBash.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexBash.cxx
 ** Lexer for Bash.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2004-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// Adapted from LexPerl by Kein-Hong Man 2004</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">HERE_DELIM_MAX</name></cpp:macro>			<cpp:value pos:line="30" pos:column="41">256</cpp:value></cpp:define>

<comment type="line" pos:line="32" pos:column="1">// define this if you want 'invalid octals' to be marked as errors</comment>
<comment type="line" pos:line="33" pos:column="1">// usually, this is not a good idea, permissive lexing is better</comment>
<cpp:undef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">undef</cpp:directive> <name pos:line="34" pos:column="8">PEDANTIC_OCTAL</name></cpp:undef>

<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">BASH_BASE_ERROR</name></cpp:macro>			<cpp:value pos:line="36" pos:column="41">65</cpp:value></cpp:define>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">BASH_BASE_DECIMAL</name></cpp:macro>		<cpp:value pos:line="37" pos:column="41">66</cpp:value></cpp:define>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">BASH_BASE_HEX</name></cpp:macro>			<cpp:value pos:line="38" pos:column="41">67</cpp:value></cpp:define>
<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef</cpp:directive> <name pos:line="39" pos:column="8">PEDANTIC_OCTAL</name></cpp:ifdef>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">BASH_BASE_OCTAL</name></cpp:macro>			<cpp:value pos:line="40" pos:column="41">68</cpp:value></cpp:define>
<cpp:define pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="41" pos:column="9">BASH_BASE_OCTAL_ERROR</name></cpp:macro>	<cpp:value pos:line="41" pos:column="33">69</cpp:value></cpp:define>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="44" pos:column="1">// state constants for parts of a bash command segment</comment>
<cpp:define pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="45" pos:column="9">BASH_CMD_BODY</name></cpp:macro>			<cpp:value pos:line="45" pos:column="41">0</cpp:value></cpp:define>
<cpp:define pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="46" pos:column="9">BASH_CMD_START</name></cpp:macro>			<cpp:value pos:line="46" pos:column="41">1</cpp:value></cpp:define>
<cpp:define pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="47" pos:column="9">BASH_CMD_WORD</name></cpp:macro>			<cpp:value pos:line="47" pos:column="41">2</cpp:value></cpp:define>
<cpp:define pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="48" pos:column="9">BASH_CMD_TEST</name></cpp:macro>			<cpp:value pos:line="48" pos:column="41">3</cpp:value></cpp:define>
<cpp:define pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="49" pos:column="9">BASH_CMD_ARITH</name></cpp:macro>			<cpp:value pos:line="49" pos:column="41">4</cpp:value></cpp:define>
<cpp:define pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="50" pos:column="9">BASH_CMD_DELIM</name></cpp:macro>			<cpp:value pos:line="50" pos:column="41">5</cpp:value></cpp:define>

<function><type><specifier pos:line="52" pos:column="1">static</specifier> <specifier pos:line="52" pos:column="8">inline</specifier> <name pos:line="52" pos:column="15">int</name></type> <name pos:line="52" pos:column="19">translateBashDigit</name><parameter_list pos:line="52" pos:column="37">(<param><decl><type><name pos:line="52" pos:column="38">int</name></type> <name pos:line="52" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="46">{
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">ch</name> <op:operator pos:line="53" pos:column="16">&gt;=</op:operator> <lit:literal type="char" pos:line="53" pos:column="19">'0'</lit:literal> <op:operator pos:line="53" pos:column="23">&amp;&amp;</op:operator> <name pos:line="53" pos:column="26">ch</name> <op:operator pos:line="53" pos:column="29">&lt;=</op:operator> <lit:literal type="char" pos:line="53" pos:column="32">'9'</lit:literal></expr>)</condition><then pos:line="53" pos:column="36"> <block pos:line="53" pos:column="37">{
		<return pos:line="54" pos:column="17">return <expr><name pos:line="54" pos:column="24">ch</name> <op:operator pos:line="54" pos:column="27">-</op:operator> <lit:literal type="char" pos:line="54" pos:column="29">'0'</lit:literal></expr>;</return>
	}</block></then> <else pos:line="55" pos:column="11">else <if pos:line="55" pos:column="16">if <condition pos:line="55" pos:column="19">(<expr><name pos:line="55" pos:column="20">ch</name> <op:operator pos:line="55" pos:column="23">&gt;=</op:operator> <lit:literal type="char" pos:line="55" pos:column="26">'a'</lit:literal> <op:operator pos:line="55" pos:column="30">&amp;&amp;</op:operator> <name pos:line="55" pos:column="33">ch</name> <op:operator pos:line="55" pos:column="36">&lt;=</op:operator> <lit:literal type="char" pos:line="55" pos:column="39">'z'</lit:literal></expr>)</condition><then pos:line="55" pos:column="43"> <block pos:line="55" pos:column="44">{
		<return pos:line="56" pos:column="17">return <expr><name pos:line="56" pos:column="24">ch</name> <op:operator pos:line="56" pos:column="27">-</op:operator> <lit:literal type="char" pos:line="56" pos:column="29">'a'</lit:literal> <op:operator pos:line="56" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="56" pos:column="35">10</lit:literal></expr>;</return>
	}</block></then> <else pos:line="57" pos:column="11">else <if pos:line="57" pos:column="16">if <condition pos:line="57" pos:column="19">(<expr><name pos:line="57" pos:column="20">ch</name> <op:operator pos:line="57" pos:column="23">&gt;=</op:operator> <lit:literal type="char" pos:line="57" pos:column="26">'A'</lit:literal> <op:operator pos:line="57" pos:column="30">&amp;&amp;</op:operator> <name pos:line="57" pos:column="33">ch</name> <op:operator pos:line="57" pos:column="36">&lt;=</op:operator> <lit:literal type="char" pos:line="57" pos:column="39">'Z'</lit:literal></expr>)</condition><then pos:line="57" pos:column="43"> <block pos:line="57" pos:column="44">{
		<return pos:line="58" pos:column="17">return <expr><name pos:line="58" pos:column="24">ch</name> <op:operator pos:line="58" pos:column="27">-</op:operator> <lit:literal type="char" pos:line="58" pos:column="29">'A'</lit:literal> <op:operator pos:line="58" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="58" pos:column="35">36</lit:literal></expr>;</return>
	}</block></then> <else pos:line="59" pos:column="11">else <if pos:line="59" pos:column="16">if <condition pos:line="59" pos:column="19">(<expr><name pos:line="59" pos:column="20">ch</name> <op:operator pos:line="59" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="26">'@'</lit:literal></expr>)</condition><then pos:line="59" pos:column="30"> <block pos:line="59" pos:column="31">{
		<return pos:line="60" pos:column="17">return <expr><lit:literal type="number" pos:line="60" pos:column="24">62</lit:literal></expr>;</return>
	}</block></then> <else pos:line="61" pos:column="11">else <if pos:line="61" pos:column="16">if <condition pos:line="61" pos:column="19">(<expr><name pos:line="61" pos:column="20">ch</name> <op:operator pos:line="61" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="26">'_'</lit:literal></expr>)</condition><then pos:line="61" pos:column="30"> <block pos:line="61" pos:column="31">{
		<return pos:line="62" pos:column="17">return <expr><lit:literal type="number" pos:line="62" pos:column="24">63</lit:literal></expr>;</return>
	}</block></then></if></else></if></else></if></else></if></else></if>
	<return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">BASH_BASE_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="67" pos:column="1">static</specifier> <specifier pos:line="67" pos:column="8">inline</specifier> <name pos:line="67" pos:column="15">int</name></type> <name pos:line="67" pos:column="19">getBashNumberBase</name><parameter_list pos:line="67" pos:column="36">(<param><decl><type><name pos:line="67" pos:column="37">char</name> <type:modifier pos:line="67" pos:column="42">*</type:modifier></type><name pos:line="67" pos:column="43">s</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="46">{
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">int</name></type> <name pos:line="68" pos:column="13">i</name> <init pos:line="68" pos:column="15">= <expr><lit:literal type="number" pos:line="68" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">int</name></type> <name pos:line="69" pos:column="13">base</name> <init pos:line="69" pos:column="18">= <expr><lit:literal type="number" pos:line="69" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="70" pos:column="9">while <condition pos:line="70" pos:column="15">(<expr><op:operator pos:line="70" pos:column="16">*</op:operator><name pos:line="70" pos:column="17">s</name></expr>)</condition> <block pos:line="70" pos:column="20">{
		<expr_stmt><expr><name pos:line="71" pos:column="17">base</name> <op:operator pos:line="71" pos:column="22">=</op:operator> <name pos:line="71" pos:column="24">base</name> <op:operator pos:line="71" pos:column="29">*</op:operator> <lit:literal type="number" pos:line="71" pos:column="31">10</lit:literal> <op:operator pos:line="71" pos:column="34">+</op:operator> <op:operator pos:line="71" pos:column="36">(</op:operator><op:operator pos:line="71" pos:column="37">*</op:operator><name pos:line="71" pos:column="38">s</name><op:operator pos:line="71" pos:column="39">++</op:operator> <op:operator pos:line="71" pos:column="42">-</op:operator> <lit:literal type="char" pos:line="71" pos:column="44">'0'</lit:literal><op:operator pos:line="71" pos:column="47">)</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="72" pos:column="17">i</name><op:operator pos:line="72" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">base</name> <op:operator pos:line="74" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="74" pos:column="20">64</lit:literal> <op:operator pos:line="74" pos:column="23">||</op:operator> <name pos:line="74" pos:column="26">i</name> <op:operator pos:line="74" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="74" pos:column="30">2</lit:literal></expr>)</condition><then pos:line="74" pos:column="32"> <block pos:line="74" pos:column="33">{
		<return pos:line="75" pos:column="17">return <expr><name pos:line="75" pos:column="24">BASH_BASE_ERROR</name></expr>;</return>
	}</block></then></if>
	<return pos:line="77" pos:column="9">return <expr><name pos:line="77" pos:column="16">base</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="80" pos:column="1">static</specifier> <name pos:line="80" pos:column="8">int</name></type> <name pos:line="80" pos:column="12">opposite</name><parameter_list pos:line="80" pos:column="20">(<param><decl><type><name pos:line="80" pos:column="21">int</name></type> <name pos:line="80" pos:column="25">ch</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="29">{
	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">ch</name> <op:operator pos:line="81" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="19">'('</lit:literal></expr>)</condition><then pos:line="81" pos:column="23"> <return pos:line="81" pos:column="24">return <expr><lit:literal type="char" pos:line="81" pos:column="31">')'</lit:literal></expr>;</return></then></if>
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">ch</name> <op:operator pos:line="82" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="82" pos:column="19">'['</lit:literal></expr>)</condition><then pos:line="82" pos:column="23"> <return pos:line="82" pos:column="24">return <expr><lit:literal type="char" pos:line="82" pos:column="31">']'</lit:literal></expr>;</return></then></if>
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">ch</name> <op:operator pos:line="83" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="83" pos:column="19">'{'</lit:literal></expr>)</condition><then pos:line="83" pos:column="23"> <return pos:line="83" pos:column="24">return <expr><lit:literal type="char" pos:line="83" pos:column="31">'}'</lit:literal></expr>;</return></then></if>
	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">ch</name> <op:operator pos:line="84" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="19">'&lt;'</lit:literal></expr>)</condition><then pos:line="84" pos:column="23"> <return pos:line="84" pos:column="24">return <expr><lit:literal type="char" pos:line="84" pos:column="31">'&gt;'</lit:literal></expr>;</return></then></if>
	<return pos:line="85" pos:column="9">return <expr><name pos:line="85" pos:column="16">ch</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="88" pos:column="1">static</specifier> <name pos:line="88" pos:column="8">void</name></type> <name pos:line="88" pos:column="13">ColouriseBashDoc</name><parameter_list pos:line="88" pos:column="29">(<param><decl><type><name pos:line="88" pos:column="30">unsigned</name> <name pos:line="88" pos:column="39">int</name></type> <name pos:line="88" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="53">int</name></type> <name pos:line="88" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="65">int</name></type> <name pos:line="88" pos:column="69">initStyle</name></decl></param>,
							 <param><decl><type><name pos:line="89" pos:column="58">WordList</name> <type:modifier pos:line="89" pos:column="67">*</type:modifier></type><name><name pos:line="89" pos:column="68">keywordlists</name><index pos:line="89" pos:column="80">[]</index></name></decl></param>, <param><decl><type><name pos:line="89" pos:column="84">Accessor</name> <type:modifier pos:line="89" pos:column="93">&amp;</type:modifier></type><name pos:line="89" pos:column="94">styler</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="102">{

	<decl_stmt><decl><type><name pos:line="91" pos:column="9">WordList</name> <type:modifier pos:line="91" pos:column="18">&amp;</type:modifier></type><name pos:line="91" pos:column="19">keywords</name> <init pos:line="91" pos:column="28">= <expr><op:operator pos:line="91" pos:column="30">*</op:operator><name><name pos:line="91" pos:column="31">keywordlists</name><index pos:line="91" pos:column="43">[<expr><lit:literal type="number" pos:line="91" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="92" pos:column="9">WordList</name></type> <name pos:line="92" pos:column="18">cmdDelimiter</name></decl><op:operator pos:line="92" pos:column="30">,</op:operator> <decl><type ref="prev"/><name pos:line="92" pos:column="32">bashStruct</name></decl><op:operator pos:line="92" pos:column="42">,</op:operator> <decl><type ref="prev"/><name pos:line="92" pos:column="44">bashStruct_in</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="93" pos:column="9">cmdDelimiter</name><op:operator pos:line="93" pos:column="21">.</op:operator><name pos:line="93" pos:column="22">Set</name></name><argument_list pos:line="93" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="26">"| || |&amp; &amp; &amp;&amp; ; ;; ( ) { }"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="94" pos:column="9">bashStruct</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">Set</name></name><argument_list pos:line="94" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="24">"if elif fi while until else then do done esac eval"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="95" pos:column="9">bashStruct_in</name><op:operator pos:line="95" pos:column="22">.</op:operator><name pos:line="95" pos:column="23">Set</name></name><argument_list pos:line="95" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="27">"for case select"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="97" pos:column="9">CharacterSet</name></type> <name pos:line="97" pos:column="22">setWordStart</name><argument_list pos:line="97" pos:column="34">(<argument><expr><name><name pos:line="97" pos:column="35">CharacterSet</name><op:operator pos:line="97" pos:column="47">::</op:operator><name pos:line="97" pos:column="49">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="59">"_"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<comment type="line" pos:line="98" pos:column="9">// note that [+-] are often parts of identifiers in shell scripts</comment>
	<decl_stmt><decl><type><name pos:line="99" pos:column="9">CharacterSet</name></type> <name pos:line="99" pos:column="22">setWord</name><argument_list pos:line="99" pos:column="29">(<argument><expr><name><name pos:line="99" pos:column="30">CharacterSet</name><op:operator pos:line="99" pos:column="42">::</op:operator><name pos:line="99" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="99" pos:column="57">"._+-"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="100" pos:column="9">CharacterSet</name></type> <name pos:line="100" pos:column="22">setBashOperator</name><argument_list pos:line="100" pos:column="37">(<argument><expr><name><name pos:line="100" pos:column="38">CharacterSet</name><op:operator pos:line="100" pos:column="50">::</op:operator><name pos:line="100" pos:column="52">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="61">"^&amp;%()-+=|{}[]:;&gt;,*/&lt;?!.~@"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="101" pos:column="9">CharacterSet</name></type> <name pos:line="101" pos:column="22">setSingleCharOp</name><argument_list pos:line="101" pos:column="37">(<argument><expr><name><name pos:line="101" pos:column="38">CharacterSet</name><op:operator pos:line="101" pos:column="50">::</op:operator><name pos:line="101" pos:column="52">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="61">"rwxoRWXOezsfdlpSbctugkTBMACahGLNn"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="102" pos:column="9">CharacterSet</name></type> <name pos:line="102" pos:column="22">setParam</name><argument_list pos:line="102" pos:column="30">(<argument><expr><name><name pos:line="102" pos:column="31">CharacterSet</name><op:operator pos:line="102" pos:column="43">::</op:operator><name pos:line="102" pos:column="45">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="58">"$_"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="103" pos:column="9">CharacterSet</name></type> <name pos:line="103" pos:column="22">setHereDoc</name><argument_list pos:line="103" pos:column="32">(<argument><expr><name><name pos:line="103" pos:column="33">CharacterSet</name><op:operator pos:line="103" pos:column="45">::</op:operator><name pos:line="103" pos:column="47">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="57">"_\\-+!"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="104" pos:column="9">CharacterSet</name></type> <name pos:line="104" pos:column="22">setHereDoc2</name><argument_list pos:line="104" pos:column="33">(<argument><expr><name><name pos:line="104" pos:column="34">CharacterSet</name><op:operator pos:line="104" pos:column="46">::</op:operator><name pos:line="104" pos:column="48">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="61">"_-+!"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="105" pos:column="9">CharacterSet</name></type> <name pos:line="105" pos:column="22">setLeftShift</name><argument_list pos:line="105" pos:column="34">(<argument><expr><name><name pos:line="105" pos:column="35">CharacterSet</name><op:operator pos:line="105" pos:column="47">::</op:operator><name pos:line="105" pos:column="49">setDigits</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="60">"=$"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<class pos:line="107" pos:column="9">class <name pos:line="107" pos:column="15">HereDocCls</name> <block pos:line="107" pos:column="26">{<private type="default" pos:line="107" pos:column="27">	<comment type="line" pos:line="107" pos:column="33">// Class to manage HERE document elements</comment>
	</private><public pos:line="108" pos:column="9">public:
		<decl_stmt><decl><type><name pos:line="109" pos:column="17">int</name></type> <name pos:line="109" pos:column="21">State</name></decl>;</decl_stmt>		<comment type="line" pos:line="109" pos:column="41">// 0: '&lt;&lt;' encountered</comment>
		<comment type="line" pos:line="110" pos:column="17">// 1: collect the delimiter</comment>
		<comment type="line" pos:line="111" pos:column="17">// 2: here doc text (lines after the delimiter)</comment>
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">int</name></type> <name pos:line="112" pos:column="21">Quote</name></decl>;</decl_stmt>		<comment type="line" pos:line="112" pos:column="41">// the char after '&lt;&lt;'</comment>
		<decl_stmt><decl><type><name pos:line="113" pos:column="17">bool</name></type> <name pos:line="113" pos:column="22">Quoted</name></decl>;</decl_stmt>		<comment type="line" pos:line="113" pos:column="41">// true if Quote in ('\'','"','`')</comment>
		<decl_stmt><decl><type><name pos:line="114" pos:column="17">bool</name></type> <name pos:line="114" pos:column="22">Indent</name></decl>;</decl_stmt>		<comment type="line" pos:line="114" pos:column="41">// indented delimiter (for &lt;&lt;-)</comment>
		<decl_stmt><decl><type><name pos:line="115" pos:column="17">int</name></type> <name pos:line="115" pos:column="21">DelimiterLength</name></decl>;</decl_stmt>	<comment type="line" pos:line="115" pos:column="41">// strlen(Delimiter)</comment>
		<decl_stmt><decl><type><name pos:line="116" pos:column="17">char</name> <type:modifier pos:line="116" pos:column="22">*</type:modifier></type><name pos:line="116" pos:column="23">Delimiter</name></decl>;</decl_stmt>	<comment type="line" pos:line="116" pos:column="41">// the Delimiter, 256: sizeof PL_tokenbuf</comment>
		<constructor><name pos:line="117" pos:column="17">HereDocCls</name><parameter_list pos:line="117" pos:column="27">()</parameter_list> <block pos:line="117" pos:column="30">{
			<expr_stmt><expr><name pos:line="118" pos:column="25">State</name> <op:operator pos:line="118" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="118" pos:column="33">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="119" pos:column="25">Quote</name> <op:operator pos:line="119" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="119" pos:column="33">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="120" pos:column="25">Quoted</name> <op:operator pos:line="120" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="120" pos:column="34">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="121" pos:column="25">Indent</name> <op:operator pos:line="121" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="121" pos:column="34">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="122" pos:column="25">DelimiterLength</name> <op:operator pos:line="122" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="122" pos:column="43">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="123" pos:column="25">Delimiter</name> <op:operator pos:line="123" pos:column="35">=</op:operator> <op:operator pos:line="123" pos:column="37">new</op:operator> <name><name pos:line="123" pos:column="41">char</name><index pos:line="123" pos:column="45">[<expr><name pos:line="123" pos:column="46">HERE_DELIM_MAX</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="124" pos:column="25">Delimiter</name><index pos:line="124" pos:column="34">[<expr><lit:literal type="number" pos:line="124" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="124" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="124" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
		}</block></constructor>
		<function><type><name pos:line="126" pos:column="17">void</name></type> <name pos:line="126" pos:column="22">Append</name><parameter_list pos:line="126" pos:column="28">(<param><decl><type><name pos:line="126" pos:column="29">int</name></type> <name pos:line="126" pos:column="33">ch</name></decl></param>)</parameter_list> <block pos:line="126" pos:column="37">{
			<expr_stmt><expr><name><name pos:line="127" pos:column="25">Delimiter</name><index pos:line="127" pos:column="34">[<expr><name pos:line="127" pos:column="35">DelimiterLength</name><op:operator pos:line="127" pos:column="50">++</op:operator></expr>]</index></name> <op:operator pos:line="127" pos:column="54">=</op:operator> <call><name><name pos:line="127" pos:column="56">static_cast</name><argument_list pos:line="127" pos:column="67">&lt;<argument><expr><name pos:line="127" pos:column="68">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="127" pos:column="73">(<argument><expr><name pos:line="127" pos:column="74">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="128" pos:column="25">Delimiter</name><index pos:line="128" pos:column="34">[<expr><name pos:line="128" pos:column="35">DelimiterLength</name></expr>]</index></name> <op:operator pos:line="128" pos:column="52">=</op:operator> <lit:literal type="char" pos:line="128" pos:column="54">'\0'</lit:literal></expr>;</expr_stmt>
		}</block></function>
		<destructor><name pos:line="130" pos:column="17">~<name pos:line="130" pos:column="18">HereDocCls</name></name><parameter_list pos:line="130" pos:column="28">()</parameter_list> <block pos:line="130" pos:column="31">{
			<expr_stmt><expr><op:operator pos:line="131" pos:column="25">delete</op:operator> <index pos:line="131" pos:column="32">[]</index><name pos:line="131" pos:column="34">Delimiter</name></expr>;</expr_stmt>
		}</block></destructor>
	</public>}</block>;</class>
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">HereDocCls</name></type> <name pos:line="134" pos:column="20">HereDoc</name></decl>;</decl_stmt>

	<class pos:line="136" pos:column="9">class <name pos:line="136" pos:column="15">QuoteCls</name> <block pos:line="136" pos:column="24">{<private type="default" pos:line="136" pos:column="25">	<comment type="line" pos:line="136" pos:column="33">// Class to manage quote pairs (simplified vs LexPerl)</comment>
		</private><public pos:line="137" pos:column="17">public:
		<decl_stmt><decl><type><name pos:line="138" pos:column="17">int</name></type> <name pos:line="138" pos:column="21">Count</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="139" pos:column="17">int</name></type> <name pos:line="139" pos:column="21">Up</name></decl><op:operator pos:line="139" pos:column="23">,</op:operator> <decl><type ref="prev"/><name pos:line="139" pos:column="25">Down</name></decl>;</decl_stmt>
		<constructor><name pos:line="140" pos:column="17">QuoteCls</name><parameter_list pos:line="140" pos:column="25">()</parameter_list> <block pos:line="140" pos:column="28">{
			<expr_stmt><expr><name pos:line="141" pos:column="25">Count</name> <op:operator pos:line="141" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="141" pos:column="33">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="142" pos:column="25">Up</name>    <op:operator pos:line="142" pos:column="31">=</op:operator> <lit:literal type="char" pos:line="142" pos:column="33">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="143" pos:column="25">Down</name>  <op:operator pos:line="143" pos:column="31">=</op:operator> <lit:literal type="char" pos:line="143" pos:column="33">'\0'</lit:literal></expr>;</expr_stmt>
		}</block></constructor>
		<function><type><name pos:line="145" pos:column="17">void</name></type> <name pos:line="145" pos:column="22">Open</name><parameter_list pos:line="145" pos:column="26">(<param><decl><type><name pos:line="145" pos:column="27">int</name></type> <name pos:line="145" pos:column="31">u</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="34">{
			<expr_stmt><expr><name pos:line="146" pos:column="25">Count</name><op:operator pos:line="146" pos:column="30">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="147" pos:column="25">Up</name>    <op:operator pos:line="147" pos:column="31">=</op:operator> <name pos:line="147" pos:column="33">u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="148" pos:column="25">Down</name>  <op:operator pos:line="148" pos:column="31">=</op:operator> <call><name pos:line="148" pos:column="33">opposite</name><argument_list pos:line="148" pos:column="41">(<argument><expr><name pos:line="148" pos:column="42">Up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
		<function><type><name pos:line="150" pos:column="17">void</name></type> <name pos:line="150" pos:column="22">Start</name><parameter_list pos:line="150" pos:column="27">(<param><decl><type><name pos:line="150" pos:column="28">int</name></type> <name pos:line="150" pos:column="32">u</name></decl></param>)</parameter_list> <block pos:line="150" pos:column="35">{
			<expr_stmt><expr><name pos:line="151" pos:column="25">Count</name> <op:operator pos:line="151" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="151" pos:column="33">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="152" pos:column="25">Open</name><argument_list pos:line="152" pos:column="29">(<argument><expr><name pos:line="152" pos:column="30">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	</public>}</block>;</class>
	<decl_stmt><decl><type><name pos:line="155" pos:column="9">QuoteCls</name></type> <name pos:line="155" pos:column="18">Quote</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="157" pos:column="9">int</name></type> <name pos:line="157" pos:column="13">numBase</name> <init pos:line="157" pos:column="21">= <expr><lit:literal type="number" pos:line="157" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">int</name></type> <name pos:line="158" pos:column="13">digit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="159" pos:column="9">unsigned</name> <name pos:line="159" pos:column="18">int</name></type> <name pos:line="159" pos:column="22">endPos</name> <init pos:line="159" pos:column="29">= <expr><name pos:line="159" pos:column="31">startPos</name> <op:operator pos:line="159" pos:column="40">+</op:operator> <name pos:line="159" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">int</name></type> <name pos:line="160" pos:column="13">cmdState</name> <init pos:line="160" pos:column="22">= <expr><name pos:line="160" pos:column="24">BASH_CMD_START</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="161" pos:column="9">int</name></type> <name pos:line="161" pos:column="13">testExprType</name> <init pos:line="161" pos:column="26">= <expr><lit:literal type="number" pos:line="161" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="163" pos:column="9">// Always backtracks to the start of a line that is not a continuation</comment>
	<comment type="line" pos:line="164" pos:column="9">// of the previous line (i.e. start of a bash command segment)</comment>
	<decl_stmt><decl><type><name pos:line="165" pos:column="9">int</name></type> <name pos:line="165" pos:column="13">ln</name> <init pos:line="165" pos:column="16">= <expr><call><name><name pos:line="165" pos:column="18">styler</name><op:operator pos:line="165" pos:column="24">.</op:operator><name pos:line="165" pos:column="25">GetLine</name></name><argument_list pos:line="165" pos:column="32">(<argument><expr><name pos:line="165" pos:column="33">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="166" pos:column="9">for (<init pos:line="166" pos:column="14">;</init><condition pos:line="166" pos:column="15">;</condition><incr/>) <block pos:line="166" pos:column="18">{
		<expr_stmt><expr><name pos:line="167" pos:column="17">startPos</name> <op:operator pos:line="167" pos:column="26">=</op:operator> <call><name><name pos:line="167" pos:column="28">styler</name><op:operator pos:line="167" pos:column="34">.</op:operator><name pos:line="167" pos:column="35">LineStart</name></name><argument_list pos:line="167" pos:column="44">(<argument><expr><name pos:line="167" pos:column="45">ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="168" pos:column="17">if <condition pos:line="168" pos:column="20">(<expr><name pos:line="168" pos:column="21">ln</name> <op:operator pos:line="168" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="168" pos:column="27">0</lit:literal> <op:operator pos:line="168" pos:column="29">||</op:operator> <call><name><name pos:line="168" pos:column="32">styler</name><op:operator pos:line="168" pos:column="38">.</op:operator><name pos:line="168" pos:column="39">GetLineState</name></name><argument_list pos:line="168" pos:column="51">(<argument><expr><name pos:line="168" pos:column="52">ln</name></expr></argument>)</argument_list></call> <op:operator pos:line="168" pos:column="56">==</op:operator> <name pos:line="168" pos:column="59">BASH_CMD_START</name></expr>)</condition><then pos:line="168" pos:column="74">
			<break pos:line="169" pos:column="25">break;</break></then></if>
		<expr_stmt><expr><name pos:line="170" pos:column="17">ln</name><op:operator pos:line="170" pos:column="19">--</op:operator></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name pos:line="172" pos:column="9">initStyle</name> <op:operator pos:line="172" pos:column="19">=</op:operator> <name pos:line="172" pos:column="21">SCE_SH_DEFAULT</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="174" pos:column="9">StyleContext</name></type> <name pos:line="174" pos:column="22">sc</name><argument_list pos:line="174" pos:column="24">(<argument><expr><name pos:line="174" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="35">endPos</name> <op:operator pos:line="174" pos:column="42">-</op:operator> <name pos:line="174" pos:column="44">startPos</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="54">initStyle</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="65">styler</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<for pos:line="176" pos:column="9">for (<init pos:line="176" pos:column="14">;</init> <condition><expr><call><name><name pos:line="176" pos:column="16">sc</name><op:operator pos:line="176" pos:column="18">.</op:operator><name pos:line="176" pos:column="19">More</name></name><argument_list pos:line="176" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="176" pos:column="27">sc</name><op:operator pos:line="176" pos:column="29">.</op:operator><name pos:line="176" pos:column="30">Forward</name></name><argument_list pos:line="176" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="176" pos:column="41">{

		<comment type="line" pos:line="178" pos:column="17">// handle line continuation, updates per-line stored state</comment>
		<if pos:line="179" pos:column="17">if <condition pos:line="179" pos:column="20">(<expr><name><name pos:line="179" pos:column="21">sc</name><op:operator pos:line="179" pos:column="23">.</op:operator><name pos:line="179" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="179" pos:column="36"> <block pos:line="179" pos:column="37">{
			<expr_stmt><expr><name pos:line="180" pos:column="25">ln</name> <op:operator pos:line="180" pos:column="28">=</op:operator> <call><name><name pos:line="180" pos:column="30">styler</name><op:operator pos:line="180" pos:column="36">.</op:operator><name pos:line="180" pos:column="37">GetLine</name></name><argument_list pos:line="180" pos:column="44">(<argument><expr><name><name pos:line="180" pos:column="45">sc</name><op:operator pos:line="180" pos:column="47">.</op:operator><name pos:line="180" pos:column="48">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="181" pos:column="25">if <condition pos:line="181" pos:column="28">(<expr><name><name pos:line="181" pos:column="29">sc</name><op:operator pos:line="181" pos:column="31">.</op:operator><name pos:line="181" pos:column="32">state</name></name> <op:operator pos:line="181" pos:column="38">==</op:operator> <name pos:line="181" pos:column="41">SCE_SH_STRING</name>
			 <op:operator pos:line="182" pos:column="26">||</op:operator> <name><name pos:line="182" pos:column="29">sc</name><op:operator pos:line="182" pos:column="31">.</op:operator><name pos:line="182" pos:column="32">state</name></name> <op:operator pos:line="182" pos:column="38">==</op:operator> <name pos:line="182" pos:column="41">SCE_SH_BACKTICKS</name>
			 <op:operator pos:line="183" pos:column="26">||</op:operator> <name><name pos:line="183" pos:column="29">sc</name><op:operator pos:line="183" pos:column="31">.</op:operator><name pos:line="183" pos:column="32">state</name></name> <op:operator pos:line="183" pos:column="38">==</op:operator> <name pos:line="183" pos:column="41">SCE_SH_CHARACTER</name>
			 <op:operator pos:line="184" pos:column="26">||</op:operator> <name><name pos:line="184" pos:column="29">sc</name><op:operator pos:line="184" pos:column="31">.</op:operator><name pos:line="184" pos:column="32">state</name></name> <op:operator pos:line="184" pos:column="38">==</op:operator> <name pos:line="184" pos:column="41">SCE_SH_HERE_Q</name>
			 <op:operator pos:line="185" pos:column="26">||</op:operator> <name><name pos:line="185" pos:column="29">sc</name><op:operator pos:line="185" pos:column="31">.</op:operator><name pos:line="185" pos:column="32">state</name></name> <op:operator pos:line="185" pos:column="38">==</op:operator> <name pos:line="185" pos:column="41">SCE_SH_COMMENTLINE</name>
			 <op:operator pos:line="186" pos:column="26">||</op:operator> <name><name pos:line="186" pos:column="29">sc</name><op:operator pos:line="186" pos:column="31">.</op:operator><name pos:line="186" pos:column="32">state</name></name> <op:operator pos:line="186" pos:column="38">==</op:operator> <name pos:line="186" pos:column="41">SCE_SH_PARAM</name></expr>)</condition><then pos:line="186" pos:column="54"> <block pos:line="186" pos:column="55">{
				<comment type="line" pos:line="187" pos:column="33">// force backtrack while retaining cmdState</comment>
				<expr_stmt><expr><call><name><name pos:line="188" pos:column="33">styler</name><op:operator pos:line="188" pos:column="39">.</op:operator><name pos:line="188" pos:column="40">SetLineState</name></name><argument_list pos:line="188" pos:column="52">(<argument><expr><name pos:line="188" pos:column="53">ln</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="57">BASH_CMD_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="189" pos:column="27">else <block pos:line="189" pos:column="32">{
				<if pos:line="190" pos:column="33">if <condition pos:line="190" pos:column="36">(<expr><name pos:line="190" pos:column="37">ln</name> <op:operator pos:line="190" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="190" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="190" pos:column="44"> <block pos:line="190" pos:column="45">{
					<if pos:line="191" pos:column="41">if <condition pos:line="191" pos:column="44">(<expr><op:operator pos:line="191" pos:column="45">(</op:operator><call><name><name pos:line="191" pos:column="46">sc</name><op:operator pos:line="191" pos:column="48">.</op:operator><name pos:line="191" pos:column="49">GetRelative</name></name><argument_list pos:line="191" pos:column="60">(<argument><expr><op:operator pos:line="191" pos:column="61">-</op:operator><lit:literal type="number" pos:line="191" pos:column="62">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="191" pos:column="68">'\\'</lit:literal> <op:operator pos:line="191" pos:column="73">&amp;&amp;</op:operator> <call><name><name pos:line="191" pos:column="76">sc</name><op:operator pos:line="191" pos:column="78">.</op:operator><name pos:line="191" pos:column="79">GetRelative</name></name><argument_list pos:line="191" pos:column="90">(<argument><expr><op:operator pos:line="191" pos:column="91">-</op:operator><lit:literal type="number" pos:line="191" pos:column="92">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="95">==</op:operator> <lit:literal type="char" pos:line="191" pos:column="98">'\r'</lit:literal> <op:operator pos:line="191" pos:column="103">&amp;&amp;</op:operator> <name><name pos:line="191" pos:column="106">sc</name><op:operator pos:line="191" pos:column="108">.</op:operator><name pos:line="191" pos:column="109">chPrev</name></name> <op:operator pos:line="191" pos:column="116">==</op:operator> <lit:literal type="char" pos:line="191" pos:column="119">'\n'</lit:literal><op:operator pos:line="191" pos:column="123">)</op:operator>
					 <op:operator pos:line="192" pos:column="42">||</op:operator> <call><name><name pos:line="192" pos:column="45">sc</name><op:operator pos:line="192" pos:column="47">.</op:operator><name pos:line="192" pos:column="48">GetRelative</name></name><argument_list pos:line="192" pos:column="59">(<argument><expr><op:operator pos:line="192" pos:column="60">-</op:operator><lit:literal type="number" pos:line="192" pos:column="61">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="192" pos:column="67">'\\'</lit:literal></expr>)</condition><then pos:line="192" pos:column="72"> <block pos:line="192" pos:column="73">{	<comment type="line" pos:line="192" pos:column="81">// handle '\' line continuation</comment>
						<comment type="line" pos:line="193" pos:column="49">// retain last line's state</comment>
					}</block></then> <else pos:line="194" pos:column="43">else
						<expr_stmt><expr><name pos:line="195" pos:column="49">cmdState</name> <op:operator pos:line="195" pos:column="58">=</op:operator> <name pos:line="195" pos:column="60">BASH_CMD_START</name></expr>;</expr_stmt></else></if>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="197" pos:column="33">styler</name><op:operator pos:line="197" pos:column="39">.</op:operator><name pos:line="197" pos:column="40">SetLineState</name></name><argument_list pos:line="197" pos:column="52">(<argument><expr><name pos:line="197" pos:column="53">ln</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="57">cmdState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>

		<comment type="line" pos:line="201" pos:column="17">// controls change of cmdState at the end of a non-whitespace element</comment>
		<comment type="line" pos:line="202" pos:column="17">// states BODY|TEST|ARITH persist until the end of a command segment</comment>
		<comment type="line" pos:line="203" pos:column="17">// state WORD persist, but ends with 'in' or 'do' construct keywords</comment>
		<decl_stmt><decl><type><name pos:line="204" pos:column="17">int</name></type> <name pos:line="204" pos:column="21">cmdStateNew</name> <init pos:line="204" pos:column="33">= <expr><name pos:line="204" pos:column="35">BASH_CMD_BODY</name></expr></init></decl>;</decl_stmt>
		<if pos:line="205" pos:column="17">if <condition pos:line="205" pos:column="20">(<expr><name pos:line="205" pos:column="21">cmdState</name> <op:operator pos:line="205" pos:column="30">==</op:operator> <name pos:line="205" pos:column="33">BASH_CMD_TEST</name> <op:operator pos:line="205" pos:column="47">||</op:operator> <name pos:line="205" pos:column="50">cmdState</name> <op:operator pos:line="205" pos:column="59">==</op:operator> <name pos:line="205" pos:column="62">BASH_CMD_ARITH</name> <op:operator pos:line="205" pos:column="77">||</op:operator> <name pos:line="205" pos:column="80">cmdState</name> <op:operator pos:line="205" pos:column="89">==</op:operator> <name pos:line="205" pos:column="92">BASH_CMD_WORD</name></expr>)</condition><then pos:line="205" pos:column="106">
			<expr_stmt><expr><name pos:line="206" pos:column="25">cmdStateNew</name> <op:operator pos:line="206" pos:column="37">=</op:operator> <name pos:line="206" pos:column="39">cmdState</name></expr>;</expr_stmt></then></if>
		<decl_stmt><decl><type><name pos:line="207" pos:column="17">int</name></type> <name pos:line="207" pos:column="21">stylePrev</name> <init pos:line="207" pos:column="31">= <expr><name><name pos:line="207" pos:column="33">sc</name><op:operator pos:line="207" pos:column="35">.</op:operator><name pos:line="207" pos:column="36">state</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="209" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="210" pos:column="17">switch <condition pos:line="210" pos:column="24">(<expr><name><name pos:line="210" pos:column="25">sc</name><op:operator pos:line="210" pos:column="27">.</op:operator><name pos:line="210" pos:column="28">state</name></name></expr>)</condition> <block pos:line="210" pos:column="35">{
			<case pos:line="211" pos:column="25">case <expr><name pos:line="211" pos:column="30">SCE_SH_OPERATOR</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="212" pos:column="33">sc</name><op:operator pos:line="212" pos:column="35">.</op:operator><name pos:line="212" pos:column="36">SetState</name></name><argument_list pos:line="212" pos:column="44">(<argument><expr><name pos:line="212" pos:column="45">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="213" pos:column="33">if <condition pos:line="213" pos:column="36">(<expr><name pos:line="213" pos:column="37">cmdState</name> <op:operator pos:line="213" pos:column="46">==</op:operator> <name pos:line="213" pos:column="49">BASH_CMD_DELIM</name></expr>)</condition><then pos:line="213" pos:column="64">		<comment type="line" pos:line="213" pos:column="73">// if command delimiter, start new command</comment>
					<expr_stmt><expr><name pos:line="214" pos:column="41">cmdStateNew</name> <op:operator pos:line="214" pos:column="53">=</op:operator> <name pos:line="214" pos:column="55">BASH_CMD_START</name></expr>;</expr_stmt></then>
				<else pos:line="215" pos:column="33">else <if pos:line="215" pos:column="38">if <condition pos:line="215" pos:column="41">(<expr><name><name pos:line="215" pos:column="42">sc</name><op:operator pos:line="215" pos:column="44">.</op:operator><name pos:line="215" pos:column="45">chPrev</name></name> <op:operator pos:line="215" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="215" pos:column="55">'\\'</lit:literal></expr>)</condition><then pos:line="215" pos:column="60">			<comment type="line" pos:line="215" pos:column="81">// propagate command state if line continued</comment>
					<expr_stmt><expr><name pos:line="216" pos:column="41">cmdStateNew</name> <op:operator pos:line="216" pos:column="53">=</op:operator> <name pos:line="216" pos:column="55">cmdState</name></expr>;</expr_stmt></then></if></else></if>
				<break pos:line="217" pos:column="33">break;</break>
			</case><case pos:line="218" pos:column="25">case <expr><name pos:line="218" pos:column="30">SCE_SH_WORD</name></expr>:
				<comment type="line" pos:line="219" pos:column="33">// "." never used in Bash variable names but used in file names</comment>
				<if pos:line="220" pos:column="33">if <condition pos:line="220" pos:column="36">(<expr><op:operator pos:line="220" pos:column="37">!</op:operator><call><name><name pos:line="220" pos:column="38">setWord</name><op:operator pos:line="220" pos:column="45">.</op:operator><name pos:line="220" pos:column="46">Contains</name></name><argument_list pos:line="220" pos:column="54">(<argument><expr><name><name pos:line="220" pos:column="55">sc</name><op:operator pos:line="220" pos:column="57">.</op:operator><name pos:line="220" pos:column="58">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="220" pos:column="62"> <block pos:line="220" pos:column="63">{
					<decl_stmt><decl><type><name pos:line="221" pos:column="41">char</name></type> <name><name pos:line="221" pos:column="46">s</name><index pos:line="221" pos:column="47">[<expr><lit:literal type="number" pos:line="221" pos:column="48">500</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="222" pos:column="41">char</name></type> <name><name pos:line="222" pos:column="46">s2</name><index pos:line="222" pos:column="48">[<expr><lit:literal type="number" pos:line="222" pos:column="49">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="223" pos:column="41">sc</name><op:operator pos:line="223" pos:column="43">.</op:operator><name pos:line="223" pos:column="44">GetCurrent</name></name><argument_list pos:line="223" pos:column="54">(<argument><expr><name pos:line="223" pos:column="55">s</name></expr></argument>, <argument><expr><sizeof pos:line="223" pos:column="58">sizeof<argument_list pos:line="223" pos:column="64">(<argument><expr><name pos:line="223" pos:column="65">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="224" pos:column="41">// allow keywords ending in a whitespace or command delimiter</comment>
					<expr_stmt><expr><name><name pos:line="225" pos:column="41">s2</name><index pos:line="225" pos:column="43">[<expr><lit:literal type="number" pos:line="225" pos:column="44">0</lit:literal></expr>]</index></name> <op:operator pos:line="225" pos:column="47">=</op:operator> <call><name><name pos:line="225" pos:column="49">static_cast</name><argument_list pos:line="225" pos:column="60">&lt;<argument><expr><name pos:line="225" pos:column="61">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="225" pos:column="66">(<argument><expr><name><name pos:line="225" pos:column="67">sc</name><op:operator pos:line="225" pos:column="69">.</op:operator><name pos:line="225" pos:column="70">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="226" pos:column="41">s2</name><index pos:line="226" pos:column="43">[<expr><lit:literal type="number" pos:line="226" pos:column="44">1</lit:literal></expr>]</index></name> <op:operator pos:line="226" pos:column="47">=</op:operator> <lit:literal type="char" pos:line="226" pos:column="49">'\0'</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="227" pos:column="41">bool</name></type> <name pos:line="227" pos:column="46">keywordEnds</name> <init pos:line="227" pos:column="58">= <expr><call><name pos:line="227" pos:column="60">IsASpace</name><argument_list pos:line="227" pos:column="68">(<argument><expr><name><name pos:line="227" pos:column="69">sc</name><op:operator pos:line="227" pos:column="71">.</op:operator><name pos:line="227" pos:column="72">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="227" pos:column="76">||</op:operator> <call><name><name pos:line="227" pos:column="79">cmdDelimiter</name><op:operator pos:line="227" pos:column="91">.</op:operator><name pos:line="227" pos:column="92">InList</name></name><argument_list pos:line="227" pos:column="98">(<argument><expr><name pos:line="227" pos:column="99">s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="228" pos:column="41">// 'in' or 'do' may be construct keywords</comment>
					<if pos:line="229" pos:column="41">if <condition pos:line="229" pos:column="44">(<expr><name pos:line="229" pos:column="45">cmdState</name> <op:operator pos:line="229" pos:column="54">==</op:operator> <name pos:line="229" pos:column="57">BASH_CMD_WORD</name></expr>)</condition><then pos:line="229" pos:column="71"> <block pos:line="229" pos:column="72">{
						<if pos:line="230" pos:column="49">if <condition pos:line="230" pos:column="52">(<expr><call><name pos:line="230" pos:column="53">strcmp</name><argument_list pos:line="230" pos:column="59">(<argument><expr><name pos:line="230" pos:column="60">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="230" pos:column="63">"in"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="230" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="230" pos:column="72">0</lit:literal> <op:operator pos:line="230" pos:column="74">&amp;&amp;</op:operator> <name pos:line="230" pos:column="77">keywordEnds</name></expr>)</condition><then pos:line="230" pos:column="89">
							<expr_stmt><expr><name pos:line="231" pos:column="57">cmdStateNew</name> <op:operator pos:line="231" pos:column="69">=</op:operator> <name pos:line="231" pos:column="71">BASH_CMD_BODY</name></expr>;</expr_stmt></then>
						<else pos:line="232" pos:column="49">else <if pos:line="232" pos:column="54">if <condition pos:line="232" pos:column="57">(<expr><call><name pos:line="232" pos:column="58">strcmp</name><argument_list pos:line="232" pos:column="64">(<argument><expr><name pos:line="232" pos:column="65">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="232" pos:column="68">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="232" pos:column="74">==</op:operator> <lit:literal type="number" pos:line="232" pos:column="77">0</lit:literal> <op:operator pos:line="232" pos:column="79">&amp;&amp;</op:operator> <name pos:line="232" pos:column="82">keywordEnds</name></expr>)</condition><then pos:line="232" pos:column="94">
							<expr_stmt><expr><name pos:line="233" pos:column="57">cmdStateNew</name> <op:operator pos:line="233" pos:column="69">=</op:operator> <name pos:line="233" pos:column="71">BASH_CMD_START</name></expr>;</expr_stmt></then>
						<else pos:line="234" pos:column="49">else
							<expr_stmt><expr><call><name><name pos:line="235" pos:column="57">sc</name><op:operator pos:line="235" pos:column="59">.</op:operator><name pos:line="235" pos:column="60">ChangeState</name></name><argument_list pos:line="235" pos:column="71">(<argument><expr><name pos:line="235" pos:column="72">SCE_SH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
						<expr_stmt><expr><call><name><name pos:line="236" pos:column="49">sc</name><op:operator pos:line="236" pos:column="51">.</op:operator><name pos:line="236" pos:column="52">SetState</name></name><argument_list pos:line="236" pos:column="60">(<argument><expr><name pos:line="236" pos:column="61">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break pos:line="237" pos:column="49">break;</break>
					}</block></then></if>
					<comment type="line" pos:line="239" pos:column="41">// a 'test' keyword starts a test expression</comment>
					<if pos:line="240" pos:column="41">if <condition pos:line="240" pos:column="44">(<expr><call><name pos:line="240" pos:column="45">strcmp</name><argument_list pos:line="240" pos:column="51">(<argument><expr><name pos:line="240" pos:column="52">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="240" pos:column="55">"test"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="240" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="240" pos:column="66">0</lit:literal></expr>)</condition><then pos:line="240" pos:column="68"> <block pos:line="240" pos:column="69">{
						<if pos:line="241" pos:column="49">if <condition pos:line="241" pos:column="52">(<expr><name pos:line="241" pos:column="53">cmdState</name> <op:operator pos:line="241" pos:column="62">==</op:operator> <name pos:line="241" pos:column="65">BASH_CMD_START</name> <op:operator pos:line="241" pos:column="80">&amp;&amp;</op:operator> <name pos:line="241" pos:column="83">keywordEnds</name></expr>)</condition><then pos:line="241" pos:column="95"> <block pos:line="241" pos:column="96">{
							<expr_stmt><expr><name pos:line="242" pos:column="57">cmdStateNew</name> <op:operator pos:line="242" pos:column="69">=</op:operator> <name pos:line="242" pos:column="71">BASH_CMD_TEST</name></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="243" pos:column="57">testExprType</name> <op:operator pos:line="243" pos:column="70">=</op:operator> <lit:literal type="number" pos:line="243" pos:column="72">0</lit:literal></expr>;</expr_stmt>
						}</block></then> <else pos:line="244" pos:column="51">else
							<expr_stmt><expr><call><name><name pos:line="245" pos:column="57">sc</name><op:operator pos:line="245" pos:column="59">.</op:operator><name pos:line="245" pos:column="60">ChangeState</name></name><argument_list pos:line="245" pos:column="71">(<argument><expr><name pos:line="245" pos:column="72">SCE_SH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
					}</block></then>
					<comment type="line" pos:line="247" pos:column="41">// detect bash construct keywords</comment>
					<else pos:line="248" pos:column="41">else <if pos:line="248" pos:column="46">if <condition pos:line="248" pos:column="49">(<expr><call><name><name pos:line="248" pos:column="50">bashStruct</name><op:operator pos:line="248" pos:column="60">.</op:operator><name pos:line="248" pos:column="61">InList</name></name><argument_list pos:line="248" pos:column="67">(<argument><expr><name pos:line="248" pos:column="68">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="248" pos:column="71"> <block pos:line="248" pos:column="72">{
						<if pos:line="249" pos:column="49">if <condition pos:line="249" pos:column="52">(<expr><name pos:line="249" pos:column="53">cmdState</name> <op:operator pos:line="249" pos:column="62">==</op:operator> <name pos:line="249" pos:column="65">BASH_CMD_START</name> <op:operator pos:line="249" pos:column="80">&amp;&amp;</op:operator> <name pos:line="249" pos:column="83">keywordEnds</name></expr>)</condition><then pos:line="249" pos:column="95">
							<expr_stmt><expr><name pos:line="250" pos:column="57">cmdStateNew</name> <op:operator pos:line="250" pos:column="69">=</op:operator> <name pos:line="250" pos:column="71">BASH_CMD_START</name></expr>;</expr_stmt></then>
						<else pos:line="251" pos:column="49">else
							<expr_stmt><expr><call><name><name pos:line="252" pos:column="57">sc</name><op:operator pos:line="252" pos:column="59">.</op:operator><name pos:line="252" pos:column="60">ChangeState</name></name><argument_list pos:line="252" pos:column="71">(<argument><expr><name pos:line="252" pos:column="72">SCE_SH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
					}</block></then>
					<comment type="line" pos:line="254" pos:column="41">// 'for'|'case'|'select' needs 'in'|'do' to be highlighted later</comment>
					<else pos:line="255" pos:column="41">else <if pos:line="255" pos:column="46">if <condition pos:line="255" pos:column="49">(<expr><call><name><name pos:line="255" pos:column="50">bashStruct_in</name><op:operator pos:line="255" pos:column="63">.</op:operator><name pos:line="255" pos:column="64">InList</name></name><argument_list pos:line="255" pos:column="70">(<argument><expr><name pos:line="255" pos:column="71">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="255" pos:column="74"> <block pos:line="255" pos:column="75">{
						<if pos:line="256" pos:column="49">if <condition pos:line="256" pos:column="52">(<expr><name pos:line="256" pos:column="53">cmdState</name> <op:operator pos:line="256" pos:column="62">==</op:operator> <name pos:line="256" pos:column="65">BASH_CMD_START</name> <op:operator pos:line="256" pos:column="80">&amp;&amp;</op:operator> <name pos:line="256" pos:column="83">keywordEnds</name></expr>)</condition><then pos:line="256" pos:column="95">
							<expr_stmt><expr><name pos:line="257" pos:column="57">cmdStateNew</name> <op:operator pos:line="257" pos:column="69">=</op:operator> <name pos:line="257" pos:column="71">BASH_CMD_WORD</name></expr>;</expr_stmt></then>
						<else pos:line="258" pos:column="49">else
							<expr_stmt><expr><call><name><name pos:line="259" pos:column="57">sc</name><op:operator pos:line="259" pos:column="59">.</op:operator><name pos:line="259" pos:column="60">ChangeState</name></name><argument_list pos:line="259" pos:column="71">(<argument><expr><name pos:line="259" pos:column="72">SCE_SH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
					}</block></then>
					<comment type="line" pos:line="261" pos:column="41">// disambiguate option items and file test operators</comment>
					<else pos:line="262" pos:column="41">else <if pos:line="262" pos:column="46">if <condition pos:line="262" pos:column="49">(<expr><name><name pos:line="262" pos:column="50">s</name><index pos:line="262" pos:column="51">[<expr><lit:literal type="number" pos:line="262" pos:column="52">0</lit:literal></expr>]</index></name> <op:operator pos:line="262" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="58">'-'</lit:literal></expr>)</condition><then pos:line="262" pos:column="62"> <block pos:line="262" pos:column="63">{
						<if pos:line="263" pos:column="49">if <condition pos:line="263" pos:column="52">(<expr><name pos:line="263" pos:column="53">cmdState</name> <op:operator pos:line="263" pos:column="62">!=</op:operator> <name pos:line="263" pos:column="65">BASH_CMD_TEST</name></expr>)</condition><then pos:line="263" pos:column="79">
							<expr_stmt><expr><call><name><name pos:line="264" pos:column="57">sc</name><op:operator pos:line="264" pos:column="59">.</op:operator><name pos:line="264" pos:column="60">ChangeState</name></name><argument_list pos:line="264" pos:column="71">(<argument><expr><name pos:line="264" pos:column="72">SCE_SH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					}</block></then>
					<comment type="line" pos:line="266" pos:column="41">// disambiguate keywords and identifiers</comment>
					<else pos:line="267" pos:column="41">else <if pos:line="267" pos:column="46">if <condition pos:line="267" pos:column="49">(<expr><name pos:line="267" pos:column="50">cmdState</name> <op:operator pos:line="267" pos:column="59">!=</op:operator> <name pos:line="267" pos:column="62">BASH_CMD_START</name>
						  <op:operator pos:line="268" pos:column="51">||</op:operator> <op:operator pos:line="268" pos:column="54">!</op:operator><op:operator pos:line="268" pos:column="55">(</op:operator><call><name><name pos:line="268" pos:column="56">keywords</name><op:operator pos:line="268" pos:column="64">.</op:operator><name pos:line="268" pos:column="65">InList</name></name><argument_list pos:line="268" pos:column="71">(<argument><expr><name pos:line="268" pos:column="72">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="268" pos:column="75">&amp;&amp;</op:operator> <name pos:line="268" pos:column="78">keywordEnds</name><op:operator pos:line="268" pos:column="89">)</op:operator></expr>)</condition><then pos:line="268" pos:column="91"> <block pos:line="268" pos:column="92">{
						<expr_stmt><expr><call><name><name pos:line="269" pos:column="49">sc</name><op:operator pos:line="269" pos:column="51">.</op:operator><name pos:line="269" pos:column="52">ChangeState</name></name><argument_list pos:line="269" pos:column="63">(<argument><expr><name pos:line="269" pos:column="64">SCE_SH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if></else></if></else></if>
					<expr_stmt><expr><call><name><name pos:line="271" pos:column="41">sc</name><op:operator pos:line="271" pos:column="43">.</op:operator><name pos:line="271" pos:column="44">SetState</name></name><argument_list pos:line="271" pos:column="52">(<argument><expr><name pos:line="271" pos:column="53">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="273" pos:column="33">break;</break>
			</case><case pos:line="274" pos:column="25">case <expr><name pos:line="274" pos:column="30">SCE_SH_IDENTIFIER</name></expr>:
				<if pos:line="275" pos:column="33">if <condition pos:line="275" pos:column="36">(<expr><name><name pos:line="275" pos:column="37">sc</name><op:operator pos:line="275" pos:column="39">.</op:operator><name pos:line="275" pos:column="40">chPrev</name></name> <op:operator pos:line="275" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="275" pos:column="50">'\\'</lit:literal></expr>)</condition><then pos:line="275" pos:column="55"> <block pos:line="275" pos:column="56">{	<comment type="line" pos:line="275" pos:column="65">// for escaped chars</comment>
					<expr_stmt><expr><call><name><name pos:line="276" pos:column="41">sc</name><op:operator pos:line="276" pos:column="43">.</op:operator><name pos:line="276" pos:column="44">ForwardSetState</name></name><argument_list pos:line="276" pos:column="59">(<argument><expr><name pos:line="276" pos:column="60">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="277" pos:column="35">else <if pos:line="277" pos:column="40">if <condition pos:line="277" pos:column="43">(<expr><op:operator pos:line="277" pos:column="44">!</op:operator><call><name><name pos:line="277" pos:column="45">setWord</name><op:operator pos:line="277" pos:column="52">.</op:operator><name pos:line="277" pos:column="53">Contains</name></name><argument_list pos:line="277" pos:column="61">(<argument><expr><name><name pos:line="277" pos:column="62">sc</name><op:operator pos:line="277" pos:column="64">.</op:operator><name pos:line="277" pos:column="65">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="277" pos:column="69"> <block pos:line="277" pos:column="70">{
					<expr_stmt><expr><call><name><name pos:line="278" pos:column="41">sc</name><op:operator pos:line="278" pos:column="43">.</op:operator><name pos:line="278" pos:column="44">SetState</name></name><argument_list pos:line="278" pos:column="52">(<argument><expr><name pos:line="278" pos:column="53">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="280" pos:column="33">break;</break>
			</case><case pos:line="281" pos:column="25">case <expr><name pos:line="281" pos:column="30">SCE_SH_NUMBER</name></expr>:
				<expr_stmt><expr><name pos:line="282" pos:column="33">digit</name> <op:operator pos:line="282" pos:column="39">=</op:operator> <call><name pos:line="282" pos:column="41">translateBashDigit</name><argument_list pos:line="282" pos:column="59">(<argument><expr><name><name pos:line="282" pos:column="60">sc</name><op:operator pos:line="282" pos:column="62">.</op:operator><name pos:line="282" pos:column="63">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="283" pos:column="33">if <condition pos:line="283" pos:column="36">(<expr><name pos:line="283" pos:column="37">numBase</name> <op:operator pos:line="283" pos:column="45">==</op:operator> <name pos:line="283" pos:column="48">BASH_BASE_DECIMAL</name></expr>)</condition><then pos:line="283" pos:column="66"> <block pos:line="283" pos:column="67">{
					<if pos:line="284" pos:column="41">if <condition pos:line="284" pos:column="44">(<expr><name><name pos:line="284" pos:column="45">sc</name><op:operator pos:line="284" pos:column="47">.</op:operator><name pos:line="284" pos:column="48">ch</name></name> <op:operator pos:line="284" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="284" pos:column="54">'#'</lit:literal></expr>)</condition><then pos:line="284" pos:column="58"> <block pos:line="284" pos:column="59">{
						<decl_stmt><decl><type><name pos:line="285" pos:column="49">char</name></type> <name><name pos:line="285" pos:column="54">s</name><index pos:line="285" pos:column="55">[<expr><lit:literal type="number" pos:line="285" pos:column="56">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="286" pos:column="49">sc</name><op:operator pos:line="286" pos:column="51">.</op:operator><name pos:line="286" pos:column="52">GetCurrent</name></name><argument_list pos:line="286" pos:column="62">(<argument><expr><name pos:line="286" pos:column="63">s</name></expr></argument>, <argument><expr><sizeof pos:line="286" pos:column="66">sizeof<argument_list pos:line="286" pos:column="72">(<argument><expr><name pos:line="286" pos:column="73">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="287" pos:column="49">numBase</name> <op:operator pos:line="287" pos:column="57">=</op:operator> <call><name pos:line="287" pos:column="59">getBashNumberBase</name><argument_list pos:line="287" pos:column="76">(<argument><expr><name pos:line="287" pos:column="77">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="288" pos:column="49">if <condition pos:line="288" pos:column="52">(<expr><name pos:line="288" pos:column="53">numBase</name> <op:operator pos:line="288" pos:column="61">!=</op:operator> <name pos:line="288" pos:column="64">BASH_BASE_ERROR</name></expr>)</condition><then pos:line="288" pos:column="80">
							<break pos:line="289" pos:column="57">break;</break></then></if>
					}</block></then> <else pos:line="290" pos:column="43">else <if pos:line="290" pos:column="48">if <condition pos:line="290" pos:column="51">(<expr><call><name pos:line="290" pos:column="52">IsADigit</name><argument_list pos:line="290" pos:column="60">(<argument><expr><name><name pos:line="290" pos:column="61">sc</name><op:operator pos:line="290" pos:column="63">.</op:operator><name pos:line="290" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="290" pos:column="68">
						<break pos:line="291" pos:column="49">break;</break></then></if></else></if>
				}</block></then> <else pos:line="292" pos:column="35">else <if pos:line="292" pos:column="40">if <condition pos:line="292" pos:column="43">(<expr><name pos:line="292" pos:column="44">numBase</name> <op:operator pos:line="292" pos:column="52">==</op:operator> <name pos:line="292" pos:column="55">BASH_BASE_HEX</name></expr>)</condition><then pos:line="292" pos:column="69"> <block pos:line="292" pos:column="70">{
					<if pos:line="293" pos:column="41">if <condition pos:line="293" pos:column="44">(<expr><call><name pos:line="293" pos:column="45">IsADigit</name><argument_list pos:line="293" pos:column="53">(<argument><expr><name><name pos:line="293" pos:column="54">sc</name><op:operator pos:line="293" pos:column="56">.</op:operator><name pos:line="293" pos:column="57">ch</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="293" pos:column="61">16</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="293" pos:column="65">
						<break pos:line="294" pos:column="49">break;</break></then></if>
<cpp:ifdef pos:line="295" pos:column="1">#<cpp:directive pos:line="295" pos:column="2">ifdef</cpp:directive> <name pos:line="295" pos:column="8">PEDANTIC_OCTAL</name></cpp:ifdef>
				}</block></then> <else pos:line="296" pos:column="35">else <if pos:line="296" pos:column="40">if <condition pos:line="296" pos:column="43">(<expr><name pos:line="296" pos:column="44">numBase</name> <op:operator pos:line="296" pos:column="52">==</op:operator> <name pos:line="296" pos:column="55">BASH_BASE_OCTAL</name> <op:operator pos:line="296" pos:column="71">||</op:operator>
						   <name pos:line="297" pos:column="52">numBase</name> <op:operator pos:line="297" pos:column="60">==</op:operator> <name pos:line="297" pos:column="63">BASH_BASE_OCTAL_ERROR</name></expr>)</condition><then pos:line="297" pos:column="85"> <block pos:line="297" pos:column="86">{
					<if pos:line="298" pos:column="41">if <condition pos:line="298" pos:column="44">(<expr><name pos:line="298" pos:column="45">digit</name> <op:operator pos:line="298" pos:column="51">&lt;=</op:operator> <lit:literal type="number" pos:line="298" pos:column="54">7</lit:literal></expr>)</condition><then pos:line="298" pos:column="56">
						<break pos:line="299" pos:column="49">break;</break></then></if>
					<if pos:line="300" pos:column="41">if <condition pos:line="300" pos:column="44">(<expr><name pos:line="300" pos:column="45">digit</name> <op:operator pos:line="300" pos:column="51">&lt;=</op:operator> <lit:literal type="number" pos:line="300" pos:column="54">9</lit:literal></expr>)</condition><then pos:line="300" pos:column="56"> <block pos:line="300" pos:column="57">{
						<expr_stmt><expr><name pos:line="301" pos:column="49">numBase</name> <op:operator pos:line="301" pos:column="57">=</op:operator> <name pos:line="301" pos:column="59">BASH_BASE_OCTAL_ERROR</name></expr>;</expr_stmt>
						<break pos:line="302" pos:column="49">break;</break>
					}</block></then></if>
<cpp:endif pos:line="304" pos:column="1">#<cpp:directive pos:line="304" pos:column="2">endif</cpp:directive></cpp:endif>
				}</block></then> <else pos:line="305" pos:column="35">else <if pos:line="305" pos:column="40">if <condition pos:line="305" pos:column="43">(<expr><name pos:line="305" pos:column="44">numBase</name> <op:operator pos:line="305" pos:column="52">==</op:operator> <name pos:line="305" pos:column="55">BASH_BASE_ERROR</name></expr>)</condition><then pos:line="305" pos:column="71"> <block pos:line="305" pos:column="72">{
					<if pos:line="306" pos:column="41">if <condition pos:line="306" pos:column="44">(<expr><name pos:line="306" pos:column="45">digit</name> <op:operator pos:line="306" pos:column="51">&lt;=</op:operator> <lit:literal type="number" pos:line="306" pos:column="54">9</lit:literal></expr>)</condition><then pos:line="306" pos:column="56">
						<break pos:line="307" pos:column="49">break;</break></then></if>
				}</block></then> <else pos:line="308" pos:column="35">else <block pos:line="308" pos:column="40">{	<comment type="line" pos:line="308" pos:column="49">// DD#DDDD number style handling</comment>
					<if pos:line="309" pos:column="41">if <condition pos:line="309" pos:column="44">(<expr><name pos:line="309" pos:column="45">digit</name> <op:operator pos:line="309" pos:column="51">!=</op:operator> <name pos:line="309" pos:column="54">BASH_BASE_ERROR</name></expr>)</condition><then pos:line="309" pos:column="70"> <block pos:line="309" pos:column="71">{
						<if pos:line="310" pos:column="49">if <condition pos:line="310" pos:column="52">(<expr><name pos:line="310" pos:column="53">numBase</name> <op:operator pos:line="310" pos:column="61">&lt;=</op:operator> <lit:literal type="number" pos:line="310" pos:column="64">36</lit:literal></expr>)</condition><then pos:line="310" pos:column="67"> <block pos:line="310" pos:column="68">{
							<comment type="line" pos:line="311" pos:column="57">// case-insensitive if base&lt;=36</comment>
							<if pos:line="312" pos:column="57">if <condition pos:line="312" pos:column="60">(<expr><name pos:line="312" pos:column="61">digit</name> <op:operator pos:line="312" pos:column="67">&gt;=</op:operator> <lit:literal type="number" pos:line="312" pos:column="70">36</lit:literal></expr>)</condition><then pos:line="312" pos:column="73"> <expr_stmt><expr><name pos:line="312" pos:column="74">digit</name> <op:operator pos:line="312" pos:column="80">-=</op:operator> <lit:literal type="number" pos:line="312" pos:column="83">26</lit:literal></expr>;</expr_stmt></then></if>
						}</block></then></if>
						<if pos:line="314" pos:column="49">if <condition pos:line="314" pos:column="52">(<expr><name pos:line="314" pos:column="53">digit</name> <op:operator pos:line="314" pos:column="59">&lt;</op:operator> <name pos:line="314" pos:column="61">numBase</name></expr>)</condition><then pos:line="314" pos:column="69">
							<break pos:line="315" pos:column="57">break;</break></then></if>
						<if pos:line="316" pos:column="49">if <condition pos:line="316" pos:column="52">(<expr><name pos:line="316" pos:column="53">digit</name> <op:operator pos:line="316" pos:column="59">&lt;=</op:operator> <lit:literal type="number" pos:line="316" pos:column="62">9</lit:literal></expr>)</condition><then pos:line="316" pos:column="64"> <block pos:line="316" pos:column="65">{
							<expr_stmt><expr><name pos:line="317" pos:column="57">numBase</name> <op:operator pos:line="317" pos:column="65">=</op:operator> <name pos:line="317" pos:column="67">BASH_BASE_ERROR</name></expr>;</expr_stmt>
							<break pos:line="318" pos:column="57">break;</break>
						}</block></then></if>
					}</block></then></if>
				}</block></else></if></else></if></else></if></else></if>
				<comment type="line" pos:line="322" pos:column="33">// fallthrough when number is at an end or error</comment>
				<if pos:line="323" pos:column="33">if <condition pos:line="323" pos:column="36">(<expr><name pos:line="323" pos:column="37">numBase</name> <op:operator pos:line="323" pos:column="45">==</op:operator> <name pos:line="323" pos:column="48">BASH_BASE_ERROR</name>
<cpp:ifdef pos:line="324" pos:column="1">#<cpp:directive pos:line="324" pos:column="2">ifdef</cpp:directive> <name pos:line="324" pos:column="8">PEDANTIC_OCTAL</name></cpp:ifdef>
					<op:operator pos:line="325" pos:column="41">||</op:operator> <name pos:line="325" pos:column="44">numBase</name> <op:operator pos:line="325" pos:column="52">==</op:operator> <name pos:line="325" pos:column="55">BASH_BASE_OCTAL_ERROR</name></expr>
<cpp:endif pos:line="326" pos:column="1">#<cpp:directive pos:line="326" pos:column="2">endif</cpp:directive></cpp:endif>
				)</condition><then pos:line="327" pos:column="34"> <block pos:line="327" pos:column="35">{
					<expr_stmt><expr><call><name><name pos:line="328" pos:column="41">sc</name><op:operator pos:line="328" pos:column="43">.</op:operator><name pos:line="328" pos:column="44">ChangeState</name></name><argument_list pos:line="328" pos:column="55">(<argument><expr><name pos:line="328" pos:column="56">SCE_SH_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="330" pos:column="33">sc</name><op:operator pos:line="330" pos:column="35">.</op:operator><name pos:line="330" pos:column="36">SetState</name></name><argument_list pos:line="330" pos:column="44">(<argument><expr><name pos:line="330" pos:column="45">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="331" pos:column="33">break;</break>
			</case><case pos:line="332" pos:column="25">case <expr><name pos:line="332" pos:column="30">SCE_SH_COMMENTLINE</name></expr>:
				<if pos:line="333" pos:column="33">if <condition pos:line="333" pos:column="36">(<expr><name><name pos:line="333" pos:column="37">sc</name><op:operator pos:line="333" pos:column="39">.</op:operator><name pos:line="333" pos:column="40">atLineEnd</name></name> <op:operator pos:line="333" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="333" pos:column="53">sc</name><op:operator pos:line="333" pos:column="55">.</op:operator><name pos:line="333" pos:column="56">chPrev</name></name> <op:operator pos:line="333" pos:column="63">!=</op:operator> <lit:literal type="char" pos:line="333" pos:column="66">'\\'</lit:literal></expr>)</condition><then pos:line="333" pos:column="71"> <block pos:line="333" pos:column="72">{
					<expr_stmt><expr><call><name><name pos:line="334" pos:column="41">sc</name><op:operator pos:line="334" pos:column="43">.</op:operator><name pos:line="334" pos:column="44">SetState</name></name><argument_list pos:line="334" pos:column="52">(<argument><expr><name pos:line="334" pos:column="53">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="336" pos:column="33">break;</break>
			</case><case pos:line="337" pos:column="25">case <expr><name pos:line="337" pos:column="30">SCE_SH_HERE_DELIM</name></expr>:
				<comment type="line" pos:line="338" pos:column="33">// From Bash info:</comment>
				<comment type="line" pos:line="339" pos:column="33">// ---------------</comment>
				<comment type="line" pos:line="340" pos:column="33">// Specifier format is: &lt;&lt;[-]WORD</comment>
				<comment type="line" pos:line="341" pos:column="33">// Optional '-' is for removal of leading tabs from here-doc.</comment>
				<comment type="line" pos:line="342" pos:column="33">// Whitespace acceptable after &lt;&lt;[-] operator</comment>
				<comment type="line" pos:line="343" pos:column="33">//</comment>
				<if pos:line="344" pos:column="33">if <condition pos:line="344" pos:column="36">(<expr><name><name pos:line="344" pos:column="37">HereDoc</name><op:operator pos:line="344" pos:column="44">.</op:operator><name pos:line="344" pos:column="45">State</name></name> <op:operator pos:line="344" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="344" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="344" pos:column="56"> <block pos:line="344" pos:column="57">{ <comment type="line" pos:line="344" pos:column="59">// '&lt;&lt;' encountered</comment>
					<expr_stmt><expr><name><name pos:line="345" pos:column="41">HereDoc</name><op:operator pos:line="345" pos:column="48">.</op:operator><name pos:line="345" pos:column="49">Quote</name></name> <op:operator pos:line="345" pos:column="55">=</op:operator> <name><name pos:line="345" pos:column="57">sc</name><op:operator pos:line="345" pos:column="59">.</op:operator><name pos:line="345" pos:column="60">chNext</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="346" pos:column="41">HereDoc</name><op:operator pos:line="346" pos:column="48">.</op:operator><name pos:line="346" pos:column="49">Quoted</name></name> <op:operator pos:line="346" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="346" pos:column="58">false</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="347" pos:column="41">HereDoc</name><op:operator pos:line="347" pos:column="48">.</op:operator><name pos:line="347" pos:column="49">DelimiterLength</name></name> <op:operator pos:line="347" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="347" pos:column="67">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="348" pos:column="41">HereDoc</name><op:operator pos:line="348" pos:column="48">.</op:operator><name pos:line="348" pos:column="49">Delimiter</name><index pos:line="348" pos:column="58">[<expr><name><name pos:line="348" pos:column="59">HereDoc</name><op:operator pos:line="348" pos:column="66">.</op:operator><name pos:line="348" pos:column="67">DelimiterLength</name></name></expr>]</index></name> <op:operator pos:line="348" pos:column="84">=</op:operator> <lit:literal type="char" pos:line="348" pos:column="86">'\0'</lit:literal></expr>;</expr_stmt>
					<if pos:line="349" pos:column="41">if <condition pos:line="349" pos:column="44">(<expr><name><name pos:line="349" pos:column="45">sc</name><op:operator pos:line="349" pos:column="47">.</op:operator><name pos:line="349" pos:column="48">chNext</name></name> <op:operator pos:line="349" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="349" pos:column="58">'\''</lit:literal> <op:operator pos:line="349" pos:column="63">||</op:operator> <name><name pos:line="349" pos:column="66">sc</name><op:operator pos:line="349" pos:column="68">.</op:operator><name pos:line="349" pos:column="69">chNext</name></name> <op:operator pos:line="349" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="349" pos:column="79">'\"'</lit:literal></expr>)</condition><then pos:line="349" pos:column="84"> <block pos:line="349" pos:column="85">{	<comment type="line" pos:line="349" pos:column="89">// a quoted here-doc delimiter (' or ")</comment>
						<expr_stmt><expr><call><name><name pos:line="350" pos:column="49">sc</name><op:operator pos:line="350" pos:column="51">.</op:operator><name pos:line="350" pos:column="52">Forward</name></name><argument_list pos:line="350" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="351" pos:column="49">HereDoc</name><op:operator pos:line="351" pos:column="56">.</op:operator><name pos:line="351" pos:column="57">Quoted</name></name> <op:operator pos:line="351" pos:column="64">=</op:operator> <lit:literal type="boolean" pos:line="351" pos:column="66">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="352" pos:column="49">HereDoc</name><op:operator pos:line="352" pos:column="56">.</op:operator><name pos:line="352" pos:column="57">State</name></name> <op:operator pos:line="352" pos:column="63">=</op:operator> <lit:literal type="number" pos:line="352" pos:column="65">1</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="353" pos:column="43">else <if pos:line="353" pos:column="48">if <condition pos:line="353" pos:column="51">(<expr><op:operator pos:line="353" pos:column="52">!</op:operator><name><name pos:line="353" pos:column="53">HereDoc</name><op:operator pos:line="353" pos:column="60">.</op:operator><name pos:line="353" pos:column="61">Indent</name></name> <op:operator pos:line="353" pos:column="68">&amp;&amp;</op:operator> <name><name pos:line="353" pos:column="71">sc</name><op:operator pos:line="353" pos:column="73">.</op:operator><name pos:line="353" pos:column="74">chNext</name></name> <op:operator pos:line="353" pos:column="81">==</op:operator> <lit:literal type="char" pos:line="353" pos:column="84">'-'</lit:literal></expr>)</condition><then pos:line="353" pos:column="88"> <block pos:line="353" pos:column="89">{	<comment type="line" pos:line="353" pos:column="97">// &lt;&lt;- indent case</comment>
						<expr_stmt><expr><name><name pos:line="354" pos:column="49">HereDoc</name><op:operator pos:line="354" pos:column="56">.</op:operator><name pos:line="354" pos:column="57">Indent</name></name> <op:operator pos:line="354" pos:column="64">=</op:operator> <lit:literal type="boolean" pos:line="354" pos:column="66">true</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="355" pos:column="43">else <if pos:line="355" pos:column="48">if <condition pos:line="355" pos:column="51">(<expr><call><name><name pos:line="355" pos:column="52">setHereDoc</name><op:operator pos:line="355" pos:column="62">.</op:operator><name pos:line="355" pos:column="63">Contains</name></name><argument_list pos:line="355" pos:column="71">(<argument><expr><name><name pos:line="355" pos:column="72">sc</name><op:operator pos:line="355" pos:column="74">.</op:operator><name pos:line="355" pos:column="75">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="355" pos:column="83"> <block pos:line="355" pos:column="84">{
						<comment type="line" pos:line="356" pos:column="49">// an unquoted here-doc delimiter, no special handling</comment>
						<comment type="line" pos:line="357" pos:column="49">// TODO check what exactly bash considers part of the delim</comment>
						<expr_stmt><expr><name><name pos:line="358" pos:column="49">HereDoc</name><op:operator pos:line="358" pos:column="56">.</op:operator><name pos:line="358" pos:column="57">State</name></name> <op:operator pos:line="358" pos:column="63">=</op:operator> <lit:literal type="number" pos:line="358" pos:column="65">1</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="359" pos:column="43">else <if pos:line="359" pos:column="48">if <condition pos:line="359" pos:column="51">(<expr><name><name pos:line="359" pos:column="52">sc</name><op:operator pos:line="359" pos:column="54">.</op:operator><name pos:line="359" pos:column="55">chNext</name></name> <op:operator pos:line="359" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="359" pos:column="65">'&lt;'</lit:literal></expr>)</condition><then pos:line="359" pos:column="69"> <block pos:line="359" pos:column="70">{	<comment type="line" pos:line="359" pos:column="73">// HERE string &lt;&lt;&lt;</comment>
						<expr_stmt><expr><call><name><name pos:line="360" pos:column="49">sc</name><op:operator pos:line="360" pos:column="51">.</op:operator><name pos:line="360" pos:column="52">Forward</name></name><argument_list pos:line="360" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="361" pos:column="49">sc</name><op:operator pos:line="361" pos:column="51">.</op:operator><name pos:line="361" pos:column="52">ForwardSetState</name></name><argument_list pos:line="361" pos:column="67">(<argument><expr><name pos:line="361" pos:column="68">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="362" pos:column="43">else <if pos:line="362" pos:column="48">if <condition pos:line="362" pos:column="51">(<expr><call><name pos:line="362" pos:column="52">IsASpace</name><argument_list pos:line="362" pos:column="60">(<argument><expr><name><name pos:line="362" pos:column="61">sc</name><op:operator pos:line="362" pos:column="63">.</op:operator><name pos:line="362" pos:column="64">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="362" pos:column="72"> <block pos:line="362" pos:column="73">{
						<comment type="line" pos:line="363" pos:column="49">// eat whitespace</comment>
					}</block></then> <else pos:line="364" pos:column="43">else <if pos:line="364" pos:column="48">if <condition pos:line="364" pos:column="51">(<expr><call><name><name pos:line="364" pos:column="52">setLeftShift</name><op:operator pos:line="364" pos:column="64">.</op:operator><name pos:line="364" pos:column="65">Contains</name></name><argument_list pos:line="364" pos:column="73">(<argument><expr><name><name pos:line="364" pos:column="74">sc</name><op:operator pos:line="364" pos:column="76">.</op:operator><name pos:line="364" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="364" pos:column="85"> <block pos:line="364" pos:column="86">{
						<comment type="line" pos:line="365" pos:column="49">// left shift &lt;&lt; or &lt;&lt;= operator cases</comment>
						<expr_stmt><expr><call><name><name pos:line="366" pos:column="49">sc</name><op:operator pos:line="366" pos:column="51">.</op:operator><name pos:line="366" pos:column="52">ChangeState</name></name><argument_list pos:line="366" pos:column="63">(<argument><expr><name pos:line="366" pos:column="64">SCE_SH_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="367" pos:column="49">sc</name><op:operator pos:line="367" pos:column="51">.</op:operator><name pos:line="367" pos:column="52">ForwardSetState</name></name><argument_list pos:line="367" pos:column="67">(<argument><expr><name pos:line="367" pos:column="68">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="368" pos:column="43">else <block pos:line="368" pos:column="48">{
						<comment type="line" pos:line="369" pos:column="49">// symbols terminates; deprecated zero-length delimiter</comment>
						<expr_stmt><expr><name><name pos:line="370" pos:column="49">HereDoc</name><op:operator pos:line="370" pos:column="56">.</op:operator><name pos:line="370" pos:column="57">State</name></name> <op:operator pos:line="370" pos:column="63">=</op:operator> <lit:literal type="number" pos:line="370" pos:column="65">1</lit:literal></expr>;</expr_stmt>
					}</block></else></if></else></if></else></if></else></if></else></if></else></if>
				}</block></then> <else pos:line="372" pos:column="35">else <if pos:line="372" pos:column="40">if <condition pos:line="372" pos:column="43">(<expr><name><name pos:line="372" pos:column="44">HereDoc</name><op:operator pos:line="372" pos:column="51">.</op:operator><name pos:line="372" pos:column="52">State</name></name> <op:operator pos:line="372" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="372" pos:column="61">1</lit:literal></expr>)</condition><then pos:line="372" pos:column="63"> <block pos:line="372" pos:column="64">{ <comment type="line" pos:line="372" pos:column="66">// collect the delimiter</comment>
					<if pos:line="373" pos:column="41">if <condition pos:line="373" pos:column="44">(<expr><call><name><name pos:line="373" pos:column="45">setHereDoc2</name><op:operator pos:line="373" pos:column="56">.</op:operator><name pos:line="373" pos:column="57">Contains</name></name><argument_list pos:line="373" pos:column="65">(<argument><expr><name><name pos:line="373" pos:column="66">sc</name><op:operator pos:line="373" pos:column="68">.</op:operator><name pos:line="373" pos:column="69">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="373" pos:column="73">||</op:operator> <name><name pos:line="373" pos:column="76">sc</name><op:operator pos:line="373" pos:column="78">.</op:operator><name pos:line="373" pos:column="79">chPrev</name></name> <op:operator pos:line="373" pos:column="86">==</op:operator> <lit:literal type="char" pos:line="373" pos:column="89">'\\'</lit:literal></expr>)</condition><then pos:line="373" pos:column="94"> <block pos:line="373" pos:column="95">{
						<expr_stmt><expr><call><name><name pos:line="374" pos:column="49">HereDoc</name><op:operator pos:line="374" pos:column="56">.</op:operator><name pos:line="374" pos:column="57">Append</name></name><argument_list pos:line="374" pos:column="63">(<argument><expr><name><name pos:line="374" pos:column="64">sc</name><op:operator pos:line="374" pos:column="66">.</op:operator><name pos:line="374" pos:column="67">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="375" pos:column="43">else <if pos:line="375" pos:column="48">if <condition pos:line="375" pos:column="51">(<expr><name><name pos:line="375" pos:column="52">HereDoc</name><op:operator pos:line="375" pos:column="59">.</op:operator><name pos:line="375" pos:column="60">Quoted</name></name> <op:operator pos:line="375" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="375" pos:column="70">sc</name><op:operator pos:line="375" pos:column="72">.</op:operator><name pos:line="375" pos:column="73">ch</name></name> <op:operator pos:line="375" pos:column="76">==</op:operator> <name><name pos:line="375" pos:column="79">HereDoc</name><op:operator pos:line="375" pos:column="86">.</op:operator><name pos:line="375" pos:column="87">Quote</name></name></expr>)</condition><then pos:line="375" pos:column="93"> <block pos:line="375" pos:column="94">{	<comment type="line" pos:line="375" pos:column="97">// closing quote =&gt; end of delimiter</comment>
						<expr_stmt><expr><call><name><name pos:line="376" pos:column="49">sc</name><op:operator pos:line="376" pos:column="51">.</op:operator><name pos:line="376" pos:column="52">ForwardSetState</name></name><argument_list pos:line="376" pos:column="67">(<argument><expr><name pos:line="376" pos:column="68">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="377" pos:column="43">else <if pos:line="377" pos:column="48">if <condition pos:line="377" pos:column="51">(<expr><name><name pos:line="377" pos:column="52">sc</name><op:operator pos:line="377" pos:column="54">.</op:operator><name pos:line="377" pos:column="55">ch</name></name> <op:operator pos:line="377" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="377" pos:column="61">'\\'</lit:literal></expr>)</condition><then pos:line="377" pos:column="66"> <block pos:line="377" pos:column="67">{
						<comment type="line" pos:line="378" pos:column="49">// skip escape prefix</comment>
					}</block></then> <else pos:line="379" pos:column="43">else <block pos:line="379" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="380" pos:column="49">sc</name><op:operator pos:line="380" pos:column="51">.</op:operator><name pos:line="380" pos:column="52">SetState</name></name><argument_list pos:line="380" pos:column="60">(<argument><expr><name pos:line="380" pos:column="61">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if></else></if></else></if>
					<if pos:line="382" pos:column="41">if <condition pos:line="382" pos:column="44">(<expr><name><name pos:line="382" pos:column="45">HereDoc</name><op:operator pos:line="382" pos:column="52">.</op:operator><name pos:line="382" pos:column="53">DelimiterLength</name></name> <op:operator pos:line="382" pos:column="69">&gt;=</op:operator> <name pos:line="382" pos:column="72">HERE_DELIM_MAX</name> <op:operator pos:line="382" pos:column="87">-</op:operator> <lit:literal type="number" pos:line="382" pos:column="89">1</lit:literal></expr>)</condition><then pos:line="382" pos:column="91"> <block pos:line="382" pos:column="92">{	<comment type="line" pos:line="382" pos:column="97">// force blowup</comment>
						<expr_stmt><expr><call><name><name pos:line="383" pos:column="49">sc</name><op:operator pos:line="383" pos:column="51">.</op:operator><name pos:line="383" pos:column="52">SetState</name></name><argument_list pos:line="383" pos:column="60">(<argument><expr><name pos:line="383" pos:column="61">SCE_SH_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="384" pos:column="49">HereDoc</name><op:operator pos:line="384" pos:column="56">.</op:operator><name pos:line="384" pos:column="57">State</name></name> <op:operator pos:line="384" pos:column="63">=</op:operator> <lit:literal type="number" pos:line="384" pos:column="65">0</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="387" pos:column="33">break;</break>
			</case><case pos:line="388" pos:column="25">case <expr><name pos:line="388" pos:column="30">SCE_SH_HERE_Q</name></expr>:
				<comment type="line" pos:line="389" pos:column="33">// HereDoc.State == 2</comment>
				<if pos:line="390" pos:column="33">if <condition pos:line="390" pos:column="36">(<expr><name><name pos:line="390" pos:column="37">sc</name><op:operator pos:line="390" pos:column="39">.</op:operator><name pos:line="390" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="390" pos:column="52"> <block pos:line="390" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="391" pos:column="41">sc</name><op:operator pos:line="391" pos:column="43">.</op:operator><name pos:line="391" pos:column="44">SetState</name></name><argument_list pos:line="391" pos:column="52">(<argument><expr><name pos:line="391" pos:column="53">SCE_SH_HERE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="392" pos:column="41">int</name></type> <name pos:line="392" pos:column="45">prefixws</name> <init pos:line="392" pos:column="54">= <expr><lit:literal type="number" pos:line="392" pos:column="56">0</lit:literal></expr></init></decl>;</decl_stmt>
					<while pos:line="393" pos:column="41">while <condition pos:line="393" pos:column="47">(<expr><call><name pos:line="393" pos:column="48">IsASpace</name><argument_list pos:line="393" pos:column="56">(<argument><expr><name><name pos:line="393" pos:column="57">sc</name><op:operator pos:line="393" pos:column="59">.</op:operator><name pos:line="393" pos:column="60">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="393" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="393" pos:column="67">!</op:operator><name><name pos:line="393" pos:column="68">sc</name><op:operator pos:line="393" pos:column="70">.</op:operator><name pos:line="393" pos:column="71">atLineEnd</name></name></expr>)</condition> <block pos:line="393" pos:column="82">{	<comment type="line" pos:line="393" pos:column="89">// whitespace prefix</comment>
						<expr_stmt><expr><call><name><name pos:line="394" pos:column="49">sc</name><op:operator pos:line="394" pos:column="51">.</op:operator><name pos:line="394" pos:column="52">Forward</name></name><argument_list pos:line="394" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="395" pos:column="49">prefixws</name><op:operator pos:line="395" pos:column="57">++</op:operator></expr>;</expr_stmt>
					}</block></while>
					<if pos:line="397" pos:column="41">if <condition pos:line="397" pos:column="44">(<expr><name pos:line="397" pos:column="45">prefixws</name> <op:operator pos:line="397" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="397" pos:column="56">0</lit:literal></expr>)</condition><then pos:line="397" pos:column="58">
						<expr_stmt><expr><call><name><name pos:line="398" pos:column="49">sc</name><op:operator pos:line="398" pos:column="51">.</op:operator><name pos:line="398" pos:column="52">SetState</name></name><argument_list pos:line="398" pos:column="60">(<argument><expr><name pos:line="398" pos:column="61">SCE_SH_HERE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<while pos:line="399" pos:column="41">while <condition pos:line="399" pos:column="47">(<expr><op:operator pos:line="399" pos:column="48">!</op:operator><name><name pos:line="399" pos:column="49">sc</name><op:operator pos:line="399" pos:column="51">.</op:operator><name pos:line="399" pos:column="52">atLineEnd</name></name></expr>)</condition> <block pos:line="399" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="400" pos:column="49">sc</name><op:operator pos:line="400" pos:column="51">.</op:operator><name pos:line="400" pos:column="52">Forward</name></name><argument_list pos:line="400" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					<decl_stmt><decl><type><name pos:line="402" pos:column="41">char</name></type> <name><name pos:line="402" pos:column="46">s</name><index pos:line="402" pos:column="47">[<expr><name pos:line="402" pos:column="48">HERE_DELIM_MAX</name></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="403" pos:column="41">sc</name><op:operator pos:line="403" pos:column="43">.</op:operator><name pos:line="403" pos:column="44">GetCurrent</name></name><argument_list pos:line="403" pos:column="54">(<argument><expr><name pos:line="403" pos:column="55">s</name></expr></argument>, <argument><expr><sizeof pos:line="403" pos:column="58">sizeof<argument_list pos:line="403" pos:column="64">(<argument><expr><name pos:line="403" pos:column="65">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="404" pos:column="41">if <condition pos:line="404" pos:column="44">(<expr><call><name><name pos:line="404" pos:column="45">sc</name><op:operator pos:line="404" pos:column="47">.</op:operator><name pos:line="404" pos:column="48">LengthCurrent</name></name><argument_list pos:line="404" pos:column="61">()</argument_list></call> <op:operator pos:line="404" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="404" pos:column="67">0</lit:literal></expr>)</condition><then pos:line="404" pos:column="69">
						<break pos:line="405" pos:column="49">break;</break></then></if>
					<if pos:line="406" pos:column="41">if <condition pos:line="406" pos:column="44">(<expr><name><name pos:line="406" pos:column="45">s</name><index pos:line="406" pos:column="46">[<expr><call><name pos:line="406" pos:column="47">strlen</name><argument_list pos:line="406" pos:column="53">(<argument><expr><name pos:line="406" pos:column="54">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="406" pos:column="57">-</op:operator> <lit:literal type="number" pos:line="406" pos:column="59">1</lit:literal></expr>]</index></name> <op:operator pos:line="406" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="406" pos:column="65">'\r'</lit:literal></expr>)</condition><then pos:line="406" pos:column="70">
						<expr_stmt><expr><name><name pos:line="407" pos:column="49">s</name><index pos:line="407" pos:column="50">[<expr><call><name pos:line="407" pos:column="51">strlen</name><argument_list pos:line="407" pos:column="57">(<argument><expr><name pos:line="407" pos:column="58">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="407" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="407" pos:column="63">1</lit:literal></expr>]</index></name> <op:operator pos:line="407" pos:column="66">=</op:operator> <lit:literal type="char" pos:line="407" pos:column="68">'\0'</lit:literal></expr>;</expr_stmt></then></if>
					<if pos:line="408" pos:column="41">if <condition pos:line="408" pos:column="44">(<expr><call><name pos:line="408" pos:column="45">strcmp</name><argument_list pos:line="408" pos:column="51">(<argument><expr><name><name pos:line="408" pos:column="52">HereDoc</name><op:operator pos:line="408" pos:column="59">.</op:operator><name pos:line="408" pos:column="60">Delimiter</name></name></expr></argument>, <argument><expr><name pos:line="408" pos:column="71">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="408" pos:column="74">==</op:operator> <lit:literal type="number" pos:line="408" pos:column="77">0</lit:literal></expr>)</condition><then pos:line="408" pos:column="79"> <block pos:line="408" pos:column="80">{
						<if pos:line="409" pos:column="49">if <condition pos:line="409" pos:column="52">(<expr><op:operator pos:line="409" pos:column="53">(</op:operator><name pos:line="409" pos:column="54">prefixws</name> <op:operator pos:line="409" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="409" pos:column="66">0</lit:literal><op:operator pos:line="409" pos:column="67">)</op:operator> <op:operator pos:line="409" pos:column="69">||</op:operator>	<comment type="line" pos:line="409" pos:column="73">// indentation rule</comment>
							<op:operator pos:line="410" pos:column="57">(</op:operator><name pos:line="410" pos:column="58">prefixws</name> <op:operator pos:line="410" pos:column="67">&gt;</op:operator> <lit:literal type="number" pos:line="410" pos:column="69">0</lit:literal> <op:operator pos:line="410" pos:column="71">&amp;&amp;</op:operator> <name><name pos:line="410" pos:column="74">HereDoc</name><op:operator pos:line="410" pos:column="81">.</op:operator><name pos:line="410" pos:column="82">Indent</name></name><op:operator pos:line="410" pos:column="88">)</op:operator></expr>)</condition><then pos:line="410" pos:column="90"> <block pos:line="410" pos:column="91">{
							<expr_stmt><expr><call><name><name pos:line="411" pos:column="57">sc</name><op:operator pos:line="411" pos:column="59">.</op:operator><name pos:line="411" pos:column="60">SetState</name></name><argument_list pos:line="411" pos:column="68">(<argument><expr><name pos:line="411" pos:column="69">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break pos:line="412" pos:column="57">break;</break>
						}</block></then></if>
					}</block></then></if>
				}</block></then></if>
				<break pos:line="416" pos:column="33">break;</break>
			</case><case pos:line="417" pos:column="25">case <expr><name pos:line="417" pos:column="30">SCE_SH_SCALAR</name></expr>:	<comment type="line" pos:line="417" pos:column="49">// variable names</comment>
				<if pos:line="418" pos:column="33">if <condition pos:line="418" pos:column="36">(<expr><op:operator pos:line="418" pos:column="37">!</op:operator><call><name><name pos:line="418" pos:column="38">setParam</name><op:operator pos:line="418" pos:column="46">.</op:operator><name pos:line="418" pos:column="47">Contains</name></name><argument_list pos:line="418" pos:column="55">(<argument><expr><name><name pos:line="418" pos:column="56">sc</name><op:operator pos:line="418" pos:column="58">.</op:operator><name pos:line="418" pos:column="59">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="418" pos:column="63"> <block pos:line="418" pos:column="64">{
					<if pos:line="419" pos:column="41">if <condition pos:line="419" pos:column="44">(<expr><call><name><name pos:line="419" pos:column="45">sc</name><op:operator pos:line="419" pos:column="47">.</op:operator><name pos:line="419" pos:column="48">LengthCurrent</name></name><argument_list pos:line="419" pos:column="61">()</argument_list></call> <op:operator pos:line="419" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="419" pos:column="67">1</lit:literal></expr>)</condition><then pos:line="419" pos:column="69"> <block pos:line="419" pos:column="70">{
						<comment type="line" pos:line="420" pos:column="49">// Special variable: $(, $_ etc.</comment>
						<expr_stmt><expr><call><name><name pos:line="421" pos:column="49">sc</name><op:operator pos:line="421" pos:column="51">.</op:operator><name pos:line="421" pos:column="52">ForwardSetState</name></name><argument_list pos:line="421" pos:column="67">(<argument><expr><name pos:line="421" pos:column="68">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="422" pos:column="43">else <block pos:line="422" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="423" pos:column="49">sc</name><op:operator pos:line="423" pos:column="51">.</op:operator><name pos:line="423" pos:column="52">SetState</name></name><argument_list pos:line="423" pos:column="60">(<argument><expr><name pos:line="423" pos:column="61">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
				<break pos:line="426" pos:column="33">break;</break>
			</case><case pos:line="427" pos:column="25">case <expr><name pos:line="427" pos:column="30">SCE_SH_STRING</name></expr>:	<comment type="line" pos:line="427" pos:column="49">// delimited styles</comment>
			</case><case pos:line="428" pos:column="25">case <expr><name pos:line="428" pos:column="30">SCE_SH_CHARACTER</name></expr>:
			</case><case pos:line="429" pos:column="25">case <expr><name pos:line="429" pos:column="30">SCE_SH_BACKTICKS</name></expr>:
			</case><case pos:line="430" pos:column="25">case <expr><name pos:line="430" pos:column="30">SCE_SH_PARAM</name></expr>:
				<if pos:line="431" pos:column="33">if <condition pos:line="431" pos:column="36">(<expr><name><name pos:line="431" pos:column="37">sc</name><op:operator pos:line="431" pos:column="39">.</op:operator><name pos:line="431" pos:column="40">ch</name></name> <op:operator pos:line="431" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="431" pos:column="46">'\\'</lit:literal> <op:operator pos:line="431" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="431" pos:column="54">Quote</name><op:operator pos:line="431" pos:column="59">.</op:operator><name pos:line="431" pos:column="60">Up</name></name> <op:operator pos:line="431" pos:column="63">!=</op:operator> <lit:literal type="char" pos:line="431" pos:column="66">'\\'</lit:literal></expr>)</condition><then pos:line="431" pos:column="71"> <block pos:line="431" pos:column="72">{
					<expr_stmt><expr><call><name><name pos:line="432" pos:column="41">sc</name><op:operator pos:line="432" pos:column="43">.</op:operator><name pos:line="432" pos:column="44">Forward</name></name><argument_list pos:line="432" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="433" pos:column="35">else <if pos:line="433" pos:column="40">if <condition pos:line="433" pos:column="43">(<expr><name><name pos:line="433" pos:column="44">sc</name><op:operator pos:line="433" pos:column="46">.</op:operator><name pos:line="433" pos:column="47">ch</name></name> <op:operator pos:line="433" pos:column="50">==</op:operator> <name><name pos:line="433" pos:column="53">Quote</name><op:operator pos:line="433" pos:column="58">.</op:operator><name pos:line="433" pos:column="59">Down</name></name></expr>)</condition><then pos:line="433" pos:column="64"> <block pos:line="433" pos:column="65">{
					<expr_stmt><expr><name><name pos:line="434" pos:column="41">Quote</name><op:operator pos:line="434" pos:column="46">.</op:operator><name pos:line="434" pos:column="47">Count</name></name><op:operator pos:line="434" pos:column="52">--</op:operator></expr>;</expr_stmt>
					<if pos:line="435" pos:column="41">if <condition pos:line="435" pos:column="44">(<expr><name><name pos:line="435" pos:column="45">Quote</name><op:operator pos:line="435" pos:column="50">.</op:operator><name pos:line="435" pos:column="51">Count</name></name> <op:operator pos:line="435" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="435" pos:column="60">0</lit:literal></expr>)</condition><then pos:line="435" pos:column="62"> <block pos:line="435" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="436" pos:column="49">sc</name><op:operator pos:line="436" pos:column="51">.</op:operator><name pos:line="436" pos:column="52">ForwardSetState</name></name><argument_list pos:line="436" pos:column="67">(<argument><expr><name pos:line="436" pos:column="68">SCE_SH_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="438" pos:column="35">else <if pos:line="438" pos:column="40">if <condition pos:line="438" pos:column="43">(<expr><name><name pos:line="438" pos:column="44">sc</name><op:operator pos:line="438" pos:column="46">.</op:operator><name pos:line="438" pos:column="47">ch</name></name> <op:operator pos:line="438" pos:column="50">==</op:operator> <name><name pos:line="438" pos:column="53">Quote</name><op:operator pos:line="438" pos:column="58">.</op:operator><name pos:line="438" pos:column="59">Up</name></name></expr>)</condition><then pos:line="438" pos:column="62"> <block pos:line="438" pos:column="63">{
					<expr_stmt><expr><name><name pos:line="439" pos:column="41">Quote</name><op:operator pos:line="439" pos:column="46">.</op:operator><name pos:line="439" pos:column="47">Count</name></name><op:operator pos:line="439" pos:column="52">++</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="441" pos:column="33">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="444" pos:column="17">// Must check end of HereDoc state 1 before default state is handled</comment>
		<if pos:line="445" pos:column="17">if <condition pos:line="445" pos:column="20">(<expr><name><name pos:line="445" pos:column="21">HereDoc</name><op:operator pos:line="445" pos:column="28">.</op:operator><name pos:line="445" pos:column="29">State</name></name> <op:operator pos:line="445" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="445" pos:column="38">1</lit:literal> <op:operator pos:line="445" pos:column="40">&amp;&amp;</op:operator> <name><name pos:line="445" pos:column="43">sc</name><op:operator pos:line="445" pos:column="45">.</op:operator><name pos:line="445" pos:column="46">atLineEnd</name></name></expr>)</condition><then pos:line="445" pos:column="56"> <block pos:line="445" pos:column="57">{
			<comment type="line" pos:line="446" pos:column="25">// Begin of here-doc (the line after the here-doc delimiter):</comment>
			<comment type="line" pos:line="447" pos:column="25">// Lexically, the here-doc starts from the next line after the &gt;&gt;, but the</comment>
			<comment type="line" pos:line="448" pos:column="25">// first line of here-doc seem to follow the style of the last EOL sequence</comment>
			<expr_stmt><expr><name><name pos:line="449" pos:column="25">HereDoc</name><op:operator pos:line="449" pos:column="32">.</op:operator><name pos:line="449" pos:column="33">State</name></name> <op:operator pos:line="449" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="449" pos:column="41">2</lit:literal></expr>;</expr_stmt>
			<if pos:line="450" pos:column="25">if <condition pos:line="450" pos:column="28">(<expr><name><name pos:line="450" pos:column="29">HereDoc</name><op:operator pos:line="450" pos:column="36">.</op:operator><name pos:line="450" pos:column="37">Quoted</name></name></expr>)</condition><then pos:line="450" pos:column="44"> <block pos:line="450" pos:column="45">{
				<if pos:line="451" pos:column="33">if <condition pos:line="451" pos:column="36">(<expr><name><name pos:line="451" pos:column="37">sc</name><op:operator pos:line="451" pos:column="39">.</op:operator><name pos:line="451" pos:column="40">state</name></name> <op:operator pos:line="451" pos:column="46">==</op:operator> <name pos:line="451" pos:column="49">SCE_SH_HERE_DELIM</name></expr>)</condition><then pos:line="451" pos:column="67"> <block pos:line="451" pos:column="68">{
					<comment type="line" pos:line="452" pos:column="41">// Missing quote at end of string! We are stricter than bash.</comment>
					<comment type="line" pos:line="453" pos:column="41">// Colour here-doc anyway while marking this bit as an error.</comment>
					<expr_stmt><expr><call><name><name pos:line="454" pos:column="41">sc</name><op:operator pos:line="454" pos:column="43">.</op:operator><name pos:line="454" pos:column="44">ChangeState</name></name><argument_list pos:line="454" pos:column="55">(<argument><expr><name pos:line="454" pos:column="56">SCE_SH_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="456" pos:column="33">// HereDoc.Quote always == '\''</comment>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="458" pos:column="25">sc</name><op:operator pos:line="458" pos:column="27">.</op:operator><name pos:line="458" pos:column="28">SetState</name></name><argument_list pos:line="458" pos:column="36">(<argument><expr><name pos:line="458" pos:column="37">SCE_SH_HERE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="461" pos:column="17">// update cmdState about the current command segment</comment>
		<if pos:line="462" pos:column="17">if <condition pos:line="462" pos:column="20">(<expr><name pos:line="462" pos:column="21">stylePrev</name> <op:operator pos:line="462" pos:column="31">!=</op:operator> <name pos:line="462" pos:column="34">SCE_SH_DEFAULT</name> <op:operator pos:line="462" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="462" pos:column="52">sc</name><op:operator pos:line="462" pos:column="54">.</op:operator><name pos:line="462" pos:column="55">state</name></name> <op:operator pos:line="462" pos:column="61">==</op:operator> <name pos:line="462" pos:column="64">SCE_SH_DEFAULT</name></expr>)</condition><then pos:line="462" pos:column="79"> <block pos:line="462" pos:column="80">{
			<expr_stmt><expr><name pos:line="463" pos:column="25">cmdState</name> <op:operator pos:line="463" pos:column="34">=</op:operator> <name pos:line="463" pos:column="36">cmdStateNew</name></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="465" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="466" pos:column="17">if <condition pos:line="466" pos:column="20">(<expr><name><name pos:line="466" pos:column="21">sc</name><op:operator pos:line="466" pos:column="23">.</op:operator><name pos:line="466" pos:column="24">state</name></name> <op:operator pos:line="466" pos:column="30">==</op:operator> <name pos:line="466" pos:column="33">SCE_SH_DEFAULT</name></expr>)</condition><then pos:line="466" pos:column="48"> <block pos:line="466" pos:column="49">{
			<if pos:line="467" pos:column="25">if <condition pos:line="467" pos:column="28">(<expr><name><name pos:line="467" pos:column="29">sc</name><op:operator pos:line="467" pos:column="31">.</op:operator><name pos:line="467" pos:column="32">ch</name></name> <op:operator pos:line="467" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="467" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="467" pos:column="43"> <block pos:line="467" pos:column="44">{
				<comment type="line" pos:line="468" pos:column="33">// Bash can escape any non-newline as a literal</comment>
				<expr_stmt><expr><call><name><name pos:line="469" pos:column="33">sc</name><op:operator pos:line="469" pos:column="35">.</op:operator><name pos:line="469" pos:column="36">SetState</name></name><argument_list pos:line="469" pos:column="44">(<argument><expr><name pos:line="469" pos:column="45">SCE_SH_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="470" pos:column="33">if <condition pos:line="470" pos:column="36">(<expr><name><name pos:line="470" pos:column="37">sc</name><op:operator pos:line="470" pos:column="39">.</op:operator><name pos:line="470" pos:column="40">chNext</name></name> <op:operator pos:line="470" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="470" pos:column="50">'\r'</lit:literal> <op:operator pos:line="470" pos:column="55">||</op:operator> <name><name pos:line="470" pos:column="58">sc</name><op:operator pos:line="470" pos:column="60">.</op:operator><name pos:line="470" pos:column="61">chNext</name></name> <op:operator pos:line="470" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="470" pos:column="71">'\n'</lit:literal></expr>)</condition><then pos:line="470" pos:column="76">
					<expr_stmt><expr><call><name><name pos:line="471" pos:column="41">sc</name><op:operator pos:line="471" pos:column="43">.</op:operator><name pos:line="471" pos:column="44">SetState</name></name><argument_list pos:line="471" pos:column="52">(<argument><expr><name pos:line="471" pos:column="53">SCE_SH_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="472" pos:column="27">else <if pos:line="472" pos:column="32">if <condition pos:line="472" pos:column="35">(<expr><call><name pos:line="472" pos:column="36">IsADigit</name><argument_list pos:line="472" pos:column="44">(<argument><expr><name><name pos:line="472" pos:column="45">sc</name><op:operator pos:line="472" pos:column="47">.</op:operator><name pos:line="472" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="472" pos:column="52"> <block pos:line="472" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="473" pos:column="33">sc</name><op:operator pos:line="473" pos:column="35">.</op:operator><name pos:line="473" pos:column="36">SetState</name></name><argument_list pos:line="473" pos:column="44">(<argument><expr><name pos:line="473" pos:column="45">SCE_SH_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="474" pos:column="33">numBase</name> <op:operator pos:line="474" pos:column="41">=</op:operator> <name pos:line="474" pos:column="43">BASH_BASE_DECIMAL</name></expr>;</expr_stmt>
				<if pos:line="475" pos:column="33">if <condition pos:line="475" pos:column="36">(<expr><name><name pos:line="475" pos:column="37">sc</name><op:operator pos:line="475" pos:column="39">.</op:operator><name pos:line="475" pos:column="40">ch</name></name> <op:operator pos:line="475" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="475" pos:column="46">'0'</lit:literal></expr>)</condition><then pos:line="475" pos:column="50"> <block pos:line="475" pos:column="51">{	<comment type="line" pos:line="475" pos:column="57">// hex,octal</comment>
					<if pos:line="476" pos:column="41">if <condition pos:line="476" pos:column="44">(<expr><name><name pos:line="476" pos:column="45">sc</name><op:operator pos:line="476" pos:column="47">.</op:operator><name pos:line="476" pos:column="48">chNext</name></name> <op:operator pos:line="476" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="476" pos:column="58">'x'</lit:literal> <op:operator pos:line="476" pos:column="62">||</op:operator> <name><name pos:line="476" pos:column="65">sc</name><op:operator pos:line="476" pos:column="67">.</op:operator><name pos:line="476" pos:column="68">chNext</name></name> <op:operator pos:line="476" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="476" pos:column="78">'X'</lit:literal></expr>)</condition><then pos:line="476" pos:column="82"> <block pos:line="476" pos:column="83">{
						<expr_stmt><expr><name pos:line="477" pos:column="49">numBase</name> <op:operator pos:line="477" pos:column="57">=</op:operator> <name pos:line="477" pos:column="59">BASH_BASE_HEX</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="478" pos:column="49">sc</name><op:operator pos:line="478" pos:column="51">.</op:operator><name pos:line="478" pos:column="52">Forward</name></name><argument_list pos:line="478" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="479" pos:column="43">else <if pos:line="479" pos:column="48">if <condition pos:line="479" pos:column="51">(<expr><call><name pos:line="479" pos:column="52">IsADigit</name><argument_list pos:line="479" pos:column="60">(<argument><expr><name><name pos:line="479" pos:column="61">sc</name><op:operator pos:line="479" pos:column="63">.</op:operator><name pos:line="479" pos:column="64">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="479" pos:column="72"> <block pos:line="479" pos:column="73">{
<cpp:ifdef pos:line="480" pos:column="1">#<cpp:directive pos:line="480" pos:column="2">ifdef</cpp:directive> <name pos:line="480" pos:column="8">PEDANTIC_OCTAL</name></cpp:ifdef>
						<expr_stmt><expr><name pos:line="481" pos:column="49">numBase</name> <op:operator pos:line="481" pos:column="57">=</op:operator> <name pos:line="481" pos:column="59">BASH_BASE_OCTAL</name></expr>;</expr_stmt>
<cpp:else pos:line="482" pos:column="1">#<cpp:directive pos:line="482" pos:column="2">else</cpp:directive></cpp:else>
						<expr_stmt><expr><name pos:line="483" pos:column="49">numBase</name> <op:operator pos:line="483" pos:column="57">=</op:operator> <name pos:line="483" pos:column="59">BASH_BASE_HEX</name></expr>;</expr_stmt>
<cpp:endif pos:line="484" pos:column="1">#<cpp:directive pos:line="484" pos:column="2">endif</cpp:directive></cpp:endif>
					}</block></then></if></else></if>
				}</block></then></if>
			}</block></then> <else pos:line="487" pos:column="27">else <if pos:line="487" pos:column="32">if <condition pos:line="487" pos:column="35">(<expr><call><name><name pos:line="487" pos:column="36">setWordStart</name><op:operator pos:line="487" pos:column="48">.</op:operator><name pos:line="487" pos:column="49">Contains</name></name><argument_list pos:line="487" pos:column="57">(<argument><expr><name><name pos:line="487" pos:column="58">sc</name><op:operator pos:line="487" pos:column="60">.</op:operator><name pos:line="487" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="487" pos:column="65"> <block pos:line="487" pos:column="66">{
				<expr_stmt><expr><call><name><name pos:line="488" pos:column="33">sc</name><op:operator pos:line="488" pos:column="35">.</op:operator><name pos:line="488" pos:column="36">SetState</name></name><argument_list pos:line="488" pos:column="44">(<argument><expr><name pos:line="488" pos:column="45">SCE_SH_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="489" pos:column="27">else <if pos:line="489" pos:column="32">if <condition pos:line="489" pos:column="35">(<expr><name><name pos:line="489" pos:column="36">sc</name><op:operator pos:line="489" pos:column="38">.</op:operator><name pos:line="489" pos:column="39">ch</name></name> <op:operator pos:line="489" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="489" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="489" pos:column="49"> <block pos:line="489" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="490" pos:column="33">sc</name><op:operator pos:line="490" pos:column="35">.</op:operator><name pos:line="490" pos:column="36">SetState</name></name><argument_list pos:line="490" pos:column="44">(<argument><expr><name pos:line="490" pos:column="45">SCE_SH_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="491" pos:column="27">else <if pos:line="491" pos:column="32">if <condition pos:line="491" pos:column="35">(<expr><name><name pos:line="491" pos:column="36">sc</name><op:operator pos:line="491" pos:column="38">.</op:operator><name pos:line="491" pos:column="39">ch</name></name> <op:operator pos:line="491" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="491" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="491" pos:column="50"> <block pos:line="491" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="492" pos:column="33">sc</name><op:operator pos:line="492" pos:column="35">.</op:operator><name pos:line="492" pos:column="36">SetState</name></name><argument_list pos:line="492" pos:column="44">(<argument><expr><name pos:line="492" pos:column="45">SCE_SH_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="493" pos:column="33">Quote</name><op:operator pos:line="493" pos:column="38">.</op:operator><name pos:line="493" pos:column="39">Start</name></name><argument_list pos:line="493" pos:column="44">(<argument><expr><name><name pos:line="493" pos:column="45">sc</name><op:operator pos:line="493" pos:column="47">.</op:operator><name pos:line="493" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="494" pos:column="27">else <if pos:line="494" pos:column="32">if <condition pos:line="494" pos:column="35">(<expr><name><name pos:line="494" pos:column="36">sc</name><op:operator pos:line="494" pos:column="38">.</op:operator><name pos:line="494" pos:column="39">ch</name></name> <op:operator pos:line="494" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="494" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="494" pos:column="50"> <block pos:line="494" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="495" pos:column="33">sc</name><op:operator pos:line="495" pos:column="35">.</op:operator><name pos:line="495" pos:column="36">SetState</name></name><argument_list pos:line="495" pos:column="44">(<argument><expr><name pos:line="495" pos:column="45">SCE_SH_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="496" pos:column="33">Quote</name><op:operator pos:line="496" pos:column="38">.</op:operator><name pos:line="496" pos:column="39">Start</name></name><argument_list pos:line="496" pos:column="44">(<argument><expr><name><name pos:line="496" pos:column="45">sc</name><op:operator pos:line="496" pos:column="47">.</op:operator><name pos:line="496" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="497" pos:column="27">else <if pos:line="497" pos:column="32">if <condition pos:line="497" pos:column="35">(<expr><name><name pos:line="497" pos:column="36">sc</name><op:operator pos:line="497" pos:column="38">.</op:operator><name pos:line="497" pos:column="39">ch</name></name> <op:operator pos:line="497" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="497" pos:column="45">'`'</lit:literal></expr>)</condition><then pos:line="497" pos:column="49"> <block pos:line="497" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="498" pos:column="33">sc</name><op:operator pos:line="498" pos:column="35">.</op:operator><name pos:line="498" pos:column="36">SetState</name></name><argument_list pos:line="498" pos:column="44">(<argument><expr><name pos:line="498" pos:column="45">SCE_SH_BACKTICKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="499" pos:column="33">Quote</name><op:operator pos:line="499" pos:column="38">.</op:operator><name pos:line="499" pos:column="39">Start</name></name><argument_list pos:line="499" pos:column="44">(<argument><expr><name><name pos:line="499" pos:column="45">sc</name><op:operator pos:line="499" pos:column="47">.</op:operator><name pos:line="499" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="500" pos:column="27">else <if pos:line="500" pos:column="32">if <condition pos:line="500" pos:column="35">(<expr><name><name pos:line="500" pos:column="36">sc</name><op:operator pos:line="500" pos:column="38">.</op:operator><name pos:line="500" pos:column="39">ch</name></name> <op:operator pos:line="500" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="500" pos:column="45">'$'</lit:literal></expr>)</condition><then pos:line="500" pos:column="49"> <block pos:line="500" pos:column="50">{
				<if pos:line="501" pos:column="33">if <condition pos:line="501" pos:column="36">(<expr><call><name><name pos:line="501" pos:column="37">sc</name><op:operator pos:line="501" pos:column="39">.</op:operator><name pos:line="501" pos:column="40">Match</name></name><argument_list pos:line="501" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="501" pos:column="46">"$(("</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="501" pos:column="53"> <block pos:line="501" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="502" pos:column="41">sc</name><op:operator pos:line="502" pos:column="43">.</op:operator><name pos:line="502" pos:column="44">SetState</name></name><argument_list pos:line="502" pos:column="52">(<argument><expr><name pos:line="502" pos:column="53">SCE_SH_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="502" pos:column="73">// handle '((' later</comment>
					<continue pos:line="503" pos:column="41">continue;</continue>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="505" pos:column="33">sc</name><op:operator pos:line="505" pos:column="35">.</op:operator><name pos:line="505" pos:column="36">SetState</name></name><argument_list pos:line="505" pos:column="44">(<argument><expr><name pos:line="505" pos:column="45">SCE_SH_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="506" pos:column="33">sc</name><op:operator pos:line="506" pos:column="35">.</op:operator><name pos:line="506" pos:column="36">Forward</name></name><argument_list pos:line="506" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="507" pos:column="33">if <condition pos:line="507" pos:column="36">(<expr><name><name pos:line="507" pos:column="37">sc</name><op:operator pos:line="507" pos:column="39">.</op:operator><name pos:line="507" pos:column="40">ch</name></name> <op:operator pos:line="507" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="507" pos:column="46">'{'</lit:literal></expr>)</condition><then pos:line="507" pos:column="50"> <block pos:line="507" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="508" pos:column="41">sc</name><op:operator pos:line="508" pos:column="43">.</op:operator><name pos:line="508" pos:column="44">ChangeState</name></name><argument_list pos:line="508" pos:column="55">(<argument><expr><name pos:line="508" pos:column="56">SCE_SH_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="509" pos:column="35">else <if pos:line="509" pos:column="40">if <condition pos:line="509" pos:column="43">(<expr><name><name pos:line="509" pos:column="44">sc</name><op:operator pos:line="509" pos:column="46">.</op:operator><name pos:line="509" pos:column="47">ch</name></name> <op:operator pos:line="509" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="509" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="509" pos:column="58"> <block pos:line="509" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="510" pos:column="41">sc</name><op:operator pos:line="510" pos:column="43">.</op:operator><name pos:line="510" pos:column="44">ChangeState</name></name><argument_list pos:line="510" pos:column="55">(<argument><expr><name pos:line="510" pos:column="56">SCE_SH_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="511" pos:column="35">else <if pos:line="511" pos:column="40">if <condition pos:line="511" pos:column="43">(<expr><name><name pos:line="511" pos:column="44">sc</name><op:operator pos:line="511" pos:column="46">.</op:operator><name pos:line="511" pos:column="47">ch</name></name> <op:operator pos:line="511" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="511" pos:column="53">'"'</lit:literal></expr>)</condition><then pos:line="511" pos:column="57"> <block pos:line="511" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="512" pos:column="41">sc</name><op:operator pos:line="512" pos:column="43">.</op:operator><name pos:line="512" pos:column="44">ChangeState</name></name><argument_list pos:line="512" pos:column="55">(<argument><expr><name pos:line="512" pos:column="56">SCE_SH_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="513" pos:column="35">else <if pos:line="513" pos:column="40">if <condition pos:line="513" pos:column="43">(<expr><name><name pos:line="513" pos:column="44">sc</name><op:operator pos:line="513" pos:column="46">.</op:operator><name pos:line="513" pos:column="47">ch</name></name> <op:operator pos:line="513" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="513" pos:column="53">'('</lit:literal> <op:operator pos:line="513" pos:column="57">||</op:operator> <name><name pos:line="513" pos:column="60">sc</name><op:operator pos:line="513" pos:column="62">.</op:operator><name pos:line="513" pos:column="63">ch</name></name> <op:operator pos:line="513" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="513" pos:column="69">'`'</lit:literal></expr>)</condition><then pos:line="513" pos:column="73"> <block pos:line="513" pos:column="74">{
					<expr_stmt><expr><call><name><name pos:line="514" pos:column="41">sc</name><op:operator pos:line="514" pos:column="43">.</op:operator><name pos:line="514" pos:column="44">ChangeState</name></name><argument_list pos:line="514" pos:column="55">(<argument><expr><name pos:line="514" pos:column="56">SCE_SH_BACKTICKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="515" pos:column="35">else <block pos:line="515" pos:column="40">{
					<continue pos:line="516" pos:column="41">continue;</continue>	<comment type="line" pos:line="516" pos:column="57">// scalar has no delimiter pair</comment>
				}</block></else></if></else></if></else></if></else></if>
				<comment type="line" pos:line="518" pos:column="33">// fallthrough, open delim for $[{'"(`]</comment>
				<expr_stmt><expr><call><name><name pos:line="519" pos:column="33">Quote</name><op:operator pos:line="519" pos:column="38">.</op:operator><name pos:line="519" pos:column="39">Start</name></name><argument_list pos:line="519" pos:column="44">(<argument><expr><name><name pos:line="519" pos:column="45">sc</name><op:operator pos:line="519" pos:column="47">.</op:operator><name pos:line="519" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="520" pos:column="27">else <if pos:line="520" pos:column="32">if <condition pos:line="520" pos:column="35">(<expr><call><name><name pos:line="520" pos:column="36">sc</name><op:operator pos:line="520" pos:column="38">.</op:operator><name pos:line="520" pos:column="39">Match</name></name><argument_list pos:line="520" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="520" pos:column="45">'&lt;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="520" pos:column="50">'&lt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="520" pos:column="55"> <block pos:line="520" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="521" pos:column="33">sc</name><op:operator pos:line="521" pos:column="35">.</op:operator><name pos:line="521" pos:column="36">SetState</name></name><argument_list pos:line="521" pos:column="44">(<argument><expr><name pos:line="521" pos:column="45">SCE_SH_HERE_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="522" pos:column="33">HereDoc</name><op:operator pos:line="522" pos:column="40">.</op:operator><name pos:line="522" pos:column="41">State</name></name> <op:operator pos:line="522" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="522" pos:column="49">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="523" pos:column="33">HereDoc</name><op:operator pos:line="523" pos:column="40">.</op:operator><name pos:line="523" pos:column="41">Indent</name></name> <op:operator pos:line="523" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="523" pos:column="50">false</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="524" pos:column="27">else <if pos:line="524" pos:column="32">if <condition pos:line="524" pos:column="35">(<expr><name><name pos:line="524" pos:column="36">sc</name><op:operator pos:line="524" pos:column="38">.</op:operator><name pos:line="524" pos:column="39">ch</name></name> <op:operator pos:line="524" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="524" pos:column="45">'-'</lit:literal>	<op:operator pos:line="524" pos:column="49">&amp;&amp;</op:operator>	<comment type="line" pos:line="524" pos:column="57">// one-char file test operators</comment>
					   <call><name><name pos:line="525" pos:column="44">setSingleCharOp</name><op:operator pos:line="525" pos:column="59">.</op:operator><name pos:line="525" pos:column="60">Contains</name></name><argument_list pos:line="525" pos:column="68">(<argument><expr><name><name pos:line="525" pos:column="69">sc</name><op:operator pos:line="525" pos:column="71">.</op:operator><name pos:line="525" pos:column="72">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="525" pos:column="80">&amp;&amp;</op:operator>
					   <op:operator pos:line="526" pos:column="44">!</op:operator><call><name><name pos:line="526" pos:column="45">setWord</name><op:operator pos:line="526" pos:column="52">.</op:operator><name pos:line="526" pos:column="53">Contains</name></name><argument_list pos:line="526" pos:column="61">(<argument><expr><call><name><name pos:line="526" pos:column="62">sc</name><op:operator pos:line="526" pos:column="64">.</op:operator><name pos:line="526" pos:column="65">GetRelative</name></name><argument_list pos:line="526" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="526" pos:column="77">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="526" pos:column="81">&amp;&amp;</op:operator>
					   <call><name pos:line="527" pos:column="44">IsASpace</name><argument_list pos:line="527" pos:column="52">(<argument><expr><name><name pos:line="527" pos:column="53">sc</name><op:operator pos:line="527" pos:column="55">.</op:operator><name pos:line="527" pos:column="56">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="527" pos:column="64"> <block pos:line="527" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="528" pos:column="33">sc</name><op:operator pos:line="528" pos:column="35">.</op:operator><name pos:line="528" pos:column="36">SetState</name></name><argument_list pos:line="528" pos:column="44">(<argument><expr><name pos:line="528" pos:column="45">SCE_SH_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="529" pos:column="33">sc</name><op:operator pos:line="529" pos:column="35">.</op:operator><name pos:line="529" pos:column="36">Forward</name></name><argument_list pos:line="529" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="530" pos:column="27">else <if pos:line="530" pos:column="32">if <condition pos:line="530" pos:column="35">(<expr><call><name><name pos:line="530" pos:column="36">setBashOperator</name><op:operator pos:line="530" pos:column="51">.</op:operator><name pos:line="530" pos:column="52">Contains</name></name><argument_list pos:line="530" pos:column="60">(<argument><expr><name><name pos:line="530" pos:column="61">sc</name><op:operator pos:line="530" pos:column="63">.</op:operator><name pos:line="530" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="530" pos:column="68"> <block pos:line="530" pos:column="69">{
				<decl_stmt><decl><type><name pos:line="531" pos:column="33">char</name></type> <name><name pos:line="531" pos:column="38">s</name><index pos:line="531" pos:column="39">[<expr><lit:literal type="number" pos:line="531" pos:column="40">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="532" pos:column="33">bool</name></type> <name pos:line="532" pos:column="38">isCmdDelim</name> <init pos:line="532" pos:column="49">= <expr><lit:literal type="boolean" pos:line="532" pos:column="51">false</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="533" pos:column="33">sc</name><op:operator pos:line="533" pos:column="35">.</op:operator><name pos:line="533" pos:column="36">SetState</name></name><argument_list pos:line="533" pos:column="44">(<argument><expr><name pos:line="533" pos:column="45">SCE_SH_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="534" pos:column="33">// handle opening delimiters for test/arithmetic expressions - ((,[[,[</comment>
				<if pos:line="535" pos:column="33">if <condition pos:line="535" pos:column="36">(<expr><name pos:line="535" pos:column="37">cmdState</name> <op:operator pos:line="535" pos:column="46">==</op:operator> <name pos:line="535" pos:column="49">BASH_CMD_START</name>
				 <op:operator pos:line="536" pos:column="34">||</op:operator> <name pos:line="536" pos:column="37">cmdState</name> <op:operator pos:line="536" pos:column="46">==</op:operator> <name pos:line="536" pos:column="49">BASH_CMD_BODY</name></expr>)</condition><then pos:line="536" pos:column="63"> <block pos:line="536" pos:column="64">{
					<if pos:line="537" pos:column="41">if <condition pos:line="537" pos:column="44">(<expr><call><name><name pos:line="537" pos:column="45">sc</name><op:operator pos:line="537" pos:column="47">.</op:operator><name pos:line="537" pos:column="48">Match</name></name><argument_list pos:line="537" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="537" pos:column="54">'('</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="537" pos:column="59">'('</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="537" pos:column="64"> <block pos:line="537" pos:column="65">{
						<expr_stmt><expr><name pos:line="538" pos:column="49">cmdState</name> <op:operator pos:line="538" pos:column="58">=</op:operator> <name pos:line="538" pos:column="60">BASH_CMD_ARITH</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="539" pos:column="49">sc</name><op:operator pos:line="539" pos:column="51">.</op:operator><name pos:line="539" pos:column="52">Forward</name></name><argument_list pos:line="539" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="540" pos:column="43">else <if pos:line="540" pos:column="48">if <condition pos:line="540" pos:column="51">(<expr><call><name><name pos:line="540" pos:column="52">sc</name><op:operator pos:line="540" pos:column="54">.</op:operator><name pos:line="540" pos:column="55">Match</name></name><argument_list pos:line="540" pos:column="60">(<argument><expr><lit:literal type="char" pos:line="540" pos:column="61">'['</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="540" pos:column="66">'['</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="540" pos:column="71">&amp;&amp;</op:operator> <call><name pos:line="540" pos:column="74">IsASpace</name><argument_list pos:line="540" pos:column="82">(<argument><expr><call><name><name pos:line="540" pos:column="83">sc</name><op:operator pos:line="540" pos:column="85">.</op:operator><name pos:line="540" pos:column="86">GetRelative</name></name><argument_list pos:line="540" pos:column="97">(<argument><expr><lit:literal type="number" pos:line="540" pos:column="98">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="540" pos:column="102"> <block pos:line="540" pos:column="103">{
						<expr_stmt><expr><name pos:line="541" pos:column="49">cmdState</name> <op:operator pos:line="541" pos:column="58">=</op:operator> <name pos:line="541" pos:column="60">BASH_CMD_TEST</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="542" pos:column="49">testExprType</name> <op:operator pos:line="542" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="542" pos:column="64">1</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="543" pos:column="49">sc</name><op:operator pos:line="543" pos:column="51">.</op:operator><name pos:line="543" pos:column="52">Forward</name></name><argument_list pos:line="543" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="544" pos:column="43">else <if pos:line="544" pos:column="48">if <condition pos:line="544" pos:column="51">(<expr><name><name pos:line="544" pos:column="52">sc</name><op:operator pos:line="544" pos:column="54">.</op:operator><name pos:line="544" pos:column="55">ch</name></name> <op:operator pos:line="544" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="544" pos:column="61">'['</lit:literal> <op:operator pos:line="544" pos:column="65">&amp;&amp;</op:operator> <call><name pos:line="544" pos:column="68">IsASpace</name><argument_list pos:line="544" pos:column="76">(<argument><expr><name><name pos:line="544" pos:column="77">sc</name><op:operator pos:line="544" pos:column="79">.</op:operator><name pos:line="544" pos:column="80">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="544" pos:column="88"> <block pos:line="544" pos:column="89">{
						<expr_stmt><expr><name pos:line="545" pos:column="49">cmdState</name> <op:operator pos:line="545" pos:column="58">=</op:operator> <name pos:line="545" pos:column="60">BASH_CMD_TEST</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="546" pos:column="49">testExprType</name> <op:operator pos:line="546" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="546" pos:column="64">2</lit:literal></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if>
				}</block></then></if>
				<comment type="line" pos:line="549" pos:column="33">// special state -- for ((x;y;z)) in ... looping</comment>
				<if pos:line="550" pos:column="33">if <condition pos:line="550" pos:column="36">(<expr><name pos:line="550" pos:column="37">cmdState</name> <op:operator pos:line="550" pos:column="46">==</op:operator> <name pos:line="550" pos:column="49">BASH_CMD_WORD</name> <op:operator pos:line="550" pos:column="63">&amp;&amp;</op:operator> <call><name><name pos:line="550" pos:column="66">sc</name><op:operator pos:line="550" pos:column="68">.</op:operator><name pos:line="550" pos:column="69">Match</name></name><argument_list pos:line="550" pos:column="74">(<argument><expr><lit:literal type="char" pos:line="550" pos:column="75">'('</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="550" pos:column="80">'('</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="550" pos:column="85"> <block pos:line="550" pos:column="86">{
					<expr_stmt><expr><name pos:line="551" pos:column="41">cmdState</name> <op:operator pos:line="551" pos:column="50">=</op:operator> <name pos:line="551" pos:column="52">BASH_CMD_ARITH</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="552" pos:column="41">sc</name><op:operator pos:line="552" pos:column="43">.</op:operator><name pos:line="552" pos:column="44">Forward</name></name><argument_list pos:line="552" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="553" pos:column="41">continue;</continue>
				}</block></then></if>
				<comment type="line" pos:line="555" pos:column="33">// handle command delimiters in command START|BODY|WORD state, also TEST if 'test'</comment>
				<if pos:line="556" pos:column="33">if <condition pos:line="556" pos:column="36">(<expr><name pos:line="556" pos:column="37">cmdState</name> <op:operator pos:line="556" pos:column="46">==</op:operator> <name pos:line="556" pos:column="49">BASH_CMD_START</name>
				 <op:operator pos:line="557" pos:column="34">||</op:operator> <name pos:line="557" pos:column="37">cmdState</name> <op:operator pos:line="557" pos:column="46">==</op:operator> <name pos:line="557" pos:column="49">BASH_CMD_BODY</name>
				 <op:operator pos:line="558" pos:column="34">||</op:operator> <name pos:line="558" pos:column="37">cmdState</name> <op:operator pos:line="558" pos:column="46">==</op:operator> <name pos:line="558" pos:column="49">BASH_CMD_WORD</name>
				 <op:operator pos:line="559" pos:column="34">||</op:operator> <op:operator pos:line="559" pos:column="37">(</op:operator><name pos:line="559" pos:column="38">cmdState</name> <op:operator pos:line="559" pos:column="47">==</op:operator> <name pos:line="559" pos:column="50">BASH_CMD_TEST</name> <op:operator pos:line="559" pos:column="64">&amp;&amp;</op:operator> <name pos:line="559" pos:column="67">testExprType</name> <op:operator pos:line="559" pos:column="80">==</op:operator> <lit:literal type="number" pos:line="559" pos:column="83">0</lit:literal><op:operator pos:line="559" pos:column="84">)</op:operator></expr>)</condition><then pos:line="559" pos:column="86"> <block pos:line="559" pos:column="87">{
					<expr_stmt><expr><name><name pos:line="560" pos:column="41">s</name><index pos:line="560" pos:column="42">[<expr><lit:literal type="number" pos:line="560" pos:column="43">0</lit:literal></expr>]</index></name> <op:operator pos:line="560" pos:column="46">=</op:operator> <call><name><name pos:line="560" pos:column="48">static_cast</name><argument_list pos:line="560" pos:column="59">&lt;<argument><expr><name pos:line="560" pos:column="60">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="560" pos:column="65">(<argument><expr><name><name pos:line="560" pos:column="66">sc</name><op:operator pos:line="560" pos:column="68">.</op:operator><name pos:line="560" pos:column="69">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="561" pos:column="41">if <condition pos:line="561" pos:column="44">(<expr><call><name><name pos:line="561" pos:column="45">setBashOperator</name><op:operator pos:line="561" pos:column="60">.</op:operator><name pos:line="561" pos:column="61">Contains</name></name><argument_list pos:line="561" pos:column="69">(<argument><expr><name><name pos:line="561" pos:column="70">sc</name><op:operator pos:line="561" pos:column="72">.</op:operator><name pos:line="561" pos:column="73">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="561" pos:column="81"> <block pos:line="561" pos:column="82">{
						<expr_stmt><expr><name><name pos:line="562" pos:column="49">s</name><index pos:line="562" pos:column="50">[<expr><lit:literal type="number" pos:line="562" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="562" pos:column="54">=</op:operator> <call><name><name pos:line="562" pos:column="56">static_cast</name><argument_list pos:line="562" pos:column="67">&lt;<argument><expr><name pos:line="562" pos:column="68">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="562" pos:column="73">(<argument><expr><name><name pos:line="562" pos:column="74">sc</name><op:operator pos:line="562" pos:column="76">.</op:operator><name pos:line="562" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="563" pos:column="49">s</name><index pos:line="563" pos:column="50">[<expr><lit:literal type="number" pos:line="563" pos:column="51">2</lit:literal></expr>]</index></name> <op:operator pos:line="563" pos:column="54">=</op:operator> <lit:literal type="char" pos:line="563" pos:column="56">'\0'</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="564" pos:column="49">isCmdDelim</name> <op:operator pos:line="564" pos:column="60">=</op:operator> <call><name><name pos:line="564" pos:column="62">cmdDelimiter</name><op:operator pos:line="564" pos:column="74">.</op:operator><name pos:line="564" pos:column="75">InList</name></name><argument_list pos:line="564" pos:column="81">(<argument><expr><name pos:line="564" pos:column="82">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="565" pos:column="49">if <condition pos:line="565" pos:column="52">(<expr><name pos:line="565" pos:column="53">isCmdDelim</name></expr>)</condition><then pos:line="565" pos:column="64">
							<expr_stmt><expr><call><name><name pos:line="566" pos:column="57">sc</name><op:operator pos:line="566" pos:column="59">.</op:operator><name pos:line="566" pos:column="60">Forward</name></name><argument_list pos:line="566" pos:column="67">()</argument_list></call></expr>;</expr_stmt></then></if>
					}</block></then></if>
					<if pos:line="568" pos:column="41">if <condition pos:line="568" pos:column="44">(<expr><op:operator pos:line="568" pos:column="45">!</op:operator><name pos:line="568" pos:column="46">isCmdDelim</name></expr>)</condition><then pos:line="568" pos:column="57"> <block pos:line="568" pos:column="58">{
						<expr_stmt><expr><name><name pos:line="569" pos:column="49">s</name><index pos:line="569" pos:column="50">[<expr><lit:literal type="number" pos:line="569" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="569" pos:column="54">=</op:operator> <lit:literal type="char" pos:line="569" pos:column="56">'\0'</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="570" pos:column="49">isCmdDelim</name> <op:operator pos:line="570" pos:column="60">=</op:operator> <call><name><name pos:line="570" pos:column="62">cmdDelimiter</name><op:operator pos:line="570" pos:column="74">.</op:operator><name pos:line="570" pos:column="75">InList</name></name><argument_list pos:line="570" pos:column="81">(<argument><expr><name pos:line="570" pos:column="82">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<if pos:line="572" pos:column="41">if <condition pos:line="572" pos:column="44">(<expr><name pos:line="572" pos:column="45">isCmdDelim</name></expr>)</condition><then pos:line="572" pos:column="56"> <block pos:line="572" pos:column="57">{
						<expr_stmt><expr><name pos:line="573" pos:column="49">cmdState</name> <op:operator pos:line="573" pos:column="58">=</op:operator> <name pos:line="573" pos:column="60">BASH_CMD_DELIM</name></expr>;</expr_stmt>
						<continue pos:line="574" pos:column="49">continue;</continue>
					}</block></then></if>
				}</block></then></if>
				<comment type="line" pos:line="577" pos:column="33">// handle closing delimiters for test/arithmetic expressions - )),]],]</comment>
				<if pos:line="578" pos:column="33">if <condition pos:line="578" pos:column="36">(<expr><name pos:line="578" pos:column="37">cmdState</name> <op:operator pos:line="578" pos:column="46">==</op:operator> <name pos:line="578" pos:column="49">BASH_CMD_ARITH</name> <op:operator pos:line="578" pos:column="64">&amp;&amp;</op:operator> <call><name><name pos:line="578" pos:column="67">sc</name><op:operator pos:line="578" pos:column="69">.</op:operator><name pos:line="578" pos:column="70">Match</name></name><argument_list pos:line="578" pos:column="75">(<argument><expr><lit:literal type="char" pos:line="578" pos:column="76">')'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="578" pos:column="81">')'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="578" pos:column="86"> <block pos:line="578" pos:column="87">{
					<expr_stmt><expr><name pos:line="579" pos:column="41">cmdState</name> <op:operator pos:line="579" pos:column="50">=</op:operator> <name pos:line="579" pos:column="52">BASH_CMD_BODY</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="580" pos:column="41">sc</name><op:operator pos:line="580" pos:column="43">.</op:operator><name pos:line="580" pos:column="44">Forward</name></name><argument_list pos:line="580" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="581" pos:column="35">else <if pos:line="581" pos:column="40">if <condition pos:line="581" pos:column="43">(<expr><name pos:line="581" pos:column="44">cmdState</name> <op:operator pos:line="581" pos:column="53">==</op:operator> <name pos:line="581" pos:column="56">BASH_CMD_TEST</name> <op:operator pos:line="581" pos:column="70">&amp;&amp;</op:operator> <call><name pos:line="581" pos:column="73">IsASpace</name><argument_list pos:line="581" pos:column="81">(<argument><expr><name><name pos:line="581" pos:column="82">sc</name><op:operator pos:line="581" pos:column="84">.</op:operator><name pos:line="581" pos:column="85">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="581" pos:column="93"> <block pos:line="581" pos:column="94">{
					<if pos:line="582" pos:column="41">if <condition pos:line="582" pos:column="44">(<expr><call><name><name pos:line="582" pos:column="45">sc</name><op:operator pos:line="582" pos:column="47">.</op:operator><name pos:line="582" pos:column="48">Match</name></name><argument_list pos:line="582" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="582" pos:column="54">']'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="582" pos:column="59">']'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="582" pos:column="64">&amp;&amp;</op:operator> <name pos:line="582" pos:column="67">testExprType</name> <op:operator pos:line="582" pos:column="80">==</op:operator> <lit:literal type="number" pos:line="582" pos:column="83">1</lit:literal></expr>)</condition><then pos:line="582" pos:column="85"> <block pos:line="582" pos:column="86">{
						<expr_stmt><expr><call><name><name pos:line="583" pos:column="49">sc</name><op:operator pos:line="583" pos:column="51">.</op:operator><name pos:line="583" pos:column="52">Forward</name></name><argument_list pos:line="583" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="584" pos:column="49">cmdState</name> <op:operator pos:line="584" pos:column="58">=</op:operator> <name pos:line="584" pos:column="60">BASH_CMD_BODY</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="585" pos:column="43">else <if pos:line="585" pos:column="48">if <condition pos:line="585" pos:column="51">(<expr><name><name pos:line="585" pos:column="52">sc</name><op:operator pos:line="585" pos:column="54">.</op:operator><name pos:line="585" pos:column="55">ch</name></name> <op:operator pos:line="585" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="585" pos:column="61">']'</lit:literal> <op:operator pos:line="585" pos:column="65">&amp;&amp;</op:operator> <name pos:line="585" pos:column="68">testExprType</name> <op:operator pos:line="585" pos:column="81">==</op:operator> <lit:literal type="number" pos:line="585" pos:column="84">2</lit:literal></expr>)</condition><then pos:line="585" pos:column="86"> <block pos:line="585" pos:column="87">{
						<expr_stmt><expr><name pos:line="586" pos:column="49">cmdState</name> <op:operator pos:line="586" pos:column="58">=</op:operator> <name pos:line="586" pos:column="60">BASH_CMD_BODY</name></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then></if></else></if>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if><comment type="line" pos:line="590" pos:column="18">// sc.state</comment>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="592" pos:column="9">sc</name><op:operator pos:line="592" pos:column="11">.</op:operator><name pos:line="592" pos:column="12">Complete</name></name><argument_list pos:line="592" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="595" pos:column="1">static</specifier> <name pos:line="595" pos:column="8">bool</name></type> <name pos:line="595" pos:column="13">IsCommentLine</name><parameter_list pos:line="595" pos:column="26">(<param><decl><type><name pos:line="595" pos:column="27">int</name></type> <name pos:line="595" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="595" pos:column="37">Accessor</name> <type:modifier pos:line="595" pos:column="46">&amp;</type:modifier></type><name pos:line="595" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="595" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="596" pos:column="9">int</name></type> <name pos:line="596" pos:column="13">pos</name> <init pos:line="596" pos:column="17">= <expr><call><name><name pos:line="596" pos:column="19">styler</name><op:operator pos:line="596" pos:column="25">.</op:operator><name pos:line="596" pos:column="26">LineStart</name></name><argument_list pos:line="596" pos:column="35">(<argument><expr><name pos:line="596" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="597" pos:column="9">int</name></type> <name pos:line="597" pos:column="13">eol_pos</name> <init pos:line="597" pos:column="21">= <expr><call><name><name pos:line="597" pos:column="23">styler</name><op:operator pos:line="597" pos:column="29">.</op:operator><name pos:line="597" pos:column="30">LineStart</name></name><argument_list pos:line="597" pos:column="39">(<argument><expr><name pos:line="597" pos:column="40">line</name> <op:operator pos:line="597" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="597" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="597" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="597" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="598" pos:column="9">for (<init><decl><type><name pos:line="598" pos:column="14">int</name></type> <name pos:line="598" pos:column="18">i</name> <init pos:line="598" pos:column="20">= <expr><name pos:line="598" pos:column="22">pos</name></expr></init></decl>;</init> <condition><expr><name pos:line="598" pos:column="27">i</name> <op:operator pos:line="598" pos:column="29">&lt;</op:operator> <name pos:line="598" pos:column="31">eol_pos</name></expr>;</condition> <incr><expr><name pos:line="598" pos:column="40">i</name><op:operator pos:line="598" pos:column="41">++</op:operator></expr></incr>) <block pos:line="598" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="599" pos:column="17">char</name></type> <name pos:line="599" pos:column="22">ch</name> <init pos:line="599" pos:column="25">= <expr><name><name pos:line="599" pos:column="27">styler</name><index pos:line="599" pos:column="33">[<expr><name pos:line="599" pos:column="34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="600" pos:column="17">if <condition pos:line="600" pos:column="20">(<expr><name pos:line="600" pos:column="21">ch</name> <op:operator pos:line="600" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="600" pos:column="27">'#'</lit:literal></expr>)</condition><then pos:line="600" pos:column="31">
			<return pos:line="601" pos:column="25">return <expr><lit:literal type="boolean" pos:line="601" pos:column="32">true</lit:literal></expr>;</return></then>
		<else pos:line="602" pos:column="17">else <if pos:line="602" pos:column="22">if <condition pos:line="602" pos:column="25">(<expr><name pos:line="602" pos:column="26">ch</name> <op:operator pos:line="602" pos:column="29">!=</op:operator> <lit:literal type="char" pos:line="602" pos:column="32">' '</lit:literal> <op:operator pos:line="602" pos:column="36">&amp;&amp;</op:operator> <name pos:line="602" pos:column="39">ch</name> <op:operator pos:line="602" pos:column="42">!=</op:operator> <lit:literal type="char" pos:line="602" pos:column="45">'\t'</lit:literal></expr>)</condition><then pos:line="602" pos:column="50">
			<return pos:line="603" pos:column="25">return <expr><lit:literal type="boolean" pos:line="603" pos:column="32">false</lit:literal></expr>;</return></then></if></else></if>
	}</block></for>
	<return pos:line="605" pos:column="9">return <expr><lit:literal type="boolean" pos:line="605" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="608" pos:column="1">static</specifier> <name pos:line="608" pos:column="8">void</name></type> <name pos:line="608" pos:column="13">FoldBashDoc</name><parameter_list pos:line="608" pos:column="24">(<param><decl><type><name pos:line="608" pos:column="25">unsigned</name> <name pos:line="608" pos:column="34">int</name></type> <name pos:line="608" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="608" pos:column="48">int</name></type> <name pos:line="608" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="608" pos:column="60">int</name></type></decl></param>, <param><decl><type><name><name pos:line="608" pos:column="65">WordList</name> <type:modifier pos:line="608" pos:column="74">*</type:modifier><index pos:line="608" pos:column="75">[]</index></name></type></decl></param>,
						<param><decl><type><name pos:line="609" pos:column="49">Accessor</name> <type:modifier pos:line="609" pos:column="58">&amp;</type:modifier></type><name pos:line="609" pos:column="59">styler</name></decl></param>)</parameter_list> <block pos:line="609" pos:column="67">{
	<decl_stmt><decl><type><name pos:line="610" pos:column="9">bool</name></type> <name pos:line="610" pos:column="14">foldComment</name> <init pos:line="610" pos:column="26">= <expr><call><name><name pos:line="610" pos:column="28">styler</name><op:operator pos:line="610" pos:column="34">.</op:operator><name pos:line="610" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="610" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="610" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="610" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="610" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="611" pos:column="9">bool</name></type> <name pos:line="611" pos:column="14">foldCompact</name> <init pos:line="611" pos:column="26">= <expr><call><name><name pos:line="611" pos:column="28">styler</name><op:operator pos:line="611" pos:column="34">.</op:operator><name pos:line="611" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="611" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="611" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="611" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="611" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="611" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="612" pos:column="9">unsigned</name> <name pos:line="612" pos:column="18">int</name></type> <name pos:line="612" pos:column="22">endPos</name> <init pos:line="612" pos:column="29">= <expr><name pos:line="612" pos:column="31">startPos</name> <op:operator pos:line="612" pos:column="40">+</op:operator> <name pos:line="612" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="613" pos:column="9">int</name></type> <name pos:line="613" pos:column="13">visibleChars</name> <init pos:line="613" pos:column="26">= <expr><lit:literal type="number" pos:line="613" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="614" pos:column="9">int</name></type> <name pos:line="614" pos:column="13">lineCurrent</name> <init pos:line="614" pos:column="25">= <expr><call><name><name pos:line="614" pos:column="27">styler</name><op:operator pos:line="614" pos:column="33">.</op:operator><name pos:line="614" pos:column="34">GetLine</name></name><argument_list pos:line="614" pos:column="41">(<argument><expr><name pos:line="614" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="615" pos:column="9">int</name></type> <name pos:line="615" pos:column="13">levelPrev</name> <init pos:line="615" pos:column="23">= <expr><call><name><name pos:line="615" pos:column="25">styler</name><op:operator pos:line="615" pos:column="31">.</op:operator><name pos:line="615" pos:column="32">LevelAt</name></name><argument_list pos:line="615" pos:column="39">(<argument><expr><name pos:line="615" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="615" pos:column="53">&amp;</op:operator> <name pos:line="615" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="616" pos:column="9">int</name></type> <name pos:line="616" pos:column="13">levelCurrent</name> <init pos:line="616" pos:column="26">= <expr><name pos:line="616" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="617" pos:column="9">char</name></type> <name pos:line="617" pos:column="14">chNext</name> <init pos:line="617" pos:column="21">= <expr><name><name pos:line="617" pos:column="23">styler</name><index pos:line="617" pos:column="29">[<expr><name pos:line="617" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="618" pos:column="9">int</name></type> <name pos:line="618" pos:column="13">styleNext</name> <init pos:line="618" pos:column="23">= <expr><call><name><name pos:line="618" pos:column="25">styler</name><op:operator pos:line="618" pos:column="31">.</op:operator><name pos:line="618" pos:column="32">StyleAt</name></name><argument_list pos:line="618" pos:column="39">(<argument><expr><name pos:line="618" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="619" pos:column="9">for (<init><decl><type><name pos:line="619" pos:column="14">unsigned</name> <name pos:line="619" pos:column="23">int</name></type> <name pos:line="619" pos:column="27">i</name> <init pos:line="619" pos:column="29">= <expr><name pos:line="619" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="619" pos:column="41">i</name> <op:operator pos:line="619" pos:column="43">&lt;</op:operator> <name pos:line="619" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="619" pos:column="53">i</name><op:operator pos:line="619" pos:column="54">++</op:operator></expr></incr>) <block pos:line="619" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="620" pos:column="17">char</name></type> <name pos:line="620" pos:column="22">ch</name> <init pos:line="620" pos:column="25">= <expr><name pos:line="620" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="621" pos:column="17">chNext</name> <op:operator pos:line="621" pos:column="24">=</op:operator> <call><name><name pos:line="621" pos:column="26">styler</name><op:operator pos:line="621" pos:column="32">.</op:operator><name pos:line="621" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="621" pos:column="46">(<argument><expr><name pos:line="621" pos:column="47">i</name> <op:operator pos:line="621" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="621" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="622" pos:column="17">int</name></type> <name pos:line="622" pos:column="21">style</name> <init pos:line="622" pos:column="27">= <expr><name pos:line="622" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="623" pos:column="17">styleNext</name> <op:operator pos:line="623" pos:column="27">=</op:operator> <call><name><name pos:line="623" pos:column="29">styler</name><op:operator pos:line="623" pos:column="35">.</op:operator><name pos:line="623" pos:column="36">StyleAt</name></name><argument_list pos:line="623" pos:column="43">(<argument><expr><name pos:line="623" pos:column="44">i</name> <op:operator pos:line="623" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="623" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="624" pos:column="17">bool</name></type> <name pos:line="624" pos:column="22">atEOL</name> <init pos:line="624" pos:column="28">= <expr><op:operator pos:line="624" pos:column="30">(</op:operator><name pos:line="624" pos:column="31">ch</name> <op:operator pos:line="624" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="624" pos:column="37">'\r'</lit:literal> <op:operator pos:line="624" pos:column="42">&amp;&amp;</op:operator> <name pos:line="624" pos:column="45">chNext</name> <op:operator pos:line="624" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="624" pos:column="55">'\n'</lit:literal><op:operator pos:line="624" pos:column="59">)</op:operator> <op:operator pos:line="624" pos:column="61">||</op:operator> <op:operator pos:line="624" pos:column="64">(</op:operator><name pos:line="624" pos:column="65">ch</name> <op:operator pos:line="624" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="624" pos:column="71">'\n'</lit:literal><op:operator pos:line="624" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="625" pos:column="17">// Comment folding</comment>
		<if pos:line="626" pos:column="17">if <condition pos:line="626" pos:column="20">(<expr><name pos:line="626" pos:column="21">foldComment</name> <op:operator pos:line="626" pos:column="33">&amp;&amp;</op:operator> <name pos:line="626" pos:column="36">atEOL</name> <op:operator pos:line="626" pos:column="42">&amp;&amp;</op:operator> <call><name pos:line="626" pos:column="45">IsCommentLine</name><argument_list pos:line="626" pos:column="58">(<argument><expr><name pos:line="626" pos:column="59">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="626" pos:column="72">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="626" pos:column="80">
		<block pos:line="627" pos:column="17">{
			<if pos:line="628" pos:column="25">if <condition pos:line="628" pos:column="28">(<expr><op:operator pos:line="628" pos:column="29">!</op:operator><call><name pos:line="628" pos:column="30">IsCommentLine</name><argument_list pos:line="628" pos:column="43">(<argument><expr><name pos:line="628" pos:column="44">lineCurrent</name> <op:operator pos:line="628" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="628" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="628" pos:column="61">styler</name></expr></argument>)</argument_list></call>
				<op:operator pos:line="629" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="629" pos:column="36">IsCommentLine</name><argument_list pos:line="629" pos:column="49">(<argument><expr><name pos:line="629" pos:column="50">lineCurrent</name> <op:operator pos:line="629" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="629" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="629" pos:column="67">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="629" pos:column="75">
				<expr_stmt><expr><name pos:line="630" pos:column="33">levelCurrent</name><op:operator pos:line="630" pos:column="45">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="631" pos:column="25">else <if pos:line="631" pos:column="30">if <condition pos:line="631" pos:column="33">(<expr><call><name pos:line="631" pos:column="34">IsCommentLine</name><argument_list pos:line="631" pos:column="47">(<argument><expr><name pos:line="631" pos:column="48">lineCurrent</name> <op:operator pos:line="631" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="631" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="631" pos:column="65">styler</name></expr></argument>)</argument_list></call>
					 <op:operator pos:line="632" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="632" pos:column="45">!</op:operator><call><name pos:line="632" pos:column="46">IsCommentLine</name><argument_list pos:line="632" pos:column="59">(<argument><expr><name pos:line="632" pos:column="60">lineCurrent</name> <op:operator pos:line="632" pos:column="72">+</op:operator> <lit:literal type="number" pos:line="632" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="632" pos:column="77">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="632" pos:column="85">
				<expr_stmt><expr><name pos:line="633" pos:column="33">levelCurrent</name><op:operator pos:line="633" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if></else></if>
		}</block></then></if>
		<if pos:line="635" pos:column="17">if <condition pos:line="635" pos:column="20">(<expr><name pos:line="635" pos:column="21">style</name> <op:operator pos:line="635" pos:column="27">==</op:operator> <name pos:line="635" pos:column="30">SCE_SH_OPERATOR</name></expr>)</condition><then pos:line="635" pos:column="46"> <block pos:line="635" pos:column="47">{
			<if pos:line="636" pos:column="25">if <condition pos:line="636" pos:column="28">(<expr><name pos:line="636" pos:column="29">ch</name> <op:operator pos:line="636" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="636" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="636" pos:column="39"> <block pos:line="636" pos:column="40">{
				<expr_stmt><expr><name pos:line="637" pos:column="33">levelCurrent</name><op:operator pos:line="637" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="638" pos:column="27">else <if pos:line="638" pos:column="32">if <condition pos:line="638" pos:column="35">(<expr><name pos:line="638" pos:column="36">ch</name> <op:operator pos:line="638" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="638" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="638" pos:column="46"> <block pos:line="638" pos:column="47">{
				<expr_stmt><expr><name pos:line="639" pos:column="33">levelCurrent</name><op:operator pos:line="639" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<comment type="line" pos:line="642" pos:column="17">// Here Document folding</comment>
		<if pos:line="643" pos:column="17">if <condition pos:line="643" pos:column="20">(<expr><name pos:line="643" pos:column="21">style</name> <op:operator pos:line="643" pos:column="27">==</op:operator> <name pos:line="643" pos:column="30">SCE_SH_HERE_DELIM</name></expr>)</condition><then pos:line="643" pos:column="48"> <block pos:line="643" pos:column="49">{
			<if pos:line="644" pos:column="25">if <condition pos:line="644" pos:column="28">(<expr><name pos:line="644" pos:column="29">ch</name> <op:operator pos:line="644" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="644" pos:column="35">'&lt;'</lit:literal> <op:operator pos:line="644" pos:column="39">&amp;&amp;</op:operator> <name pos:line="644" pos:column="42">chNext</name> <op:operator pos:line="644" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="644" pos:column="52">'&lt;'</lit:literal></expr>)</condition><then pos:line="644" pos:column="56"> <block pos:line="644" pos:column="57">{
				<expr_stmt><expr><name pos:line="645" pos:column="33">levelCurrent</name><op:operator pos:line="645" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="647" pos:column="19">else <if pos:line="647" pos:column="24">if <condition pos:line="647" pos:column="27">(<expr><name pos:line="647" pos:column="28">style</name> <op:operator pos:line="647" pos:column="34">==</op:operator> <name pos:line="647" pos:column="37">SCE_SH_HERE_Q</name> <op:operator pos:line="647" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="647" pos:column="54">styler</name><op:operator pos:line="647" pos:column="60">.</op:operator><name pos:line="647" pos:column="61">StyleAt</name></name><argument_list pos:line="647" pos:column="68">(<argument><expr><name pos:line="647" pos:column="69">i</name><op:operator pos:line="647" pos:column="70">+</op:operator><lit:literal type="number" pos:line="647" pos:column="71">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="647" pos:column="74">==</op:operator> <name pos:line="647" pos:column="77">SCE_PL_DEFAULT</name></expr>)</condition><then pos:line="647" pos:column="92"> <block pos:line="647" pos:column="93">{
			<expr_stmt><expr><name pos:line="648" pos:column="25">levelCurrent</name><op:operator pos:line="648" pos:column="37">--</op:operator></expr>;</expr_stmt>
		}</block></then></if></else></if>
		<if pos:line="650" pos:column="17">if <condition pos:line="650" pos:column="20">(<expr><name pos:line="650" pos:column="21">atEOL</name></expr>)</condition><then pos:line="650" pos:column="27"> <block pos:line="650" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="651" pos:column="25">int</name></type> <name pos:line="651" pos:column="29">lev</name> <init pos:line="651" pos:column="33">= <expr><name pos:line="651" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="652" pos:column="25">if <condition pos:line="652" pos:column="28">(<expr><name pos:line="652" pos:column="29">visibleChars</name> <op:operator pos:line="652" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="652" pos:column="45">0</lit:literal> <op:operator pos:line="652" pos:column="47">&amp;&amp;</op:operator> <name pos:line="652" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="652" pos:column="62">
				<expr_stmt><expr><name pos:line="653" pos:column="33">lev</name> <op:operator pos:line="653" pos:column="37">|=</op:operator> <name pos:line="653" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="654" pos:column="25">if <condition pos:line="654" pos:column="28">(<expr><op:operator pos:line="654" pos:column="29">(</op:operator><name pos:line="654" pos:column="30">levelCurrent</name> <op:operator pos:line="654" pos:column="43">&gt;</op:operator> <name pos:line="654" pos:column="45">levelPrev</name><op:operator pos:line="654" pos:column="54">)</op:operator> <op:operator pos:line="654" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="654" pos:column="59">(</op:operator><name pos:line="654" pos:column="60">visibleChars</name> <op:operator pos:line="654" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="654" pos:column="75">0</lit:literal><op:operator pos:line="654" pos:column="76">)</op:operator></expr>)</condition><then pos:line="654" pos:column="78">
				<expr_stmt><expr><name pos:line="655" pos:column="33">lev</name> <op:operator pos:line="655" pos:column="37">|=</op:operator> <name pos:line="655" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="656" pos:column="25">if <condition pos:line="656" pos:column="28">(<expr><name pos:line="656" pos:column="29">lev</name> <op:operator pos:line="656" pos:column="33">!=</op:operator> <call><name><name pos:line="656" pos:column="36">styler</name><op:operator pos:line="656" pos:column="42">.</op:operator><name pos:line="656" pos:column="43">LevelAt</name></name><argument_list pos:line="656" pos:column="50">(<argument><expr><name pos:line="656" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="656" pos:column="64"> <block pos:line="656" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="657" pos:column="33">styler</name><op:operator pos:line="657" pos:column="39">.</op:operator><name pos:line="657" pos:column="40">SetLevel</name></name><argument_list pos:line="657" pos:column="48">(<argument><expr><name pos:line="657" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="657" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="659" pos:column="25">lineCurrent</name><op:operator pos:line="659" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="660" pos:column="25">levelPrev</name> <op:operator pos:line="660" pos:column="35">=</op:operator> <name pos:line="660" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="661" pos:column="25">visibleChars</name> <op:operator pos:line="661" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="661" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="663" pos:column="17">if <condition pos:line="663" pos:column="20">(<expr><op:operator pos:line="663" pos:column="21">!</op:operator><call><name pos:line="663" pos:column="22">isspacechar</name><argument_list pos:line="663" pos:column="33">(<argument><expr><name pos:line="663" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="663" pos:column="38">
			<expr_stmt><expr><name pos:line="664" pos:column="25">visibleChars</name><op:operator pos:line="664" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="666" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="667" pos:column="9">int</name></type> <name pos:line="667" pos:column="13">flagsNext</name> <init pos:line="667" pos:column="23">= <expr><call><name><name pos:line="667" pos:column="25">styler</name><op:operator pos:line="667" pos:column="31">.</op:operator><name pos:line="667" pos:column="32">LevelAt</name></name><argument_list pos:line="667" pos:column="39">(<argument><expr><name pos:line="667" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="667" pos:column="53">&amp;</op:operator> <op:operator pos:line="667" pos:column="55">~</op:operator><name pos:line="667" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="668" pos:column="9">styler</name><op:operator pos:line="668" pos:column="15">.</op:operator><name pos:line="668" pos:column="16">SetLevel</name></name><argument_list pos:line="668" pos:column="24">(<argument><expr><name pos:line="668" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="668" pos:column="38">levelPrev</name> <op:operator pos:line="668" pos:column="48">|</op:operator> <name pos:line="668" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="671" pos:column="1">static</specifier> <specifier pos:line="671" pos:column="8">const</specifier> <name pos:line="671" pos:column="14">char</name> <type:modifier pos:line="671" pos:column="19">*</type:modifier> <specifier pos:line="671" pos:column="21">const</specifier></type> <name><name pos:line="671" pos:column="27">bashWordListDesc</name><index pos:line="671" pos:column="43">[]</index></name> <init pos:line="671" pos:column="46">= <expr><block pos:line="671" pos:column="48">{
	<expr><lit:literal type="string" pos:line="672" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="673" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="676" pos:column="1">LexerModule</name></type> <name pos:line="676" pos:column="13">lmBash</name><argument_list pos:line="676" pos:column="19">(<argument><expr><name pos:line="676" pos:column="20">SCLEX_BASH</name></expr></argument>, <argument><expr><name pos:line="676" pos:column="32">ColouriseBashDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="676" pos:column="50">"bash"</lit:literal></expr></argument>, <argument><expr><name pos:line="676" pos:column="58">FoldBashDoc</name></expr></argument>, <argument><expr><name pos:line="676" pos:column="71">bashWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
