<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\WindowsDlg\WinMgr.h" pos:tabs="8"><comment type="line" format="doxygen" pos:line="1" pos:column="1">////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="2" pos:column="1">// MSDN Magazine -- July 2001</comment>
<comment type="line" pos:line="3" pos:column="1">// If this code works, it was written by Paul DiLascia.</comment>
<comment type="line" pos:line="4" pos:column="1">// If not, I don't know who wrote it.</comment>
<comment type="line" pos:line="5" pos:column="1">// Compiles with Visual C++ 6.0. Runs on Win 98 and probably Win 2000 too.</comment>
<comment type="line" pos:line="6" pos:column="1">// Set tabsize = 3 in your editor.</comment>
<comment type="line" pos:line="7" pos:column="1">//</comment>
<comment type="line" pos:line="8" pos:column="1">// WinMgr.h -- Main header file for WinMgr library.</comment>
<comment type="line" pos:line="9" pos:column="1">//</comment>
<comment type="line" pos:line="10" pos:column="1">// Theo - Heavily modified to remove MFC dependencies</comment>
<comment type="line" pos:line="11" pos:column="1">//        Replaced CWnd*/HWND, CRect/RECT, CSize/SIZE, CPoint/POINT</comment>
<cpp:ifndef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifndef</cpp:directive> <name pos:line="12" pos:column="9">WINMGR_H</name></cpp:ifndef>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">WINMGR_H</name></cpp:macro></cpp:define>

<cpp:pragma pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">pragma</cpp:directive> once</cpp:pragma>

<comment type="line" pos:line="17" pos:column="1">// when using screen dimensions, this is infinite</comment>
<comment type="line" pos:line="18" pos:column="1">//const LONG INFINITY=0x7fff; // max short</comment>
<comment type="line" pos:line="19" pos:column="1">//change to DEFINE for GCC</comment>
<cpp:define pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="20" pos:column="9">INFINITY</name></cpp:macro> <cpp:value pos:line="20" pos:column="18">0x7fff</cpp:value></cpp:define> <comment type="line" pos:line="20" pos:column="25">// max short</comment>

<decl_stmt><decl><type><specifier pos:line="22" pos:column="1">const</specifier> <name pos:line="22" pos:column="7">SIZE</name></type> <name pos:line="22" pos:column="12">SIZEZERO</name> <init pos:line="22" pos:column="21">= <expr><block pos:line="22" pos:column="23">{<expr><lit:literal type="number" pos:line="22" pos:column="24">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="22" pos:column="27">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="23" pos:column="1">const</specifier> <name pos:line="23" pos:column="7">SIZE</name></type> <name pos:line="23" pos:column="12">SIZEMAX</name> <init pos:line="23" pos:column="20">= <expr><block pos:line="23" pos:column="22">{<expr><name pos:line="23" pos:column="23">INFINITY</name></expr>,<expr><name pos:line="23" pos:column="32">INFINITY</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="25" pos:column="1">inline</specifier> <name pos:line="25" pos:column="8">SIZE</name></type> <name pos:line="25" pos:column="13">GetSize</name><parameter_list pos:line="25" pos:column="20">(<param><decl><type><name pos:line="25" pos:column="21">LONG</name></type> <name pos:line="25" pos:column="26">w</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="29">LONG</name></type> <name pos:line="25" pos:column="34">h</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="37">{ 
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">SIZE</name></type> <name pos:line="26" pos:column="14">sz</name> <init pos:line="26" pos:column="17">= <expr><block pos:line="26" pos:column="19">{<expr><name pos:line="26" pos:column="20">w</name></expr>, <expr><name pos:line="26" pos:column="23">h</name></expr>}</block></expr></init></decl>;</decl_stmt> <return pos:line="26" pos:column="27">return <expr><name pos:line="26" pos:column="34">sz</name></expr>;</return> 
}</block></function>

<function><type><specifier pos:line="29" pos:column="1">inline</specifier> <name pos:line="29" pos:column="8">POINT</name></type> <name pos:line="29" pos:column="14">GetPoint</name><parameter_list pos:line="29" pos:column="22">(<param><decl><type><name pos:line="29" pos:column="23">LONG</name></type> <name pos:line="29" pos:column="28">x</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="31">LONG</name></type> <name pos:line="29" pos:column="36">y</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="39">{ 
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">POINT</name></type> <name pos:line="30" pos:column="15">pt</name> <init pos:line="30" pos:column="18">= <expr><block pos:line="30" pos:column="20">{<expr><name pos:line="30" pos:column="21">x</name></expr>, <expr><name pos:line="30" pos:column="24">y</name></expr>}</block></expr></init></decl>;</decl_stmt> <return pos:line="30" pos:column="28">return <expr><name pos:line="30" pos:column="35">pt</name></expr>;</return> 
}</block></function>

<function><type><specifier pos:line="33" pos:column="1">inline</specifier> <name pos:line="33" pos:column="8">LONG</name></type> <name pos:line="33" pos:column="13">RectWidth</name><parameter_list pos:line="33" pos:column="22">(<param><decl><type><specifier pos:line="33" pos:column="23">const</specifier> <name pos:line="33" pos:column="29">RECT</name><type:modifier pos:line="33" pos:column="33">&amp;</type:modifier></type> <name pos:line="33" pos:column="35">rc</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="39">{ 
	<return pos:line="34" pos:column="9">return <expr><name><name pos:line="34" pos:column="16">rc</name><op:operator pos:line="34" pos:column="18">.</op:operator><name pos:line="34" pos:column="19">right</name></name> <op:operator pos:line="34" pos:column="25">-</op:operator> <name><name pos:line="34" pos:column="27">rc</name><op:operator pos:line="34" pos:column="29">.</op:operator><name pos:line="34" pos:column="30">left</name></name></expr>;</return> 
}</block></function>

<function><type><specifier pos:line="37" pos:column="1">inline</specifier> <name pos:line="37" pos:column="8">LONG</name></type> <name pos:line="37" pos:column="13">RectHeight</name><parameter_list pos:line="37" pos:column="23">(<param><decl><type><specifier pos:line="37" pos:column="24">const</specifier> <name pos:line="37" pos:column="30">RECT</name><type:modifier pos:line="37" pos:column="34">&amp;</type:modifier></type> <name pos:line="37" pos:column="36">rc</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="40">{ 
	<return pos:line="38" pos:column="9">return <expr><name><name pos:line="38" pos:column="16">rc</name><op:operator pos:line="38" pos:column="18">.</op:operator><name pos:line="38" pos:column="19">bottom</name></name> <op:operator pos:line="38" pos:column="26">-</op:operator> <name><name pos:line="38" pos:column="28">rc</name><op:operator pos:line="38" pos:column="30">.</op:operator><name pos:line="38" pos:column="31">top</name></name></expr>;</return> 
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">inline</specifier> <name pos:line="41" pos:column="8">SIZE</name></type> <name pos:line="41" pos:column="13">RectToSize</name><parameter_list pos:line="41" pos:column="23">(<param><decl><type><specifier pos:line="41" pos:column="24">const</specifier> <name pos:line="41" pos:column="30">RECT</name><type:modifier pos:line="41" pos:column="34">&amp;</type:modifier></type> <name pos:line="41" pos:column="36">rc</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="40">{ 
	<return pos:line="42" pos:column="9">return <expr><call><name pos:line="42" pos:column="16">GetSize</name><argument_list pos:line="42" pos:column="23">(<argument><expr><call><name pos:line="42" pos:column="24">RectWidth</name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="39">RectHeight</name><argument_list pos:line="42" pos:column="49">(<argument><expr><name pos:line="42" pos:column="50">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="45" pos:column="1">inline</specifier> <name pos:line="45" pos:column="8">POINT</name></type> <name pos:line="45" pos:column="14">RectToPoint</name><parameter_list pos:line="45" pos:column="25">(<param><decl><type><specifier pos:line="45" pos:column="26">const</specifier> <name pos:line="45" pos:column="32">RECT</name><type:modifier pos:line="45" pos:column="36">&amp;</type:modifier></type> <name pos:line="45" pos:column="38">rc</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="42">{ 
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">POINT</name></type> <name pos:line="46" pos:column="15">pt</name> <init pos:line="46" pos:column="18">= <expr><block pos:line="46" pos:column="20">{<expr><name><name pos:line="46" pos:column="21">rc</name><op:operator pos:line="46" pos:column="23">.</op:operator><name pos:line="46" pos:column="24">left</name></name></expr>, <expr><name><name pos:line="46" pos:column="30">rc</name><op:operator pos:line="46" pos:column="32">.</op:operator><name pos:line="46" pos:column="33">top</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
	<return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">pt</name></expr>;</return> 
}</block></function>

<function><type><specifier pos:line="50" pos:column="1">inline</specifier> <name pos:line="50" pos:column="8">POINT</name></type> <name pos:line="50" pos:column="14">SizeToPoint</name><parameter_list pos:line="50" pos:column="25">(<param><decl><type><name pos:line="50" pos:column="26">SIZE</name></type> <name pos:line="50" pos:column="31">sz</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="35">{ 
	<return pos:line="51" pos:column="9">return <expr><call><name pos:line="51" pos:column="16">GetPoint</name><argument_list pos:line="51" pos:column="24">(<argument><expr><name><name pos:line="51" pos:column="25">sz</name><op:operator pos:line="51" pos:column="27">.</op:operator><name pos:line="51" pos:column="28">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="32">sz</name><op:operator pos:line="51" pos:column="34">.</op:operator><name pos:line="51" pos:column="35">cy</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="54" pos:column="1">inline</specifier> <name pos:line="54" pos:column="8">RECT</name> <type:modifier pos:line="54" pos:column="13">&amp;</type:modifier></type><name pos:line="54" pos:column="14">OffsetRect</name><parameter_list pos:line="54" pos:column="24">(<param><decl><type><name pos:line="54" pos:column="25">RECT</name><type:modifier pos:line="54" pos:column="29">&amp;</type:modifier></type> <name pos:line="54" pos:column="31">rc</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="35">POINT</name></type> <name pos:line="54" pos:column="41">pt</name></decl></param>)</parameter_list> <block pos:line="54" pos:column="45">{
	<expr_stmt><expr><name><name pos:line="55" pos:column="9">rc</name><op:operator pos:line="55" pos:column="11">.</op:operator><name pos:line="55" pos:column="12">left</name></name> <op:operator pos:line="55" pos:column="17">+=</op:operator> <name><name pos:line="55" pos:column="20">pt</name><op:operator pos:line="55" pos:column="22">.</op:operator><name pos:line="55" pos:column="23">x</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name pos:line="55" pos:column="26">rc</name><op:operator pos:line="55" pos:column="28">.</op:operator><name pos:line="55" pos:column="29">right</name></name> <op:operator pos:line="55" pos:column="35">+=</op:operator> <name><name pos:line="55" pos:column="38">pt</name><op:operator pos:line="55" pos:column="40">.</op:operator><name pos:line="55" pos:column="41">x</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="56" pos:column="9">rc</name><op:operator pos:line="56" pos:column="11">.</op:operator><name pos:line="56" pos:column="12">top</name></name> <op:operator pos:line="56" pos:column="16">+=</op:operator> <name><name pos:line="56" pos:column="19">pt</name><op:operator pos:line="56" pos:column="21">.</op:operator><name pos:line="56" pos:column="22">y</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name pos:line="56" pos:column="25">rc</name><op:operator pos:line="56" pos:column="27">.</op:operator><name pos:line="56" pos:column="28">bottom</name></name> <op:operator pos:line="56" pos:column="35">+=</op:operator> <name><name pos:line="56" pos:column="38">pt</name><op:operator pos:line="56" pos:column="40">.</op:operator><name pos:line="56" pos:column="41">y</name></name></expr>;</expr_stmt>
	<return pos:line="57" pos:column="9">return <expr><name pos:line="57" pos:column="16">rc</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="60" pos:column="1">// handy functions to take the min or max of a SIZE</comment>
<function><type><specifier pos:line="61" pos:column="1">inline</specifier> <name pos:line="61" pos:column="8">SIZE</name></type> <name pos:line="61" pos:column="13">minsize</name><parameter_list pos:line="61" pos:column="20">(<param><decl><type><name pos:line="61" pos:column="21">SIZE</name></type> <name pos:line="61" pos:column="26">a</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="29">SIZE</name></type> <name pos:line="61" pos:column="34">b</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="37">{
	<return pos:line="62" pos:column="9">return <expr><call><name pos:line="62" pos:column="16">GetSize</name><argument_list pos:line="62" pos:column="23">(<argument><expr><call><name pos:line="62" pos:column="24">min</name><argument_list pos:line="62" pos:column="27">(<argument><expr><op:operator pos:line="62" pos:column="28">(</op:operator><name pos:line="62" pos:column="29">UINT</name><op:operator pos:line="62" pos:column="33">)</op:operator><name><name pos:line="62" pos:column="34">a</name><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">cx</name></name></expr></argument>,<argument><expr><op:operator pos:line="62" pos:column="39">(</op:operator><name pos:line="62" pos:column="40">UINT</name><op:operator pos:line="62" pos:column="44">)</op:operator><name><name pos:line="62" pos:column="45">b</name><op:operator pos:line="62" pos:column="46">.</op:operator><name pos:line="62" pos:column="47">cx</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name pos:line="62" pos:column="51">min</name><argument_list pos:line="62" pos:column="54">(<argument><expr><op:operator pos:line="62" pos:column="55">(</op:operator><name pos:line="62" pos:column="56">UINT</name><op:operator pos:line="62" pos:column="60">)</op:operator><name><name pos:line="62" pos:column="61">a</name><op:operator pos:line="62" pos:column="62">.</op:operator><name pos:line="62" pos:column="63">cy</name></name></expr></argument>,<argument><expr><op:operator pos:line="62" pos:column="66">(</op:operator><name pos:line="62" pos:column="67">UINT</name><op:operator pos:line="62" pos:column="71">)</op:operator><name><name pos:line="62" pos:column="72">b</name><op:operator pos:line="62" pos:column="73">.</op:operator><name pos:line="62" pos:column="74">cy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="65" pos:column="1">inline</specifier> <name pos:line="65" pos:column="8">SIZE</name></type> <name pos:line="65" pos:column="13">maxsize</name><parameter_list pos:line="65" pos:column="20">(<param><decl><type><name pos:line="65" pos:column="21">SIZE</name></type> <name pos:line="65" pos:column="26">a</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="29">SIZE</name></type> <name pos:line="65" pos:column="34">b</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="37">{
	<return pos:line="66" pos:column="9">return <expr><call><name pos:line="66" pos:column="16">GetSize</name><argument_list pos:line="66" pos:column="23">(<argument><expr><call><name pos:line="66" pos:column="24">max</name><argument_list pos:line="66" pos:column="27">(<argument><expr><op:operator pos:line="66" pos:column="28">(</op:operator><name pos:line="66" pos:column="29">UINT</name><op:operator pos:line="66" pos:column="33">)</op:operator><name><name pos:line="66" pos:column="34">a</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">cx</name></name></expr></argument>,<argument><expr><op:operator pos:line="66" pos:column="39">(</op:operator><name pos:line="66" pos:column="40">UINT</name><op:operator pos:line="66" pos:column="44">)</op:operator><name><name pos:line="66" pos:column="45">b</name><op:operator pos:line="66" pos:column="46">.</op:operator><name pos:line="66" pos:column="47">cx</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name pos:line="66" pos:column="51">max</name><argument_list pos:line="66" pos:column="54">(<argument><expr><op:operator pos:line="66" pos:column="55">(</op:operator><name pos:line="66" pos:column="56">UINT</name><op:operator pos:line="66" pos:column="60">)</op:operator><name><name pos:line="66" pos:column="61">a</name><op:operator pos:line="66" pos:column="62">.</op:operator><name pos:line="66" pos:column="63">cy</name></name></expr></argument>,<argument><expr><op:operator pos:line="66" pos:column="66">(</op:operator><name pos:line="66" pos:column="67">UINT</name><op:operator pos:line="66" pos:column="71">)</op:operator><name><name pos:line="66" pos:column="72">b</name><op:operator pos:line="66" pos:column="73">.</op:operator><name pos:line="66" pos:column="74">cy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="69" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="70" pos:column="1">// Size info about a rectangle/row/column</comment>
<comment type="line" pos:line="71" pos:column="1">//</comment>
<struct pos:line="72" pos:column="1">struct <name pos:line="72" pos:column="8">SIZEINFO</name> <block pos:line="72" pos:column="17">{<public type="default" pos:line="72" pos:column="18">
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">SIZE</name></type> <name pos:line="73" pos:column="14">szAvail</name></decl>;</decl_stmt>		<comment type="line" pos:line="73" pos:column="33">// total size avail (passed)</comment>
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">SIZE</name></type> <name pos:line="74" pos:column="14">szDesired</name></decl>;</decl_stmt>	<comment type="line" pos:line="74" pos:column="25">// desired size: default=current</comment>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">SIZE</name></type> <name pos:line="75" pos:column="14">szMin</name></decl>;</decl_stmt>			<comment type="line" pos:line="75" pos:column="41">// minimum size: default=SIZEZERO</comment>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">SIZE</name></type> <name pos:line="76" pos:column="14">szMax</name></decl>;</decl_stmt>			<comment type="line" pos:line="76" pos:column="41">// maximum size: default=MAXSIZE</comment>
</public>}</block>;</struct>

<comment type="line" pos:line="79" pos:column="1">// types of rectangles:</comment>
<cpp:define pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="80" pos:column="9">WRCT_END</name></cpp:macro>			<cpp:value pos:line="80" pos:column="41">0</cpp:value></cpp:define>				<comment type="line" pos:line="80" pos:column="73">// end of table</comment>
<cpp:define pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="81" pos:column="9">WRCT_FIXED</name></cpp:macro>		<cpp:value pos:line="81" pos:column="33">0x0001</cpp:value></cpp:define>		<comment type="line" pos:line="81" pos:column="49">// height/width is fixed</comment>
<cpp:define pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="82" pos:column="9">WRCT_PCT</name></cpp:macro>			<cpp:value pos:line="82" pos:column="41">0x0002</cpp:value></cpp:define>		<comment type="line" pos:line="82" pos:column="57">// height/width is percent of total</comment>
<cpp:define pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="83" pos:column="9">WRCT_REST</name></cpp:macro>		<cpp:value pos:line="83" pos:column="33">0x0003</cpp:value></cpp:define>		<comment type="line" pos:line="83" pos:column="49">// height/width is whatever remains</comment>
<cpp:define pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="84" pos:column="9">WRCT_TOFIT</name></cpp:macro>		<cpp:value pos:line="84" pos:column="33">0x0004</cpp:value></cpp:define>		<comment type="line" pos:line="84" pos:column="49">// height/width to fit contents</comment>
<cpp:define pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="85" pos:column="9">WRCF_TYPEMASK</name></cpp:macro>	<cpp:value pos:line="85" pos:column="25">0x000F</cpp:value></cpp:define>

<comment type="line" pos:line="87" pos:column="1">// group flags</comment>
<cpp:define pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="88" pos:column="9">WRCF_ROWGROUP</name></cpp:macro>	<cpp:value pos:line="88" pos:column="25">0x0010</cpp:value></cpp:define>		<comment type="line" pos:line="88" pos:column="41">// beginning of row group</comment>
<cpp:define pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="89" pos:column="9">WRCF_COLGROUP</name></cpp:macro>	<cpp:value pos:line="89" pos:column="25">0x0020</cpp:value></cpp:define>		<comment type="line" pos:line="89" pos:column="41">// beginning of column group</comment>
<cpp:define pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="90" pos:column="9">WRCF_ENDGROUP</name></cpp:macro>	<cpp:value pos:line="90" pos:column="25">0x00F0</cpp:value></cpp:define>		<comment type="line" pos:line="90" pos:column="41">// end of group</comment>
<cpp:define pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="91" pos:column="9">WRCF_GROUPMASK</name></cpp:macro>	<cpp:value pos:line="91" pos:column="25">0x00F0</cpp:value></cpp:define>

<comment type="line" format="doxygen" pos:line="93" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="94" pos:column="1">// This structure is used to hold a rectangle and describe its layout. Each</comment>
<comment type="line" pos:line="95" pos:column="1">// WINRECT corresponds to a child rectangle/window. Each window that uses</comment>
<comment type="line" pos:line="96" pos:column="1">// WinMgr provides a table (C array) of these to describe its layout.</comment>
<comment type="line" pos:line="97" pos:column="1">//</comment>
<class pos:line="98" pos:column="1">class <name pos:line="98" pos:column="7">WINRECT</name> <block pos:line="98" pos:column="15">{<private type="default" pos:line="98" pos:column="16">
</private><protected pos:line="99" pos:column="1">protected:
	<comment type="line" pos:line="100" pos:column="9">// pointers initialized by the window manager for easy traversing:</comment>
	<decl_stmt><decl><type><name pos:line="101" pos:column="9">WINRECT</name><type:modifier pos:line="101" pos:column="16">*</type:modifier></type> <name pos:line="101" pos:column="18">next</name></decl>;</decl_stmt>			<comment type="line" pos:line="101" pos:column="41">// next at this level</comment>
	<decl_stmt><decl><type><name pos:line="102" pos:column="9">WINRECT</name><type:modifier pos:line="102" pos:column="16">*</type:modifier></type> <name pos:line="102" pos:column="18">prev</name></decl>;</decl_stmt>			<comment type="line" pos:line="102" pos:column="41">// prev at this level</comment>

	<comment type="line" pos:line="104" pos:column="9">// data</comment>
	<decl_stmt><decl><type><name pos:line="105" pos:column="9">RECT</name></type>  <name pos:line="105" pos:column="15">rc</name></decl>;</decl_stmt>				<comment type="line" pos:line="105" pos:column="49">// current rectangle position/size</comment>
	<decl_stmt><decl><type><name pos:line="106" pos:column="9">WORD</name></type>  <name pos:line="106" pos:column="15">flags</name></decl>;</decl_stmt>			<comment type="line" pos:line="106" pos:column="41">// flags (see above)</comment>
	<decl_stmt><decl><type><name pos:line="107" pos:column="9">UINT</name></type>	<name pos:line="107" pos:column="17">nID</name></decl>;</decl_stmt>				<comment type="line" pos:line="107" pos:column="49">// window ID if this WINRECT represents a window</comment>
	<decl_stmt><decl><type><name pos:line="108" pos:column="9">LONG</name></type>	<name pos:line="108" pos:column="17">param</name></decl>;</decl_stmt>			<comment type="line" pos:line="108" pos:column="41">// arg depends on type</comment>

</protected><public pos:line="110" pos:column="1">public:
	<constructor_decl><name pos:line="111" pos:column="9">WINRECT</name><parameter_list pos:line="111" pos:column="16">(<param><decl><type><name pos:line="111" pos:column="17">WORD</name></type> <name pos:line="111" pos:column="22">f</name></decl></param>, <param><decl><type><name pos:line="111" pos:column="25">int</name></type> <name pos:line="111" pos:column="29">id</name></decl></param>, <param><decl><type><name pos:line="111" pos:column="33">LONG</name></type> <name pos:line="111" pos:column="38">p</name></decl></param>)</parameter_list>;</constructor_decl>

	<function_decl><type><specifier pos:line="113" pos:column="9">static</specifier> <name pos:line="113" pos:column="16">WINRECT</name><type:modifier pos:line="113" pos:column="23">*</type:modifier></type> <name pos:line="113" pos:column="25">InitMap</name><parameter_list pos:line="113" pos:column="32">(<param><decl><type><name pos:line="113" pos:column="33">WINRECT</name><type:modifier pos:line="113" pos:column="40">*</type:modifier></type> <name pos:line="113" pos:column="42">map</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="47">WINRECT</name><type:modifier pos:line="113" pos:column="54">*</type:modifier></type> <name pos:line="113" pos:column="56">parent</name><init pos:line="113" pos:column="62">=<expr><name pos:line="113" pos:column="63">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="115" pos:column="9">WINRECT</name><type:modifier pos:line="115" pos:column="16">*</type:modifier></type> <name pos:line="115" pos:column="18">Prev</name><parameter_list pos:line="115" pos:column="22">()</parameter_list>			<block pos:line="115" pos:column="41">{ <return pos:line="115" pos:column="43">return <expr><name pos:line="115" pos:column="50">prev</name></expr>;</return> }</block></function>
	<function><type><name pos:line="116" pos:column="9">WINRECT</name><type:modifier pos:line="116" pos:column="16">*</type:modifier></type> <name pos:line="116" pos:column="18">Next</name><parameter_list pos:line="116" pos:column="22">()</parameter_list>			<block pos:line="116" pos:column="41">{ <return pos:line="116" pos:column="43">return <expr><name pos:line="116" pos:column="50">next</name></expr>;</return> }</block></function>
	<function><type><name pos:line="117" pos:column="9">WINRECT</name><type:modifier pos:line="117" pos:column="16">*</type:modifier></type> <name pos:line="117" pos:column="18">Children</name><parameter_list pos:line="117" pos:column="26">()</parameter_list>		<block pos:line="117" pos:column="41">{ <return pos:line="117" pos:column="43">return <expr><call><name pos:line="117" pos:column="50">IsGroup</name><argument_list pos:line="117" pos:column="57">()</argument_list></call> <op:operator pos:line="117" pos:column="60">?</op:operator> <name pos:line="117" pos:column="62">this</name><op:operator pos:line="117" pos:column="66">+</op:operator><lit:literal type="number" pos:line="117" pos:column="67">1</lit:literal> <op:operator pos:line="117" pos:column="69">:</op:operator> <name pos:line="117" pos:column="71">NULL</name></expr>;</return> }</block></function>
	<function_decl><type><name pos:line="118" pos:column="9">WINRECT</name><type:modifier pos:line="118" pos:column="16">*</type:modifier></type> <name pos:line="118" pos:column="18">Parent</name><parameter_list pos:line="118" pos:column="24">()</parameter_list>;</function_decl>
	<function><type><name pos:line="119" pos:column="9">WORD</name></type> <name pos:line="119" pos:column="14">GetFlags</name><parameter_list pos:line="119" pos:column="22">()</parameter_list>			<block pos:line="119" pos:column="41">{ <return pos:line="119" pos:column="43">return <expr><name pos:line="119" pos:column="50">flags</name></expr>;</return> }</block></function>
	<function><type><name pos:line="120" pos:column="9">WORD</name></type> <name pos:line="120" pos:column="14">SetFlags</name><parameter_list pos:line="120" pos:column="22">(<param><decl><type><name pos:line="120" pos:column="23">WORD</name></type> <name pos:line="120" pos:column="28">f</name></decl></param>)</parameter_list>	<block pos:line="120" pos:column="33">{ <return pos:line="120" pos:column="35">return <expr><name pos:line="120" pos:column="42">flags</name><op:operator pos:line="120" pos:column="47">=</op:operator><name pos:line="120" pos:column="48">f</name></expr>;</return> }</block></function>
	<function><type><name pos:line="121" pos:column="9">LONG</name></type> <name pos:line="121" pos:column="14">GetParam</name><parameter_list pos:line="121" pos:column="22">()</parameter_list>			<block pos:line="121" pos:column="41">{ <return pos:line="121" pos:column="43">return <expr><name pos:line="121" pos:column="50">param</name></expr>;</return> }</block></function>
	<function><type><name pos:line="122" pos:column="9">LONG</name></type> <name pos:line="122" pos:column="14">SetParam</name><parameter_list pos:line="122" pos:column="22">(<param><decl><type><name pos:line="122" pos:column="23">LONG</name></type> <name pos:line="122" pos:column="28">p</name></decl></param>)</parameter_list>	<block pos:line="122" pos:column="33">{ <return pos:line="122" pos:column="35">return <expr><name pos:line="122" pos:column="42">param</name><op:operator pos:line="122" pos:column="47">=</op:operator><name pos:line="122" pos:column="48">p</name></expr>;</return> }</block></function>
	<function><type><name pos:line="123" pos:column="9">UINT</name></type> <name pos:line="123" pos:column="14">GetID</name><parameter_list pos:line="123" pos:column="19">()</parameter_list>				<block pos:line="123" pos:column="49">{ <return pos:line="123" pos:column="51">return <expr><name pos:line="123" pos:column="58">nID</name></expr>;</return> }</block></function>
	<function><type><name pos:line="124" pos:column="9">UINT</name></type> <name pos:line="124" pos:column="14">SetID</name><parameter_list pos:line="124" pos:column="19">(<param><decl><type><name pos:line="124" pos:column="20">UINT</name></type> <name pos:line="124" pos:column="25">id</name></decl></param>)</parameter_list>		<block pos:line="124" pos:column="41">{ <return pos:line="124" pos:column="43">return <expr><name pos:line="124" pos:column="50">nID</name><op:operator pos:line="124" pos:column="53">=</op:operator><name pos:line="124" pos:column="54">id</name></expr>;</return> }</block></function>
	<function><type><name pos:line="125" pos:column="9">RECT</name><type:modifier pos:line="125" pos:column="13">&amp;</type:modifier></type> <name pos:line="125" pos:column="15">GetRect</name><parameter_list pos:line="125" pos:column="22">()</parameter_list>					<block pos:line="125" pos:column="57">{ <return pos:line="125" pos:column="59">return <expr><name pos:line="125" pos:column="66">rc</name></expr>;</return> }</block></function>
	<function><type><name pos:line="126" pos:column="9">void</name></type> <name pos:line="126" pos:column="14">SetRect</name><parameter_list pos:line="126" pos:column="21">(<param><decl><type><specifier pos:line="126" pos:column="22">const</specifier> <name pos:line="126" pos:column="28">RECT</name><type:modifier pos:line="126" pos:column="32">&amp;</type:modifier></type> <name pos:line="126" pos:column="34">r</name></decl></param>)</parameter_list>	<block pos:line="126" pos:column="41">{ <expr_stmt><expr><name pos:line="126" pos:column="43">rc</name> <op:operator pos:line="126" pos:column="46">=</op:operator> <name pos:line="126" pos:column="48">r</name></expr>;</expr_stmt> }</block></function>
	<function><type><name pos:line="127" pos:column="9">WORD</name></type> <name pos:line="127" pos:column="14">Type</name><parameter_list pos:line="127" pos:column="18">()</parameter_list> <specifier pos:line="127" pos:column="21">const</specifier>			<block pos:line="127" pos:column="49">{ <return pos:line="127" pos:column="51">return <expr><name pos:line="127" pos:column="58">flags</name> <op:operator pos:line="127" pos:column="64">&amp;</op:operator> <name pos:line="127" pos:column="66">WRCF_TYPEMASK</name></expr>;</return> }</block></function>
	<function><type><name pos:line="128" pos:column="9">WORD</name></type> <name pos:line="128" pos:column="14">GroupType</name><parameter_list pos:line="128" pos:column="23">()</parameter_list> <specifier pos:line="128" pos:column="26">const</specifier>	<block pos:line="128" pos:column="33">{ <return pos:line="128" pos:column="35">return <expr><name pos:line="128" pos:column="42">flags</name> <op:operator pos:line="128" pos:column="48">&amp;</op:operator> <name pos:line="128" pos:column="50">WRCF_GROUPMASK</name></expr>;</return> }</block></function>
	<function><type><name pos:line="129" pos:column="9">BOOL</name></type> <name pos:line="129" pos:column="14">IsGroup</name><parameter_list pos:line="129" pos:column="21">()</parameter_list> <specifier pos:line="129" pos:column="24">const</specifier>		<block pos:line="129" pos:column="41">{ <return pos:line="129" pos:column="43">return <expr><call><name pos:line="129" pos:column="50">GroupType</name><argument_list pos:line="129" pos:column="59">()</argument_list></call> <op:operator pos:line="129" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="129" pos:column="65">GroupType</name><argument_list pos:line="129" pos:column="74">()</argument_list></call><op:operator pos:line="129" pos:column="76">!=</op:operator><name pos:line="129" pos:column="78">WRCF_ENDGROUP</name></expr>;</return> }</block></function>
	<function><type><name pos:line="130" pos:column="9">BOOL</name></type> <name pos:line="130" pos:column="14">IsEndGroup</name><parameter_list pos:line="130" pos:column="24">()</parameter_list> <specifier pos:line="130" pos:column="27">const</specifier> <block pos:line="130" pos:column="33">{ <return pos:line="130" pos:column="35">return <expr><name pos:line="130" pos:column="42">flags</name><op:operator pos:line="130" pos:column="47">==</op:operator><lit:literal type="number" pos:line="130" pos:column="49">0</lit:literal> <op:operator pos:line="130" pos:column="51">||</op:operator> <name pos:line="130" pos:column="54">flags</name><op:operator pos:line="130" pos:column="59">==</op:operator><name pos:line="130" pos:column="61">WRCF_ENDGROUP</name></expr>;</return> }</block></function>
	<function><type><name pos:line="131" pos:column="9">BOOL</name></type> <name pos:line="131" pos:column="14">IsEnd</name><parameter_list pos:line="131" pos:column="19">()</parameter_list> <specifier pos:line="131" pos:column="22">const</specifier>		<block pos:line="131" pos:column="41">{ <return pos:line="131" pos:column="43">return <expr><name pos:line="131" pos:column="50">flags</name><op:operator pos:line="131" pos:column="55">==</op:operator><lit:literal type="number" pos:line="131" pos:column="57">0</lit:literal></expr>;</return> }</block></function>
	<function><type><name pos:line="132" pos:column="9">BOOL</name></type> <name pos:line="132" pos:column="14">IsWindow</name><parameter_list pos:line="132" pos:column="22">()</parameter_list> <specifier pos:line="132" pos:column="25">const</specifier>	<block pos:line="132" pos:column="33">{ <return pos:line="132" pos:column="35">return <expr><name pos:line="132" pos:column="42">nID</name><op:operator pos:line="132" pos:column="45">&gt;</op:operator><lit:literal type="number" pos:line="132" pos:column="46">0</lit:literal></expr>;</return> }</block></function>
	<function><type><name pos:line="133" pos:column="9">BOOL</name></type> <name pos:line="133" pos:column="14">IsRowGroup</name><parameter_list pos:line="133" pos:column="24">()</parameter_list>	<specifier pos:line="133" pos:column="33">const</specifier> <block pos:line="133" pos:column="39">{ <return pos:line="133" pos:column="41">return <expr><op:operator pos:line="133" pos:column="48">(</op:operator><name pos:line="133" pos:column="49">flags</name> <op:operator pos:line="133" pos:column="55">&amp;</op:operator> <name pos:line="133" pos:column="57">WRCF_GROUPMASK</name><op:operator pos:line="133" pos:column="71">)</op:operator><op:operator pos:line="133" pos:column="72">==</op:operator><name pos:line="133" pos:column="74">WRCF_ROWGROUP</name></expr>;</return> }</block></function>
	<function><type><name pos:line="134" pos:column="9">void</name></type> <name pos:line="134" pos:column="14">SetHeight</name><parameter_list pos:line="134" pos:column="23">(<param><decl><type><name pos:line="134" pos:column="24">LONG</name></type> <name pos:line="134" pos:column="29">h</name></decl></param>)</parameter_list>	<block pos:line="134" pos:column="33">{ <expr_stmt><expr><name><name pos:line="134" pos:column="35">rc</name><op:operator pos:line="134" pos:column="37">.</op:operator><name pos:line="134" pos:column="38">bottom</name></name> <op:operator pos:line="134" pos:column="45">=</op:operator> <name><name pos:line="134" pos:column="47">rc</name><op:operator pos:line="134" pos:column="49">.</op:operator><name pos:line="134" pos:column="50">top</name></name> <op:operator pos:line="134" pos:column="54">+</op:operator> <name pos:line="134" pos:column="56">h</name></expr>;</expr_stmt> }</block></function>
	<function><type><name pos:line="135" pos:column="9">void</name></type> <name pos:line="135" pos:column="14">SetWidth</name><parameter_list pos:line="135" pos:column="22">(<param><decl><type><name pos:line="135" pos:column="23">LONG</name></type> <name pos:line="135" pos:column="28">w</name></decl></param>)</parameter_list>	<block pos:line="135" pos:column="33">{ <expr_stmt><expr><name><name pos:line="135" pos:column="35">rc</name><op:operator pos:line="135" pos:column="37">.</op:operator><name pos:line="135" pos:column="38">right</name></name> <op:operator pos:line="135" pos:column="44">=</op:operator> <name><name pos:line="135" pos:column="46">rc</name><op:operator pos:line="135" pos:column="48">.</op:operator><name pos:line="135" pos:column="49">left</name></name> <op:operator pos:line="135" pos:column="54">+</op:operator> <name pos:line="135" pos:column="56">w</name></expr>;</expr_stmt> }</block></function>
	<function><type><name pos:line="136" pos:column="9">LONG</name></type> <name pos:line="136" pos:column="14">GetHeightOrWidth</name><parameter_list pos:line="136" pos:column="30">(<param><decl><type><name pos:line="136" pos:column="31">BOOL</name></type> <name pos:line="136" pos:column="36">bHeight</name></decl></param>)</parameter_list> <specifier pos:line="136" pos:column="45">const</specifier> <block pos:line="136" pos:column="51">{
		<return pos:line="137" pos:column="17">return <expr><name pos:line="137" pos:column="24">bHeight</name> <op:operator pos:line="137" pos:column="32">?</op:operator> <call><name pos:line="137" pos:column="34">RectHeight</name><argument_list pos:line="137" pos:column="44">(<argument><expr><name pos:line="137" pos:column="45">rc</name></expr></argument>)</argument_list></call> <op:operator pos:line="137" pos:column="49">:</op:operator> <call><name pos:line="137" pos:column="51">RectWidth</name><argument_list pos:line="137" pos:column="60">(<argument><expr><name pos:line="137" pos:column="61">rc</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="139" pos:column="9">void</name></type> <name pos:line="139" pos:column="14">SetHeightOrWidth</name><parameter_list pos:line="139" pos:column="30">(<param><decl><type><name pos:line="139" pos:column="31">LONG</name></type> <name pos:line="139" pos:column="36">horw</name></decl></param>, <param><decl><type><name pos:line="139" pos:column="42">BOOL</name></type> <name pos:line="139" pos:column="47">bHeight</name></decl></param>)</parameter_list> <block pos:line="139" pos:column="56">{
		<expr_stmt><expr><name pos:line="140" pos:column="17">bHeight</name> <op:operator pos:line="140" pos:column="25">?</op:operator> <call><name pos:line="140" pos:column="27">SetHeight</name><argument_list pos:line="140" pos:column="36">(<argument><expr><name pos:line="140" pos:column="37">horw</name></expr></argument>)</argument_list></call> <op:operator pos:line="140" pos:column="43">:</op:operator> <call><name pos:line="140" pos:column="45">SetWidth</name><argument_list pos:line="140" pos:column="53">(<argument><expr><name pos:line="140" pos:column="54">horw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function_decl><type><name pos:line="142" pos:column="9">BOOL</name></type> <name pos:line="142" pos:column="14">GetMargins</name><parameter_list pos:line="142" pos:column="24">(<param><decl><type><name pos:line="142" pos:column="25">int</name><type:modifier pos:line="142" pos:column="28">&amp;</type:modifier></type> <name pos:line="142" pos:column="30">w</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="33">int</name><type:modifier pos:line="142" pos:column="36">&amp;</type:modifier></type> <name pos:line="142" pos:column="38">h</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="144" pos:column="9">// For TOFIT types, param is the TOFIT size, if nonzero. Used in dialogs,</comment>
	<comment type="line" pos:line="145" pos:column="9">// with CWinMgr::InitToFitSizeFromCurrent.</comment>
	<function><type><name pos:line="146" pos:column="9">BOOL</name></type> <name pos:line="146" pos:column="14">HasToFitSize</name><parameter_list pos:line="146" pos:column="26">()</parameter_list>			<block pos:line="146" pos:column="49">{ <return pos:line="146" pos:column="51">return <expr><name pos:line="146" pos:column="58">param</name> <op:operator pos:line="146" pos:column="64">!=</op:operator> <lit:literal type="number" pos:line="146" pos:column="67">0</lit:literal></expr>;</return> }</block></function>
	<function><type><name pos:line="147" pos:column="9">SIZE</name></type> <name pos:line="147" pos:column="14">GetToFitSize</name><parameter_list pos:line="147" pos:column="26">()</parameter_list>			<block pos:line="147" pos:column="49">{ <decl_stmt><decl><type><name pos:line="147" pos:column="51">SIZE</name></type> <name pos:line="147" pos:column="56">sz</name> <init pos:line="147" pos:column="59">= <expr><block pos:line="147" pos:column="61">{<expr><call><name pos:line="147" pos:column="62">LOWORD</name><argument_list pos:line="147" pos:column="68">(<argument><expr><name pos:line="147" pos:column="69">param</name></expr></argument>)</argument_list></call></expr>,<macro><name pos:line="147" pos:column="76">HIWORD</name><argument_list pos:line="147" pos:column="82">(<argument pos:line="147" pos:column="83">param</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt> <return pos:line="147" pos:column="92">return <expr><name pos:line="147" pos:column="99">sz</name></expr>;</return> }</block></function>
	<function><type><name pos:line="148" pos:column="9">void</name></type> <name pos:line="148" pos:column="14">SetToFitSize</name><parameter_list pos:line="148" pos:column="26">(<param><decl><type><name pos:line="148" pos:column="27">SIZE</name></type> <name pos:line="148" pos:column="32">sz</name></decl></param>)</parameter_list>	<block pos:line="148" pos:column="41">{ <expr_stmt><expr><name pos:line="148" pos:column="43">param</name> <op:operator pos:line="148" pos:column="49">=</op:operator> <call><name pos:line="148" pos:column="51">MAKELONG</name><argument_list pos:line="148" pos:column="59">(<argument><expr><name><name pos:line="148" pos:column="60">sz</name><op:operator pos:line="148" pos:column="62">.</op:operator><name pos:line="148" pos:column="63">cx</name></name></expr></argument>,<argument><expr><name><name pos:line="148" pos:column="66">sz</name><op:operator pos:line="148" pos:column="68">.</op:operator><name pos:line="148" pos:column="69">cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
</public>}</block>;</class>

<comment type="line" format="doxygen" pos:line="151" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="152" pos:column="1">// Below are all the macros to build your window map. </comment>
<comment type="line" pos:line="153" pos:column="1">//</comment>

<comment type="line" pos:line="155" pos:column="1">// Begin/end window map. 'name' can be anything you want</comment>
<cpp:define pos:line="156" pos:column="1">#<cpp:directive pos:line="156" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="156" pos:column="9">BEGIN_WINDOW_MAP</name><parameter_list pos:line="156" pos:column="25">(<param><type><name pos:line="156" pos:column="26">name</name></type></param>)</parameter_list></cpp:macro>	<cpp:value pos:line="156" pos:column="33">WINRECT name[] = {</cpp:value></cpp:define>
<cpp:define pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="157" pos:column="9">END_WINDOW_MAP</name><parameter_list pos:line="157" pos:column="23">()</parameter_list></cpp:macro>			<cpp:value pos:line="157" pos:column="49">WINRECT(WRCT_END,-1,0) };</cpp:value></cpp:define> 

<comment type="line" pos:line="159" pos:column="1">// Begin/end a group.</comment>
<comment type="line" pos:line="160" pos:column="1">// The first entry in your map must be BEGINROWS or BEGINCOLS.</comment>
<cpp:define pos:line="161" pos:column="1">#<cpp:directive pos:line="161" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="161" pos:column="9">BEGINROWS</name><parameter_list pos:line="161" pos:column="18">(<param><type><name pos:line="161" pos:column="19">type</name></type></param>,<param><type><name pos:line="161" pos:column="24">id</name></type></param>,<param><type><name pos:line="161" pos:column="27">m</name></type></param>)</parameter_list></cpp:macro>	<cpp:value pos:line="161" pos:column="33">WINRECT(WRCF_ROWGROUP|type,id,m),</cpp:value></cpp:define>
<cpp:define pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="162" pos:column="9">BEGINCOLS</name><parameter_list pos:line="162" pos:column="18">(<param><type><name pos:line="162" pos:column="19">type</name></type></param>,<param><type><name pos:line="162" pos:column="24">id</name></type></param>,<param><type><name pos:line="162" pos:column="27">m</name></type></param>)</parameter_list></cpp:macro>  <cpp:value pos:line="162" pos:column="31">WINRECT(WRCF_COLGROUP|type,id,m),</cpp:value></cpp:define>
<cpp:define pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="163" pos:column="9">ENDGROUP</name><parameter_list pos:line="163" pos:column="17">()</parameter_list></cpp:macro>				<cpp:value pos:line="163" pos:column="49">WINRECT(WRCF_ENDGROUP,-1,0),</cpp:value></cpp:define>

<comment type="line" pos:line="165" pos:column="1">// This macros is used only with BEGINGROWS or BEGINCOLS to specify margins</comment>
<cpp:define pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="166" pos:column="9">RCMARGINS</name><parameter_list pos:line="166" pos:column="18">(<param><type><name pos:line="166" pos:column="19">w</name></type></param>,<param><type><name pos:line="166" pos:column="21">h</name></type></param>)</parameter_list></cpp:macro>			<cpp:value pos:line="166" pos:column="41">MAKELONG(w,h)</cpp:value></cpp:define>

<comment type="line" pos:line="168" pos:column="1">// Macros for primitive (non-group) entries.</comment>
<comment type="line" pos:line="169" pos:column="1">// val applies to height for a row entry; width for a column entry.</comment>
<cpp:define pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="170" pos:column="9">RCFIXED</name><parameter_list pos:line="170" pos:column="16">(<param><type><name pos:line="170" pos:column="17">id</name></type></param>,<param><type><name pos:line="170" pos:column="20">val</name></type></param>)</parameter_list></cpp:macro>		<cpp:value pos:line="170" pos:column="33">WINRECT(WRCT_FIXED,id,val),</cpp:value></cpp:define>
<cpp:define pos:line="171" pos:column="1">#<cpp:directive pos:line="171" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="171" pos:column="9">RCPERCENT</name><parameter_list pos:line="171" pos:column="18">(<param><type><name pos:line="171" pos:column="19">id</name></type></param>,<param><type><name pos:line="171" pos:column="22">val</name></type></param>)</parameter_list></cpp:macro>	<cpp:value pos:line="171" pos:column="33">WINRECT(WRCT_PCT,id,val),</cpp:value></cpp:define>
<cpp:define pos:line="172" pos:column="1">#<cpp:directive pos:line="172" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="172" pos:column="9">RCREST</name><parameter_list pos:line="172" pos:column="15">(<param><type><name pos:line="172" pos:column="16">id</name></type></param>)</parameter_list></cpp:macro>			<cpp:value pos:line="172" pos:column="41">WINRECT(WRCT_REST,id,0),</cpp:value></cpp:define>
<cpp:define pos:line="173" pos:column="1">#<cpp:directive pos:line="173" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="173" pos:column="9">RCTOFIT</name><parameter_list pos:line="173" pos:column="16">(<param><type><name pos:line="173" pos:column="17">id</name></type></param>)</parameter_list></cpp:macro>			<cpp:value pos:line="173" pos:column="41">WINRECT(WRCT_TOFIT,id,0),</cpp:value></cpp:define>
<cpp:define pos:line="174" pos:column="1">#<cpp:directive pos:line="174" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="174" pos:column="9">RCSPACE</name><parameter_list pos:line="174" pos:column="16">(<param><type><name pos:line="174" pos:column="17">val</name></type></param>)</parameter_list></cpp:macro>			<cpp:value pos:line="174" pos:column="41">RCFIXED(-1,val)</cpp:value></cpp:define>

<comment type="line" format="doxygen" pos:line="176" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="177" pos:column="1">// Use this to iterate the entries in a group.</comment>
<comment type="line" pos:line="178" pos:column="1">//</comment>
<comment type="line" pos:line="179" pos:column="1">//	CWinGroupIterator it;</comment>
<comment type="line" pos:line="180" pos:column="1">//	for (it=pGroup; it; it.Next()) {</comment>
<comment type="line" pos:line="181" pos:column="1">//   WINRECT* wrc = it;</comment>
<comment type="line" pos:line="182" pos:column="1">//   ..</comment>
<comment type="line" pos:line="183" pos:column="1">// }</comment>
<comment type="line" pos:line="184" pos:column="1">//</comment>
<class pos:line="185" pos:column="1">class <name pos:line="185" pos:column="7">CWinGroupIterator</name> <block pos:line="185" pos:column="25">{<private type="default" pos:line="185" pos:column="26">
</private><protected pos:line="186" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">WINRECT</name><type:modifier pos:line="187" pos:column="16">*</type:modifier></type> <name pos:line="187" pos:column="18">pCur</name></decl>;</decl_stmt>	  <comment type="line" pos:line="187" pos:column="27">// current entry</comment>
</protected><public pos:line="188" pos:column="1">public:
	<constructor><name pos:line="189" pos:column="9">CWinGroupIterator</name><parameter_list pos:line="189" pos:column="26">()</parameter_list> <block pos:line="189" pos:column="29">{ <expr_stmt><expr><name pos:line="189" pos:column="31">pCur</name> <op:operator pos:line="189" pos:column="36">=</op:operator> <name pos:line="189" pos:column="38">NULL</name></expr>;</expr_stmt> }</block></constructor>
	<function><type><name pos:line="190" pos:column="9">CWinGroupIterator</name><type:modifier pos:line="190" pos:column="26">&amp;</type:modifier></type> <name pos:line="190" pos:column="28">operator=</name><parameter_list pos:line="190" pos:column="37">(<param><decl><type><name pos:line="190" pos:column="38">WINRECT</name><type:modifier pos:line="190" pos:column="45">*</type:modifier></type> <name pos:line="190" pos:column="47">pg</name></decl></param>)</parameter_list> <block pos:line="190" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="191" pos:column="17">assert</name><argument_list pos:line="191" pos:column="23">(<argument><expr><call><name><name pos:line="191" pos:column="24">pg</name><op:operator pos:line="191" pos:column="26">-&gt;</op:operator><name pos:line="191" pos:column="28">IsGroup</name></name><argument_list pos:line="191" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="191" pos:column="40">// can only iterate a group!</comment>
		<expr_stmt><expr><name pos:line="192" pos:column="17">pCur</name> <op:operator pos:line="192" pos:column="22">=</op:operator> <call><name><name pos:line="192" pos:column="24">pg</name><op:operator pos:line="192" pos:column="26">-&gt;</op:operator><name pos:line="192" pos:column="28">Children</name></name><argument_list pos:line="192" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="193" pos:column="17">return <expr><op:operator pos:line="193" pos:column="24">*</op:operator><name pos:line="193" pos:column="25">this</name></expr>;</return>
	}</block></function>
	<function><name pos:line="195" pos:column="9">operator WINRECT*</name><parameter_list pos:line="195" pos:column="26">()</parameter_list>	<block pos:line="195" pos:column="33">{ <return pos:line="195" pos:column="35">return <expr><name pos:line="195" pos:column="42">pCur</name></expr>;</return> }</block></function>
	<function><type><name pos:line="196" pos:column="9">WINRECT</name><type:modifier pos:line="196" pos:column="16">*</type:modifier></type> <name pos:line="196" pos:column="18">pWINRECT</name><parameter_list pos:line="196" pos:column="26">()</parameter_list>	<block pos:line="196" pos:column="33">{ <return pos:line="196" pos:column="35">return <expr><name pos:line="196" pos:column="42">pCur</name></expr>;</return> }</block></function>
	<function><type><name pos:line="197" pos:column="9">WINRECT</name><type:modifier pos:line="197" pos:column="16">*</type:modifier></type> <name pos:line="197" pos:column="18">Next</name><parameter_list pos:line="197" pos:column="22">()</parameter_list>		<block pos:line="197" pos:column="33">{ <return pos:line="197" pos:column="35">return <expr><name pos:line="197" pos:column="42">pCur</name> <op:operator pos:line="197" pos:column="47">=</op:operator> <name pos:line="197" pos:column="49">pCur</name> <op:operator pos:line="197" pos:column="54">?</op:operator> <call><name><name pos:line="197" pos:column="56">pCur</name><op:operator pos:line="197" pos:column="60">-&gt;</op:operator><name pos:line="197" pos:column="62">Next</name></name><argument_list pos:line="197" pos:column="66">()</argument_list></call> <op:operator pos:line="197" pos:column="69">:</op:operator> <name pos:line="197" pos:column="71">NULL</name></expr>;</return>}</block></function>
</public>}</block>;</class>

<comment type="line" pos:line="200" pos:column="1">// Registered WinMgr message</comment>
<decl_stmt><decl><type><specifier pos:line="201" pos:column="1">extern</specifier> <specifier pos:line="201" pos:column="8">const</specifier> <name pos:line="201" pos:column="14">UINT</name></type> <name pos:line="201" pos:column="19">WM_WINMGR</name></decl>;</decl_stmt>

<comment type="line" pos:line="203" pos:column="1">// Notification struct, passed as LPARAM</comment>
<struct pos:line="204" pos:column="1">struct <name pos:line="204" pos:column="8">NMWINMGR</name> <super pos:line="204" pos:column="17">: <specifier pos:line="204" pos:column="19">public</specifier> <name pos:line="204" pos:column="26">NMHDR</name></super> <block pos:line="204" pos:column="32">{<public type="default" pos:line="204" pos:column="33">
	<enum pos:line="205" pos:column="9">enum <block pos:line="205" pos:column="14">{								<comment type="line" pos:line="205" pos:column="73">// notification codes:</comment>
		<decl><name pos:line="206" pos:column="17">GET_SIZEINFO</name> <init pos:line="206" pos:column="30">= <expr><lit:literal type="number" pos:line="206" pos:column="32">1</lit:literal></expr></init></decl><op:operator pos:line="206" pos:column="33">,</op:operator>				<comment type="line" pos:line="206" pos:column="65">// WinMgr is requesting size info</comment>
		<decl><name pos:line="207" pos:column="17">SIZEBAR_MOVED</name></decl>					<comment type="line" pos:line="207" pos:column="65">// user moved sizer bar</comment>
	}</block>;</enum>

	<comment type="line" pos:line="210" pos:column="9">// each notification code has its own part of union</comment>
	<union pos:line="211" pos:column="9">union <block pos:line="211" pos:column="15">{<public type="default" pos:line="211" pos:column="16">
		<decl_stmt><decl><type><name pos:line="212" pos:column="17">SIZEINFO</name></type> <name pos:line="212" pos:column="26">sizeinfo</name></decl>;</decl_stmt>	<comment type="line" pos:line="212" pos:column="41">// used for GET_SIZEINFO</comment>
		<struct pos:line="213" pos:column="17">struct <block pos:line="213" pos:column="24">{<public type="default" pos:line="213" pos:column="25">					<comment type="line" pos:line="213" pos:column="65">// used for SIZEBAR_MOVED</comment>
			<decl_stmt><decl><type><name pos:line="214" pos:column="25">POINT</name></type> <name pos:line="214" pos:column="31">ptMoved</name></decl>;</decl_stmt>		<comment type="line" pos:line="214" pos:column="49">//  distance moved (x or y = zero)</comment>
		</public>}</block> <decl><name pos:line="215" pos:column="19">sizebar</name></decl>;</struct>
	</public>}</block>;</union>
	<decl_stmt><decl><type><name pos:line="217" pos:column="9">BOOL</name></type> <name pos:line="217" pos:column="14">processed</name></decl>;</decl_stmt>

	<comment type="line" pos:line="219" pos:column="9">// ctor: initialize to zeroes</comment>
	<constructor><name pos:line="220" pos:column="9">NMWINMGR</name><parameter_list pos:line="220" pos:column="17">()</parameter_list> <block pos:line="220" pos:column="20">{ <expr_stmt><expr><call><name pos:line="220" pos:column="22">memset</name><argument_list pos:line="220" pos:column="28">(<argument><expr><name pos:line="220" pos:column="29">this</name></expr></argument>,<argument><expr><lit:literal type="number" pos:line="220" pos:column="34">0</lit:literal></expr></argument>,<argument><expr><sizeof pos:line="220" pos:column="36">sizeof<argument_list pos:line="220" pos:column="42">(<argument><expr><name pos:line="220" pos:column="43">NMWINMGR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
</public>}</block>;</struct>

<comment type="line" format="doxygen" pos:line="223" pos:column="1">///////////////////</comment>
<comment type="line" pos:line="224" pos:column="1">// Window manager. This class calculates all the sizes and positions of the</comment>
<comment type="line" pos:line="225" pos:column="1">// rectangles in the window map.</comment>
<comment type="line" pos:line="226" pos:column="1">//</comment>
<class pos:line="227" pos:column="1">class <name pos:line="227" pos:column="7">CWinMgr</name> <comment type="block" pos:line="227" pos:column="15">/*: public CObject*/</comment> <block pos:line="227" pos:column="36">{<private type="default" pos:line="227" pos:column="37">
</private><public pos:line="228" pos:column="1">public:
	<constructor_decl><name pos:line="229" pos:column="9">CWinMgr</name><parameter_list pos:line="229" pos:column="16">(<param><decl><type><name pos:line="229" pos:column="17">WINRECT</name><type:modifier pos:line="229" pos:column="24">*</type:modifier></type> <name pos:line="229" pos:column="26">map</name></decl></param>)</parameter_list>;</constructor_decl>
	<destructor_decl><specifier pos:line="230" pos:column="9">virtual</specifier> <name pos:line="230" pos:column="17">~<name pos:line="230" pos:column="18">CWinMgr</name></name><parameter_list pos:line="230" pos:column="25">()</parameter_list>;</destructor_decl>

	<function_decl><type><specifier pos:line="232" pos:column="9">virtual</specifier> <name pos:line="232" pos:column="17">void</name></type> <name pos:line="232" pos:column="22">GetWindowPositions</name><parameter_list pos:line="232" pos:column="40">(<param><decl><type><name pos:line="232" pos:column="41">HWND</name></type> <name pos:line="232" pos:column="46">hWnd</name></decl></param>)</parameter_list>;</function_decl> <comment type="line" pos:line="232" pos:column="53">// load map from window posns</comment>
	<function_decl><type><specifier pos:line="233" pos:column="9">virtual</specifier> <name pos:line="233" pos:column="17">void</name></type> <name pos:line="233" pos:column="22">SetWindowPositions</name><parameter_list pos:line="233" pos:column="40">(<param><decl><type><name pos:line="233" pos:column="41">HWND</name></type> <name pos:line="233" pos:column="46">hWnd</name></decl></param>)</parameter_list>;</function_decl> <comment type="line" pos:line="233" pos:column="53">// set window posns from map</comment>

	<comment type="line" pos:line="235" pos:column="9">// get min/max/desired size of a rectangle</comment>
	<function_decl><type><specifier pos:line="236" pos:column="9">virtual</specifier> <name pos:line="236" pos:column="17">void</name></type> <name pos:line="236" pos:column="22">OnGetSizeInfo</name><parameter_list pos:line="236" pos:column="35">(<param><decl><type><name pos:line="236" pos:column="36">SIZEINFO</name><type:modifier pos:line="236" pos:column="44">&amp;</type:modifier></type> <name pos:line="236" pos:column="46">szi</name></decl></param>, <param><decl><type><name pos:line="236" pos:column="51">WINRECT</name><type:modifier pos:line="236" pos:column="58">*</type:modifier></type> <name pos:line="236" pos:column="60">pwrc</name></decl></param>, <param><decl><type><name pos:line="236" pos:column="66">HWND</name></type> <name pos:line="236" pos:column="71">hWnd</name><init pos:line="236" pos:column="75">=<expr><name pos:line="236" pos:column="76">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="238" pos:column="9">// calc layout using client area as total area</comment>
	<function><type><name pos:line="239" pos:column="9">void</name></type> <name pos:line="239" pos:column="14">CalcLayout</name><parameter_list pos:line="239" pos:column="24">(<param><decl><type><name pos:line="239" pos:column="25">HWND</name></type> <name pos:line="239" pos:column="30">hWnd</name></decl></param>)</parameter_list> <block pos:line="239" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="240" pos:column="17">assert</name><argument_list pos:line="240" pos:column="23">(<argument><expr><name pos:line="240" pos:column="24">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="241" pos:column="17">RECT</name></type> <name pos:line="241" pos:column="22">rcClient</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="242" pos:column="17">GetClientRect</name><argument_list pos:line="242" pos:column="30">(<argument><expr><name pos:line="242" pos:column="31">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="242" pos:column="37">&amp;</op:operator><name pos:line="242" pos:column="38">rcClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="243" pos:column="17">CalcLayout</name><argument_list pos:line="243" pos:column="27">(<argument><expr><name pos:line="243" pos:column="28">rcClient</name></expr></argument>, <argument><expr><name pos:line="243" pos:column="38">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" pos:line="246" pos:column="9">// calc layout using cx, cy (for OnSize)</comment>
	<function><type><name pos:line="247" pos:column="9">void</name></type> <name pos:line="247" pos:column="14">CalcLayout</name><parameter_list pos:line="247" pos:column="24">(<param><decl><type><name pos:line="247" pos:column="25">int</name></type> <name pos:line="247" pos:column="29">cx</name></decl></param>, <param><decl><type><name pos:line="247" pos:column="33">int</name></type> <name pos:line="247" pos:column="37">cy</name></decl></param>, <param><decl><type><name pos:line="247" pos:column="41">HWND</name></type> <name pos:line="247" pos:column="46">hWnd</name><init pos:line="247" pos:column="50">=<expr><name pos:line="247" pos:column="51">NULL</name></expr></init></decl></param>)</parameter_list> <block pos:line="247" pos:column="57">{
		<decl_stmt><decl><type><name pos:line="248" pos:column="17">RECT</name></type> <name pos:line="248" pos:column="22">rc</name> <init pos:line="248" pos:column="25">= <expr><block pos:line="248" pos:column="27">{<expr><lit:literal type="number" pos:line="248" pos:column="28">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="248" pos:column="30">0</lit:literal></expr>,<expr><name pos:line="248" pos:column="32">cx</name></expr>,<expr><name pos:line="248" pos:column="35">cy</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="249" pos:column="17">CalcLayout</name><argument_list pos:line="249" pos:column="27">(<argument><expr><name pos:line="249" pos:column="28">rc</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="32">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" pos:line="252" pos:column="9">// calc layout using given rect as total area</comment>
	<function><type><name pos:line="253" pos:column="9">void</name></type> <name pos:line="253" pos:column="14">CalcLayout</name><parameter_list pos:line="253" pos:column="24">(<param><decl><type><name pos:line="253" pos:column="25">RECT</name></type> <name pos:line="253" pos:column="30">rcTotal</name></decl></param>, <param><decl><type><name pos:line="253" pos:column="39">HWND</name></type> <name pos:line="253" pos:column="44">hWnd</name><init pos:line="253" pos:column="48">=<expr><name pos:line="253" pos:column="49">NULL</name></expr></init></decl></param>)</parameter_list> <block pos:line="253" pos:column="55">{
		<expr_stmt><expr><call><name pos:line="254" pos:column="17">assert</name><argument_list pos:line="254" pos:column="23">(<argument><expr><name pos:line="254" pos:column="24">m_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="255" pos:column="17">m_map</name><op:operator pos:line="255" pos:column="22">-&gt;</op:operator><name pos:line="255" pos:column="24">SetRect</name></name><argument_list pos:line="255" pos:column="31">(<argument><expr><name pos:line="255" pos:column="32">rcTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="256" pos:column="17">CalcGroup</name><argument_list pos:line="256" pos:column="26">(<argument><expr><name pos:line="256" pos:column="27">m_map</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="34">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" pos:line="259" pos:column="9">// Move rectangle vertically or horizontally. Used with sizer bars.</comment>
	<function><type><name pos:line="260" pos:column="9">void</name></type> <name pos:line="260" pos:column="14">MoveRect</name><parameter_list pos:line="260" pos:column="22">(<param><decl><type><name pos:line="260" pos:column="23">int</name></type> <name pos:line="260" pos:column="27">nID</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="32">POINT</name></type> <name pos:line="260" pos:column="38">ptMove</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="46">HWND</name></type> <name pos:line="260" pos:column="51">pParentWnd</name></decl></param>)</parameter_list> <block pos:line="260" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="261" pos:column="17">MoveRect</name><argument_list pos:line="261" pos:column="25">(<argument><expr><call><name pos:line="261" pos:column="26">FindRect</name><argument_list pos:line="261" pos:column="34">(<argument><expr><name pos:line="261" pos:column="35">nID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="261" pos:column="41">ptMove</name></expr></argument>, <argument><expr><name pos:line="261" pos:column="49">pParentWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function_decl><type><name pos:line="263" pos:column="9">void</name></type> <name pos:line="263" pos:column="14">MoveRect</name><parameter_list pos:line="263" pos:column="22">(<param><decl><type><name pos:line="263" pos:column="23">WINRECT</name><type:modifier pos:line="263" pos:column="30">*</type:modifier></type> <name pos:line="263" pos:column="32">pwrcMove</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="42">POINT</name></type> <name pos:line="263" pos:column="48">ptMove</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="56">HWND</name></type> <name pos:line="263" pos:column="61">pParentWnd</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="265" pos:column="9">RECT</name></type> <name pos:line="265" pos:column="14">GetRect</name><parameter_list pos:line="265" pos:column="21">(<param><decl><type><name pos:line="265" pos:column="22">UINT</name></type> <name pos:line="265" pos:column="27">nID</name></decl></param>)</parameter_list>						 <block pos:line="265" pos:column="74">{ <return pos:line="265" pos:column="76">return <expr><call><name pos:line="265" pos:column="83">FindRect</name><argument_list pos:line="265" pos:column="91">(<argument><expr><name pos:line="265" pos:column="92">nID</name></expr></argument>)</argument_list></call><op:operator pos:line="265" pos:column="96">-&gt;</op:operator><call><name pos:line="265" pos:column="98">GetRect</name><argument_list pos:line="265" pos:column="105">()</argument_list></call></expr>;</return> }</block></function>
	<function><type><name pos:line="266" pos:column="9">void</name></type> <name pos:line="266" pos:column="14">SetRect</name><parameter_list pos:line="266" pos:column="21">(<param><decl><type><name pos:line="266" pos:column="22">UINT</name></type> <name pos:line="266" pos:column="27">nID</name></decl></param>, <param><decl><type><specifier pos:line="266" pos:column="32">const</specifier> <name pos:line="266" pos:column="38">RECT</name><type:modifier pos:line="266" pos:column="42">&amp;</type:modifier></type> <name pos:line="266" pos:column="44">rc</name></decl></param>)</parameter_list> <block pos:line="266" pos:column="48">{ <expr_stmt><expr><call><name pos:line="266" pos:column="50">FindRect</name><argument_list pos:line="266" pos:column="58">(<argument><expr><name pos:line="266" pos:column="59">nID</name></expr></argument>)</argument_list></call><op:operator pos:line="266" pos:column="63">-&gt;</op:operator><call><name pos:line="266" pos:column="65">SetRect</name><argument_list pos:line="266" pos:column="72">(<argument><expr><name pos:line="266" pos:column="73">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

	<comment type="line" pos:line="268" pos:column="9">// get WINRECT corresponding to ID</comment>
	<function_decl><type><name pos:line="269" pos:column="9">WINRECT</name><type:modifier pos:line="269" pos:column="16">*</type:modifier></type> <name pos:line="269" pos:column="18">FindRect</name><parameter_list pos:line="269" pos:column="26">(<param><decl><type><name pos:line="269" pos:column="27">int</name></type> <name pos:line="269" pos:column="31">nID</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="271" pos:column="9">// Calculate MINMAXINFO</comment>
	<function_decl><type><name pos:line="272" pos:column="9">void</name></type> <name pos:line="272" pos:column="14">GetMinMaxInfo</name><parameter_list pos:line="272" pos:column="27">(<param><decl><type><name pos:line="272" pos:column="28">HWND</name></type> <name pos:line="272" pos:column="33">hWnd</name></decl></param>, <param><decl><type><name pos:line="272" pos:column="39">MINMAXINFO</name><type:modifier pos:line="272" pos:column="49">*</type:modifier></type> <name pos:line="272" pos:column="51">lpMMI</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="273" pos:column="9">void</name></type> <name pos:line="273" pos:column="14">GetMinMaxInfo</name><parameter_list pos:line="273" pos:column="27">(<param><decl><type><name pos:line="273" pos:column="28">HWND</name></type> <name pos:line="273" pos:column="33">hWnd</name></decl></param>, <param><decl><type><name pos:line="273" pos:column="39">SIZEINFO</name><type:modifier pos:line="273" pos:column="47">&amp;</type:modifier></type> <name pos:line="273" pos:column="49">szi</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="275" pos:column="9">// set TOFIT size for all windows from current window sizes</comment>
	<function_decl><type><name pos:line="276" pos:column="9">void</name></type> <name pos:line="276" pos:column="14">InitToFitSizeFromCurrent</name><parameter_list pos:line="276" pos:column="38">(<param><decl><type><name pos:line="276" pos:column="39">HWND</name></type> <name pos:line="276" pos:column="44">hWnd</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="278" pos:column="9">// Theo - Removed Tracing</comment>

</public><protected pos:line="280" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="281" pos:column="9">WINRECT</name><type:modifier pos:line="281" pos:column="16">*</type:modifier></type>	<name pos:line="281" pos:column="25">m_map</name></decl>;</decl_stmt>			<comment type="line" pos:line="281" pos:column="49">// THE window map</comment>

	<function_decl><type><name pos:line="283" pos:column="9">int</name></type>  <name pos:line="283" pos:column="14">CountWindows</name><parameter_list pos:line="283" pos:column="26">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="284" pos:column="9">BOOL</name></type> <name pos:line="284" pos:column="14">SendGetSizeInfo</name><parameter_list pos:line="284" pos:column="29">(<param><decl><type><name pos:line="284" pos:column="30">SIZEINFO</name><type:modifier pos:line="284" pos:column="38">&amp;</type:modifier></type> <name pos:line="284" pos:column="40">szi</name></decl></param>, <param><decl><type><name pos:line="284" pos:column="45">HWND</name></type> <name pos:line="284" pos:column="50">hWnd</name></decl></param>, <param><decl><type><name pos:line="284" pos:column="56">UINT</name></type> <name pos:line="284" pos:column="61">nID</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="286" pos:column="9">// you can override to do wierd stuff or fix bugs</comment>
	<function_decl><type><specifier pos:line="287" pos:column="9">virtual</specifier> <name pos:line="287" pos:column="17">void</name></type> <name pos:line="287" pos:column="22">CalcGroup</name><parameter_list pos:line="287" pos:column="31">(<param><decl><type><name pos:line="287" pos:column="32">WINRECT</name><type:modifier pos:line="287" pos:column="39">*</type:modifier></type> <name pos:line="287" pos:column="41">group</name></decl></param>, <param><decl><type><name pos:line="287" pos:column="48">HWND</name></type> <name pos:line="287" pos:column="53">hWnd</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="288" pos:column="9">virtual</specifier> <name pos:line="288" pos:column="17">void</name></type> <name pos:line="288" pos:column="22">AdjustSize</name><parameter_list pos:line="288" pos:column="32">(<param><decl><type><name pos:line="288" pos:column="33">WINRECT</name><type:modifier pos:line="288" pos:column="40">*</type:modifier></type> <name pos:line="288" pos:column="42">pEntry</name></decl></param>, <param><decl><type><name pos:line="288" pos:column="50">BOOL</name></type> <name pos:line="288" pos:column="55">bRow</name></decl></param>,
		<param><decl><type><name pos:line="289" pos:column="17">int</name><type:modifier pos:line="289" pos:column="20">&amp;</type:modifier></type> <name pos:line="289" pos:column="22">hwRemaining</name></decl></param>, <param><decl><type><name pos:line="289" pos:column="35">HWND</name></type> <name pos:line="289" pos:column="40">hWnd</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="290" pos:column="9">virtual</specifier> <name pos:line="290" pos:column="17">void</name></type> <name pos:line="290" pos:column="22">PositionRects</name><parameter_list pos:line="290" pos:column="35">(<param><decl><type><name pos:line="290" pos:column="36">WINRECT</name><type:modifier pos:line="290" pos:column="43">*</type:modifier></type> <name pos:line="290" pos:column="45">pGroup</name></decl></param>,
		<param><decl><type><specifier pos:line="291" pos:column="17">const</specifier> <name pos:line="291" pos:column="23">RECT</name><type:modifier pos:line="291" pos:column="27">&amp;</type:modifier></type> <name pos:line="291" pos:column="29">rcTotal</name></decl></param>,<param><decl><type><name pos:line="291" pos:column="37">BOOL</name></type> <name pos:line="291" pos:column="42">bRow</name></decl></param>)</parameter_list>;</function_decl>

</protected><private pos:line="293" pos:column="1">private:
	<constructor><name pos:line="294" pos:column="9">CWinMgr</name><parameter_list pos:line="294" pos:column="16">()</parameter_list> <block pos:line="294" pos:column="19">{ <expr_stmt><expr><call><name pos:line="294" pos:column="21">assert</name><argument_list pos:line="294" pos:column="27">(<argument><expr><name pos:line="294" pos:column="28">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor> <comment type="line" pos:line="294" pos:column="38">// no default constructor</comment>
</private>}</block>;

<comment type="line" pos:line="297" pos:column="1">// Theo - Removed CSizerBar and CSizeableDlg</comment>
<cpp:endif pos:line="298" pos:column="1">#<cpp:directive pos:line="298" pos:column="2">endif</cpp:directive></cpp:endif></class></unit>
