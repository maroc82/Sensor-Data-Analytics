<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexPascal.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexPascal.cxx
 ** Lexer for Pascal.
 ** Written by Laurent le Tynevez
 ** Updated by Simon Steele &lt;s.steele@pnotepad.org&gt; September 2002
 ** Updated by Mathias Rauen &lt;scite@madshi.net&gt; May 2003 (Delphi adjustments)
 ** Completely rewritten by Marko Njezic &lt;sf@maxempire.com&gt; October 2008
 **/</comment>

<comment type="block" pos:line="10" pos:column="1">/*

A few words about features of the new completely rewritten LexPascal...

Generally speaking LexPascal tries to support all available Delphi features (up
to Delphi 2009 at this time), including .NET specific features.

~ HIGHLIGHTING:

If you enable "lexer.pascal.smart.highlighting" property, some keywords will
only be highlighted in appropriate context. As implemented those are keywords
related to property and DLL exports declarations (similar to how Delphi IDE
works).

For example, keywords "read" and "write" will only be highlighted if they are in
property declaration:

property MyProperty: boolean read FMyProperty write FMyProperty;

~ FOLDING:

Folding is supported in the following cases:

- Folding of stream-like comments
- Folding of groups of consecutive line comments
- Folding of preprocessor blocks (the following preprocessor blocks are
supported: IF / IFEND; IFDEF, IFNDEF, IFOPT / ENDIF and REGION / ENDREGION
blocks), including nesting of preprocessor blocks up to 255 levels
- Folding of code blocks on appropriate keywords (the following code blocks are
supported: "begin, asm, record, try, case / end" blocks, class &amp; object
declarations and interface declarations)

Remarks:

- Folding of code blocks tries to handle all special cases in which folding
should not occur. As implemented those are:

1. Structure "record case / end" (there's only one "end" statement and "case" is
ignored as fold point)
2. Forward class declarations ("type TMyClass = class;") and object method
declarations ("TNotifyEvent = procedure(Sender: TObject) of object;") are
ignored as fold points
3. Simplified complete class declarations ("type TMyClass = class(TObject);")
are ignored as fold points
4. Every other situation when class keyword doesn't actually start class
declaration ("class procedure", "class function", "class of", "class var",
"class property" and "class operator")

- Folding of code blocks inside preprocessor blocks is disabled (any comments
inside them will be folded fine) because there is no guarantee that complete
code block will be contained inside folded preprocessor block in which case
folded code block could end prematurely at the end of preprocessor block if
there is no closing statement inside. This was done in order to properly process
document that may contain something like this:

type
{$IFDEF UNICODE}
  TMyClass = class(UnicodeAncestor)
{$ELSE}
  TMyClass = class(AnsiAncestor)
{$ENDIF}
  private
  ...
  public
  ...
  published
  ...
end;

If class declarations were folded, then the second class declaration would end
at "$ENDIF" statement, first class statement would end at "end;" statement and
preprocessor "$IFDEF" block would go all the way to the end of document.
However, having in mind all this, if you want to enable folding of code blocks
inside preprocessor blocks, you can disable folding of preprocessor blocks by
changing "fold.preprocessor" property, in which case everything inside them
would be folded.

~ KEYWORDS:

The list of keywords that can be used in pascal.properties file (up to Delphi
2009):

- Keywords: absolute abstract and array as asm assembler automated begin case
cdecl class const constructor deprecated destructor dispid dispinterface div do
downto dynamic else end except export exports external far file final
finalization finally for forward function goto if implementation in inherited
initialization inline interface is label library message mod near nil not object
of on or out overload override packed pascal platform private procedure program
property protected public published raise record register reintroduce repeat
resourcestring safecall sealed set shl shr static stdcall strict string then
threadvar to try type unit unsafe until uses var varargs virtual while with xor

- Keywords related to the "smart highlithing" feature: add default implements
index name nodefault read readonly remove stored write writeonly

- Keywords related to Delphi packages (in addition to all above): package
contains requires

*/</comment>

<cpp:include pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">include</cpp:directive> <cpp:file pos:line="110" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">include</cpp:directive> <cpp:file pos:line="111" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">include</cpp:directive> <cpp:file pos:line="112" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">include</cpp:directive> <cpp:file pos:line="113" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">include</cpp:directive> <cpp:file pos:line="114" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">include</cpp:directive> <cpp:file pos:line="115" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="117" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="118" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="119" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="121" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="122" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="123" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="124" pos:column="1">#<cpp:directive pos:line="124" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="124" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="125" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="126" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">ifdef</cpp:directive> <name pos:line="128" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="129" pos:column="1">using namespace <name pos:line="129" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="132" pos:column="1">static</specifier> <name pos:line="132" pos:column="8">void</name></type> <name pos:line="132" pos:column="13">GetRangeLowered</name><parameter_list pos:line="132" pos:column="28">(<param><decl><type><name pos:line="132" pos:column="29">unsigned</name> <name pos:line="132" pos:column="38">int</name></type> <name pos:line="132" pos:column="42">start</name></decl></param>,
		<param><decl><type><name pos:line="133" pos:column="17">unsigned</name> <name pos:line="133" pos:column="26">int</name></type> <name pos:line="133" pos:column="30">end</name></decl></param>,
		<param><decl><type><name pos:line="134" pos:column="17">Accessor</name> <type:modifier pos:line="134" pos:column="26">&amp;</type:modifier></type><name pos:line="134" pos:column="27">styler</name></decl></param>,
		<param><decl><type><name pos:line="135" pos:column="17">char</name> <type:modifier pos:line="135" pos:column="22">*</type:modifier></type><name pos:line="135" pos:column="23">s</name></decl></param>,
		<param><decl><type><name pos:line="136" pos:column="17">unsigned</name> <name pos:line="136" pos:column="26">int</name></type> <name pos:line="136" pos:column="30">len</name></decl></param>)</parameter_list> <block pos:line="136" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">unsigned</name> <name pos:line="137" pos:column="18">int</name></type> <name pos:line="137" pos:column="22">i</name> <init pos:line="137" pos:column="24">= <expr><lit:literal type="number" pos:line="137" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="138" pos:column="9">while <condition pos:line="138" pos:column="15">(<expr><op:operator pos:line="138" pos:column="16">(</op:operator><name pos:line="138" pos:column="17">i</name> <op:operator pos:line="138" pos:column="19">&lt;</op:operator> <name pos:line="138" pos:column="21">end</name> <op:operator pos:line="138" pos:column="25">-</op:operator> <name pos:line="138" pos:column="27">start</name> <op:operator pos:line="138" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="138" pos:column="35">1</lit:literal><op:operator pos:line="138" pos:column="36">)</op:operator> <op:operator pos:line="138" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="138" pos:column="41">(</op:operator><name pos:line="138" pos:column="42">i</name> <op:operator pos:line="138" pos:column="44">&lt;</op:operator> <name pos:line="138" pos:column="46">len</name><op:operator pos:line="138" pos:column="49">-</op:operator><lit:literal type="number" pos:line="138" pos:column="50">1</lit:literal><op:operator pos:line="138" pos:column="51">)</op:operator></expr>)</condition> <block pos:line="138" pos:column="54">{
		<expr_stmt><expr><name><name pos:line="139" pos:column="17">s</name><index pos:line="139" pos:column="18">[<expr><name pos:line="139" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="139" pos:column="22">=</op:operator> <call><name><name pos:line="139" pos:column="24">static_cast</name><argument_list pos:line="139" pos:column="35">&lt;<argument><expr><name pos:line="139" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="139" pos:column="41">(<argument><expr><call><name pos:line="139" pos:column="42">tolower</name><argument_list pos:line="139" pos:column="49">(<argument><expr><name><name pos:line="139" pos:column="50">styler</name><index pos:line="139" pos:column="56">[<expr><name pos:line="139" pos:column="57">start</name> <op:operator pos:line="139" pos:column="63">+</op:operator> <name pos:line="139" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="140" pos:column="17">i</name><op:operator pos:line="140" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="142" pos:column="9">s</name><index pos:line="142" pos:column="10">[<expr><name pos:line="142" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="142" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="142" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="145" pos:column="1">static</specifier> <name pos:line="145" pos:column="8">void</name></type> <name pos:line="145" pos:column="13">GetForwardRangeLowered</name><parameter_list pos:line="145" pos:column="35">(<param><decl><type><name pos:line="145" pos:column="36">unsigned</name> <name pos:line="145" pos:column="45">int</name></type> <name pos:line="145" pos:column="49">start</name></decl></param>,
		<param><decl><type><name pos:line="146" pos:column="17">CharacterSet</name> <type:modifier pos:line="146" pos:column="30">&amp;</type:modifier></type><name pos:line="146" pos:column="31">charSet</name></decl></param>,
		<param><decl><type><name pos:line="147" pos:column="17">Accessor</name> <type:modifier pos:line="147" pos:column="26">&amp;</type:modifier></type><name pos:line="147" pos:column="27">styler</name></decl></param>,
		<param><decl><type><name pos:line="148" pos:column="17">char</name> <type:modifier pos:line="148" pos:column="22">*</type:modifier></type><name pos:line="148" pos:column="23">s</name></decl></param>,
		<param><decl><type><name pos:line="149" pos:column="17">unsigned</name> <name pos:line="149" pos:column="26">int</name></type> <name pos:line="149" pos:column="30">len</name></decl></param>)</parameter_list> <block pos:line="149" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="150" pos:column="9">unsigned</name> <name pos:line="150" pos:column="18">int</name></type> <name pos:line="150" pos:column="22">i</name> <init pos:line="150" pos:column="24">= <expr><lit:literal type="number" pos:line="150" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="151" pos:column="9">while <condition pos:line="151" pos:column="15">(<expr><op:operator pos:line="151" pos:column="16">(</op:operator><name pos:line="151" pos:column="17">i</name> <op:operator pos:line="151" pos:column="19">&lt;</op:operator> <name pos:line="151" pos:column="21">len</name><op:operator pos:line="151" pos:column="24">-</op:operator><lit:literal type="number" pos:line="151" pos:column="25">1</lit:literal><op:operator pos:line="151" pos:column="26">)</op:operator> <op:operator pos:line="151" pos:column="28">&amp;&amp;</op:operator> <call><name><name pos:line="151" pos:column="31">charSet</name><op:operator pos:line="151" pos:column="38">.</op:operator><name pos:line="151" pos:column="39">Contains</name></name><argument_list pos:line="151" pos:column="47">(<argument><expr><call><name><name pos:line="151" pos:column="48">styler</name><op:operator pos:line="151" pos:column="54">.</op:operator><name pos:line="151" pos:column="55">SafeGetCharAt</name></name><argument_list pos:line="151" pos:column="68">(<argument><expr><name pos:line="151" pos:column="69">start</name> <op:operator pos:line="151" pos:column="75">+</op:operator> <name pos:line="151" pos:column="77">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="151" pos:column="82">{
		<expr_stmt><expr><name><name pos:line="152" pos:column="17">s</name><index pos:line="152" pos:column="18">[<expr><name pos:line="152" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="152" pos:column="22">=</op:operator> <call><name><name pos:line="152" pos:column="24">static_cast</name><argument_list pos:line="152" pos:column="35">&lt;<argument><expr><name pos:line="152" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="152" pos:column="41">(<argument><expr><call><name pos:line="152" pos:column="42">tolower</name><argument_list pos:line="152" pos:column="49">(<argument><expr><call><name><name pos:line="152" pos:column="50">styler</name><op:operator pos:line="152" pos:column="56">.</op:operator><name pos:line="152" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="152" pos:column="70">(<argument><expr><name pos:line="152" pos:column="71">start</name> <op:operator pos:line="152" pos:column="77">+</op:operator> <name pos:line="152" pos:column="79">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="153" pos:column="17">i</name><op:operator pos:line="153" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="155" pos:column="9">s</name><index pos:line="155" pos:column="10">[<expr><name pos:line="155" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="155" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="155" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>

}</block></function>

<enum pos:line="159" pos:column="1">enum <block pos:line="159" pos:column="6">{
	<decl><name pos:line="160" pos:column="9">stateInAsm</name> <init pos:line="160" pos:column="20">= <expr><lit:literal type="number" pos:line="160" pos:column="22">0x1000</lit:literal></expr></init></decl><op:operator pos:line="160" pos:column="28">,</op:operator>
	<decl><name pos:line="161" pos:column="9">stateInProperty</name> <init pos:line="161" pos:column="25">= <expr><lit:literal type="number" pos:line="161" pos:column="27">0x2000</lit:literal></expr></init></decl><op:operator pos:line="161" pos:column="33">,</op:operator>
	<decl><name pos:line="162" pos:column="9">stateInExport</name> <init pos:line="162" pos:column="23">= <expr><lit:literal type="number" pos:line="162" pos:column="25">0x4000</lit:literal></expr></init></decl><op:operator pos:line="162" pos:column="31">,</op:operator>
	<decl><name pos:line="163" pos:column="9">stateFoldInPreprocessor</name> <init pos:line="163" pos:column="33">= <expr><lit:literal type="number" pos:line="163" pos:column="35">0x0100</lit:literal></expr></init></decl><op:operator pos:line="163" pos:column="41">,</op:operator>
	<decl><name pos:line="164" pos:column="9">stateFoldInRecord</name> <init pos:line="164" pos:column="27">= <expr><lit:literal type="number" pos:line="164" pos:column="29">0x0200</lit:literal></expr></init></decl><op:operator pos:line="164" pos:column="35">,</op:operator>
	<decl><name pos:line="165" pos:column="9">stateFoldInPreprocessorLevelMask</name> <init pos:line="165" pos:column="42">= <expr><lit:literal type="number" pos:line="165" pos:column="44">0x00FF</lit:literal></expr></init></decl><op:operator pos:line="165" pos:column="50">,</op:operator>
	<decl><name pos:line="166" pos:column="9">stateFoldMaskAll</name> <init pos:line="166" pos:column="26">= <expr><lit:literal type="number" pos:line="166" pos:column="28">0x0FFF</lit:literal></expr></init></decl>
}</block>;</enum>

<function><type><specifier pos:line="169" pos:column="1">static</specifier> <name pos:line="169" pos:column="8">void</name></type> <name pos:line="169" pos:column="13">ClassifyPascalWord</name><parameter_list pos:line="169" pos:column="31">(<param><decl><type><name pos:line="169" pos:column="32">WordList</name> <type:modifier pos:line="169" pos:column="41">*</type:modifier></type><name><name pos:line="169" pos:column="42">keywordlists</name><index pos:line="169" pos:column="54">[]</index></name></decl></param>, <param><decl><type><name pos:line="169" pos:column="58">StyleContext</name> <type:modifier pos:line="169" pos:column="71">&amp;</type:modifier></type><name pos:line="169" pos:column="72">sc</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="76">int</name> <type:modifier pos:line="169" pos:column="80">&amp;</type:modifier></type><name pos:line="169" pos:column="81">curLineState</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="95">bool</name></type> <name pos:line="169" pos:column="100">bSmartHighlighting</name></decl></param>)</parameter_list> <block pos:line="169" pos:column="120">{
	<decl_stmt><decl><type><name pos:line="170" pos:column="9">WordList</name><type:modifier pos:line="170" pos:column="17">&amp;</type:modifier></type> <name pos:line="170" pos:column="19">keywords</name> <init pos:line="170" pos:column="28">= <expr><op:operator pos:line="170" pos:column="30">*</op:operator><name><name pos:line="170" pos:column="31">keywordlists</name><index pos:line="170" pos:column="43">[<expr><lit:literal type="number" pos:line="170" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="172" pos:column="9">char</name></type> <name><name pos:line="172" pos:column="14">s</name><index pos:line="172" pos:column="15">[<expr><lit:literal type="number" pos:line="172" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="173" pos:column="9">sc</name><op:operator pos:line="173" pos:column="11">.</op:operator><name pos:line="173" pos:column="12">GetCurrentLowered</name></name><argument_list pos:line="173" pos:column="29">(<argument><expr><name pos:line="173" pos:column="30">s</name></expr></argument>, <argument><expr><sizeof pos:line="173" pos:column="33">sizeof<argument_list pos:line="173" pos:column="39">(<argument><expr><name pos:line="173" pos:column="40">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="174" pos:column="9">if <condition pos:line="174" pos:column="12">(<expr><call><name><name pos:line="174" pos:column="13">keywords</name><op:operator pos:line="174" pos:column="21">.</op:operator><name pos:line="174" pos:column="22">InList</name></name><argument_list pos:line="174" pos:column="28">(<argument><expr><name pos:line="174" pos:column="29">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="174" pos:column="32"> <block pos:line="174" pos:column="33">{
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><name pos:line="175" pos:column="21">curLineState</name> <op:operator pos:line="175" pos:column="34">&amp;</op:operator> <name pos:line="175" pos:column="36">stateInAsm</name></expr>)</condition><then pos:line="175" pos:column="47"> <block pos:line="175" pos:column="48">{
			<if pos:line="176" pos:column="25">if <condition pos:line="176" pos:column="28">(<expr><call><name pos:line="176" pos:column="29">strcmp</name><argument_list pos:line="176" pos:column="35">(<argument><expr><name pos:line="176" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="176" pos:column="39">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="176" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="176" pos:column="49">0</lit:literal> <op:operator pos:line="176" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="176" pos:column="54">sc</name><op:operator pos:line="176" pos:column="56">.</op:operator><name pos:line="176" pos:column="57">GetRelative</name></name><argument_list pos:line="176" pos:column="68">(<argument><expr><op:operator pos:line="176" pos:column="69">-</op:operator><lit:literal type="number" pos:line="176" pos:column="70">4</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="176" pos:column="73">!=</op:operator> <lit:literal type="char" pos:line="176" pos:column="76">'@'</lit:literal></expr>)</condition><then pos:line="176" pos:column="80"> <block pos:line="176" pos:column="81">{
				<expr_stmt><expr><name pos:line="177" pos:column="33">curLineState</name> <op:operator pos:line="177" pos:column="46">&amp;=</op:operator> <op:operator pos:line="177" pos:column="49">~</op:operator><name pos:line="177" pos:column="50">stateInAsm</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="178" pos:column="33">sc</name><op:operator pos:line="178" pos:column="35">.</op:operator><name pos:line="178" pos:column="36">ChangeState</name></name><argument_list pos:line="178" pos:column="47">(<argument><expr><name pos:line="178" pos:column="48">SCE_PAS_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="179" pos:column="27">else <block pos:line="179" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="180" pos:column="33">sc</name><op:operator pos:line="180" pos:column="35">.</op:operator><name pos:line="180" pos:column="36">ChangeState</name></name><argument_list pos:line="180" pos:column="47">(<argument><expr><name pos:line="180" pos:column="48">SCE_PAS_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else pos:line="182" pos:column="19">else <block pos:line="182" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="183" pos:column="25">bool</name></type> <name pos:line="183" pos:column="30">ignoreKeyword</name> <init pos:line="183" pos:column="44">= <expr><lit:literal type="boolean" pos:line="183" pos:column="46">false</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="184" pos:column="25">if <condition pos:line="184" pos:column="28">(<expr><call><name pos:line="184" pos:column="29">strcmp</name><argument_list pos:line="184" pos:column="35">(<argument><expr><name pos:line="184" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="184" pos:column="39">"asm"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="184" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="184" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="184" pos:column="51"> <block pos:line="184" pos:column="52">{
				<expr_stmt><expr><name pos:line="185" pos:column="33">curLineState</name> <op:operator pos:line="185" pos:column="46">|=</op:operator> <name pos:line="185" pos:column="49">stateInAsm</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="186" pos:column="27">else <if pos:line="186" pos:column="32">if <condition pos:line="186" pos:column="35">(<expr><name pos:line="186" pos:column="36">bSmartHighlighting</name></expr>)</condition><then pos:line="186" pos:column="55"> <block pos:line="186" pos:column="56">{
				<if pos:line="187" pos:column="33">if <condition pos:line="187" pos:column="36">(<expr><call><name pos:line="187" pos:column="37">strcmp</name><argument_list pos:line="187" pos:column="43">(<argument><expr><name pos:line="187" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="47">"property"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="187" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="187" pos:column="62">0</lit:literal></expr>)</condition><then pos:line="187" pos:column="64"> <block pos:line="187" pos:column="65">{
					<expr_stmt><expr><name pos:line="188" pos:column="41">curLineState</name> <op:operator pos:line="188" pos:column="54">|=</op:operator> <name pos:line="188" pos:column="57">stateInProperty</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="189" pos:column="35">else <if pos:line="189" pos:column="40">if <condition pos:line="189" pos:column="43">(<expr><call><name pos:line="189" pos:column="44">strcmp</name><argument_list pos:line="189" pos:column="50">(<argument><expr><name pos:line="189" pos:column="51">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="54">"exports"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="189" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="189" pos:column="68">0</lit:literal></expr>)</condition><then pos:line="189" pos:column="70"> <block pos:line="189" pos:column="71">{
					<expr_stmt><expr><name pos:line="190" pos:column="41">curLineState</name> <op:operator pos:line="190" pos:column="54">|=</op:operator> <name pos:line="190" pos:column="57">stateInExport</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="191" pos:column="35">else <if pos:line="191" pos:column="40">if <condition pos:line="191" pos:column="43">(<expr><op:operator pos:line="191" pos:column="44">!</op:operator><op:operator pos:line="191" pos:column="45">(</op:operator><name pos:line="191" pos:column="46">curLineState</name> <op:operator pos:line="191" pos:column="59">&amp;</op:operator> <op:operator pos:line="191" pos:column="61">(</op:operator><name pos:line="191" pos:column="62">stateInProperty</name> <op:operator pos:line="191" pos:column="78">|</op:operator> <name pos:line="191" pos:column="80">stateInExport</name><op:operator pos:line="191" pos:column="93">)</op:operator><op:operator pos:line="191" pos:column="94">)</op:operator> <op:operator pos:line="191" pos:column="96">&amp;&amp;</op:operator> <call><name pos:line="191" pos:column="99">strcmp</name><argument_list pos:line="191" pos:column="105">(<argument><expr><name pos:line="191" pos:column="106">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="191" pos:column="109">"index"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="118">==</op:operator> <lit:literal type="number" pos:line="191" pos:column="121">0</lit:literal></expr>)</condition><then pos:line="191" pos:column="123"> <block pos:line="191" pos:column="124">{
					<expr_stmt><expr><name pos:line="192" pos:column="41">ignoreKeyword</name> <op:operator pos:line="192" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="192" pos:column="57">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="193" pos:column="35">else <if pos:line="193" pos:column="40">if <condition pos:line="193" pos:column="43">(<expr><op:operator pos:line="193" pos:column="44">!</op:operator><op:operator pos:line="193" pos:column="45">(</op:operator><name pos:line="193" pos:column="46">curLineState</name> <op:operator pos:line="193" pos:column="59">&amp;</op:operator> <name pos:line="193" pos:column="61">stateInExport</name><op:operator pos:line="193" pos:column="74">)</op:operator> <op:operator pos:line="193" pos:column="76">&amp;&amp;</op:operator> <call><name pos:line="193" pos:column="79">strcmp</name><argument_list pos:line="193" pos:column="85">(<argument><expr><name pos:line="193" pos:column="86">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="193" pos:column="89">"name"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="193" pos:column="97">==</op:operator> <lit:literal type="number" pos:line="193" pos:column="100">0</lit:literal></expr>)</condition><then pos:line="193" pos:column="102"> <block pos:line="193" pos:column="103">{
					<expr_stmt><expr><name pos:line="194" pos:column="41">ignoreKeyword</name> <op:operator pos:line="194" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="194" pos:column="57">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="195" pos:column="35">else <if pos:line="195" pos:column="40">if <condition pos:line="195" pos:column="43">(<expr><op:operator pos:line="195" pos:column="44">!</op:operator><op:operator pos:line="195" pos:column="45">(</op:operator><name pos:line="195" pos:column="46">curLineState</name> <op:operator pos:line="195" pos:column="59">&amp;</op:operator> <name pos:line="195" pos:column="61">stateInProperty</name><op:operator pos:line="195" pos:column="76">)</op:operator> <op:operator pos:line="195" pos:column="78">&amp;&amp;</op:operator>
					<op:operator pos:line="196" pos:column="41">(</op:operator><call><name pos:line="196" pos:column="42">strcmp</name><argument_list pos:line="196" pos:column="48">(<argument><expr><name pos:line="196" pos:column="49">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="196" pos:column="52">"read"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="196" pos:column="60">==</op:operator> <lit:literal type="number" pos:line="196" pos:column="63">0</lit:literal> <op:operator pos:line="196" pos:column="65">||</op:operator> <call><name pos:line="196" pos:column="68">strcmp</name><argument_list pos:line="196" pos:column="74">(<argument><expr><name pos:line="196" pos:column="75">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="196" pos:column="78">"write"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="196" pos:column="87">==</op:operator> <lit:literal type="number" pos:line="196" pos:column="90">0</lit:literal> <op:operator pos:line="196" pos:column="92">||</op:operator>
					 <call><name pos:line="197" pos:column="42">strcmp</name><argument_list pos:line="197" pos:column="48">(<argument><expr><name pos:line="197" pos:column="49">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="197" pos:column="52">"default"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="197" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="197" pos:column="66">0</lit:literal> <op:operator pos:line="197" pos:column="68">||</op:operator> <call><name pos:line="197" pos:column="71">strcmp</name><argument_list pos:line="197" pos:column="77">(<argument><expr><name pos:line="197" pos:column="78">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="197" pos:column="81">"nodefault"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="197" pos:column="94">==</op:operator> <lit:literal type="number" pos:line="197" pos:column="97">0</lit:literal> <op:operator pos:line="197" pos:column="99">||</op:operator>
					 <call><name pos:line="198" pos:column="42">strcmp</name><argument_list pos:line="198" pos:column="48">(<argument><expr><name pos:line="198" pos:column="49">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="52">"stored"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="198" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="198" pos:column="65">0</lit:literal> <op:operator pos:line="198" pos:column="67">||</op:operator> <call><name pos:line="198" pos:column="70">strcmp</name><argument_list pos:line="198" pos:column="76">(<argument><expr><name pos:line="198" pos:column="77">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="80">"implements"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="198" pos:column="94">==</op:operator> <lit:literal type="number" pos:line="198" pos:column="97">0</lit:literal> <op:operator pos:line="198" pos:column="99">||</op:operator>
					 <call><name pos:line="199" pos:column="42">strcmp</name><argument_list pos:line="199" pos:column="48">(<argument><expr><name pos:line="199" pos:column="49">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="199" pos:column="52">"readonly"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="199" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="199" pos:column="67">0</lit:literal> <op:operator pos:line="199" pos:column="69">||</op:operator> <call><name pos:line="199" pos:column="72">strcmp</name><argument_list pos:line="199" pos:column="78">(<argument><expr><name pos:line="199" pos:column="79">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="199" pos:column="82">"writeonly"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="199" pos:column="95">==</op:operator> <lit:literal type="number" pos:line="199" pos:column="98">0</lit:literal> <op:operator pos:line="199" pos:column="100">||</op:operator>
					 <call><name pos:line="200" pos:column="42">strcmp</name><argument_list pos:line="200" pos:column="48">(<argument><expr><name pos:line="200" pos:column="49">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="52">"add"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="200" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="200" pos:column="62">0</lit:literal> <op:operator pos:line="200" pos:column="64">||</op:operator> <call><name pos:line="200" pos:column="67">strcmp</name><argument_list pos:line="200" pos:column="73">(<argument><expr><name pos:line="200" pos:column="74">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="77">"remove"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="200" pos:column="87">==</op:operator> <lit:literal type="number" pos:line="200" pos:column="90">0</lit:literal><op:operator pos:line="200" pos:column="91">)</op:operator></expr>)</condition><then pos:line="200" pos:column="93"> <block pos:line="200" pos:column="94">{
					<expr_stmt><expr><name pos:line="201" pos:column="41">ignoreKeyword</name> <op:operator pos:line="201" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="201" pos:column="57">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if>
			}</block></then></if></else></if>
			<if pos:line="204" pos:column="25">if <condition pos:line="204" pos:column="28">(<expr><op:operator pos:line="204" pos:column="29">!</op:operator><name pos:line="204" pos:column="30">ignoreKeyword</name></expr>)</condition><then pos:line="204" pos:column="44"> <block pos:line="204" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="205" pos:column="33">sc</name><op:operator pos:line="205" pos:column="35">.</op:operator><name pos:line="205" pos:column="36">ChangeState</name></name><argument_list pos:line="205" pos:column="47">(<argument><expr><name pos:line="205" pos:column="48">SCE_PAS_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
	}</block></then> <else pos:line="208" pos:column="11">else <if pos:line="208" pos:column="16">if <condition pos:line="208" pos:column="19">(<expr><name pos:line="208" pos:column="20">curLineState</name> <op:operator pos:line="208" pos:column="33">&amp;</op:operator> <name pos:line="208" pos:column="35">stateInAsm</name></expr>)</condition><then pos:line="208" pos:column="46"> <block pos:line="208" pos:column="47">{
		<expr_stmt><expr><call><name><name pos:line="209" pos:column="17">sc</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">ChangeState</name></name><argument_list pos:line="209" pos:column="31">(<argument><expr><name pos:line="209" pos:column="32">SCE_PAS_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<expr_stmt><expr><call><name><name pos:line="211" pos:column="9">sc</name><op:operator pos:line="211" pos:column="11">.</op:operator><name pos:line="211" pos:column="12">SetState</name></name><argument_list pos:line="211" pos:column="20">(<argument><expr><name pos:line="211" pos:column="21">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="214" pos:column="1">static</specifier> <name pos:line="214" pos:column="8">void</name></type> <name pos:line="214" pos:column="13">ColourisePascalDoc</name><parameter_list pos:line="214" pos:column="31">(<param><decl><type><name pos:line="214" pos:column="32">unsigned</name> <name pos:line="214" pos:column="41">int</name></type> <name pos:line="214" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="214" pos:column="55">int</name></type> <name pos:line="214" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="214" pos:column="67">int</name></type> <name pos:line="214" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name pos:line="214" pos:column="82">WordList</name> <type:modifier pos:line="214" pos:column="91">*</type:modifier></type><name><name pos:line="214" pos:column="92">keywordlists</name><index pos:line="214" pos:column="104">[]</index></name></decl></param>,
		<param><decl><type><name pos:line="215" pos:column="17">Accessor</name> <type:modifier pos:line="215" pos:column="26">&amp;</type:modifier></type><name pos:line="215" pos:column="27">styler</name></decl></param>)</parameter_list> <block pos:line="215" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="216" pos:column="9">bool</name></type> <name pos:line="216" pos:column="14">bSmartHighlighting</name> <init pos:line="216" pos:column="33">= <expr><call><name><name pos:line="216" pos:column="35">styler</name><op:operator pos:line="216" pos:column="41">.</op:operator><name pos:line="216" pos:column="42">GetPropertyInt</name></name><argument_list pos:line="216" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="216" pos:column="57">"lexer.pascal.smart.highlighting"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="216" pos:column="92">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="216" pos:column="95">!=</op:operator> <lit:literal type="number" pos:line="216" pos:column="98">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="218" pos:column="9">CharacterSet</name></type> <name pos:line="218" pos:column="22">setWordStart</name><argument_list pos:line="218" pos:column="34">(<argument><expr><name><name pos:line="218" pos:column="35">CharacterSet</name><op:operator pos:line="218" pos:column="47">::</op:operator><name pos:line="218" pos:column="49">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="218" pos:column="59">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="218" pos:column="64">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="218" pos:column="70">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="219" pos:column="9">CharacterSet</name></type> <name pos:line="219" pos:column="22">setWord</name><argument_list pos:line="219" pos:column="29">(<argument><expr><name><name pos:line="219" pos:column="30">CharacterSet</name><op:operator pos:line="219" pos:column="42">::</op:operator><name pos:line="219" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="219" pos:column="57">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="219" pos:column="62">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="219" pos:column="68">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="220" pos:column="9">CharacterSet</name></type> <name pos:line="220" pos:column="22">setNumber</name><argument_list pos:line="220" pos:column="31">(<argument><expr><name><name pos:line="220" pos:column="32">CharacterSet</name><op:operator pos:line="220" pos:column="44">::</op:operator><name pos:line="220" pos:column="46">setDigits</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="220" pos:column="57">".-+eE"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="221" pos:column="9">CharacterSet</name></type> <name pos:line="221" pos:column="22">setHexNumber</name><argument_list pos:line="221" pos:column="34">(<argument><expr><name><name pos:line="221" pos:column="35">CharacterSet</name><op:operator pos:line="221" pos:column="47">::</op:operator><name pos:line="221" pos:column="49">setDigits</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="221" pos:column="60">"abcdefABCDEF"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="222" pos:column="9">CharacterSet</name></type> <name pos:line="222" pos:column="22">setOperator</name><argument_list pos:line="222" pos:column="33">(<argument><expr><name><name pos:line="222" pos:column="34">CharacterSet</name><op:operator pos:line="222" pos:column="46">::</op:operator><name pos:line="222" pos:column="48">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="57">"#$&amp;'()*+,-./:;&lt;=&gt;@[]^{}"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="224" pos:column="9">int</name></type> <name pos:line="224" pos:column="13">curLine</name> <init pos:line="224" pos:column="21">= <expr><call><name><name pos:line="224" pos:column="23">styler</name><op:operator pos:line="224" pos:column="29">.</op:operator><name pos:line="224" pos:column="30">GetLine</name></name><argument_list pos:line="224" pos:column="37">(<argument><expr><name pos:line="224" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="225" pos:column="9">int</name></type> <name pos:line="225" pos:column="13">curLineState</name> <init pos:line="225" pos:column="26">= <expr><name pos:line="225" pos:column="28">curLine</name> <op:operator pos:line="225" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="225" pos:column="38">0</lit:literal> <op:operator pos:line="225" pos:column="40">?</op:operator> <call><name><name pos:line="225" pos:column="42">styler</name><op:operator pos:line="225" pos:column="48">.</op:operator><name pos:line="225" pos:column="49">GetLineState</name></name><argument_list pos:line="225" pos:column="61">(<argument><expr><name pos:line="225" pos:column="62">curLine</name> <op:operator pos:line="225" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="225" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="225" pos:column="75">:</op:operator> <lit:literal type="number" pos:line="225" pos:column="77">0</lit:literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="227" pos:column="9">StyleContext</name></type> <name pos:line="227" pos:column="22">sc</name><parameter_list pos:line="227" pos:column="24">(<param><decl><type><name pos:line="227" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="227" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="227" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="227" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="229" pos:column="9">for (<init pos:line="229" pos:column="14">;</init> <condition><expr><call><name><name pos:line="229" pos:column="16">sc</name><op:operator pos:line="229" pos:column="18">.</op:operator><name pos:line="229" pos:column="19">More</name></name><argument_list pos:line="229" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="229" pos:column="27">sc</name><op:operator pos:line="229" pos:column="29">.</op:operator><name pos:line="229" pos:column="30">Forward</name></name><argument_list pos:line="229" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="229" pos:column="41">{
		<if pos:line="230" pos:column="17">if <condition pos:line="230" pos:column="20">(<expr><name><name pos:line="230" pos:column="21">sc</name><op:operator pos:line="230" pos:column="23">.</op:operator><name pos:line="230" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="230" pos:column="34"> <block pos:line="230" pos:column="35">{
			<comment type="line" pos:line="231" pos:column="25">// Update the line state, so it can be seen by next line</comment>
			<expr_stmt><expr><name pos:line="232" pos:column="25">curLine</name> <op:operator pos:line="232" pos:column="33">=</op:operator> <call><name><name pos:line="232" pos:column="35">styler</name><op:operator pos:line="232" pos:column="41">.</op:operator><name pos:line="232" pos:column="42">GetLine</name></name><argument_list pos:line="232" pos:column="49">(<argument><expr><name><name pos:line="232" pos:column="50">sc</name><op:operator pos:line="232" pos:column="52">.</op:operator><name pos:line="232" pos:column="53">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="233" pos:column="25">styler</name><op:operator pos:line="233" pos:column="31">.</op:operator><name pos:line="233" pos:column="32">SetLineState</name></name><argument_list pos:line="233" pos:column="44">(<argument><expr><name pos:line="233" pos:column="45">curLine</name></expr></argument>, <argument><expr><name pos:line="233" pos:column="54">curLineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="236" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="237" pos:column="17">switch <condition pos:line="237" pos:column="24">(<expr><name><name pos:line="237" pos:column="25">sc</name><op:operator pos:line="237" pos:column="27">.</op:operator><name pos:line="237" pos:column="28">state</name></name></expr>)</condition> <block pos:line="237" pos:column="35">{
			<case pos:line="238" pos:column="25">case <expr><name pos:line="238" pos:column="30">SCE_PAS_NUMBER</name></expr>:
				<if pos:line="239" pos:column="33">if <condition pos:line="239" pos:column="36">(<expr><op:operator pos:line="239" pos:column="37">!</op:operator><call><name><name pos:line="239" pos:column="38">setNumber</name><op:operator pos:line="239" pos:column="47">.</op:operator><name pos:line="239" pos:column="48">Contains</name></name><argument_list pos:line="239" pos:column="56">(<argument><expr><name><name pos:line="239" pos:column="57">sc</name><op:operator pos:line="239" pos:column="59">.</op:operator><name pos:line="239" pos:column="60">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="239" pos:column="64">||</op:operator> <op:operator pos:line="239" pos:column="67">(</op:operator><name><name pos:line="239" pos:column="68">sc</name><op:operator pos:line="239" pos:column="70">.</op:operator><name pos:line="239" pos:column="71">ch</name></name> <op:operator pos:line="239" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="77">'.'</lit:literal> <op:operator pos:line="239" pos:column="81">&amp;&amp;</op:operator> <name><name pos:line="239" pos:column="84">sc</name><op:operator pos:line="239" pos:column="86">.</op:operator><name pos:line="239" pos:column="87">chNext</name></name> <op:operator pos:line="239" pos:column="94">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="97">'.'</lit:literal><op:operator pos:line="239" pos:column="100">)</op:operator></expr>)</condition><then pos:line="239" pos:column="102"> <block pos:line="239" pos:column="103">{
					<expr_stmt><expr><call><name><name pos:line="240" pos:column="41">sc</name><op:operator pos:line="240" pos:column="43">.</op:operator><name pos:line="240" pos:column="44">SetState</name></name><argument_list pos:line="240" pos:column="52">(<argument><expr><name pos:line="240" pos:column="53">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="241" pos:column="35">else <if pos:line="241" pos:column="40">if <condition pos:line="241" pos:column="43">(<expr><name><name pos:line="241" pos:column="44">sc</name><op:operator pos:line="241" pos:column="46">.</op:operator><name pos:line="241" pos:column="47">ch</name></name> <op:operator pos:line="241" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="241" pos:column="53">'-'</lit:literal> <op:operator pos:line="241" pos:column="57">||</op:operator> <name><name pos:line="241" pos:column="60">sc</name><op:operator pos:line="241" pos:column="62">.</op:operator><name pos:line="241" pos:column="63">ch</name></name> <op:operator pos:line="241" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="241" pos:column="69">'+'</lit:literal></expr>)</condition><then pos:line="241" pos:column="73"> <block pos:line="241" pos:column="74">{
					<if pos:line="242" pos:column="41">if <condition pos:line="242" pos:column="44">(<expr><name><name pos:line="242" pos:column="45">sc</name><op:operator pos:line="242" pos:column="47">.</op:operator><name pos:line="242" pos:column="48">chPrev</name></name> <op:operator pos:line="242" pos:column="55">!=</op:operator> <lit:literal type="char" pos:line="242" pos:column="58">'E'</lit:literal> <op:operator pos:line="242" pos:column="62">&amp;&amp;</op:operator> <name><name pos:line="242" pos:column="65">sc</name><op:operator pos:line="242" pos:column="67">.</op:operator><name pos:line="242" pos:column="68">chPrev</name></name> <op:operator pos:line="242" pos:column="75">!=</op:operator> <lit:literal type="char" pos:line="242" pos:column="78">'e'</lit:literal></expr>)</condition><then pos:line="242" pos:column="82"> <block pos:line="242" pos:column="83">{
						<expr_stmt><expr><call><name><name pos:line="243" pos:column="49">sc</name><op:operator pos:line="243" pos:column="51">.</op:operator><name pos:line="243" pos:column="52">SetState</name></name><argument_list pos:line="243" pos:column="60">(<argument><expr><name pos:line="243" pos:column="61">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="246" pos:column="33">break;</break>
			</case><case pos:line="247" pos:column="25">case <expr><name pos:line="247" pos:column="30">SCE_PAS_IDENTIFIER</name></expr>:
				<if pos:line="248" pos:column="33">if <condition pos:line="248" pos:column="36">(<expr><op:operator pos:line="248" pos:column="37">!</op:operator><call><name><name pos:line="248" pos:column="38">setWord</name><op:operator pos:line="248" pos:column="45">.</op:operator><name pos:line="248" pos:column="46">Contains</name></name><argument_list pos:line="248" pos:column="54">(<argument><expr><name><name pos:line="248" pos:column="55">sc</name><op:operator pos:line="248" pos:column="57">.</op:operator><name pos:line="248" pos:column="58">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="248" pos:column="62"> <block pos:line="248" pos:column="63">{
					<expr_stmt><expr><call><name pos:line="249" pos:column="41">ClassifyPascalWord</name><argument_list pos:line="249" pos:column="59">(<argument><expr><name pos:line="249" pos:column="60">keywordlists</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="74">sc</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="78">curLineState</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="92">bSmartHighlighting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="251" pos:column="33">break;</break>
			</case><case pos:line="252" pos:column="25">case <expr><name pos:line="252" pos:column="30">SCE_PAS_HEXNUMBER</name></expr>:
				<if pos:line="253" pos:column="33">if <condition pos:line="253" pos:column="36">(<expr><op:operator pos:line="253" pos:column="37">!</op:operator><call><name><name pos:line="253" pos:column="38">setHexNumber</name><op:operator pos:line="253" pos:column="50">.</op:operator><name pos:line="253" pos:column="51">Contains</name></name><argument_list pos:line="253" pos:column="59">(<argument><expr><name><name pos:line="253" pos:column="60">sc</name><op:operator pos:line="253" pos:column="62">.</op:operator><name pos:line="253" pos:column="63">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="253" pos:column="67"> <block pos:line="253" pos:column="68">{
					<expr_stmt><expr><call><name><name pos:line="254" pos:column="41">sc</name><op:operator pos:line="254" pos:column="43">.</op:operator><name pos:line="254" pos:column="44">SetState</name></name><argument_list pos:line="254" pos:column="52">(<argument><expr><name pos:line="254" pos:column="53">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="256" pos:column="33">break;</break>
			</case><case pos:line="257" pos:column="25">case <expr><name pos:line="257" pos:column="30">SCE_PAS_COMMENT</name></expr>:
			</case><case pos:line="258" pos:column="25">case <expr><name pos:line="258" pos:column="30">SCE_PAS_PREPROCESSOR</name></expr>:
				<if pos:line="259" pos:column="33">if <condition pos:line="259" pos:column="36">(<expr><name><name pos:line="259" pos:column="37">sc</name><op:operator pos:line="259" pos:column="39">.</op:operator><name pos:line="259" pos:column="40">ch</name></name> <op:operator pos:line="259" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="259" pos:column="46">'}'</lit:literal></expr>)</condition><then pos:line="259" pos:column="50"> <block pos:line="259" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="260" pos:column="41">sc</name><op:operator pos:line="260" pos:column="43">.</op:operator><name pos:line="260" pos:column="44">ForwardSetState</name></name><argument_list pos:line="260" pos:column="59">(<argument><expr><name pos:line="260" pos:column="60">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="262" pos:column="33">break;</break>
			</case><case pos:line="263" pos:column="25">case <expr><name pos:line="263" pos:column="30">SCE_PAS_COMMENT2</name></expr>:
			</case><case pos:line="264" pos:column="25">case <expr><name pos:line="264" pos:column="30">SCE_PAS_PREPROCESSOR2</name></expr>:
				<if pos:line="265" pos:column="33">if <condition pos:line="265" pos:column="36">(<expr><call><name><name pos:line="265" pos:column="37">sc</name><op:operator pos:line="265" pos:column="39">.</op:operator><name pos:line="265" pos:column="40">Match</name></name><argument_list pos:line="265" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="265" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="265" pos:column="51">')'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="265" pos:column="56"> <block pos:line="265" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="266" pos:column="41">sc</name><op:operator pos:line="266" pos:column="43">.</op:operator><name pos:line="266" pos:column="44">Forward</name></name><argument_list pos:line="266" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="267" pos:column="41">sc</name><op:operator pos:line="267" pos:column="43">.</op:operator><name pos:line="267" pos:column="44">ForwardSetState</name></name><argument_list pos:line="267" pos:column="59">(<argument><expr><name pos:line="267" pos:column="60">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="269" pos:column="33">break;</break>
			</case><case pos:line="270" pos:column="25">case <expr><name pos:line="270" pos:column="30">SCE_PAS_COMMENTLINE</name></expr>:
				<if pos:line="271" pos:column="33">if <condition pos:line="271" pos:column="36">(<expr><name><name pos:line="271" pos:column="37">sc</name><op:operator pos:line="271" pos:column="39">.</op:operator><name pos:line="271" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="271" pos:column="52"> <block pos:line="271" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="272" pos:column="41">sc</name><op:operator pos:line="272" pos:column="43">.</op:operator><name pos:line="272" pos:column="44">SetState</name></name><argument_list pos:line="272" pos:column="52">(<argument><expr><name pos:line="272" pos:column="53">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="274" pos:column="33">break;</break>
			</case><case pos:line="275" pos:column="25">case <expr><name pos:line="275" pos:column="30">SCE_PAS_STRING</name></expr>:
				<if pos:line="276" pos:column="33">if <condition pos:line="276" pos:column="36">(<expr><name><name pos:line="276" pos:column="37">sc</name><op:operator pos:line="276" pos:column="39">.</op:operator><name pos:line="276" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="276" pos:column="50"> <block pos:line="276" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="277" pos:column="41">sc</name><op:operator pos:line="277" pos:column="43">.</op:operator><name pos:line="277" pos:column="44">ChangeState</name></name><argument_list pos:line="277" pos:column="55">(<argument><expr><name pos:line="277" pos:column="56">SCE_PAS_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="278" pos:column="35">else <if pos:line="278" pos:column="40">if <condition pos:line="278" pos:column="43">(<expr><name><name pos:line="278" pos:column="44">sc</name><op:operator pos:line="278" pos:column="46">.</op:operator><name pos:line="278" pos:column="47">ch</name></name> <op:operator pos:line="278" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="278" pos:column="53">'\''</lit:literal> <op:operator pos:line="278" pos:column="58">&amp;&amp;</op:operator> <name><name pos:line="278" pos:column="61">sc</name><op:operator pos:line="278" pos:column="63">.</op:operator><name pos:line="278" pos:column="64">chNext</name></name> <op:operator pos:line="278" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="278" pos:column="74">'\''</lit:literal></expr>)</condition><then pos:line="278" pos:column="79"> <block pos:line="278" pos:column="80">{
					<expr_stmt><expr><call><name><name pos:line="279" pos:column="41">sc</name><op:operator pos:line="279" pos:column="43">.</op:operator><name pos:line="279" pos:column="44">Forward</name></name><argument_list pos:line="279" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="280" pos:column="35">else <if pos:line="280" pos:column="40">if <condition pos:line="280" pos:column="43">(<expr><name><name pos:line="280" pos:column="44">sc</name><op:operator pos:line="280" pos:column="46">.</op:operator><name pos:line="280" pos:column="47">ch</name></name> <op:operator pos:line="280" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="280" pos:column="58"> <block pos:line="280" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="281" pos:column="41">sc</name><op:operator pos:line="281" pos:column="43">.</op:operator><name pos:line="281" pos:column="44">ForwardSetState</name></name><argument_list pos:line="281" pos:column="59">(<argument><expr><name pos:line="281" pos:column="60">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="283" pos:column="33">break;</break>
			</case><case pos:line="284" pos:column="25">case <expr><name pos:line="284" pos:column="30">SCE_PAS_STRINGEOL</name></expr>:
				<if pos:line="285" pos:column="33">if <condition pos:line="285" pos:column="36">(<expr><name><name pos:line="285" pos:column="37">sc</name><op:operator pos:line="285" pos:column="39">.</op:operator><name pos:line="285" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="285" pos:column="52"> <block pos:line="285" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="286" pos:column="41">sc</name><op:operator pos:line="286" pos:column="43">.</op:operator><name pos:line="286" pos:column="44">SetState</name></name><argument_list pos:line="286" pos:column="52">(<argument><expr><name pos:line="286" pos:column="53">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="288" pos:column="33">break;</break>
			</case><case pos:line="289" pos:column="25">case <expr><name pos:line="289" pos:column="30">SCE_PAS_CHARACTER</name></expr>:
				<if pos:line="290" pos:column="33">if <condition pos:line="290" pos:column="36">(<expr><op:operator pos:line="290" pos:column="37">!</op:operator><call><name><name pos:line="290" pos:column="38">setHexNumber</name><op:operator pos:line="290" pos:column="50">.</op:operator><name pos:line="290" pos:column="51">Contains</name></name><argument_list pos:line="290" pos:column="59">(<argument><expr><name><name pos:line="290" pos:column="60">sc</name><op:operator pos:line="290" pos:column="62">.</op:operator><name pos:line="290" pos:column="63">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="290" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="290" pos:column="70">sc</name><op:operator pos:line="290" pos:column="72">.</op:operator><name pos:line="290" pos:column="73">ch</name></name> <op:operator pos:line="290" pos:column="76">!=</op:operator> <lit:literal type="char" pos:line="290" pos:column="79">'$'</lit:literal></expr>)</condition><then pos:line="290" pos:column="83"> <block pos:line="290" pos:column="84">{
					<expr_stmt><expr><call><name><name pos:line="291" pos:column="41">sc</name><op:operator pos:line="291" pos:column="43">.</op:operator><name pos:line="291" pos:column="44">SetState</name></name><argument_list pos:line="291" pos:column="52">(<argument><expr><name pos:line="291" pos:column="53">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="293" pos:column="33">break;</break>
			</case><case pos:line="294" pos:column="25">case <expr><name pos:line="294" pos:column="30">SCE_PAS_OPERATOR</name></expr>:
				<if pos:line="295" pos:column="33">if <condition pos:line="295" pos:column="36">(<expr><name pos:line="295" pos:column="37">bSmartHighlighting</name> <op:operator pos:line="295" pos:column="56">&amp;&amp;</op:operator> <name><name pos:line="295" pos:column="59">sc</name><op:operator pos:line="295" pos:column="61">.</op:operator><name pos:line="295" pos:column="62">chPrev</name></name> <op:operator pos:line="295" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="295" pos:column="72">';'</lit:literal></expr>)</condition><then pos:line="295" pos:column="76"> <block pos:line="295" pos:column="77">{
					<expr_stmt><expr><name pos:line="296" pos:column="41">curLineState</name> <op:operator pos:line="296" pos:column="54">&amp;=</op:operator> <op:operator pos:line="296" pos:column="57">~</op:operator><op:operator pos:line="296" pos:column="58">(</op:operator><name pos:line="296" pos:column="59">stateInProperty</name> <op:operator pos:line="296" pos:column="75">|</op:operator> <name pos:line="296" pos:column="77">stateInExport</name><op:operator pos:line="296" pos:column="90">)</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="298" pos:column="33">sc</name><op:operator pos:line="298" pos:column="35">.</op:operator><name pos:line="298" pos:column="36">SetState</name></name><argument_list pos:line="298" pos:column="44">(<argument><expr><name pos:line="298" pos:column="45">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="299" pos:column="33">break;</break>
			</case><case pos:line="300" pos:column="25">case <expr><name pos:line="300" pos:column="30">SCE_PAS_ASM</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="301" pos:column="33">sc</name><op:operator pos:line="301" pos:column="35">.</op:operator><name pos:line="301" pos:column="36">SetState</name></name><argument_list pos:line="301" pos:column="44">(<argument><expr><name pos:line="301" pos:column="45">SCE_PAS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="302" pos:column="33">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="305" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="306" pos:column="17">if <condition pos:line="306" pos:column="20">(<expr><name><name pos:line="306" pos:column="21">sc</name><op:operator pos:line="306" pos:column="23">.</op:operator><name pos:line="306" pos:column="24">state</name></name> <op:operator pos:line="306" pos:column="30">==</op:operator> <name pos:line="306" pos:column="33">SCE_PAS_DEFAULT</name></expr>)</condition><then pos:line="306" pos:column="49"> <block pos:line="306" pos:column="50">{
			<if pos:line="307" pos:column="25">if <condition pos:line="307" pos:column="28">(<expr><call><name pos:line="307" pos:column="29">IsADigit</name><argument_list pos:line="307" pos:column="37">(<argument><expr><name><name pos:line="307" pos:column="38">sc</name><op:operator pos:line="307" pos:column="40">.</op:operator><name pos:line="307" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="307" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="307" pos:column="48">!</op:operator><op:operator pos:line="307" pos:column="49">(</op:operator><name pos:line="307" pos:column="50">curLineState</name> <op:operator pos:line="307" pos:column="63">&amp;</op:operator> <name pos:line="307" pos:column="65">stateInAsm</name><op:operator pos:line="307" pos:column="75">)</op:operator></expr>)</condition><then pos:line="307" pos:column="77"> <block pos:line="307" pos:column="78">{
				<expr_stmt><expr><call><name><name pos:line="308" pos:column="33">sc</name><op:operator pos:line="308" pos:column="35">.</op:operator><name pos:line="308" pos:column="36">SetState</name></name><argument_list pos:line="308" pos:column="44">(<argument><expr><name pos:line="308" pos:column="45">SCE_PAS_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="309" pos:column="27">else <if pos:line="309" pos:column="32">if <condition pos:line="309" pos:column="35">(<expr><call><name><name pos:line="309" pos:column="36">setWordStart</name><op:operator pos:line="309" pos:column="48">.</op:operator><name pos:line="309" pos:column="49">Contains</name></name><argument_list pos:line="309" pos:column="57">(<argument><expr><name><name pos:line="309" pos:column="58">sc</name><op:operator pos:line="309" pos:column="60">.</op:operator><name pos:line="309" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="309" pos:column="65"> <block pos:line="309" pos:column="66">{
				<expr_stmt><expr><call><name><name pos:line="310" pos:column="33">sc</name><op:operator pos:line="310" pos:column="35">.</op:operator><name pos:line="310" pos:column="36">SetState</name></name><argument_list pos:line="310" pos:column="44">(<argument><expr><name pos:line="310" pos:column="45">SCE_PAS_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="311" pos:column="27">else <if pos:line="311" pos:column="32">if <condition pos:line="311" pos:column="35">(<expr><name><name pos:line="311" pos:column="36">sc</name><op:operator pos:line="311" pos:column="38">.</op:operator><name pos:line="311" pos:column="39">ch</name></name> <op:operator pos:line="311" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="311" pos:column="45">'$'</lit:literal> <op:operator pos:line="311" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="311" pos:column="52">!</op:operator><op:operator pos:line="311" pos:column="53">(</op:operator><name pos:line="311" pos:column="54">curLineState</name> <op:operator pos:line="311" pos:column="67">&amp;</op:operator> <name pos:line="311" pos:column="69">stateInAsm</name><op:operator pos:line="311" pos:column="79">)</op:operator></expr>)</condition><then pos:line="311" pos:column="81"> <block pos:line="311" pos:column="82">{
				<expr_stmt><expr><call><name><name pos:line="312" pos:column="33">sc</name><op:operator pos:line="312" pos:column="35">.</op:operator><name pos:line="312" pos:column="36">SetState</name></name><argument_list pos:line="312" pos:column="44">(<argument><expr><name pos:line="312" pos:column="45">SCE_PAS_HEXNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="313" pos:column="27">else <if pos:line="313" pos:column="32">if <condition pos:line="313" pos:column="35">(<expr><call><name><name pos:line="313" pos:column="36">sc</name><op:operator pos:line="313" pos:column="38">.</op:operator><name pos:line="313" pos:column="39">Match</name></name><argument_list pos:line="313" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="313" pos:column="45">'{'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="313" pos:column="50">'$'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="313" pos:column="55"> <block pos:line="313" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="314" pos:column="33">sc</name><op:operator pos:line="314" pos:column="35">.</op:operator><name pos:line="314" pos:column="36">SetState</name></name><argument_list pos:line="314" pos:column="44">(<argument><expr><name pos:line="314" pos:column="45">SCE_PAS_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="315" pos:column="27">else <if pos:line="315" pos:column="32">if <condition pos:line="315" pos:column="35">(<expr><name><name pos:line="315" pos:column="36">sc</name><op:operator pos:line="315" pos:column="38">.</op:operator><name pos:line="315" pos:column="39">ch</name></name> <op:operator pos:line="315" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="315" pos:column="45">'{'</lit:literal></expr>)</condition><then pos:line="315" pos:column="49"> <block pos:line="315" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="316" pos:column="33">sc</name><op:operator pos:line="316" pos:column="35">.</op:operator><name pos:line="316" pos:column="36">SetState</name></name><argument_list pos:line="316" pos:column="44">(<argument><expr><name pos:line="316" pos:column="45">SCE_PAS_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="317" pos:column="27">else <if pos:line="317" pos:column="32">if <condition pos:line="317" pos:column="35">(<expr><call><name><name pos:line="317" pos:column="36">sc</name><op:operator pos:line="317" pos:column="38">.</op:operator><name pos:line="317" pos:column="39">Match</name></name><argument_list pos:line="317" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="317" pos:column="45">"(*$"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="317" pos:column="52"> <block pos:line="317" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="318" pos:column="33">sc</name><op:operator pos:line="318" pos:column="35">.</op:operator><name pos:line="318" pos:column="36">SetState</name></name><argument_list pos:line="318" pos:column="44">(<argument><expr><name pos:line="318" pos:column="45">SCE_PAS_PREPROCESSOR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="319" pos:column="27">else <if pos:line="319" pos:column="32">if <condition pos:line="319" pos:column="35">(<expr><call><name><name pos:line="319" pos:column="36">sc</name><op:operator pos:line="319" pos:column="38">.</op:operator><name pos:line="319" pos:column="39">Match</name></name><argument_list pos:line="319" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="319" pos:column="45">'('</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="319" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="319" pos:column="55"> <block pos:line="319" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="320" pos:column="33">sc</name><op:operator pos:line="320" pos:column="35">.</op:operator><name pos:line="320" pos:column="36">SetState</name></name><argument_list pos:line="320" pos:column="44">(<argument><expr><name pos:line="320" pos:column="45">SCE_PAS_COMMENT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="321" pos:column="33">sc</name><op:operator pos:line="321" pos:column="35">.</op:operator><name pos:line="321" pos:column="36">Forward</name></name><argument_list pos:line="321" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="321" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> <else pos:line="322" pos:column="27">else <if pos:line="322" pos:column="32">if <condition pos:line="322" pos:column="35">(<expr><call><name><name pos:line="322" pos:column="36">sc</name><op:operator pos:line="322" pos:column="38">.</op:operator><name pos:line="322" pos:column="39">Match</name></name><argument_list pos:line="322" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="322" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="322" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="322" pos:column="55"> <block pos:line="322" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="323" pos:column="33">sc</name><op:operator pos:line="323" pos:column="35">.</op:operator><name pos:line="323" pos:column="36">SetState</name></name><argument_list pos:line="323" pos:column="44">(<argument><expr><name pos:line="323" pos:column="45">SCE_PAS_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="324" pos:column="27">else <if pos:line="324" pos:column="32">if <condition pos:line="324" pos:column="35">(<expr><name><name pos:line="324" pos:column="36">sc</name><op:operator pos:line="324" pos:column="38">.</op:operator><name pos:line="324" pos:column="39">ch</name></name> <op:operator pos:line="324" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="324" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="324" pos:column="50"> <block pos:line="324" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="325" pos:column="33">sc</name><op:operator pos:line="325" pos:column="35">.</op:operator><name pos:line="325" pos:column="36">SetState</name></name><argument_list pos:line="325" pos:column="44">(<argument><expr><name pos:line="325" pos:column="45">SCE_PAS_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="326" pos:column="27">else <if pos:line="326" pos:column="32">if <condition pos:line="326" pos:column="35">(<expr><name><name pos:line="326" pos:column="36">sc</name><op:operator pos:line="326" pos:column="38">.</op:operator><name pos:line="326" pos:column="39">ch</name></name> <op:operator pos:line="326" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="326" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="326" pos:column="49"> <block pos:line="326" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="327" pos:column="33">sc</name><op:operator pos:line="327" pos:column="35">.</op:operator><name pos:line="327" pos:column="36">SetState</name></name><argument_list pos:line="327" pos:column="44">(<argument><expr><name pos:line="327" pos:column="45">SCE_PAS_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="328" pos:column="27">else <if pos:line="328" pos:column="32">if <condition pos:line="328" pos:column="35">(<expr><call><name><name pos:line="328" pos:column="36">setOperator</name><op:operator pos:line="328" pos:column="47">.</op:operator><name pos:line="328" pos:column="48">Contains</name></name><argument_list pos:line="328" pos:column="56">(<argument><expr><name><name pos:line="328" pos:column="57">sc</name><op:operator pos:line="328" pos:column="59">.</op:operator><name pos:line="328" pos:column="60">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="328" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="328" pos:column="67">!</op:operator><op:operator pos:line="328" pos:column="68">(</op:operator><name pos:line="328" pos:column="69">curLineState</name> <op:operator pos:line="328" pos:column="82">&amp;</op:operator> <name pos:line="328" pos:column="84">stateInAsm</name><op:operator pos:line="328" pos:column="94">)</op:operator></expr>)</condition><then pos:line="328" pos:column="96"> <block pos:line="328" pos:column="97">{
				<expr_stmt><expr><call><name><name pos:line="329" pos:column="33">sc</name><op:operator pos:line="329" pos:column="35">.</op:operator><name pos:line="329" pos:column="36">SetState</name></name><argument_list pos:line="329" pos:column="44">(<argument><expr><name pos:line="329" pos:column="45">SCE_PAS_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="330" pos:column="27">else <if pos:line="330" pos:column="32">if <condition pos:line="330" pos:column="35">(<expr><name pos:line="330" pos:column="36">curLineState</name> <op:operator pos:line="330" pos:column="49">&amp;</op:operator> <name pos:line="330" pos:column="51">stateInAsm</name></expr>)</condition><then pos:line="330" pos:column="62"> <block pos:line="330" pos:column="63">{
				<expr_stmt><expr><call><name><name pos:line="331" pos:column="33">sc</name><op:operator pos:line="331" pos:column="35">.</op:operator><name pos:line="331" pos:column="36">SetState</name></name><argument_list pos:line="331" pos:column="44">(<argument><expr><name pos:line="331" pos:column="45">SCE_PAS_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>

	<if pos:line="336" pos:column="9">if <condition pos:line="336" pos:column="12">(<expr><name><name pos:line="336" pos:column="13">sc</name><op:operator pos:line="336" pos:column="15">.</op:operator><name pos:line="336" pos:column="16">state</name></name> <op:operator pos:line="336" pos:column="22">==</op:operator> <name pos:line="336" pos:column="25">SCE_PAS_IDENTIFIER</name> <op:operator pos:line="336" pos:column="44">&amp;&amp;</op:operator> <call><name><name pos:line="336" pos:column="47">setWord</name><op:operator pos:line="336" pos:column="54">.</op:operator><name pos:line="336" pos:column="55">Contains</name></name><argument_list pos:line="336" pos:column="63">(<argument><expr><name><name pos:line="336" pos:column="64">sc</name><op:operator pos:line="336" pos:column="66">.</op:operator><name pos:line="336" pos:column="67">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="336" pos:column="75"> <block pos:line="336" pos:column="76">{
		<expr_stmt><expr><call><name pos:line="337" pos:column="17">ClassifyPascalWord</name><argument_list pos:line="337" pos:column="35">(<argument><expr><name pos:line="337" pos:column="36">keywordlists</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="50">sc</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="54">curLineState</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="68">bSmartHighlighting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="340" pos:column="9">sc</name><op:operator pos:line="340" pos:column="11">.</op:operator><name pos:line="340" pos:column="12">Complete</name></name><argument_list pos:line="340" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="343" pos:column="1">static</specifier> <name pos:line="343" pos:column="8">bool</name></type> <name pos:line="343" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="343" pos:column="33">(<param><decl><type><name pos:line="343" pos:column="34">int</name></type> <name pos:line="343" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="343" pos:column="45">{
	<return pos:line="344" pos:column="9">return <expr><name pos:line="344" pos:column="16">style</name> <op:operator pos:line="344" pos:column="22">==</op:operator> <name pos:line="344" pos:column="25">SCE_PAS_COMMENT</name> <op:operator pos:line="344" pos:column="41">||</op:operator> <name pos:line="344" pos:column="44">style</name> <op:operator pos:line="344" pos:column="50">==</op:operator> <name pos:line="344" pos:column="53">SCE_PAS_COMMENT2</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="347" pos:column="1">static</specifier> <name pos:line="347" pos:column="8">bool</name></type> <name pos:line="347" pos:column="13">IsCommentLine</name><parameter_list pos:line="347" pos:column="26">(<param><decl><type><name pos:line="347" pos:column="27">int</name></type> <name pos:line="347" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="347" pos:column="37">Accessor</name> <type:modifier pos:line="347" pos:column="46">&amp;</type:modifier></type><name pos:line="347" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="347" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="348" pos:column="9">int</name></type> <name pos:line="348" pos:column="13">pos</name> <init pos:line="348" pos:column="17">= <expr><call><name><name pos:line="348" pos:column="19">styler</name><op:operator pos:line="348" pos:column="25">.</op:operator><name pos:line="348" pos:column="26">LineStart</name></name><argument_list pos:line="348" pos:column="35">(<argument><expr><name pos:line="348" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="349" pos:column="9">int</name></type> <name pos:line="349" pos:column="13">eolPos</name> <init pos:line="349" pos:column="20">= <expr><call><name><name pos:line="349" pos:column="22">styler</name><op:operator pos:line="349" pos:column="28">.</op:operator><name pos:line="349" pos:column="29">LineStart</name></name><argument_list pos:line="349" pos:column="38">(<argument><expr><name pos:line="349" pos:column="39">line</name> <op:operator pos:line="349" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="349" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="349" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="349" pos:column="51">1</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="350" pos:column="9">for (<init><decl><type><name pos:line="350" pos:column="14">int</name></type> <name pos:line="350" pos:column="18">i</name> <init pos:line="350" pos:column="20">= <expr><name pos:line="350" pos:column="22">pos</name></expr></init></decl>;</init> <condition><expr><name pos:line="350" pos:column="27">i</name> <op:operator pos:line="350" pos:column="29">&lt;</op:operator> <name pos:line="350" pos:column="31">eolPos</name></expr>;</condition> <incr><expr><name pos:line="350" pos:column="39">i</name><op:operator pos:line="350" pos:column="40">++</op:operator></expr></incr>) <block pos:line="350" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="351" pos:column="17">char</name></type> <name pos:line="351" pos:column="22">ch</name> <init pos:line="351" pos:column="25">= <expr><name><name pos:line="351" pos:column="27">styler</name><index pos:line="351" pos:column="33">[<expr><name pos:line="351" pos:column="34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="352" pos:column="17">char</name></type> <name pos:line="352" pos:column="22">chNext</name> <init pos:line="352" pos:column="29">= <expr><call><name><name pos:line="352" pos:column="31">styler</name><op:operator pos:line="352" pos:column="37">.</op:operator><name pos:line="352" pos:column="38">SafeGetCharAt</name></name><argument_list pos:line="352" pos:column="51">(<argument><expr><name pos:line="352" pos:column="52">i</name> <op:operator pos:line="352" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="352" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="353" pos:column="17">int</name></type> <name pos:line="353" pos:column="21">style</name> <init pos:line="353" pos:column="27">= <expr><call><name><name pos:line="353" pos:column="29">styler</name><op:operator pos:line="353" pos:column="35">.</op:operator><name pos:line="353" pos:column="36">StyleAt</name></name><argument_list pos:line="353" pos:column="43">(<argument><expr><name pos:line="353" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="354" pos:column="17">if <condition pos:line="354" pos:column="20">(<expr><name pos:line="354" pos:column="21">ch</name> <op:operator pos:line="354" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="354" pos:column="27">'/'</lit:literal> <op:operator pos:line="354" pos:column="31">&amp;&amp;</op:operator> <name pos:line="354" pos:column="34">chNext</name> <op:operator pos:line="354" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="354" pos:column="44">'/'</lit:literal> <op:operator pos:line="354" pos:column="48">&amp;&amp;</op:operator> <name pos:line="354" pos:column="51">style</name> <op:operator pos:line="354" pos:column="57">==</op:operator> <name pos:line="354" pos:column="60">SCE_PAS_COMMENTLINE</name></expr>)</condition><then pos:line="354" pos:column="80"> <block pos:line="354" pos:column="81">{
			<return pos:line="355" pos:column="25">return <expr><lit:literal type="boolean" pos:line="355" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then> <else pos:line="356" pos:column="19">else <if pos:line="356" pos:column="24">if <condition pos:line="356" pos:column="27">(<expr><op:operator pos:line="356" pos:column="28">!</op:operator><call><name pos:line="356" pos:column="29">IsASpaceOrTab</name><argument_list pos:line="356" pos:column="42">(<argument><expr><name pos:line="356" pos:column="43">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="356" pos:column="47"> <block pos:line="356" pos:column="48">{
			<return pos:line="357" pos:column="25">return <expr><lit:literal type="boolean" pos:line="357" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if></else></if>
	}</block></for>
	<return pos:line="360" pos:column="9">return <expr><lit:literal type="boolean" pos:line="360" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="363" pos:column="1">static</specifier> <name pos:line="363" pos:column="8">unsigned</name> <name pos:line="363" pos:column="17">int</name></type> <name pos:line="363" pos:column="21">GetFoldInPreprocessorLevelFlag</name><parameter_list pos:line="363" pos:column="51">(<param><decl><type><name pos:line="363" pos:column="52">int</name></type> <name pos:line="363" pos:column="56">lineFoldStateCurrent</name></decl></param>)</parameter_list> <block pos:line="363" pos:column="78">{
	<return pos:line="364" pos:column="9">return <expr><name pos:line="364" pos:column="16">lineFoldStateCurrent</name> <op:operator pos:line="364" pos:column="37">&amp;</op:operator> <name pos:line="364" pos:column="39">stateFoldInPreprocessorLevelMask</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="367" pos:column="1">static</specifier> <name pos:line="367" pos:column="8">void</name></type> <name pos:line="367" pos:column="13">SetFoldInPreprocessorLevelFlag</name><parameter_list pos:line="367" pos:column="43">(<param><decl><type><name pos:line="367" pos:column="44">int</name> <type:modifier pos:line="367" pos:column="48">&amp;</type:modifier></type><name pos:line="367" pos:column="49">lineFoldStateCurrent</name></decl></param>, <param><decl><type><name pos:line="367" pos:column="71">unsigned</name> <name pos:line="367" pos:column="80">int</name></type> <name pos:line="367" pos:column="84">nestLevel</name></decl></param>)</parameter_list> <block pos:line="367" pos:column="95">{
	<expr_stmt><expr><name pos:line="368" pos:column="9">lineFoldStateCurrent</name> <op:operator pos:line="368" pos:column="30">&amp;=</op:operator> <op:operator pos:line="368" pos:column="33">~</op:operator><name pos:line="368" pos:column="34">stateFoldInPreprocessorLevelMask</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="369" pos:column="9">lineFoldStateCurrent</name> <op:operator pos:line="369" pos:column="30">|=</op:operator> <name pos:line="369" pos:column="33">nestLevel</name> <op:operator pos:line="369" pos:column="43">&amp;</op:operator> <name pos:line="369" pos:column="45">stateFoldInPreprocessorLevelMask</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="372" pos:column="1">static</specifier> <name pos:line="372" pos:column="8">void</name></type> <name pos:line="372" pos:column="13">ClassifyPascalPreprocessorFoldPoint</name><parameter_list pos:line="372" pos:column="48">(<param><decl><type><name pos:line="372" pos:column="49">int</name> <type:modifier pos:line="372" pos:column="53">&amp;</type:modifier></type><name pos:line="372" pos:column="54">levelCurrent</name></decl></param>, <param><decl><type><name pos:line="372" pos:column="68">int</name> <type:modifier pos:line="372" pos:column="72">&amp;</type:modifier></type><name pos:line="372" pos:column="73">lineFoldStateCurrent</name></decl></param>,
		<param><decl><type><name pos:line="373" pos:column="17">unsigned</name> <name pos:line="373" pos:column="26">int</name></type> <name pos:line="373" pos:column="30">startPos</name></decl></param>, <param><decl><type><name pos:line="373" pos:column="40">Accessor</name> <type:modifier pos:line="373" pos:column="49">&amp;</type:modifier></type><name pos:line="373" pos:column="50">styler</name></decl></param>)</parameter_list> <block pos:line="373" pos:column="58">{
	<function_decl><type><name pos:line="374" pos:column="9">CharacterSet</name></type> <name pos:line="374" pos:column="22">setWord</name><parameter_list pos:line="374" pos:column="29">(<param><decl><type><name><name pos:line="374" pos:column="30">CharacterSet</name><op:operator pos:line="374" pos:column="42">::</op:operator><name pos:line="374" pos:column="44">setAlpha</name></name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="376" pos:column="9">char</name></type> <name><name pos:line="376" pos:column="14">s</name><index pos:line="376" pos:column="15">[<expr><lit:literal type="number" pos:line="376" pos:column="16">11</lit:literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line" pos:line="376" pos:column="25">// Size of the longest possible keyword + one additional character + null</comment>
	<expr_stmt><expr><call><name pos:line="377" pos:column="9">GetForwardRangeLowered</name><argument_list pos:line="377" pos:column="31">(<argument><expr><name pos:line="377" pos:column="32">startPos</name></expr></argument>, <argument><expr><name pos:line="377" pos:column="42">setWord</name></expr></argument>, <argument><expr><name pos:line="377" pos:column="51">styler</name></expr></argument>, <argument><expr><name pos:line="377" pos:column="59">s</name></expr></argument>, <argument><expr><sizeof pos:line="377" pos:column="62">sizeof<argument_list pos:line="377" pos:column="68">(<argument><expr><name pos:line="377" pos:column="69">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="379" pos:column="9">unsigned</name> <name pos:line="379" pos:column="18">int</name></type> <name pos:line="379" pos:column="22">nestLevel</name> <init pos:line="379" pos:column="32">= <expr><call><name pos:line="379" pos:column="34">GetFoldInPreprocessorLevelFlag</name><argument_list pos:line="379" pos:column="64">(<argument><expr><name pos:line="379" pos:column="65">lineFoldStateCurrent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="381" pos:column="9">if <condition pos:line="381" pos:column="12">(<expr><call><name pos:line="381" pos:column="13">strcmp</name><argument_list pos:line="381" pos:column="19">(<argument><expr><name pos:line="381" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="381" pos:column="23">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="381" pos:column="29">==</op:operator> <lit:literal type="number" pos:line="381" pos:column="32">0</lit:literal> <op:operator pos:line="381" pos:column="34">||</op:operator>
		<call><name pos:line="382" pos:column="17">strcmp</name><argument_list pos:line="382" pos:column="23">(<argument><expr><name pos:line="382" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="27">"ifdef"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="382" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="382" pos:column="39">0</lit:literal> <op:operator pos:line="382" pos:column="41">||</op:operator>
		<call><name pos:line="383" pos:column="17">strcmp</name><argument_list pos:line="383" pos:column="23">(<argument><expr><name pos:line="383" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="383" pos:column="27">"ifndef"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="383" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="383" pos:column="40">0</lit:literal> <op:operator pos:line="383" pos:column="42">||</op:operator>
		<call><name pos:line="384" pos:column="17">strcmp</name><argument_list pos:line="384" pos:column="23">(<argument><expr><name pos:line="384" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="384" pos:column="27">"ifopt"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="384" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="384" pos:column="39">0</lit:literal> <op:operator pos:line="384" pos:column="41">||</op:operator>
		<call><name pos:line="385" pos:column="17">strcmp</name><argument_list pos:line="385" pos:column="23">(<argument><expr><name pos:line="385" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="385" pos:column="27">"region"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="385" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="385" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="385" pos:column="42"> <block pos:line="385" pos:column="43">{
		<expr_stmt><expr><name pos:line="386" pos:column="17">nestLevel</name><op:operator pos:line="386" pos:column="26">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="387" pos:column="17">SetFoldInPreprocessorLevelFlag</name><argument_list pos:line="387" pos:column="47">(<argument><expr><name pos:line="387" pos:column="48">lineFoldStateCurrent</name></expr></argument>, <argument><expr><name pos:line="387" pos:column="70">nestLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="388" pos:column="17">lineFoldStateCurrent</name> <op:operator pos:line="388" pos:column="38">|=</op:operator> <name pos:line="388" pos:column="41">stateFoldInPreprocessor</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="389" pos:column="17">levelCurrent</name><op:operator pos:line="389" pos:column="29">++</op:operator></expr>;</expr_stmt>
	}</block></then> <else pos:line="390" pos:column="11">else <if pos:line="390" pos:column="16">if <condition pos:line="390" pos:column="19">(<expr><call><name pos:line="390" pos:column="20">strcmp</name><argument_list pos:line="390" pos:column="26">(<argument><expr><name pos:line="390" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="390" pos:column="30">"endif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="390" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="390" pos:column="42">0</lit:literal> <op:operator pos:line="390" pos:column="44">||</op:operator>
		<call><name pos:line="391" pos:column="17">strcmp</name><argument_list pos:line="391" pos:column="23">(<argument><expr><name pos:line="391" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="391" pos:column="27">"ifend"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="391" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="391" pos:column="39">0</lit:literal> <op:operator pos:line="391" pos:column="41">||</op:operator>
		<call><name pos:line="392" pos:column="17">strcmp</name><argument_list pos:line="392" pos:column="23">(<argument><expr><name pos:line="392" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="392" pos:column="27">"endregion"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="392" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="392" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="392" pos:column="45"> <block pos:line="392" pos:column="46">{
		<expr_stmt><expr><name pos:line="393" pos:column="17">nestLevel</name><op:operator pos:line="393" pos:column="26">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="394" pos:column="17">SetFoldInPreprocessorLevelFlag</name><argument_list pos:line="394" pos:column="47">(<argument><expr><name pos:line="394" pos:column="48">lineFoldStateCurrent</name></expr></argument>, <argument><expr><name pos:line="394" pos:column="70">nestLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="395" pos:column="17">if <condition pos:line="395" pos:column="20">(<expr><name pos:line="395" pos:column="21">nestLevel</name> <op:operator pos:line="395" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="395" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="395" pos:column="36"> <block pos:line="395" pos:column="37">{
			<expr_stmt><expr><name pos:line="396" pos:column="25">lineFoldStateCurrent</name> <op:operator pos:line="396" pos:column="46">&amp;=</op:operator> <op:operator pos:line="396" pos:column="49">~</op:operator><name pos:line="396" pos:column="50">stateFoldInPreprocessor</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="398" pos:column="17">levelCurrent</name><op:operator pos:line="398" pos:column="29">--</op:operator></expr>;</expr_stmt>
		<if pos:line="399" pos:column="17">if <condition pos:line="399" pos:column="20">(<expr><name pos:line="399" pos:column="21">levelCurrent</name> <op:operator pos:line="399" pos:column="34">&lt;</op:operator> <name pos:line="399" pos:column="36">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="399" pos:column="53"> <block pos:line="399" pos:column="54">{
			<expr_stmt><expr><name pos:line="400" pos:column="25">levelCurrent</name> <op:operator pos:line="400" pos:column="38">=</op:operator> <name pos:line="400" pos:column="40">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if></else></if>
}</block></function>

<function><type><specifier pos:line="405" pos:column="1">static</specifier> <name pos:line="405" pos:column="8">unsigned</name> <name pos:line="405" pos:column="17">int</name></type> <name pos:line="405" pos:column="21">SkipWhiteSpace</name><parameter_list pos:line="405" pos:column="35">(<param><decl><type><name pos:line="405" pos:column="36">unsigned</name> <name pos:line="405" pos:column="45">int</name></type> <name pos:line="405" pos:column="49">currentPos</name></decl></param>, <param><decl><type><name pos:line="405" pos:column="61">unsigned</name> <name pos:line="405" pos:column="70">int</name></type> <name pos:line="405" pos:column="74">endPos</name></decl></param>,
		<param><decl><type><name pos:line="406" pos:column="17">Accessor</name> <type:modifier pos:line="406" pos:column="26">&amp;</type:modifier></type><name pos:line="406" pos:column="27">styler</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="35">bool</name></type> <name pos:line="406" pos:column="40">includeChars</name> <init pos:line="406" pos:column="53">= <expr><lit:literal type="boolean" pos:line="406" pos:column="55">false</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="406" pos:column="62">{
	<decl_stmt><decl><type><name pos:line="407" pos:column="9">CharacterSet</name></type> <name pos:line="407" pos:column="22">setWord</name><argument_list pos:line="407" pos:column="29">(<argument><expr><name><name pos:line="407" pos:column="30">CharacterSet</name><op:operator pos:line="407" pos:column="42">::</op:operator><name pos:line="407" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="407" pos:column="57">"_"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="408" pos:column="9">unsigned</name> <name pos:line="408" pos:column="18">int</name></type> <name pos:line="408" pos:column="22">j</name> <init pos:line="408" pos:column="24">= <expr><name pos:line="408" pos:column="26">currentPos</name> <op:operator pos:line="408" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="408" pos:column="39">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="409" pos:column="9">char</name></type> <name pos:line="409" pos:column="14">ch</name> <init pos:line="409" pos:column="17">= <expr><call><name><name pos:line="409" pos:column="19">styler</name><op:operator pos:line="409" pos:column="25">.</op:operator><name pos:line="409" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="409" pos:column="39">(<argument><expr><name pos:line="409" pos:column="40">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="410" pos:column="9">while <condition pos:line="410" pos:column="15">(<expr><op:operator pos:line="410" pos:column="16">(</op:operator><name pos:line="410" pos:column="17">j</name> <op:operator pos:line="410" pos:column="19">&lt;</op:operator> <name pos:line="410" pos:column="21">endPos</name><op:operator pos:line="410" pos:column="27">)</op:operator> <op:operator pos:line="410" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="410" pos:column="32">(</op:operator><call><name pos:line="410" pos:column="33">IsASpaceOrTab</name><argument_list pos:line="410" pos:column="46">(<argument><expr><name pos:line="410" pos:column="47">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="410" pos:column="51">||</op:operator> <name pos:line="410" pos:column="54">ch</name> <op:operator pos:line="410" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="410" pos:column="60">'\r'</lit:literal> <op:operator pos:line="410" pos:column="65">||</op:operator> <name pos:line="410" pos:column="68">ch</name> <op:operator pos:line="410" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="410" pos:column="74">'\n'</lit:literal> <op:operator pos:line="410" pos:column="79">||</op:operator>
		<call><name pos:line="411" pos:column="17">IsStreamCommentStyle</name><argument_list pos:line="411" pos:column="37">(<argument><expr><call><name><name pos:line="411" pos:column="38">styler</name><op:operator pos:line="411" pos:column="44">.</op:operator><name pos:line="411" pos:column="45">StyleAt</name></name><argument_list pos:line="411" pos:column="52">(<argument><expr><name pos:line="411" pos:column="53">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="411" pos:column="57">||</op:operator> <op:operator pos:line="411" pos:column="60">(</op:operator><name pos:line="411" pos:column="61">includeChars</name> <op:operator pos:line="411" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="411" pos:column="77">setWord</name><op:operator pos:line="411" pos:column="84">.</op:operator><name pos:line="411" pos:column="85">Contains</name></name><argument_list pos:line="411" pos:column="93">(<argument><expr><name pos:line="411" pos:column="94">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="411" pos:column="97">)</op:operator><op:operator pos:line="411" pos:column="98">)</op:operator></expr>)</condition> <block pos:line="411" pos:column="101">{
		<expr_stmt><expr><name pos:line="412" pos:column="17">j</name><op:operator pos:line="412" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="413" pos:column="17">ch</name> <op:operator pos:line="413" pos:column="20">=</op:operator> <call><name><name pos:line="413" pos:column="22">styler</name><op:operator pos:line="413" pos:column="28">.</op:operator><name pos:line="413" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="413" pos:column="42">(<argument><expr><name pos:line="413" pos:column="43">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="415" pos:column="9">return <expr><name pos:line="415" pos:column="16">j</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="418" pos:column="1">static</specifier> <name pos:line="418" pos:column="8">void</name></type> <name pos:line="418" pos:column="13">ClassifyPascalWordFoldPoint</name><parameter_list pos:line="418" pos:column="40">(<param><decl><type><name pos:line="418" pos:column="41">int</name> <type:modifier pos:line="418" pos:column="45">&amp;</type:modifier></type><name pos:line="418" pos:column="46">levelCurrent</name></decl></param>, <param><decl><type><name pos:line="418" pos:column="60">int</name> <type:modifier pos:line="418" pos:column="64">&amp;</type:modifier></type><name pos:line="418" pos:column="65">lineFoldStateCurrent</name></decl></param>,
		<param><decl><type><name pos:line="419" pos:column="17">int</name></type> <name pos:line="419" pos:column="21">startPos</name></decl></param>, <param><decl><type><name pos:line="419" pos:column="31">unsigned</name> <name pos:line="419" pos:column="40">int</name></type> <name pos:line="419" pos:column="44">endPos</name></decl></param>,
		<param><decl><type><name pos:line="420" pos:column="17">unsigned</name> <name pos:line="420" pos:column="26">int</name></type> <name pos:line="420" pos:column="30">lastStart</name></decl></param>, <param><decl><type><name pos:line="420" pos:column="41">unsigned</name> <name pos:line="420" pos:column="50">int</name></type> <name pos:line="420" pos:column="54">currentPos</name></decl></param>, <param><decl><type><name pos:line="420" pos:column="66">Accessor</name> <type:modifier pos:line="420" pos:column="75">&amp;</type:modifier></type><name pos:line="420" pos:column="76">styler</name></decl></param>)</parameter_list> <block pos:line="420" pos:column="84">{
	<decl_stmt><decl><type><name pos:line="421" pos:column="9">char</name></type> <name><name pos:line="421" pos:column="14">s</name><index pos:line="421" pos:column="15">[<expr><lit:literal type="number" pos:line="421" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="422" pos:column="9">GetRangeLowered</name><argument_list pos:line="422" pos:column="24">(<argument><expr><name pos:line="422" pos:column="25">lastStart</name></expr></argument>, <argument><expr><name pos:line="422" pos:column="36">currentPos</name></expr></argument>, <argument><expr><name pos:line="422" pos:column="48">styler</name></expr></argument>, <argument><expr><name pos:line="422" pos:column="56">s</name></expr></argument>, <argument><expr><sizeof pos:line="422" pos:column="59">sizeof<argument_list pos:line="422" pos:column="65">(<argument><expr><name pos:line="422" pos:column="66">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="424" pos:column="9">if <condition pos:line="424" pos:column="12">(<expr><call><name pos:line="424" pos:column="13">strcmp</name><argument_list pos:line="424" pos:column="19">(<argument><expr><name pos:line="424" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="424" pos:column="23">"record"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="424" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="424" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="424" pos:column="38"> <block pos:line="424" pos:column="39">{
		<expr_stmt><expr><name pos:line="425" pos:column="17">lineFoldStateCurrent</name> <op:operator pos:line="425" pos:column="38">|=</op:operator> <name pos:line="425" pos:column="41">stateFoldInRecord</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="426" pos:column="17">levelCurrent</name><op:operator pos:line="426" pos:column="29">++</op:operator></expr>;</expr_stmt>
	}</block></then> <else pos:line="427" pos:column="11">else <if pos:line="427" pos:column="16">if <condition pos:line="427" pos:column="19">(<expr><call><name pos:line="427" pos:column="20">strcmp</name><argument_list pos:line="427" pos:column="26">(<argument><expr><name pos:line="427" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="427" pos:column="30">"begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="427" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="427" pos:column="42">0</lit:literal> <op:operator pos:line="427" pos:column="44">||</op:operator>
		<call><name pos:line="428" pos:column="17">strcmp</name><argument_list pos:line="428" pos:column="23">(<argument><expr><name pos:line="428" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="428" pos:column="27">"asm"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="428" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="428" pos:column="37">0</lit:literal> <op:operator pos:line="428" pos:column="39">||</op:operator>
		<call><name pos:line="429" pos:column="17">strcmp</name><argument_list pos:line="429" pos:column="23">(<argument><expr><name pos:line="429" pos:column="24">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="429" pos:column="27">"try"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="429" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="429" pos:column="37">0</lit:literal> <op:operator pos:line="429" pos:column="39">||</op:operator>
		<op:operator pos:line="430" pos:column="17">(</op:operator><call><name pos:line="430" pos:column="18">strcmp</name><argument_list pos:line="430" pos:column="24">(<argument><expr><name pos:line="430" pos:column="25">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="430" pos:column="28">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="430" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="430" pos:column="39">0</lit:literal> <op:operator pos:line="430" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="430" pos:column="44">!</op:operator><op:operator pos:line="430" pos:column="45">(</op:operator><name pos:line="430" pos:column="46">lineFoldStateCurrent</name> <op:operator pos:line="430" pos:column="67">&amp;</op:operator> <name pos:line="430" pos:column="69">stateFoldInRecord</name><op:operator pos:line="430" pos:column="86">)</op:operator><op:operator pos:line="430" pos:column="87">)</op:operator></expr>)</condition><then pos:line="430" pos:column="89"> <block pos:line="430" pos:column="90">{
		<expr_stmt><expr><name pos:line="431" pos:column="17">levelCurrent</name><op:operator pos:line="431" pos:column="29">++</op:operator></expr>;</expr_stmt>
	}</block></then> <else pos:line="432" pos:column="11">else <if pos:line="432" pos:column="16">if <condition pos:line="432" pos:column="19">(<expr><call><name pos:line="432" pos:column="20">strcmp</name><argument_list pos:line="432" pos:column="26">(<argument><expr><name pos:line="432" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="432" pos:column="30">"class"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="432" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="432" pos:column="42">0</lit:literal> <op:operator pos:line="432" pos:column="44">||</op:operator> <call><name pos:line="432" pos:column="47">strcmp</name><argument_list pos:line="432" pos:column="53">(<argument><expr><name pos:line="432" pos:column="54">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="432" pos:column="57">"object"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="432" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="432" pos:column="70">0</lit:literal></expr>)</condition><then pos:line="432" pos:column="72"> <block pos:line="432" pos:column="73">{
		<comment type="line" pos:line="433" pos:column="17">// "class" &amp; "object" keywords require special handling...</comment>
		<decl_stmt><decl><type><name pos:line="434" pos:column="17">bool</name></type> <name pos:line="434" pos:column="22">ignoreKeyword</name> <init pos:line="434" pos:column="36">= <expr><lit:literal type="boolean" pos:line="434" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="435" pos:column="17">unsigned</name> <name pos:line="435" pos:column="26">int</name></type> <name pos:line="435" pos:column="30">j</name> <init pos:line="435" pos:column="32">= <expr><call><name pos:line="435" pos:column="34">SkipWhiteSpace</name><argument_list pos:line="435" pos:column="48">(<argument><expr><name pos:line="435" pos:column="49">currentPos</name></expr></argument>, <argument><expr><name pos:line="435" pos:column="61">endPos</name></expr></argument>, <argument><expr><name pos:line="435" pos:column="69">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="436" pos:column="17">if <condition pos:line="436" pos:column="20">(<expr><name pos:line="436" pos:column="21">j</name> <op:operator pos:line="436" pos:column="23">&lt;</op:operator> <name pos:line="436" pos:column="25">endPos</name></expr>)</condition><then pos:line="436" pos:column="32"> <block pos:line="436" pos:column="33">{
			<decl_stmt><decl><type><name pos:line="437" pos:column="25">CharacterSet</name></type> <name pos:line="437" pos:column="38">setWordStart</name><argument_list pos:line="437" pos:column="50">(<argument><expr><name><name pos:line="437" pos:column="51">CharacterSet</name><op:operator pos:line="437" pos:column="63">::</op:operator><name pos:line="437" pos:column="65">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="437" pos:column="75">"_"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="438" pos:column="25">CharacterSet</name></type> <name pos:line="438" pos:column="38">setWord</name><argument_list pos:line="438" pos:column="45">(<argument><expr><name><name pos:line="438" pos:column="46">CharacterSet</name><op:operator pos:line="438" pos:column="58">::</op:operator><name pos:line="438" pos:column="60">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="438" pos:column="73">"_"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

			<if pos:line="440" pos:column="25">if <condition pos:line="440" pos:column="28">(<expr><call><name><name pos:line="440" pos:column="29">styler</name><op:operator pos:line="440" pos:column="35">.</op:operator><name pos:line="440" pos:column="36">SafeGetCharAt</name></name><argument_list pos:line="440" pos:column="49">(<argument><expr><name pos:line="440" pos:column="50">j</name></expr></argument>)</argument_list></call> <op:operator pos:line="440" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="440" pos:column="56">';'</lit:literal></expr>)</condition><then pos:line="440" pos:column="60"> <block pos:line="440" pos:column="61">{
				<comment type="line" pos:line="441" pos:column="33">// Handle forward class declarations ("type TMyClass = class;")</comment>
				<comment type="line" pos:line="442" pos:column="33">// and object method declarations ("TNotifyEvent = procedure(Sender: TObject) of object;")</comment>
				<expr_stmt><expr><name pos:line="443" pos:column="33">ignoreKeyword</name> <op:operator pos:line="443" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="443" pos:column="49">true</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="444" pos:column="27">else <if pos:line="444" pos:column="32">if <condition pos:line="444" pos:column="35">(<expr><call><name pos:line="444" pos:column="36">strcmp</name><argument_list pos:line="444" pos:column="42">(<argument><expr><name pos:line="444" pos:column="43">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="444" pos:column="46">"class"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="444" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="444" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="444" pos:column="60"> <block pos:line="444" pos:column="61">{
				<comment type="line" pos:line="445" pos:column="33">// "class" keyword has a few more special cases...</comment>
				<if pos:line="446" pos:column="33">if <condition pos:line="446" pos:column="36">(<expr><call><name><name pos:line="446" pos:column="37">styler</name><op:operator pos:line="446" pos:column="43">.</op:operator><name pos:line="446" pos:column="44">SafeGetCharAt</name></name><argument_list pos:line="446" pos:column="57">(<argument><expr><name pos:line="446" pos:column="58">j</name></expr></argument>)</argument_list></call> <op:operator pos:line="446" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="446" pos:column="64">'('</lit:literal></expr>)</condition><then pos:line="446" pos:column="68"> <block pos:line="446" pos:column="69">{
					<comment type="line" pos:line="447" pos:column="41">// Handle simplified complete class declarations ("type TMyClass = class(TObject);")</comment>
					<expr_stmt><expr><name pos:line="448" pos:column="41">j</name> <op:operator pos:line="448" pos:column="43">=</op:operator> <call><name pos:line="448" pos:column="45">SkipWhiteSpace</name><argument_list pos:line="448" pos:column="59">(<argument><expr><name pos:line="448" pos:column="60">j</name></expr></argument>, <argument><expr><name pos:line="448" pos:column="63">endPos</name></expr></argument>, <argument><expr><name pos:line="448" pos:column="71">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="448" pos:column="79">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="449" pos:column="41">if <condition pos:line="449" pos:column="44">(<expr><name pos:line="449" pos:column="45">j</name> <op:operator pos:line="449" pos:column="47">&lt;</op:operator> <name pos:line="449" pos:column="49">endPos</name> <op:operator pos:line="449" pos:column="56">&amp;&amp;</op:operator> <call><name><name pos:line="449" pos:column="59">styler</name><op:operator pos:line="449" pos:column="65">.</op:operator><name pos:line="449" pos:column="66">SafeGetCharAt</name></name><argument_list pos:line="449" pos:column="79">(<argument><expr><name pos:line="449" pos:column="80">j</name></expr></argument>)</argument_list></call> <op:operator pos:line="449" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="449" pos:column="86">')'</lit:literal></expr>)</condition><then pos:line="449" pos:column="90"> <block pos:line="449" pos:column="91">{
						<expr_stmt><expr><name pos:line="450" pos:column="49">j</name> <op:operator pos:line="450" pos:column="51">=</op:operator> <call><name pos:line="450" pos:column="53">SkipWhiteSpace</name><argument_list pos:line="450" pos:column="67">(<argument><expr><name pos:line="450" pos:column="68">j</name></expr></argument>, <argument><expr><name pos:line="450" pos:column="71">endPos</name></expr></argument>, <argument><expr><name pos:line="450" pos:column="79">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="451" pos:column="49">if <condition pos:line="451" pos:column="52">(<expr><name pos:line="451" pos:column="53">j</name> <op:operator pos:line="451" pos:column="55">&lt;</op:operator> <name pos:line="451" pos:column="57">endPos</name> <op:operator pos:line="451" pos:column="64">&amp;&amp;</op:operator> <call><name><name pos:line="451" pos:column="67">styler</name><op:operator pos:line="451" pos:column="73">.</op:operator><name pos:line="451" pos:column="74">SafeGetCharAt</name></name><argument_list pos:line="451" pos:column="87">(<argument><expr><name pos:line="451" pos:column="88">j</name></expr></argument>)</argument_list></call> <op:operator pos:line="451" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="451" pos:column="94">';'</lit:literal></expr>)</condition><then pos:line="451" pos:column="98"> <block pos:line="451" pos:column="99">{
							<expr_stmt><expr><name pos:line="452" pos:column="57">ignoreKeyword</name> <op:operator pos:line="452" pos:column="71">=</op:operator> <lit:literal type="boolean" pos:line="452" pos:column="73">true</lit:literal></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>
				}</block></then> <else pos:line="455" pos:column="35">else <if pos:line="455" pos:column="40">if <condition pos:line="455" pos:column="43">(<expr><call><name><name pos:line="455" pos:column="44">setWordStart</name><op:operator pos:line="455" pos:column="56">.</op:operator><name pos:line="455" pos:column="57">Contains</name></name><argument_list pos:line="455" pos:column="65">(<argument><expr><call><name><name pos:line="455" pos:column="66">styler</name><op:operator pos:line="455" pos:column="72">.</op:operator><name pos:line="455" pos:column="73">SafeGetCharAt</name></name><argument_list pos:line="455" pos:column="86">(<argument><expr><name pos:line="455" pos:column="87">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="455" pos:column="91"> <block pos:line="455" pos:column="92">{
					<decl_stmt><decl><type><name pos:line="456" pos:column="41">char</name></type> <name><name pos:line="456" pos:column="46">s2</name><index pos:line="456" pos:column="48">[<expr><lit:literal type="number" pos:line="456" pos:column="49">11</lit:literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line" pos:line="456" pos:column="57">// Size of the longest possible keyword + one additional character + null</comment>
					<expr_stmt><expr><call><name pos:line="457" pos:column="41">GetForwardRangeLowered</name><argument_list pos:line="457" pos:column="63">(<argument><expr><name pos:line="457" pos:column="64">j</name></expr></argument>, <argument><expr><name pos:line="457" pos:column="67">setWord</name></expr></argument>, <argument><expr><name pos:line="457" pos:column="76">styler</name></expr></argument>, <argument><expr><name pos:line="457" pos:column="84">s2</name></expr></argument>, <argument><expr><sizeof pos:line="457" pos:column="88">sizeof<argument_list pos:line="457" pos:column="94">(<argument><expr><name pos:line="457" pos:column="95">s2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="459" pos:column="41">if <condition pos:line="459" pos:column="44">(<expr><call><name pos:line="459" pos:column="45">strcmp</name><argument_list pos:line="459" pos:column="51">(<argument><expr><name pos:line="459" pos:column="52">s2</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="459" pos:column="56">"procedure"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="459" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="459" pos:column="72">0</lit:literal> <op:operator pos:line="459" pos:column="74">||</op:operator>
						<call><name pos:line="460" pos:column="49">strcmp</name><argument_list pos:line="460" pos:column="55">(<argument><expr><name pos:line="460" pos:column="56">s2</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="460" pos:column="60">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="460" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="460" pos:column="75">0</lit:literal> <op:operator pos:line="460" pos:column="77">||</op:operator>
						<call><name pos:line="461" pos:column="49">strcmp</name><argument_list pos:line="461" pos:column="55">(<argument><expr><name pos:line="461" pos:column="56">s2</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="461" pos:column="60">"of"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="461" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="461" pos:column="69">0</lit:literal> <op:operator pos:line="461" pos:column="71">||</op:operator>
						<call><name pos:line="462" pos:column="49">strcmp</name><argument_list pos:line="462" pos:column="55">(<argument><expr><name pos:line="462" pos:column="56">s2</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="462" pos:column="60">"var"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="462" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="462" pos:column="70">0</lit:literal> <op:operator pos:line="462" pos:column="72">||</op:operator>
						<call><name pos:line="463" pos:column="49">strcmp</name><argument_list pos:line="463" pos:column="55">(<argument><expr><name pos:line="463" pos:column="56">s2</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="463" pos:column="60">"property"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="463" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="463" pos:column="75">0</lit:literal> <op:operator pos:line="463" pos:column="77">||</op:operator>
						<call><name pos:line="464" pos:column="49">strcmp</name><argument_list pos:line="464" pos:column="55">(<argument><expr><name pos:line="464" pos:column="56">s2</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="464" pos:column="60">"operator"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="464" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="464" pos:column="75">0</lit:literal></expr>)</condition><then pos:line="464" pos:column="77"> <block pos:line="464" pos:column="78">{
						<expr_stmt><expr><name pos:line="465" pos:column="49">ignoreKeyword</name> <op:operator pos:line="465" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="465" pos:column="65">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="470" pos:column="17">if <condition pos:line="470" pos:column="20">(<expr><op:operator pos:line="470" pos:column="21">!</op:operator><name pos:line="470" pos:column="22">ignoreKeyword</name></expr>)</condition><then pos:line="470" pos:column="36"> <block pos:line="470" pos:column="37">{
			<expr_stmt><expr><name pos:line="471" pos:column="25">levelCurrent</name><op:operator pos:line="471" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then> <else pos:line="473" pos:column="11">else <if pos:line="473" pos:column="16">if <condition pos:line="473" pos:column="19">(<expr><call><name pos:line="473" pos:column="20">strcmp</name><argument_list pos:line="473" pos:column="26">(<argument><expr><name pos:line="473" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="473" pos:column="30">"interface"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="473" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="473" pos:column="46">0</lit:literal></expr>)</condition><then pos:line="473" pos:column="48"> <block pos:line="473" pos:column="49">{
		<comment type="line" pos:line="474" pos:column="17">// "interface" keyword requires special handling...</comment>
		<decl_stmt><decl><type><name pos:line="475" pos:column="17">bool</name></type> <name pos:line="475" pos:column="22">ignoreKeyword</name> <init pos:line="475" pos:column="36">= <expr><lit:literal type="boolean" pos:line="475" pos:column="38">true</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="476" pos:column="17">int</name></type> <name pos:line="476" pos:column="21">j</name> <init pos:line="476" pos:column="23">= <expr><name pos:line="476" pos:column="25">lastStart</name> <op:operator pos:line="476" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="476" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="477" pos:column="17">char</name></type> <name pos:line="477" pos:column="22">ch</name> <init pos:line="477" pos:column="25">= <expr><call><name><name pos:line="477" pos:column="27">styler</name><op:operator pos:line="477" pos:column="33">.</op:operator><name pos:line="477" pos:column="34">SafeGetCharAt</name></name><argument_list pos:line="477" pos:column="47">(<argument><expr><name pos:line="477" pos:column="48">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:line="478" pos:column="17">while <condition pos:line="478" pos:column="23">(<expr><op:operator pos:line="478" pos:column="24">(</op:operator><name pos:line="478" pos:column="25">j</name> <op:operator pos:line="478" pos:column="27">&gt;=</op:operator> <name pos:line="478" pos:column="30">startPos</name><op:operator pos:line="478" pos:column="38">)</op:operator> <op:operator pos:line="478" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="478" pos:column="43">(</op:operator><call><name pos:line="478" pos:column="44">IsASpaceOrTab</name><argument_list pos:line="478" pos:column="57">(<argument><expr><name pos:line="478" pos:column="58">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="478" pos:column="62">||</op:operator> <name pos:line="478" pos:column="65">ch</name> <op:operator pos:line="478" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="478" pos:column="71">'\r'</lit:literal> <op:operator pos:line="478" pos:column="76">||</op:operator> <name pos:line="478" pos:column="79">ch</name> <op:operator pos:line="478" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="478" pos:column="85">'\n'</lit:literal> <op:operator pos:line="478" pos:column="90">||</op:operator>
			<call><name pos:line="479" pos:column="25">IsStreamCommentStyle</name><argument_list pos:line="479" pos:column="45">(<argument><expr><call><name><name pos:line="479" pos:column="46">styler</name><op:operator pos:line="479" pos:column="52">.</op:operator><name pos:line="479" pos:column="53">StyleAt</name></name><argument_list pos:line="479" pos:column="60">(<argument><expr><name pos:line="479" pos:column="61">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="479" pos:column="64">)</op:operator></expr>)</condition> <block pos:line="479" pos:column="67">{
			<expr_stmt><expr><name pos:line="480" pos:column="25">j</name><op:operator pos:line="480" pos:column="26">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="481" pos:column="25">ch</name> <op:operator pos:line="481" pos:column="28">=</op:operator> <call><name><name pos:line="481" pos:column="30">styler</name><op:operator pos:line="481" pos:column="36">.</op:operator><name pos:line="481" pos:column="37">SafeGetCharAt</name></name><argument_list pos:line="481" pos:column="50">(<argument><expr><name pos:line="481" pos:column="51">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<if pos:line="483" pos:column="17">if <condition pos:line="483" pos:column="20">(<expr><name pos:line="483" pos:column="21">j</name> <op:operator pos:line="483" pos:column="23">&gt;=</op:operator> <name pos:line="483" pos:column="26">startPos</name> <op:operator pos:line="483" pos:column="35">&amp;&amp;</op:operator> <call><name><name pos:line="483" pos:column="38">styler</name><op:operator pos:line="483" pos:column="44">.</op:operator><name pos:line="483" pos:column="45">SafeGetCharAt</name></name><argument_list pos:line="483" pos:column="58">(<argument><expr><name pos:line="483" pos:column="59">j</name></expr></argument>)</argument_list></call> <op:operator pos:line="483" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="483" pos:column="65">'='</lit:literal></expr>)</condition><then pos:line="483" pos:column="69"> <block pos:line="483" pos:column="70">{
			<expr_stmt><expr><name pos:line="484" pos:column="25">ignoreKeyword</name> <op:operator pos:line="484" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="484" pos:column="41">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="486" pos:column="17">if <condition pos:line="486" pos:column="20">(<expr><op:operator pos:line="486" pos:column="21">!</op:operator><name pos:line="486" pos:column="22">ignoreKeyword</name></expr>)</condition><then pos:line="486" pos:column="36"> <block pos:line="486" pos:column="37">{
			<expr_stmt><expr><name pos:line="487" pos:column="25">levelCurrent</name><op:operator pos:line="487" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then> <else pos:line="489" pos:column="11">else <if pos:line="489" pos:column="16">if <condition pos:line="489" pos:column="19">(<expr><call><name pos:line="489" pos:column="20">strcmp</name><argument_list pos:line="489" pos:column="26">(<argument><expr><name pos:line="489" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="489" pos:column="30">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="489" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="489" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="489" pos:column="42"> <block pos:line="489" pos:column="43">{
		<expr_stmt><expr><name pos:line="490" pos:column="17">lineFoldStateCurrent</name> <op:operator pos:line="490" pos:column="38">&amp;=</op:operator> <op:operator pos:line="490" pos:column="41">~</op:operator><name pos:line="490" pos:column="42">stateFoldInRecord</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="491" pos:column="17">levelCurrent</name><op:operator pos:line="491" pos:column="29">--</op:operator></expr>;</expr_stmt>
		<if pos:line="492" pos:column="17">if <condition pos:line="492" pos:column="20">(<expr><name pos:line="492" pos:column="21">levelCurrent</name> <op:operator pos:line="492" pos:column="34">&lt;</op:operator> <name pos:line="492" pos:column="36">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="492" pos:column="53"> <block pos:line="492" pos:column="54">{
			<expr_stmt><expr><name pos:line="493" pos:column="25">levelCurrent</name> <op:operator pos:line="493" pos:column="38">=</op:operator> <name pos:line="493" pos:column="40">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if></else></if></else></if></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="498" pos:column="1">static</specifier> <name pos:line="498" pos:column="8">void</name></type> <name pos:line="498" pos:column="13">FoldPascalDoc</name><parameter_list pos:line="498" pos:column="26">(<param><decl><type><name pos:line="498" pos:column="27">unsigned</name> <name pos:line="498" pos:column="36">int</name></type> <name pos:line="498" pos:column="40">startPos</name></decl></param>, <param><decl><type><name pos:line="498" pos:column="50">int</name></type> <name pos:line="498" pos:column="54">length</name></decl></param>, <param><decl><type><name pos:line="498" pos:column="62">int</name></type> <name pos:line="498" pos:column="66">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="498" pos:column="77">WordList</name> <type:modifier pos:line="498" pos:column="86">*</type:modifier><index pos:line="498" pos:column="87">[]</index></name></type></decl></param>,
		<param><decl><type><name pos:line="499" pos:column="17">Accessor</name> <type:modifier pos:line="499" pos:column="26">&amp;</type:modifier></type><name pos:line="499" pos:column="27">styler</name></decl></param>)</parameter_list> <block pos:line="499" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="500" pos:column="9">bool</name></type> <name pos:line="500" pos:column="14">foldComment</name> <init pos:line="500" pos:column="26">= <expr><call><name><name pos:line="500" pos:column="28">styler</name><op:operator pos:line="500" pos:column="34">.</op:operator><name pos:line="500" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="500" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="500" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="500" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="500" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="501" pos:column="9">bool</name></type> <name pos:line="501" pos:column="14">foldPreprocessor</name> <init pos:line="501" pos:column="31">= <expr><call><name><name pos:line="501" pos:column="33">styler</name><op:operator pos:line="501" pos:column="39">.</op:operator><name pos:line="501" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="501" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="501" pos:column="55">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="501" pos:column="76">!=</op:operator> <lit:literal type="number" pos:line="501" pos:column="79">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="502" pos:column="9">bool</name></type> <name pos:line="502" pos:column="14">foldCompact</name> <init pos:line="502" pos:column="26">= <expr><call><name><name pos:line="502" pos:column="28">styler</name><op:operator pos:line="502" pos:column="34">.</op:operator><name pos:line="502" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="502" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="502" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="502" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="502" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="502" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="503" pos:column="9">unsigned</name> <name pos:line="503" pos:column="18">int</name></type> <name pos:line="503" pos:column="22">endPos</name> <init pos:line="503" pos:column="29">= <expr><name pos:line="503" pos:column="31">startPos</name> <op:operator pos:line="503" pos:column="40">+</op:operator> <name pos:line="503" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="504" pos:column="9">int</name></type> <name pos:line="504" pos:column="13">visibleChars</name> <init pos:line="504" pos:column="26">= <expr><lit:literal type="number" pos:line="504" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="505" pos:column="9">int</name></type> <name pos:line="505" pos:column="13">lineCurrent</name> <init pos:line="505" pos:column="25">= <expr><call><name><name pos:line="505" pos:column="27">styler</name><op:operator pos:line="505" pos:column="33">.</op:operator><name pos:line="505" pos:column="34">GetLine</name></name><argument_list pos:line="505" pos:column="41">(<argument><expr><name pos:line="505" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="506" pos:column="9">int</name></type> <name pos:line="506" pos:column="13">levelPrev</name> <init pos:line="506" pos:column="23">= <expr><call><name><name pos:line="506" pos:column="25">styler</name><op:operator pos:line="506" pos:column="31">.</op:operator><name pos:line="506" pos:column="32">LevelAt</name></name><argument_list pos:line="506" pos:column="39">(<argument><expr><name pos:line="506" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="506" pos:column="53">&amp;</op:operator> <name pos:line="506" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="507" pos:column="9">int</name></type> <name pos:line="507" pos:column="13">levelCurrent</name> <init pos:line="507" pos:column="26">= <expr><name pos:line="507" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="508" pos:column="9">int</name></type> <name pos:line="508" pos:column="13">lineFoldStateCurrent</name> <init pos:line="508" pos:column="34">= <expr><name pos:line="508" pos:column="36">lineCurrent</name> <op:operator pos:line="508" pos:column="48">&gt;</op:operator> <lit:literal type="number" pos:line="508" pos:column="50">0</lit:literal> <op:operator pos:line="508" pos:column="52">?</op:operator> <call><name><name pos:line="508" pos:column="54">styler</name><op:operator pos:line="508" pos:column="60">.</op:operator><name pos:line="508" pos:column="61">GetLineState</name></name><argument_list pos:line="508" pos:column="73">(<argument><expr><name pos:line="508" pos:column="74">lineCurrent</name> <op:operator pos:line="508" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="508" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="508" pos:column="91">&amp;</op:operator> <name pos:line="508" pos:column="93">stateFoldMaskAll</name> <op:operator pos:line="508" pos:column="110">:</op:operator> <lit:literal type="number" pos:line="508" pos:column="112">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="509" pos:column="9">char</name></type> <name pos:line="509" pos:column="14">chNext</name> <init pos:line="509" pos:column="21">= <expr><name><name pos:line="509" pos:column="23">styler</name><index pos:line="509" pos:column="29">[<expr><name pos:line="509" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="510" pos:column="9">int</name></type> <name pos:line="510" pos:column="13">styleNext</name> <init pos:line="510" pos:column="23">= <expr><call><name><name pos:line="510" pos:column="25">styler</name><op:operator pos:line="510" pos:column="31">.</op:operator><name pos:line="510" pos:column="32">StyleAt</name></name><argument_list pos:line="510" pos:column="39">(<argument><expr><name pos:line="510" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="511" pos:column="9">int</name></type> <name pos:line="511" pos:column="13">style</name> <init pos:line="511" pos:column="19">= <expr><name pos:line="511" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="513" pos:column="9">int</name></type> <name pos:line="513" pos:column="13">lastStart</name> <init pos:line="513" pos:column="23">= <expr><lit:literal type="number" pos:line="513" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="514" pos:column="9">CharacterSet</name></type> <name pos:line="514" pos:column="22">setWord</name><argument_list pos:line="514" pos:column="29">(<argument><expr><name><name pos:line="514" pos:column="30">CharacterSet</name><op:operator pos:line="514" pos:column="42">::</op:operator><name pos:line="514" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="514" pos:column="57">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="514" pos:column="62">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="514" pos:column="68">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<for pos:line="516" pos:column="9">for (<init><decl><type><name pos:line="516" pos:column="14">unsigned</name> <name pos:line="516" pos:column="23">int</name></type> <name pos:line="516" pos:column="27">i</name> <init pos:line="516" pos:column="29">= <expr><name pos:line="516" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="516" pos:column="41">i</name> <op:operator pos:line="516" pos:column="43">&lt;</op:operator> <name pos:line="516" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="516" pos:column="53">i</name><op:operator pos:line="516" pos:column="54">++</op:operator></expr></incr>) <block pos:line="516" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="517" pos:column="17">char</name></type> <name pos:line="517" pos:column="22">ch</name> <init pos:line="517" pos:column="25">= <expr><name pos:line="517" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="518" pos:column="17">chNext</name> <op:operator pos:line="518" pos:column="24">=</op:operator> <call><name><name pos:line="518" pos:column="26">styler</name><op:operator pos:line="518" pos:column="32">.</op:operator><name pos:line="518" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="518" pos:column="46">(<argument><expr><name pos:line="518" pos:column="47">i</name> <op:operator pos:line="518" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="518" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="519" pos:column="17">int</name></type> <name pos:line="519" pos:column="21">stylePrev</name> <init pos:line="519" pos:column="31">= <expr><name pos:line="519" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="520" pos:column="17">style</name> <op:operator pos:line="520" pos:column="23">=</op:operator> <name pos:line="520" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="521" pos:column="17">styleNext</name> <op:operator pos:line="521" pos:column="27">=</op:operator> <call><name><name pos:line="521" pos:column="29">styler</name><op:operator pos:line="521" pos:column="35">.</op:operator><name pos:line="521" pos:column="36">StyleAt</name></name><argument_list pos:line="521" pos:column="43">(<argument><expr><name pos:line="521" pos:column="44">i</name> <op:operator pos:line="521" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="521" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="522" pos:column="17">bool</name></type> <name pos:line="522" pos:column="22">atEOL</name> <init pos:line="522" pos:column="28">= <expr><op:operator pos:line="522" pos:column="30">(</op:operator><name pos:line="522" pos:column="31">ch</name> <op:operator pos:line="522" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="522" pos:column="37">'\r'</lit:literal> <op:operator pos:line="522" pos:column="42">&amp;&amp;</op:operator> <name pos:line="522" pos:column="45">chNext</name> <op:operator pos:line="522" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="522" pos:column="55">'\n'</lit:literal><op:operator pos:line="522" pos:column="59">)</op:operator> <op:operator pos:line="522" pos:column="61">||</op:operator> <op:operator pos:line="522" pos:column="64">(</op:operator><name pos:line="522" pos:column="65">ch</name> <op:operator pos:line="522" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="522" pos:column="71">'\n'</lit:literal><op:operator pos:line="522" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="524" pos:column="17">if <condition pos:line="524" pos:column="20">(<expr><name pos:line="524" pos:column="21">foldComment</name> <op:operator pos:line="524" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="524" pos:column="36">IsStreamCommentStyle</name><argument_list pos:line="524" pos:column="56">(<argument><expr><name pos:line="524" pos:column="57">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="524" pos:column="64"> <block pos:line="524" pos:column="65">{
			<if pos:line="525" pos:column="25">if <condition pos:line="525" pos:column="28">(<expr><op:operator pos:line="525" pos:column="29">!</op:operator><call><name pos:line="525" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="525" pos:column="50">(<argument><expr><name pos:line="525" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="525" pos:column="62"> <block pos:line="525" pos:column="63">{
				<expr_stmt><expr><name pos:line="526" pos:column="33">levelCurrent</name><op:operator pos:line="526" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="527" pos:column="27">else <if pos:line="527" pos:column="32">if <condition pos:line="527" pos:column="35">(<expr><op:operator pos:line="527" pos:column="36">!</op:operator><call><name pos:line="527" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="527" pos:column="57">(<argument><expr><name pos:line="527" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="527" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="527" pos:column="72">!</op:operator><name pos:line="527" pos:column="73">atEOL</name></expr>)</condition><then pos:line="527" pos:column="79"> <block pos:line="527" pos:column="80">{
				<comment type="line" pos:line="528" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="529" pos:column="33">levelCurrent</name><op:operator pos:line="529" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="532" pos:column="17">if <condition pos:line="532" pos:column="20">(<expr><name pos:line="532" pos:column="21">foldComment</name> <op:operator pos:line="532" pos:column="33">&amp;&amp;</op:operator> <name pos:line="532" pos:column="36">atEOL</name> <op:operator pos:line="532" pos:column="42">&amp;&amp;</op:operator> <call><name pos:line="532" pos:column="45">IsCommentLine</name><argument_list pos:line="532" pos:column="58">(<argument><expr><name pos:line="532" pos:column="59">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="532" pos:column="72">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="532" pos:column="80">
		<block pos:line="533" pos:column="17">{
			<if pos:line="534" pos:column="25">if <condition pos:line="534" pos:column="28">(<expr><op:operator pos:line="534" pos:column="29">!</op:operator><call><name pos:line="534" pos:column="30">IsCommentLine</name><argument_list pos:line="534" pos:column="43">(<argument><expr><name pos:line="534" pos:column="44">lineCurrent</name> <op:operator pos:line="534" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="534" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="534" pos:column="61">styler</name></expr></argument>)</argument_list></call>
			    <op:operator pos:line="535" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="535" pos:column="32">IsCommentLine</name><argument_list pos:line="535" pos:column="45">(<argument><expr><name pos:line="535" pos:column="46">lineCurrent</name> <op:operator pos:line="535" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="535" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="535" pos:column="63">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="535" pos:column="71">
				<expr_stmt><expr><name pos:line="536" pos:column="33">levelCurrent</name><op:operator pos:line="536" pos:column="45">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="537" pos:column="25">else <if pos:line="537" pos:column="30">if <condition pos:line="537" pos:column="33">(<expr><call><name pos:line="537" pos:column="34">IsCommentLine</name><argument_list pos:line="537" pos:column="47">(<argument><expr><name pos:line="537" pos:column="48">lineCurrent</name> <op:operator pos:line="537" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="537" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="537" pos:column="65">styler</name></expr></argument>)</argument_list></call>
			         <op:operator pos:line="538" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="538" pos:column="37">!</op:operator><call><name pos:line="538" pos:column="38">IsCommentLine</name><argument_list pos:line="538" pos:column="51">(<argument><expr><name pos:line="538" pos:column="52">lineCurrent</name><op:operator pos:line="538" pos:column="63">+</op:operator><lit:literal type="number" pos:line="538" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="538" pos:column="67">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="538" pos:column="75">
				<expr_stmt><expr><name pos:line="539" pos:column="33">levelCurrent</name><op:operator pos:line="539" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if></else></if>
		}</block></then></if>
		<if pos:line="541" pos:column="17">if <condition pos:line="541" pos:column="20">(<expr><name pos:line="541" pos:column="21">foldPreprocessor</name></expr>)</condition><then pos:line="541" pos:column="38"> <block pos:line="541" pos:column="39">{
			<if pos:line="542" pos:column="25">if <condition pos:line="542" pos:column="28">(<expr><name pos:line="542" pos:column="29">style</name> <op:operator pos:line="542" pos:column="35">==</op:operator> <name pos:line="542" pos:column="38">SCE_PAS_PREPROCESSOR</name> <op:operator pos:line="542" pos:column="59">&amp;&amp;</op:operator> <name pos:line="542" pos:column="62">ch</name> <op:operator pos:line="542" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="542" pos:column="68">'{'</lit:literal> <op:operator pos:line="542" pos:column="72">&amp;&amp;</op:operator> <name pos:line="542" pos:column="75">chNext</name> <op:operator pos:line="542" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="542" pos:column="85">'$'</lit:literal></expr>)</condition><then pos:line="542" pos:column="89"> <block pos:line="542" pos:column="90">{
				<expr_stmt><expr><call><name pos:line="543" pos:column="33">ClassifyPascalPreprocessorFoldPoint</name><argument_list pos:line="543" pos:column="68">(<argument><expr><name pos:line="543" pos:column="69">levelCurrent</name></expr></argument>, <argument><expr><name pos:line="543" pos:column="83">lineFoldStateCurrent</name></expr></argument>, <argument><expr><name pos:line="543" pos:column="105">i</name> <op:operator pos:line="543" pos:column="107">+</op:operator> <lit:literal type="number" pos:line="543" pos:column="109">2</lit:literal></expr></argument>, <argument><expr><name pos:line="543" pos:column="112">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="544" pos:column="27">else <if pos:line="544" pos:column="32">if <condition pos:line="544" pos:column="35">(<expr><name pos:line="544" pos:column="36">style</name> <op:operator pos:line="544" pos:column="42">==</op:operator> <name pos:line="544" pos:column="45">SCE_PAS_PREPROCESSOR2</name> <op:operator pos:line="544" pos:column="67">&amp;&amp;</op:operator> <name pos:line="544" pos:column="70">ch</name> <op:operator pos:line="544" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="544" pos:column="76">'('</lit:literal> <op:operator pos:line="544" pos:column="80">&amp;&amp;</op:operator> <name pos:line="544" pos:column="83">chNext</name> <op:operator pos:line="544" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="544" pos:column="93">'*'</lit:literal>
			           <op:operator pos:line="545" pos:column="36">&amp;&amp;</op:operator> <call><name><name pos:line="545" pos:column="39">styler</name><op:operator pos:line="545" pos:column="45">.</op:operator><name pos:line="545" pos:column="46">SafeGetCharAt</name></name><argument_list pos:line="545" pos:column="59">(<argument><expr><name pos:line="545" pos:column="60">i</name> <op:operator pos:line="545" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="545" pos:column="64">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="545" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="545" pos:column="70">'$'</lit:literal></expr>)</condition><then pos:line="545" pos:column="74"> <block pos:line="545" pos:column="75">{
				<expr_stmt><expr><call><name pos:line="546" pos:column="33">ClassifyPascalPreprocessorFoldPoint</name><argument_list pos:line="546" pos:column="68">(<argument><expr><name pos:line="546" pos:column="69">levelCurrent</name></expr></argument>, <argument><expr><name pos:line="546" pos:column="83">lineFoldStateCurrent</name></expr></argument>, <argument><expr><name pos:line="546" pos:column="105">i</name> <op:operator pos:line="546" pos:column="107">+</op:operator> <lit:literal type="number" pos:line="546" pos:column="109">3</lit:literal></expr></argument>, <argument><expr><name pos:line="546" pos:column="112">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>

		<if pos:line="550" pos:column="17">if <condition pos:line="550" pos:column="20">(<expr><name pos:line="550" pos:column="21">stylePrev</name> <op:operator pos:line="550" pos:column="31">!=</op:operator> <name pos:line="550" pos:column="34">SCE_PAS_WORD</name> <op:operator pos:line="550" pos:column="47">&amp;&amp;</op:operator> <name pos:line="550" pos:column="50">style</name> <op:operator pos:line="550" pos:column="56">==</op:operator> <name pos:line="550" pos:column="59">SCE_PAS_WORD</name></expr>)</condition><then pos:line="550" pos:column="72">
		<block pos:line="551" pos:column="17">{
			<comment type="line" pos:line="552" pos:column="25">// Store last word start point.</comment>
			<expr_stmt><expr><name pos:line="553" pos:column="25">lastStart</name> <op:operator pos:line="553" pos:column="35">=</op:operator> <name pos:line="553" pos:column="37">i</name></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="555" pos:column="17">if <condition pos:line="555" pos:column="20">(<expr><name pos:line="555" pos:column="21">stylePrev</name> <op:operator pos:line="555" pos:column="31">==</op:operator> <name pos:line="555" pos:column="34">SCE_PAS_WORD</name> <op:operator pos:line="555" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="555" pos:column="50">!</op:operator><op:operator pos:line="555" pos:column="51">(</op:operator><name pos:line="555" pos:column="52">lineFoldStateCurrent</name> <op:operator pos:line="555" pos:column="73">&amp;</op:operator> <name pos:line="555" pos:column="75">stateFoldInPreprocessor</name><op:operator pos:line="555" pos:column="98">)</op:operator></expr>)</condition><then pos:line="555" pos:column="100"> <block pos:line="555" pos:column="101">{
			<if pos:line="556" pos:column="25">if<condition pos:line="556" pos:column="27">(<expr><call><name><name pos:line="556" pos:column="28">setWord</name><op:operator pos:line="556" pos:column="35">.</op:operator><name pos:line="556" pos:column="36">Contains</name></name><argument_list pos:line="556" pos:column="44">(<argument><expr><name pos:line="556" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="556" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="556" pos:column="52">!</op:operator><call><name><name pos:line="556" pos:column="53">setWord</name><op:operator pos:line="556" pos:column="60">.</op:operator><name pos:line="556" pos:column="61">Contains</name></name><argument_list pos:line="556" pos:column="69">(<argument><expr><name pos:line="556" pos:column="70">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="556" pos:column="78"> <block pos:line="556" pos:column="79">{
				<expr_stmt><expr><call><name pos:line="557" pos:column="33">ClassifyPascalWordFoldPoint</name><argument_list pos:line="557" pos:column="60">(<argument><expr><name pos:line="557" pos:column="61">levelCurrent</name></expr></argument>, <argument><expr><name pos:line="557" pos:column="75">lineFoldStateCurrent</name></expr></argument>, <argument><expr><name pos:line="557" pos:column="97">startPos</name></expr></argument>, <argument><expr><name pos:line="557" pos:column="107">endPos</name></expr></argument>, <argument><expr><name pos:line="557" pos:column="115">lastStart</name></expr></argument>, <argument><expr><name pos:line="557" pos:column="126">i</name></expr></argument>, <argument><expr><name pos:line="557" pos:column="129">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="561" pos:column="17">if <condition pos:line="561" pos:column="20">(<expr><op:operator pos:line="561" pos:column="21">!</op:operator><call><name pos:line="561" pos:column="22">IsASpace</name><argument_list pos:line="561" pos:column="30">(<argument><expr><name pos:line="561" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="561" pos:column="35">
			<expr_stmt><expr><name pos:line="562" pos:column="25">visibleChars</name><op:operator pos:line="562" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>

		<if pos:line="564" pos:column="17">if <condition pos:line="564" pos:column="20">(<expr><name pos:line="564" pos:column="21">atEOL</name></expr>)</condition><then pos:line="564" pos:column="27"> <block pos:line="564" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="565" pos:column="25">int</name></type> <name pos:line="565" pos:column="29">lev</name> <init pos:line="565" pos:column="33">= <expr><name pos:line="565" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="566" pos:column="25">if <condition pos:line="566" pos:column="28">(<expr><name pos:line="566" pos:column="29">visibleChars</name> <op:operator pos:line="566" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="566" pos:column="45">0</lit:literal> <op:operator pos:line="566" pos:column="47">&amp;&amp;</op:operator> <name pos:line="566" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="566" pos:column="62">
				<expr_stmt><expr><name pos:line="567" pos:column="33">lev</name> <op:operator pos:line="567" pos:column="37">|=</op:operator> <name pos:line="567" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="568" pos:column="25">if <condition pos:line="568" pos:column="28">(<expr><op:operator pos:line="568" pos:column="29">(</op:operator><name pos:line="568" pos:column="30">levelCurrent</name> <op:operator pos:line="568" pos:column="43">&gt;</op:operator> <name pos:line="568" pos:column="45">levelPrev</name><op:operator pos:line="568" pos:column="54">)</op:operator> <op:operator pos:line="568" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="568" pos:column="59">(</op:operator><name pos:line="568" pos:column="60">visibleChars</name> <op:operator pos:line="568" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="568" pos:column="75">0</lit:literal><op:operator pos:line="568" pos:column="76">)</op:operator></expr>)</condition><then pos:line="568" pos:column="78">
				<expr_stmt><expr><name pos:line="569" pos:column="33">lev</name> <op:operator pos:line="569" pos:column="37">|=</op:operator> <name pos:line="569" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="570" pos:column="25">if <condition pos:line="570" pos:column="28">(<expr><name pos:line="570" pos:column="29">lev</name> <op:operator pos:line="570" pos:column="33">!=</op:operator> <call><name><name pos:line="570" pos:column="36">styler</name><op:operator pos:line="570" pos:column="42">.</op:operator><name pos:line="570" pos:column="43">LevelAt</name></name><argument_list pos:line="570" pos:column="50">(<argument><expr><name pos:line="570" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="570" pos:column="64"> <block pos:line="570" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="571" pos:column="33">styler</name><op:operator pos:line="571" pos:column="39">.</op:operator><name pos:line="571" pos:column="40">SetLevel</name></name><argument_list pos:line="571" pos:column="48">(<argument><expr><name pos:line="571" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="571" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="573" pos:column="25">int</name></type> <name pos:line="573" pos:column="29">newLineState</name> <init pos:line="573" pos:column="42">= <expr><op:operator pos:line="573" pos:column="44">(</op:operator><call><name><name pos:line="573" pos:column="45">styler</name><op:operator pos:line="573" pos:column="51">.</op:operator><name pos:line="573" pos:column="52">GetLineState</name></name><argument_list pos:line="573" pos:column="64">(<argument><expr><name pos:line="573" pos:column="65">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="573" pos:column="78">&amp;</op:operator> <op:operator pos:line="573" pos:column="80">~</op:operator><name pos:line="573" pos:column="81">stateFoldMaskAll</name><op:operator pos:line="573" pos:column="97">)</op:operator> <op:operator pos:line="573" pos:column="99">|</op:operator> <name pos:line="573" pos:column="101">lineFoldStateCurrent</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="574" pos:column="25">styler</name><op:operator pos:line="574" pos:column="31">.</op:operator><name pos:line="574" pos:column="32">SetLineState</name></name><argument_list pos:line="574" pos:column="44">(<argument><expr><name pos:line="574" pos:column="45">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="574" pos:column="58">newLineState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="575" pos:column="25">lineCurrent</name><op:operator pos:line="575" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="576" pos:column="25">levelPrev</name> <op:operator pos:line="576" pos:column="35">=</op:operator> <name pos:line="576" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="577" pos:column="25">visibleChars</name> <op:operator pos:line="577" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="577" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<comment type="line" pos:line="581" pos:column="9">// If we didn't reach the EOL in previous loop, store line level and whitespace information.</comment>
	<comment type="line" pos:line="582" pos:column="9">// The rest will be filled in later...</comment>
	<decl_stmt><decl><type><name pos:line="583" pos:column="9">int</name></type> <name pos:line="583" pos:column="13">lev</name> <init pos:line="583" pos:column="17">= <expr><name pos:line="583" pos:column="19">levelPrev</name></expr></init></decl>;</decl_stmt>
	<if pos:line="584" pos:column="9">if <condition pos:line="584" pos:column="12">(<expr><name pos:line="584" pos:column="13">visibleChars</name> <op:operator pos:line="584" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="584" pos:column="29">0</lit:literal> <op:operator pos:line="584" pos:column="31">&amp;&amp;</op:operator> <name pos:line="584" pos:column="34">foldCompact</name></expr>)</condition><then pos:line="584" pos:column="46">
		<expr_stmt><expr><name pos:line="585" pos:column="17">lev</name> <op:operator pos:line="585" pos:column="21">|=</op:operator> <name pos:line="585" pos:column="24">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name><name pos:line="586" pos:column="9">styler</name><op:operator pos:line="586" pos:column="15">.</op:operator><name pos:line="586" pos:column="16">SetLevel</name></name><argument_list pos:line="586" pos:column="24">(<argument><expr><name pos:line="586" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="586" pos:column="38">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="589" pos:column="1">static</specifier> <specifier pos:line="589" pos:column="8">const</specifier> <name pos:line="589" pos:column="14">char</name> <type:modifier pos:line="589" pos:column="19">*</type:modifier> <specifier pos:line="589" pos:column="21">const</specifier></type> <name><name pos:line="589" pos:column="27">pascalWordListDesc</name><index pos:line="589" pos:column="45">[]</index></name> <init pos:line="589" pos:column="48">= <expr><block pos:line="589" pos:column="50">{
	<expr><lit:literal type="string" pos:line="590" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="591" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="594" pos:column="1">LexerModule</name></type> <name pos:line="594" pos:column="13">lmPascal</name><argument_list pos:line="594" pos:column="21">(<argument><expr><name pos:line="594" pos:column="22">SCLEX_PASCAL</name></expr></argument>, <argument><expr><name pos:line="594" pos:column="36">ColourisePascalDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="594" pos:column="56">"pascal"</lit:literal></expr></argument>, <argument><expr><name pos:line="594" pos:column="66">FoldPascalDoc</name></expr></argument>, <argument><expr><name pos:line="594" pos:column="81">pascalWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
