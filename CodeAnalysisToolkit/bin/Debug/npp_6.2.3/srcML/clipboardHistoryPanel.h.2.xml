<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\ClipboardHistory\clipboardHistoryPanel.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">CLIPBOARDHISTORYPANEL_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">CLIPBOARDHISTORYPANEL_H</name></cpp:macro></cpp:define>

<comment type="line" pos:line="32" pos:column="1">//#include &lt;windows.h&gt;</comment>
<cpp:ifndef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifndef</cpp:directive> <name pos:line="33" pos:column="9">DOCKINGDLGINTERFACE_H</name></cpp:ifndef>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"DockingDlgInterface.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="35" pos:column="8">//DOCKINGDLGINTERFACE_H</comment>

<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"clipboardHistoryPanel_rc.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file pos:line="38" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>

<typedef pos:line="40" pos:column="1">typedef <type><name><name pos:line="40" pos:column="9">std</name><op:operator pos:line="40" pos:column="12">::</op:operator><name><name pos:line="40" pos:column="14">vector</name><argument_list pos:line="40" pos:column="20">&lt;<argument><expr><name pos:line="40" pos:column="21">unsigned</name> <name pos:line="40" pos:column="30">char</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="40" pos:column="36">ClipboardData</name>;</typedef>

<class_decl pos:line="42" pos:column="1">class <name pos:line="42" pos:column="7">ScintillaEditView</name>;</class_decl>

<class pos:line="44" pos:column="1">class <name pos:line="44" pos:column="7">ByteArray</name> <block pos:line="44" pos:column="17">{<private type="default" pos:line="44" pos:column="18">
</private><public pos:line="45" pos:column="1">public:
	<constructor><name pos:line="46" pos:column="9">ByteArray</name><parameter_list pos:line="46" pos:column="18">()</parameter_list><member_list pos:line="46" pos:column="20">:<call><name pos:line="46" pos:column="21">_pBytes</name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="34">,</op:operator> <call><name pos:line="46" pos:column="36">_length</name><argument_list pos:line="46" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="46" pos:column="47">{}</block></constructor><empty_stmt pos:line="46" pos:column="49">;</empty_stmt>
	<constructor_decl><name pos:line="47" pos:column="9">ByteArray</name><parameter_list pos:line="47" pos:column="18">(<param><decl><type><name pos:line="47" pos:column="19">ClipboardData</name></type> <name pos:line="47" pos:column="33">cd</name></decl></param>)</parameter_list>;</constructor_decl>
	
	<destructor><name pos:line="49" pos:column="9">~<name pos:line="49" pos:column="10">ByteArray</name></name><parameter_list pos:line="49" pos:column="19">()</parameter_list> <block pos:line="49" pos:column="22">{
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">_pBytes</name></expr>)</condition><then pos:line="50" pos:column="29">
			<expr_stmt><expr><op:operator pos:line="51" pos:column="25">delete</op:operator> <index pos:line="51" pos:column="32">[]</index> <name pos:line="51" pos:column="35">_pBytes</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="52" pos:column="17">_pBytes</name> <op:operator pos:line="52" pos:column="25">=</op:operator> <name pos:line="52" pos:column="27">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">_length</name> <op:operator pos:line="53" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="53" pos:column="27">0</lit:literal></expr>;</expr_stmt>
	}</block></destructor><empty_stmt pos:line="54" pos:column="10">;</empty_stmt>
	<function><type><specifier pos:line="55" pos:column="9">const</specifier> <name pos:line="55" pos:column="15">unsigned</name> <name pos:line="55" pos:column="24">char</name> <type:modifier pos:line="55" pos:column="29">*</type:modifier></type> <name pos:line="55" pos:column="31">getPointer</name><parameter_list pos:line="55" pos:column="41">()</parameter_list> <specifier pos:line="55" pos:column="44">const</specifier> <block pos:line="55" pos:column="50">{<return pos:line="55" pos:column="51">return <expr><name pos:line="55" pos:column="58">_pBytes</name></expr>;</return>}</block></function><empty_stmt pos:line="55" pos:column="67">;</empty_stmt>
	<function><type><name pos:line="56" pos:column="9">size_t</name></type> <name pos:line="56" pos:column="16">getLength</name><parameter_list pos:line="56" pos:column="25">()</parameter_list> <specifier pos:line="56" pos:column="28">const</specifier> <block pos:line="56" pos:column="34">{<return pos:line="56" pos:column="35">return <expr><name pos:line="56" pos:column="42">_length</name></expr>;</return>}</block></function><empty_stmt pos:line="56" pos:column="51">;</empty_stmt>
</public><protected pos:line="57" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">unsigned</name> <name pos:line="58" pos:column="18">char</name> <type:modifier pos:line="58" pos:column="23">*</type:modifier></type><name pos:line="58" pos:column="24">_pBytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">size_t</name></type> <name pos:line="59" pos:column="16">_length</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<class pos:line="62" pos:column="1">class <name pos:line="62" pos:column="7">StringArray</name> <super pos:line="62" pos:column="19">: <specifier pos:line="62" pos:column="21">public</specifier> <name pos:line="62" pos:column="28">ByteArray</name></super> <block pos:line="62" pos:column="38">{<private type="default" pos:line="62" pos:column="39">
</private><public pos:line="63" pos:column="1">public:
	<constructor_decl><name pos:line="64" pos:column="9">StringArray</name><parameter_list pos:line="64" pos:column="20">(<param><decl><type><name pos:line="64" pos:column="21">ClipboardData</name></type> <name pos:line="64" pos:column="35">cd</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="39">size_t</name></type> <name pos:line="64" pos:column="46">maxLen</name></decl></param>)</parameter_list>;</constructor_decl>
</public>}</block>;</class>

<class pos:line="67" pos:column="1">class <name pos:line="67" pos:column="7">ClipboardHistoryPanel</name> <super pos:line="67" pos:column="29">: <specifier pos:line="67" pos:column="31">public</specifier> <name pos:line="67" pos:column="38">DockingDlgInterface</name></super> <block pos:line="67" pos:column="58">{<private type="default" pos:line="67" pos:column="59">
</private><public pos:line="68" pos:column="1">public:
	<constructor><name pos:line="69" pos:column="9">ClipboardHistoryPanel</name><parameter_list pos:line="69" pos:column="30">()</parameter_list><member_list pos:line="69" pos:column="32">: <call><name pos:line="69" pos:column="34">DockingDlgInterface</name><argument_list pos:line="69" pos:column="53">(<argument><expr><name pos:line="69" pos:column="54">IDD_CLIPBOARDHISTORY_PANEL</name></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="81">,</op:operator> <call><name pos:line="69" pos:column="83">_ppEditView</name><argument_list pos:line="69" pos:column="94">(<argument><expr><name pos:line="69" pos:column="95">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="100">,</op:operator> <call><name pos:line="69" pos:column="102">_hwndNextCbViewer</name><argument_list pos:line="69" pos:column="119">(<argument><expr><name pos:line="69" pos:column="120">NULL</name></expr></argument>)</argument_list></call> </member_list><block pos:line="69" pos:column="126">{}</block></constructor><empty_stmt pos:line="69" pos:column="128">;</empty_stmt>

	<function><type><name pos:line="71" pos:column="9">void</name></type> <name pos:line="71" pos:column="14">init</name><parameter_list pos:line="71" pos:column="18">(<param><decl><type><name pos:line="71" pos:column="19">HINSTANCE</name></type> <name pos:line="71" pos:column="29">hInst</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="36">HWND</name></type> <name pos:line="71" pos:column="41">hPere</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="48">ScintillaEditView</name> <type:modifier pos:line="71" pos:column="66">*</type:modifier><type:modifier pos:line="71" pos:column="67">*</type:modifier></type><name pos:line="71" pos:column="68">ppEditView</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="80">{
		<expr_stmt><expr><call><name><name pos:line="72" pos:column="17">DockingDlgInterface</name><op:operator pos:line="72" pos:column="36">::</op:operator><name pos:line="72" pos:column="38">init</name></name><argument_list pos:line="72" pos:column="42">(<argument><expr><name pos:line="72" pos:column="43">hInst</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="50">hPere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="73" pos:column="17">_ppEditView</name> <op:operator pos:line="73" pos:column="29">=</op:operator> <name pos:line="73" pos:column="31">ppEditView</name></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="74" pos:column="10">;</empty_stmt>

    <function><type><specifier pos:line="76" pos:column="5">virtual</specifier> <name pos:line="76" pos:column="13">void</name></type> <name pos:line="76" pos:column="18">display</name><parameter_list pos:line="76" pos:column="25">(<param><decl><type><name pos:line="76" pos:column="26">bool</name></type> <name pos:line="76" pos:column="31">toShow</name> <init pos:line="76" pos:column="38">= <expr><lit:literal type="boolean" pos:line="76" pos:column="40">true</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="76" pos:column="46">const</specifier> <block pos:line="76" pos:column="52">{
        <expr_stmt><expr><call><name><name pos:line="77" pos:column="9">DockingDlgInterface</name><op:operator pos:line="77" pos:column="28">::</op:operator><name pos:line="77" pos:column="30">display</name></name><argument_list pos:line="77" pos:column="37">(<argument><expr><name pos:line="77" pos:column="38">toShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="78" pos:column="6">;</empty_stmt>

    <function><type><name pos:line="80" pos:column="5">void</name></type> <name pos:line="80" pos:column="10">setParent</name><parameter_list pos:line="80" pos:column="19">(<param><decl><type><name pos:line="80" pos:column="20">HWND</name></type> <name pos:line="80" pos:column="25">parent2set</name></decl></param>)</parameter_list><block pos:line="80" pos:column="36">{
        <expr_stmt><expr><name pos:line="81" pos:column="9">_hParent</name> <op:operator pos:line="81" pos:column="18">=</op:operator> <name pos:line="81" pos:column="20">parent2set</name></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="82" pos:column="6">;</empty_stmt>

	<comment type="line" pos:line="84" pos:column="9">//void switchEncoding();</comment>
	<function_decl><type><name pos:line="85" pos:column="9">ClipboardData</name></type> <name pos:line="85" pos:column="23">getClipboadData</name><parameter_list pos:line="85" pos:column="38">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="86" pos:column="9">void</name></type> <name pos:line="86" pos:column="14">addToClipboadHistory</name><parameter_list pos:line="86" pos:column="34">(<param><decl><type><name pos:line="86" pos:column="35">ClipboardData</name></type> <name pos:line="86" pos:column="49">cbd</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="87" pos:column="9">int</name></type> <name pos:line="87" pos:column="13">getClipboardDataIndex</name><parameter_list pos:line="87" pos:column="34">(<param><decl><type><name pos:line="87" pos:column="35">ClipboardData</name></type> <name pos:line="87" pos:column="49">cbd</name></decl></param>)</parameter_list>;</function_decl>

</public><protected pos:line="89" pos:column="1">protected:
	<function_decl><type><specifier pos:line="90" pos:column="9">virtual</specifier> <name pos:line="90" pos:column="17">BOOL</name> <name pos:line="90" pos:column="22">CALLBACK</name></type> <name><name pos:line="90" pos:column="31">ClipboardHistoryPanel</name><op:operator pos:line="90" pos:column="52">::</op:operator><name pos:line="90" pos:column="54">run_dlgProc</name></name><parameter_list pos:line="90" pos:column="65">(<param><decl><type><name pos:line="90" pos:column="66">UINT</name></type> <name pos:line="90" pos:column="71">message</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="80">WPARAM</name></type> <name pos:line="90" pos:column="87">wParam</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="95">LPARAM</name></type> <name pos:line="90" pos:column="102">lParam</name></decl></param>)</parameter_list>;</function_decl>

</protected><private pos:line="92" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">ScintillaEditView</name> <type:modifier pos:line="93" pos:column="27">*</type:modifier><type:modifier pos:line="93" pos:column="28">*</type:modifier></type><name pos:line="93" pos:column="29">_ppEditView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="94" pos:column="9">std</name><op:operator pos:line="94" pos:column="12">::</op:operator><name><name pos:line="94" pos:column="14">vector</name><argument_list pos:line="94" pos:column="20">&lt;<argument><expr><name pos:line="94" pos:column="21">ClipboardData</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="94" pos:column="36">_clipboardDataVector</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="95" pos:column="9">HWND</name></type> <name pos:line="95" pos:column="14">_hwndNextCbViewer</name></decl>;</decl_stmt>
</private>}</block>;</class>
<cpp:endif pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="97" pos:column="8">// CLIPBOARDHISTORYPANEL_H</comment>
</unit>
