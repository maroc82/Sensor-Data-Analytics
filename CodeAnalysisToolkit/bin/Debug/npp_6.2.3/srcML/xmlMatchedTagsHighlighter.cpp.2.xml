<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\xmlMatchedTagsHighlighter.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2012 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<comment type="line" pos:line="29" pos:column="1">// Tags matching routing rewritten by Dave Brotherstone May 2012</comment>
<comment type="line" pos:line="30" pos:column="1">// to remove need for regular expression searches (especially reverse regex searches)</comment>
<comment type="line" pos:line="31" pos:column="1">// Reverse regex are slow using the new regex engine, and hence cost too much time.</comment>


<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"xmlMatchedTagsHighlighter.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>



<function><type><name><name pos:line="40" pos:column="1">vector</name><argument_list pos:line="40" pos:column="7">&lt; <argument><expr><name><name pos:line="40" pos:column="9">pair</name><argument_list pos:line="40" pos:column="13">&lt;<argument><expr><name pos:line="40" pos:column="14">int</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="19">int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name pos:line="40" pos:column="26">XmlMatchedTagsHighlighter</name><op:operator pos:line="40" pos:column="51">::</op:operator><name pos:line="40" pos:column="53">getAttributesPos</name></name><parameter_list pos:line="40" pos:column="69">(<param><decl><type><name pos:line="40" pos:column="70">int</name></type> <name pos:line="40" pos:column="74">start</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="81">int</name></type> <name pos:line="40" pos:column="85">end</name></decl></param>)</parameter_list>
<block pos:line="41" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="42" pos:column="9">vector</name><argument_list pos:line="42" pos:column="15">&lt; <argument><expr><name><name pos:line="42" pos:column="17">pair</name><argument_list pos:line="42" pos:column="21">&lt;<argument><expr><name pos:line="42" pos:column="22">int</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="27">int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name pos:line="42" pos:column="34">attributes</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="44" pos:column="9">int</name></type> <name pos:line="44" pos:column="13">bufLen</name> <init pos:line="44" pos:column="20">= <expr><name pos:line="44" pos:column="22">end</name> <op:operator pos:line="44" pos:column="26">-</op:operator> <name pos:line="44" pos:column="28">start</name> <op:operator pos:line="44" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="44" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">char</name> <type:modifier pos:line="45" pos:column="14">*</type:modifier></type><name pos:line="45" pos:column="15">buf</name> <init pos:line="45" pos:column="19">= <expr><op:operator pos:line="45" pos:column="21">new</op:operator> <name><name pos:line="45" pos:column="25">char</name><index pos:line="45" pos:column="29">[<expr><name pos:line="45" pos:column="30">bufLen</name><op:operator pos:line="45" pos:column="36">+</op:operator><lit:literal type="number" pos:line="45" pos:column="37">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="46" pos:column="9">_pEditView</name><op:operator pos:line="46" pos:column="19">-&gt;</op:operator><name pos:line="46" pos:column="21">getText</name></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">buf</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">start</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="41">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<enum pos:line="48" pos:column="9">enum <block pos:line="48" pos:column="14">{\
		<decl><name pos:line="49" pos:column="17">attr_invalid</name></decl><op:operator pos:line="49" pos:column="29">,</op:operator>\
		<decl><name pos:line="50" pos:column="17">attr_key</name></decl><op:operator pos:line="50" pos:column="25">,</op:operator>\
		<decl><name pos:line="51" pos:column="17">attr_pre_assign</name></decl><op:operator pos:line="51" pos:column="32">,</op:operator>\
		<decl><name pos:line="52" pos:column="17">attr_assign</name></decl><op:operator pos:line="52" pos:column="28">,</op:operator>\
		<decl><name pos:line="53" pos:column="17">attr_string</name></decl><op:operator pos:line="53" pos:column="28">,</op:operator>\
		<decl><name pos:line="54" pos:column="17">attr_value</name></decl><op:operator pos:line="54" pos:column="27">,</op:operator>\
		<decl><name pos:line="55" pos:column="17">attr_valid</name></decl>\
	}</block> <decl><name pos:line="56" pos:column="11">state</name> <init pos:line="56" pos:column="17">= <expr><name pos:line="56" pos:column="19">attr_invalid</name></expr></init></decl>;</enum>

	<decl_stmt><decl><type><name pos:line="58" pos:column="9">int</name></type> <name pos:line="58" pos:column="13">startPos</name> <init pos:line="58" pos:column="22">= <expr><op:operator pos:line="58" pos:column="24">-</op:operator><lit:literal type="number" pos:line="58" pos:column="25">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">int</name></type> <name pos:line="59" pos:column="13">oneMoreChar</name> <init pos:line="59" pos:column="25">= <expr><lit:literal type="number" pos:line="59" pos:column="27">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">int</name></type> <name pos:line="60" pos:column="13">i</name> <init pos:line="60" pos:column="15">= <expr><lit:literal type="number" pos:line="60" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="61" pos:column="9">for (<init pos:line="61" pos:column="14">;</init> <condition><expr><name pos:line="61" pos:column="16">i</name> <op:operator pos:line="61" pos:column="18">&lt;</op:operator> <name pos:line="61" pos:column="20">bufLen</name></expr> ;</condition> <incr><expr><name pos:line="61" pos:column="29">i</name><op:operator pos:line="61" pos:column="30">++</op:operator></expr></incr>)
	<block pos:line="62" pos:column="9">{
		<switch pos:line="63" pos:column="17">switch <condition pos:line="63" pos:column="24">(<expr><name><name pos:line="63" pos:column="25">buf</name><index pos:line="63" pos:column="28">[<expr><name pos:line="63" pos:column="29">i</name></expr>]</index></name></expr>)</condition>
		<block pos:line="64" pos:column="17">{
			<case pos:line="65" pos:column="25">case <expr><lit:literal type="char" pos:line="65" pos:column="30">' '</lit:literal></expr>:
			</case><case pos:line="66" pos:column="25">case <expr><lit:literal type="char" pos:line="66" pos:column="30">'\t'</lit:literal></expr>:
			</case><case pos:line="67" pos:column="25">case <expr><lit:literal type="char" pos:line="67" pos:column="30">'\n'</lit:literal></expr>:
			</case><case pos:line="68" pos:column="25">case <expr><lit:literal type="char" pos:line="68" pos:column="30">'\r'</lit:literal></expr>:
			<block pos:line="69" pos:column="25">{
				<if pos:line="70" pos:column="33">if <condition pos:line="70" pos:column="36">(<expr><name pos:line="70" pos:column="37">state</name> <op:operator pos:line="70" pos:column="43">==</op:operator> <name pos:line="70" pos:column="46">attr_key</name></expr>)</condition><then pos:line="70" pos:column="55">
					<expr_stmt><expr><name pos:line="71" pos:column="41">state</name> <op:operator pos:line="71" pos:column="47">=</op:operator> <name pos:line="71" pos:column="49">attr_pre_assign</name></expr>;</expr_stmt></then>
				<else pos:line="72" pos:column="33">else <if pos:line="72" pos:column="38">if <condition pos:line="72" pos:column="41">(<expr><name pos:line="72" pos:column="42">state</name> <op:operator pos:line="72" pos:column="48">==</op:operator> <name pos:line="72" pos:column="51">attr_value</name></expr>)</condition><then pos:line="72" pos:column="62">
				<block pos:line="73" pos:column="33">{
					<expr_stmt><expr><name pos:line="74" pos:column="41">state</name> <op:operator pos:line="74" pos:column="47">=</op:operator> <name pos:line="74" pos:column="49">attr_valid</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="75" pos:column="41">oneMoreChar</name> <op:operator pos:line="75" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="75" pos:column="55">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block>
			<break pos:line="78" pos:column="25">break;</break>

			</case><case pos:line="80" pos:column="25">case <expr><lit:literal type="char" pos:line="80" pos:column="30">'='</lit:literal></expr>:
			<block pos:line="81" pos:column="25">{
				<if pos:line="82" pos:column="33">if <condition pos:line="82" pos:column="36">(<expr><name pos:line="82" pos:column="37">state</name> <op:operator pos:line="82" pos:column="43">==</op:operator> <name pos:line="82" pos:column="46">attr_key</name> <op:operator pos:line="82" pos:column="55">||</op:operator> <name pos:line="82" pos:column="58">state</name> <op:operator pos:line="82" pos:column="64">==</op:operator> <name pos:line="82" pos:column="67">attr_pre_assign</name></expr>)</condition><then pos:line="82" pos:column="83">
					<expr_stmt><expr><name pos:line="83" pos:column="41">state</name> <op:operator pos:line="83" pos:column="47">=</op:operator> <name pos:line="83" pos:column="49">attr_assign</name></expr>;</expr_stmt></then>
				<else pos:line="84" pos:column="33">else <if pos:line="84" pos:column="38">if <condition pos:line="84" pos:column="41">(<expr><name pos:line="84" pos:column="42">state</name> <op:operator pos:line="84" pos:column="48">==</op:operator> <name pos:line="84" pos:column="51">attr_assign</name> <op:operator pos:line="84" pos:column="63">||</op:operator> <name pos:line="84" pos:column="66">state</name> <op:operator pos:line="84" pos:column="72">==</op:operator> <name pos:line="84" pos:column="75">attr_value</name></expr>)</condition><then pos:line="84" pos:column="86">
					<expr_stmt><expr><name pos:line="85" pos:column="41">state</name> <op:operator pos:line="85" pos:column="47">=</op:operator> <name pos:line="85" pos:column="49">attr_invalid</name></expr>;</expr_stmt></then></if></else></if>
			}</block>
			<break pos:line="87" pos:column="25">break;</break>

			</case><case pos:line="89" pos:column="25">case <expr><lit:literal type="char" pos:line="89" pos:column="30">'"'</lit:literal></expr>:
			<block pos:line="90" pos:column="25">{
				<if pos:line="91" pos:column="33">if <condition pos:line="91" pos:column="36">(<expr><name pos:line="91" pos:column="37">state</name> <op:operator pos:line="91" pos:column="43">==</op:operator> <name pos:line="91" pos:column="46">attr_string</name></expr>)</condition><then pos:line="91" pos:column="58">
				<block pos:line="92" pos:column="33">{
					<expr_stmt><expr><name pos:line="93" pos:column="41">state</name> <op:operator pos:line="93" pos:column="47">=</op:operator> <name pos:line="93" pos:column="49">attr_valid</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="94" pos:column="41">oneMoreChar</name> <op:operator pos:line="94" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="94" pos:column="55">1</lit:literal></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="96" pos:column="33">else <if pos:line="96" pos:column="38">if <condition pos:line="96" pos:column="41">(<expr><name pos:line="96" pos:column="42">state</name> <op:operator pos:line="96" pos:column="48">==</op:operator> <name pos:line="96" pos:column="51">attr_key</name> <op:operator pos:line="96" pos:column="60">||</op:operator> <name pos:line="96" pos:column="63">state</name> <op:operator pos:line="96" pos:column="69">==</op:operator> <name pos:line="96" pos:column="72">attr_pre_assign</name> <op:operator pos:line="96" pos:column="88">||</op:operator> <name pos:line="96" pos:column="91">state</name> <op:operator pos:line="96" pos:column="97">==</op:operator> <name pos:line="96" pos:column="100">attr_value</name></expr>)</condition><then pos:line="96" pos:column="111">
					<expr_stmt><expr><name pos:line="97" pos:column="41">state</name> <op:operator pos:line="97" pos:column="47">=</op:operator> <name pos:line="97" pos:column="49">attr_invalid</name></expr>;</expr_stmt></then>
				<else pos:line="98" pos:column="33">else <if pos:line="98" pos:column="38">if <condition pos:line="98" pos:column="41">(<expr><name pos:line="98" pos:column="42">state</name> <op:operator pos:line="98" pos:column="48">==</op:operator> <name pos:line="98" pos:column="51">attr_assign</name></expr>)</condition><then pos:line="98" pos:column="63">
					<expr_stmt><expr><name pos:line="99" pos:column="41">state</name> <op:operator pos:line="99" pos:column="47">=</op:operator> <name pos:line="99" pos:column="49">attr_string</name></expr>;</expr_stmt></then></if></else></if></else></if>
			}</block>
			<break pos:line="101" pos:column="25">break;</break>

			</case><default pos:line="103" pos:column="25">default:
			<block pos:line="104" pos:column="25">{
				<if pos:line="105" pos:column="33">if <condition pos:line="105" pos:column="36">(<expr><name pos:line="105" pos:column="37">state</name> <op:operator pos:line="105" pos:column="43">==</op:operator> <name pos:line="105" pos:column="46">attr_invalid</name></expr>)</condition><then pos:line="105" pos:column="59">
				<block pos:line="106" pos:column="33">{
					<expr_stmt><expr><name pos:line="107" pos:column="41">state</name> <op:operator pos:line="107" pos:column="47">=</op:operator> <name pos:line="107" pos:column="49">attr_key</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="108" pos:column="41">startPos</name> <op:operator pos:line="108" pos:column="50">=</op:operator> <name pos:line="108" pos:column="52">i</name></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="110" pos:column="33">else <if pos:line="110" pos:column="38">if <condition pos:line="110" pos:column="41">(<expr><name pos:line="110" pos:column="42">state</name> <op:operator pos:line="110" pos:column="48">==</op:operator> <name pos:line="110" pos:column="51">attr_pre_assign</name></expr>)</condition><then pos:line="110" pos:column="67">
					<expr_stmt><expr><name pos:line="111" pos:column="41">state</name> <op:operator pos:line="111" pos:column="47">=</op:operator> <name pos:line="111" pos:column="49">attr_invalid</name></expr>;</expr_stmt></then>
				<else pos:line="112" pos:column="33">else <if pos:line="112" pos:column="38">if <condition pos:line="112" pos:column="41">(<expr><name pos:line="112" pos:column="42">state</name> <op:operator pos:line="112" pos:column="48">==</op:operator> <name pos:line="112" pos:column="51">attr_assign</name></expr>)</condition><then pos:line="112" pos:column="63">
					<expr_stmt><expr><name pos:line="113" pos:column="41">state</name> <op:operator pos:line="113" pos:column="47">=</op:operator> <name pos:line="113" pos:column="49">attr_value</name></expr>;</expr_stmt></then></if></else></if></else></if>
			}</block>
		</default>}</block></switch>

		<if pos:line="117" pos:column="17">if <condition pos:line="117" pos:column="20">(<expr><name pos:line="117" pos:column="21">state</name> <op:operator pos:line="117" pos:column="27">==</op:operator> <name pos:line="117" pos:column="30">attr_valid</name></expr>)</condition><then pos:line="117" pos:column="41">
		<block pos:line="118" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="119" pos:column="25">attributes</name><op:operator pos:line="119" pos:column="35">.</op:operator><name pos:line="119" pos:column="36">push_back</name></name><argument_list pos:line="119" pos:column="45">(<argument><expr><call><name><name pos:line="119" pos:column="46">pair</name><argument_list pos:line="119" pos:column="50">&lt;<argument><expr><name pos:line="119" pos:column="51">int</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="56">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="119" pos:column="60">(<argument><expr><name pos:line="119" pos:column="61">start</name><op:operator pos:line="119" pos:column="66">+</op:operator><name pos:line="119" pos:column="67">startPos</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="77">start</name><op:operator pos:line="119" pos:column="82">+</op:operator><name pos:line="119" pos:column="83">i</name><op:operator pos:line="119" pos:column="84">+</op:operator><name pos:line="119" pos:column="85">oneMoreChar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="120" pos:column="25">state</name> <op:operator pos:line="120" pos:column="31">=</op:operator> <name pos:line="120" pos:column="33">attr_invalid</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><name pos:line="123" pos:column="13">state</name> <op:operator pos:line="123" pos:column="19">==</op:operator> <name pos:line="123" pos:column="22">attr_value</name></expr>)</condition><then pos:line="123" pos:column="33">
		<expr_stmt><expr><call><name><name pos:line="124" pos:column="17">attributes</name><op:operator pos:line="124" pos:column="27">.</op:operator><name pos:line="124" pos:column="28">push_back</name></name><argument_list pos:line="124" pos:column="37">(<argument><expr><call><name><name pos:line="124" pos:column="38">pair</name><argument_list pos:line="124" pos:column="42">&lt;<argument><expr><name pos:line="124" pos:column="43">int</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="48">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="124" pos:column="52">(<argument><expr><name pos:line="124" pos:column="53">start</name><op:operator pos:line="124" pos:column="58">+</op:operator><name pos:line="124" pos:column="59">startPos</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="69">start</name><op:operator pos:line="124" pos:column="74">+</op:operator><name pos:line="124" pos:column="75">i</name><op:operator pos:line="124" pos:column="76">-</op:operator><lit:literal type="number" pos:line="124" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><op:operator pos:line="126" pos:column="9">delete</op:operator> <index pos:line="126" pos:column="16">[]</index> <name pos:line="126" pos:column="19">buf</name></expr>;</expr_stmt>
	<return pos:line="127" pos:column="9">return <expr><name pos:line="127" pos:column="16">attributes</name></expr>;</return>
}</block></function>



<function><type><name pos:line="132" pos:column="1">bool</name></type> <name><name pos:line="132" pos:column="6">XmlMatchedTagsHighlighter</name><op:operator pos:line="132" pos:column="31">::</op:operator><name pos:line="132" pos:column="33">getXmlMatchedTagsPos</name></name><parameter_list pos:line="132" pos:column="53">(<param><decl><type><name pos:line="132" pos:column="54">XmlMatchedTagsPos</name> <type:modifier pos:line="132" pos:column="72">&amp;</type:modifier></type><name pos:line="132" pos:column="73">xmlTags</name></decl></param>)</parameter_list>
<block pos:line="133" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">bool</name></type> <name pos:line="134" pos:column="14">tagFound</name> <init pos:line="134" pos:column="23">= <expr><lit:literal type="boolean" pos:line="134" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">int</name></type> <name pos:line="135" pos:column="13">caret</name> <init pos:line="135" pos:column="19">= <expr><call><name><name pos:line="135" pos:column="21">_pEditView</name><op:operator pos:line="135" pos:column="31">-&gt;</op:operator><name pos:line="135" pos:column="33">execute</name></name><argument_list pos:line="135" pos:column="40">(<argument><expr><name pos:line="135" pos:column="41">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">int</name></type> <name pos:line="136" pos:column="13">searchStartPoint</name> <init pos:line="136" pos:column="30">= <expr><name pos:line="136" pos:column="32">caret</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">int</name></type> <name pos:line="137" pos:column="13">styleAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="138" pos:column="9">FindResult</name></type> <name pos:line="138" pos:column="20">openFound</name></decl>;</decl_stmt>
	
	<comment type="line" pos:line="140" pos:column="9">// Search back for the previous open angle bracket.</comment>
	<comment type="line" pos:line="141" pos:column="9">// Keep looking whilst the angle bracket found is inside an XML attribute</comment>
	<do pos:line="142" pos:column="9">do
	<block pos:line="143" pos:column="9">{
		<expr_stmt><expr><name pos:line="144" pos:column="17">openFound</name> <op:operator pos:line="144" pos:column="27">=</op:operator> <call><name pos:line="144" pos:column="29">findText</name><argument_list pos:line="144" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="38">"&lt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="144" pos:column="43">searchStartPoint</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="144" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="144" pos:column="64">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="145" pos:column="17">styleAt</name> <op:operator pos:line="145" pos:column="25">=</op:operator> <call><name><name pos:line="145" pos:column="27">_pEditView</name><op:operator pos:line="145" pos:column="37">-&gt;</op:operator><name pos:line="145" pos:column="39">execute</name></name><argument_list pos:line="145" pos:column="46">(<argument><expr><name pos:line="145" pos:column="47">SCI_GETSTYLEAT</name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="63">openFound</name><op:operator pos:line="145" pos:column="72">.</op:operator><name pos:line="145" pos:column="73">start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="146" pos:column="17">searchStartPoint</name> <op:operator pos:line="146" pos:column="34">=</op:operator> <name><name pos:line="146" pos:column="36">openFound</name><op:operator pos:line="146" pos:column="45">.</op:operator><name pos:line="146" pos:column="46">start</name></name> <op:operator pos:line="146" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="146" pos:column="54">1</lit:literal></expr>;</expr_stmt>
	}</block> while<condition pos:line="147" pos:column="16">(<expr><name><name pos:line="147" pos:column="17">openFound</name><op:operator pos:line="147" pos:column="26">.</op:operator><name pos:line="147" pos:column="27">success</name></name> <op:operator pos:line="147" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="147" pos:column="38">(</op:operator><name pos:line="147" pos:column="39">styleAt</name> <op:operator pos:line="147" pos:column="47">==</op:operator> <name pos:line="147" pos:column="50">SCE_H_DOUBLESTRING</name> <op:operator pos:line="147" pos:column="69">||</op:operator> <name pos:line="147" pos:column="72">styleAt</name> <op:operator pos:line="147" pos:column="80">==</op:operator> <name pos:line="147" pos:column="83">SCE_H_DOUBLESTRING</name><op:operator pos:line="147" pos:column="101">)</op:operator> <op:operator pos:line="147" pos:column="103">&amp;&amp;</op:operator> <name pos:line="147" pos:column="106">searchStartPoint</name> <op:operator pos:line="147" pos:column="123">&gt;</op:operator> <lit:literal type="number" pos:line="147" pos:column="125">0</lit:literal></expr>)</condition>;</do>

	<if pos:line="149" pos:column="9">if <condition pos:line="149" pos:column="12">(<expr><name><name pos:line="149" pos:column="13">openFound</name><op:operator pos:line="149" pos:column="22">.</op:operator><name pos:line="149" pos:column="23">success</name></name> <op:operator pos:line="149" pos:column="31">&amp;&amp;</op:operator> <name pos:line="149" pos:column="34">styleAt</name> <op:operator pos:line="149" pos:column="42">!=</op:operator> <name pos:line="149" pos:column="45">SCE_H_CDATA</name></expr>)</condition><then pos:line="149" pos:column="57">
	<block pos:line="150" pos:column="9">{
		<comment type="line" pos:line="151" pos:column="17">// Found the "&lt;" before the caret, now check there isn't a &gt; between that position and the caret.</comment>
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">FindResult</name></type> <name pos:line="152" pos:column="28">closeFound</name></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="153" pos:column="17">searchStartPoint</name> <op:operator pos:line="153" pos:column="34">=</op:operator> <name><name pos:line="153" pos:column="36">openFound</name><op:operator pos:line="153" pos:column="45">.</op:operator><name pos:line="153" pos:column="46">start</name></name></expr>;</expr_stmt>
		<do pos:line="154" pos:column="17">do
		<block pos:line="155" pos:column="17">{
			<expr_stmt><expr><name pos:line="156" pos:column="25">closeFound</name> <op:operator pos:line="156" pos:column="36">=</op:operator> <call><name pos:line="156" pos:column="38">findText</name><argument_list pos:line="156" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="47">"&gt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="52">searchStartPoint</name></expr></argument>, <argument><expr><name pos:line="156" pos:column="70">caret</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="156" pos:column="77">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="157" pos:column="25">styleAt</name> <op:operator pos:line="157" pos:column="33">=</op:operator> <call><name><name pos:line="157" pos:column="35">_pEditView</name><op:operator pos:line="157" pos:column="45">-&gt;</op:operator><name pos:line="157" pos:column="47">execute</name></name><argument_list pos:line="157" pos:column="54">(<argument><expr><name pos:line="157" pos:column="55">SCI_GETSTYLEAT</name></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="71">closeFound</name><op:operator pos:line="157" pos:column="81">.</op:operator><name pos:line="157" pos:column="82">start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="158" pos:column="25">searchStartPoint</name> <op:operator pos:line="158" pos:column="42">=</op:operator> <name><name pos:line="158" pos:column="44">closeFound</name><op:operator pos:line="158" pos:column="54">.</op:operator><name pos:line="158" pos:column="55">end</name></name></expr>;</expr_stmt>
		}</block> while <condition pos:line="159" pos:column="25">(<expr><name><name pos:line="159" pos:column="26">closeFound</name><op:operator pos:line="159" pos:column="36">.</op:operator><name pos:line="159" pos:column="37">success</name></name> <op:operator pos:line="159" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="159" pos:column="48">(</op:operator><name pos:line="159" pos:column="49">styleAt</name> <op:operator pos:line="159" pos:column="57">==</op:operator> <name pos:line="159" pos:column="60">SCE_H_DOUBLESTRING</name> <op:operator pos:line="159" pos:column="79">||</op:operator> <name pos:line="159" pos:column="82">styleAt</name> <op:operator pos:line="159" pos:column="90">==</op:operator> <name pos:line="159" pos:column="93">SCE_H_DOUBLESTRING</name><op:operator pos:line="159" pos:column="111">)</op:operator> <op:operator pos:line="159" pos:column="113">&amp;&amp;</op:operator> <name pos:line="159" pos:column="116">searchStartPoint</name> <op:operator pos:line="159" pos:column="133">&lt;=</op:operator> <name pos:line="159" pos:column="136">caret</name></expr>)</condition>;</do>

		<if pos:line="161" pos:column="17">if <condition pos:line="161" pos:column="20">(<expr><op:operator pos:line="161" pos:column="21">!</op:operator><name><name pos:line="161" pos:column="22">closeFound</name><op:operator pos:line="161" pos:column="32">.</op:operator><name pos:line="161" pos:column="33">success</name></name></expr>)</condition><then pos:line="161" pos:column="41">
		<block pos:line="162" pos:column="17">{
			<comment type="line" pos:line="163" pos:column="25">// We're in a tag (either a start tag or an end tag)</comment>
			<decl_stmt><decl><type><name pos:line="164" pos:column="25">int</name></type> <name pos:line="164" pos:column="29">nextChar</name> <init pos:line="164" pos:column="38">= <expr><call><name><name pos:line="164" pos:column="40">_pEditView</name><op:operator pos:line="164" pos:column="50">-&gt;</op:operator><name pos:line="164" pos:column="52">execute</name></name><argument_list pos:line="164" pos:column="59">(<argument><expr><name pos:line="164" pos:column="60">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name><name pos:line="164" pos:column="75">openFound</name><op:operator pos:line="164" pos:column="84">.</op:operator><name pos:line="164" pos:column="85">start</name></name> <op:operator pos:line="164" pos:column="91">+</op:operator> <lit:literal type="number" pos:line="164" pos:column="93">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


			<comment type="line" format="doxygen" pos:line="167" pos:column="25">/////////////////////////////////////////////////////////////////////////</comment>
			<comment type="line" pos:line="168" pos:column="25">// CURSOR IN CLOSE TAG   </comment>
			<comment type="line" format="doxygen" pos:line="169" pos:column="25">/////////////////////////////////////////////////////////////////////////</comment>
			<if pos:line="170" pos:column="25">if <condition pos:line="170" pos:column="28">(<expr><lit:literal type="char" pos:line="170" pos:column="29">'/'</lit:literal> <op:operator pos:line="170" pos:column="33">==</op:operator> <name pos:line="170" pos:column="36">nextChar</name></expr>)</condition><then pos:line="170" pos:column="45">
			<block pos:line="171" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="172" pos:column="33">xmlTags</name><op:operator pos:line="172" pos:column="40">.</op:operator><name pos:line="172" pos:column="41">tagCloseStart</name></name> <op:operator pos:line="172" pos:column="55">=</op:operator> <name><name pos:line="172" pos:column="57">openFound</name><op:operator pos:line="172" pos:column="66">.</op:operator><name pos:line="172" pos:column="67">start</name></name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="173" pos:column="33">int</name></type> <name pos:line="173" pos:column="37">docLength</name> <init pos:line="173" pos:column="47">= <expr><call><name><name pos:line="173" pos:column="49">_pEditView</name><op:operator pos:line="173" pos:column="59">-&gt;</op:operator><name pos:line="173" pos:column="61">execute</name></name><argument_list pos:line="173" pos:column="68">(<argument><expr><name pos:line="173" pos:column="69">SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="174" pos:column="33">FindResult</name></type> <name pos:line="174" pos:column="44">endCloseTag</name> <init pos:line="174" pos:column="56">= <expr><call><name pos:line="174" pos:column="58">findText</name><argument_list pos:line="174" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="67">"&gt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="72">caret</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="79">docLength</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="174" pos:column="90">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="175" pos:column="33">if <condition pos:line="175" pos:column="36">(<expr><name><name pos:line="175" pos:column="37">endCloseTag</name><op:operator pos:line="175" pos:column="48">.</op:operator><name pos:line="175" pos:column="49">success</name></name></expr>)</condition><then pos:line="175" pos:column="57">
				<block pos:line="176" pos:column="33">{
					<expr_stmt><expr><name><name pos:line="177" pos:column="41">xmlTags</name><op:operator pos:line="177" pos:column="48">.</op:operator><name pos:line="177" pos:column="49">tagCloseEnd</name></name> <op:operator pos:line="177" pos:column="61">=</op:operator> <name><name pos:line="177" pos:column="63">endCloseTag</name><op:operator pos:line="177" pos:column="74">.</op:operator><name pos:line="177" pos:column="75">end</name></name></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="179" pos:column="33">// Now find the tagName</comment>
				<decl_stmt><decl><type><name pos:line="180" pos:column="33">int</name></type> <name pos:line="180" pos:column="37">position</name> <init pos:line="180" pos:column="46">= <expr><name><name pos:line="180" pos:column="48">openFound</name><op:operator pos:line="180" pos:column="57">.</op:operator><name pos:line="180" pos:column="58">start</name></name> <op:operator pos:line="180" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="180" pos:column="66">2</lit:literal></expr></init></decl>;</decl_stmt>

				<comment type="line" pos:line="182" pos:column="33">// UTF-8 or ASCII tag name</comment>
				<decl_stmt><decl><type><name><name pos:line="183" pos:column="33">std</name><op:operator pos:line="183" pos:column="36">::</op:operator><name pos:line="183" pos:column="38">string</name></name></type> <name pos:line="183" pos:column="45">tagName</name></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="184" pos:column="33">nextChar</name> <op:operator pos:line="184" pos:column="42">=</op:operator> <call><name><name pos:line="184" pos:column="44">_pEditView</name><op:operator pos:line="184" pos:column="54">-&gt;</op:operator><name pos:line="184" pos:column="56">execute</name></name><argument_list pos:line="184" pos:column="63">(<argument><expr><name pos:line="184" pos:column="64">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="79">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<comment type="line" pos:line="185" pos:column="33">// Checking for " or ' is actually wrong here, but it means it works better with invalid XML</comment>
				<while pos:line="186" pos:column="33">while<condition pos:line="186" pos:column="38">(<expr><name pos:line="186" pos:column="39">position</name> <op:operator pos:line="186" pos:column="48">&lt;</op:operator> <name pos:line="186" pos:column="50">docLength</name> <op:operator pos:line="186" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="186" pos:column="63">!</op:operator><call><name pos:line="186" pos:column="64">isWhitespace</name><argument_list pos:line="186" pos:column="76">(<argument><expr><name pos:line="186" pos:column="77">nextChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="186" pos:column="87">&amp;&amp;</op:operator> <name pos:line="186" pos:column="90">nextChar</name> <op:operator pos:line="186" pos:column="99">!=</op:operator> <lit:literal type="char" pos:line="186" pos:column="102">'/'</lit:literal> <op:operator pos:line="186" pos:column="106">&amp;&amp;</op:operator> <name pos:line="186" pos:column="109">nextChar</name> <op:operator pos:line="186" pos:column="118">!=</op:operator> <lit:literal type="char" pos:line="186" pos:column="121">'&gt;'</lit:literal> <op:operator pos:line="186" pos:column="125">&amp;&amp;</op:operator> <name pos:line="186" pos:column="128">nextChar</name> <op:operator pos:line="186" pos:column="137">!=</op:operator> <lit:literal type="char" pos:line="186" pos:column="140">'\"'</lit:literal> <op:operator pos:line="186" pos:column="145">&amp;&amp;</op:operator> <name pos:line="186" pos:column="148">nextChar</name> <op:operator pos:line="186" pos:column="157">!=</op:operator> <lit:literal type="char" pos:line="186" pos:column="160">'\''</lit:literal></expr>)</condition>
				<block pos:line="187" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="188" pos:column="41">tagName</name><op:operator pos:line="188" pos:column="48">.</op:operator><name pos:line="188" pos:column="49">push_back</name></name><argument_list pos:line="188" pos:column="58">(<argument><expr><op:operator pos:line="188" pos:column="59">(</op:operator><name pos:line="188" pos:column="60">char</name><op:operator pos:line="188" pos:column="64">)</op:operator><name pos:line="188" pos:column="65">nextChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><op:operator pos:line="189" pos:column="41">++</op:operator><name pos:line="189" pos:column="43">position</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="190" pos:column="41">nextChar</name> <op:operator pos:line="190" pos:column="50">=</op:operator> <call><name><name pos:line="190" pos:column="52">_pEditView</name><op:operator pos:line="190" pos:column="62">-&gt;</op:operator><name pos:line="190" pos:column="64">execute</name></name><argument_list pos:line="190" pos:column="71">(<argument><expr><name pos:line="190" pos:column="72">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="87">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				}</block></while>
				
				<comment type="line" pos:line="193" pos:column="33">// Now we know where the end of the tag is, and we know what the tag is called</comment>
				<if pos:line="194" pos:column="33">if <condition pos:line="194" pos:column="36">(<expr><call><name><name pos:line="194" pos:column="37">tagName</name><op:operator pos:line="194" pos:column="44">.</op:operator><name pos:line="194" pos:column="45">size</name></name><argument_list pos:line="194" pos:column="49">()</argument_list></call> <op:operator pos:line="194" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="194" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="194" pos:column="57">
				<block pos:line="195" pos:column="33">{
					<comment type="block" pos:line="196" pos:column="41">/* Now we need to find the open tag.  The logic here is that we search for "&lt;TAGNAME",
					 * then check the next character - if it's one of '&gt;', ' ', '\"' then we know we've found 
					 * a relevant tag. 
					 * We then need to check if either
					 *    a) this tag is a self-closed tag - e.g. &lt;TAGNAME attrib="value" /&gt;
					 * or b) this tag has another closing tag after it and before our closing tag
					 *       e.g.  &lt;TAGNAME attrib="value"&gt;some text&lt;/TAGNAME&gt;&lt;/TAGNA|ME&gt;
					 *             (cursor represented by |)
					 * If it's either of the above, then we continue searching, but only up to the
					 * the point of the last find. (So in the (b) example above, we'd only search backwards 
					 * from the first "&lt;TAGNAME...", as we know there's a close tag for the opened tag.

					 * NOTE::  NEED TO CHECK THE ROTTEN CASE: ***********************************************************
					 * &lt;TAGNAME attrib="value"&gt;&lt;TAGNAME&gt;something&lt;/TAGNAME&gt;&lt;/TAGNAME&gt;&lt;/TAGNA|ME&gt;
					 * Maybe count all closing tags between start point and start of our end tag.???
					 */</comment>
					<decl_stmt><decl><type><name pos:line="212" pos:column="41">int</name></type> <name pos:line="212" pos:column="45">currentEndPoint</name> <init pos:line="212" pos:column="61">= <expr><name><name pos:line="212" pos:column="63">xmlTags</name><op:operator pos:line="212" pos:column="70">.</op:operator><name pos:line="212" pos:column="71">tagCloseStart</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="213" pos:column="41">int</name></type> <name pos:line="213" pos:column="45">openTagsRemaining</name> <init pos:line="213" pos:column="63">= <expr><lit:literal type="number" pos:line="213" pos:column="65">1</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="214" pos:column="41">FindResult</name></type> <name pos:line="214" pos:column="52">nextOpenTag</name></decl>;</decl_stmt>
					<do pos:line="215" pos:column="41">do 
					<block pos:line="216" pos:column="41">{
						<expr_stmt><expr><name pos:line="217" pos:column="49">nextOpenTag</name> <op:operator pos:line="217" pos:column="61">=</op:operator> <call><name pos:line="217" pos:column="63">findOpenTag</name><argument_list pos:line="217" pos:column="74">(<argument><expr><name pos:line="217" pos:column="75">tagName</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="84">currentEndPoint</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="217" pos:column="101">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="218" pos:column="49">if <condition pos:line="218" pos:column="52">(<expr><name><name pos:line="218" pos:column="53">nextOpenTag</name><op:operator pos:line="218" pos:column="64">.</op:operator><name pos:line="218" pos:column="65">success</name></name></expr>)</condition><then pos:line="218" pos:column="73"> 
						<block pos:line="219" pos:column="49">{
							<expr_stmt><expr><op:operator pos:line="220" pos:column="57">--</op:operator><name pos:line="220" pos:column="59">openTagsRemaining</name></expr>;</expr_stmt>
							<comment type="line" pos:line="221" pos:column="57">// Open tag found</comment>
							<comment type="line" pos:line="222" pos:column="57">// Now we need to check how many close tags there are between the open tag we just found,</comment>
							<comment type="line" pos:line="223" pos:column="57">// and our close tag</comment>
							<comment type="line" pos:line="224" pos:column="57">// eg. (Cursor == | )</comment>
							<comment type="line" pos:line="225" pos:column="57">// &lt;TAGNAME attrib="value"&gt;&lt;TAGNAME&gt;something&lt;/TAGNAME&gt;&lt;/TAGNAME&gt;&lt;/TAGNA|ME&gt;</comment>
							<comment type="line" pos:line="226" pos:column="57">//                         ^^^^^^^^ we've found this guy</comment>
							<comment type="line" pos:line="227" pos:column="57">//                                           ^^^^^^^^^^ ^^^^^^^^ Now we need to cound these fellas</comment>
							<decl_stmt><decl><type><name pos:line="228" pos:column="57">FindResult</name></type> <name pos:line="228" pos:column="68">inbetweenCloseTag</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="229" pos:column="57">int</name></type> <name pos:line="229" pos:column="61">currentStartPosition</name> <init pos:line="229" pos:column="82">= <expr><name><name pos:line="229" pos:column="84">nextOpenTag</name><op:operator pos:line="229" pos:column="95">.</op:operator><name pos:line="229" pos:column="96">end</name></name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="230" pos:column="57">int</name></type> <name pos:line="230" pos:column="61">closeTagsFound</name> <init pos:line="230" pos:column="76">= <expr><lit:literal type="number" pos:line="230" pos:column="78">0</lit:literal></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="231" pos:column="57">bool</name></type> <name pos:line="231" pos:column="62">forwardSearch</name> <init pos:line="231" pos:column="76">= <expr><op:operator pos:line="231" pos:column="78">(</op:operator><name pos:line="231" pos:column="79">currentStartPosition</name> <op:operator pos:line="231" pos:column="100">&lt;</op:operator> <name pos:line="231" pos:column="102">currentEndPoint</name><op:operator pos:line="231" pos:column="117">)</op:operator></expr></init></decl>;</decl_stmt>

							<do pos:line="233" pos:column="57">do
							<block pos:line="234" pos:column="57">{
								<expr_stmt><expr><name pos:line="235" pos:column="65">inbetweenCloseTag</name> <op:operator pos:line="235" pos:column="83">=</op:operator> <call><name pos:line="235" pos:column="85">findCloseTag</name><argument_list pos:line="235" pos:column="97">(<argument><expr><name pos:line="235" pos:column="98">tagName</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="107">currentStartPosition</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="129">currentEndPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								
								<if pos:line="237" pos:column="65">if <condition pos:line="237" pos:column="68">(<expr><name><name pos:line="237" pos:column="69">inbetweenCloseTag</name><op:operator pos:line="237" pos:column="86">.</op:operator><name pos:line="237" pos:column="87">success</name></name></expr>)</condition><then pos:line="237" pos:column="95">
								<block pos:line="238" pos:column="65">{
									<expr_stmt><expr><op:operator pos:line="239" pos:column="73">++</op:operator><name pos:line="239" pos:column="75">closeTagsFound</name></expr>;</expr_stmt>
									<if pos:line="240" pos:column="73">if <condition pos:line="240" pos:column="76">(<expr><name pos:line="240" pos:column="77">forwardSearch</name></expr>)</condition><then pos:line="240" pos:column="91">
									<block pos:line="241" pos:column="73">{
										<expr_stmt><expr><name pos:line="242" pos:column="81">currentStartPosition</name> <op:operator pos:line="242" pos:column="102">=</op:operator> <name><name pos:line="242" pos:column="104">inbetweenCloseTag</name><op:operator pos:line="242" pos:column="121">.</op:operator><name pos:line="242" pos:column="122">end</name></name></expr>;</expr_stmt>
									}</block></then>
									<else pos:line="244" pos:column="73">else
									<block pos:line="245" pos:column="73">{
										<expr_stmt><expr><name pos:line="246" pos:column="81">currentStartPosition</name> <op:operator pos:line="246" pos:column="102">=</op:operator> <name><name pos:line="246" pos:column="104">inbetweenCloseTag</name><op:operator pos:line="246" pos:column="121">.</op:operator><name pos:line="246" pos:column="122">start</name></name> <op:operator pos:line="246" pos:column="128">-</op:operator> <lit:literal type="number" pos:line="246" pos:column="130">1</lit:literal></expr>;</expr_stmt>
									}</block></else></if>
								}</block></then></if>

							}</block> while<condition pos:line="250" pos:column="64">(<expr><name><name pos:line="250" pos:column="65">inbetweenCloseTag</name><op:operator pos:line="250" pos:column="82">.</op:operator><name pos:line="250" pos:column="83">success</name></name></expr>)</condition>;</do>
					
							<comment type="line" pos:line="252" pos:column="57">// If we didn't find any close tags between the open and our close,</comment>
							<comment type="line" pos:line="253" pos:column="57">// and there's no open tags remaining to find</comment>
							<comment type="line" pos:line="254" pos:column="57">// then the open we found was the right one, and we can return it</comment>
							<if pos:line="255" pos:column="57">if <condition pos:line="255" pos:column="60">(<expr><lit:literal type="number" pos:line="255" pos:column="61">0</lit:literal> <op:operator pos:line="255" pos:column="63">==</op:operator> <name pos:line="255" pos:column="66">closeTagsFound</name> <op:operator pos:line="255" pos:column="81">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="255" pos:column="84">0</lit:literal> <op:operator pos:line="255" pos:column="86">==</op:operator> <name pos:line="255" pos:column="89">openTagsRemaining</name></expr>)</condition><then pos:line="255" pos:column="107">
							<block pos:line="256" pos:column="57">{
								<expr_stmt><expr><name><name pos:line="257" pos:column="65">xmlTags</name><op:operator pos:line="257" pos:column="72">.</op:operator><name pos:line="257" pos:column="73">tagOpenStart</name></name> <op:operator pos:line="257" pos:column="86">=</op:operator> <name><name pos:line="257" pos:column="88">nextOpenTag</name><op:operator pos:line="257" pos:column="99">.</op:operator><name pos:line="257" pos:column="100">start</name></name></expr>;</expr_stmt>
								<expr_stmt><expr><name><name pos:line="258" pos:column="65">xmlTags</name><op:operator pos:line="258" pos:column="72">.</op:operator><name pos:line="258" pos:column="73">tagOpenEnd</name></name> <op:operator pos:line="258" pos:column="84">=</op:operator> <name><name pos:line="258" pos:column="86">nextOpenTag</name><op:operator pos:line="258" pos:column="97">.</op:operator><name pos:line="258" pos:column="98">end</name></name> <op:operator pos:line="258" pos:column="102">+</op:operator> <lit:literal type="number" pos:line="258" pos:column="104">1</lit:literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name pos:line="259" pos:column="65">xmlTags</name><op:operator pos:line="259" pos:column="72">.</op:operator><name pos:line="259" pos:column="73">tagNameEnd</name></name> <op:operator pos:line="259" pos:column="84">=</op:operator> <name><name pos:line="259" pos:column="86">nextOpenTag</name><op:operator pos:line="259" pos:column="97">.</op:operator><name pos:line="259" pos:column="98">start</name></name> <op:operator pos:line="259" pos:column="104">+</op:operator> <call><name><name pos:line="259" pos:column="106">tagName</name><op:operator pos:line="259" pos:column="113">.</op:operator><name pos:line="259" pos:column="114">size</name></name><argument_list pos:line="259" pos:column="118">()</argument_list></call> <op:operator pos:line="259" pos:column="121">+</op:operator> <lit:literal type="number" pos:line="259" pos:column="123">1</lit:literal></expr>;</expr_stmt>  <comment type="block" pos:line="259" pos:column="127">/* + 1 to account for '&lt;' */</comment> 
								<expr_stmt><expr><name pos:line="260" pos:column="65">tagFound</name> <op:operator pos:line="260" pos:column="74">=</op:operator> <lit:literal type="boolean" pos:line="260" pos:column="76">true</lit:literal></expr>;</expr_stmt>
							}</block></then>
							<else pos:line="262" pos:column="57">else
							<block pos:line="263" pos:column="57">{
							
								<comment type="line" pos:line="265" pos:column="65">// Need to find the same number of opening tags, without closing tags etc.</comment>
								<expr_stmt><expr><name pos:line="266" pos:column="65">openTagsRemaining</name> <op:operator pos:line="266" pos:column="83">+=</op:operator> <name pos:line="266" pos:column="86">closeTagsFound</name></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="267" pos:column="65">currentEndPoint</name> <op:operator pos:line="267" pos:column="81">=</op:operator> <name><name pos:line="267" pos:column="83">nextOpenTag</name><op:operator pos:line="267" pos:column="94">.</op:operator><name pos:line="267" pos:column="95">start</name></name></expr>;</expr_stmt>
							}</block></else></if>
						}</block></then></if>
					}</block> while <condition pos:line="270" pos:column="49">(<expr><op:operator pos:line="270" pos:column="50">!</op:operator><name pos:line="270" pos:column="51">tagFound</name> <op:operator pos:line="270" pos:column="60">&amp;&amp;</op:operator> <name pos:line="270" pos:column="63">openTagsRemaining</name> <op:operator pos:line="270" pos:column="81">&gt;</op:operator> <lit:literal type="number" pos:line="270" pos:column="83">0</lit:literal> <op:operator pos:line="270" pos:column="85">&amp;&amp;</op:operator> <name><name pos:line="270" pos:column="88">nextOpenTag</name><op:operator pos:line="270" pos:column="99">.</op:operator><name pos:line="270" pos:column="100">success</name></name></expr>)</condition>;</do>
				}</block></then></if>
			}</block></then>
			<else pos:line="273" pos:column="25">else
			<block pos:line="274" pos:column="25">{
			<comment type="line" format="doxygen" pos:line="275" pos:column="25">/////////////////////////////////////////////////////////////////////////</comment>
			<comment type="line" pos:line="276" pos:column="25">// CURSOR IN OPEN TAG   </comment>
			<comment type="line" format="doxygen" pos:line="277" pos:column="25">/////////////////////////////////////////////////////////////////////////</comment>
				<decl_stmt><decl><type><name pos:line="278" pos:column="33">int</name></type> <name pos:line="278" pos:column="37">position</name> <init pos:line="278" pos:column="46">= <expr><name><name pos:line="278" pos:column="48">openFound</name><op:operator pos:line="278" pos:column="57">.</op:operator><name pos:line="278" pos:column="58">start</name></name> <op:operator pos:line="278" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="278" pos:column="66">1</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="279" pos:column="33">int</name></type> <name pos:line="279" pos:column="37">docLength</name> <init pos:line="279" pos:column="47">= <expr><call><name><name pos:line="279" pos:column="49">_pEditView</name><op:operator pos:line="279" pos:column="59">-&gt;</op:operator><name pos:line="279" pos:column="61">execute</name></name><argument_list pos:line="279" pos:column="68">(<argument><expr><name pos:line="279" pos:column="69">SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><name><name pos:line="281" pos:column="33">xmlTags</name><op:operator pos:line="281" pos:column="40">.</op:operator><name pos:line="281" pos:column="41">tagOpenStart</name></name> <op:operator pos:line="281" pos:column="54">=</op:operator> <name><name pos:line="281" pos:column="56">openFound</name><op:operator pos:line="281" pos:column="65">.</op:operator><name pos:line="281" pos:column="66">start</name></name></expr>;</expr_stmt>

				<decl_stmt><decl><type><name><name pos:line="283" pos:column="33">std</name><op:operator pos:line="283" pos:column="36">::</op:operator><name pos:line="283" pos:column="38">string</name></name></type> <name pos:line="283" pos:column="45">tagName</name></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="284" pos:column="33">nextChar</name> <op:operator pos:line="284" pos:column="42">=</op:operator> <call><name><name pos:line="284" pos:column="44">_pEditView</name><op:operator pos:line="284" pos:column="54">-&gt;</op:operator><name pos:line="284" pos:column="56">execute</name></name><argument_list pos:line="284" pos:column="63">(<argument><expr><name pos:line="284" pos:column="64">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="284" pos:column="79">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<comment type="line" pos:line="285" pos:column="33">// Checking for " or ' is actually wrong here, but it means it works better with invalid XML</comment>
				<while pos:line="286" pos:column="33">while<condition pos:line="286" pos:column="38">(<expr><name pos:line="286" pos:column="39">position</name> <op:operator pos:line="286" pos:column="48">&lt;</op:operator> <name pos:line="286" pos:column="50">docLength</name> <op:operator pos:line="286" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="286" pos:column="63">!</op:operator><call><name pos:line="286" pos:column="64">isWhitespace</name><argument_list pos:line="286" pos:column="76">(<argument><expr><name pos:line="286" pos:column="77">nextChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="286" pos:column="87">&amp;&amp;</op:operator> <name pos:line="286" pos:column="90">nextChar</name> <op:operator pos:line="286" pos:column="99">!=</op:operator> <lit:literal type="char" pos:line="286" pos:column="102">'/'</lit:literal> <op:operator pos:line="286" pos:column="106">&amp;&amp;</op:operator> <name pos:line="286" pos:column="109">nextChar</name> <op:operator pos:line="286" pos:column="118">!=</op:operator> <lit:literal type="char" pos:line="286" pos:column="121">'&gt;'</lit:literal> <op:operator pos:line="286" pos:column="125">&amp;&amp;</op:operator> <name pos:line="286" pos:column="128">nextChar</name> <op:operator pos:line="286" pos:column="137">!=</op:operator> <lit:literal type="char" pos:line="286" pos:column="140">'\"'</lit:literal> <op:operator pos:line="286" pos:column="145">&amp;&amp;</op:operator> <name pos:line="286" pos:column="148">nextChar</name> <op:operator pos:line="286" pos:column="157">!=</op:operator> <lit:literal type="char" pos:line="286" pos:column="160">'\''</lit:literal></expr>)</condition>
				<block pos:line="287" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="288" pos:column="41">tagName</name><op:operator pos:line="288" pos:column="48">.</op:operator><name pos:line="288" pos:column="49">push_back</name></name><argument_list pos:line="288" pos:column="58">(<argument><expr><op:operator pos:line="288" pos:column="59">(</op:operator><name pos:line="288" pos:column="60">char</name><op:operator pos:line="288" pos:column="64">)</op:operator><name pos:line="288" pos:column="65">nextChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><op:operator pos:line="289" pos:column="41">++</op:operator><name pos:line="289" pos:column="43">position</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="290" pos:column="41">nextChar</name> <op:operator pos:line="290" pos:column="50">=</op:operator> <call><name><name pos:line="290" pos:column="52">_pEditView</name><op:operator pos:line="290" pos:column="62">-&gt;</op:operator><name pos:line="290" pos:column="64">execute</name></name><argument_list pos:line="290" pos:column="71">(<argument><expr><name pos:line="290" pos:column="72">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="87">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				}</block></while>
				
				<comment type="line" pos:line="293" pos:column="33">// Now we know where the end of the tag is, and we know what the tag is called</comment>
				<if pos:line="294" pos:column="33">if <condition pos:line="294" pos:column="36">(<expr><call><name><name pos:line="294" pos:column="37">tagName</name><op:operator pos:line="294" pos:column="44">.</op:operator><name pos:line="294" pos:column="45">size</name></name><argument_list pos:line="294" pos:column="49">()</argument_list></call> <op:operator pos:line="294" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="294" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="294" pos:column="57">
				<block pos:line="295" pos:column="33">{
					<comment type="line" pos:line="296" pos:column="41">// First we need to check if this is a self-closing tag.</comment>
					<comment type="line" pos:line="297" pos:column="41">// If it is, then we can just return this tag to highlight itself.</comment>
					<expr_stmt><expr><name><name pos:line="298" pos:column="41">xmlTags</name><op:operator pos:line="298" pos:column="48">.</op:operator><name pos:line="298" pos:column="49">tagNameEnd</name></name> <op:operator pos:line="298" pos:column="60">=</op:operator> <name><name pos:line="298" pos:column="62">openFound</name><op:operator pos:line="298" pos:column="71">.</op:operator><name pos:line="298" pos:column="72">start</name></name> <op:operator pos:line="298" pos:column="78">+</op:operator> <call><name><name pos:line="298" pos:column="80">tagName</name><op:operator pos:line="298" pos:column="87">.</op:operator><name pos:line="298" pos:column="88">size</name></name><argument_list pos:line="298" pos:column="92">()</argument_list></call> <op:operator pos:line="298" pos:column="95">+</op:operator> <lit:literal type="number" pos:line="298" pos:column="97">1</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="299" pos:column="41">int</name></type> <name pos:line="299" pos:column="45">closeAnglePosition</name> <init pos:line="299" pos:column="64">= <expr><call><name pos:line="299" pos:column="66">findCloseAngle</name><argument_list pos:line="299" pos:column="80">(<argument><expr><name pos:line="299" pos:column="81">position</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="91">docLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="300" pos:column="41">if <condition pos:line="300" pos:column="44">(<expr><op:operator pos:line="300" pos:column="45">-</op:operator><lit:literal type="number" pos:line="300" pos:column="46">1</lit:literal> <op:operator pos:line="300" pos:column="48">!=</op:operator> <name pos:line="300" pos:column="51">closeAnglePosition</name></expr>)</condition><then pos:line="300" pos:column="70">
					<block pos:line="301" pos:column="41">{
						<expr_stmt><expr><name><name pos:line="302" pos:column="49">xmlTags</name><op:operator pos:line="302" pos:column="56">.</op:operator><name pos:line="302" pos:column="57">tagOpenEnd</name></name> <op:operator pos:line="302" pos:column="68">=</op:operator> <name pos:line="302" pos:column="70">closeAnglePosition</name> <op:operator pos:line="302" pos:column="89">+</op:operator> <lit:literal type="number" pos:line="302" pos:column="91">1</lit:literal></expr>;</expr_stmt>
						<comment type="line" pos:line="303" pos:column="49">// If it's a self closing tag</comment>
						<if pos:line="304" pos:column="49">if <condition pos:line="304" pos:column="52">(<expr><call><name><name pos:line="304" pos:column="53">_pEditView</name><op:operator pos:line="304" pos:column="63">-&gt;</op:operator><name pos:line="304" pos:column="65">execute</name></name><argument_list pos:line="304" pos:column="72">(<argument><expr><name pos:line="304" pos:column="73">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="88">closeAnglePosition</name> <op:operator pos:line="304" pos:column="107">-</op:operator> <lit:literal type="number" pos:line="304" pos:column="109">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="304" pos:column="112">==</op:operator> <lit:literal type="char" pos:line="304" pos:column="115">'/'</lit:literal></expr>)</condition><then pos:line="304" pos:column="119">
						<block pos:line="305" pos:column="49">{
							<comment type="line" pos:line="306" pos:column="57">// Set it as found, and mark that there's no close tag</comment>
							<expr_stmt><expr><name><name pos:line="307" pos:column="57">xmlTags</name><op:operator pos:line="307" pos:column="64">.</op:operator><name pos:line="307" pos:column="65">tagCloseEnd</name></name> <op:operator pos:line="307" pos:column="77">=</op:operator> <op:operator pos:line="307" pos:column="79">-</op:operator><lit:literal type="number" pos:line="307" pos:column="80">1</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><name><name pos:line="308" pos:column="57">xmlTags</name><op:operator pos:line="308" pos:column="64">.</op:operator><name pos:line="308" pos:column="65">tagCloseStart</name></name> <op:operator pos:line="308" pos:column="79">=</op:operator> <op:operator pos:line="308" pos:column="81">-</op:operator><lit:literal type="number" pos:line="308" pos:column="82">1</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="309" pos:column="57">tagFound</name> <op:operator pos:line="309" pos:column="66">=</op:operator> <lit:literal type="boolean" pos:line="309" pos:column="68">true</lit:literal></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="311" pos:column="49">else
						<block pos:line="312" pos:column="49">{
							<comment type="line" pos:line="313" pos:column="57">// It's a normal open tag</comment>



							<comment type="block" pos:line="317" pos:column="57">/* Now we need to find the close tag.  The logic here is that we search for "&lt;/TAGNAME",
							 * then check the next character - if it's '&gt;' or whitespace followed by '&gt;' then we've 
							 * found a relevant tag. 
							 * We then need to check if 
							 * our tag has another opening tag after it and before the closing tag we've found
							 *       e.g.  &lt;TA|GNAME&gt;&lt;TAGNAME attrib="value"&gt;some text&lt;/TAGNAME&gt;&lt;/TAGNAME&gt;
							 *             (cursor represented by |)
							 */</comment>
							<decl_stmt><decl><type><name pos:line="325" pos:column="57">int</name></type> <name pos:line="325" pos:column="61">currentStartPosition</name> <init pos:line="325" pos:column="82">= <expr><name><name pos:line="325" pos:column="84">xmlTags</name><op:operator pos:line="325" pos:column="91">.</op:operator><name pos:line="325" pos:column="92">tagOpenEnd</name></name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="326" pos:column="57">int</name></type> <name pos:line="326" pos:column="61">closeTagsRemaining</name> <init pos:line="326" pos:column="80">= <expr><lit:literal type="number" pos:line="326" pos:column="82">1</lit:literal></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="327" pos:column="57">FindResult</name></type> <name pos:line="327" pos:column="68">nextCloseTag</name></decl>;</decl_stmt>
							<do pos:line="328" pos:column="57">do 
							<block pos:line="329" pos:column="57">{
								<expr_stmt><expr><name pos:line="330" pos:column="65">nextCloseTag</name> <op:operator pos:line="330" pos:column="78">=</op:operator> <call><name pos:line="330" pos:column="80">findCloseTag</name><argument_list pos:line="330" pos:column="92">(<argument><expr><name pos:line="330" pos:column="93">tagName</name></expr></argument>, <argument><expr><name pos:line="330" pos:column="102">currentStartPosition</name></expr></argument>, <argument><expr><name pos:line="330" pos:column="124">docLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<if pos:line="331" pos:column="65">if <condition pos:line="331" pos:column="68">(<expr><name><name pos:line="331" pos:column="69">nextCloseTag</name><op:operator pos:line="331" pos:column="81">.</op:operator><name pos:line="331" pos:column="82">success</name></name></expr>)</condition><then pos:line="331" pos:column="90"> 
								<block pos:line="332" pos:column="65">{
									<expr_stmt><expr><op:operator pos:line="333" pos:column="73">--</op:operator><name pos:line="333" pos:column="75">closeTagsRemaining</name></expr>;</expr_stmt>
									<comment type="line" pos:line="334" pos:column="73">// Open tag found</comment>
									<comment type="line" pos:line="335" pos:column="73">// Now we need to check how many close tags there are between the open tag we just found,</comment>
									<comment type="line" pos:line="336" pos:column="73">// and our close tag</comment>
									<comment type="line" pos:line="337" pos:column="73">// eg. (Cursor == | )</comment>
									<comment type="line" pos:line="338" pos:column="73">// &lt;TAGNAM|E attrib="value"&gt;&lt;TAGNAME&gt;something&lt;/TAGNAME&gt;&lt;/TAGNAME&gt;&lt;/TAGNAME&gt;</comment>
									<comment type="line" pos:line="339" pos:column="73">//                                            ^^^^^^^^ we've found this guy</comment>
									<comment type="line" pos:line="340" pos:column="73">//                         ^^^^^^^^^ Now we need to find this fella</comment>
									<decl_stmt><decl><type><name pos:line="341" pos:column="73">FindResult</name></type> <name pos:line="341" pos:column="84">inbetweenOpenTag</name></decl>;</decl_stmt>
									<decl_stmt><decl><type><name pos:line="342" pos:column="73">int</name></type> <name pos:line="342" pos:column="77">currentEndPosition</name> <init pos:line="342" pos:column="96">= <expr><name><name pos:line="342" pos:column="98">nextCloseTag</name><op:operator pos:line="342" pos:column="110">.</op:operator><name pos:line="342" pos:column="111">start</name></name></expr></init></decl>;</decl_stmt>
									<decl_stmt><decl><type><name pos:line="343" pos:column="73">int</name></type> <name pos:line="343" pos:column="77">openTagsFound</name> <init pos:line="343" pos:column="91">= <expr><lit:literal type="number" pos:line="343" pos:column="93">0</lit:literal></expr></init></decl>;</decl_stmt>

									<do pos:line="345" pos:column="73">do
									<block pos:line="346" pos:column="73">{
										<expr_stmt><expr><name pos:line="347" pos:column="81">inbetweenOpenTag</name> <op:operator pos:line="347" pos:column="98">=</op:operator> <call><name pos:line="347" pos:column="100">findOpenTag</name><argument_list pos:line="347" pos:column="111">(<argument><expr><name pos:line="347" pos:column="112">tagName</name></expr></argument>, <argument><expr><name pos:line="347" pos:column="121">currentStartPosition</name></expr></argument>, <argument><expr><name pos:line="347" pos:column="143">currentEndPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								
										<if pos:line="349" pos:column="81">if <condition pos:line="349" pos:column="84">(<expr><name><name pos:line="349" pos:column="85">inbetweenOpenTag</name><op:operator pos:line="349" pos:column="101">.</op:operator><name pos:line="349" pos:column="102">success</name></name></expr>)</condition><then pos:line="349" pos:column="110">
										<block pos:line="350" pos:column="81">{
											<expr_stmt><expr><op:operator pos:line="351" pos:column="89">++</op:operator><name pos:line="351" pos:column="91">openTagsFound</name></expr>;</expr_stmt>
											<expr_stmt><expr><name pos:line="352" pos:column="89">currentStartPosition</name> <op:operator pos:line="352" pos:column="110">=</op:operator> <name><name pos:line="352" pos:column="112">inbetweenOpenTag</name><op:operator pos:line="352" pos:column="128">.</op:operator><name pos:line="352" pos:column="129">end</name></name></expr>;</expr_stmt>
										}</block></then></if>

									}</block> while<condition pos:line="355" pos:column="80">(<expr><name><name pos:line="355" pos:column="81">inbetweenOpenTag</name><op:operator pos:line="355" pos:column="97">.</op:operator><name pos:line="355" pos:column="98">success</name></name></expr>)</condition>;</do>
					
									<comment type="line" pos:line="357" pos:column="73">// If we didn't find any open tags between our open and the close,</comment>
									<comment type="line" pos:line="358" pos:column="73">// and there's no close tags remaining to find</comment>
									<comment type="line" pos:line="359" pos:column="73">// then the close we found was the right one, and we can return it</comment>
									<if pos:line="360" pos:column="73">if <condition pos:line="360" pos:column="76">(<expr><lit:literal type="number" pos:line="360" pos:column="77">0</lit:literal> <op:operator pos:line="360" pos:column="79">==</op:operator> <name pos:line="360" pos:column="82">openTagsFound</name> <op:operator pos:line="360" pos:column="96">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="360" pos:column="99">0</lit:literal> <op:operator pos:line="360" pos:column="101">==</op:operator> <name pos:line="360" pos:column="104">closeTagsRemaining</name></expr>)</condition><then pos:line="360" pos:column="123">
									<block pos:line="361" pos:column="73">{
										<expr_stmt><expr><name><name pos:line="362" pos:column="81">xmlTags</name><op:operator pos:line="362" pos:column="88">.</op:operator><name pos:line="362" pos:column="89">tagCloseStart</name></name> <op:operator pos:line="362" pos:column="103">=</op:operator> <name><name pos:line="362" pos:column="105">nextCloseTag</name><op:operator pos:line="362" pos:column="117">.</op:operator><name pos:line="362" pos:column="118">start</name></name></expr>;</expr_stmt>
										<expr_stmt><expr><name><name pos:line="363" pos:column="81">xmlTags</name><op:operator pos:line="363" pos:column="88">.</op:operator><name pos:line="363" pos:column="89">tagCloseEnd</name></name> <op:operator pos:line="363" pos:column="101">=</op:operator> <name><name pos:line="363" pos:column="103">nextCloseTag</name><op:operator pos:line="363" pos:column="115">.</op:operator><name pos:line="363" pos:column="116">end</name></name> <op:operator pos:line="363" pos:column="120">+</op:operator> <lit:literal type="number" pos:line="363" pos:column="122">1</lit:literal></expr>;</expr_stmt>
										<expr_stmt><expr><name pos:line="364" pos:column="81">tagFound</name> <op:operator pos:line="364" pos:column="90">=</op:operator> <lit:literal type="boolean" pos:line="364" pos:column="92">true</lit:literal></expr>;</expr_stmt>
									}</block></then>
									<else pos:line="366" pos:column="73">else
									<block pos:line="367" pos:column="73">{
							
										<comment type="line" pos:line="369" pos:column="81">// Need to find the same number of closing tags, without opening tags etc.</comment>
										<expr_stmt><expr><name pos:line="370" pos:column="81">closeTagsRemaining</name> <op:operator pos:line="370" pos:column="100">+=</op:operator> <name pos:line="370" pos:column="103">openTagsFound</name></expr>;</expr_stmt>
										<expr_stmt><expr><name pos:line="371" pos:column="81">currentStartPosition</name> <op:operator pos:line="371" pos:column="102">=</op:operator> <name><name pos:line="371" pos:column="104">nextCloseTag</name><op:operator pos:line="371" pos:column="116">.</op:operator><name pos:line="371" pos:column="117">end</name></name></expr>;</expr_stmt>
									}</block></else></if>
								}</block></then></if>
							}</block> while <condition pos:line="374" pos:column="65">(<expr><op:operator pos:line="374" pos:column="66">!</op:operator><name pos:line="374" pos:column="67">tagFound</name> <op:operator pos:line="374" pos:column="76">&amp;&amp;</op:operator> <name pos:line="374" pos:column="79">closeTagsRemaining</name> <op:operator pos:line="374" pos:column="98">&gt;</op:operator> <lit:literal type="number" pos:line="374" pos:column="100">0</lit:literal> <op:operator pos:line="374" pos:column="102">&amp;&amp;</op:operator> <name><name pos:line="374" pos:column="105">nextCloseTag</name><op:operator pos:line="374" pos:column="117">.</op:operator><name pos:line="374" pos:column="118">success</name></name></expr>)</condition>;</do>
						}</block></else></if> <comment type="line" pos:line="375" pos:column="51">// end if (selfclosingtag)... else {</comment>
					}</block></then></if> <comment type="line" pos:line="376" pos:column="43">// end if (-1 != closeAngle)  {</comment>

				}</block></then></if> <comment type="line" pos:line="378" pos:column="35">// end if tagName.size() != 0</comment>
			}</block></else></if> <comment type="line" pos:line="379" pos:column="27">// end open tag test</comment>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="382" pos:column="9">return <expr><name pos:line="382" pos:column="16">tagFound</name></expr>;</return>
}</block></function>


<function><type><name><name pos:line="386" pos:column="1">XmlMatchedTagsHighlighter</name><op:operator pos:line="386" pos:column="26">::</op:operator><name pos:line="386" pos:column="28">FindResult</name></name></type> <name><name pos:line="386" pos:column="39">XmlMatchedTagsHighlighter</name><op:operator pos:line="386" pos:column="64">::</op:operator><name pos:line="386" pos:column="66">findOpenTag</name></name><parameter_list pos:line="386" pos:column="77">(<param><decl><type><specifier pos:line="386" pos:column="78">const</specifier> <name><name pos:line="386" pos:column="84">std</name><op:operator pos:line="386" pos:column="87">::</op:operator><name pos:line="386" pos:column="89">string</name></name><type:modifier pos:line="386" pos:column="95">&amp;</type:modifier></type> <name pos:line="386" pos:column="97">tagName</name></decl></param>, <param><decl><type><name pos:line="386" pos:column="106">int</name></type> <name pos:line="386" pos:column="110">start</name></decl></param>, <param><decl><type><name pos:line="386" pos:column="117">int</name></type> <name pos:line="386" pos:column="121">end</name></decl></param>)</parameter_list>
<block pos:line="387" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="388" pos:column="9">std</name><op:operator pos:line="388" pos:column="12">::</op:operator><name pos:line="388" pos:column="14">string</name></name></type> <name pos:line="388" pos:column="21">search</name><argument_list pos:line="388" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="388" pos:column="28">"&lt;"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="389" pos:column="9">search</name><op:operator pos:line="389" pos:column="15">.</op:operator><name pos:line="389" pos:column="16">append</name></name><argument_list pos:line="389" pos:column="22">(<argument><expr><name pos:line="389" pos:column="23">tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="390" pos:column="9">FindResult</name></type> <name pos:line="390" pos:column="20">openTagFound</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="391" pos:column="9">openTagFound</name><op:operator pos:line="391" pos:column="21">.</op:operator><name pos:line="391" pos:column="22">success</name></name> <op:operator pos:line="391" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="391" pos:column="32">false</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="392" pos:column="9">FindResult</name></type> <name pos:line="392" pos:column="20">result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="393" pos:column="9">int</name></type> <name pos:line="393" pos:column="13">nextChar</name> <init pos:line="393" pos:column="22">= <expr><lit:literal type="number" pos:line="393" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name pos:line="394" pos:column="9">int</name></type> <name pos:line="394" pos:column="13">styleAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="395" pos:column="9">int</name></type> <name pos:line="395" pos:column="13">searchStart</name> <init pos:line="395" pos:column="25">= <expr><name pos:line="395" pos:column="27">start</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="396" pos:column="9">int</name></type> <name pos:line="396" pos:column="13">searchEnd</name> <init pos:line="396" pos:column="23">= <expr><name pos:line="396" pos:column="25">end</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="397" pos:column="9">bool</name></type> <name pos:line="397" pos:column="14">forwardSearch</name> <init pos:line="397" pos:column="28">= <expr><op:operator pos:line="397" pos:column="30">(</op:operator><name pos:line="397" pos:column="31">start</name> <op:operator pos:line="397" pos:column="37">&lt;</op:operator> <name pos:line="397" pos:column="39">end</name><op:operator pos:line="397" pos:column="42">)</op:operator></expr></init></decl>;</decl_stmt>
	<do pos:line="398" pos:column="9">do
	<block pos:line="399" pos:column="9">{
		
		<expr_stmt><expr><name pos:line="401" pos:column="17">result</name> <op:operator pos:line="401" pos:column="24">=</op:operator> <call><name pos:line="401" pos:column="26">findText</name><argument_list pos:line="401" pos:column="34">(<argument><expr><call><name><name pos:line="401" pos:column="35">search</name><op:operator pos:line="401" pos:column="41">.</op:operator><name pos:line="401" pos:column="42">c_str</name></name><argument_list pos:line="401" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="401" pos:column="51">searchStart</name></expr></argument>, <argument><expr><name pos:line="401" pos:column="64">searchEnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="401" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="402" pos:column="17">if <condition pos:line="402" pos:column="20">(<expr><name><name pos:line="402" pos:column="21">result</name><op:operator pos:line="402" pos:column="27">.</op:operator><name pos:line="402" pos:column="28">success</name></name></expr>)</condition><then pos:line="402" pos:column="36">
		<block pos:line="403" pos:column="17">{
			<expr_stmt><expr><name pos:line="404" pos:column="25">nextChar</name> <op:operator pos:line="404" pos:column="34">=</op:operator> <call><name><name pos:line="404" pos:column="36">_pEditView</name><op:operator pos:line="404" pos:column="46">-&gt;</op:operator><name pos:line="404" pos:column="48">execute</name></name><argument_list pos:line="404" pos:column="55">(<argument><expr><name pos:line="404" pos:column="56">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name><name pos:line="404" pos:column="71">result</name><op:operator pos:line="404" pos:column="77">.</op:operator><name pos:line="404" pos:column="78">end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="405" pos:column="25">styleAt</name> <op:operator pos:line="405" pos:column="33">=</op:operator> <call><name><name pos:line="405" pos:column="35">_pEditView</name><op:operator pos:line="405" pos:column="45">-&gt;</op:operator><name pos:line="405" pos:column="47">execute</name></name><argument_list pos:line="405" pos:column="54">(<argument><expr><name pos:line="405" pos:column="55">SCI_GETSTYLEAT</name></expr></argument>, <argument><expr><name><name pos:line="405" pos:column="71">result</name><op:operator pos:line="405" pos:column="77">.</op:operator><name pos:line="405" pos:column="78">start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="406" pos:column="25">if <condition pos:line="406" pos:column="28">(<expr><name pos:line="406" pos:column="29">styleAt</name> <op:operator pos:line="406" pos:column="37">!=</op:operator> <name pos:line="406" pos:column="40">SCE_H_CDATA</name> <op:operator pos:line="406" pos:column="52">&amp;&amp;</op:operator> <name pos:line="406" pos:column="55">styleAt</name> <op:operator pos:line="406" pos:column="63">!=</op:operator> <name pos:line="406" pos:column="66">SCE_H_DOUBLESTRING</name> <op:operator pos:line="406" pos:column="85">&amp;&amp;</op:operator> <name pos:line="406" pos:column="88">styleAt</name> <op:operator pos:line="406" pos:column="96">!=</op:operator> <name pos:line="406" pos:column="99">SCE_H_SINGLESTRING</name></expr>)</condition><then pos:line="406" pos:column="118">
			<block pos:line="407" pos:column="25">{
				<comment type="line" pos:line="408" pos:column="33">// We've got an open tag for this tag name (i.e. nextChar was space or '&gt;')</comment>
				<comment type="line" pos:line="409" pos:column="33">// Now we need to find the end of the start tag.</comment>
		
				<comment type="line" pos:line="411" pos:column="33">// Common case, the tag is an empty tag with no whitespace. e.g. &lt;TAGNAME&gt;</comment>
				<if pos:line="412" pos:column="33">if <condition pos:line="412" pos:column="36">(<expr><name pos:line="412" pos:column="37">nextChar</name> <op:operator pos:line="412" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="412" pos:column="49">'&gt;'</lit:literal></expr>)</condition><then pos:line="412" pos:column="53">
				<block pos:line="413" pos:column="33">{
					<expr_stmt><expr><name><name pos:line="414" pos:column="41">openTagFound</name><op:operator pos:line="414" pos:column="53">.</op:operator><name pos:line="414" pos:column="54">end</name></name> <op:operator pos:line="414" pos:column="58">=</op:operator> <name><name pos:line="414" pos:column="60">result</name><op:operator pos:line="414" pos:column="66">.</op:operator><name pos:line="414" pos:column="67">end</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="415" pos:column="41">openTagFound</name><op:operator pos:line="415" pos:column="53">.</op:operator><name pos:line="415" pos:column="54">success</name></name> <op:operator pos:line="415" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="415" pos:column="64">true</lit:literal></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="417" pos:column="33">else <if pos:line="417" pos:column="38">if <condition pos:line="417" pos:column="41">(<expr><call><name pos:line="417" pos:column="42">isWhitespace</name><argument_list pos:line="417" pos:column="54">(<argument><expr><name pos:line="417" pos:column="55">nextChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="417" pos:column="65">
				<block pos:line="418" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="419" pos:column="41">int</name></type> <name pos:line="419" pos:column="45">closeAnglePosition</name> <init pos:line="419" pos:column="64">= <expr><call><name pos:line="419" pos:column="66">findCloseAngle</name><argument_list pos:line="419" pos:column="80">(<argument><expr><name><name pos:line="419" pos:column="81">result</name><op:operator pos:line="419" pos:column="87">.</op:operator><name pos:line="419" pos:column="88">end</name></name></expr></argument>, <argument><expr><name pos:line="419" pos:column="93">forwardSearch</name> <op:operator pos:line="419" pos:column="107">?</op:operator> <name pos:line="419" pos:column="109">end</name> <op:operator pos:line="419" pos:column="113">:</op:operator> <name pos:line="419" pos:column="115">start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="420" pos:column="41">if <condition pos:line="420" pos:column="44">(<expr><op:operator pos:line="420" pos:column="45">-</op:operator><lit:literal type="number" pos:line="420" pos:column="46">1</lit:literal> <op:operator pos:line="420" pos:column="48">!=</op:operator> <name pos:line="420" pos:column="51">closeAnglePosition</name> <op:operator pos:line="420" pos:column="70">&amp;&amp;</op:operator> <lit:literal type="char" pos:line="420" pos:column="73">'/'</lit:literal> <op:operator pos:line="420" pos:column="77">!=</op:operator> <call><name><name pos:line="420" pos:column="80">_pEditView</name><op:operator pos:line="420" pos:column="90">-&gt;</op:operator><name pos:line="420" pos:column="92">execute</name></name><argument_list pos:line="420" pos:column="99">(<argument><expr><name pos:line="420" pos:column="100">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="420" pos:column="115">closeAnglePosition</name> <op:operator pos:line="420" pos:column="134">-</op:operator> <lit:literal type="number" pos:line="420" pos:column="136">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="420" pos:column="139">
					<block pos:line="421" pos:column="41">{
						<expr_stmt><expr><name><name pos:line="422" pos:column="49">openTagFound</name><op:operator pos:line="422" pos:column="61">.</op:operator><name pos:line="422" pos:column="62">end</name></name> <op:operator pos:line="422" pos:column="66">=</op:operator> <name pos:line="422" pos:column="68">closeAnglePosition</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="423" pos:column="49">openTagFound</name><op:operator pos:line="423" pos:column="61">.</op:operator><name pos:line="423" pos:column="62">success</name></name> <op:operator pos:line="423" pos:column="70">=</op:operator> <lit:literal type="boolean" pos:line="423" pos:column="72">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
			}</block></then></if>

		}</block></then></if>

		<if pos:line="430" pos:column="17">if <condition pos:line="430" pos:column="20">(<expr><name pos:line="430" pos:column="21">forwardSearch</name></expr>)</condition><then pos:line="430" pos:column="35">
		<block pos:line="431" pos:column="17">{
			<expr_stmt><expr><name pos:line="432" pos:column="25">searchStart</name> <op:operator pos:line="432" pos:column="37">=</op:operator> <name><name pos:line="432" pos:column="39">result</name><op:operator pos:line="432" pos:column="45">.</op:operator><name pos:line="432" pos:column="46">end</name></name> <op:operator pos:line="432" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="432" pos:column="52">1</lit:literal></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="434" pos:column="17">else
		<block pos:line="435" pos:column="17">{
			<expr_stmt><expr><name pos:line="436" pos:column="25">searchStart</name> <op:operator pos:line="436" pos:column="37">=</op:operator> <name><name pos:line="436" pos:column="39">result</name><op:operator pos:line="436" pos:column="45">.</op:operator><name pos:line="436" pos:column="46">start</name></name> <op:operator pos:line="436" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="436" pos:column="54">1</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		
		<comment type="line" pos:line="439" pos:column="17">// Loop while we've found a &lt;TAGNAME, but it's either in a CDATA section,</comment>
		<comment type="line" pos:line="440" pos:column="17">// or it's got more none whitespace characters after it. e.g. &lt;TAGNAME2</comment>
	}</block> while <condition pos:line="441" pos:column="17">(<expr><name><name pos:line="441" pos:column="18">result</name><op:operator pos:line="441" pos:column="24">.</op:operator><name pos:line="441" pos:column="25">success</name></name> <op:operator pos:line="441" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="441" pos:column="36">!</op:operator><name><name pos:line="441" pos:column="37">openTagFound</name><op:operator pos:line="441" pos:column="49">.</op:operator><name pos:line="441" pos:column="50">success</name></name></expr>)</condition>;</do>
	
	<expr_stmt><expr><name><name pos:line="443" pos:column="9">openTagFound</name><op:operator pos:line="443" pos:column="21">.</op:operator><name pos:line="443" pos:column="22">start</name></name> <op:operator pos:line="443" pos:column="28">=</op:operator> <name><name pos:line="443" pos:column="30">result</name><op:operator pos:line="443" pos:column="36">.</op:operator><name pos:line="443" pos:column="37">start</name></name></expr>;</expr_stmt>


	<return pos:line="446" pos:column="9">return <expr><name pos:line="446" pos:column="16">openTagFound</name></expr>;</return>

}</block></function>


<function><type><name pos:line="451" pos:column="1">int</name></type> <name><name pos:line="451" pos:column="5">XmlMatchedTagsHighlighter</name><op:operator pos:line="451" pos:column="30">::</op:operator><name pos:line="451" pos:column="32">findCloseAngle</name></name><parameter_list pos:line="451" pos:column="46">(<param><decl><type><name pos:line="451" pos:column="47">int</name></type> <name pos:line="451" pos:column="51">startPosition</name></decl></param>, <param><decl><type><name pos:line="451" pos:column="66">int</name></type> <name pos:line="451" pos:column="70">endPosition</name></decl></param>)</parameter_list>
<block pos:line="452" pos:column="1">{
	<comment type="line" pos:line="453" pos:column="9">// We'll search for the next '&gt;', and check it's not in an attribute using the style</comment>
	<decl_stmt><decl><type><name pos:line="454" pos:column="9">FindResult</name></type> <name pos:line="454" pos:column="20">closeAngle</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="456" pos:column="9">bool</name></type> <name pos:line="456" pos:column="14">isValidClose</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name pos:line="457" pos:column="9">int</name></type> <name pos:line="457" pos:column="13">returnPosition</name> <init pos:line="457" pos:column="28">= <expr><op:operator pos:line="457" pos:column="30">-</op:operator><lit:literal type="number" pos:line="457" pos:column="31">1</lit:literal></expr></init></decl>;</decl_stmt>
	
	<comment type="line" pos:line="459" pos:column="9">// Only search forwards</comment>
	<if pos:line="460" pos:column="9">if <condition pos:line="460" pos:column="12">(<expr><name pos:line="460" pos:column="13">startPosition</name> <op:operator pos:line="460" pos:column="27">&gt;</op:operator> <name pos:line="460" pos:column="29">endPosition</name></expr>)</condition><then pos:line="460" pos:column="41">
	<block pos:line="461" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="462" pos:column="17">int</name></type> <name pos:line="462" pos:column="21">temp</name> <init pos:line="462" pos:column="26">= <expr><name pos:line="462" pos:column="28">endPosition</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="463" pos:column="17">endPosition</name> <op:operator pos:line="463" pos:column="29">=</op:operator> <name pos:line="463" pos:column="31">startPosition</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="464" pos:column="17">startPosition</name> <op:operator pos:line="464" pos:column="31">=</op:operator> <name pos:line="464" pos:column="33">temp</name></expr>;</expr_stmt>
	}</block></then></if>

	<do pos:line="467" pos:column="9">do
	<block pos:line="468" pos:column="9">{
		<expr_stmt><expr><name pos:line="469" pos:column="17">isValidClose</name> <op:operator pos:line="469" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="469" pos:column="32">false</lit:literal></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="471" pos:column="17">closeAngle</name> <op:operator pos:line="471" pos:column="28">=</op:operator> <call><name pos:line="471" pos:column="30">findText</name><argument_list pos:line="471" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="471" pos:column="39">"&gt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="471" pos:column="44">startPosition</name></expr></argument>, <argument><expr><name pos:line="471" pos:column="59">endPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="472" pos:column="17">if <condition pos:line="472" pos:column="20">(<expr><name><name pos:line="472" pos:column="21">closeAngle</name><op:operator pos:line="472" pos:column="31">.</op:operator><name pos:line="472" pos:column="32">success</name></name></expr>)</condition><then pos:line="472" pos:column="40">
		<block pos:line="473" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="474" pos:column="25">int</name></type> <name pos:line="474" pos:column="29">style</name> <init pos:line="474" pos:column="35">= <expr><call><name><name pos:line="474" pos:column="37">_pEditView</name><op:operator pos:line="474" pos:column="47">-&gt;</op:operator><name pos:line="474" pos:column="49">execute</name></name><argument_list pos:line="474" pos:column="56">(<argument><expr><name pos:line="474" pos:column="57">SCI_GETSTYLEAT</name></expr></argument>, <argument><expr><name><name pos:line="474" pos:column="73">closeAngle</name><op:operator pos:line="474" pos:column="83">.</op:operator><name pos:line="474" pos:column="84">start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="475" pos:column="25">// As long as we're not in an attribute (  &lt;TAGNAME attrib="val&gt;ue"&gt; is VALID XML. )</comment>
			<if pos:line="476" pos:column="25">if <condition pos:line="476" pos:column="28">(<expr><name pos:line="476" pos:column="29">style</name> <op:operator pos:line="476" pos:column="35">!=</op:operator> <name pos:line="476" pos:column="38">SCE_H_DOUBLESTRING</name> <op:operator pos:line="476" pos:column="57">&amp;&amp;</op:operator> <name pos:line="476" pos:column="60">style</name> <op:operator pos:line="476" pos:column="66">!=</op:operator> <name pos:line="476" pos:column="69">SCE_H_SINGLESTRING</name></expr>)</condition><then pos:line="476" pos:column="88">
			<block pos:line="477" pos:column="25">{
				<expr_stmt><expr><name pos:line="478" pos:column="33">returnPosition</name> <op:operator pos:line="478" pos:column="48">=</op:operator> <name><name pos:line="478" pos:column="50">closeAngle</name><op:operator pos:line="478" pos:column="60">.</op:operator><name pos:line="478" pos:column="61">start</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="479" pos:column="33">isValidClose</name> <op:operator pos:line="479" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="479" pos:column="48">true</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="481" pos:column="25">else
			<block pos:line="482" pos:column="25">{
				<expr_stmt><expr><name pos:line="483" pos:column="33">startPosition</name> <op:operator pos:line="483" pos:column="47">=</op:operator> <name><name pos:line="483" pos:column="49">closeAngle</name><op:operator pos:line="483" pos:column="59">.</op:operator><name pos:line="483" pos:column="60">end</name></name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
				
	}</block> while <condition pos:line="487" pos:column="17">(<expr><name><name pos:line="487" pos:column="18">closeAngle</name><op:operator pos:line="487" pos:column="28">.</op:operator><name pos:line="487" pos:column="29">success</name></name> <op:operator pos:line="487" pos:column="37">&amp;&amp;</op:operator> <name pos:line="487" pos:column="40">isValidClose</name> <op:operator pos:line="487" pos:column="53">==</op:operator> <lit:literal type="boolean" pos:line="487" pos:column="56">false</lit:literal></expr>)</condition>;</do>

	<return pos:line="489" pos:column="9">return <expr><name pos:line="489" pos:column="16">returnPosition</name></expr>;</return>
}</block></function>


<function><type><name><name pos:line="493" pos:column="1">XmlMatchedTagsHighlighter</name><op:operator pos:line="493" pos:column="26">::</op:operator><name pos:line="493" pos:column="28">FindResult</name></name></type> <name><name pos:line="493" pos:column="39">XmlMatchedTagsHighlighter</name><op:operator pos:line="493" pos:column="64">::</op:operator><name pos:line="493" pos:column="66">findCloseTag</name></name><parameter_list pos:line="493" pos:column="78">(<param><decl><type><specifier pos:line="493" pos:column="79">const</specifier> <name><name pos:line="493" pos:column="85">std</name><op:operator pos:line="493" pos:column="88">::</op:operator><name pos:line="493" pos:column="90">string</name></name><type:modifier pos:line="493" pos:column="96">&amp;</type:modifier></type> <name pos:line="493" pos:column="98">tagName</name></decl></param>, <param><decl><type><name pos:line="493" pos:column="107">int</name></type> <name pos:line="493" pos:column="111">start</name></decl></param>, <param><decl><type><name pos:line="493" pos:column="118">int</name></type> <name pos:line="493" pos:column="122">end</name></decl></param>)</parameter_list>
<block pos:line="494" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="495" pos:column="9">std</name><op:operator pos:line="495" pos:column="12">::</op:operator><name pos:line="495" pos:column="14">string</name></name></type> <name pos:line="495" pos:column="21">search</name><argument_list pos:line="495" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="495" pos:column="28">"&lt;/"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="496" pos:column="9">search</name><op:operator pos:line="496" pos:column="15">.</op:operator><name pos:line="496" pos:column="16">append</name></name><argument_list pos:line="496" pos:column="22">(<argument><expr><name pos:line="496" pos:column="23">tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="497" pos:column="9">FindResult</name></type> <name pos:line="497" pos:column="20">closeTagFound</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="498" pos:column="9">closeTagFound</name><op:operator pos:line="498" pos:column="22">.</op:operator><name pos:line="498" pos:column="23">success</name></name> <op:operator pos:line="498" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="498" pos:column="33">false</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="499" pos:column="9">FindResult</name></type> <name pos:line="499" pos:column="20">result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="500" pos:column="9">int</name></type> <name pos:line="500" pos:column="13">nextChar</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name pos:line="501" pos:column="9">int</name></type> <name pos:line="501" pos:column="13">styleAt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="502" pos:column="9">int</name></type> <name pos:line="502" pos:column="13">searchStart</name> <init pos:line="502" pos:column="25">= <expr><name pos:line="502" pos:column="27">start</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="503" pos:column="9">int</name></type> <name pos:line="503" pos:column="13">searchEnd</name> <init pos:line="503" pos:column="23">= <expr><name pos:line="503" pos:column="25">end</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="504" pos:column="9">bool</name></type> <name pos:line="504" pos:column="14">forwardSearch</name> <init pos:line="504" pos:column="28">= <expr><op:operator pos:line="504" pos:column="30">(</op:operator><name pos:line="504" pos:column="31">start</name> <op:operator pos:line="504" pos:column="37">&lt;</op:operator> <name pos:line="504" pos:column="39">end</name><op:operator pos:line="504" pos:column="42">)</op:operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="505" pos:column="9">bool</name></type> <name pos:line="505" pos:column="14">validCloseTag</name></decl>;</decl_stmt>
	<do pos:line="506" pos:column="9">do
	<block pos:line="507" pos:column="9">{
		<expr_stmt><expr><name pos:line="508" pos:column="17">validCloseTag</name> <op:operator pos:line="508" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="508" pos:column="33">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="509" pos:column="17">result</name> <op:operator pos:line="509" pos:column="24">=</op:operator> <call><name pos:line="509" pos:column="26">findText</name><argument_list pos:line="509" pos:column="34">(<argument><expr><call><name><name pos:line="509" pos:column="35">search</name><op:operator pos:line="509" pos:column="41">.</op:operator><name pos:line="509" pos:column="42">c_str</name></name><argument_list pos:line="509" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="509" pos:column="51">searchStart</name></expr></argument>, <argument><expr><name pos:line="509" pos:column="64">searchEnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="509" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="510" pos:column="17">if <condition pos:line="510" pos:column="20">(<expr><name><name pos:line="510" pos:column="21">result</name><op:operator pos:line="510" pos:column="27">.</op:operator><name pos:line="510" pos:column="28">success</name></name></expr>)</condition><then pos:line="510" pos:column="36">
		<block pos:line="511" pos:column="17">{
			<expr_stmt><expr><name pos:line="512" pos:column="25">nextChar</name> <op:operator pos:line="512" pos:column="34">=</op:operator> <call><name><name pos:line="512" pos:column="36">_pEditView</name><op:operator pos:line="512" pos:column="46">-&gt;</op:operator><name pos:line="512" pos:column="48">execute</name></name><argument_list pos:line="512" pos:column="55">(<argument><expr><name pos:line="512" pos:column="56">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name><name pos:line="512" pos:column="71">result</name><op:operator pos:line="512" pos:column="77">.</op:operator><name pos:line="512" pos:column="78">end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="513" pos:column="25">styleAt</name> <op:operator pos:line="513" pos:column="33">=</op:operator> <call><name><name pos:line="513" pos:column="35">_pEditView</name><op:operator pos:line="513" pos:column="45">-&gt;</op:operator><name pos:line="513" pos:column="47">execute</name></name><argument_list pos:line="513" pos:column="54">(<argument><expr><name pos:line="513" pos:column="55">SCI_GETSTYLEAT</name></expr></argument>, <argument><expr><name><name pos:line="513" pos:column="71">result</name><op:operator pos:line="513" pos:column="77">.</op:operator><name pos:line="513" pos:column="78">start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
			<comment type="line" pos:line="515" pos:column="25">// Setup the parameters for the next search, if there is one.</comment>
			<if pos:line="516" pos:column="25">if <condition pos:line="516" pos:column="28">(<expr><name pos:line="516" pos:column="29">forwardSearch</name></expr>)</condition><then pos:line="516" pos:column="43">
			<block pos:line="517" pos:column="25">{
				<expr_stmt><expr><name pos:line="518" pos:column="33">searchStart</name> <op:operator pos:line="518" pos:column="45">=</op:operator> <name><name pos:line="518" pos:column="47">result</name><op:operator pos:line="518" pos:column="53">.</op:operator><name pos:line="518" pos:column="54">end</name></name> <op:operator pos:line="518" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="518" pos:column="60">1</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="520" pos:column="25">else
			<block pos:line="521" pos:column="25">{
				<expr_stmt><expr><name pos:line="522" pos:column="33">searchStart</name> <op:operator pos:line="522" pos:column="45">=</op:operator> <name><name pos:line="522" pos:column="47">result</name><op:operator pos:line="522" pos:column="53">.</op:operator><name pos:line="522" pos:column="54">start</name></name> <op:operator pos:line="522" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="522" pos:column="62">1</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
		
			<if pos:line="525" pos:column="25">if <condition pos:line="525" pos:column="28">(<expr><name pos:line="525" pos:column="29">styleAt</name> <op:operator pos:line="525" pos:column="37">!=</op:operator> <name pos:line="525" pos:column="40">SCE_H_CDATA</name> <op:operator pos:line="525" pos:column="52">&amp;&amp;</op:operator> <name pos:line="525" pos:column="55">styleAt</name> <op:operator pos:line="525" pos:column="63">!=</op:operator> <name pos:line="525" pos:column="66">SCE_H_SINGLESTRING</name> <op:operator pos:line="525" pos:column="85">&amp;&amp;</op:operator> <name pos:line="525" pos:column="88">styleAt</name> <op:operator pos:line="525" pos:column="96">!=</op:operator> <name pos:line="525" pos:column="99">SCE_H_DOUBLESTRING</name></expr>)</condition><then pos:line="525" pos:column="118"> <comment type="line" pos:line="525" pos:column="119">// If what we found was in CDATA section, it's not a valid tag.</comment>
			<block pos:line="526" pos:column="25">{
				<comment type="line" pos:line="527" pos:column="33">// Common case - '&gt;' follows the tag name directly</comment>
				<if pos:line="528" pos:column="33">if <condition pos:line="528" pos:column="36">(<expr><name pos:line="528" pos:column="37">nextChar</name> <op:operator pos:line="528" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="528" pos:column="49">'&gt;'</lit:literal></expr>)</condition><then pos:line="528" pos:column="53">
				<block pos:line="529" pos:column="33">{
					<expr_stmt><expr><name pos:line="530" pos:column="41">validCloseTag</name> <op:operator pos:line="530" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="530" pos:column="57">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="531" pos:column="41">closeTagFound</name><op:operator pos:line="531" pos:column="54">.</op:operator><name pos:line="531" pos:column="55">start</name></name> <op:operator pos:line="531" pos:column="61">=</op:operator> <name><name pos:line="531" pos:column="63">result</name><op:operator pos:line="531" pos:column="69">.</op:operator><name pos:line="531" pos:column="70">start</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="532" pos:column="41">closeTagFound</name><op:operator pos:line="532" pos:column="54">.</op:operator><name pos:line="532" pos:column="55">end</name></name> <op:operator pos:line="532" pos:column="59">=</op:operator> <name><name pos:line="532" pos:column="61">result</name><op:operator pos:line="532" pos:column="67">.</op:operator><name pos:line="532" pos:column="68">end</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="533" pos:column="41">closeTagFound</name><op:operator pos:line="533" pos:column="54">.</op:operator><name pos:line="533" pos:column="55">success</name></name> <op:operator pos:line="533" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="533" pos:column="65">true</lit:literal></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="535" pos:column="33">else <if pos:line="535" pos:column="38">if <condition pos:line="535" pos:column="41">(<expr><call><name pos:line="535" pos:column="42">isWhitespace</name><argument_list pos:line="535" pos:column="54">(<argument><expr><name pos:line="535" pos:column="55">nextChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="535" pos:column="65">  <comment type="line" pos:line="535" pos:column="67">// Otherwise, if it's whitespace, then allow whitespace until a '&gt;' - any other character is invalid.</comment>
				<block pos:line="536" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="537" pos:column="41">int</name></type> <name pos:line="537" pos:column="45">whitespacePoint</name> <init pos:line="537" pos:column="61">= <expr><name><name pos:line="537" pos:column="63">result</name><op:operator pos:line="537" pos:column="69">.</op:operator><name pos:line="537" pos:column="70">end</name></name></expr></init></decl>;</decl_stmt>
					<do pos:line="538" pos:column="41">do
					<block pos:line="539" pos:column="41">{
						<expr_stmt><expr><op:operator pos:line="540" pos:column="49">++</op:operator><name pos:line="540" pos:column="51">whitespacePoint</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="541" pos:column="49">nextChar</name> <op:operator pos:line="541" pos:column="58">=</op:operator> <call><name><name pos:line="541" pos:column="60">_pEditView</name><op:operator pos:line="541" pos:column="70">-&gt;</op:operator><name pos:line="541" pos:column="72">execute</name></name><argument_list pos:line="541" pos:column="79">(<argument><expr><name pos:line="541" pos:column="80">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="541" pos:column="95">whitespacePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
					}</block> while<condition pos:line="543" pos:column="48">(<expr><call><name pos:line="543" pos:column="49">isWhitespace</name><argument_list pos:line="543" pos:column="61">(<argument><expr><name pos:line="543" pos:column="62">nextChar</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
			
					<if pos:line="545" pos:column="41">if <condition pos:line="545" pos:column="44">(<expr><name pos:line="545" pos:column="45">nextChar</name> <op:operator pos:line="545" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="545" pos:column="57">'&gt;'</lit:literal></expr>)</condition><then pos:line="545" pos:column="61">
					<block pos:line="546" pos:column="41">{
						<expr_stmt><expr><name pos:line="547" pos:column="49">validCloseTag</name> <op:operator pos:line="547" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="547" pos:column="65">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="548" pos:column="49">closeTagFound</name><op:operator pos:line="548" pos:column="62">.</op:operator><name pos:line="548" pos:column="63">start</name></name> <op:operator pos:line="548" pos:column="69">=</op:operator> <name><name pos:line="548" pos:column="71">result</name><op:operator pos:line="548" pos:column="77">.</op:operator><name pos:line="548" pos:column="78">start</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="549" pos:column="49">closeTagFound</name><op:operator pos:line="549" pos:column="62">.</op:operator><name pos:line="549" pos:column="63">end</name></name> <op:operator pos:line="549" pos:column="67">=</op:operator> <name pos:line="549" pos:column="69">whitespacePoint</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="550" pos:column="49">closeTagFound</name><op:operator pos:line="550" pos:column="62">.</op:operator><name pos:line="550" pos:column="63">success</name></name> <op:operator pos:line="550" pos:column="71">=</op:operator> <lit:literal type="boolean" pos:line="550" pos:column="73">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>

	}</block> while <condition pos:line="556" pos:column="17">(<expr><name><name pos:line="556" pos:column="18">result</name><op:operator pos:line="556" pos:column="24">.</op:operator><name pos:line="556" pos:column="25">success</name></name> <op:operator pos:line="556" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="556" pos:column="36">!</op:operator><name pos:line="556" pos:column="37">validCloseTag</name></expr>)</condition>;</do>

	<return pos:line="558" pos:column="9">return <expr><name pos:line="558" pos:column="16">closeTagFound</name></expr>;</return>

}</block></function>

<function><type><name><name pos:line="562" pos:column="1">XmlMatchedTagsHighlighter</name><op:operator pos:line="562" pos:column="26">::</op:operator><name pos:line="562" pos:column="28">FindResult</name></name></type> <name><name pos:line="562" pos:column="39">XmlMatchedTagsHighlighter</name><op:operator pos:line="562" pos:column="64">::</op:operator><name pos:line="562" pos:column="66">findText</name></name><parameter_list pos:line="562" pos:column="74">(<param><decl><type><specifier pos:line="562" pos:column="75">const</specifier> <name pos:line="562" pos:column="81">char</name> <type:modifier pos:line="562" pos:column="86">*</type:modifier></type><name pos:line="562" pos:column="87">text</name></decl></param>, <param><decl><type><name pos:line="562" pos:column="93">int</name></type> <name pos:line="562" pos:column="97">start</name></decl></param>, <param><decl><type><name pos:line="562" pos:column="104">int</name></type> <name pos:line="562" pos:column="108">end</name></decl></param>, <param><decl><type><name pos:line="562" pos:column="113">int</name></type> <name pos:line="562" pos:column="117">flags</name></decl></param>)</parameter_list>
<block pos:line="563" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="564" pos:column="9">FindResult</name></type> <name pos:line="564" pos:column="20">returnValue</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="566" pos:column="9">Sci_TextToFind</name></type> <name pos:line="566" pos:column="24">search</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="567" pos:column="9">search</name><op:operator pos:line="567" pos:column="15">.</op:operator><name pos:line="567" pos:column="16">lpstrText</name></name> <op:operator pos:line="567" pos:column="26">=</op:operator> <call><name><name pos:line="567" pos:column="28">const_cast</name><argument_list pos:line="567" pos:column="38">&lt;<argument><expr><name pos:line="567" pos:column="39">char</name> <op:operator pos:line="567" pos:column="44">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="567" pos:column="46">(<argument><expr><name pos:line="567" pos:column="47">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="567" pos:column="54">// Grrrrrr</comment>
	<expr_stmt><expr><name><name pos:line="568" pos:column="9">search</name><op:operator pos:line="568" pos:column="15">.</op:operator><name pos:line="568" pos:column="16">chrg</name><op:operator pos:line="568" pos:column="20">.</op:operator><name pos:line="568" pos:column="21">cpMin</name></name> <op:operator pos:line="568" pos:column="27">=</op:operator> <name pos:line="568" pos:column="29">start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="569" pos:column="9">search</name><op:operator pos:line="569" pos:column="15">.</op:operator><name pos:line="569" pos:column="16">chrg</name><op:operator pos:line="569" pos:column="20">.</op:operator><name pos:line="569" pos:column="21">cpMax</name></name> <op:operator pos:line="569" pos:column="27">=</op:operator> <name pos:line="569" pos:column="29">end</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="570" pos:column="9">int</name></type> <name pos:line="570" pos:column="13">result</name> <init pos:line="570" pos:column="20">= <expr><call><name><name pos:line="570" pos:column="22">_pEditView</name><op:operator pos:line="570" pos:column="32">-&gt;</op:operator><name pos:line="570" pos:column="34">execute</name></name><argument_list pos:line="570" pos:column="41">(<argument><expr><name pos:line="570" pos:column="42">SCI_FINDTEXT</name></expr></argument>, <argument><expr><name pos:line="570" pos:column="56">flags</name></expr></argument>, <argument><expr><call><name><name pos:line="570" pos:column="63">reinterpret_cast</name><argument_list pos:line="570" pos:column="79">&lt;<argument><expr><name pos:line="570" pos:column="80">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="570" pos:column="87">(<argument><expr><op:operator pos:line="570" pos:column="88">&amp;</op:operator><name pos:line="570" pos:column="89">search</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="571" pos:column="9">if <condition pos:line="571" pos:column="12">(<expr><op:operator pos:line="571" pos:column="13">-</op:operator><lit:literal type="number" pos:line="571" pos:column="14">1</lit:literal> <op:operator pos:line="571" pos:column="16">==</op:operator> <name pos:line="571" pos:column="19">result</name></expr>)</condition><then pos:line="571" pos:column="26">
	<block pos:line="572" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="573" pos:column="17">returnValue</name><op:operator pos:line="573" pos:column="28">.</op:operator><name pos:line="573" pos:column="29">success</name></name> <op:operator pos:line="573" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="573" pos:column="39">false</lit:literal></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="575" pos:column="9">else
	<block pos:line="576" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="577" pos:column="17">returnValue</name><op:operator pos:line="577" pos:column="28">.</op:operator><name pos:line="577" pos:column="29">success</name></name> <op:operator pos:line="577" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="577" pos:column="39">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="578" pos:column="17">returnValue</name><op:operator pos:line="578" pos:column="28">.</op:operator><name pos:line="578" pos:column="29">start</name></name> <op:operator pos:line="578" pos:column="35">=</op:operator> <name><name pos:line="578" pos:column="37">search</name><op:operator pos:line="578" pos:column="43">.</op:operator><name pos:line="578" pos:column="44">chrgText</name><op:operator pos:line="578" pos:column="52">.</op:operator><name pos:line="578" pos:column="53">cpMin</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="579" pos:column="17">returnValue</name><op:operator pos:line="579" pos:column="28">.</op:operator><name pos:line="579" pos:column="29">end</name></name> <op:operator pos:line="579" pos:column="33">=</op:operator> <name><name pos:line="579" pos:column="35">search</name><op:operator pos:line="579" pos:column="41">.</op:operator><name pos:line="579" pos:column="42">chrgText</name><op:operator pos:line="579" pos:column="50">.</op:operator><name pos:line="579" pos:column="51">cpMax</name></name></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="581" pos:column="9">return <expr><name pos:line="581" pos:column="16">returnValue</name></expr>;</return>
}</block></function>

<function><type><name pos:line="584" pos:column="1">void</name></type> <name><name pos:line="584" pos:column="6">XmlMatchedTagsHighlighter</name><op:operator pos:line="584" pos:column="31">::</op:operator><name pos:line="584" pos:column="33">tagMatch</name></name><parameter_list pos:line="584" pos:column="41">(<param><decl><type><name pos:line="584" pos:column="42">bool</name></type> <name pos:line="584" pos:column="47">doHiliteAttr</name></decl></param>)</parameter_list> 
<block pos:line="585" pos:column="1">{
	<comment type="line" pos:line="586" pos:column="9">// Clean up all marks of previous action</comment>
	<expr_stmt><expr><call><name><name pos:line="587" pos:column="9">_pEditView</name><op:operator pos:line="587" pos:column="19">-&gt;</op:operator><name pos:line="587" pos:column="21">clearIndicator</name></name><argument_list pos:line="587" pos:column="35">(<argument><expr><name pos:line="587" pos:column="36">SCE_UNIVERSAL_TAGMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="588" pos:column="9">_pEditView</name><op:operator pos:line="588" pos:column="19">-&gt;</op:operator><name pos:line="588" pos:column="21">clearIndicator</name></name><argument_list pos:line="588" pos:column="35">(<argument><expr><name pos:line="588" pos:column="36">SCE_UNIVERSAL_TAGATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="590" pos:column="9">// Detect the current lang type. It works only with html and xml</comment>
	<decl_stmt><decl><type><name pos:line="591" pos:column="9">LangType</name></type> <name pos:line="591" pos:column="18">lang</name> <init pos:line="591" pos:column="23">= <expr><op:operator pos:line="591" pos:column="25">(</op:operator><call><name><name pos:line="591" pos:column="26">_pEditView</name><op:operator pos:line="591" pos:column="36">-&gt;</op:operator><name pos:line="591" pos:column="38">getCurrentBuffer</name></name><argument_list pos:line="591" pos:column="54">()</argument_list></call><op:operator pos:line="591" pos:column="56">)</op:operator><op:operator pos:line="591" pos:column="57">-&gt;</op:operator><call><name pos:line="591" pos:column="59">getLangType</name><argument_list pos:line="591" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="593" pos:column="9">if <condition pos:line="593" pos:column="12">(<expr><name pos:line="593" pos:column="13">lang</name> <op:operator pos:line="593" pos:column="18">!=</op:operator> <name pos:line="593" pos:column="21">L_XML</name> <op:operator pos:line="593" pos:column="27">&amp;&amp;</op:operator> <name pos:line="593" pos:column="30">lang</name> <op:operator pos:line="593" pos:column="35">!=</op:operator> <name pos:line="593" pos:column="38">L_HTML</name> <op:operator pos:line="593" pos:column="45">&amp;&amp;</op:operator> <name pos:line="593" pos:column="48">lang</name> <op:operator pos:line="593" pos:column="53">!=</op:operator> <name pos:line="593" pos:column="56">L_PHP</name> <op:operator pos:line="593" pos:column="62">&amp;&amp;</op:operator> <name pos:line="593" pos:column="65">lang</name> <op:operator pos:line="593" pos:column="70">!=</op:operator> <name pos:line="593" pos:column="73">L_ASP</name> <op:operator pos:line="593" pos:column="79">&amp;&amp;</op:operator> <name pos:line="593" pos:column="82">lang</name> <op:operator pos:line="593" pos:column="87">!=</op:operator> <name pos:line="593" pos:column="90">L_JSP</name></expr>)</condition><then pos:line="593" pos:column="96">
		<return pos:line="594" pos:column="17">return;</return></then></if>

	<comment type="line" pos:line="596" pos:column="9">// Get the original targets and search options to restore after tag matching operation</comment>
	<decl_stmt><decl><type><name pos:line="597" pos:column="9">int</name></type> <name pos:line="597" pos:column="13">originalStartPos</name> <init pos:line="597" pos:column="30">= <expr><call><name><name pos:line="597" pos:column="32">_pEditView</name><op:operator pos:line="597" pos:column="42">-&gt;</op:operator><name pos:line="597" pos:column="44">execute</name></name><argument_list pos:line="597" pos:column="51">(<argument><expr><name pos:line="597" pos:column="52">SCI_GETTARGETSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="598" pos:column="9">int</name></type> <name pos:line="598" pos:column="13">originalEndPos</name> <init pos:line="598" pos:column="28">= <expr><call><name><name pos:line="598" pos:column="30">_pEditView</name><op:operator pos:line="598" pos:column="40">-&gt;</op:operator><name pos:line="598" pos:column="42">execute</name></name><argument_list pos:line="598" pos:column="49">(<argument><expr><name pos:line="598" pos:column="50">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="599" pos:column="9">int</name></type> <name pos:line="599" pos:column="13">originalSearchFlags</name> <init pos:line="599" pos:column="33">= <expr><call><name><name pos:line="599" pos:column="35">_pEditView</name><op:operator pos:line="599" pos:column="45">-&gt;</op:operator><name pos:line="599" pos:column="47">execute</name></name><argument_list pos:line="599" pos:column="54">(<argument><expr><name pos:line="599" pos:column="55">SCI_GETSEARCHFLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="601" pos:column="9">XmlMatchedTagsPos</name></type> <name pos:line="601" pos:column="27">xmlTags</name></decl>;</decl_stmt>

    <comment type="line" pos:line="603" pos:column="5">// Detect if it's a xml/html tag. If yes, Colour it!</comment>
	<if pos:line="604" pos:column="9">if <condition pos:line="604" pos:column="12">(<expr><call><name pos:line="604" pos:column="13">getXmlMatchedTagsPos</name><argument_list pos:line="604" pos:column="33">(<argument><expr><name pos:line="604" pos:column="34">xmlTags</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="604" pos:column="43">
	<block pos:line="605" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="606" pos:column="17">_pEditView</name><op:operator pos:line="606" pos:column="27">-&gt;</op:operator><name pos:line="606" pos:column="29">execute</name></name><argument_list pos:line="606" pos:column="36">(<argument><expr><name pos:line="606" pos:column="37">SCI_SETINDICATORCURRENT</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="62">SCE_UNIVERSAL_TAGMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="607" pos:column="17">int</name></type> <name pos:line="607" pos:column="21">openTagTailLen</name> <init pos:line="607" pos:column="36">= <expr><lit:literal type="number" pos:line="607" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="609" pos:column="17">// Colourising the close tag firstly</comment>
		<if pos:line="610" pos:column="17">if <condition pos:line="610" pos:column="20">(<expr><op:operator pos:line="610" pos:column="21">(</op:operator><name><name pos:line="610" pos:column="22">xmlTags</name><op:operator pos:line="610" pos:column="29">.</op:operator><name pos:line="610" pos:column="30">tagCloseStart</name></name> <op:operator pos:line="610" pos:column="44">!=</op:operator> <op:operator pos:line="610" pos:column="47">-</op:operator><lit:literal type="number" pos:line="610" pos:column="48">1</lit:literal><op:operator pos:line="610" pos:column="49">)</op:operator> <op:operator pos:line="610" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="610" pos:column="54">(</op:operator><name><name pos:line="610" pos:column="55">xmlTags</name><op:operator pos:line="610" pos:column="62">.</op:operator><name pos:line="610" pos:column="63">tagCloseEnd</name></name> <op:operator pos:line="610" pos:column="75">!=</op:operator> <op:operator pos:line="610" pos:column="78">-</op:operator><lit:literal type="number" pos:line="610" pos:column="79">1</lit:literal><op:operator pos:line="610" pos:column="80">)</op:operator></expr>)</condition><then pos:line="610" pos:column="82">
		<block pos:line="611" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="612" pos:column="25">_pEditView</name><op:operator pos:line="612" pos:column="35">-&gt;</op:operator><name pos:line="612" pos:column="37">execute</name></name><argument_list pos:line="612" pos:column="44">(<argument><expr><name pos:line="612" pos:column="45">SCI_INDICATORFILLRANGE</name></expr></argument>,  <argument><expr><name><name pos:line="612" pos:column="70">xmlTags</name><op:operator pos:line="612" pos:column="77">.</op:operator><name pos:line="612" pos:column="78">tagCloseStart</name></name></expr></argument>, <argument><expr><name><name pos:line="612" pos:column="93">xmlTags</name><op:operator pos:line="612" pos:column="100">.</op:operator><name pos:line="612" pos:column="101">tagCloseEnd</name></name> <op:operator pos:line="612" pos:column="113">-</op:operator> <name><name pos:line="612" pos:column="115">xmlTags</name><op:operator pos:line="612" pos:column="122">.</op:operator><name pos:line="612" pos:column="123">tagCloseStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="613" pos:column="25">// tag close is present, so it's not single tag</comment>
			<expr_stmt><expr><name pos:line="614" pos:column="25">openTagTailLen</name> <op:operator pos:line="614" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="614" pos:column="42">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="617" pos:column="17">// Colourising the open tag</comment>
		<expr_stmt><expr><call><name><name pos:line="618" pos:column="17">_pEditView</name><op:operator pos:line="618" pos:column="27">-&gt;</op:operator><name pos:line="618" pos:column="29">execute</name></name><argument_list pos:line="618" pos:column="36">(<argument><expr><name pos:line="618" pos:column="37">SCI_INDICATORFILLRANGE</name></expr></argument>,  <argument><expr><name><name pos:line="618" pos:column="62">xmlTags</name><op:operator pos:line="618" pos:column="69">.</op:operator><name pos:line="618" pos:column="70">tagOpenStart</name></name></expr></argument>, <argument><expr><name><name pos:line="618" pos:column="84">xmlTags</name><op:operator pos:line="618" pos:column="91">.</op:operator><name pos:line="618" pos:column="92">tagNameEnd</name></name> <op:operator pos:line="618" pos:column="103">-</op:operator> <name><name pos:line="618" pos:column="105">xmlTags</name><op:operator pos:line="618" pos:column="112">.</op:operator><name pos:line="618" pos:column="113">tagOpenStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="619" pos:column="17">_pEditView</name><op:operator pos:line="619" pos:column="27">-&gt;</op:operator><name pos:line="619" pos:column="29">execute</name></name><argument_list pos:line="619" pos:column="36">(<argument><expr><name pos:line="619" pos:column="37">SCI_INDICATORFILLRANGE</name></expr></argument>,  <argument><expr><name><name pos:line="619" pos:column="62">xmlTags</name><op:operator pos:line="619" pos:column="69">.</op:operator><name pos:line="619" pos:column="70">tagOpenEnd</name></name> <op:operator pos:line="619" pos:column="81">-</op:operator> <name pos:line="619" pos:column="83">openTagTailLen</name></expr></argument>, <argument><expr><name pos:line="619" pos:column="99">openTagTailLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        
        <comment type="line" pos:line="622" pos:column="9">// Colouising its attributs</comment>
        <if pos:line="623" pos:column="9">if <condition pos:line="623" pos:column="12">(<expr><name pos:line="623" pos:column="13">doHiliteAttr</name></expr>)</condition><then pos:line="623" pos:column="26">
		<block pos:line="624" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="625" pos:column="25">vector</name><argument_list pos:line="625" pos:column="31">&lt; <argument><expr><name><name pos:line="625" pos:column="33">pair</name><argument_list pos:line="625" pos:column="37">&lt;<argument><expr><name pos:line="625" pos:column="38">int</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="43">int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name pos:line="625" pos:column="50">attributes</name> <init pos:line="625" pos:column="61">= <expr><call><name pos:line="625" pos:column="63">getAttributesPos</name><argument_list pos:line="625" pos:column="79">(<argument><expr><name><name pos:line="625" pos:column="80">xmlTags</name><op:operator pos:line="625" pos:column="87">.</op:operator><name pos:line="625" pos:column="88">tagNameEnd</name></name></expr></argument>, <argument><expr><name><name pos:line="625" pos:column="100">xmlTags</name><op:operator pos:line="625" pos:column="107">.</op:operator><name pos:line="625" pos:column="108">tagOpenEnd</name></name> <op:operator pos:line="625" pos:column="119">-</op:operator> <name pos:line="625" pos:column="121">openTagTailLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="626" pos:column="25">_pEditView</name><op:operator pos:line="626" pos:column="35">-&gt;</op:operator><name pos:line="626" pos:column="37">execute</name></name><argument_list pos:line="626" pos:column="44">(<argument><expr><name pos:line="626" pos:column="45">SCI_SETINDICATORCURRENT</name></expr></argument>,  <argument><expr><name pos:line="626" pos:column="71">SCE_UNIVERSAL_TAGATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for pos:line="627" pos:column="25">for (<init><decl><type><name pos:line="627" pos:column="30">size_t</name></type> <name pos:line="627" pos:column="37">i</name> <init pos:line="627" pos:column="39">= <expr><lit:literal type="number" pos:line="627" pos:column="41">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="627" pos:column="45">i</name> <op:operator pos:line="627" pos:column="47">&lt;</op:operator> <call><name><name pos:line="627" pos:column="49">attributes</name><op:operator pos:line="627" pos:column="59">.</op:operator><name pos:line="627" pos:column="60">size</name></name><argument_list pos:line="627" pos:column="64">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="627" pos:column="69">i</name><op:operator pos:line="627" pos:column="70">++</op:operator></expr></incr>)
			<block pos:line="628" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="629" pos:column="33">_pEditView</name><op:operator pos:line="629" pos:column="43">-&gt;</op:operator><name pos:line="629" pos:column="45">execute</name></name><argument_list pos:line="629" pos:column="52">(<argument><expr><name pos:line="629" pos:column="53">SCI_INDICATORFILLRANGE</name></expr></argument>,  <argument><expr><name><name pos:line="629" pos:column="78">attributes</name><index pos:line="629" pos:column="88">[<expr><name pos:line="629" pos:column="89">i</name></expr>]</index></name><op:operator pos:line="629" pos:column="91">.</op:operator><name pos:line="629" pos:column="92">first</name></expr></argument>, <argument><expr><name><name pos:line="629" pos:column="99">attributes</name><index pos:line="629" pos:column="109">[<expr><name pos:line="629" pos:column="110">i</name></expr>]</index></name><op:operator pos:line="629" pos:column="112">.</op:operator><name pos:line="629" pos:column="113">second</name> <op:operator pos:line="629" pos:column="120">-</op:operator> <name><name pos:line="629" pos:column="122">attributes</name><index pos:line="629" pos:column="132">[<expr><name pos:line="629" pos:column="133">i</name></expr>]</index></name><op:operator pos:line="629" pos:column="135">.</op:operator><name pos:line="629" pos:column="136">first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
        }</block></then></if>

        <comment type="line" pos:line="633" pos:column="9">// Colouising indent guide line position</comment>
		<if pos:line="634" pos:column="17">if <condition pos:line="634" pos:column="20">(<expr><call><name><name pos:line="634" pos:column="21">_pEditView</name><op:operator pos:line="634" pos:column="31">-&gt;</op:operator><name pos:line="634" pos:column="33">isShownIndentGuide</name></name><argument_list pos:line="634" pos:column="51">()</argument_list></call></expr>)</condition><then pos:line="634" pos:column="54">
		<block pos:line="635" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="636" pos:column="25">int</name></type> <name pos:line="636" pos:column="29">columnAtCaret</name>  <init pos:line="636" pos:column="44">= <expr><call><name pos:line="636" pos:column="46">int</name><argument_list pos:line="636" pos:column="49">(<argument><expr><call><name><name pos:line="636" pos:column="50">_pEditView</name><op:operator pos:line="636" pos:column="60">-&gt;</op:operator><name pos:line="636" pos:column="62">execute</name></name><argument_list pos:line="636" pos:column="69">(<argument><expr><name pos:line="636" pos:column="70">SCI_GETCOLUMN</name></expr></argument>, <argument><expr><name><name pos:line="636" pos:column="85">xmlTags</name><op:operator pos:line="636" pos:column="92">.</op:operator><name pos:line="636" pos:column="93">tagOpenStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="637" pos:column="25">int</name></type> <name pos:line="637" pos:column="29">columnOpposite</name> <init pos:line="637" pos:column="44">= <expr><call><name pos:line="637" pos:column="46">int</name><argument_list pos:line="637" pos:column="49">(<argument><expr><call><name><name pos:line="637" pos:column="50">_pEditView</name><op:operator pos:line="637" pos:column="60">-&gt;</op:operator><name pos:line="637" pos:column="62">execute</name></name><argument_list pos:line="637" pos:column="69">(<argument><expr><name pos:line="637" pos:column="70">SCI_GETCOLUMN</name></expr></argument>, <argument><expr><name><name pos:line="637" pos:column="85">xmlTags</name><op:operator pos:line="637" pos:column="92">.</op:operator><name pos:line="637" pos:column="93">tagCloseStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="639" pos:column="25">int</name></type> <name pos:line="639" pos:column="29">lineAtCaret</name>  <init pos:line="639" pos:column="42">= <expr><call><name pos:line="639" pos:column="44">int</name><argument_list pos:line="639" pos:column="47">(<argument><expr><call><name><name pos:line="639" pos:column="48">_pEditView</name><op:operator pos:line="639" pos:column="58">-&gt;</op:operator><name pos:line="639" pos:column="60">execute</name></name><argument_list pos:line="639" pos:column="67">(<argument><expr><name pos:line="639" pos:column="68">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="639" pos:column="90">xmlTags</name><op:operator pos:line="639" pos:column="97">.</op:operator><name pos:line="639" pos:column="98">tagOpenStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="640" pos:column="25">int</name></type> <name pos:line="640" pos:column="29">lineOpposite</name> <init pos:line="640" pos:column="42">= <expr><call><name pos:line="640" pos:column="44">int</name><argument_list pos:line="640" pos:column="47">(<argument><expr><call><name><name pos:line="640" pos:column="48">_pEditView</name><op:operator pos:line="640" pos:column="58">-&gt;</op:operator><name pos:line="640" pos:column="60">execute</name></name><argument_list pos:line="640" pos:column="67">(<argument><expr><name pos:line="640" pos:column="68">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="640" pos:column="90">xmlTags</name><op:operator pos:line="640" pos:column="97">.</op:operator><name pos:line="640" pos:column="98">tagCloseStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="642" pos:column="25">if <condition pos:line="642" pos:column="28">(<expr><name><name pos:line="642" pos:column="29">xmlTags</name><op:operator pos:line="642" pos:column="36">.</op:operator><name pos:line="642" pos:column="37">tagCloseStart</name></name> <op:operator pos:line="642" pos:column="51">!=</op:operator> <op:operator pos:line="642" pos:column="54">-</op:operator><lit:literal type="number" pos:line="642" pos:column="55">1</lit:literal> <op:operator pos:line="642" pos:column="57">&amp;&amp;</op:operator> <name pos:line="642" pos:column="60">lineAtCaret</name> <op:operator pos:line="642" pos:column="72">!=</op:operator> <name pos:line="642" pos:column="75">lineOpposite</name></expr>)</condition><then pos:line="642" pos:column="88">
			<block pos:line="643" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="644" pos:column="33">_pEditView</name><op:operator pos:line="644" pos:column="43">-&gt;</op:operator><name pos:line="644" pos:column="45">execute</name></name><argument_list pos:line="644" pos:column="52">(<argument><expr><name pos:line="644" pos:column="53">SCI_BRACEHIGHLIGHT</name></expr></argument>, <argument><expr><name><name pos:line="644" pos:column="73">xmlTags</name><op:operator pos:line="644" pos:column="80">.</op:operator><name pos:line="644" pos:column="81">tagOpenStart</name></name></expr></argument>, <argument><expr><name><name pos:line="644" pos:column="95">xmlTags</name><op:operator pos:line="644" pos:column="102">.</op:operator><name pos:line="644" pos:column="103">tagCloseEnd</name></name><op:operator pos:line="644" pos:column="114">-</op:operator><lit:literal type="number" pos:line="644" pos:column="115">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="645" pos:column="33">_pEditView</name><op:operator pos:line="645" pos:column="43">-&gt;</op:operator><name pos:line="645" pos:column="45">execute</name></name><argument_list pos:line="645" pos:column="52">(<argument><expr><name pos:line="645" pos:column="53">SCI_SETHIGHLIGHTGUIDE</name></expr></argument>, <argument><expr><op:operator pos:line="645" pos:column="76">(</op:operator><name pos:line="645" pos:column="77">columnAtCaret</name> <op:operator pos:line="645" pos:column="91">&lt;</op:operator> <name pos:line="645" pos:column="93">columnOpposite</name><op:operator pos:line="645" pos:column="107">)</op:operator><op:operator pos:line="645" pos:column="108">?</op:operator><name pos:line="645" pos:column="109">columnAtCaret</name><op:operator pos:line="645" pos:column="122">:</op:operator><name pos:line="645" pos:column="123">columnOpposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>

	<comment type="line" pos:line="650" pos:column="9">// restore the original targets and search options to avoid the conflit with search/replace function</comment>
	<expr_stmt><expr><call><name><name pos:line="651" pos:column="9">_pEditView</name><op:operator pos:line="651" pos:column="19">-&gt;</op:operator><name pos:line="651" pos:column="21">execute</name></name><argument_list pos:line="651" pos:column="28">(<argument><expr><name pos:line="651" pos:column="29">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="651" pos:column="49">originalStartPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="652" pos:column="9">_pEditView</name><op:operator pos:line="652" pos:column="19">-&gt;</op:operator><name pos:line="652" pos:column="21">execute</name></name><argument_list pos:line="652" pos:column="28">(<argument><expr><name pos:line="652" pos:column="29">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="652" pos:column="47">originalEndPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="653" pos:column="9">_pEditView</name><op:operator pos:line="653" pos:column="19">-&gt;</op:operator><name pos:line="653" pos:column="21">execute</name></name><argument_list pos:line="653" pos:column="28">(<argument><expr><name pos:line="653" pos:column="29">SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name pos:line="653" pos:column="49">originalSearchFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
