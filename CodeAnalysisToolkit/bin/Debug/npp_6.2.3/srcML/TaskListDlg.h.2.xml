<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\TaskList\TaskListDlg.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">TASKLISTDLG_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">TASKLISTDLG_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">TASKLISTDLGRC_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"TaskListDlg_rc.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//TASKLISTDLGRC_H</comment>

<cpp:ifndef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifndef</cpp:directive> <name pos:line="36" pos:column="9">TASKLIST_H</name></cpp:ifndef>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"TaskList.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="38" pos:column="8">//TASKLIST_H</comment>
<comment type="block" pos:line="39" pos:column="1">/*
#ifndef IMAGE_LIST_H
#include "ImageListSet.h"
#endif //IMAGE_LIST_H
*/</comment>
<cpp:ifndef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifndef</cpp:directive> <name pos:line="44" pos:column="9">NOTEPAD_PLUS_MSGS_H</name></cpp:ifndef>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"Notepad_plus_msgs.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="46" pos:column="8">//NOTEPAD_PLUS_MSGS_H</comment>

<cpp:define pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="48" pos:column="9">TASKLIST_USER</name></cpp:macro>    <cpp:value pos:line="48" pos:column="26">(WM_USER + 8000)</cpp:value></cpp:define>
	<cpp:define pos:line="49" pos:column="9">#<cpp:directive pos:line="49" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="49" pos:column="17">WM_GETTASKLISTINFO</name></cpp:macro> <cpp:value pos:line="49" pos:column="36">(TASKLIST_USER + 01)</cpp:value></cpp:define>

<struct pos:line="51" pos:column="1">struct <name pos:line="51" pos:column="8">TaskLstFnStatus</name> <block pos:line="51" pos:column="24">{<public type="default" pos:line="51" pos:column="25">
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">int</name></type> <name pos:line="52" pos:column="13">_iView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">int</name></type> <name pos:line="53" pos:column="13">_docIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">generic_string</name></type> <name pos:line="54" pos:column="24">_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">int</name></type> <name pos:line="55" pos:column="13">_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">void</name> <type:modifier pos:line="56" pos:column="14">*</type:modifier></type><name pos:line="56" pos:column="15">_bufID</name></decl>;</decl_stmt>
	<constructor><name pos:line="57" pos:column="9">TaskLstFnStatus</name><parameter_list pos:line="57" pos:column="24">(<param><decl><type><name pos:line="57" pos:column="25">generic_string</name></type> <name pos:line="57" pos:column="40">str</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="45">int</name></type> <name pos:line="57" pos:column="49">status</name></decl></param>)</parameter_list> <member_list pos:line="57" pos:column="57">: <call><name pos:line="57" pos:column="59">_fn</name><argument_list pos:line="57" pos:column="62">(<argument><expr><name pos:line="57" pos:column="63">str</name></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="67">,</op:operator> <call><name pos:line="57" pos:column="69">_status</name><argument_list pos:line="57" pos:column="76">(<argument><expr><name pos:line="57" pos:column="77">status</name></expr></argument>)</argument_list></call></member_list><block pos:line="57" pos:column="84">{}</block></constructor><empty_stmt pos:line="57" pos:column="86">;</empty_stmt>
	<constructor><name pos:line="58" pos:column="9">TaskLstFnStatus</name><parameter_list pos:line="58" pos:column="24">(<param><decl><type><name pos:line="58" pos:column="25">int</name></type> <name pos:line="58" pos:column="29">iView</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="36">int</name></type> <name pos:line="58" pos:column="40">docIndex</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="50">generic_string</name></type> <name pos:line="58" pos:column="65">str</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="70">int</name></type> <name pos:line="58" pos:column="74">status</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="82">void</name> <type:modifier pos:line="58" pos:column="87">*</type:modifier></type><name pos:line="58" pos:column="88">bufID</name></decl></param>)</parameter_list> <member_list pos:line="58" pos:column="95">: 
	<call><name pos:line="59" pos:column="9">_iView</name><argument_list pos:line="59" pos:column="15">(<argument><expr><name pos:line="59" pos:column="16">iView</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="22">,</op:operator> <call><name pos:line="59" pos:column="24">_docIndex</name><argument_list pos:line="59" pos:column="33">(<argument><expr><name pos:line="59" pos:column="34">docIndex</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="43">,</op:operator> <call><name pos:line="59" pos:column="45">_fn</name><argument_list pos:line="59" pos:column="48">(<argument><expr><name pos:line="59" pos:column="49">str</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="53">,</op:operator> <call><name pos:line="59" pos:column="55">_status</name><argument_list pos:line="59" pos:column="62">(<argument><expr><name pos:line="59" pos:column="63">status</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="70">,</op:operator> <call><name pos:line="59" pos:column="72">_bufID</name><argument_list pos:line="59" pos:column="78">(<argument><expr><name pos:line="59" pos:column="79">bufID</name></expr></argument>)</argument_list></call> </member_list><block pos:line="59" pos:column="86">{}</block></constructor><empty_stmt pos:line="59" pos:column="88">;</empty_stmt>
</public>}</block>;</struct>

<struct pos:line="62" pos:column="1">struct <name pos:line="62" pos:column="8">TaskListInfo</name> <block pos:line="62" pos:column="21">{<public type="default" pos:line="62" pos:column="22">
	<decl_stmt><decl><type><name><name pos:line="63" pos:column="9">std</name><op:operator pos:line="63" pos:column="12">::</op:operator><name><name pos:line="63" pos:column="14">vector</name><argument_list pos:line="63" pos:column="20">&lt;<argument><expr><name pos:line="63" pos:column="21">TaskLstFnStatus</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="63" pos:column="38">_tlfsLst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">int</name></type> <name pos:line="64" pos:column="13">_currentIndex</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier pos:line="67" pos:column="1">static</specifier> <name pos:line="67" pos:column="8">HWND</name></type> <name pos:line="67" pos:column="13">hWndServer</name> <init pos:line="67" pos:column="24">= <expr><name pos:line="67" pos:column="26">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="68" pos:column="1">static</specifier> <name pos:line="68" pos:column="8">HHOOK</name></type> <name pos:line="68" pos:column="14">hook</name> <init pos:line="68" pos:column="19">= <expr><name pos:line="68" pos:column="21">NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier pos:line="70" pos:column="1">static</specifier> <name pos:line="70" pos:column="8">LRESULT</name> <name pos:line="70" pos:column="16">CALLBACK</name></type> <name pos:line="70" pos:column="25">hookProc</name><parameter_list pos:line="70" pos:column="33">(<param><decl><type><name pos:line="70" pos:column="34">UINT</name></type> <name pos:line="70" pos:column="39">nCode</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="46">WPARAM</name></type> <name pos:line="70" pos:column="53">wParam</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="61">LPARAM</name></type> <name pos:line="70" pos:column="68">lParam</name></decl></param>)</parameter_list>;</function_decl>

<class pos:line="72" pos:column="1">class <name pos:line="72" pos:column="7">TaskListDlg</name> <super pos:line="72" pos:column="19">: <specifier pos:line="72" pos:column="21">public</specifier> <name pos:line="72" pos:column="28">StaticDialog</name></super>
<block pos:line="73" pos:column="1">{<private type="default" pos:line="73" pos:column="2">
</private><public pos:line="74" pos:column="1">public :	
        <constructor><name pos:line="75" pos:column="9">TaskListDlg</name><parameter_list pos:line="75" pos:column="20">()</parameter_list> <member_list pos:line="75" pos:column="23">: <call><name pos:line="75" pos:column="25">StaticDialog</name><argument_list pos:line="75" pos:column="37">()</argument_list></call> </member_list><block pos:line="75" pos:column="40">{}</block></constructor><empty_stmt pos:line="75" pos:column="42">;</empty_stmt>
		<function><type><name pos:line="76" pos:column="17">void</name></type> <name pos:line="76" pos:column="22">init</name><parameter_list pos:line="76" pos:column="26">(<param><decl><type><name pos:line="76" pos:column="27">HINSTANCE</name></type> <name pos:line="76" pos:column="37">hInst</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="44">HWND</name></type> <name pos:line="76" pos:column="49">parent</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="57">HIMAGELIST</name></type> <name pos:line="76" pos:column="68">hImgLst</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="77">bool</name></type> <name pos:line="76" pos:column="82">dir</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="87">{
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Window</name><op:operator pos:line="77" pos:column="19">::</op:operator><name pos:line="77" pos:column="21">init</name></name><argument_list pos:line="77" pos:column="25">(<argument><expr><name pos:line="77" pos:column="26">hInst</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="33">parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="78" pos:column="25">_hImalist</name> <op:operator pos:line="78" pos:column="35">=</op:operator> <name pos:line="78" pos:column="37">hImgLst</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="79" pos:column="25">_initDir</name> <op:operator pos:line="79" pos:column="34">=</op:operator> <name pos:line="79" pos:column="36">dir</name></expr>;</expr_stmt>
        }</block></function><empty_stmt pos:line="80" pos:column="10">;</empty_stmt>
        <function_decl><type><name pos:line="81" pos:column="9">int</name></type> <name pos:line="81" pos:column="13">doDialog</name><parameter_list pos:line="81" pos:column="21">(<param><decl><type><name pos:line="81" pos:column="22">bool</name></type> <name pos:line="81" pos:column="27">isRTL</name> <init pos:line="81" pos:column="33">= <expr><lit:literal type="boolean" pos:line="81" pos:column="35">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
		<function><type><specifier pos:line="82" pos:column="17">virtual</specifier> <name pos:line="82" pos:column="25">void</name></type> <name pos:line="82" pos:column="30">destroy</name><parameter_list pos:line="82" pos:column="37">()</parameter_list> <block pos:line="82" pos:column="40">{}</block></function><empty_stmt pos:line="82" pos:column="42">;</empty_stmt>

</public><protected pos:line="84" pos:column="1">protected :
	<function_decl><type><name pos:line="85" pos:column="9">BOOL</name> <name pos:line="85" pos:column="14">CALLBACK</name></type> <name pos:line="85" pos:column="23">run_dlgProc</name><parameter_list pos:line="85" pos:column="34">(<param><decl><type><name pos:line="85" pos:column="35">UINT</name></type> <name pos:line="85" pos:column="40">Message</name></decl></param>, <param><decl><type><name pos:line="85" pos:column="49">WPARAM</name></type> <name pos:line="85" pos:column="56">wParam</name></decl></param>, <param><decl><type><name pos:line="85" pos:column="64">LPARAM</name></type> <name pos:line="85" pos:column="71">lParam</name></decl></param>)</parameter_list>;</function_decl>

</protected><private pos:line="87" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">TaskList</name></type> <name pos:line="88" pos:column="18">_taskList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="89" pos:column="9">TaskListInfo</name></type> <name pos:line="89" pos:column="22">_taskListInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="90" pos:column="9">HIMAGELIST</name></type> <name pos:line="90" pos:column="20">_hImalist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="91" pos:column="9">bool</name></type> <name pos:line="91" pos:column="14">_initDir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="92" pos:column="9">HHOOK</name></type> <name pos:line="92" pos:column="15">_hHooker</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="94" pos:column="9">void</name></type> <name pos:line="94" pos:column="14">drawItem</name><parameter_list pos:line="94" pos:column="22">(<param><decl><type><name pos:line="94" pos:column="23">LPDRAWITEMSTRUCT</name></type> <name pos:line="94" pos:column="40">lpDrawItemStruct</name></decl></param>)</parameter_list>;</function_decl>
</private>}</block>;</class>


<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="98" pos:column="8">// TASKLISTDLG_H</comment>
</unit>
