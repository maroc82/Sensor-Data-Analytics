<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexTAL.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexTAL.cxx
 ** Lexer for TAL
 ** Based on LexPascal.cxx
 ** Written by Laurent le Tynevez
 ** Updated by Simon Steele &lt;s.steele@pnotepad.org&gt; September 2002
 ** Updated by Mathias Rauen &lt;scite@madshi.net&gt; May 2003 (Delphi adjustments)
 ** Updated by Rod Falck, Aug 2006 Converted to TAL
 **/</comment>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="33" pos:column="1">inline</specifier> <name pos:line="33" pos:column="8">bool</name></type> <name pos:line="33" pos:column="13">isTALoperator</name><parameter_list pos:line="33" pos:column="26">(<param><decl><type><name pos:line="33" pos:column="27">char</name></type> <name pos:line="33" pos:column="32">ch</name></decl></param>)</parameter_list>
	<block pos:line="34" pos:column="9">{
	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">ch</name> <op:operator pos:line="35" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="22">'\''</lit:literal> <op:operator pos:line="35" pos:column="27">||</op:operator> <name pos:line="35" pos:column="30">ch</name> <op:operator pos:line="35" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="36">'@'</lit:literal> <op:operator pos:line="35" pos:column="40">||</op:operator> <name pos:line="35" pos:column="43">ch</name> <op:operator pos:line="35" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="49">'#'</lit:literal> <op:operator pos:line="35" pos:column="53">||</op:operator> <call><name pos:line="35" pos:column="56">isoperator</name><argument_list pos:line="35" pos:column="66">(<argument><expr><name pos:line="35" pos:column="67">ch</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

<function><type><specifier pos:line="38" pos:column="1">inline</specifier> <name pos:line="38" pos:column="8">bool</name></type> <name pos:line="38" pos:column="13">isTALwordchar</name><parameter_list pos:line="38" pos:column="26">(<param><decl><type><name pos:line="38" pos:column="27">char</name></type> <name pos:line="38" pos:column="32">ch</name></decl></param>)</parameter_list>
	<block pos:line="39" pos:column="9">{
	<return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">ch</name> <op:operator pos:line="40" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="22">'$'</lit:literal> <op:operator pos:line="40" pos:column="26">||</op:operator> <name pos:line="40" pos:column="29">ch</name> <op:operator pos:line="40" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="35">'^'</lit:literal> <op:operator pos:line="40" pos:column="39">||</op:operator> <call><name pos:line="40" pos:column="42">iswordchar</name><argument_list pos:line="40" pos:column="52">(<argument><expr><name pos:line="40" pos:column="53">ch</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

<function><type><specifier pos:line="43" pos:column="1">inline</specifier> <name pos:line="43" pos:column="8">bool</name></type> <name pos:line="43" pos:column="13">isTALwordstart</name><parameter_list pos:line="43" pos:column="27">(<param><decl><type><name pos:line="43" pos:column="28">char</name></type> <name pos:line="43" pos:column="33">ch</name></decl></param>)</parameter_list>
	<block pos:line="44" pos:column="9">{
	<return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">ch</name> <op:operator pos:line="45" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="22">'$'</lit:literal> <op:operator pos:line="45" pos:column="26">||</op:operator> <name pos:line="45" pos:column="29">ch</name> <op:operator pos:line="45" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="35">'^'</lit:literal> <op:operator pos:line="45" pos:column="39">||</op:operator> <call><name pos:line="45" pos:column="42">iswordstart</name><argument_list pos:line="45" pos:column="53">(<argument><expr><name pos:line="45" pos:column="54">ch</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

<function><type><specifier pos:line="48" pos:column="1">static</specifier> <name pos:line="48" pos:column="8">void</name></type> <name pos:line="48" pos:column="13">getRange</name><parameter_list pos:line="48" pos:column="21">(<param><decl><type><name pos:line="48" pos:column="22">unsigned</name> <name pos:line="48" pos:column="31">int</name></type> <name pos:line="48" pos:column="35">start</name></decl></param>,
		<param><decl><type><name pos:line="49" pos:column="17">unsigned</name> <name pos:line="49" pos:column="26">int</name></type> <name pos:line="49" pos:column="30">end</name></decl></param>,
		<param><decl><type><name pos:line="50" pos:column="17">Accessor</name> <type:modifier pos:line="50" pos:column="26">&amp;</type:modifier></type><name pos:line="50" pos:column="27">styler</name></decl></param>,
		<param><decl><type><name pos:line="51" pos:column="17">char</name> <type:modifier pos:line="51" pos:column="22">*</type:modifier></type><name pos:line="51" pos:column="23">s</name></decl></param>,
		<param><decl><type><name pos:line="52" pos:column="17">unsigned</name> <name pos:line="52" pos:column="26">int</name></type> <name pos:line="52" pos:column="30">len</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">unsigned</name> <name pos:line="53" pos:column="18">int</name></type> <name pos:line="53" pos:column="22">i</name> <init pos:line="53" pos:column="24">= <expr><lit:literal type="number" pos:line="53" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="54" pos:column="9">while <condition pos:line="54" pos:column="15">(<expr><op:operator pos:line="54" pos:column="16">(</op:operator><name pos:line="54" pos:column="17">i</name> <op:operator pos:line="54" pos:column="19">&lt;</op:operator> <name pos:line="54" pos:column="21">end</name> <op:operator pos:line="54" pos:column="25">-</op:operator> <name pos:line="54" pos:column="27">start</name> <op:operator pos:line="54" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="54" pos:column="35">1</lit:literal><op:operator pos:line="54" pos:column="36">)</op:operator> <op:operator pos:line="54" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="54" pos:column="41">(</op:operator><name pos:line="54" pos:column="42">i</name> <op:operator pos:line="54" pos:column="44">&lt;</op:operator> <name pos:line="54" pos:column="46">len</name><op:operator pos:line="54" pos:column="49">-</op:operator><lit:literal type="number" pos:line="54" pos:column="50">1</lit:literal><op:operator pos:line="54" pos:column="51">)</op:operator></expr>)</condition> <block pos:line="54" pos:column="54">{
		<expr_stmt><expr><name><name pos:line="55" pos:column="17">s</name><index pos:line="55" pos:column="18">[<expr><name pos:line="55" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="55" pos:column="22">=</op:operator> <call><name><name pos:line="55" pos:column="24">static_cast</name><argument_list pos:line="55" pos:column="35">&lt;<argument><expr><name pos:line="55" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="55" pos:column="41">(<argument><expr><call><name pos:line="55" pos:column="42">tolower</name><argument_list pos:line="55" pos:column="49">(<argument><expr><name><name pos:line="55" pos:column="50">styler</name><index pos:line="55" pos:column="56">[<expr><name pos:line="55" pos:column="57">start</name> <op:operator pos:line="55" pos:column="63">+</op:operator> <name pos:line="55" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="56" pos:column="17">i</name><op:operator pos:line="56" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="58" pos:column="9">s</name><index pos:line="58" pos:column="10">[<expr><name pos:line="58" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="58" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="58" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="61" pos:column="1">static</specifier> <name pos:line="61" pos:column="8">bool</name></type> <name pos:line="61" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="61" pos:column="33">(<param><decl><type><name pos:line="61" pos:column="34">int</name></type> <name pos:line="61" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="45">{
	<return pos:line="62" pos:column="9">return <expr><name pos:line="62" pos:column="16">style</name> <op:operator pos:line="62" pos:column="22">==</op:operator> <name pos:line="62" pos:column="25">SCE_C_COMMENT</name> <op:operator pos:line="62" pos:column="39">||</op:operator>
		<name pos:line="63" pos:column="17">style</name> <op:operator pos:line="63" pos:column="23">==</op:operator> <name pos:line="63" pos:column="26">SCE_C_COMMENTDOC</name> <op:operator pos:line="63" pos:column="43">||</op:operator>
		<name pos:line="64" pos:column="17">style</name> <op:operator pos:line="64" pos:column="23">==</op:operator> <name pos:line="64" pos:column="26">SCE_C_COMMENTDOCKEYWORD</name> <op:operator pos:line="64" pos:column="50">||</op:operator>
		<name pos:line="65" pos:column="17">style</name> <op:operator pos:line="65" pos:column="23">==</op:operator> <name pos:line="65" pos:column="26">SCE_C_COMMENTDOCKEYWORDERROR</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="68" pos:column="1">static</specifier> <name pos:line="68" pos:column="8">void</name></type> <name pos:line="68" pos:column="13">ColourTo</name><parameter_list pos:line="68" pos:column="21">(<param><decl><type><name pos:line="68" pos:column="22">Accessor</name> <type:modifier pos:line="68" pos:column="31">&amp;</type:modifier></type><name pos:line="68" pos:column="32">styler</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="40">unsigned</name> <name pos:line="68" pos:column="49">int</name></type> <name pos:line="68" pos:column="53">end</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="58">unsigned</name> <name pos:line="68" pos:column="67">int</name></type> <name pos:line="68" pos:column="71">attr</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="77">bool</name></type> <name pos:line="68" pos:column="82">bInAsm</name></decl></param>)</parameter_list> <block pos:line="68" pos:column="90">{
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><op:operator pos:line="69" pos:column="13">(</op:operator><name pos:line="69" pos:column="14">bInAsm</name><op:operator pos:line="69" pos:column="20">)</op:operator> <op:operator pos:line="69" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="69" pos:column="25">(</op:operator><name pos:line="69" pos:column="26">attr</name> <op:operator pos:line="69" pos:column="31">==</op:operator> <name pos:line="69" pos:column="34">SCE_C_OPERATOR</name> <op:operator pos:line="69" pos:column="49">||</op:operator> <name pos:line="69" pos:column="52">attr</name> <op:operator pos:line="69" pos:column="57">==</op:operator> <name pos:line="69" pos:column="60">SCE_C_NUMBER</name> <op:operator pos:line="69" pos:column="73">||</op:operator> <name pos:line="69" pos:column="76">attr</name> <op:operator pos:line="69" pos:column="81">==</op:operator> <name pos:line="69" pos:column="84">SCE_C_DEFAULT</name> <op:operator pos:line="69" pos:column="98">||</op:operator> <name pos:line="69" pos:column="101">attr</name> <op:operator pos:line="69" pos:column="106">==</op:operator> <name pos:line="69" pos:column="109">SCE_C_WORD</name> <op:operator pos:line="69" pos:column="120">||</op:operator> <name pos:line="69" pos:column="123">attr</name> <op:operator pos:line="69" pos:column="128">==</op:operator> <name pos:line="69" pos:column="131">SCE_C_IDENTIFIER</name><op:operator pos:line="69" pos:column="147">)</op:operator></expr>)</condition><then pos:line="69" pos:column="149"> <block pos:line="69" pos:column="150">{
		<expr_stmt><expr><call><name><name pos:line="70" pos:column="17">styler</name><op:operator pos:line="70" pos:column="23">.</op:operator><name pos:line="70" pos:column="24">ColourTo</name></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">end</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="38">SCE_C_REGEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="71" pos:column="11">else
		<expr_stmt><expr><call><name><name pos:line="72" pos:column="17">styler</name><op:operator pos:line="72" pos:column="23">.</op:operator><name pos:line="72" pos:column="24">ColourTo</name></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">end</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="38">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<comment type="line" pos:line="75" pos:column="1">// returns 1 if the item starts a class definition, and -1 if the word is "end", and 2 if the word is "asm"</comment>
<function><type><specifier pos:line="76" pos:column="1">static</specifier> <name pos:line="76" pos:column="8">int</name></type> <name pos:line="76" pos:column="12">classifyWordTAL</name><parameter_list pos:line="76" pos:column="27">(<param><decl><type><name pos:line="76" pos:column="28">unsigned</name> <name pos:line="76" pos:column="37">int</name></type> <name pos:line="76" pos:column="41">start</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="48">unsigned</name> <name pos:line="76" pos:column="57">int</name></type> <name pos:line="76" pos:column="61">end</name></decl></param>, <comment type="block" pos:line="76" pos:column="66">/*WordList &amp;keywords*/</comment><param><decl><type><name pos:line="76" pos:column="88">WordList</name> <type:modifier pos:line="76" pos:column="97">*</type:modifier></type><name><name pos:line="76" pos:column="98">keywordlists</name><index pos:line="76" pos:column="110">[]</index></name></decl></param>, <param><decl><type><name pos:line="76" pos:column="114">Accessor</name> <type:modifier pos:line="76" pos:column="123">&amp;</type:modifier></type><name pos:line="76" pos:column="124">styler</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="132">bool</name></type> <name pos:line="76" pos:column="137">bInAsm</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="145">{
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">int</name></type> <name pos:line="77" pos:column="13">ret</name> <init pos:line="77" pos:column="17">= <expr><lit:literal type="number" pos:line="77" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="79" pos:column="9">WordList</name><type:modifier pos:line="79" pos:column="17">&amp;</type:modifier></type> <name pos:line="79" pos:column="19">keywords</name> <init pos:line="79" pos:column="28">= <expr><op:operator pos:line="79" pos:column="30">*</op:operator><name><name pos:line="79" pos:column="31">keywordlists</name><index pos:line="79" pos:column="43">[<expr><lit:literal type="number" pos:line="79" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">WordList</name><type:modifier pos:line="80" pos:column="17">&amp;</type:modifier></type> <name pos:line="80" pos:column="19">builtins</name> <init pos:line="80" pos:column="28">= <expr><op:operator pos:line="80" pos:column="30">*</op:operator><name><name pos:line="80" pos:column="31">keywordlists</name><index pos:line="80" pos:column="43">[<expr><lit:literal type="number" pos:line="80" pos:column="44">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">WordList</name><type:modifier pos:line="81" pos:column="17">&amp;</type:modifier></type> <name pos:line="81" pos:column="19">nonreserved_keywords</name> <init pos:line="81" pos:column="40">= <expr><op:operator pos:line="81" pos:column="42">*</op:operator><name><name pos:line="81" pos:column="43">keywordlists</name><index pos:line="81" pos:column="55">[<expr><lit:literal type="number" pos:line="81" pos:column="56">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="83" pos:column="9">char</name></type> <name><name pos:line="83" pos:column="14">s</name><index pos:line="83" pos:column="15">[<expr><lit:literal type="number" pos:line="83" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="84" pos:column="9">getRange</name><argument_list pos:line="84" pos:column="17">(<argument><expr><name pos:line="84" pos:column="18">start</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="25">end</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="30">styler</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="38">s</name></expr></argument>, <argument><expr><sizeof pos:line="84" pos:column="41">sizeof<argument_list pos:line="84" pos:column="47">(<argument><expr><name pos:line="84" pos:column="48">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="86" pos:column="9">char</name></type> <name pos:line="86" pos:column="14">chAttr</name> <init pos:line="86" pos:column="21">= <expr><name pos:line="86" pos:column="23">SCE_C_IDENTIFIER</name></expr></init></decl>;</decl_stmt>
	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><call><name pos:line="87" pos:column="13">isdigit</name><argument_list pos:line="87" pos:column="20">(<argument><expr><name><name pos:line="87" pos:column="21">s</name><index pos:line="87" pos:column="22">[<expr><lit:literal type="number" pos:line="87" pos:column="23">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="87" pos:column="27">||</op:operator> <op:operator pos:line="87" pos:column="30">(</op:operator><name><name pos:line="87" pos:column="31">s</name><index pos:line="87" pos:column="32">[<expr><lit:literal type="number" pos:line="87" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="87" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="87" pos:column="39">'.'</lit:literal><op:operator pos:line="87" pos:column="42">)</op:operator></expr>)</condition><then pos:line="87" pos:column="44"> <block pos:line="87" pos:column="45">{
		<expr_stmt><expr><name pos:line="88" pos:column="17">chAttr</name> <op:operator pos:line="88" pos:column="24">=</op:operator> <name pos:line="88" pos:column="26">SCE_C_NUMBER</name></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="90" pos:column="9">else <block pos:line="90" pos:column="14">{
		<if pos:line="91" pos:column="17">if <condition pos:line="91" pos:column="20">(<expr><call><name><name pos:line="91" pos:column="21">keywords</name><op:operator pos:line="91" pos:column="29">.</op:operator><name pos:line="91" pos:column="30">InList</name></name><argument_list pos:line="91" pos:column="36">(<argument><expr><name pos:line="91" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="40"> <block pos:line="91" pos:column="41">{
			<expr_stmt><expr><name pos:line="92" pos:column="25">chAttr</name> <op:operator pos:line="92" pos:column="32">=</op:operator> <name pos:line="92" pos:column="34">SCE_C_WORD</name></expr>;</expr_stmt>

			<if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><call><name pos:line="94" pos:column="29">strcmp</name><argument_list pos:line="94" pos:column="35">(<argument><expr><name pos:line="94" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="94" pos:column="39">"asm"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="94" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="94" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="94" pos:column="51"> <block pos:line="94" pos:column="52">{
				<expr_stmt><expr><name pos:line="95" pos:column="33">ret</name> <op:operator pos:line="95" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="95" pos:column="39">2</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="97" pos:column="25">else <if pos:line="97" pos:column="30">if <condition pos:line="97" pos:column="33">(<expr><call><name pos:line="97" pos:column="34">strcmp</name><argument_list pos:line="97" pos:column="40">(<argument><expr><name pos:line="97" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="44">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="97" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="97" pos:column="56"> <block pos:line="97" pos:column="57">{
				<expr_stmt><expr><name pos:line="98" pos:column="33">ret</name> <op:operator pos:line="98" pos:column="37">=</op:operator> <op:operator pos:line="98" pos:column="39">-</op:operator><lit:literal type="number" pos:line="98" pos:column="40">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then>
		<else pos:line="101" pos:column="17">else <if pos:line="101" pos:column="22">if <condition pos:line="101" pos:column="25">(<expr><name><name pos:line="101" pos:column="26">s</name><index pos:line="101" pos:column="27">[<expr><lit:literal type="number" pos:line="101" pos:column="28">0</lit:literal></expr>]</index></name> <op:operator pos:line="101" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="101" pos:column="34">'$'</lit:literal> <op:operator pos:line="101" pos:column="38">||</op:operator> <call><name><name pos:line="101" pos:column="41">builtins</name><op:operator pos:line="101" pos:column="49">.</op:operator><name pos:line="101" pos:column="50">InList</name></name><argument_list pos:line="101" pos:column="56">(<argument><expr><name pos:line="101" pos:column="57">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="101" pos:column="60"> <block pos:line="101" pos:column="61">{
			<expr_stmt><expr><name pos:line="102" pos:column="25">chAttr</name> <op:operator pos:line="102" pos:column="32">=</op:operator> <name pos:line="102" pos:column="34">SCE_C_WORD2</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="104" pos:column="17">else <if pos:line="104" pos:column="22">if <condition pos:line="104" pos:column="25">(<expr><call><name><name pos:line="104" pos:column="26">nonreserved_keywords</name><op:operator pos:line="104" pos:column="46">.</op:operator><name pos:line="104" pos:column="47">InList</name></name><argument_list pos:line="104" pos:column="53">(<argument><expr><name pos:line="104" pos:column="54">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="104" pos:column="57"> <block pos:line="104" pos:column="58">{
			<expr_stmt><expr><name pos:line="105" pos:column="25">chAttr</name> <op:operator pos:line="105" pos:column="32">=</op:operator> <name pos:line="105" pos:column="34">SCE_C_UUID</name></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if>
	}</block></else></if>
	<expr_stmt><expr><call><name pos:line="108" pos:column="9">ColourTo</name><argument_list pos:line="108" pos:column="17">(<argument><expr><name pos:line="108" pos:column="18">styler</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="26">end</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="31">chAttr</name></expr></argument>, <argument><expr><op:operator pos:line="108" pos:column="39">(</op:operator><name pos:line="108" pos:column="40">bInAsm</name> <op:operator pos:line="108" pos:column="47">&amp;&amp;</op:operator> <name pos:line="108" pos:column="50">ret</name> <op:operator pos:line="108" pos:column="54">!=</op:operator> <op:operator pos:line="108" pos:column="57">-</op:operator><lit:literal type="number" pos:line="108" pos:column="58">1</lit:literal><op:operator pos:line="108" pos:column="59">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="109" pos:column="9">return <expr><name pos:line="109" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="112" pos:column="1">static</specifier> <name pos:line="112" pos:column="8">int</name></type> <name pos:line="112" pos:column="12">classifyFoldPointTAL</name><parameter_list pos:line="112" pos:column="32">(<param><decl><type><specifier pos:line="112" pos:column="33">const</specifier> <name pos:line="112" pos:column="39">char</name><type:modifier pos:line="112" pos:column="43">*</type:modifier></type> <name pos:line="112" pos:column="45">s</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="48">{
	<decl_stmt><decl><type><name pos:line="113" pos:column="9">int</name></type> <name pos:line="113" pos:column="13">lev</name> <init pos:line="113" pos:column="17">= <expr><lit:literal type="number" pos:line="113" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><op:operator pos:line="114" pos:column="13">!</op:operator><op:operator pos:line="114" pos:column="14">(</op:operator><call><name pos:line="114" pos:column="15">isdigit</name><argument_list pos:line="114" pos:column="22">(<argument><expr><name><name pos:line="114" pos:column="23">s</name><index pos:line="114" pos:column="24">[<expr><lit:literal type="number" pos:line="114" pos:column="25">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="114" pos:column="29">||</op:operator> <op:operator pos:line="114" pos:column="32">(</op:operator><name><name pos:line="114" pos:column="33">s</name><index pos:line="114" pos:column="34">[<expr><lit:literal type="number" pos:line="114" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="114" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="114" pos:column="41">'.'</lit:literal><op:operator pos:line="114" pos:column="44">)</op:operator><op:operator pos:line="114" pos:column="45">)</op:operator></expr>)</condition><then pos:line="114" pos:column="47"> <block pos:line="114" pos:column="48">{
		<if pos:line="115" pos:column="17">if <condition pos:line="115" pos:column="20">(<expr><call><name pos:line="115" pos:column="21">strcmp</name><argument_list pos:line="115" pos:column="27">(<argument><expr><name pos:line="115" pos:column="28">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="31">"begin"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="115" pos:column="43">0</lit:literal> <op:operator pos:line="115" pos:column="45">||</op:operator>
			<call><name pos:line="116" pos:column="25">strcmp</name><argument_list pos:line="116" pos:column="31">(<argument><expr><name pos:line="116" pos:column="32">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="35">"block"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="116" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="116" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="116" pos:column="49"> <block pos:line="116" pos:column="50">{
			<expr_stmt><expr><name pos:line="117" pos:column="25">lev</name><op:operator pos:line="117" pos:column="28">=</op:operator><lit:literal type="number" pos:line="117" pos:column="29">1</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="118" pos:column="19">else <if pos:line="118" pos:column="24">if <condition pos:line="118" pos:column="27">(<expr><call><name pos:line="118" pos:column="28">strcmp</name><argument_list pos:line="118" pos:column="34">(<argument><expr><name pos:line="118" pos:column="35">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="38">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="118" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="118" pos:column="50"> <block pos:line="118" pos:column="51">{
			<expr_stmt><expr><name pos:line="119" pos:column="25">lev</name><op:operator pos:line="119" pos:column="28">=</op:operator><op:operator pos:line="119" pos:column="29">-</op:operator><lit:literal type="number" pos:line="119" pos:column="30">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if></else></if>
	}</block></then></if>
	<return pos:line="122" pos:column="9">return <expr><name pos:line="122" pos:column="16">lev</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="125" pos:column="1">static</specifier> <name pos:line="125" pos:column="8">void</name></type> <name pos:line="125" pos:column="13">ColouriseTALDoc</name><parameter_list pos:line="125" pos:column="28">(<param><decl><type><name pos:line="125" pos:column="29">unsigned</name> <name pos:line="125" pos:column="38">int</name></type> <name pos:line="125" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="52">int</name></type> <name pos:line="125" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="64">int</name></type> <name pos:line="125" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="79">WordList</name> <type:modifier pos:line="125" pos:column="88">*</type:modifier></type><name><name pos:line="125" pos:column="89">keywordlists</name><index pos:line="125" pos:column="101">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="126" pos:column="9">Accessor</name> <type:modifier pos:line="126" pos:column="18">&amp;</type:modifier></type><name pos:line="126" pos:column="19">styler</name></decl></param>)</parameter_list> <block pos:line="126" pos:column="27">{

	<expr_stmt><expr><call><name><name pos:line="128" pos:column="9">styler</name><op:operator pos:line="128" pos:column="15">.</op:operator><name pos:line="128" pos:column="16">StartAt</name></name><argument_list pos:line="128" pos:column="23">(<argument><expr><name pos:line="128" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="130" pos:column="9">int</name></type> <name pos:line="130" pos:column="13">state</name> <init pos:line="130" pos:column="19">= <expr><name pos:line="130" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><name pos:line="131" pos:column="13">state</name> <op:operator pos:line="131" pos:column="19">==</op:operator> <name pos:line="131" pos:column="22">SCE_C_CHARACTER</name></expr>)</condition><then pos:line="131" pos:column="38">	<comment type="line" pos:line="131" pos:column="41">// Does not leak onto next line</comment>
		<expr_stmt><expr><name pos:line="132" pos:column="17">state</name> <op:operator pos:line="132" pos:column="23">=</op:operator> <name pos:line="132" pos:column="25">SCE_C_DEFAULT</name></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="133" pos:column="9">char</name></type> <name pos:line="133" pos:column="14">chPrev</name> <init pos:line="133" pos:column="21">= <expr><lit:literal type="char" pos:line="133" pos:column="23">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">char</name></type> <name pos:line="134" pos:column="14">chNext</name> <init pos:line="134" pos:column="21">= <expr><name><name pos:line="134" pos:column="23">styler</name><index pos:line="134" pos:column="29">[<expr><name pos:line="134" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">unsigned</name> <name pos:line="135" pos:column="18">int</name></type> <name pos:line="135" pos:column="22">lengthDoc</name> <init pos:line="135" pos:column="32">= <expr><name pos:line="135" pos:column="34">startPos</name> <op:operator pos:line="135" pos:column="43">+</op:operator> <name pos:line="135" pos:column="45">length</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="137" pos:column="9">bool</name></type> <name pos:line="137" pos:column="14">bInClassDefinition</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="139" pos:column="9">int</name></type> <name pos:line="139" pos:column="13">currentLine</name> <init pos:line="139" pos:column="25">= <expr><call><name><name pos:line="139" pos:column="27">styler</name><op:operator pos:line="139" pos:column="33">.</op:operator><name pos:line="139" pos:column="34">GetLine</name></name><argument_list pos:line="139" pos:column="41">(<argument><expr><name pos:line="139" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><name pos:line="140" pos:column="13">currentLine</name> <op:operator pos:line="140" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="140" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="140" pos:column="29"> <block pos:line="140" pos:column="30">{
		<expr_stmt><expr><call><name><name pos:line="141" pos:column="17">styler</name><op:operator pos:line="141" pos:column="23">.</op:operator><name pos:line="141" pos:column="24">SetLineState</name></name><argument_list pos:line="141" pos:column="36">(<argument><expr><name pos:line="141" pos:column="37">currentLine</name></expr></argument>, <argument><expr><call><name><name pos:line="141" pos:column="50">styler</name><op:operator pos:line="141" pos:column="56">.</op:operator><name pos:line="141" pos:column="57">GetLineState</name></name><argument_list pos:line="141" pos:column="69">(<argument><expr><name pos:line="141" pos:column="70">currentLine</name><op:operator pos:line="141" pos:column="81">-</op:operator><lit:literal type="number" pos:line="141" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="142" pos:column="17">bInClassDefinition</name> <op:operator pos:line="142" pos:column="36">=</op:operator> <op:operator pos:line="142" pos:column="38">(</op:operator><call><name><name pos:line="142" pos:column="39">styler</name><op:operator pos:line="142" pos:column="45">.</op:operator><name pos:line="142" pos:column="46">GetLineState</name></name><argument_list pos:line="142" pos:column="58">(<argument><expr><name pos:line="142" pos:column="59">currentLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="142" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="142" pos:column="75">1</lit:literal><op:operator pos:line="142" pos:column="76">)</op:operator></expr>;</expr_stmt>
	}</block></then> <else pos:line="143" pos:column="11">else <block pos:line="143" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="144" pos:column="17">styler</name><op:operator pos:line="144" pos:column="23">.</op:operator><name pos:line="144" pos:column="24">SetLineState</name></name><argument_list pos:line="144" pos:column="36">(<argument><expr><name pos:line="144" pos:column="37">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="144" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="145" pos:column="17">bInClassDefinition</name> <op:operator pos:line="145" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="145" pos:column="38">false</lit:literal></expr>;</expr_stmt>
	}</block></else></if>

	<decl_stmt><decl><type><name pos:line="148" pos:column="9">bool</name></type> <name pos:line="148" pos:column="14">bInAsm</name> <init pos:line="148" pos:column="21">= <expr><op:operator pos:line="148" pos:column="23">(</op:operator><name pos:line="148" pos:column="24">state</name> <op:operator pos:line="148" pos:column="30">==</op:operator> <name pos:line="148" pos:column="33">SCE_C_REGEX</name><op:operator pos:line="148" pos:column="44">)</op:operator></expr></init></decl>;</decl_stmt>
	<if pos:line="149" pos:column="9">if <condition pos:line="149" pos:column="12">(<expr><name pos:line="149" pos:column="13">bInAsm</name></expr>)</condition><then pos:line="149" pos:column="20">
		<expr_stmt><expr><name pos:line="150" pos:column="17">state</name> <op:operator pos:line="150" pos:column="23">=</op:operator> <name pos:line="150" pos:column="25">SCE_C_DEFAULT</name></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><call><name><name pos:line="152" pos:column="9">styler</name><op:operator pos:line="152" pos:column="15">.</op:operator><name pos:line="152" pos:column="16">StartSegment</name></name><argument_list pos:line="152" pos:column="28">(<argument><expr><name pos:line="152" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="153" pos:column="9">int</name></type> <name pos:line="153" pos:column="13">visibleChars</name> <init pos:line="153" pos:column="26">= <expr><lit:literal type="number" pos:line="153" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="154" pos:column="9">for (<init><decl><type><name pos:line="154" pos:column="14">unsigned</name> <name pos:line="154" pos:column="23">int</name></type> <name pos:line="154" pos:column="27">i</name> <init pos:line="154" pos:column="29">= <expr><name pos:line="154" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="154" pos:column="41">i</name> <op:operator pos:line="154" pos:column="43">&lt;</op:operator> <name pos:line="154" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="154" pos:column="56">i</name><op:operator pos:line="154" pos:column="57">++</op:operator></expr></incr>) <block pos:line="154" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="155" pos:column="17">char</name></type> <name pos:line="155" pos:column="22">ch</name> <init pos:line="155" pos:column="25">= <expr><name pos:line="155" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name pos:line="157" pos:column="17">chNext</name> <op:operator pos:line="157" pos:column="24">=</op:operator> <call><name><name pos:line="157" pos:column="26">styler</name><op:operator pos:line="157" pos:column="32">.</op:operator><name pos:line="157" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="157" pos:column="46">(<argument><expr><name pos:line="157" pos:column="47">i</name> <op:operator pos:line="157" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="157" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="159" pos:column="17">if <condition pos:line="159" pos:column="20">(<expr><op:operator pos:line="159" pos:column="21">(</op:operator><name pos:line="159" pos:column="22">ch</name> <op:operator pos:line="159" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="159" pos:column="28">'\r'</lit:literal> <op:operator pos:line="159" pos:column="33">&amp;&amp;</op:operator> <name pos:line="159" pos:column="36">chNext</name> <op:operator pos:line="159" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="159" pos:column="46">'\n'</lit:literal><op:operator pos:line="159" pos:column="50">)</op:operator> <op:operator pos:line="159" pos:column="52">||</op:operator> <op:operator pos:line="159" pos:column="55">(</op:operator><name pos:line="159" pos:column="56">ch</name> <op:operator pos:line="159" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="159" pos:column="62">'\n'</lit:literal><op:operator pos:line="159" pos:column="66">)</op:operator></expr>)</condition><then pos:line="159" pos:column="68"> <block pos:line="159" pos:column="69">{
			<comment type="line" pos:line="160" pos:column="25">// Trigger on CR only (Mac style) or either on LF from CR+LF (Dos/Win) or on LF alone (Unix)</comment>
			<comment type="line" pos:line="161" pos:column="25">// Avoid triggering two times on Dos/Win</comment>
			<comment type="line" pos:line="162" pos:column="25">// End of line</comment>
			<if pos:line="163" pos:column="25">if <condition pos:line="163" pos:column="28">(<expr><name pos:line="163" pos:column="29">state</name> <op:operator pos:line="163" pos:column="35">==</op:operator> <name pos:line="163" pos:column="38">SCE_C_CHARACTER</name></expr>)</condition><then pos:line="163" pos:column="54"> <block pos:line="163" pos:column="55">{
				<expr_stmt><expr><call><name pos:line="164" pos:column="33">ColourTo</name><argument_list pos:line="164" pos:column="41">(<argument><expr><name pos:line="164" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="50">i</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="53">state</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="60">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="165" pos:column="33">state</name> <op:operator pos:line="165" pos:column="39">=</op:operator> <name pos:line="165" pos:column="41">SCE_C_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="167" pos:column="25">visibleChars</name> <op:operator pos:line="167" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="167" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="168" pos:column="25">currentLine</name><op:operator pos:line="168" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="169" pos:column="25">styler</name><op:operator pos:line="169" pos:column="31">.</op:operator><name pos:line="169" pos:column="32">SetLineState</name></name><argument_list pos:line="169" pos:column="44">(<argument><expr><name pos:line="169" pos:column="45">currentLine</name></expr></argument>, <argument><expr><op:operator pos:line="169" pos:column="58">(</op:operator><name pos:line="169" pos:column="59">bInClassDefinition</name> <op:operator pos:line="169" pos:column="78">?</op:operator> <lit:literal type="number" pos:line="169" pos:column="80">1</lit:literal> <op:operator pos:line="169" pos:column="82">:</op:operator> <lit:literal type="number" pos:line="169" pos:column="84">0</lit:literal><op:operator pos:line="169" pos:column="85">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="172" pos:column="17">if <condition pos:line="172" pos:column="20">(<expr><call><name><name pos:line="172" pos:column="21">styler</name><op:operator pos:line="172" pos:column="27">.</op:operator><name pos:line="172" pos:column="28">IsLeadByte</name></name><argument_list pos:line="172" pos:column="38">(<argument><expr><name pos:line="172" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="172" pos:column="43"> <block pos:line="172" pos:column="44">{
			<expr_stmt><expr><name pos:line="173" pos:column="25">chNext</name> <op:operator pos:line="173" pos:column="32">=</op:operator> <call><name><name pos:line="173" pos:column="34">styler</name><op:operator pos:line="173" pos:column="40">.</op:operator><name pos:line="173" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="173" pos:column="54">(<argument><expr><name pos:line="173" pos:column="55">i</name> <op:operator pos:line="173" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="173" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="174" pos:column="25">chPrev</name> <op:operator pos:line="174" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="174" pos:column="34">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="175" pos:column="25">i</name> <op:operator pos:line="175" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="175" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<continue pos:line="176" pos:column="25">continue;</continue>
		}</block></then></if>

		<if pos:line="179" pos:column="17">if <condition pos:line="179" pos:column="20">(<expr><name pos:line="179" pos:column="21">state</name> <op:operator pos:line="179" pos:column="27">==</op:operator> <name pos:line="179" pos:column="30">SCE_C_DEFAULT</name></expr>)</condition><then pos:line="179" pos:column="44"> <block pos:line="179" pos:column="45">{
			<if pos:line="180" pos:column="25">if <condition pos:line="180" pos:column="28">(<expr><call><name pos:line="180" pos:column="29">isTALwordstart</name><argument_list pos:line="180" pos:column="43">(<argument><expr><name pos:line="180" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="180" pos:column="48"> <block pos:line="180" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="181" pos:column="33">ColourTo</name><argument_list pos:line="181" pos:column="41">(<argument><expr><name pos:line="181" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="181" pos:column="50">i</name><op:operator pos:line="181" pos:column="51">-</op:operator><lit:literal type="number" pos:line="181" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="181" pos:column="55">state</name></expr></argument>, <argument><expr><name pos:line="181" pos:column="62">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="182" pos:column="33">state</name> <op:operator pos:line="182" pos:column="39">=</op:operator> <name pos:line="182" pos:column="41">SCE_C_IDENTIFIER</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="183" pos:column="27">else <if pos:line="183" pos:column="32">if <condition pos:line="183" pos:column="35">(<expr><name pos:line="183" pos:column="36">ch</name> <op:operator pos:line="183" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="183" pos:column="42">'!'</lit:literal> <op:operator pos:line="183" pos:column="46">&amp;&amp;</op:operator> <name pos:line="183" pos:column="49">chNext</name> <op:operator pos:line="183" pos:column="56">!=</op:operator> <lit:literal type="char" pos:line="183" pos:column="59">'*'</lit:literal></expr>)</condition><then pos:line="183" pos:column="63"> <block pos:line="183" pos:column="64">{
				<expr_stmt><expr><call><name pos:line="184" pos:column="33">ColourTo</name><argument_list pos:line="184" pos:column="41">(<argument><expr><name pos:line="184" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="50">i</name><op:operator pos:line="184" pos:column="51">-</op:operator><lit:literal type="number" pos:line="184" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="184" pos:column="55">state</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="62">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="185" pos:column="33">state</name> <op:operator pos:line="185" pos:column="39">=</op:operator> <name pos:line="185" pos:column="41">SCE_C_COMMENT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="186" pos:column="27">else <if pos:line="186" pos:column="32">if <condition pos:line="186" pos:column="35">(<expr><name pos:line="186" pos:column="36">ch</name> <op:operator pos:line="186" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="42">'!'</lit:literal> <op:operator pos:line="186" pos:column="46">&amp;&amp;</op:operator> <name pos:line="186" pos:column="49">chNext</name> <op:operator pos:line="186" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="59">'*'</lit:literal></expr>)</condition><then pos:line="186" pos:column="63"> <block pos:line="186" pos:column="64">{
				<expr_stmt><expr><call><name pos:line="187" pos:column="33">ColourTo</name><argument_list pos:line="187" pos:column="41">(<argument><expr><name pos:line="187" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="50">i</name><op:operator pos:line="187" pos:column="51">-</op:operator><lit:literal type="number" pos:line="187" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="187" pos:column="55">state</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="62">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="188" pos:column="33">state</name> <op:operator pos:line="188" pos:column="39">=</op:operator> <name pos:line="188" pos:column="41">SCE_C_COMMENTDOC</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="189" pos:column="27">else <if pos:line="189" pos:column="32">if <condition pos:line="189" pos:column="35">(<expr><name pos:line="189" pos:column="36">ch</name> <op:operator pos:line="189" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="189" pos:column="42">'-'</lit:literal> <op:operator pos:line="189" pos:column="46">&amp;&amp;</op:operator> <name pos:line="189" pos:column="49">chNext</name> <op:operator pos:line="189" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="189" pos:column="59">'-'</lit:literal></expr>)</condition><then pos:line="189" pos:column="63"> <block pos:line="189" pos:column="64">{
				<expr_stmt><expr><call><name pos:line="190" pos:column="33">ColourTo</name><argument_list pos:line="190" pos:column="41">(<argument><expr><name pos:line="190" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="50">i</name><op:operator pos:line="190" pos:column="51">-</op:operator><lit:literal type="number" pos:line="190" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="55">state</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="62">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="191" pos:column="33">state</name> <op:operator pos:line="191" pos:column="39">=</op:operator> <name pos:line="191" pos:column="41">SCE_C_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="192" pos:column="27">else <if pos:line="192" pos:column="32">if <condition pos:line="192" pos:column="35">(<expr><name pos:line="192" pos:column="36">ch</name> <op:operator pos:line="192" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="192" pos:column="42">'"'</lit:literal></expr>)</condition><then pos:line="192" pos:column="46"> <block pos:line="192" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="193" pos:column="33">ColourTo</name><argument_list pos:line="193" pos:column="41">(<argument><expr><name pos:line="193" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="50">i</name><op:operator pos:line="193" pos:column="51">-</op:operator><lit:literal type="number" pos:line="193" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="193" pos:column="55">state</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="62">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="194" pos:column="33">state</name> <op:operator pos:line="194" pos:column="39">=</op:operator> <name pos:line="194" pos:column="41">SCE_C_STRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="195" pos:column="27">else <if pos:line="195" pos:column="32">if <condition pos:line="195" pos:column="35">(<expr><name pos:line="195" pos:column="36">ch</name> <op:operator pos:line="195" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="195" pos:column="42">'?'</lit:literal> <op:operator pos:line="195" pos:column="46">&amp;&amp;</op:operator> <name pos:line="195" pos:column="49">visibleChars</name> <op:operator pos:line="195" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="195" pos:column="65">0</lit:literal></expr>)</condition><then pos:line="195" pos:column="67"> <block pos:line="195" pos:column="68">{
				<expr_stmt><expr><call><name pos:line="196" pos:column="33">ColourTo</name><argument_list pos:line="196" pos:column="41">(<argument><expr><name pos:line="196" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="50">i</name><op:operator pos:line="196" pos:column="51">-</op:operator><lit:literal type="number" pos:line="196" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="196" pos:column="55">state</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="62">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="197" pos:column="33">state</name> <op:operator pos:line="197" pos:column="39">=</op:operator> <name pos:line="197" pos:column="41">SCE_C_PREPROCESSOR</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="198" pos:column="27">else <if pos:line="198" pos:column="32">if <condition pos:line="198" pos:column="35">(<expr><call><name pos:line="198" pos:column="36">isTALoperator</name><argument_list pos:line="198" pos:column="49">(<argument><expr><name pos:line="198" pos:column="50">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="198" pos:column="54"> <block pos:line="198" pos:column="55">{
				<expr_stmt><expr><call><name pos:line="199" pos:column="33">ColourTo</name><argument_list pos:line="199" pos:column="41">(<argument><expr><name pos:line="199" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="50">i</name><op:operator pos:line="199" pos:column="51">-</op:operator><lit:literal type="number" pos:line="199" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="199" pos:column="55">state</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="62">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="200" pos:column="33">ColourTo</name><argument_list pos:line="200" pos:column="41">(<argument><expr><name pos:line="200" pos:column="42">styler</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="50">i</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="53">SCE_C_OPERATOR</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="69">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then> <else pos:line="202" pos:column="19">else <if pos:line="202" pos:column="24">if <condition pos:line="202" pos:column="27">(<expr><name pos:line="202" pos:column="28">state</name> <op:operator pos:line="202" pos:column="34">==</op:operator> <name pos:line="202" pos:column="37">SCE_C_IDENTIFIER</name></expr>)</condition><then pos:line="202" pos:column="54"> <block pos:line="202" pos:column="55">{
			<if pos:line="203" pos:column="25">if <condition pos:line="203" pos:column="28">(<expr><op:operator pos:line="203" pos:column="29">!</op:operator><call><name pos:line="203" pos:column="30">isTALwordchar</name><argument_list pos:line="203" pos:column="43">(<argument><expr><name pos:line="203" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="203" pos:column="48"> <block pos:line="203" pos:column="49">{
				<decl_stmt><decl><type><name pos:line="204" pos:column="33">int</name></type> <name pos:line="204" pos:column="37">lStateChange</name> <init pos:line="204" pos:column="50">= <expr><call><name pos:line="204" pos:column="52">classifyWordTAL</name><argument_list pos:line="204" pos:column="67">(<argument><expr><call><name><name pos:line="204" pos:column="68">styler</name><op:operator pos:line="204" pos:column="74">.</op:operator><name pos:line="204" pos:column="75">GetStartSegment</name></name><argument_list pos:line="204" pos:column="90">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="204" pos:column="94">i</name> <op:operator pos:line="204" pos:column="96">-</op:operator> <lit:literal type="number" pos:line="204" pos:column="98">1</lit:literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="101">keywordlists</name></expr></argument>, <argument><expr><name pos:line="204" pos:column="115">styler</name></expr></argument>, <argument><expr><name pos:line="204" pos:column="123">bInAsm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if pos:line="206" pos:column="33">if<condition pos:line="206" pos:column="35">(<expr><name pos:line="206" pos:column="36">lStateChange</name> <op:operator pos:line="206" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="206" pos:column="52">1</lit:literal></expr>)</condition><then pos:line="206" pos:column="54"> <block pos:line="206" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="207" pos:column="41">styler</name><op:operator pos:line="207" pos:column="47">.</op:operator><name pos:line="207" pos:column="48">SetLineState</name></name><argument_list pos:line="207" pos:column="60">(<argument><expr><name pos:line="207" pos:column="61">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="207" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="208" pos:column="41">bInClassDefinition</name> <op:operator pos:line="208" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="208" pos:column="62">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="209" pos:column="35">else <if pos:line="209" pos:column="40">if<condition pos:line="209" pos:column="42">(<expr><name pos:line="209" pos:column="43">lStateChange</name> <op:operator pos:line="209" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="209" pos:column="59">2</lit:literal></expr>)</condition><then pos:line="209" pos:column="61"> <block pos:line="209" pos:column="62">{
					<expr_stmt><expr><name pos:line="210" pos:column="41">bInAsm</name> <op:operator pos:line="210" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="210" pos:column="50">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="211" pos:column="35">else <if pos:line="211" pos:column="40">if<condition pos:line="211" pos:column="42">(<expr><name pos:line="211" pos:column="43">lStateChange</name> <op:operator pos:line="211" pos:column="56">==</op:operator> <op:operator pos:line="211" pos:column="59">-</op:operator><lit:literal type="number" pos:line="211" pos:column="60">1</lit:literal></expr>)</condition><then pos:line="211" pos:column="62"> <block pos:line="211" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="212" pos:column="41">styler</name><op:operator pos:line="212" pos:column="47">.</op:operator><name pos:line="212" pos:column="48">SetLineState</name></name><argument_list pos:line="212" pos:column="60">(<argument><expr><name pos:line="212" pos:column="61">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="212" pos:column="74">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="213" pos:column="41">bInClassDefinition</name> <op:operator pos:line="213" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="213" pos:column="62">false</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="214" pos:column="41">bInAsm</name> <op:operator pos:line="214" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="214" pos:column="50">false</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>

				<expr_stmt><expr><name pos:line="217" pos:column="33">state</name> <op:operator pos:line="217" pos:column="39">=</op:operator> <name pos:line="217" pos:column="41">SCE_C_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="218" pos:column="33">chNext</name> <op:operator pos:line="218" pos:column="40">=</op:operator> <call><name><name pos:line="218" pos:column="42">styler</name><op:operator pos:line="218" pos:column="48">.</op:operator><name pos:line="218" pos:column="49">SafeGetCharAt</name></name><argument_list pos:line="218" pos:column="62">(<argument><expr><name pos:line="218" pos:column="63">i</name> <op:operator pos:line="218" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="218" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="219" pos:column="33">if <condition pos:line="219" pos:column="36">(<expr><name pos:line="219" pos:column="37">ch</name> <op:operator pos:line="219" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="219" pos:column="43">'!'</lit:literal> <op:operator pos:line="219" pos:column="47">&amp;&amp;</op:operator> <name pos:line="219" pos:column="50">chNext</name> <op:operator pos:line="219" pos:column="57">!=</op:operator> <lit:literal type="char" pos:line="219" pos:column="60">'*'</lit:literal></expr>)</condition><then pos:line="219" pos:column="64"> <block pos:line="219" pos:column="65">{
					<expr_stmt><expr><name pos:line="220" pos:column="41">state</name> <op:operator pos:line="220" pos:column="47">=</op:operator> <name pos:line="220" pos:column="49">SCE_C_COMMENT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="221" pos:column="35">else <if pos:line="221" pos:column="40">if <condition pos:line="221" pos:column="43">(<expr><name pos:line="221" pos:column="44">ch</name> <op:operator pos:line="221" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="50">'!'</lit:literal> <op:operator pos:line="221" pos:column="54">&amp;&amp;</op:operator> <name pos:line="221" pos:column="57">chNext</name> <op:operator pos:line="221" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="67">'*'</lit:literal></expr>)</condition><then pos:line="221" pos:column="71"> <block pos:line="221" pos:column="72">{
					<expr_stmt><expr><call><name pos:line="222" pos:column="41">ColourTo</name><argument_list pos:line="222" pos:column="49">(<argument><expr><name pos:line="222" pos:column="50">styler</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="58">i</name><op:operator pos:line="222" pos:column="59">-</op:operator><lit:literal type="number" pos:line="222" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="63">state</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="70">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="223" pos:column="41">state</name> <op:operator pos:line="223" pos:column="47">=</op:operator> <name pos:line="223" pos:column="49">SCE_C_COMMENTDOC</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="224" pos:column="35">else <if pos:line="224" pos:column="40">if <condition pos:line="224" pos:column="43">(<expr><name pos:line="224" pos:column="44">ch</name> <op:operator pos:line="224" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="224" pos:column="50">'-'</lit:literal> <op:operator pos:line="224" pos:column="54">&amp;&amp;</op:operator> <name pos:line="224" pos:column="57">chNext</name> <op:operator pos:line="224" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="224" pos:column="67">'-'</lit:literal></expr>)</condition><then pos:line="224" pos:column="71"> <block pos:line="224" pos:column="72">{
					<expr_stmt><expr><name pos:line="225" pos:column="41">state</name> <op:operator pos:line="225" pos:column="47">=</op:operator> <name pos:line="225" pos:column="49">SCE_C_COMMENTLINE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="226" pos:column="35">else <if pos:line="226" pos:column="40">if <condition pos:line="226" pos:column="43">(<expr><name pos:line="226" pos:column="44">ch</name> <op:operator pos:line="226" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="226" pos:column="50">'"'</lit:literal></expr>)</condition><then pos:line="226" pos:column="54"> <block pos:line="226" pos:column="55">{
					<expr_stmt><expr><name pos:line="227" pos:column="41">state</name> <op:operator pos:line="227" pos:column="47">=</op:operator> <name pos:line="227" pos:column="49">SCE_C_STRING</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="228" pos:column="35">else <if pos:line="228" pos:column="40">if <condition pos:line="228" pos:column="43">(<expr><call><name pos:line="228" pos:column="44">isTALoperator</name><argument_list pos:line="228" pos:column="57">(<argument><expr><name pos:line="228" pos:column="58">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="228" pos:column="62"> <block pos:line="228" pos:column="63">{
					<expr_stmt><expr><call><name pos:line="229" pos:column="41">ColourTo</name><argument_list pos:line="229" pos:column="49">(<argument><expr><name pos:line="229" pos:column="50">styler</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="58">i</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="61">SCE_C_OPERATOR</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="77">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="232" pos:column="19">else <block pos:line="232" pos:column="24">{
			<if pos:line="233" pos:column="25">if <condition pos:line="233" pos:column="28">(<expr><name pos:line="233" pos:column="29">state</name> <op:operator pos:line="233" pos:column="35">==</op:operator> <name pos:line="233" pos:column="38">SCE_C_PREPROCESSOR</name></expr>)</condition><then pos:line="233" pos:column="57"> <block pos:line="233" pos:column="58">{
				<if pos:line="234" pos:column="33">if <condition pos:line="234" pos:column="36">(<expr><op:operator pos:line="234" pos:column="37">(</op:operator><name pos:line="234" pos:column="38">ch</name> <op:operator pos:line="234" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="44">'\r'</lit:literal> <op:operator pos:line="234" pos:column="49">||</op:operator> <name pos:line="234" pos:column="52">ch</name> <op:operator pos:line="234" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="58">'\n'</lit:literal><op:operator pos:line="234" pos:column="62">)</op:operator> <op:operator pos:line="234" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="234" pos:column="67">!</op:operator><op:operator pos:line="234" pos:column="68">(</op:operator><name pos:line="234" pos:column="69">chPrev</name> <op:operator pos:line="234" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="79">'\\'</lit:literal> <op:operator pos:line="234" pos:column="84">||</op:operator> <name pos:line="234" pos:column="87">chPrev</name> <op:operator pos:line="234" pos:column="94">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="97">'\r'</lit:literal><op:operator pos:line="234" pos:column="101">)</op:operator></expr>)</condition><then pos:line="234" pos:column="103"> <block pos:line="234" pos:column="104">{
					<expr_stmt><expr><call><name pos:line="235" pos:column="41">ColourTo</name><argument_list pos:line="235" pos:column="49">(<argument><expr><name pos:line="235" pos:column="50">styler</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="58">i</name><op:operator pos:line="235" pos:column="59">-</op:operator><lit:literal type="number" pos:line="235" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="235" pos:column="63">state</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="70">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="236" pos:column="41">state</name> <op:operator pos:line="236" pos:column="47">=</op:operator> <name pos:line="236" pos:column="49">SCE_C_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="238" pos:column="27">else <if pos:line="238" pos:column="32">if <condition pos:line="238" pos:column="35">(<expr><name pos:line="238" pos:column="36">state</name> <op:operator pos:line="238" pos:column="42">==</op:operator> <name pos:line="238" pos:column="45">SCE_C_COMMENT</name></expr>)</condition><then pos:line="238" pos:column="59"> <block pos:line="238" pos:column="60">{
				<if pos:line="239" pos:column="33">if <condition pos:line="239" pos:column="36">(<expr><name pos:line="239" pos:column="37">ch</name> <op:operator pos:line="239" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="43">'!'</lit:literal> <op:operator pos:line="239" pos:column="47">||</op:operator> <op:operator pos:line="239" pos:column="50">(</op:operator><name pos:line="239" pos:column="51">ch</name> <op:operator pos:line="239" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="57">'\r'</lit:literal> <op:operator pos:line="239" pos:column="62">||</op:operator> <name pos:line="239" pos:column="65">ch</name> <op:operator pos:line="239" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="71">'\n'</lit:literal><op:operator pos:line="239" pos:column="75">)</op:operator></expr> )</condition><then pos:line="239" pos:column="78"> <block pos:line="239" pos:column="79">{
					<expr_stmt><expr><call><name pos:line="240" pos:column="41">ColourTo</name><argument_list pos:line="240" pos:column="49">(<argument><expr><name pos:line="240" pos:column="50">styler</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="58">i</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="61">state</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="68">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="241" pos:column="41">state</name> <op:operator pos:line="241" pos:column="47">=</op:operator> <name pos:line="241" pos:column="49">SCE_C_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="243" pos:column="27">else <if pos:line="243" pos:column="32">if <condition pos:line="243" pos:column="35">(<expr><name pos:line="243" pos:column="36">state</name> <op:operator pos:line="243" pos:column="42">==</op:operator> <name pos:line="243" pos:column="45">SCE_C_COMMENTDOC</name></expr>)</condition><then pos:line="243" pos:column="62"> <block pos:line="243" pos:column="63">{
				<if pos:line="244" pos:column="33">if <condition pos:line="244" pos:column="36">(<expr><name pos:line="244" pos:column="37">ch</name> <op:operator pos:line="244" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="244" pos:column="43">'!'</lit:literal> <op:operator pos:line="244" pos:column="47">||</op:operator> <op:operator pos:line="244" pos:column="50">(</op:operator><name pos:line="244" pos:column="51">ch</name> <op:operator pos:line="244" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="244" pos:column="57">'\r'</lit:literal> <op:operator pos:line="244" pos:column="62">||</op:operator> <name pos:line="244" pos:column="65">ch</name> <op:operator pos:line="244" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="244" pos:column="71">'\n'</lit:literal><op:operator pos:line="244" pos:column="75">)</op:operator></expr>)</condition><then pos:line="244" pos:column="77"> <block pos:line="244" pos:column="78">{
					<if pos:line="245" pos:column="41">if <condition pos:line="245" pos:column="44">(<expr><op:operator pos:line="245" pos:column="45">(</op:operator><op:operator pos:line="245" pos:column="46">(</op:operator><name pos:line="245" pos:column="47">i</name> <op:operator pos:line="245" pos:column="49">&gt;</op:operator> <call><name><name pos:line="245" pos:column="51">styler</name><op:operator pos:line="245" pos:column="57">.</op:operator><name pos:line="245" pos:column="58">GetStartSegment</name></name><argument_list pos:line="245" pos:column="73">()</argument_list></call> <op:operator pos:line="245" pos:column="76">+</op:operator> <lit:literal type="number" pos:line="245" pos:column="78">2</lit:literal><op:operator pos:line="245" pos:column="79">)</op:operator> <op:operator pos:line="245" pos:column="81">||</op:operator> <op:operator pos:line="245" pos:column="84">(</op:operator>
						<op:operator pos:line="246" pos:column="49">(</op:operator><name pos:line="246" pos:column="50">initStyle</name> <op:operator pos:line="246" pos:column="60">==</op:operator> <name pos:line="246" pos:column="63">SCE_C_COMMENTDOC</name><op:operator pos:line="246" pos:column="79">)</op:operator> <op:operator pos:line="246" pos:column="81">&amp;&amp;</op:operator>
						<op:operator pos:line="247" pos:column="49">(</op:operator><call><name><name pos:line="247" pos:column="50">styler</name><op:operator pos:line="247" pos:column="56">.</op:operator><name pos:line="247" pos:column="57">GetStartSegment</name></name><argument_list pos:line="247" pos:column="72">()</argument_list></call> <op:operator pos:line="247" pos:column="75">==</op:operator> <call><name><name pos:line="247" pos:column="78">static_cast</name><argument_list pos:line="247" pos:column="89">&lt;<argument><expr><name pos:line="247" pos:column="90">unsigned</name> <name pos:line="247" pos:column="99">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="247" pos:column="103">(<argument><expr><name pos:line="247" pos:column="104">startPos</name></expr></argument>)</argument_list></call><op:operator pos:line="247" pos:column="113">)</op:operator><op:operator pos:line="247" pos:column="114">)</op:operator><op:operator pos:line="247" pos:column="115">)</op:operator></expr>)</condition><then pos:line="247" pos:column="117"> <block pos:line="247" pos:column="118">{
							<expr_stmt><expr><call><name pos:line="248" pos:column="57">ColourTo</name><argument_list pos:line="248" pos:column="65">(<argument><expr><name pos:line="248" pos:column="66">styler</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="74">i</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="77">state</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="84">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="249" pos:column="57">state</name> <op:operator pos:line="249" pos:column="63">=</op:operator> <name pos:line="249" pos:column="65">SCE_C_DEFAULT</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></then> <else pos:line="252" pos:column="27">else <if pos:line="252" pos:column="32">if <condition pos:line="252" pos:column="35">(<expr><name pos:line="252" pos:column="36">state</name> <op:operator pos:line="252" pos:column="42">==</op:operator> <name pos:line="252" pos:column="45">SCE_C_COMMENTLINE</name></expr>)</condition><then pos:line="252" pos:column="63"> <block pos:line="252" pos:column="64">{
				<if pos:line="253" pos:column="33">if <condition pos:line="253" pos:column="36">(<expr><name pos:line="253" pos:column="37">ch</name> <op:operator pos:line="253" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="253" pos:column="43">'\r'</lit:literal> <op:operator pos:line="253" pos:column="48">||</op:operator> <name pos:line="253" pos:column="51">ch</name> <op:operator pos:line="253" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="253" pos:column="57">'\n'</lit:literal></expr>)</condition><then pos:line="253" pos:column="62"> <block pos:line="253" pos:column="63">{
					<expr_stmt><expr><call><name pos:line="254" pos:column="41">ColourTo</name><argument_list pos:line="254" pos:column="49">(<argument><expr><name pos:line="254" pos:column="50">styler</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="58">i</name><op:operator pos:line="254" pos:column="59">-</op:operator><lit:literal type="number" pos:line="254" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="254" pos:column="63">state</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="70">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="255" pos:column="41">state</name> <op:operator pos:line="255" pos:column="47">=</op:operator> <name pos:line="255" pos:column="49">SCE_C_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="257" pos:column="27">else <if pos:line="257" pos:column="32">if <condition pos:line="257" pos:column="35">(<expr><name pos:line="257" pos:column="36">state</name> <op:operator pos:line="257" pos:column="42">==</op:operator> <name pos:line="257" pos:column="45">SCE_C_STRING</name></expr>)</condition><then pos:line="257" pos:column="58"> <block pos:line="257" pos:column="59">{
				<if pos:line="258" pos:column="33">if <condition pos:line="258" pos:column="36">(<expr><name pos:line="258" pos:column="37">ch</name> <op:operator pos:line="258" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="258" pos:column="43">'"'</lit:literal></expr>)</condition><then pos:line="258" pos:column="47"> <block pos:line="258" pos:column="48">{
					<expr_stmt><expr><call><name pos:line="259" pos:column="41">ColourTo</name><argument_list pos:line="259" pos:column="49">(<argument><expr><name pos:line="259" pos:column="50">styler</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="58">i</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="61">state</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="68">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="260" pos:column="41">state</name> <op:operator pos:line="260" pos:column="47">=</op:operator> <name pos:line="260" pos:column="49">SCE_C_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if></else></if></else></if></else></if>
		}</block></else></if></else></if>
        <if pos:line="264" pos:column="9">if <condition pos:line="264" pos:column="12">(<expr><op:operator pos:line="264" pos:column="13">!</op:operator><call><name pos:line="264" pos:column="14">isspacechar</name><argument_list pos:line="264" pos:column="25">(<argument><expr><name pos:line="264" pos:column="26">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="264" pos:column="30">
            <expr_stmt><expr><name pos:line="265" pos:column="13">visibleChars</name><op:operator pos:line="265" pos:column="25">++</op:operator></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="266" pos:column="17">chPrev</name> <op:operator pos:line="266" pos:column="24">=</op:operator> <name pos:line="266" pos:column="26">ch</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="268" pos:column="9">ColourTo</name><argument_list pos:line="268" pos:column="17">(<argument><expr><name pos:line="268" pos:column="18">styler</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="26">lengthDoc</name> <op:operator pos:line="268" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="268" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><name pos:line="268" pos:column="41">state</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="48">bInAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="271" pos:column="1">static</specifier> <name pos:line="271" pos:column="8">void</name></type> <name pos:line="271" pos:column="13">FoldTALDoc</name><parameter_list pos:line="271" pos:column="23">(<param><decl><type><name pos:line="271" pos:column="24">unsigned</name> <name pos:line="271" pos:column="33">int</name></type> <name pos:line="271" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="47">int</name></type> <name pos:line="271" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="59">int</name></type> <name pos:line="271" pos:column="63">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="271" pos:column="74">WordList</name> <type:modifier pos:line="271" pos:column="83">*</type:modifier><index pos:line="271" pos:column="84">[]</index></name></type></decl></param>,
                            <param><decl><type><name pos:line="272" pos:column="29">Accessor</name> <type:modifier pos:line="272" pos:column="38">&amp;</type:modifier></type><name pos:line="272" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="272" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="273" pos:column="9">bool</name></type> <name pos:line="273" pos:column="14">foldComment</name> <init pos:line="273" pos:column="26">= <expr><call><name><name pos:line="273" pos:column="28">styler</name><op:operator pos:line="273" pos:column="34">.</op:operator><name pos:line="273" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="273" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="273" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="273" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="274" pos:column="9">bool</name></type> <name pos:line="274" pos:column="14">foldPreprocessor</name> <init pos:line="274" pos:column="31">= <expr><call><name><name pos:line="274" pos:column="33">styler</name><op:operator pos:line="274" pos:column="39">.</op:operator><name pos:line="274" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="274" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="274" pos:column="55">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="274" pos:column="76">!=</op:operator> <lit:literal type="number" pos:line="274" pos:column="79">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="275" pos:column="9">bool</name></type> <name pos:line="275" pos:column="14">foldCompact</name> <init pos:line="275" pos:column="26">= <expr><call><name><name pos:line="275" pos:column="28">styler</name><op:operator pos:line="275" pos:column="34">.</op:operator><name pos:line="275" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="275" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="275" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="275" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="275" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="275" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="276" pos:column="9">unsigned</name> <name pos:line="276" pos:column="18">int</name></type> <name pos:line="276" pos:column="22">endPos</name> <init pos:line="276" pos:column="29">= <expr><name pos:line="276" pos:column="31">startPos</name> <op:operator pos:line="276" pos:column="40">+</op:operator> <name pos:line="276" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="277" pos:column="9">int</name></type> <name pos:line="277" pos:column="13">visibleChars</name> <init pos:line="277" pos:column="26">= <expr><lit:literal type="number" pos:line="277" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="278" pos:column="9">int</name></type> <name pos:line="278" pos:column="13">lineCurrent</name> <init pos:line="278" pos:column="25">= <expr><call><name><name pos:line="278" pos:column="27">styler</name><op:operator pos:line="278" pos:column="33">.</op:operator><name pos:line="278" pos:column="34">GetLine</name></name><argument_list pos:line="278" pos:column="41">(<argument><expr><name pos:line="278" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="279" pos:column="9">int</name></type> <name pos:line="279" pos:column="13">levelPrev</name> <init pos:line="279" pos:column="23">= <expr><call><name><name pos:line="279" pos:column="25">styler</name><op:operator pos:line="279" pos:column="31">.</op:operator><name pos:line="279" pos:column="32">LevelAt</name></name><argument_list pos:line="279" pos:column="39">(<argument><expr><name pos:line="279" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="279" pos:column="53">&amp;</op:operator> <name pos:line="279" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="280" pos:column="9">int</name></type> <name pos:line="280" pos:column="13">levelCurrent</name> <init pos:line="280" pos:column="26">= <expr><name pos:line="280" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="281" pos:column="9">char</name></type> <name pos:line="281" pos:column="14">chNext</name> <init pos:line="281" pos:column="21">= <expr><name><name pos:line="281" pos:column="23">styler</name><index pos:line="281" pos:column="29">[<expr><name pos:line="281" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="282" pos:column="9">int</name></type> <name pos:line="282" pos:column="13">styleNext</name> <init pos:line="282" pos:column="23">= <expr><call><name><name pos:line="282" pos:column="25">styler</name><op:operator pos:line="282" pos:column="31">.</op:operator><name pos:line="282" pos:column="32">StyleAt</name></name><argument_list pos:line="282" pos:column="39">(<argument><expr><name pos:line="282" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="283" pos:column="9">int</name></type> <name pos:line="283" pos:column="13">style</name> <init pos:line="283" pos:column="19">= <expr><name pos:line="283" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="284" pos:column="9">bool</name></type> <name pos:line="284" pos:column="14">was_end</name> <init pos:line="284" pos:column="22">= <expr><lit:literal type="boolean" pos:line="284" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="285" pos:column="9">bool</name></type> <name pos:line="285" pos:column="14">section</name> <init pos:line="285" pos:column="22">= <expr><lit:literal type="boolean" pos:line="285" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="287" pos:column="9">int</name></type> <name pos:line="287" pos:column="13">lastStart</name> <init pos:line="287" pos:column="23">= <expr><lit:literal type="number" pos:line="287" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="289" pos:column="9">for (<init><decl><type><name pos:line="289" pos:column="14">unsigned</name> <name pos:line="289" pos:column="23">int</name></type> <name pos:line="289" pos:column="27">i</name> <init pos:line="289" pos:column="29">= <expr><name pos:line="289" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="289" pos:column="41">i</name> <op:operator pos:line="289" pos:column="43">&lt;</op:operator> <name pos:line="289" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="289" pos:column="53">i</name><op:operator pos:line="289" pos:column="54">++</op:operator></expr></incr>) <block pos:line="289" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="290" pos:column="17">char</name></type> <name pos:line="290" pos:column="22">ch</name> <init pos:line="290" pos:column="25">= <expr><name pos:line="290" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="291" pos:column="17">chNext</name> <op:operator pos:line="291" pos:column="24">=</op:operator> <call><name><name pos:line="291" pos:column="26">styler</name><op:operator pos:line="291" pos:column="32">.</op:operator><name pos:line="291" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="291" pos:column="46">(<argument><expr><name pos:line="291" pos:column="47">i</name> <op:operator pos:line="291" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="291" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="292" pos:column="17">int</name></type> <name pos:line="292" pos:column="21">stylePrev</name> <init pos:line="292" pos:column="31">= <expr><name pos:line="292" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="293" pos:column="17">style</name> <op:operator pos:line="293" pos:column="23">=</op:operator> <name pos:line="293" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="294" pos:column="17">styleNext</name> <op:operator pos:line="294" pos:column="27">=</op:operator> <call><name><name pos:line="294" pos:column="29">styler</name><op:operator pos:line="294" pos:column="35">.</op:operator><name pos:line="294" pos:column="36">StyleAt</name></name><argument_list pos:line="294" pos:column="43">(<argument><expr><name pos:line="294" pos:column="44">i</name> <op:operator pos:line="294" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="294" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="295" pos:column="17">bool</name></type> <name pos:line="295" pos:column="22">atEOL</name> <init pos:line="295" pos:column="28">= <expr><op:operator pos:line="295" pos:column="30">(</op:operator><name pos:line="295" pos:column="31">ch</name> <op:operator pos:line="295" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="295" pos:column="37">'\r'</lit:literal> <op:operator pos:line="295" pos:column="42">&amp;&amp;</op:operator> <name pos:line="295" pos:column="45">chNext</name> <op:operator pos:line="295" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="295" pos:column="55">'\n'</lit:literal><op:operator pos:line="295" pos:column="59">)</op:operator> <op:operator pos:line="295" pos:column="61">||</op:operator> <op:operator pos:line="295" pos:column="64">(</op:operator><name pos:line="295" pos:column="65">ch</name> <op:operator pos:line="295" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="295" pos:column="71">'\n'</lit:literal><op:operator pos:line="295" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="297" pos:column="17">if <condition pos:line="297" pos:column="20">(<expr><name pos:line="297" pos:column="21">stylePrev</name> <op:operator pos:line="297" pos:column="31">==</op:operator> <name pos:line="297" pos:column="34">SCE_C_DEFAULT</name> <op:operator pos:line="297" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="297" pos:column="51">(</op:operator><name pos:line="297" pos:column="52">style</name> <op:operator pos:line="297" pos:column="58">==</op:operator> <name pos:line="297" pos:column="61">SCE_C_WORD</name> <op:operator pos:line="297" pos:column="72">||</op:operator> <name pos:line="297" pos:column="75">style</name> <op:operator pos:line="297" pos:column="81">==</op:operator> <name pos:line="297" pos:column="84">SCE_C_UUID</name> <op:operator pos:line="297" pos:column="95">||</op:operator> <name pos:line="297" pos:column="98">style</name> <op:operator pos:line="297" pos:column="104">==</op:operator> <name pos:line="297" pos:column="107">SCE_C_PREPROCESSOR</name><op:operator pos:line="297" pos:column="125">)</op:operator></expr>)</condition><then pos:line="297" pos:column="127">
		<block pos:line="298" pos:column="17">{
			<comment type="line" pos:line="299" pos:column="25">// Store last word start point.</comment>
			<expr_stmt><expr><name pos:line="300" pos:column="25">lastStart</name> <op:operator pos:line="300" pos:column="35">=</op:operator> <name pos:line="300" pos:column="37">i</name></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="303" pos:column="17">if <condition pos:line="303" pos:column="20">(<expr><name pos:line="303" pos:column="21">stylePrev</name> <op:operator pos:line="303" pos:column="31">==</op:operator> <name pos:line="303" pos:column="34">SCE_C_WORD</name> <op:operator pos:line="303" pos:column="45">||</op:operator> <name pos:line="303" pos:column="48">style</name> <op:operator pos:line="303" pos:column="54">==</op:operator> <name pos:line="303" pos:column="57">SCE_C_UUID</name> <op:operator pos:line="303" pos:column="68">||</op:operator> <name pos:line="303" pos:column="71">stylePrev</name> <op:operator pos:line="303" pos:column="81">==</op:operator> <name pos:line="303" pos:column="84">SCE_C_PREPROCESSOR</name></expr>)</condition><then pos:line="303" pos:column="103"> <block pos:line="303" pos:column="104">{
			<if pos:line="304" pos:column="25">if<condition pos:line="304" pos:column="27">(<expr><call><name pos:line="304" pos:column="28">isTALwordchar</name><argument_list pos:line="304" pos:column="41">(<argument><expr><name pos:line="304" pos:column="42">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="304" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="304" pos:column="49">!</op:operator><call><name pos:line="304" pos:column="50">isTALwordchar</name><argument_list pos:line="304" pos:column="63">(<argument><expr><name pos:line="304" pos:column="64">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="304" pos:column="72"> <block pos:line="304" pos:column="73">{
				<decl_stmt><decl><type><name pos:line="305" pos:column="33">char</name></type> <name><name pos:line="305" pos:column="38">s</name><index pos:line="305" pos:column="39">[<expr><lit:literal type="number" pos:line="305" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="306" pos:column="33">getRange</name><argument_list pos:line="306" pos:column="41">(<argument><expr><name pos:line="306" pos:column="42">lastStart</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="53">i</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="56">styler</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="64">s</name></expr></argument>, <argument><expr><sizeof pos:line="306" pos:column="67">sizeof<argument_list pos:line="306" pos:column="73">(<argument><expr><name pos:line="306" pos:column="74">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="307" pos:column="33">if <condition pos:line="307" pos:column="36">(<expr><name pos:line="307" pos:column="37">stylePrev</name> <op:operator pos:line="307" pos:column="47">==</op:operator> <name pos:line="307" pos:column="50">SCE_C_PREPROCESSOR</name> <op:operator pos:line="307" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="307" pos:column="72">strcmp</name><argument_list pos:line="307" pos:column="78">(<argument><expr><name pos:line="307" pos:column="79">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="307" pos:column="82">"?section"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="307" pos:column="94">==</op:operator> <lit:literal type="number" pos:line="307" pos:column="97">0</lit:literal></expr>)</condition><then pos:line="307" pos:column="99">
					<block pos:line="308" pos:column="41">{
					<expr_stmt><expr><name pos:line="309" pos:column="41">section</name> <op:operator pos:line="309" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="309" pos:column="51">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="310" pos:column="41">levelCurrent</name> <op:operator pos:line="310" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="310" pos:column="56">1</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="311" pos:column="41">levelPrev</name> <op:operator pos:line="311" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="311" pos:column="53">0</lit:literal></expr>;</expr_stmt>
					}</block></then>
				<else pos:line="313" pos:column="33">else <if pos:line="313" pos:column="38">if <condition pos:line="313" pos:column="41">(<expr><name pos:line="313" pos:column="42">stylePrev</name> <op:operator pos:line="313" pos:column="52">==</op:operator> <name pos:line="313" pos:column="55">SCE_C_WORD</name> <op:operator pos:line="313" pos:column="66">||</op:operator> <name pos:line="313" pos:column="69">stylePrev</name> <op:operator pos:line="313" pos:column="79">==</op:operator> <name pos:line="313" pos:column="82">SCE_C_UUID</name></expr>)</condition><then pos:line="313" pos:column="93">
					<block pos:line="314" pos:column="41">{
					<if pos:line="315" pos:column="41">if <condition pos:line="315" pos:column="44">(<expr><call><name pos:line="315" pos:column="45">strcmp</name><argument_list pos:line="315" pos:column="51">(<argument><expr><name pos:line="315" pos:column="52">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="315" pos:column="55">"block"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="315" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="315" pos:column="67">0</lit:literal></expr>)</condition><then pos:line="315" pos:column="69">
						<block pos:line="316" pos:column="49">{
						<comment type="line" pos:line="317" pos:column="49">// block keyword is ignored immediately after end keyword</comment>
						<if pos:line="318" pos:column="49">if <condition pos:line="318" pos:column="52">(<expr><op:operator pos:line="318" pos:column="53">!</op:operator><name pos:line="318" pos:column="54">was_end</name></expr>)</condition><then pos:line="318" pos:column="62">
							<expr_stmt><expr><name pos:line="319" pos:column="57">levelCurrent</name><op:operator pos:line="319" pos:column="69">++</op:operator></expr>;</expr_stmt></then></if>
						}</block></then>
					<else pos:line="321" pos:column="41">else
						<expr_stmt><expr><name pos:line="322" pos:column="49">levelCurrent</name> <op:operator pos:line="322" pos:column="62">+=</op:operator> <call><name pos:line="322" pos:column="65">classifyFoldPointTAL</name><argument_list pos:line="322" pos:column="85">(<argument><expr><name pos:line="322" pos:column="86">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
					<if pos:line="323" pos:column="41">if <condition pos:line="323" pos:column="44">(<expr><call><name pos:line="323" pos:column="45">strcmp</name><argument_list pos:line="323" pos:column="51">(<argument><expr><name pos:line="323" pos:column="52">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="323" pos:column="55">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="323" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="323" pos:column="65">0</lit:literal></expr>)</condition><then pos:line="323" pos:column="67">
						<block pos:line="324" pos:column="49">{
						<expr_stmt><expr><name pos:line="325" pos:column="49">was_end</name> <op:operator pos:line="325" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="325" pos:column="59">true</lit:literal></expr>;</expr_stmt>
						}</block></then>
					<else pos:line="327" pos:column="41">else
						<block pos:line="328" pos:column="49">{
						<expr_stmt><expr><name pos:line="329" pos:column="49">was_end</name> <op:operator pos:line="329" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="329" pos:column="59">false</lit:literal></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="335" pos:column="17">if <condition pos:line="335" pos:column="20">(<expr><name pos:line="335" pos:column="21">foldComment</name> <op:operator pos:line="335" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="335" pos:column="36">(</op:operator><name pos:line="335" pos:column="37">style</name> <op:operator pos:line="335" pos:column="43">==</op:operator> <name pos:line="335" pos:column="46">SCE_C_COMMENTLINE</name><op:operator pos:line="335" pos:column="63">)</op:operator></expr>)</condition><then pos:line="335" pos:column="65"> <block pos:line="335" pos:column="66">{
			<if pos:line="336" pos:column="25">if <condition pos:line="336" pos:column="28">(<expr><op:operator pos:line="336" pos:column="29">(</op:operator><name pos:line="336" pos:column="30">ch</name> <op:operator pos:line="336" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="336" pos:column="36">'/'</lit:literal><op:operator pos:line="336" pos:column="39">)</op:operator> <op:operator pos:line="336" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="336" pos:column="44">(</op:operator><name pos:line="336" pos:column="45">chNext</name> <op:operator pos:line="336" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="336" pos:column="55">'/'</lit:literal><op:operator pos:line="336" pos:column="58">)</op:operator></expr>)</condition><then pos:line="336" pos:column="60"> <block pos:line="336" pos:column="61">{
				<decl_stmt><decl><type><name pos:line="337" pos:column="33">char</name></type> <name pos:line="337" pos:column="38">chNext2</name> <init pos:line="337" pos:column="46">= <expr><call><name><name pos:line="337" pos:column="48">styler</name><op:operator pos:line="337" pos:column="54">.</op:operator><name pos:line="337" pos:column="55">SafeGetCharAt</name></name><argument_list pos:line="337" pos:column="68">(<argument><expr><name pos:line="337" pos:column="69">i</name> <op:operator pos:line="337" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="337" pos:column="73">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="338" pos:column="33">if <condition pos:line="338" pos:column="36">(<expr><name pos:line="338" pos:column="37">chNext2</name> <op:operator pos:line="338" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="338" pos:column="48">'{'</lit:literal></expr>)</condition><then pos:line="338" pos:column="52"> <block pos:line="338" pos:column="53">{
					<expr_stmt><expr><name pos:line="339" pos:column="41">levelCurrent</name><op:operator pos:line="339" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="340" pos:column="35">else <if pos:line="340" pos:column="40">if <condition pos:line="340" pos:column="43">(<expr><name pos:line="340" pos:column="44">chNext2</name> <op:operator pos:line="340" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="340" pos:column="55">'}'</lit:literal></expr>)</condition><then pos:line="340" pos:column="59"> <block pos:line="340" pos:column="60">{
					<expr_stmt><expr><name pos:line="341" pos:column="41">levelCurrent</name><op:operator pos:line="341" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="346" pos:column="17">if <condition pos:line="346" pos:column="20">(<expr><name pos:line="346" pos:column="21">foldPreprocessor</name> <op:operator pos:line="346" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="346" pos:column="41">(</op:operator><name pos:line="346" pos:column="42">style</name> <op:operator pos:line="346" pos:column="48">==</op:operator> <name pos:line="346" pos:column="51">SCE_C_PREPROCESSOR</name><op:operator pos:line="346" pos:column="69">)</op:operator></expr>)</condition><then pos:line="346" pos:column="71"> <block pos:line="346" pos:column="72">{
			<if pos:line="347" pos:column="25">if <condition pos:line="347" pos:column="28">(<expr><name pos:line="347" pos:column="29">ch</name> <op:operator pos:line="347" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="347" pos:column="35">'{'</lit:literal> <op:operator pos:line="347" pos:column="39">&amp;&amp;</op:operator> <name pos:line="347" pos:column="42">chNext</name> <op:operator pos:line="347" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="347" pos:column="52">'$'</lit:literal></expr>)</condition><then pos:line="347" pos:column="56"> <block pos:line="347" pos:column="57">{
				<decl_stmt><decl><type><name pos:line="348" pos:column="33">unsigned</name> <name pos:line="348" pos:column="42">int</name></type> <name pos:line="348" pos:column="46">j</name><init pos:line="348" pos:column="47">=<expr><name pos:line="348" pos:column="48">i</name><op:operator pos:line="348" pos:column="49">+</op:operator><lit:literal type="number" pos:line="348" pos:column="50">2</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="348" pos:column="53">// skip {$</comment>
				<while pos:line="349" pos:column="33">while <condition pos:line="349" pos:column="39">(<expr><op:operator pos:line="349" pos:column="40">(</op:operator><name pos:line="349" pos:column="41">j</name><op:operator pos:line="349" pos:column="42">&lt;</op:operator><name pos:line="349" pos:column="43">endPos</name><op:operator pos:line="349" pos:column="49">)</op:operator> <op:operator pos:line="349" pos:column="51">&amp;&amp;</op:operator> <call><name pos:line="349" pos:column="54">IsASpaceOrTab</name><argument_list pos:line="349" pos:column="67">(<argument><expr><call><name><name pos:line="349" pos:column="68">styler</name><op:operator pos:line="349" pos:column="74">.</op:operator><name pos:line="349" pos:column="75">SafeGetCharAt</name></name><argument_list pos:line="349" pos:column="88">(<argument><expr><name pos:line="349" pos:column="89">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="349" pos:column="94">{
					<expr_stmt><expr><name pos:line="350" pos:column="41">j</name><op:operator pos:line="350" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="352" pos:column="33">if <condition pos:line="352" pos:column="36">(<expr><call><name><name pos:line="352" pos:column="37">styler</name><op:operator pos:line="352" pos:column="43">.</op:operator><name pos:line="352" pos:column="44">Match</name></name><argument_list pos:line="352" pos:column="49">(<argument><expr><name pos:line="352" pos:column="50">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="352" pos:column="53">"region"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="352" pos:column="63">||</op:operator> <call><name><name pos:line="352" pos:column="66">styler</name><op:operator pos:line="352" pos:column="72">.</op:operator><name pos:line="352" pos:column="73">Match</name></name><argument_list pos:line="352" pos:column="78">(<argument><expr><name pos:line="352" pos:column="79">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="352" pos:column="82">"if"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="352" pos:column="88"> <block pos:line="352" pos:column="89">{
					<expr_stmt><expr><name pos:line="353" pos:column="41">levelCurrent</name><op:operator pos:line="353" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="354" pos:column="35">else <if pos:line="354" pos:column="40">if <condition pos:line="354" pos:column="43">(<expr><call><name><name pos:line="354" pos:column="44">styler</name><op:operator pos:line="354" pos:column="50">.</op:operator><name pos:line="354" pos:column="51">Match</name></name><argument_list pos:line="354" pos:column="56">(<argument><expr><name pos:line="354" pos:column="57">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="354" pos:column="60">"end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="354" pos:column="67"> <block pos:line="354" pos:column="68">{
					<expr_stmt><expr><name pos:line="355" pos:column="41">levelCurrent</name><op:operator pos:line="355" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="360" pos:column="17">if <condition pos:line="360" pos:column="20">(<expr><name pos:line="360" pos:column="21">foldComment</name> <op:operator pos:line="360" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="360" pos:column="36">IsStreamCommentStyle</name><argument_list pos:line="360" pos:column="56">(<argument><expr><name pos:line="360" pos:column="57">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="360" pos:column="64"> <block pos:line="360" pos:column="65">{
			<if pos:line="361" pos:column="25">if <condition pos:line="361" pos:column="28">(<expr><op:operator pos:line="361" pos:column="29">!</op:operator><call><name pos:line="361" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="361" pos:column="50">(<argument><expr><name pos:line="361" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="361" pos:column="62"> <block pos:line="361" pos:column="63">{
				<expr_stmt><expr><name pos:line="362" pos:column="33">levelCurrent</name><op:operator pos:line="362" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="363" pos:column="27">else <if pos:line="363" pos:column="32">if <condition pos:line="363" pos:column="35">(<expr><op:operator pos:line="363" pos:column="36">!</op:operator><call><name pos:line="363" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="363" pos:column="57">(<argument><expr><name pos:line="363" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="363" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="363" pos:column="72">!</op:operator><name pos:line="363" pos:column="73">atEOL</name></expr>)</condition><then pos:line="363" pos:column="79"> <block pos:line="363" pos:column="80">{
				<comment type="line" pos:line="364" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="365" pos:column="33">levelCurrent</name><op:operator pos:line="365" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>

		<if pos:line="369" pos:column="17">if <condition pos:line="369" pos:column="20">(<expr><name pos:line="369" pos:column="21">atEOL</name></expr>)</condition><then pos:line="369" pos:column="27"> <block pos:line="369" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="370" pos:column="25">int</name></type> <name pos:line="370" pos:column="29">lev</name> <init pos:line="370" pos:column="33">= <expr><name pos:line="370" pos:column="35">levelPrev</name> <op:operator pos:line="370" pos:column="45">|</op:operator> <name pos:line="370" pos:column="47">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
			<if pos:line="371" pos:column="25">if <condition pos:line="371" pos:column="28">(<expr><name pos:line="371" pos:column="29">visibleChars</name> <op:operator pos:line="371" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="371" pos:column="45">0</lit:literal> <op:operator pos:line="371" pos:column="47">&amp;&amp;</op:operator> <name pos:line="371" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="371" pos:column="62">
				<expr_stmt><expr><name pos:line="372" pos:column="33">lev</name> <op:operator pos:line="372" pos:column="37">|=</op:operator> <name pos:line="372" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="373" pos:column="25">if <condition pos:line="373" pos:column="28">(<expr><op:operator pos:line="373" pos:column="29">(</op:operator><name pos:line="373" pos:column="30">levelCurrent</name> <op:operator pos:line="373" pos:column="43">&gt;</op:operator> <name pos:line="373" pos:column="45">levelPrev</name> <op:operator pos:line="373" pos:column="55">||</op:operator> <name pos:line="373" pos:column="58">section</name><op:operator pos:line="373" pos:column="65">)</op:operator> <op:operator pos:line="373" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="373" pos:column="70">(</op:operator><name pos:line="373" pos:column="71">visibleChars</name> <op:operator pos:line="373" pos:column="84">&gt;</op:operator> <lit:literal type="number" pos:line="373" pos:column="86">0</lit:literal><op:operator pos:line="373" pos:column="87">)</op:operator></expr>)</condition><then pos:line="373" pos:column="89">
				<expr_stmt><expr><name pos:line="374" pos:column="33">lev</name> <op:operator pos:line="374" pos:column="37">|=</op:operator> <name pos:line="374" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="375" pos:column="25">if <condition pos:line="375" pos:column="28">(<expr><name pos:line="375" pos:column="29">lev</name> <op:operator pos:line="375" pos:column="33">!=</op:operator> <call><name><name pos:line="375" pos:column="36">styler</name><op:operator pos:line="375" pos:column="42">.</op:operator><name pos:line="375" pos:column="43">LevelAt</name></name><argument_list pos:line="375" pos:column="50">(<argument><expr><name pos:line="375" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="375" pos:column="64"> <block pos:line="375" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="376" pos:column="33">styler</name><op:operator pos:line="376" pos:column="39">.</op:operator><name pos:line="376" pos:column="40">SetLevel</name></name><argument_list pos:line="376" pos:column="48">(<argument><expr><name pos:line="376" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="376" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="378" pos:column="25">lineCurrent</name><op:operator pos:line="378" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="379" pos:column="25">levelPrev</name> <op:operator pos:line="379" pos:column="35">=</op:operator> <name pos:line="379" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="380" pos:column="25">visibleChars</name> <op:operator pos:line="380" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="380" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="381" pos:column="25">section</name> <op:operator pos:line="381" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="381" pos:column="35">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="384" pos:column="17">if <condition pos:line="384" pos:column="20">(<expr><op:operator pos:line="384" pos:column="21">!</op:operator><call><name pos:line="384" pos:column="22">isspacechar</name><argument_list pos:line="384" pos:column="33">(<argument><expr><name pos:line="384" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="384" pos:column="38">
			<expr_stmt><expr><name pos:line="385" pos:column="25">visibleChars</name><op:operator pos:line="385" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<comment type="line" pos:line="388" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="389" pos:column="9">int</name></type> <name pos:line="389" pos:column="13">flagsNext</name> <init pos:line="389" pos:column="23">= <expr><call><name><name pos:line="389" pos:column="25">styler</name><op:operator pos:line="389" pos:column="31">.</op:operator><name pos:line="389" pos:column="32">LevelAt</name></name><argument_list pos:line="389" pos:column="39">(<argument><expr><name pos:line="389" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="389" pos:column="53">&amp;</op:operator> <op:operator pos:line="389" pos:column="55">~</op:operator><name pos:line="389" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="390" pos:column="9">styler</name><op:operator pos:line="390" pos:column="15">.</op:operator><name pos:line="390" pos:column="16">SetLevel</name></name><argument_list pos:line="390" pos:column="24">(<argument><expr><name pos:line="390" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="38">levelPrev</name> <op:operator pos:line="390" pos:column="48">|</op:operator> <name pos:line="390" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="393" pos:column="1">static</specifier> <specifier pos:line="393" pos:column="8">const</specifier> <name pos:line="393" pos:column="14">char</name> <type:modifier pos:line="393" pos:column="19">*</type:modifier> <specifier pos:line="393" pos:column="21">const</specifier></type> <name><name pos:line="393" pos:column="27">TALWordListDesc</name><index pos:line="393" pos:column="42">[]</index></name> <init pos:line="393" pos:column="45">= <expr><block pos:line="393" pos:column="47">{
	<expr><lit:literal type="string" pos:line="394" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="395" pos:column="9">"Builtins"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="396" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="399" pos:column="1">LexerModule</name></type> <name pos:line="399" pos:column="13">lmTAL</name><argument_list pos:line="399" pos:column="18">(<argument><expr><name pos:line="399" pos:column="19">SCLEX_TAL</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="30">ColouriseTALDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="399" pos:column="47">"TAL"</lit:literal></expr></argument>, <argument><expr><name pos:line="399" pos:column="54">FoldTALDoc</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="66">TALWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
