<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\Utf8_16.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Utf8_16.cxx</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C) 2002 Scott Kirkwood</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// Permission to use, copy, modify, distribute and sell this code</comment>
<comment type="line" pos:line="5" pos:column="1">// and its documentation for any purpose is hereby granted without fee,</comment>
<comment type="line" pos:line="6" pos:column="1">// provided that the above copyright notice appear in all copies or</comment>
<comment type="line" pos:line="7" pos:column="1">// any derived copies.  Scott Kirkwood makes no representations</comment>
<comment type="line" pos:line="8" pos:column="1">// about the suitability of this software for any purpose.</comment>
<comment type="line" pos:line="9" pos:column="1">// It is provided "as is" without express or implied warranty.</comment>
<comment type="line" format="doxygen" pos:line="10" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="11" pos:column="1">// </comment>
<comment type="line" pos:line="12" pos:column="1">// Modificated 2006 Jens Lorenz</comment>
<comment type="line" pos:line="13" pos:column="1">// </comment>
<comment type="line" pos:line="14" pos:column="1">// - Clean up the sources</comment>
<comment type="line" pos:line="15" pos:column="1">// - Removing UCS-Bug in Utf8_Iter</comment>
<comment type="line" pos:line="16" pos:column="1">// - Add convert function in Utf8_16_Write</comment>
<comment type="line" format="doxygen" pos:line="17" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Utf8_16.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><specifier pos:line="22" pos:column="1">const</specifier> <name><name pos:line="22" pos:column="7">Utf8_16</name><op:operator pos:line="22" pos:column="14">::</op:operator><name pos:line="22" pos:column="16">utf8</name></name></type> <name><name pos:line="22" pos:column="21">Utf8_16</name><op:operator pos:line="22" pos:column="28">::</op:operator><name pos:line="22" pos:column="30">k_Boms</name><index pos:line="22" pos:column="36">[]</index><index pos:line="22" pos:column="38">[<expr><lit:literal type="number" pos:line="22" pos:column="39">3</lit:literal></expr>]</index></name> <init pos:line="22" pos:column="42">= <expr><block pos:line="22" pos:column="44">{
	<expr><block pos:line="23" pos:column="9">{<expr><lit:literal type="number" pos:line="23" pos:column="10">0x00</lit:literal></expr>, <expr><lit:literal type="number" pos:line="23" pos:column="16">0x00</lit:literal></expr>, <expr><lit:literal type="number" pos:line="23" pos:column="22">0x00</lit:literal></expr>}</block></expr>,  <comment type="line" pos:line="23" pos:column="30">// Unknown</comment>
	<expr><block pos:line="24" pos:column="9">{<expr><lit:literal type="number" pos:line="24" pos:column="10">0xEF</lit:literal></expr>, <expr><lit:literal type="number" pos:line="24" pos:column="16">0xBB</lit:literal></expr>, <expr><lit:literal type="number" pos:line="24" pos:column="22">0xBF</lit:literal></expr>}</block></expr>,  <comment type="line" pos:line="24" pos:column="30">// UTF8</comment>
	<expr><block pos:line="25" pos:column="9">{<expr><lit:literal type="number" pos:line="25" pos:column="10">0xFE</lit:literal></expr>, <expr><lit:literal type="number" pos:line="25" pos:column="16">0xFF</lit:literal></expr>, <expr><lit:literal type="number" pos:line="25" pos:column="22">0x00</lit:literal></expr>}</block></expr>,  <comment type="line" pos:line="25" pos:column="30">// Big endian</comment>
	<expr><block pos:line="26" pos:column="9">{<expr><lit:literal type="number" pos:line="26" pos:column="10">0xFF</lit:literal></expr>, <expr><lit:literal type="number" pos:line="26" pos:column="16">0xFE</lit:literal></expr>, <expr><lit:literal type="number" pos:line="26" pos:column="22">0x00</lit:literal></expr>}</block></expr>,  <comment type="line" pos:line="26" pos:column="30">// Little endian</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="line" pos:line="30" pos:column="1">// ==================================================================</comment>

<constructor><name><name pos:line="32" pos:column="1">Utf8_16_Read</name><op:operator pos:line="32" pos:column="13">::</op:operator><name pos:line="32" pos:column="15">Utf8_16_Read</name></name><parameter_list pos:line="32" pos:column="27">()</parameter_list> <block pos:line="32" pos:column="30">{
	<expr_stmt><expr><name pos:line="33" pos:column="9">m_eEncoding</name>		<op:operator pos:line="33" pos:column="33">=</op:operator> <name pos:line="33" pos:column="35">uni8Bit</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">m_nBufSize</name>		<op:operator pos:line="34" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="34" pos:column="35">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">m_pNewBuf</name>		<op:operator pos:line="35" pos:column="33">=</op:operator> <name pos:line="35" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="36" pos:column="9">m_bFirstRead</name>	<op:operator pos:line="36" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="36" pos:column="27">true</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="39" pos:column="1">Utf8_16_Read</name><op:operator pos:line="39" pos:column="13">::</op:operator>~<name pos:line="39" pos:column="16">Utf8_16_Read</name></name><parameter_list pos:line="39" pos:column="28">()</parameter_list>
<block pos:line="40" pos:column="1">{
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><op:operator pos:line="41" pos:column="13">(</op:operator><name pos:line="41" pos:column="14">m_eEncoding</name> <op:operator pos:line="41" pos:column="26">==</op:operator> <name pos:line="41" pos:column="29">uni16BE</name><op:operator pos:line="41" pos:column="36">)</op:operator> <op:operator pos:line="41" pos:column="38">||</op:operator> <op:operator pos:line="41" pos:column="41">(</op:operator><name pos:line="41" pos:column="42">m_eEncoding</name> <op:operator pos:line="41" pos:column="54">==</op:operator> <name pos:line="41" pos:column="57">uni16LE</name><op:operator pos:line="41" pos:column="64">)</op:operator> <op:operator pos:line="41" pos:column="66">||</op:operator> <op:operator pos:line="41" pos:column="69">(</op:operator><name pos:line="41" pos:column="70">m_eEncoding</name> <op:operator pos:line="41" pos:column="82">==</op:operator> <name pos:line="41" pos:column="85">uni16BE_NoBOM</name><op:operator pos:line="41" pos:column="98">)</op:operator> <op:operator pos:line="41" pos:column="100">||</op:operator> <op:operator pos:line="41" pos:column="103">(</op:operator><name pos:line="41" pos:column="104">m_eEncoding</name> <op:operator pos:line="41" pos:column="116">==</op:operator> <name pos:line="41" pos:column="119">uni16LE_NoBOM</name><op:operator pos:line="41" pos:column="132">)</op:operator></expr>)</condition><then pos:line="41" pos:column="134">
    <block pos:line="42" pos:column="5">{
		<expr_stmt><expr><op:operator pos:line="43" pos:column="17">delete</op:operator> <index pos:line="43" pos:column="24">[]</index> <name pos:line="43" pos:column="27">m_pNewBuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="44" pos:column="17">m_pNewBuf</name> <op:operator pos:line="44" pos:column="27">=</op:operator> <name pos:line="44" pos:column="29">NULL</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></destructor>

<comment type="line" pos:line="48" pos:column="1">// Returned value :</comment>
<comment type="line" pos:line="49" pos:column="1">// 0 : utf8</comment>
<comment type="line" pos:line="50" pos:column="1">// 1 : 7bits</comment>
<comment type="line" pos:line="51" pos:column="1">// 2 : 8bits</comment>
<function><type><name pos:line="52" pos:column="1">u78</name></type> <name><name pos:line="52" pos:column="5">Utf8_16_Read</name><op:operator pos:line="52" pos:column="17">::</op:operator><name pos:line="52" pos:column="19">utf8_7bits_8bits</name></name><parameter_list pos:line="52" pos:column="35">()</parameter_list>
<block pos:line="53" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">int</name></type> <name pos:line="54" pos:column="13">rv</name> <init pos:line="54" pos:column="16">= <expr><lit:literal type="number" pos:line="54" pos:column="18">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">int</name></type> <name pos:line="55" pos:column="13">ASCII7only</name> <init pos:line="55" pos:column="24">= <expr><lit:literal type="number" pos:line="55" pos:column="26">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">utf8</name> <type:modifier pos:line="56" pos:column="14">*</type:modifier></type><name pos:line="56" pos:column="15">sx</name>	<init pos:line="56" pos:column="25">= <expr><op:operator pos:line="56" pos:column="27">(</op:operator><name pos:line="56" pos:column="28">utf8</name> <op:operator pos:line="56" pos:column="33">*</op:operator><op:operator pos:line="56" pos:column="34">)</op:operator><name pos:line="56" pos:column="35">m_pBuf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">utf8</name> <type:modifier pos:line="57" pos:column="14">*</type:modifier></type><name pos:line="57" pos:column="15">endx</name>	<init pos:line="57" pos:column="25">= <expr><name pos:line="57" pos:column="27">sx</name> <op:operator pos:line="57" pos:column="30">+</op:operator> <name pos:line="57" pos:column="32">m_nLen</name></expr></init></decl>;</decl_stmt>

	<while pos:line="59" pos:column="9">while <condition pos:line="59" pos:column="15">(<expr><name pos:line="59" pos:column="16">sx</name><op:operator pos:line="59" pos:column="18">&lt;</op:operator><name pos:line="59" pos:column="19">endx</name></expr>)</condition>
	<block pos:line="60" pos:column="9">{
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><op:operator pos:line="61" pos:column="21">!</op:operator><op:operator pos:line="61" pos:column="22">*</op:operator><name pos:line="61" pos:column="23">sx</name></expr>)</condition><then pos:line="61" pos:column="26">
		<block pos:line="62" pos:column="17">{											<comment type="line" pos:line="62" pos:column="105">// For detection, we'll say that NUL means not UTF8</comment>
			<expr_stmt><expr><name pos:line="63" pos:column="25">ASCII7only</name> <op:operator pos:line="63" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="63" pos:column="38">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="64" pos:column="25">rv</name> <op:operator pos:line="64" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="64" pos:column="30">0</lit:literal></expr>;</expr_stmt>
			<break pos:line="65" pos:column="25">break;</break>
		}</block></then> 
		<else pos:line="67" pos:column="17">else <if pos:line="67" pos:column="22">if <condition pos:line="67" pos:column="25">(<expr><op:operator pos:line="67" pos:column="26">*</op:operator><name pos:line="67" pos:column="27">sx</name> <op:operator pos:line="67" pos:column="30">&lt;</op:operator> <lit:literal type="number" pos:line="67" pos:column="32">0x80</lit:literal></expr>)</condition><then pos:line="67" pos:column="37">
		<block pos:line="68" pos:column="17">{			<comment type="line" pos:line="68" pos:column="41">// 0nnnnnnn If the byte's first hex code begins with 0-7, it is an ASCII character.</comment>
			<expr_stmt><expr><name pos:line="69" pos:column="25">sx</name><op:operator pos:line="69" pos:column="27">++</op:operator></expr>;</expr_stmt>
		}</block></then> 
		<else pos:line="71" pos:column="17">else <if pos:line="71" pos:column="22">if <condition pos:line="71" pos:column="25">(<expr><op:operator pos:line="71" pos:column="26">*</op:operator><name pos:line="71" pos:column="27">sx</name> <op:operator pos:line="71" pos:column="30">&lt;</op:operator> <op:operator pos:line="71" pos:column="32">(</op:operator><lit:literal type="number" pos:line="71" pos:column="33">0x80</lit:literal> <op:operator pos:line="71" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="71" pos:column="40">0x40</lit:literal><op:operator pos:line="71" pos:column="44">)</op:operator></expr>)</condition><then pos:line="71" pos:column="46"> 
		<block pos:line="72" pos:column="17">{											  <comment type="line" pos:line="72" pos:column="107">// 10nnnnnn 8 through B cannot be first hex codes</comment>
			<expr_stmt><expr><name pos:line="73" pos:column="25">ASCII7only</name><op:operator pos:line="73" pos:column="35">=</op:operator><lit:literal type="number" pos:line="73" pos:column="36">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="74" pos:column="25">rv</name><op:operator pos:line="74" pos:column="27">=</op:operator><lit:literal type="number" pos:line="74" pos:column="28">0</lit:literal></expr>;</expr_stmt>
			<break pos:line="75" pos:column="25">break;</break>
		}</block></then> 
		<else pos:line="77" pos:column="17">else <if pos:line="77" pos:column="22">if <condition pos:line="77" pos:column="25">(<expr><op:operator pos:line="77" pos:column="26">*</op:operator><name pos:line="77" pos:column="27">sx</name> <op:operator pos:line="77" pos:column="30">&lt;</op:operator> <op:operator pos:line="77" pos:column="32">(</op:operator><lit:literal type="number" pos:line="77" pos:column="33">0x80</lit:literal> <op:operator pos:line="77" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="77" pos:column="40">0x40</lit:literal> <op:operator pos:line="77" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="77" pos:column="47">0x20</lit:literal><op:operator pos:line="77" pos:column="51">)</op:operator></expr>)</condition><then pos:line="77" pos:column="53">
		<block pos:line="78" pos:column="17">{					  <comment type="line" pos:line="78" pos:column="59">// 110xxxvv 10nnnnnn  If it begins with C or D, it is an 11 bit character</comment>
			<expr_stmt><expr><name pos:line="79" pos:column="25">ASCII7only</name><op:operator pos:line="79" pos:column="35">=</op:operator><lit:literal type="number" pos:line="79" pos:column="36">0</lit:literal></expr>;</expr_stmt>
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><name pos:line="80" pos:column="29">sx</name><op:operator pos:line="80" pos:column="31">&gt;=</op:operator><name pos:line="80" pos:column="33">endx</name><op:operator pos:line="80" pos:column="37">-</op:operator><lit:literal type="number" pos:line="80" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="80" pos:column="40"> 
				<break pos:line="81" pos:column="33">break;</break></then></if>
			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><op:operator pos:line="82" pos:column="29">!</op:operator><op:operator pos:line="82" pos:column="30">(</op:operator><op:operator pos:line="82" pos:column="31">*</op:operator><name pos:line="82" pos:column="32">sx</name> <op:operator pos:line="82" pos:column="35">&amp;</op:operator> <lit:literal type="number" pos:line="82" pos:column="37">0x1F</lit:literal><op:operator pos:line="82" pos:column="41">)</op:operator> <op:operator pos:line="82" pos:column="43">||</op:operator> <op:operator pos:line="82" pos:column="46">(</op:operator><name><name pos:line="82" pos:column="47">sx</name><index pos:line="82" pos:column="49">[<expr><lit:literal type="number" pos:line="82" pos:column="50">1</lit:literal></expr>]</index></name><op:operator pos:line="82" pos:column="52">&amp;</op:operator><op:operator pos:line="82" pos:column="53">(</op:operator><lit:literal type="number" pos:line="82" pos:column="54">0x80</lit:literal><op:operator pos:line="82" pos:column="58">+</op:operator><lit:literal type="number" pos:line="82" pos:column="59">0x40</lit:literal><op:operator pos:line="82" pos:column="63">)</op:operator><op:operator pos:line="82" pos:column="64">)</op:operator> <op:operator pos:line="82" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="82" pos:column="69">0x80</lit:literal></expr>)</condition><then pos:line="82" pos:column="74"> <block pos:line="82" pos:column="75">{
				<expr_stmt><expr><name pos:line="83" pos:column="33">rv</name><op:operator pos:line="83" pos:column="35">=</op:operator><lit:literal type="number" pos:line="83" pos:column="36">0</lit:literal></expr>;</expr_stmt> <break pos:line="83" pos:column="39">break;</break>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="85" pos:column="25">sx</name><op:operator pos:line="85" pos:column="27">+=</op:operator><lit:literal type="number" pos:line="85" pos:column="29">2</lit:literal></expr>;</expr_stmt>
		}</block></then> 
		<else pos:line="87" pos:column="17">else <if pos:line="87" pos:column="22">if <condition pos:line="87" pos:column="25">(<expr><op:operator pos:line="87" pos:column="26">*</op:operator><name pos:line="87" pos:column="27">sx</name> <op:operator pos:line="87" pos:column="30">&lt;</op:operator> <op:operator pos:line="87" pos:column="32">(</op:operator><lit:literal type="number" pos:line="87" pos:column="33">0x80</lit:literal> <op:operator pos:line="87" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="87" pos:column="40">0x40</lit:literal> <op:operator pos:line="87" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="87" pos:column="47">0x20</lit:literal> <op:operator pos:line="87" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="87" pos:column="54">0x10</lit:literal><op:operator pos:line="87" pos:column="58">)</op:operator></expr>)</condition><then pos:line="87" pos:column="60">
		<block pos:line="88" pos:column="17">{								<comment type="line" pos:line="88" pos:column="81">// 1110qqqq 10xxxxvv 10nnnnnn If it begins with E, it is 16 bit</comment>
			<expr_stmt><expr><name pos:line="89" pos:column="25">ASCII7only</name><op:operator pos:line="89" pos:column="35">=</op:operator><lit:literal type="number" pos:line="89" pos:column="36">0</lit:literal></expr>;</expr_stmt>
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><name pos:line="90" pos:column="29">sx</name><op:operator pos:line="90" pos:column="31">&gt;=</op:operator><name pos:line="90" pos:column="33">endx</name><op:operator pos:line="90" pos:column="37">-</op:operator><lit:literal type="number" pos:line="90" pos:column="38">2</lit:literal></expr>)</condition><then pos:line="90" pos:column="40"> 
				<break pos:line="91" pos:column="33">break;</break></then></if>
			<if pos:line="92" pos:column="25">if <condition pos:line="92" pos:column="28">(<expr><op:operator pos:line="92" pos:column="29">!</op:operator><op:operator pos:line="92" pos:column="30">(</op:operator><op:operator pos:line="92" pos:column="31">*</op:operator><name pos:line="92" pos:column="32">sx</name> <op:operator pos:line="92" pos:column="35">&amp;</op:operator> <lit:literal type="number" pos:line="92" pos:column="37">0xF</lit:literal><op:operator pos:line="92" pos:column="40">)</op:operator> <op:operator pos:line="92" pos:column="42">||</op:operator> <op:operator pos:line="92" pos:column="45">(</op:operator><name><name pos:line="92" pos:column="46">sx</name><index pos:line="92" pos:column="48">[<expr><lit:literal type="number" pos:line="92" pos:column="49">1</lit:literal></expr>]</index></name><op:operator pos:line="92" pos:column="51">&amp;</op:operator><op:operator pos:line="92" pos:column="52">(</op:operator><lit:literal type="number" pos:line="92" pos:column="53">0x80</lit:literal><op:operator pos:line="92" pos:column="57">+</op:operator><lit:literal type="number" pos:line="92" pos:column="58">0x40</lit:literal><op:operator pos:line="92" pos:column="62">)</op:operator><op:operator pos:line="92" pos:column="63">)</op:operator> <op:operator pos:line="92" pos:column="65">!=</op:operator> <lit:literal type="number" pos:line="92" pos:column="68">0x80</lit:literal> <op:operator pos:line="92" pos:column="73">||</op:operator> <op:operator pos:line="92" pos:column="76">(</op:operator><name><name pos:line="92" pos:column="77">sx</name><index pos:line="92" pos:column="79">[<expr><lit:literal type="number" pos:line="92" pos:column="80">2</lit:literal></expr>]</index></name><op:operator pos:line="92" pos:column="82">&amp;</op:operator><op:operator pos:line="92" pos:column="83">(</op:operator><lit:literal type="number" pos:line="92" pos:column="84">0x80</lit:literal><op:operator pos:line="92" pos:column="88">+</op:operator><lit:literal type="number" pos:line="92" pos:column="89">0x40</lit:literal><op:operator pos:line="92" pos:column="93">)</op:operator><op:operator pos:line="92" pos:column="94">)</op:operator> <op:operator pos:line="92" pos:column="96">!=</op:operator> <lit:literal type="number" pos:line="92" pos:column="99">0x80</lit:literal></expr>)</condition><then pos:line="92" pos:column="104"> <block pos:line="92" pos:column="105">{
				<expr_stmt><expr><name pos:line="93" pos:column="33">rv</name><op:operator pos:line="93" pos:column="35">=</op:operator><lit:literal type="number" pos:line="93" pos:column="36">0</lit:literal></expr>;</expr_stmt> <break pos:line="93" pos:column="39">break;</break>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="95" pos:column="25">sx</name><op:operator pos:line="95" pos:column="27">+=</op:operator><lit:literal type="number" pos:line="95" pos:column="29">3</lit:literal></expr>;</expr_stmt>
		}</block></then> 
		<else pos:line="97" pos:column="17">else 
		<block pos:line="98" pos:column="17">{													  <comment type="line" pos:line="98" pos:column="123">// more than 16 bits are not allowed here</comment>
			<expr_stmt><expr><name pos:line="99" pos:column="25">ASCII7only</name><op:operator pos:line="99" pos:column="35">=</op:operator><lit:literal type="number" pos:line="99" pos:column="36">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="100" pos:column="25">rv</name><op:operator pos:line="100" pos:column="27">=</op:operator><lit:literal type="number" pos:line="100" pos:column="28">0</lit:literal></expr>;</expr_stmt>
			<break pos:line="101" pos:column="25">break;</break>
		}</block></else></if></else></if></else></if></else></if></else></if>
	}</block></while>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">ASCII7only</name></expr>)</condition><then pos:line="104" pos:column="24"> 
		<return pos:line="105" pos:column="17">return <expr><name pos:line="105" pos:column="24">ascii7bits</name></expr>;</return></then></if>
	<if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><name pos:line="106" pos:column="13">rv</name></expr>)</condition><then pos:line="106" pos:column="16">
		<return pos:line="107" pos:column="17">return <expr><name pos:line="107" pos:column="24">utf8NoBOM</name></expr>;</return></then></if>
	<return pos:line="108" pos:column="9">return <expr><name pos:line="108" pos:column="16">ascii8bits</name></expr>;</return>
}</block></function>

<function><type><name pos:line="111" pos:column="1">size_t</name></type> <name><name pos:line="111" pos:column="8">Utf8_16_Read</name><op:operator pos:line="111" pos:column="20">::</op:operator><name pos:line="111" pos:column="22">convert</name></name><parameter_list pos:line="111" pos:column="29">(<param><decl><type><name pos:line="111" pos:column="30">char</name><type:modifier pos:line="111" pos:column="34">*</type:modifier></type> <name pos:line="111" pos:column="36">buf</name></decl></param>, <param><decl><type><name pos:line="111" pos:column="41">size_t</name></type> <name pos:line="111" pos:column="48">len</name></decl></param>)</parameter_list>
<block pos:line="112" pos:column="1">{
	<comment type="line" pos:line="113" pos:column="9">// bugfix by Jens Lorenz</comment>
	<decl_stmt><decl><type><specifier pos:line="114" pos:column="9">static</specifier>	<name pos:line="114" pos:column="17">size_t</name></type> <name pos:line="114" pos:column="24">nSkip</name> <init pos:line="114" pos:column="30">= <expr><lit:literal type="number" pos:line="114" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="116" pos:column="5">size_t</name></type>  <name pos:line="116" pos:column="13">ret</name> <init pos:line="116" pos:column="17">= <expr><lit:literal type="number" pos:line="116" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
    
	<expr_stmt><expr><name pos:line="118" pos:column="9">m_pBuf</name> <op:operator pos:line="118" pos:column="16">=</op:operator> <op:operator pos:line="118" pos:column="18">(</op:operator><name pos:line="118" pos:column="19">ubyte</name><op:operator pos:line="118" pos:column="24">*</op:operator><op:operator pos:line="118" pos:column="25">)</op:operator><name pos:line="118" pos:column="26">buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="119" pos:column="9">m_nLen</name> <op:operator pos:line="119" pos:column="16">=</op:operator> <name pos:line="119" pos:column="18">len</name></expr>;</expr_stmt>

	<if pos:line="121" pos:column="9">if <condition pos:line="121" pos:column="12">(<expr><name pos:line="121" pos:column="13">m_bFirstRead</name> <op:operator pos:line="121" pos:column="26">==</op:operator> <lit:literal type="boolean" pos:line="121" pos:column="29">true</lit:literal></expr>)</condition><then pos:line="121" pos:column="34">
    <block pos:line="122" pos:column="5">{
		<expr_stmt><expr><call><name pos:line="123" pos:column="17">determineEncoding</name><argument_list pos:line="123" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="124" pos:column="17">nSkip</name> <op:operator pos:line="124" pos:column="23">=</op:operator> <name pos:line="124" pos:column="25">m_nSkip</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="125" pos:column="17">m_bFirstRead</name> <op:operator pos:line="125" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="125" pos:column="32">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

    <switch pos:line="128" pos:column="5">switch <condition pos:line="128" pos:column="12">(<expr><name pos:line="128" pos:column="13">m_eEncoding</name></expr>)</condition>
    <block pos:line="129" pos:column="5">{
		<case pos:line="130" pos:column="17">case <expr><name pos:line="130" pos:column="22">uni7Bit</name></expr>:
        </case><case pos:line="131" pos:column="9">case <expr><name pos:line="131" pos:column="14">uni8Bit</name></expr>:
        </case><case pos:line="132" pos:column="9">case <expr><name pos:line="132" pos:column="14">uniCookie</name></expr>: <block pos:line="132" pos:column="25">{
            <comment type="line" pos:line="133" pos:column="13">// Do nothing, pass through</comment>
            <expr_stmt><expr><name pos:line="134" pos:column="13">m_nBufSize</name> <op:operator pos:line="134" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="134" pos:column="26">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="135" pos:column="13">m_pNewBuf</name> <op:operator pos:line="135" pos:column="23">=</op:operator> <name pos:line="135" pos:column="25">m_pBuf</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="136" pos:column="13">ret</name> <op:operator pos:line="136" pos:column="17">=</op:operator> <name pos:line="136" pos:column="19">len</name></expr>;</expr_stmt>
            <break pos:line="137" pos:column="13">break;</break>
        }</block>
        </case><case pos:line="139" pos:column="9">case <expr><name pos:line="139" pos:column="14">uniUTF8</name></expr>: <block pos:line="139" pos:column="23">{
            <comment type="line" pos:line="140" pos:column="13">// Pass through after BOM</comment>
            <expr_stmt><expr><name pos:line="141" pos:column="13">m_nBufSize</name> <op:operator pos:line="141" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="141" pos:column="26">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="142" pos:column="13">m_pNewBuf</name> <op:operator pos:line="142" pos:column="23">=</op:operator> <name pos:line="142" pos:column="25">m_pBuf</name> <op:operator pos:line="142" pos:column="32">+</op:operator> <name pos:line="142" pos:column="34">nSkip</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="143" pos:column="13">ret</name> <op:operator pos:line="143" pos:column="17">=</op:operator> <name pos:line="143" pos:column="19">len</name> <op:operator pos:line="143" pos:column="23">-</op:operator> <name pos:line="143" pos:column="25">nSkip</name></expr>;</expr_stmt>
            <break pos:line="144" pos:column="13">break;</break>
        }</block>    
        </case><case pos:line="146" pos:column="9">case <expr><name pos:line="146" pos:column="14">uni16BE_NoBOM</name></expr>:
        </case><case pos:line="147" pos:column="9">case <expr><name pos:line="147" pos:column="14">uni16LE_NoBOM</name></expr>:
        </case><case pos:line="148" pos:column="9">case <expr><name pos:line="148" pos:column="14">uni16BE</name></expr>:
        </case><case pos:line="149" pos:column="9">case <expr><name pos:line="149" pos:column="14">uni16LE</name></expr>: <block pos:line="149" pos:column="23">{
            <decl_stmt><decl><type><name pos:line="150" pos:column="13">size_t</name></type> <name pos:line="150" pos:column="20">newSize</name> <init pos:line="150" pos:column="28">= <expr><name pos:line="150" pos:column="30">len</name> <op:operator pos:line="150" pos:column="34">+</op:operator> <name pos:line="150" pos:column="36">len</name> <op:operator pos:line="150" pos:column="40">/</op:operator> <lit:literal type="number" pos:line="150" pos:column="42">2</lit:literal> <op:operator pos:line="150" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="150" pos:column="46">1</lit:literal></expr></init></decl>;</decl_stmt>
            
            <if pos:line="152" pos:column="13">if <condition pos:line="152" pos:column="16">(<expr><name pos:line="152" pos:column="17">m_nBufSize</name> <op:operator pos:line="152" pos:column="28">!=</op:operator> <name pos:line="152" pos:column="31">newSize</name></expr>)</condition><then pos:line="152" pos:column="39">
            <block pos:line="153" pos:column="13">{
				<if pos:line="154" pos:column="33">if <condition pos:line="154" pos:column="36">(<expr><name pos:line="154" pos:column="37">m_pNewBuf</name></expr>)</condition><then pos:line="154" pos:column="47">
					<expr_stmt><expr><op:operator pos:line="155" pos:column="41">delete</op:operator> <index pos:line="155" pos:column="48">[]</index> <name pos:line="155" pos:column="51">m_pNewBuf</name></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name pos:line="156" pos:column="17">m_pNewBuf</name>  <op:operator pos:line="156" pos:column="28">=</op:operator> <name pos:line="156" pos:column="30">NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="157" pos:column="17">m_pNewBuf</name>  <op:operator pos:line="157" pos:column="28">=</op:operator> <op:operator pos:line="157" pos:column="30">new</op:operator> <name><name pos:line="157" pos:column="34">ubyte</name><index pos:line="157" pos:column="39">[<expr><name pos:line="157" pos:column="40">newSize</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="158" pos:column="17">m_nBufSize</name> <op:operator pos:line="158" pos:column="28">=</op:operator> <name pos:line="158" pos:column="30">newSize</name></expr>;</expr_stmt>
            }</block></then></if>
            
            <decl_stmt><decl><type><name pos:line="161" pos:column="13">ubyte</name><type:modifier pos:line="161" pos:column="18">*</type:modifier></type> <name pos:line="161" pos:column="20">pCur</name> <init pos:line="161" pos:column="25">= <expr><name pos:line="161" pos:column="27">m_pNewBuf</name></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">m_Iter16</name><op:operator pos:line="163" pos:column="21">.</op:operator><name pos:line="163" pos:column="22">set</name></name><argument_list pos:line="163" pos:column="25">(<argument><expr><name pos:line="163" pos:column="26">m_pBuf</name> <op:operator pos:line="163" pos:column="33">+</op:operator> <name pos:line="163" pos:column="35">nSkip</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="42">len</name> <op:operator pos:line="163" pos:column="46">-</op:operator> <name pos:line="163" pos:column="48">nSkip</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="55">m_eEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:line="165" pos:column="13">for (<init pos:line="165" pos:column="18">;</init> <condition><expr><name pos:line="165" pos:column="20">m_Iter16</name></expr>;</condition> <incr><expr><op:operator pos:line="165" pos:column="30">++</op:operator><name pos:line="165" pos:column="32">m_Iter16</name></expr></incr>)
            <block pos:line="166" pos:column="13">{
                <expr_stmt><expr><op:operator pos:line="167" pos:column="17">*</op:operator><name pos:line="167" pos:column="18">pCur</name><op:operator pos:line="167" pos:column="22">++</op:operator> <op:operator pos:line="167" pos:column="25">=</op:operator> <call><name><name pos:line="167" pos:column="27">m_Iter16</name><op:operator pos:line="167" pos:column="35">.</op:operator><name pos:line="167" pos:column="36">get</name></name><argument_list pos:line="167" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name pos:line="169" pos:column="13">ret</name> <op:operator pos:line="169" pos:column="17">=</op:operator> <name pos:line="169" pos:column="19">pCur</name> <op:operator pos:line="169" pos:column="24">-</op:operator> <name pos:line="169" pos:column="26">m_pNewBuf</name></expr>;</expr_stmt>
            <break pos:line="170" pos:column="13">break;</break>
        }</block>
        </case><default pos:line="172" pos:column="9">default:
            <break pos:line="173" pos:column="13">break;</break>
    </default>}</block></switch>

	<comment type="line" pos:line="176" pos:column="9">// necessary for second calls and more</comment>
	<expr_stmt><expr><name pos:line="177" pos:column="9">nSkip</name> <op:operator pos:line="177" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="177" pos:column="17">0</lit:literal></expr>;</expr_stmt>

	<return pos:line="179" pos:column="9">return <expr><name pos:line="179" pos:column="16">ret</name></expr>;</return>
}</block></function>


<function><type><name pos:line="183" pos:column="1">void</name></type> <name><name pos:line="183" pos:column="6">Utf8_16_Read</name><op:operator pos:line="183" pos:column="18">::</op:operator><name pos:line="183" pos:column="20">determineEncoding</name></name><parameter_list pos:line="183" pos:column="37">()</parameter_list>
<block pos:line="184" pos:column="1">{
	<expr_stmt><expr><name pos:line="185" pos:column="9">m_eEncoding</name> <op:operator pos:line="185" pos:column="21">=</op:operator> <name pos:line="185" pos:column="23">uni8Bit</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="186" pos:column="9">m_nSkip</name> <op:operator pos:line="186" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="186" pos:column="19">0</lit:literal></expr>;</expr_stmt>

    <comment type="line" pos:line="188" pos:column="5">// detect UTF-16 big-endian with BOM</comment>
	<if pos:line="189" pos:column="9">if <condition pos:line="189" pos:column="12">(<expr><name pos:line="189" pos:column="13">m_nLen</name> <op:operator pos:line="189" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="189" pos:column="22">1</lit:literal> <op:operator pos:line="189" pos:column="24">&amp;&amp;</op:operator> <name><name pos:line="189" pos:column="27">m_pBuf</name><index pos:line="189" pos:column="33">[<expr><lit:literal type="number" pos:line="189" pos:column="34">0</lit:literal></expr>]</index></name> <op:operator pos:line="189" pos:column="37">==</op:operator> <name><name pos:line="189" pos:column="40">k_Boms</name><index pos:line="189" pos:column="46">[<expr><name pos:line="189" pos:column="47">uni16BE</name></expr>]</index><index pos:line="189" pos:column="55">[<expr><lit:literal type="number" pos:line="189" pos:column="56">0</lit:literal></expr>]</index></name> <op:operator pos:line="189" pos:column="59">&amp;&amp;</op:operator> <name><name pos:line="189" pos:column="62">m_pBuf</name><index pos:line="189" pos:column="68">[<expr><lit:literal type="number" pos:line="189" pos:column="69">1</lit:literal></expr>]</index></name> <op:operator pos:line="189" pos:column="72">==</op:operator> <name><name pos:line="189" pos:column="75">k_Boms</name><index pos:line="189" pos:column="81">[<expr><name pos:line="189" pos:column="82">uni16BE</name></expr>]</index><index pos:line="189" pos:column="90">[<expr><lit:literal type="number" pos:line="189" pos:column="91">1</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="189" pos:column="94">
	<block pos:line="190" pos:column="9">{
		<expr_stmt><expr><name pos:line="191" pos:column="17">m_eEncoding</name> <op:operator pos:line="191" pos:column="29">=</op:operator> <name pos:line="191" pos:column="31">uni16BE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="192" pos:column="17">m_nSkip</name> <op:operator pos:line="192" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="192" pos:column="27">2</lit:literal></expr>;</expr_stmt>
	}</block></then>
    <comment type="line" pos:line="194" pos:column="5">// detect UTF-16 little-endian with BOM</comment>
	<else pos:line="195" pos:column="9">else <if pos:line="195" pos:column="14">if <condition pos:line="195" pos:column="17">(<expr><name pos:line="195" pos:column="18">m_nLen</name> <op:operator pos:line="195" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="195" pos:column="27">1</lit:literal> <op:operator pos:line="195" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="195" pos:column="32">m_pBuf</name><index pos:line="195" pos:column="38">[<expr><lit:literal type="number" pos:line="195" pos:column="39">0</lit:literal></expr>]</index></name> <op:operator pos:line="195" pos:column="42">==</op:operator> <name><name pos:line="195" pos:column="45">k_Boms</name><index pos:line="195" pos:column="51">[<expr><name pos:line="195" pos:column="52">uni16LE</name></expr>]</index><index pos:line="195" pos:column="60">[<expr><lit:literal type="number" pos:line="195" pos:column="61">0</lit:literal></expr>]</index></name> <op:operator pos:line="195" pos:column="64">&amp;&amp;</op:operator> <name><name pos:line="195" pos:column="67">m_pBuf</name><index pos:line="195" pos:column="73">[<expr><lit:literal type="number" pos:line="195" pos:column="74">1</lit:literal></expr>]</index></name> <op:operator pos:line="195" pos:column="77">==</op:operator> <name><name pos:line="195" pos:column="80">k_Boms</name><index pos:line="195" pos:column="86">[<expr><name pos:line="195" pos:column="87">uni16LE</name></expr>]</index><index pos:line="195" pos:column="95">[<expr><lit:literal type="number" pos:line="195" pos:column="96">1</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="195" pos:column="99">
	<block pos:line="196" pos:column="9">{
		<expr_stmt><expr><name pos:line="197" pos:column="17">m_eEncoding</name> <op:operator pos:line="197" pos:column="29">=</op:operator> <name pos:line="197" pos:column="31">uni16LE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="198" pos:column="17">m_nSkip</name> <op:operator pos:line="198" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="198" pos:column="27">2</lit:literal></expr>;</expr_stmt>
	}</block></then>
    <comment type="line" pos:line="200" pos:column="5">// detect UTF-8 with BOM</comment>
	<else pos:line="201" pos:column="9">else <if pos:line="201" pos:column="14">if <condition pos:line="201" pos:column="17">(<expr><name pos:line="201" pos:column="18">m_nLen</name> <op:operator pos:line="201" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="201" pos:column="27">2</lit:literal> <op:operator pos:line="201" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="201" pos:column="32">m_pBuf</name><index pos:line="201" pos:column="38">[<expr><lit:literal type="number" pos:line="201" pos:column="39">0</lit:literal></expr>]</index></name> <op:operator pos:line="201" pos:column="42">==</op:operator> <name><name pos:line="201" pos:column="45">k_Boms</name><index pos:line="201" pos:column="51">[<expr><name pos:line="201" pos:column="52">uniUTF8</name></expr>]</index><index pos:line="201" pos:column="60">[<expr><lit:literal type="number" pos:line="201" pos:column="61">0</lit:literal></expr>]</index></name> <op:operator pos:line="201" pos:column="64">&amp;&amp;</op:operator> 
		<name><name pos:line="202" pos:column="17">m_pBuf</name><index pos:line="202" pos:column="23">[<expr><lit:literal type="number" pos:line="202" pos:column="24">1</lit:literal></expr>]</index></name> <op:operator pos:line="202" pos:column="27">==</op:operator> <name><name pos:line="202" pos:column="30">k_Boms</name><index pos:line="202" pos:column="36">[<expr><name pos:line="202" pos:column="37">uniUTF8</name></expr>]</index><index pos:line="202" pos:column="45">[<expr><lit:literal type="number" pos:line="202" pos:column="46">1</lit:literal></expr>]</index></name> <op:operator pos:line="202" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="202" pos:column="52">m_pBuf</name><index pos:line="202" pos:column="58">[<expr><lit:literal type="number" pos:line="202" pos:column="59">2</lit:literal></expr>]</index></name> <op:operator pos:line="202" pos:column="62">==</op:operator> <name><name pos:line="202" pos:column="65">k_Boms</name><index pos:line="202" pos:column="71">[<expr><name pos:line="202" pos:column="72">uniUTF8</name></expr>]</index><index pos:line="202" pos:column="80">[<expr><lit:literal type="number" pos:line="202" pos:column="81">2</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="202" pos:column="84">
	<block pos:line="203" pos:column="9">{
		<expr_stmt><expr><name pos:line="204" pos:column="17">m_eEncoding</name> <op:operator pos:line="204" pos:column="29">=</op:operator> <name pos:line="204" pos:column="31">uniUTF8</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="205" pos:column="17">m_nSkip</name> <op:operator pos:line="205" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="205" pos:column="27">3</lit:literal></expr>;</expr_stmt>
	}</block></then>
	<comment type="line" pos:line="207" pos:column="9">// try to detect UTF-16 little-endian without BOM</comment>
	<else pos:line="208" pos:column="9">else <if pos:line="208" pos:column="14">if <condition pos:line="208" pos:column="17">(<expr><name pos:line="208" pos:column="18">m_nLen</name> <op:operator pos:line="208" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="208" pos:column="27">1</lit:literal> <op:operator pos:line="208" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="208" pos:column="32">m_pBuf</name><index pos:line="208" pos:column="38">[<expr><lit:literal type="number" pos:line="208" pos:column="39">0</lit:literal></expr>]</index></name> <op:operator pos:line="208" pos:column="42">!=</op:operator> <name pos:line="208" pos:column="45">NULL</name> <op:operator pos:line="208" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="208" pos:column="53">m_pBuf</name><index pos:line="208" pos:column="59">[<expr><lit:literal type="number" pos:line="208" pos:column="60">1</lit:literal></expr>]</index></name> <op:operator pos:line="208" pos:column="63">==</op:operator> <name pos:line="208" pos:column="66">NULL</name> <op:operator pos:line="208" pos:column="71">&amp;&amp;</op:operator> <call><name pos:line="208" pos:column="74">IsTextUnicode</name><argument_list pos:line="208" pos:column="87">(<argument><expr><name pos:line="208" pos:column="88">m_pBuf</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="96">m_nLen</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="104">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="208" pos:column="110">
	<block pos:line="209" pos:column="9">{
		<expr_stmt><expr><name pos:line="210" pos:column="17">m_eEncoding</name> <op:operator pos:line="210" pos:column="29">=</op:operator> <name pos:line="210" pos:column="31">uni16LE_NoBOM</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="211" pos:column="17">m_nSkip</name> <op:operator pos:line="211" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="211" pos:column="27">0</lit:literal></expr>;</expr_stmt>
	}</block></then>
	<comment type="block" pos:line="213" pos:column="9">/* UTF-16 big-endian without BOM detection is taken away scince this detection is very week
    // try to detect UTF-16 big-endian without BOM
    else if (m_nLen &gt; 1 &amp;&amp; m_pBuf[0] == NULL &amp;&amp; m_pBuf[1] != NULL)
	{
		m_eEncoding = uni16BE_NoBOM;
		m_nSkip = 0;
	}
	*/</comment>
	<else pos:line="221" pos:column="9">else
	<block pos:line="222" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="223" pos:column="17">u78</name></type> <name pos:line="223" pos:column="21">detectedEncoding</name> <init pos:line="223" pos:column="38">= <expr><call><name pos:line="223" pos:column="40">utf8_7bits_8bits</name><argument_list pos:line="223" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="224" pos:column="17">if <condition pos:line="224" pos:column="20">(<expr><name pos:line="224" pos:column="21">detectedEncoding</name> <op:operator pos:line="224" pos:column="38">==</op:operator> <name pos:line="224" pos:column="41">utf8NoBOM</name></expr>)</condition><then pos:line="224" pos:column="51">
			<expr_stmt><expr><name pos:line="225" pos:column="25">m_eEncoding</name> <op:operator pos:line="225" pos:column="37">=</op:operator> <name pos:line="225" pos:column="39">uniCookie</name></expr>;</expr_stmt></then>
		<else pos:line="226" pos:column="17">else <if pos:line="226" pos:column="22">if <condition pos:line="226" pos:column="25">(<expr><name pos:line="226" pos:column="26">detectedEncoding</name> <op:operator pos:line="226" pos:column="43">==</op:operator> <name pos:line="226" pos:column="46">ascii7bits</name></expr>)</condition><then pos:line="226" pos:column="57">
			<expr_stmt><expr><name pos:line="227" pos:column="25">m_eEncoding</name> <op:operator pos:line="227" pos:column="37">=</op:operator> <name pos:line="227" pos:column="39">uni7Bit</name></expr>;</expr_stmt></then>
		<else pos:line="228" pos:column="17">else <comment type="line" pos:line="228" pos:column="22">//(detectedEncoding == ascii8bits)</comment>
			<expr_stmt><expr><name pos:line="229" pos:column="25">m_eEncoding</name> <op:operator pos:line="229" pos:column="37">=</op:operator> <name pos:line="229" pos:column="39">uni8Bit</name></expr>;</expr_stmt></else></if></else></if>
		<expr_stmt><expr><name pos:line="230" pos:column="17">m_nSkip</name> <op:operator pos:line="230" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="230" pos:column="27">0</lit:literal></expr>;</expr_stmt>
	}</block></else></if></else></if></else></if></else></if>
}</block></function>

<function><type><name pos:line="234" pos:column="1">UniMode</name></type> <name><name pos:line="234" pos:column="9">Utf8_16_Read</name><op:operator pos:line="234" pos:column="21">::</op:operator><name pos:line="234" pos:column="23">determineEncoding</name></name><parameter_list pos:line="234" pos:column="40">(<param><decl><type><specifier pos:line="234" pos:column="41">const</specifier> <name pos:line="234" pos:column="47">unsigned</name> <name pos:line="234" pos:column="56">char</name> <type:modifier pos:line="234" pos:column="61">*</type:modifier></type><name pos:line="234" pos:column="62">buf</name></decl></param>, <param><decl><type><name pos:line="234" pos:column="67">int</name></type> <name pos:line="234" pos:column="71">bufLen</name></decl></param>)</parameter_list>
<block pos:line="235" pos:column="1">{
    <comment type="line" pos:line="236" pos:column="5">// detect UTF-16 big-endian with BOM</comment>
	<if pos:line="237" pos:column="9">if <condition pos:line="237" pos:column="12">(<expr><name pos:line="237" pos:column="13">bufLen</name> <op:operator pos:line="237" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="237" pos:column="22">1</lit:literal> <op:operator pos:line="237" pos:column="24">&amp;&amp;</op:operator> <name><name pos:line="237" pos:column="27">buf</name><index pos:line="237" pos:column="30">[<expr><lit:literal type="number" pos:line="237" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="237" pos:column="34">==</op:operator> <name><name pos:line="237" pos:column="37">k_Boms</name><index pos:line="237" pos:column="43">[<expr><name pos:line="237" pos:column="44">uni16BE</name></expr>]</index><index pos:line="237" pos:column="52">[<expr><lit:literal type="number" pos:line="237" pos:column="53">0</lit:literal></expr>]</index></name> <op:operator pos:line="237" pos:column="56">&amp;&amp;</op:operator> <name><name pos:line="237" pos:column="59">buf</name><index pos:line="237" pos:column="62">[<expr><lit:literal type="number" pos:line="237" pos:column="63">1</lit:literal></expr>]</index></name> <op:operator pos:line="237" pos:column="66">==</op:operator> <name><name pos:line="237" pos:column="69">k_Boms</name><index pos:line="237" pos:column="75">[<expr><name pos:line="237" pos:column="76">uni16BE</name></expr>]</index><index pos:line="237" pos:column="84">[<expr><lit:literal type="number" pos:line="237" pos:column="85">1</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="237" pos:column="88">
	<block pos:line="238" pos:column="9">{
		<return pos:line="239" pos:column="17">return <expr><name pos:line="239" pos:column="24">uni16BE</name></expr>;</return>
	}</block></then></if>
    
    <comment type="line" pos:line="242" pos:column="5">// detect UTF-16 little-endian with BOM</comment>
    <if pos:line="243" pos:column="5">if <condition pos:line="243" pos:column="8">(<expr><name pos:line="243" pos:column="9">bufLen</name> <op:operator pos:line="243" pos:column="16">&gt;</op:operator> <lit:literal type="number" pos:line="243" pos:column="18">1</lit:literal> <op:operator pos:line="243" pos:column="20">&amp;&amp;</op:operator> <name><name pos:line="243" pos:column="23">buf</name><index pos:line="243" pos:column="26">[<expr><lit:literal type="number" pos:line="243" pos:column="27">0</lit:literal></expr>]</index></name> <op:operator pos:line="243" pos:column="30">==</op:operator> <name><name pos:line="243" pos:column="33">k_Boms</name><index pos:line="243" pos:column="39">[<expr><name pos:line="243" pos:column="40">uni16LE</name></expr>]</index><index pos:line="243" pos:column="48">[<expr><lit:literal type="number" pos:line="243" pos:column="49">0</lit:literal></expr>]</index></name> <op:operator pos:line="243" pos:column="52">&amp;&amp;</op:operator> <name><name pos:line="243" pos:column="55">buf</name><index pos:line="243" pos:column="58">[<expr><lit:literal type="number" pos:line="243" pos:column="59">1</lit:literal></expr>]</index></name> <op:operator pos:line="243" pos:column="62">==</op:operator> <name><name pos:line="243" pos:column="65">k_Boms</name><index pos:line="243" pos:column="71">[<expr><name pos:line="243" pos:column="72">uni16LE</name></expr>]</index><index pos:line="243" pos:column="80">[<expr><lit:literal type="number" pos:line="243" pos:column="81">1</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="243" pos:column="84">
	<block pos:line="244" pos:column="9">{
		<return pos:line="245" pos:column="17">return <expr><name pos:line="245" pos:column="24">uni16LE</name></expr>;</return>
	}</block></then></if>
    
    <comment type="line" pos:line="248" pos:column="5">// detect UTF-8 with BOM</comment>
	<if pos:line="249" pos:column="9">if <condition pos:line="249" pos:column="12">(<expr><name pos:line="249" pos:column="13">bufLen</name> <op:operator pos:line="249" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="249" pos:column="22">2</lit:literal> <op:operator pos:line="249" pos:column="24">&amp;&amp;</op:operator> <name><name pos:line="249" pos:column="27">buf</name><index pos:line="249" pos:column="30">[<expr><lit:literal type="number" pos:line="249" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="249" pos:column="34">==</op:operator> <name><name pos:line="249" pos:column="37">k_Boms</name><index pos:line="249" pos:column="43">[<expr><name pos:line="249" pos:column="44">uniUTF8</name></expr>]</index><index pos:line="249" pos:column="52">[<expr><lit:literal type="number" pos:line="249" pos:column="53">0</lit:literal></expr>]</index></name> <op:operator pos:line="249" pos:column="56">&amp;&amp;</op:operator> 
		<name><name pos:line="250" pos:column="17">buf</name><index pos:line="250" pos:column="20">[<expr><lit:literal type="number" pos:line="250" pos:column="21">1</lit:literal></expr>]</index></name> <op:operator pos:line="250" pos:column="24">==</op:operator> <name><name pos:line="250" pos:column="27">k_Boms</name><index pos:line="250" pos:column="33">[<expr><name pos:line="250" pos:column="34">uniUTF8</name></expr>]</index><index pos:line="250" pos:column="42">[<expr><lit:literal type="number" pos:line="250" pos:column="43">1</lit:literal></expr>]</index></name> <op:operator pos:line="250" pos:column="46">&amp;&amp;</op:operator> <name><name pos:line="250" pos:column="49">buf</name><index pos:line="250" pos:column="52">[<expr><lit:literal type="number" pos:line="250" pos:column="53">2</lit:literal></expr>]</index></name> <op:operator pos:line="250" pos:column="56">==</op:operator> <name><name pos:line="250" pos:column="59">k_Boms</name><index pos:line="250" pos:column="65">[<expr><name pos:line="250" pos:column="66">uniUTF8</name></expr>]</index><index pos:line="250" pos:column="74">[<expr><lit:literal type="number" pos:line="250" pos:column="75">2</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="250" pos:column="78">
	<block pos:line="251" pos:column="9">{
		<return pos:line="252" pos:column="17">return <expr><name pos:line="252" pos:column="24">uniUTF8</name></expr>;</return>
	}</block></then></if>

    <return pos:line="255" pos:column="5">return <expr><name pos:line="255" pos:column="12">uni8Bit</name></expr>;</return>
}</block></function>


<comment type="line" pos:line="259" pos:column="1">// ==================================================================</comment>

<constructor><name><name pos:line="261" pos:column="1">Utf8_16_Write</name><op:operator pos:line="261" pos:column="14">::</op:operator><name pos:line="261" pos:column="16">Utf8_16_Write</name></name><parameter_list pos:line="261" pos:column="29">()</parameter_list>
<block pos:line="262" pos:column="1">{
	<expr_stmt><expr><name pos:line="263" pos:column="9">m_eEncoding</name> <op:operator pos:line="263" pos:column="21">=</op:operator> <name pos:line="263" pos:column="23">uni8Bit</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="264" pos:column="9">m_pFile</name> <op:operator pos:line="264" pos:column="17">=</op:operator> <name pos:line="264" pos:column="19">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="265" pos:column="9">m_pNewBuf</name> <op:operator pos:line="265" pos:column="19">=</op:operator> <name pos:line="265" pos:column="21">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="266" pos:column="9">m_bFirstWrite</name> <op:operator pos:line="266" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="266" pos:column="25">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="267" pos:column="9">m_nBufSize</name> <op:operator pos:line="267" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="267" pos:column="22">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="270" pos:column="1">Utf8_16_Write</name><op:operator pos:line="270" pos:column="14">::</op:operator>~<name pos:line="270" pos:column="17">Utf8_16_Write</name></name><parameter_list pos:line="270" pos:column="30">()</parameter_list>
<block pos:line="271" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="272" pos:column="9">fclose</name><argument_list pos:line="272" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="275" pos:column="1">FILE</name> <type:modifier pos:line="275" pos:column="6">*</type:modifier></type> <name><name pos:line="275" pos:column="8">Utf8_16_Write</name><op:operator pos:line="275" pos:column="21">::</op:operator><name pos:line="275" pos:column="23">fopen</name></name><parameter_list pos:line="275" pos:column="28">(<param><decl><type><specifier pos:line="275" pos:column="29">const</specifier> <name pos:line="275" pos:column="35">TCHAR</name> <type:modifier pos:line="275" pos:column="41">*</type:modifier></type><name pos:line="275" pos:column="42">_name</name></decl></param>, <param><decl><type><specifier pos:line="275" pos:column="49">const</specifier> <name pos:line="275" pos:column="55">TCHAR</name> <type:modifier pos:line="275" pos:column="61">*</type:modifier></type><name pos:line="275" pos:column="62">_type</name></decl></param>)</parameter_list>
<block pos:line="276" pos:column="1">{
	<expr_stmt><expr><name pos:line="277" pos:column="9">m_pFile</name> <op:operator pos:line="277" pos:column="17">=</op:operator> <call><name><op:operator pos:line="277" pos:column="19">::</op:operator><name pos:line="277" pos:column="21">generic_fopen</name></name><argument_list pos:line="277" pos:column="34">(<argument><expr><name pos:line="277" pos:column="35">_name</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="42">_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="279" pos:column="9">m_bFirstWrite</name> <op:operator pos:line="279" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="279" pos:column="25">true</lit:literal></expr>;</expr_stmt>

	<return pos:line="281" pos:column="9">return <expr><name pos:line="281" pos:column="16">m_pFile</name></expr>;</return>
}</block></function>

<function><type><name pos:line="284" pos:column="1">size_t</name></type> <name><name pos:line="284" pos:column="8">Utf8_16_Write</name><op:operator pos:line="284" pos:column="21">::</op:operator><name pos:line="284" pos:column="23">fwrite</name></name><parameter_list pos:line="284" pos:column="29">(<param><decl><type><specifier pos:line="284" pos:column="30">const</specifier> <name pos:line="284" pos:column="36">void</name><type:modifier pos:line="284" pos:column="40">*</type:modifier></type> <name pos:line="284" pos:column="42">p</name></decl></param>, <param><decl><type><name pos:line="284" pos:column="45">size_t</name></type> <name pos:line="284" pos:column="52">_size</name></decl></param>)</parameter_list>
<block pos:line="285" pos:column="1">{
    <comment type="line" pos:line="286" pos:column="5">// no file open</comment>
	<if pos:line="287" pos:column="9">if <condition pos:line="287" pos:column="12">(<expr><op:operator pos:line="287" pos:column="13">!</op:operator><name pos:line="287" pos:column="14">m_pFile</name></expr>)</condition><then pos:line="287" pos:column="22">
    <block pos:line="288" pos:column="5">{
		<return pos:line="289" pos:column="17">return <expr><lit:literal type="number" pos:line="289" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

    <decl_stmt><decl><type><name pos:line="292" pos:column="5">size_t</name></type>  <name pos:line="292" pos:column="13">ret</name> <init pos:line="292" pos:column="17">= <expr><lit:literal type="number" pos:line="292" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
    
	<if pos:line="294" pos:column="9">if <condition pos:line="294" pos:column="12">(<expr><name pos:line="294" pos:column="13">m_bFirstWrite</name></expr>)</condition><then pos:line="294" pos:column="27">
    <block pos:line="295" pos:column="5">{
        <switch pos:line="296" pos:column="9">switch <condition pos:line="296" pos:column="16">(<expr><name pos:line="296" pos:column="17">m_eEncoding</name></expr>)</condition>
        <block pos:line="297" pos:column="9">{
            <case pos:line="298" pos:column="13">case <expr><name pos:line="298" pos:column="18">uniUTF8</name></expr>: <block pos:line="298" pos:column="27">{
                <expr_stmt><expr><call><name><op:operator pos:line="299" pos:column="17">::</op:operator><name pos:line="299" pos:column="19">fwrite</name></name><argument_list pos:line="299" pos:column="25">(<argument><expr><name><name pos:line="299" pos:column="26">k_Boms</name><index pos:line="299" pos:column="32">[<expr><name pos:line="299" pos:column="33">m_eEncoding</name></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="299" pos:column="47">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="299" pos:column="50">1</lit:literal></expr></argument>, <argument><expr><name pos:line="299" pos:column="53">m_pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:line="300" pos:column="17">break;</break>
            }</block>    
            </case><case pos:line="302" pos:column="13">case <expr><name pos:line="302" pos:column="18">uni16BE</name></expr>:
            </case><case pos:line="303" pos:column="13">case <expr><name pos:line="303" pos:column="18">uni16LE</name></expr>:
                <expr_stmt><expr><call><name><op:operator pos:line="304" pos:column="17">::</op:operator><name pos:line="304" pos:column="19">fwrite</name></name><argument_list pos:line="304" pos:column="25">(<argument><expr><name><name pos:line="304" pos:column="26">k_Boms</name><index pos:line="304" pos:column="32">[<expr><name pos:line="304" pos:column="33">m_eEncoding</name></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="304" pos:column="47">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="304" pos:column="50">1</lit:literal></expr></argument>, <argument><expr><name pos:line="304" pos:column="53">m_pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:line="305" pos:column="17">break;</break>
            </case><default pos:line="306" pos:column="13">default:
                <comment type="line" pos:line="307" pos:column="17">// nothing to do</comment>
                <break pos:line="308" pos:column="17">break;</break>
        </default>}</block></switch>
		<expr_stmt><expr><name pos:line="310" pos:column="17">m_bFirstWrite</name> <op:operator pos:line="310" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="310" pos:column="33">false</lit:literal></expr>;</expr_stmt>
    }</block></then></if>
    
    <switch pos:line="313" pos:column="5">switch <condition pos:line="313" pos:column="12">(<expr><name pos:line="313" pos:column="13">m_eEncoding</name></expr>)</condition>
    <block pos:line="314" pos:column="5">{
		<case pos:line="315" pos:column="17">case <expr><name pos:line="315" pos:column="22">uni7Bit</name></expr>:
        </case><case pos:line="316" pos:column="9">case <expr><name pos:line="316" pos:column="14">uni8Bit</name></expr>:
        </case><case pos:line="317" pos:column="9">case <expr><name pos:line="317" pos:column="14">uniCookie</name></expr>:
        </case><case pos:line="318" pos:column="9">case <expr><name pos:line="318" pos:column="14">uniUTF8</name></expr>: <block pos:line="318" pos:column="23">{
            <comment type="line" pos:line="319" pos:column="13">// Normal write</comment>
            <expr_stmt><expr><name pos:line="320" pos:column="13">ret</name> <op:operator pos:line="320" pos:column="17">=</op:operator> <call><name><op:operator pos:line="320" pos:column="19">::</op:operator><name pos:line="320" pos:column="21">fwrite</name></name><argument_list pos:line="320" pos:column="27">(<argument><expr><name pos:line="320" pos:column="28">p</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="31">_size</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="320" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><name pos:line="320" pos:column="41">m_pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:line="321" pos:column="13">break;</break>
        }</block>
        </case><case pos:line="323" pos:column="9">case <expr><name pos:line="323" pos:column="14">uni16BE_NoBOM</name></expr>:
        </case><case pos:line="324" pos:column="9">case <expr><name pos:line="324" pos:column="14">uni16LE_NoBOM</name></expr>:
        </case><case pos:line="325" pos:column="9">case <expr><name pos:line="325" pos:column="14">uni16BE</name></expr>:
        </case><case pos:line="326" pos:column="9">case <expr><name pos:line="326" pos:column="14">uni16LE</name></expr>: <block pos:line="326" pos:column="23">{
			<decl_stmt><decl><type><specifier pos:line="327" pos:column="25">static</specifier> <specifier pos:line="327" pos:column="32">const</specifier> <name pos:line="327" pos:column="38">int</name></type> <name pos:line="327" pos:column="42">bufSize</name> <init pos:line="327" pos:column="50">= <expr><lit:literal type="number" pos:line="327" pos:column="52">64</lit:literal><op:operator pos:line="327" pos:column="54">*</op:operator><lit:literal type="number" pos:line="327" pos:column="55">1024</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="328" pos:column="25">utf16</name></type> <name><name pos:line="328" pos:column="31">buf</name><index pos:line="328" pos:column="34">[<expr><name pos:line="328" pos:column="35">bufSize</name></expr>]</index></name></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="330" pos:column="13">Utf8_Iter</name></type> <name pos:line="330" pos:column="23">iter8</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="331" pos:column="13">iter8</name><op:operator pos:line="331" pos:column="18">.</op:operator><name pos:line="331" pos:column="19">set</name></name><argument_list pos:line="331" pos:column="22">(<argument><expr><call><name><name pos:line="331" pos:column="23">static_cast</name><argument_list pos:line="331" pos:column="34">&lt;<argument><expr><specifier pos:line="331" pos:column="35">const</specifier> <name pos:line="331" pos:column="41">ubyte</name><op:operator pos:line="331" pos:column="46">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="331" pos:column="48">(<argument><expr><name pos:line="331" pos:column="49">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="331" pos:column="53">_size</name></expr></argument>, <argument><expr><name pos:line="331" pos:column="60">m_eEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="333" pos:column="13">int</name></type> <name pos:line="333" pos:column="17">bufIndex</name> <init pos:line="333" pos:column="26">= <expr><lit:literal type="number" pos:line="333" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
            <while pos:line="334" pos:column="13">while <condition pos:line="334" pos:column="19">(<expr><name pos:line="334" pos:column="20">iter8</name></expr>)</condition> <block pos:line="334" pos:column="27">{
                <if pos:line="335" pos:column="17">if <condition pos:line="335" pos:column="20">(<expr><call><name><name pos:line="335" pos:column="21">iter8</name><op:operator pos:line="335" pos:column="26">.</op:operator><name pos:line="335" pos:column="27">canGet</name></name><argument_list pos:line="335" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="335" pos:column="36"> <block pos:line="335" pos:column="37">{
                    <expr_stmt><expr><name><name pos:line="336" pos:column="21">buf</name><index pos:line="336" pos:column="24">[<expr><name pos:line="336" pos:column="25">bufIndex</name><op:operator pos:line="336" pos:column="33">++</op:operator></expr>]</index></name> <op:operator pos:line="336" pos:column="37">=</op:operator> <call><name><name pos:line="336" pos:column="39">iter8</name><op:operator pos:line="336" pos:column="44">.</op:operator><name pos:line="336" pos:column="45">get</name></name><argument_list pos:line="336" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
				<expr_stmt><expr><op:operator pos:line="338" pos:column="33">++</op:operator><name pos:line="338" pos:column="35">iter8</name></expr>;</expr_stmt>
				<if pos:line="339" pos:column="33">if<condition pos:line="339" pos:column="35">(<expr><name pos:line="339" pos:column="36">bufIndex</name> <op:operator pos:line="339" pos:column="45">==</op:operator> <name pos:line="339" pos:column="48">bufSize</name> <op:operator pos:line="339" pos:column="56">||</op:operator> <op:operator pos:line="339" pos:column="59">!</op:operator><name pos:line="339" pos:column="60">iter8</name></expr>)</condition><then pos:line="339" pos:column="66"> <block pos:line="339" pos:column="67">{
					<if pos:line="340" pos:column="41">if<condition pos:line="340" pos:column="43">(<expr><op:operator pos:line="340" pos:column="44">!</op:operator><call><name><op:operator pos:line="340" pos:column="45">::</op:operator><name pos:line="340" pos:column="47">fwrite</name></name><argument_list pos:line="340" pos:column="53">(<argument><expr><name pos:line="340" pos:column="54">buf</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="59">bufIndex</name><op:operator pos:line="340" pos:column="67">*</op:operator><sizeof pos:line="340" pos:column="68">sizeof<argument_list pos:line="340" pos:column="74">(<argument><expr><name pos:line="340" pos:column="75">utf16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><lit:literal type="number" pos:line="340" pos:column="83">1</lit:literal></expr></argument>, <argument><expr><name pos:line="340" pos:column="86">m_pFile</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="340" pos:column="95"> <return pos:line="340" pos:column="96">return <expr><lit:literal type="number" pos:line="340" pos:column="103">0</lit:literal></expr>;</return></then></if>
					<expr_stmt><expr><name pos:line="341" pos:column="41">bufIndex</name> <op:operator pos:line="341" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="341" pos:column="52">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
            }</block></while>
            <expr_stmt><expr><name pos:line="344" pos:column="13">ret</name> <op:operator pos:line="344" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="344" pos:column="19">1</lit:literal></expr>;</expr_stmt>
            <break pos:line="345" pos:column="13">break;</break>
        }</block>    
        </case><default pos:line="347" pos:column="9">default:
            <break pos:line="348" pos:column="13">break;</break>
    </default>}</block></switch>
    
    <return pos:line="351" pos:column="5">return <expr><name pos:line="351" pos:column="12">ret</name></expr>;</return>
}</block></function>


<function><type><name pos:line="355" pos:column="1">size_t</name></type> <name><name pos:line="355" pos:column="8">Utf8_16_Write</name><op:operator pos:line="355" pos:column="21">::</op:operator><name pos:line="355" pos:column="23">convert</name></name><parameter_list pos:line="355" pos:column="30">(<param><decl><type><name pos:line="355" pos:column="31">char</name><type:modifier pos:line="355" pos:column="35">*</type:modifier></type> <name pos:line="355" pos:column="37">p</name></decl></param>, <param><decl><type><name pos:line="355" pos:column="40">size_t</name></type> <name pos:line="355" pos:column="47">_size</name></decl></param>)</parameter_list>
<block pos:line="356" pos:column="1">{
	<if pos:line="357" pos:column="9">if <condition pos:line="357" pos:column="12">(<expr><name pos:line="357" pos:column="13">m_pNewBuf</name></expr>)</condition><then pos:line="357" pos:column="23">
    <block pos:line="358" pos:column="5">{
		<expr_stmt><expr><op:operator pos:line="359" pos:column="17">delete</op:operator> <index pos:line="359" pos:column="24">[]</index> <name pos:line="359" pos:column="27">m_pNewBuf</name></expr>;</expr_stmt>
	}</block></then></if>

    <switch pos:line="362" pos:column="5">switch <condition pos:line="362" pos:column="12">(<expr><name pos:line="362" pos:column="13">m_eEncoding</name></expr>)</condition>
    <block pos:line="363" pos:column="5">{
		<case pos:line="364" pos:column="17">case <expr><name pos:line="364" pos:column="22">uni7Bit</name></expr>:
        </case><case pos:line="365" pos:column="9">case <expr><name pos:line="365" pos:column="14">uni8Bit</name></expr>:
        </case><case pos:line="366" pos:column="9">case <expr><name pos:line="366" pos:column="14">uniCookie</name></expr>: <block pos:line="366" pos:column="25">{
            <comment type="line" pos:line="367" pos:column="13">// Normal write</comment>
            <expr_stmt><expr><name pos:line="368" pos:column="13">m_nBufSize</name> <op:operator pos:line="368" pos:column="24">=</op:operator> <name pos:line="368" pos:column="26">_size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="369" pos:column="13">m_pNewBuf</name> <op:operator pos:line="369" pos:column="23">=</op:operator> <op:operator pos:line="369" pos:column="25">(</op:operator><name pos:line="369" pos:column="26">ubyte</name><op:operator pos:line="369" pos:column="31">*</op:operator><op:operator pos:line="369" pos:column="32">)</op:operator><op:operator pos:line="369" pos:column="33">new</op:operator> <name><name pos:line="369" pos:column="37">ubyte</name><index pos:line="369" pos:column="42">[<expr><name pos:line="369" pos:column="43">m_nBufSize</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="370" pos:column="13">memcpy</name><argument_list pos:line="370" pos:column="19">(<argument><expr><name pos:line="370" pos:column="20">m_pNewBuf</name></expr></argument>, <argument><expr><name pos:line="370" pos:column="31">p</name></expr></argument>, <argument><expr><name pos:line="370" pos:column="34">_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:line="371" pos:column="13">break;</break>
        }</block>
        </case><case pos:line="373" pos:column="9">case <expr><name pos:line="373" pos:column="14">uniUTF8</name></expr>: <block pos:line="373" pos:column="23">{
            <expr_stmt><expr><name pos:line="374" pos:column="13">m_nBufSize</name> <op:operator pos:line="374" pos:column="24">=</op:operator> <name pos:line="374" pos:column="26">_size</name> <op:operator pos:line="374" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="374" pos:column="34">3</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="375" pos:column="13">m_pNewBuf</name> <op:operator pos:line="375" pos:column="23">=</op:operator> <op:operator pos:line="375" pos:column="25">(</op:operator><name pos:line="375" pos:column="26">ubyte</name><op:operator pos:line="375" pos:column="31">*</op:operator><op:operator pos:line="375" pos:column="32">)</op:operator><op:operator pos:line="375" pos:column="33">new</op:operator> <name><name pos:line="375" pos:column="37">ubyte</name><index pos:line="375" pos:column="42">[<expr><name pos:line="375" pos:column="43">m_nBufSize</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="376" pos:column="13">memcpy</name><argument_list pos:line="376" pos:column="19">(<argument><expr><name pos:line="376" pos:column="20">m_pNewBuf</name></expr></argument>, <argument><expr><name><name pos:line="376" pos:column="31">k_Boms</name><index pos:line="376" pos:column="37">[<expr><name pos:line="376" pos:column="38">m_eEncoding</name></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="376" pos:column="52">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="377" pos:column="13">memcpy</name><argument_list pos:line="377" pos:column="19">(<argument><expr><op:operator pos:line="377" pos:column="20">&amp;</op:operator><name><name pos:line="377" pos:column="21">m_pNewBuf</name><index pos:line="377" pos:column="30">[<expr><lit:literal type="number" pos:line="377" pos:column="31">3</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="377" pos:column="35">p</name></expr></argument>, <argument><expr><name pos:line="377" pos:column="38">_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:line="378" pos:column="13">break;</break>
        }</block>
        </case><case pos:line="380" pos:column="9">case <expr><name pos:line="380" pos:column="14">uni16BE_NoBOM</name></expr>:
        </case><case pos:line="381" pos:column="9">case <expr><name pos:line="381" pos:column="14">uni16LE_NoBOM</name></expr>:
        </case><case pos:line="382" pos:column="9">case <expr><name pos:line="382" pos:column="14">uni16BE</name></expr>:
        </case><case pos:line="383" pos:column="9">case <expr><name pos:line="383" pos:column="14">uni16LE</name></expr>: <block pos:line="383" pos:column="23">{
            <expr_stmt><expr><name pos:line="384" pos:column="13">m_pNewBuf</name> <op:operator pos:line="384" pos:column="23">=</op:operator> <op:operator pos:line="384" pos:column="25">(</op:operator><name pos:line="384" pos:column="26">ubyte</name><op:operator pos:line="384" pos:column="31">*</op:operator><op:operator pos:line="384" pos:column="32">)</op:operator><op:operator pos:line="384" pos:column="33">new</op:operator> <name><name pos:line="384" pos:column="37">ubyte</name><index pos:line="384" pos:column="42">[<expr><sizeof pos:line="384" pos:column="43">sizeof<argument_list pos:line="384" pos:column="49">(<argument><expr><name pos:line="384" pos:column="50">utf16</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="384" pos:column="57">*</op:operator> <op:operator pos:line="384" pos:column="59">(</op:operator><name pos:line="384" pos:column="60">_size</name> <op:operator pos:line="384" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="384" pos:column="68">1</lit:literal><op:operator pos:line="384" pos:column="69">)</op:operator></expr>]</index></name></expr>;</expr_stmt>
            
            <if pos:line="386" pos:column="13">if <condition pos:line="386" pos:column="16">(<expr><name pos:line="386" pos:column="17">m_eEncoding</name> <op:operator pos:line="386" pos:column="29">==</op:operator> <name pos:line="386" pos:column="32">uni16BE</name> <op:operator pos:line="386" pos:column="40">||</op:operator> <name pos:line="386" pos:column="43">m_eEncoding</name> <op:operator pos:line="386" pos:column="55">==</op:operator> <name pos:line="386" pos:column="58">uni16LE</name></expr>)</condition><then pos:line="386" pos:column="66"> <block pos:line="386" pos:column="67">{
                <comment type="line" pos:line="387" pos:column="17">// Write the BOM</comment>
                <expr_stmt><expr><call><name pos:line="388" pos:column="17">memcpy</name><argument_list pos:line="388" pos:column="23">(<argument><expr><name pos:line="388" pos:column="24">m_pNewBuf</name></expr></argument>, <argument><expr><name><name pos:line="388" pos:column="35">k_Boms</name><index pos:line="388" pos:column="41">[<expr><name pos:line="388" pos:column="42">m_eEncoding</name></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="388" pos:column="56">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <decl_stmt><decl><type><name pos:line="391" pos:column="13">Utf8_Iter</name></type> <name pos:line="391" pos:column="23">iter8</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="392" pos:column="13">iter8</name><op:operator pos:line="392" pos:column="18">.</op:operator><name pos:line="392" pos:column="19">set</name></name><argument_list pos:line="392" pos:column="22">(<argument><expr><call><name><name pos:line="392" pos:column="23">reinterpret_cast</name><argument_list pos:line="392" pos:column="39">&lt;<argument><expr><specifier pos:line="392" pos:column="40">const</specifier> <name pos:line="392" pos:column="46">ubyte</name><op:operator pos:line="392" pos:column="51">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="392" pos:column="53">(<argument><expr><name pos:line="392" pos:column="54">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="392" pos:column="58">_size</name></expr></argument>, <argument><expr><name pos:line="392" pos:column="65">m_eEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="394" pos:column="13">utf16</name><type:modifier pos:line="394" pos:column="18">*</type:modifier></type> <name pos:line="394" pos:column="20">pCur</name> <init pos:line="394" pos:column="25">= <expr><op:operator pos:line="394" pos:column="27">(</op:operator><name pos:line="394" pos:column="28">utf16</name><op:operator pos:line="394" pos:column="33">*</op:operator><op:operator pos:line="394" pos:column="34">)</op:operator><op:operator pos:line="394" pos:column="35">&amp;</op:operator><name><name pos:line="394" pos:column="36">m_pNewBuf</name><index pos:line="394" pos:column="45">[<expr><lit:literal type="number" pos:line="394" pos:column="46">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            
            <for pos:line="396" pos:column="13">for (<init pos:line="396" pos:column="18">;</init> <condition><expr><name pos:line="396" pos:column="20">iter8</name></expr>;</condition> <incr><expr><op:operator pos:line="396" pos:column="27">++</op:operator><name pos:line="396" pos:column="29">iter8</name></expr></incr>) <block pos:line="396" pos:column="36">{
                <if pos:line="397" pos:column="17">if <condition pos:line="397" pos:column="20">(<expr><call><name><name pos:line="397" pos:column="21">iter8</name><op:operator pos:line="397" pos:column="26">.</op:operator><name pos:line="397" pos:column="27">canGet</name></name><argument_list pos:line="397" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="397" pos:column="36"> <block pos:line="397" pos:column="37">{
                    <expr_stmt><expr><op:operator pos:line="398" pos:column="21">*</op:operator><name pos:line="398" pos:column="22">pCur</name><op:operator pos:line="398" pos:column="26">++</op:operator> <op:operator pos:line="398" pos:column="29">=</op:operator> <call><name><name pos:line="398" pos:column="31">iter8</name><op:operator pos:line="398" pos:column="36">.</op:operator><name pos:line="398" pos:column="37">get</name></name><argument_list pos:line="398" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><name pos:line="401" pos:column="13">m_nBufSize</name> <op:operator pos:line="401" pos:column="24">=</op:operator> <op:operator pos:line="401" pos:column="26">(</op:operator>const <name pos:line="401" pos:column="33">char</name><op:operator pos:line="401" pos:column="37">*</op:operator><op:operator pos:line="401" pos:column="38">)</op:operator><name pos:line="401" pos:column="39">pCur</name> <op:operator pos:line="401" pos:column="44">-</op:operator> <op:operator pos:line="401" pos:column="46">(</op:operator>const <name pos:line="401" pos:column="53">char</name><op:operator pos:line="401" pos:column="57">*</op:operator><op:operator pos:line="401" pos:column="58">)</op:operator><name pos:line="401" pos:column="59">m_pNewBuf</name></expr>;</expr_stmt>
        }</block>
        </case><default pos:line="403" pos:column="9">default:
            <break pos:line="404" pos:column="13">break;</break>
    </default>}</block></switch>
    
	<return pos:line="407" pos:column="9">return <expr><name pos:line="407" pos:column="16">m_nBufSize</name></expr>;</return>
}</block></function>


<function><type><name pos:line="411" pos:column="1">void</name></type> <name><name pos:line="411" pos:column="6">Utf8_16_Write</name><op:operator pos:line="411" pos:column="19">::</op:operator><name pos:line="411" pos:column="21">setEncoding</name></name><parameter_list pos:line="411" pos:column="32">(<param><decl><type><name pos:line="411" pos:column="33">UniMode</name></type> <name pos:line="411" pos:column="41">eType</name></decl></param>)</parameter_list>
<block pos:line="412" pos:column="1">{
	<expr_stmt><expr><name pos:line="413" pos:column="9">m_eEncoding</name> <op:operator pos:line="413" pos:column="21">=</op:operator> <name pos:line="413" pos:column="23">eType</name></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="417" pos:column="1">void</name></type> <name><name pos:line="417" pos:column="6">Utf8_16_Write</name><op:operator pos:line="417" pos:column="19">::</op:operator><name pos:line="417" pos:column="21">fclose</name></name><parameter_list pos:line="417" pos:column="27">()</parameter_list>
<block pos:line="418" pos:column="1">{
	<if pos:line="419" pos:column="9">if <condition pos:line="419" pos:column="12">(<expr><name pos:line="419" pos:column="13">m_pNewBuf</name></expr>)</condition><then pos:line="419" pos:column="23">
		<expr_stmt><expr><op:operator pos:line="420" pos:column="17">delete</op:operator> <index pos:line="420" pos:column="24">[]</index> <name pos:line="420" pos:column="27">m_pNewBuf</name></expr>;</expr_stmt></then></if>

	<if pos:line="422" pos:column="9">if <condition pos:line="422" pos:column="12">(<expr><name pos:line="422" pos:column="13">m_pFile</name></expr>)</condition><then pos:line="422" pos:column="21">
		<expr_stmt><expr><call><name><op:operator pos:line="423" pos:column="17">::</op:operator><name pos:line="423" pos:column="19">fclose</name></name><argument_list pos:line="423" pos:column="25">(<argument><expr><name pos:line="423" pos:column="26">m_pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>


<comment type="line" pos:line="427" pos:column="1">//=================================================================</comment>
<constructor><name><name pos:line="428" pos:column="1">Utf8_Iter</name><op:operator pos:line="428" pos:column="10">::</op:operator><name pos:line="428" pos:column="12">Utf8_Iter</name></name><parameter_list pos:line="428" pos:column="21">()</parameter_list>
<block pos:line="429" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="430" pos:column="9">reset</name><argument_list pos:line="430" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="433" pos:column="1">void</name></type> <name><name pos:line="433" pos:column="6">Utf8_Iter</name><op:operator pos:line="433" pos:column="15">::</op:operator><name pos:line="433" pos:column="17">reset</name></name><parameter_list pos:line="433" pos:column="22">()</parameter_list>
<block pos:line="434" pos:column="1">{
	<expr_stmt><expr><name pos:line="435" pos:column="9">m_pBuf</name> <op:operator pos:line="435" pos:column="16">=</op:operator> <name pos:line="435" pos:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="436" pos:column="9">m_pRead</name> <op:operator pos:line="436" pos:column="17">=</op:operator> <name pos:line="436" pos:column="19">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="437" pos:column="9">m_pEnd</name> <op:operator pos:line="437" pos:column="16">=</op:operator> <name pos:line="437" pos:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="438" pos:column="9">m_eState</name> <op:operator pos:line="438" pos:column="18">=</op:operator> <name pos:line="438" pos:column="20">eStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="439" pos:column="9">m_nCur</name> <op:operator pos:line="439" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="439" pos:column="18">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="440" pos:column="9">m_eEncoding</name> <op:operator pos:line="440" pos:column="21">=</op:operator> <name pos:line="440" pos:column="23">uni8Bit</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="443" pos:column="1">void</name></type> <name><name pos:line="443" pos:column="6">Utf8_Iter</name><op:operator pos:line="443" pos:column="15">::</op:operator><name pos:line="443" pos:column="17">set</name></name><parameter_list pos:line="443" pos:column="20">(<param><decl><type><specifier pos:line="443" pos:column="21">const</specifier> <name pos:line="443" pos:column="27">ubyte</name><type:modifier pos:line="443" pos:column="32">*</type:modifier></type> <name pos:line="443" pos:column="34">pBuf</name></decl></param>, <param><decl><type><name pos:line="443" pos:column="40">size_t</name></type> <name pos:line="443" pos:column="47">nLen</name></decl></param>, <param><decl><type><name pos:line="443" pos:column="53">UniMode</name></type> <name pos:line="443" pos:column="61">eEncoding</name></decl></param>)</parameter_list>
<block pos:line="444" pos:column="1">{
	<expr_stmt><expr><name pos:line="445" pos:column="9">m_pBuf</name>      <op:operator pos:line="445" pos:column="21">=</op:operator> <name pos:line="445" pos:column="23">pBuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="446" pos:column="9">m_pRead</name>     <op:operator pos:line="446" pos:column="21">=</op:operator> <name pos:line="446" pos:column="23">pBuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="447" pos:column="9">m_pEnd</name>      <op:operator pos:line="447" pos:column="21">=</op:operator> <name pos:line="447" pos:column="23">pBuf</name> <op:operator pos:line="447" pos:column="28">+</op:operator> <name pos:line="447" pos:column="30">nLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="448" pos:column="9">m_eEncoding</name> <op:operator pos:line="448" pos:column="21">=</op:operator> <name pos:line="448" pos:column="23">eEncoding</name></expr>;</expr_stmt>
	<function_decl><name pos:line="449" pos:column="9">operator++</name><parameter_list pos:line="449" pos:column="19">()</parameter_list>;</function_decl>
	<comment type="line" pos:line="450" pos:column="9">// Note: m_eState, m_nCur not set</comment>
}</block></function>

<comment type="line" pos:line="453" pos:column="1">// Go to the next byte.</comment>
<function><type><name pos:line="454" pos:column="1">void</name></type> <name><name pos:line="454" pos:column="6">Utf8_Iter</name><op:operator pos:line="454" pos:column="15">::</op:operator><name pos:line="454" pos:column="17">operator++</name></name><parameter_list pos:line="454" pos:column="27">()</parameter_list>
<block pos:line="455" pos:column="1">{
	<switch pos:line="456" pos:column="9">switch <condition pos:line="456" pos:column="16">(<expr><name pos:line="456" pos:column="17">m_eState</name></expr>)</condition>
    <block pos:line="457" pos:column="5">{
        <case pos:line="458" pos:column="9">case <expr><name pos:line="458" pos:column="14">eStart</name></expr>:
            <if pos:line="459" pos:column="13">if <condition pos:line="459" pos:column="16">(<expr><op:operator pos:line="459" pos:column="17">*</op:operator><name pos:line="459" pos:column="18">m_pRead</name> <op:operator pos:line="459" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="459" pos:column="28">0x80</lit:literal></expr>)</condition><then pos:line="459" pos:column="33"> <block pos:line="459" pos:column="34">{
                <expr_stmt><expr><name pos:line="460" pos:column="17">m_nCur</name> <op:operator pos:line="460" pos:column="24">=</op:operator> <op:operator pos:line="460" pos:column="26">*</op:operator><name pos:line="460" pos:column="27">m_pRead</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="461" pos:column="17">toStart</name><argument_list pos:line="461" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="462" pos:column="15">else <if pos:line="462" pos:column="20">if <condition pos:line="462" pos:column="23">(<expr><op:operator pos:line="462" pos:column="24">*</op:operator><name pos:line="462" pos:column="25">m_pRead</name> <op:operator pos:line="462" pos:column="33">&lt;</op:operator> <lit:literal type="number" pos:line="462" pos:column="35">0xE0</lit:literal></expr>)</condition><then pos:line="462" pos:column="40"> <block pos:line="462" pos:column="41">{
                <expr_stmt><expr><name pos:line="463" pos:column="17">m_nCur</name> <op:operator pos:line="463" pos:column="24">=</op:operator> <call><name><name pos:line="463" pos:column="26">static_cast</name><argument_list pos:line="463" pos:column="37">&lt;<argument><expr><name pos:line="463" pos:column="38">utf16</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="463" pos:column="44">(<argument><expr><op:operator pos:line="463" pos:column="45">(</op:operator><lit:literal type="number" pos:line="463" pos:column="46">0x1F</lit:literal> <op:operator pos:line="463" pos:column="51">&amp;</op:operator> <op:operator pos:line="463" pos:column="53">*</op:operator><name pos:line="463" pos:column="54">m_pRead</name><op:operator pos:line="463" pos:column="61">)</op:operator> <op:operator pos:line="463" pos:column="63">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="463" pos:column="66">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="464" pos:column="17">m_eState</name> <op:operator pos:line="464" pos:column="26">=</op:operator> <name pos:line="464" pos:column="28">e2Bytes_Byte2</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="465" pos:column="15">else <block pos:line="465" pos:column="20">{
                <expr_stmt><expr><name pos:line="466" pos:column="17">m_nCur</name> <op:operator pos:line="466" pos:column="24">=</op:operator> <call><name><name pos:line="466" pos:column="26">static_cast</name><argument_list pos:line="466" pos:column="37">&lt;<argument><expr><name pos:line="466" pos:column="38">utf16</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="466" pos:column="44">(<argument><expr><op:operator pos:line="466" pos:column="45">(</op:operator><lit:literal type="number" pos:line="466" pos:column="46">0xF</lit:literal> <op:operator pos:line="466" pos:column="50">&amp;</op:operator> <op:operator pos:line="466" pos:column="52">*</op:operator><name pos:line="466" pos:column="53">m_pRead</name><op:operator pos:line="466" pos:column="60">)</op:operator> <op:operator pos:line="466" pos:column="62">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="466" pos:column="65">12</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="467" pos:column="17">m_eState</name> <op:operator pos:line="467" pos:column="26">=</op:operator> <name pos:line="467" pos:column="28">e3Bytes_Byte2</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <break pos:line="469" pos:column="13">break;</break>
        </case><case pos:line="470" pos:column="9">case <expr><name pos:line="470" pos:column="14">e2Bytes_Byte2</name></expr>:
        </case><case pos:line="471" pos:column="9">case <expr><name pos:line="471" pos:column="14">e3Bytes_Byte3</name></expr>:
            <expr_stmt><expr><name pos:line="472" pos:column="13">m_nCur</name> <op:operator pos:line="472" pos:column="20">|=</op:operator> <call><name><name pos:line="472" pos:column="23">static_cast</name><argument_list pos:line="472" pos:column="34">&lt;<argument><expr><name pos:line="472" pos:column="35">utf8</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="472" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="472" pos:column="41">0x3F</lit:literal> <op:operator pos:line="472" pos:column="46">&amp;</op:operator> <op:operator pos:line="472" pos:column="48">*</op:operator><name pos:line="472" pos:column="49">m_pRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="473" pos:column="13">toStart</name><argument_list pos:line="473" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
            <break pos:line="474" pos:column="13">break;</break>
        </case><case pos:line="475" pos:column="9">case <expr><name pos:line="475" pos:column="14">e3Bytes_Byte2</name></expr>:
            <expr_stmt><expr><name pos:line="476" pos:column="13">m_nCur</name> <op:operator pos:line="476" pos:column="20">|=</op:operator> <call><name><name pos:line="476" pos:column="23">static_cast</name><argument_list pos:line="476" pos:column="34">&lt;<argument><expr><name pos:line="476" pos:column="35">utf16</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="476" pos:column="41">(<argument><expr><op:operator pos:line="476" pos:column="42">(</op:operator><lit:literal type="number" pos:line="476" pos:column="43">0x3F</lit:literal> <op:operator pos:line="476" pos:column="48">&amp;</op:operator> <op:operator pos:line="476" pos:column="50">*</op:operator><name pos:line="476" pos:column="51">m_pRead</name><op:operator pos:line="476" pos:column="58">)</op:operator> <op:operator pos:line="476" pos:column="60">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="476" pos:column="63">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="477" pos:column="13">m_eState</name> <op:operator pos:line="477" pos:column="22">=</op:operator> <name pos:line="477" pos:column="24">e3Bytes_Byte3</name></expr>;</expr_stmt>
            <break pos:line="478" pos:column="13">break;</break>
	</case>}</block></switch>
	<expr_stmt><expr><op:operator pos:line="480" pos:column="9">++</op:operator><name pos:line="480" pos:column="11">m_pRead</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="483" pos:column="1">void</name></type> <name><name pos:line="483" pos:column="6">Utf8_Iter</name><op:operator pos:line="483" pos:column="15">::</op:operator><name pos:line="483" pos:column="17">toStart</name></name><parameter_list pos:line="483" pos:column="24">()</parameter_list>
<block pos:line="484" pos:column="1">{
	<expr_stmt><expr><name pos:line="485" pos:column="9">m_eState</name> <op:operator pos:line="485" pos:column="18">=</op:operator> <name pos:line="485" pos:column="20">eStart</name></expr>;</expr_stmt>
	<if pos:line="486" pos:column="9">if <condition pos:line="486" pos:column="12">(<expr><name pos:line="486" pos:column="13">m_eEncoding</name> <op:operator pos:line="486" pos:column="25">==</op:operator> <name pos:line="486" pos:column="28">uni16BE</name> <op:operator pos:line="486" pos:column="36">||</op:operator> <name pos:line="486" pos:column="39">m_eEncoding</name> <op:operator pos:line="486" pos:column="51">==</op:operator> <name pos:line="486" pos:column="54">uni16BE_NoBOM</name></expr>)</condition><then pos:line="486" pos:column="68">
    <block pos:line="487" pos:column="5">{
		<expr_stmt><expr><call><name pos:line="488" pos:column="17">swap</name><argument_list pos:line="488" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="492" pos:column="1">void</name></type> <name><name pos:line="492" pos:column="6">Utf8_Iter</name><op:operator pos:line="492" pos:column="15">::</op:operator><name pos:line="492" pos:column="17">swap</name></name><parameter_list pos:line="492" pos:column="21">()</parameter_list>
<block pos:line="493" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="494" pos:column="9">utf8</name><type:modifier pos:line="494" pos:column="13">*</type:modifier></type> <name pos:line="494" pos:column="15">p</name> <init pos:line="494" pos:column="17">= <expr><call><name><name pos:line="494" pos:column="19">reinterpret_cast</name><argument_list pos:line="494" pos:column="35">&lt;<argument><expr><name pos:line="494" pos:column="36">utf8</name><op:operator pos:line="494" pos:column="40">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="494" pos:column="42">(<argument><expr><op:operator pos:line="494" pos:column="43">&amp;</op:operator><name pos:line="494" pos:column="44">m_nCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="495" pos:column="9">utf8</name></type> <name pos:line="495" pos:column="14">swapbyte</name> <init pos:line="495" pos:column="23">= <expr><op:operator pos:line="495" pos:column="25">*</op:operator><name pos:line="495" pos:column="26">p</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="496" pos:column="9">*</op:operator><name pos:line="496" pos:column="10">p</name> <op:operator pos:line="496" pos:column="12">=</op:operator> <op:operator pos:line="496" pos:column="14">*</op:operator><op:operator pos:line="496" pos:column="15">(</op:operator><name pos:line="496" pos:column="16">p</name> <op:operator pos:line="496" pos:column="18">+</op:operator> <lit:literal type="number" pos:line="496" pos:column="20">1</lit:literal><op:operator pos:line="496" pos:column="21">)</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="497" pos:column="9">*</op:operator><op:operator pos:line="497" pos:column="10">(</op:operator><name pos:line="497" pos:column="11">p</name> <op:operator pos:line="497" pos:column="13">+</op:operator> <lit:literal type="number" pos:line="497" pos:column="15">1</lit:literal><op:operator pos:line="497" pos:column="16">)</op:operator> <op:operator pos:line="497" pos:column="18">=</op:operator> <name pos:line="497" pos:column="20">swapbyte</name></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="500" pos:column="1">//==================================================</comment>
<constructor><name><name pos:line="501" pos:column="1">Utf16_Iter</name><op:operator pos:line="501" pos:column="11">::</op:operator><name pos:line="501" pos:column="13">Utf16_Iter</name></name><parameter_list pos:line="501" pos:column="23">()</parameter_list>
<block pos:line="502" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="503" pos:column="9">reset</name><argument_list pos:line="503" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="506" pos:column="1">void</name></type> <name><name pos:line="506" pos:column="6">Utf16_Iter</name><op:operator pos:line="506" pos:column="16">::</op:operator><name pos:line="506" pos:column="18">reset</name></name><parameter_list pos:line="506" pos:column="23">()</parameter_list>
<block pos:line="507" pos:column="1">{
	<expr_stmt><expr><name pos:line="508" pos:column="9">m_pBuf</name> <op:operator pos:line="508" pos:column="16">=</op:operator> <name pos:line="508" pos:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="509" pos:column="9">m_pRead</name> <op:operator pos:line="509" pos:column="17">=</op:operator> <name pos:line="509" pos:column="19">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="510" pos:column="9">m_pEnd</name> <op:operator pos:line="510" pos:column="16">=</op:operator> <name pos:line="510" pos:column="18">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="511" pos:column="9">m_eState</name> <op:operator pos:line="511" pos:column="18">=</op:operator> <name pos:line="511" pos:column="20">eStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="512" pos:column="9">m_nCur</name> <op:operator pos:line="512" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="512" pos:column="18">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="513" pos:column="9">m_nCur16</name> <op:operator pos:line="513" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="513" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="514" pos:column="9">m_eEncoding</name> <op:operator pos:line="514" pos:column="21">=</op:operator> <name pos:line="514" pos:column="23">uni8Bit</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="517" pos:column="1">void</name></type> <name><name pos:line="517" pos:column="6">Utf16_Iter</name><op:operator pos:line="517" pos:column="16">::</op:operator><name pos:line="517" pos:column="18">set</name></name><parameter_list pos:line="517" pos:column="21">(<param><decl><type><specifier pos:line="517" pos:column="22">const</specifier> <name pos:line="517" pos:column="28">ubyte</name><type:modifier pos:line="517" pos:column="33">*</type:modifier></type> <name pos:line="517" pos:column="35">pBuf</name></decl></param>, <param><decl><type><name pos:line="517" pos:column="41">size_t</name></type> <name pos:line="517" pos:column="48">nLen</name></decl></param>, <param><decl><type><name pos:line="517" pos:column="54">UniMode</name></type> <name pos:line="517" pos:column="62">eEncoding</name></decl></param>)</parameter_list>
<block pos:line="518" pos:column="1">{
	<expr_stmt><expr><name pos:line="519" pos:column="9">m_pBuf</name> <op:operator pos:line="519" pos:column="16">=</op:operator> <name pos:line="519" pos:column="18">pBuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="520" pos:column="9">m_pRead</name> <op:operator pos:line="520" pos:column="17">=</op:operator> <name pos:line="520" pos:column="19">pBuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="521" pos:column="9">m_pEnd</name> <op:operator pos:line="521" pos:column="16">=</op:operator> <name pos:line="521" pos:column="18">pBuf</name> <op:operator pos:line="521" pos:column="23">+</op:operator> <name pos:line="521" pos:column="25">nLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="522" pos:column="9">m_eEncoding</name> <op:operator pos:line="522" pos:column="21">=</op:operator> <name pos:line="522" pos:column="23">eEncoding</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="523" pos:column="9">m_eState</name> <op:operator pos:line="523" pos:column="18">=</op:operator> <name pos:line="523" pos:column="20">eStart</name></expr>;</expr_stmt>
	<function_decl><name pos:line="524" pos:column="9">operator++</name><parameter_list pos:line="524" pos:column="19">()</parameter_list>;</function_decl>
	<comment type="line" pos:line="525" pos:column="9">// Note: m_eState, m_nCur, m_nCur16 not reinitalized.</comment>
}</block></function>

<comment type="line" pos:line="528" pos:column="1">// Goes to the next byte.</comment>
<comment type="line" pos:line="529" pos:column="1">// Not the next symbol which you might expect.</comment>
<comment type="line" pos:line="530" pos:column="1">// This way we can continue from a partial buffer that doesn't align</comment>
<function><type><name pos:line="531" pos:column="1">void</name></type> <name><name pos:line="531" pos:column="6">Utf16_Iter</name><op:operator pos:line="531" pos:column="16">::</op:operator><name pos:line="531" pos:column="18">operator++</name></name><parameter_list pos:line="531" pos:column="28">()</parameter_list>
<block pos:line="532" pos:column="1">{
	<switch pos:line="533" pos:column="9">switch <condition pos:line="533" pos:column="16">(<expr><name pos:line="533" pos:column="17">m_eState</name></expr>)</condition>
    <block pos:line="534" pos:column="5">{
        <case pos:line="535" pos:column="9">case <expr><name pos:line="535" pos:column="14">eStart</name></expr>:
            <if pos:line="536" pos:column="13">if <condition pos:line="536" pos:column="16">(<expr><name pos:line="536" pos:column="17">m_eEncoding</name> <op:operator pos:line="536" pos:column="29">==</op:operator> <name pos:line="536" pos:column="32">uni16LE</name> <op:operator pos:line="536" pos:column="40">||</op:operator> <name pos:line="536" pos:column="43">m_eEncoding</name> <op:operator pos:line="536" pos:column="55">==</op:operator> <name pos:line="536" pos:column="58">uni16LE_NoBOM</name></expr>)</condition><then pos:line="536" pos:column="72"> 
            <block pos:line="537" pos:column="13">{
                <expr_stmt><expr><name pos:line="538" pos:column="17">m_nCur16</name> <op:operator pos:line="538" pos:column="26">=</op:operator> <op:operator pos:line="538" pos:column="28">*</op:operator><name pos:line="538" pos:column="29">m_pRead</name><op:operator pos:line="538" pos:column="36">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="539" pos:column="17">m_nCur16</name> <op:operator pos:line="539" pos:column="26">|=</op:operator> <call><name><name pos:line="539" pos:column="29">static_cast</name><argument_list pos:line="539" pos:column="40">&lt;<argument><expr><name pos:line="539" pos:column="41">utf16</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="539" pos:column="47">(<argument><expr><op:operator pos:line="539" pos:column="48">*</op:operator><name pos:line="539" pos:column="49">m_pRead</name> <op:operator pos:line="539" pos:column="57">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="539" pos:column="60">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="541" pos:column="13">else <comment type="line" pos:line="541" pos:column="18">//(m_eEncoding == uni16BE || m_eEncoding == uni16BE_NoBOM)</comment>
            <block pos:line="542" pos:column="13">{
                <expr_stmt><expr><name pos:line="543" pos:column="17">m_nCur16</name> <op:operator pos:line="543" pos:column="26">=</op:operator> <call><name><name pos:line="543" pos:column="28">static_cast</name><argument_list pos:line="543" pos:column="39">&lt;<argument><expr><name pos:line="543" pos:column="40">utf16</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="543" pos:column="46">(<argument><expr><op:operator pos:line="543" pos:column="47">*</op:operator><name pos:line="543" pos:column="48">m_pRead</name><op:operator pos:line="543" pos:column="55">++</op:operator> <op:operator pos:line="543" pos:column="58">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="543" pos:column="61">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="544" pos:column="17">m_nCur16</name> <op:operator pos:line="544" pos:column="26">|=</op:operator> <op:operator pos:line="544" pos:column="29">*</op:operator><name pos:line="544" pos:column="30">m_pRead</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><op:operator pos:line="546" pos:column="13">++</op:operator><name pos:line="546" pos:column="15">m_pRead</name></expr>;</expr_stmt>
            
            <if pos:line="548" pos:column="13">if <condition pos:line="548" pos:column="16">(<expr><name pos:line="548" pos:column="17">m_nCur16</name> <op:operator pos:line="548" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="548" pos:column="28">0x80</lit:literal></expr>)</condition><then pos:line="548" pos:column="33"> <block pos:line="548" pos:column="34">{
                <expr_stmt><expr><name pos:line="549" pos:column="17">m_nCur</name> <op:operator pos:line="549" pos:column="24">=</op:operator> <call><name><name pos:line="549" pos:column="26">static_cast</name><argument_list pos:line="549" pos:column="37">&lt;<argument><expr><name pos:line="549" pos:column="38">ubyte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="549" pos:column="44">(<argument><expr><name pos:line="549" pos:column="45">m_nCur16</name> <op:operator pos:line="549" pos:column="54">&amp;</op:operator> <lit:literal type="number" pos:line="549" pos:column="56">0xFF</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="550" pos:column="17">m_eState</name> <op:operator pos:line="550" pos:column="26">=</op:operator> <name pos:line="550" pos:column="28">eStart</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="551" pos:column="15">else <if pos:line="551" pos:column="20">if <condition pos:line="551" pos:column="23">(<expr><name pos:line="551" pos:column="24">m_nCur16</name> <op:operator pos:line="551" pos:column="33">&lt;</op:operator> <lit:literal type="number" pos:line="551" pos:column="35">0x800</lit:literal></expr>)</condition><then pos:line="551" pos:column="41"> <block pos:line="551" pos:column="42">{
                <expr_stmt><expr><name pos:line="552" pos:column="17">m_nCur</name> <op:operator pos:line="552" pos:column="24">=</op:operator> <call><name><name pos:line="552" pos:column="26">static_cast</name><argument_list pos:line="552" pos:column="37">&lt;<argument><expr><name pos:line="552" pos:column="38">ubyte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="552" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="552" pos:column="45">0xC0</lit:literal> <op:operator pos:line="552" pos:column="50">|</op:operator> <name pos:line="552" pos:column="52">m_nCur16</name> <op:operator pos:line="552" pos:column="61">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="552" pos:column="64">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="553" pos:column="17">m_eState</name> <op:operator pos:line="553" pos:column="26">=</op:operator> <name pos:line="553" pos:column="28">e2Bytes2</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="554" pos:column="15">else <block pos:line="554" pos:column="20">{
                <expr_stmt><expr><name pos:line="555" pos:column="17">m_nCur</name> <op:operator pos:line="555" pos:column="24">=</op:operator> <call><name><name pos:line="555" pos:column="26">static_cast</name><argument_list pos:line="555" pos:column="37">&lt;<argument><expr><name pos:line="555" pos:column="38">ubyte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="555" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="555" pos:column="45">0xE0</lit:literal> <op:operator pos:line="555" pos:column="50">|</op:operator> <name pos:line="555" pos:column="52">m_nCur16</name> <op:operator pos:line="555" pos:column="61">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="555" pos:column="64">12</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="556" pos:column="17">m_eState</name> <op:operator pos:line="556" pos:column="26">=</op:operator> <name pos:line="556" pos:column="28">e3Bytes2</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <break pos:line="558" pos:column="13">break;</break>
        </case><case pos:line="559" pos:column="9">case <expr><name pos:line="559" pos:column="14">e2Bytes2</name></expr>:
        </case><case pos:line="560" pos:column="9">case <expr><name pos:line="560" pos:column="14">e3Bytes3</name></expr>:
            <expr_stmt><expr><name pos:line="561" pos:column="13">m_nCur</name> <op:operator pos:line="561" pos:column="20">=</op:operator> <call><name><name pos:line="561" pos:column="22">static_cast</name><argument_list pos:line="561" pos:column="33">&lt;<argument><expr><name pos:line="561" pos:column="34">ubyte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="561" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="561" pos:column="41">0x80</lit:literal> <op:operator pos:line="561" pos:column="46">|</op:operator> <name pos:line="561" pos:column="48">m_nCur16</name> <op:operator pos:line="561" pos:column="57">&amp;</op:operator> <lit:literal type="number" pos:line="561" pos:column="59">0x3F</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="562" pos:column="13">m_eState</name> <op:operator pos:line="562" pos:column="22">=</op:operator> <name pos:line="562" pos:column="24">eStart</name></expr>;</expr_stmt>
            <break pos:line="563" pos:column="13">break;</break>
        </case><case pos:line="564" pos:column="9">case <expr><name pos:line="564" pos:column="14">e3Bytes2</name></expr>:
            <expr_stmt><expr><name pos:line="565" pos:column="13">m_nCur</name> <op:operator pos:line="565" pos:column="20">=</op:operator> <call><name><name pos:line="565" pos:column="22">static_cast</name><argument_list pos:line="565" pos:column="33">&lt;<argument><expr><name pos:line="565" pos:column="34">ubyte</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="565" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="565" pos:column="41">0x80</lit:literal> <op:operator pos:line="565" pos:column="46">|</op:operator> <op:operator pos:line="565" pos:column="48">(</op:operator><op:operator pos:line="565" pos:column="49">(</op:operator><name pos:line="565" pos:column="50">m_nCur16</name> <op:operator pos:line="565" pos:column="59">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="565" pos:column="62">6</lit:literal><op:operator pos:line="565" pos:column="63">)</op:operator> <op:operator pos:line="565" pos:column="65">&amp;</op:operator> <lit:literal type="number" pos:line="565" pos:column="67">0x3F</lit:literal><op:operator pos:line="565" pos:column="71">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="566" pos:column="13">m_eState</name> <op:operator pos:line="566" pos:column="22">=</op:operator> <name pos:line="566" pos:column="24">e3Bytes3</name></expr>;</expr_stmt>
            <break pos:line="567" pos:column="13">break;</break>
    </case>}</block></switch>
}</block></function>


</unit>
