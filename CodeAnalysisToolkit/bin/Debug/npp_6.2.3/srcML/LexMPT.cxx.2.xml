<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexMPT.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexMPT.cxx
 ** Lexer for MPT specific files. Based on LexOthers.cxx
 ** LOT = the text log file created by the MPT application while running a test program
 ** Other MPT specific files to be added later.
 **/</comment>
<comment type="line" pos:line="7" pos:column="1">// Copyright 2003 by Marius Gheorghe &lt;mgheorghe@cabletest.com&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="33" pos:column="1">static</specifier> <name pos:line="33" pos:column="8">int</name></type> <name pos:line="33" pos:column="12">GetLotLineState</name><parameter_list pos:line="33" pos:column="27">(<param><decl><type><name><name pos:line="33" pos:column="28">std</name><op:operator pos:line="33" pos:column="31">::</op:operator><name pos:line="33" pos:column="33">string</name></name> <type:modifier pos:line="33" pos:column="40">&amp;</type:modifier></type><name pos:line="33" pos:column="41">line</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="47">{
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name><name pos:line="34" pos:column="13">line</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">length</name></name><argument_list pos:line="34" pos:column="24">()</argument_list></call></expr>)</condition><then pos:line="34" pos:column="27"> <block pos:line="34" pos:column="28">{
		<comment type="line" pos:line="35" pos:column="17">// Most of the time the first non-blank character in line determines that line's type</comment>
		<comment type="line" pos:line="36" pos:column="17">// Now finds the first non-blank character</comment>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">unsigned</name></type> <name pos:line="37" pos:column="26">i</name></decl>;</decl_stmt> <comment type="line" pos:line="37" pos:column="29">// Declares counter here to make it persistent after the for loop</comment>
		<for pos:line="38" pos:column="17">for (<init><expr><name pos:line="38" pos:column="22">i</name> <op:operator pos:line="38" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="38" pos:column="26">0</lit:literal></expr>;</init> <condition><expr><name pos:line="38" pos:column="29">i</name> <op:operator pos:line="38" pos:column="31">&lt;</op:operator> <call><name><name pos:line="38" pos:column="33">line</name><op:operator pos:line="38" pos:column="37">.</op:operator><name pos:line="38" pos:column="38">length</name></name><argument_list pos:line="38" pos:column="44">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="38" pos:column="48">++</op:operator><name pos:line="38" pos:column="50">i</name></expr></incr>) <block pos:line="38" pos:column="53">{
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><op:operator pos:line="39" pos:column="29">!</op:operator><op:operator pos:line="39" pos:column="30">(</op:operator><call><name pos:line="39" pos:column="31">isascii</name><argument_list pos:line="39" pos:column="38">(<argument><expr><name><name pos:line="39" pos:column="39">line</name><index pos:line="39" pos:column="43">[<expr><name pos:line="39" pos:column="44">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="39" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="39" pos:column="51">isspace</name><argument_list pos:line="39" pos:column="58">(<argument><expr><name><name pos:line="39" pos:column="59">line</name><index pos:line="39" pos:column="63">[<expr><name pos:line="39" pos:column="64">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="67">)</op:operator></expr>)</condition><then pos:line="39" pos:column="69">
				<break pos:line="40" pos:column="33">break;</break></then></if>
		}</block></for>

		<comment type="line" pos:line="43" pos:column="17">// Checks if it was a blank line</comment>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">i</name> <op:operator pos:line="44" pos:column="23">==</op:operator> <call><name><name pos:line="44" pos:column="26">line</name><op:operator pos:line="44" pos:column="30">.</op:operator><name pos:line="44" pos:column="31">length</name></name><argument_list pos:line="44" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="44" pos:column="40">
			<return pos:line="45" pos:column="25">return <expr><name pos:line="45" pos:column="32">SCE_LOT_DEFAULT</name></expr>;</return></then></if>

		<switch pos:line="47" pos:column="17">switch <condition pos:line="47" pos:column="24">(<expr><name><name pos:line="47" pos:column="25">line</name><index pos:line="47" pos:column="29">[<expr><name pos:line="47" pos:column="30">i</name></expr>]</index></name></expr>)</condition> <block pos:line="47" pos:column="34">{
		<case pos:line="48" pos:column="17">case <expr><lit:literal type="char" pos:line="48" pos:column="22">'*'</lit:literal></expr>: <comment type="line" pos:line="48" pos:column="27">// Fail measurement</comment>
			<return pos:line="49" pos:column="25">return <expr><name pos:line="49" pos:column="32">SCE_LOT_FAIL</name></expr>;</return>

		</case><case pos:line="51" pos:column="17">case <expr><lit:literal type="char" pos:line="51" pos:column="22">'+'</lit:literal></expr>: <comment type="line" pos:line="51" pos:column="27">// Header</comment>
		</case><case pos:line="52" pos:column="17">case <expr><lit:literal type="char" pos:line="52" pos:column="22">'|'</lit:literal></expr>: <comment type="line" pos:line="52" pos:column="27">// Header</comment>
			<return pos:line="53" pos:column="25">return <expr><name pos:line="53" pos:column="32">SCE_LOT_HEADER</name></expr>;</return>

		</case><case pos:line="55" pos:column="17">case <expr><lit:literal type="char" pos:line="55" pos:column="22">':'</lit:literal></expr>: <comment type="line" pos:line="55" pos:column="27">// Set test limits</comment>
			<return pos:line="56" pos:column="25">return <expr><name pos:line="56" pos:column="32">SCE_LOT_SET</name></expr>;</return>

		</case><case pos:line="58" pos:column="17">case <expr><lit:literal type="char" pos:line="58" pos:column="22">'-'</lit:literal></expr>: <comment type="line" pos:line="58" pos:column="27">// Section break</comment>
			<return pos:line="59" pos:column="25">return <expr><name pos:line="59" pos:column="32">SCE_LOT_BREAK</name></expr>;</return>

		</case><default pos:line="61" pos:column="17">default:  <comment type="line" pos:line="61" pos:column="27">// Any other line</comment>
			<comment type="line" pos:line="62" pos:column="25">// Checks for message at the end of lot file</comment>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><call><name><name pos:line="63" pos:column="29">line</name><op:operator pos:line="63" pos:column="33">.</op:operator><name pos:line="63" pos:column="34">find</name></name><argument_list pos:line="63" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="39">"PASSED"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="63" pos:column="49">!=</op:operator> <name><name pos:line="63" pos:column="52">std</name><op:operator pos:line="63" pos:column="55">::</op:operator><name pos:line="63" pos:column="57">string</name><op:operator pos:line="63" pos:column="63">::</op:operator><name pos:line="63" pos:column="65">npos</name></name></expr>)</condition><then pos:line="63" pos:column="70"> <block pos:line="63" pos:column="71">{
				<return pos:line="64" pos:column="33">return <expr><name pos:line="64" pos:column="40">SCE_LOT_PASS</name></expr>;</return>
			}</block></then>
			<else pos:line="66" pos:column="25">else <if pos:line="66" pos:column="30">if <condition pos:line="66" pos:column="33">(<expr><call><name><name pos:line="66" pos:column="34">line</name><op:operator pos:line="66" pos:column="38">.</op:operator><name pos:line="66" pos:column="39">find</name></name><argument_list pos:line="66" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="44">"FAILED"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="66" pos:column="54">!=</op:operator> <name><name pos:line="66" pos:column="57">std</name><op:operator pos:line="66" pos:column="60">::</op:operator><name pos:line="66" pos:column="62">string</name><op:operator pos:line="66" pos:column="68">::</op:operator><name pos:line="66" pos:column="70">npos</name></name></expr>)</condition><then pos:line="66" pos:column="75"> <block pos:line="66" pos:column="76">{
				<return pos:line="67" pos:column="33">return <expr><name pos:line="67" pos:column="40">SCE_LOT_FAIL</name></expr>;</return>
			}</block></then>
			<else pos:line="69" pos:column="25">else <if pos:line="69" pos:column="30">if <condition pos:line="69" pos:column="33">(<expr><call><name><name pos:line="69" pos:column="34">line</name><op:operator pos:line="69" pos:column="38">.</op:operator><name pos:line="69" pos:column="39">find</name></name><argument_list pos:line="69" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="44">"ABORTED"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="69" pos:column="55">!=</op:operator> <name><name pos:line="69" pos:column="58">std</name><op:operator pos:line="69" pos:column="61">::</op:operator><name pos:line="69" pos:column="63">string</name><op:operator pos:line="69" pos:column="69">::</op:operator><name pos:line="69" pos:column="71">npos</name></name></expr>)</condition><then pos:line="69" pos:column="76"> <block pos:line="69" pos:column="77">{
				<return pos:line="70" pos:column="33">return <expr><name pos:line="70" pos:column="40">SCE_LOT_ABORT</name></expr>;</return>
			}</block></then>
			<else pos:line="72" pos:column="25">else <block pos:line="72" pos:column="30">{
				<return pos:line="73" pos:column="33">return <expr><name pos:line="73" pos:column="40">i</name> <op:operator pos:line="73" pos:column="42">?</op:operator> <name pos:line="73" pos:column="44">SCE_LOT_PASS</name> <op:operator pos:line="73" pos:column="57">:</op:operator> <name pos:line="73" pos:column="59">SCE_LOT_DEFAULT</name></expr>;</return>
			}</block></else></if></else></if></else></if>
		</default>}</block></switch>
	}</block></then>
	<else pos:line="77" pos:column="9">else <block pos:line="77" pos:column="14">{
		<return pos:line="78" pos:column="17">return <expr><name pos:line="78" pos:column="24">SCE_LOT_DEFAULT</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="82" pos:column="1">static</specifier> <name pos:line="82" pos:column="8">void</name></type> <name pos:line="82" pos:column="13">ColourizeLotDoc</name><parameter_list pos:line="82" pos:column="28">(<param><decl><type><name pos:line="82" pos:column="29">unsigned</name> <name pos:line="82" pos:column="38">int</name></type> <name pos:line="82" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="52">int</name></type> <name pos:line="82" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="64">int</name></type></decl></param>, <param><decl><type><name><name pos:line="82" pos:column="69">WordList</name> <type:modifier pos:line="82" pos:column="78">*</type:modifier><index pos:line="82" pos:column="79">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="82" pos:column="83">Accessor</name> <type:modifier pos:line="82" pos:column="92">&amp;</type:modifier></type><name pos:line="82" pos:column="93">styler</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="101">{
	<expr_stmt><expr><call><name><name pos:line="83" pos:column="9">styler</name><op:operator pos:line="83" pos:column="15">.</op:operator><name pos:line="83" pos:column="16">StartAt</name></name><argument_list pos:line="83" pos:column="23">(<argument><expr><name pos:line="83" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="84" pos:column="9">styler</name><op:operator pos:line="84" pos:column="15">.</op:operator><name pos:line="84" pos:column="16">StartSegment</name></name><argument_list pos:line="84" pos:column="28">(<argument><expr><name pos:line="84" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="85" pos:column="9">bool</name></type> <name pos:line="85" pos:column="14">atLineStart</name> <init pos:line="85" pos:column="26">= <expr><lit:literal type="boolean" pos:line="85" pos:column="28">true</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="85" pos:column="33">// Arms the 'at line start' flag</comment>
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">char</name></type> <name pos:line="86" pos:column="14">chNext</name> <init pos:line="86" pos:column="21">= <expr><call><name><name pos:line="86" pos:column="23">styler</name><op:operator pos:line="86" pos:column="29">.</op:operator><name pos:line="86" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="86" pos:column="43">(<argument><expr><name pos:line="86" pos:column="44">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="87" pos:column="9">std</name><op:operator pos:line="87" pos:column="12">::</op:operator><name pos:line="87" pos:column="14">string</name></name></type> <name pos:line="87" pos:column="21">line</name><argument_list pos:line="87" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="26">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="88" pos:column="9">line</name><op:operator pos:line="88" pos:column="13">.</op:operator><name pos:line="88" pos:column="14">reserve</name></name><argument_list pos:line="88" pos:column="21">(<argument><expr><lit:literal type="number" pos:line="88" pos:column="22">256</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="88" pos:column="33">// Lot lines are less than 256 chars long most of the time. This should avoid reallocations</comment>

	<comment type="line" pos:line="90" pos:column="9">// Styles LOT document</comment>
	<decl_stmt><decl><type><name pos:line="91" pos:column="9">unsigned</name> <name pos:line="91" pos:column="18">int</name></type> <name pos:line="91" pos:column="22">i</name></decl>;</decl_stmt>			<comment type="line" pos:line="91" pos:column="41">// Declared here because it's used after the for loop</comment>
	<for pos:line="92" pos:column="9">for (<init><expr><name pos:line="92" pos:column="14">i</name> <op:operator pos:line="92" pos:column="16">=</op:operator> <name pos:line="92" pos:column="18">startPos</name></expr>;</init> <condition><expr><name pos:line="92" pos:column="28">i</name> <op:operator pos:line="92" pos:column="30">&lt;</op:operator> <name pos:line="92" pos:column="32">startPos</name> <op:operator pos:line="92" pos:column="41">+</op:operator> <name pos:line="92" pos:column="43">length</name></expr>;</condition> <incr><expr><op:operator pos:line="92" pos:column="51">++</op:operator><name pos:line="92" pos:column="53">i</name></expr></incr>) <block pos:line="92" pos:column="56">{
		<decl_stmt><decl><type><name pos:line="93" pos:column="17">char</name></type> <name pos:line="93" pos:column="22">ch</name> <init pos:line="93" pos:column="25">= <expr><name pos:line="93" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">chNext</name> <op:operator pos:line="94" pos:column="24">=</op:operator> <call><name><name pos:line="94" pos:column="26">styler</name><op:operator pos:line="94" pos:column="32">.</op:operator><name pos:line="94" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="94" pos:column="46">(<argument><expr><name pos:line="94" pos:column="47">i</name> <op:operator pos:line="94" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="94" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="95" pos:column="17">line</name> <op:operator pos:line="95" pos:column="22">+=</op:operator> <name pos:line="95" pos:column="25">ch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="96" pos:column="17">atLineStart</name> <op:operator pos:line="96" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="96" pos:column="31">false</lit:literal></expr>;</expr_stmt>

		<comment type="line" pos:line="98" pos:column="17">// LOT files are only used on the Win32 platform, thus EOL == CR+LF</comment>
		<comment type="line" pos:line="99" pos:column="17">// Searches for the end of line</comment>
		<if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><name pos:line="100" pos:column="21">ch</name> <op:operator pos:line="100" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="100" pos:column="27">'\r'</lit:literal> <op:operator pos:line="100" pos:column="32">&amp;&amp;</op:operator> <name pos:line="100" pos:column="35">chNext</name> <op:operator pos:line="100" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="100" pos:column="45">'\n'</lit:literal></expr>)</condition><then pos:line="100" pos:column="50"> <block pos:line="100" pos:column="51">{
			<expr_stmt><expr><name pos:line="101" pos:column="25">line</name> <op:operator pos:line="101" pos:column="30">+=</op:operator> <name pos:line="101" pos:column="33">chNext</name></expr>;</expr_stmt> <comment type="line" pos:line="101" pos:column="41">// Gets the '\n'</comment>
			<expr_stmt><expr><op:operator pos:line="102" pos:column="25">++</op:operator><name pos:line="102" pos:column="27">i</name></expr>;</expr_stmt> <comment type="line" pos:line="102" pos:column="30">// Advances past the '\n'</comment>
			<expr_stmt><expr><name pos:line="103" pos:column="25">chNext</name> <op:operator pos:line="103" pos:column="32">=</op:operator> <call><name><name pos:line="103" pos:column="34">styler</name><op:operator pos:line="103" pos:column="40">.</op:operator><name pos:line="103" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="103" pos:column="54">(<argument><expr><name pos:line="103" pos:column="55">i</name> <op:operator pos:line="103" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="103" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="103" pos:column="63">// Gets character of next line</comment>
			<expr_stmt><expr><call><name><name pos:line="104" pos:column="25">styler</name><op:operator pos:line="104" pos:column="31">.</op:operator><name pos:line="104" pos:column="32">ColourTo</name></name><argument_list pos:line="104" pos:column="40">(<argument><expr><name pos:line="104" pos:column="41">i</name></expr></argument>, <argument><expr><call><name pos:line="104" pos:column="44">GetLotLineState</name><argument_list pos:line="104" pos:column="59">(<argument><expr><name pos:line="104" pos:column="60">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="105" pos:column="25">line</name> <op:operator pos:line="105" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="105" pos:column="32">""</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="106" pos:column="25">atLineStart</name> <op:operator pos:line="106" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="106" pos:column="39">true</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="106" pos:column="45">// Arms flag for next line</comment>
		}</block></then></if>
	}</block></for>

	<comment type="line" pos:line="110" pos:column="9">// Last line may not have a line ending</comment>
	<if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><op:operator pos:line="111" pos:column="13">!</op:operator><name pos:line="111" pos:column="14">atLineStart</name></expr>)</condition><then pos:line="111" pos:column="26"> <block pos:line="111" pos:column="27">{
		<expr_stmt><expr><call><name><name pos:line="112" pos:column="17">styler</name><op:operator pos:line="112" pos:column="23">.</op:operator><name pos:line="112" pos:column="24">ColourTo</name></name><argument_list pos:line="112" pos:column="32">(<argument><expr><name pos:line="112" pos:column="33">i</name> <op:operator pos:line="112" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="112" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><call><name pos:line="112" pos:column="40">GetLotLineState</name><argument_list pos:line="112" pos:column="55">(<argument><expr><name pos:line="112" pos:column="56">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<comment type="line" pos:line="116" pos:column="1">// Folds an MPT LOT file: the blocks that can be folded are:</comment>
<comment type="line" pos:line="117" pos:column="1">// sections (headed by a set line)</comment>
<comment type="line" pos:line="118" pos:column="1">// passes (contiguous pass results within a section)</comment>
<comment type="line" pos:line="119" pos:column="1">// fails (contiguous fail results within a section)</comment>
<function><type><specifier pos:line="120" pos:column="1">static</specifier> <name pos:line="120" pos:column="8">void</name></type> <name pos:line="120" pos:column="13">FoldLotDoc</name><parameter_list pos:line="120" pos:column="23">(<param><decl><type><name pos:line="120" pos:column="24">unsigned</name> <name pos:line="120" pos:column="33">int</name></type> <name pos:line="120" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="47">int</name></type> <name pos:line="120" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="59">int</name></type></decl></param>, <param><decl><type><name><name pos:line="120" pos:column="64">WordList</name> <type:modifier pos:line="120" pos:column="73">*</type:modifier><index pos:line="120" pos:column="74">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="120" pos:column="78">Accessor</name> <type:modifier pos:line="120" pos:column="87">&amp;</type:modifier></type><name pos:line="120" pos:column="88">styler</name></decl></param>)</parameter_list> <block pos:line="120" pos:column="96">{
	<decl_stmt><decl><type><name pos:line="121" pos:column="9">bool</name></type> <name pos:line="121" pos:column="14">foldCompact</name> <init pos:line="121" pos:column="26">= <expr><call><name><name pos:line="121" pos:column="28">styler</name><op:operator pos:line="121" pos:column="34">.</op:operator><name pos:line="121" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="121" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="121" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="121" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="122" pos:column="9">unsigned</name> <name pos:line="122" pos:column="18">int</name></type> <name pos:line="122" pos:column="22">endPos</name> <init pos:line="122" pos:column="29">= <expr><name pos:line="122" pos:column="31">startPos</name> <op:operator pos:line="122" pos:column="40">+</op:operator> <name pos:line="122" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="123" pos:column="9">int</name></type> <name pos:line="123" pos:column="13">visibleChars</name> <init pos:line="123" pos:column="26">= <expr><lit:literal type="number" pos:line="123" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="124" pos:column="9">int</name></type> <name pos:line="124" pos:column="13">lineCurrent</name> <init pos:line="124" pos:column="25">= <expr><call><name><name pos:line="124" pos:column="27">styler</name><op:operator pos:line="124" pos:column="33">.</op:operator><name pos:line="124" pos:column="34">GetLine</name></name><argument_list pos:line="124" pos:column="41">(<argument><expr><name pos:line="124" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="126" pos:column="9">char</name></type> <name pos:line="126" pos:column="14">chNext</name> <init pos:line="126" pos:column="21">= <expr><call><name><name pos:line="126" pos:column="23">styler</name><op:operator pos:line="126" pos:column="29">.</op:operator><name pos:line="126" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="126" pos:column="43">(<argument><expr><name pos:line="126" pos:column="44">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="127" pos:column="9">int</name></type> <name pos:line="127" pos:column="13">style</name> <init pos:line="127" pos:column="19">= <expr><name pos:line="127" pos:column="21">SCE_LOT_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="128" pos:column="9">int</name></type> <name pos:line="128" pos:column="13">styleNext</name> <init pos:line="128" pos:column="23">= <expr><call><name><name pos:line="128" pos:column="25">styler</name><op:operator pos:line="128" pos:column="31">.</op:operator><name pos:line="128" pos:column="32">StyleAt</name></name><argument_list pos:line="128" pos:column="39">(<argument><expr><name pos:line="128" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="129" pos:column="9">int</name></type> <name pos:line="129" pos:column="13">lev</name> <init pos:line="129" pos:column="17">= <expr><name pos:line="129" pos:column="19">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="131" pos:column="9">// Gets style of previous line if not at the beginning of the document</comment>
	<if pos:line="132" pos:column="9">if <condition pos:line="132" pos:column="12">(<expr><name pos:line="132" pos:column="13">startPos</name> <op:operator pos:line="132" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="132" pos:column="24">1</lit:literal></expr>)</condition><then pos:line="132" pos:column="26">
		<expr_stmt><expr><name pos:line="133" pos:column="17">style</name> <op:operator pos:line="133" pos:column="23">=</op:operator> <call><name><name pos:line="133" pos:column="25">styler</name><op:operator pos:line="133" pos:column="31">.</op:operator><name pos:line="133" pos:column="32">StyleAt</name></name><argument_list pos:line="133" pos:column="39">(<argument><expr><name pos:line="133" pos:column="40">startPos</name> <op:operator pos:line="133" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="133" pos:column="51">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<for pos:line="135" pos:column="9">for (<init><decl><type><name pos:line="135" pos:column="14">unsigned</name> <name pos:line="135" pos:column="23">int</name></type> <name pos:line="135" pos:column="27">i</name> <init pos:line="135" pos:column="29">= <expr><name pos:line="135" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="135" pos:column="41">i</name> <op:operator pos:line="135" pos:column="43">&lt;</op:operator> <name pos:line="135" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="135" pos:column="53">i</name><op:operator pos:line="135" pos:column="54">++</op:operator></expr></incr>) <block pos:line="135" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="136" pos:column="17">char</name></type> <name pos:line="136" pos:column="22">ch</name> <init pos:line="136" pos:column="25">= <expr><name pos:line="136" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="137" pos:column="17">chNext</name> <op:operator pos:line="137" pos:column="24">=</op:operator> <call><name><name pos:line="137" pos:column="26">styler</name><op:operator pos:line="137" pos:column="32">.</op:operator><name pos:line="137" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="137" pos:column="46">(<argument><expr><name pos:line="137" pos:column="47">i</name> <op:operator pos:line="137" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="137" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="139" pos:column="17">if <condition pos:line="139" pos:column="20">(<expr><name pos:line="139" pos:column="21">ch</name> <op:operator pos:line="139" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="27">'\r'</lit:literal> <op:operator pos:line="139" pos:column="32">&amp;&amp;</op:operator> <name pos:line="139" pos:column="35">chNext</name> <op:operator pos:line="139" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="45">'\n'</lit:literal></expr>)</condition><then pos:line="139" pos:column="50"> <block pos:line="139" pos:column="51">{
			<comment type="line" pos:line="140" pos:column="25">// TO DO:</comment>
			<comment type="line" pos:line="141" pos:column="25">// Should really get the state of the previous line from the styler</comment>
			<decl_stmt><decl><type><name pos:line="142" pos:column="25">int</name></type> <name pos:line="142" pos:column="29">stylePrev</name> <init pos:line="142" pos:column="39">= <expr><name pos:line="142" pos:column="41">style</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="143" pos:column="25">style</name> <op:operator pos:line="143" pos:column="31">=</op:operator> <name pos:line="143" pos:column="33">styleNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="144" pos:column="25">styleNext</name> <op:operator pos:line="144" pos:column="35">=</op:operator> <call><name><name pos:line="144" pos:column="37">styler</name><op:operator pos:line="144" pos:column="43">.</op:operator><name pos:line="144" pos:column="44">StyleAt</name></name><argument_list pos:line="144" pos:column="51">(<argument><expr><name pos:line="144" pos:column="52">i</name> <op:operator pos:line="144" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="144" pos:column="56">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<switch pos:line="146" pos:column="25">switch <condition pos:line="146" pos:column="32">(<expr><name pos:line="146" pos:column="33">style</name></expr>)</condition> <block pos:line="146" pos:column="40">{
<comment type="block" pos:line="147" pos:column="1">/*
			case SCE_LOT_SET:
				lev = SC_FOLDLEVELBASE | SC_FOLDLEVELHEADERFLAG;
				break;
*/</comment>
			<case pos:line="152" pos:column="25">case <expr><name pos:line="152" pos:column="30">SCE_LOT_FAIL</name></expr>:
<comment type="block" pos:line="153" pos:column="1">/*
				if (stylePrev != SCE_LOT_FAIL)
					lev = SC_FOLDLEVELBASE | SC_FOLDLEVELHEADERFLAG;
				else
					lev = SC_FOLDLEVELBASE + 1;
*/</comment>
				<expr_stmt><expr><name pos:line="159" pos:column="33">lev</name> <op:operator pos:line="159" pos:column="37">=</op:operator> <name pos:line="159" pos:column="39">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>
				<break pos:line="160" pos:column="33">break;</break>

			</case><default pos:line="162" pos:column="25">default:
				<if pos:line="163" pos:column="33">if <condition pos:line="163" pos:column="36">(<expr><name pos:line="163" pos:column="37">lineCurrent</name> <op:operator pos:line="163" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="163" pos:column="52">0</lit:literal> <op:operator pos:line="163" pos:column="54">||</op:operator> <name pos:line="163" pos:column="57">stylePrev</name> <op:operator pos:line="163" pos:column="67">==</op:operator> <name pos:line="163" pos:column="70">SCE_LOT_FAIL</name></expr>)</condition><then pos:line="163" pos:column="83">
					<expr_stmt><expr><name pos:line="164" pos:column="41">lev</name> <op:operator pos:line="164" pos:column="45">=</op:operator> <name pos:line="164" pos:column="47">SC_FOLDLEVELBASE</name> <op:operator pos:line="164" pos:column="64">|</op:operator> <name pos:line="164" pos:column="66">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then>
				<else pos:line="165" pos:column="33">else
					<expr_stmt><expr><name pos:line="166" pos:column="41">lev</name> <op:operator pos:line="166" pos:column="45">=</op:operator> <name pos:line="166" pos:column="47">SC_FOLDLEVELBASE</name> <op:operator pos:line="166" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="166" pos:column="66">1</lit:literal></expr>;</expr_stmt></else></if>

				<if pos:line="168" pos:column="33">if <condition pos:line="168" pos:column="36">(<expr><name pos:line="168" pos:column="37">visibleChars</name> <op:operator pos:line="168" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="168" pos:column="53">0</lit:literal> <op:operator pos:line="168" pos:column="55">&amp;&amp;</op:operator> <name pos:line="168" pos:column="58">foldCompact</name></expr>)</condition><then pos:line="168" pos:column="70">
					<expr_stmt><expr><name pos:line="169" pos:column="41">lev</name> <op:operator pos:line="169" pos:column="45">|=</op:operator> <name pos:line="169" pos:column="48">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
				<break pos:line="170" pos:column="33">break;</break>
			</default>}</block></switch>

			<if pos:line="173" pos:column="25">if <condition pos:line="173" pos:column="28">(<expr><name pos:line="173" pos:column="29">lev</name> <op:operator pos:line="173" pos:column="33">!=</op:operator> <call><name><name pos:line="173" pos:column="36">styler</name><op:operator pos:line="173" pos:column="42">.</op:operator><name pos:line="173" pos:column="43">LevelAt</name></name><argument_list pos:line="173" pos:column="50">(<argument><expr><name pos:line="173" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="173" pos:column="64">
				<expr_stmt><expr><call><name><name pos:line="174" pos:column="33">styler</name><op:operator pos:line="174" pos:column="39">.</op:operator><name pos:line="174" pos:column="40">SetLevel</name></name><argument_list pos:line="174" pos:column="48">(<argument><expr><name pos:line="174" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><name pos:line="176" pos:column="25">lineCurrent</name><op:operator pos:line="176" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="177" pos:column="25">visibleChars</name> <op:operator pos:line="177" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="177" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="180" pos:column="17">if <condition pos:line="180" pos:column="20">(<expr><op:operator pos:line="180" pos:column="21">!</op:operator><call><name pos:line="180" pos:column="22">isspacechar</name><argument_list pos:line="180" pos:column="33">(<argument><expr><name pos:line="180" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="180" pos:column="38">
			<expr_stmt><expr><name pos:line="181" pos:column="25">visibleChars</name><op:operator pos:line="181" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="184" pos:column="9">int</name></type> <name pos:line="184" pos:column="13">flagsNext</name> <init pos:line="184" pos:column="23">= <expr><call><name><name pos:line="184" pos:column="25">styler</name><op:operator pos:line="184" pos:column="31">.</op:operator><name pos:line="184" pos:column="32">LevelAt</name></name><argument_list pos:line="184" pos:column="39">(<argument><expr><name pos:line="184" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="184" pos:column="53">&amp;</op:operator> <op:operator pos:line="184" pos:column="55">~</op:operator><name pos:line="184" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="185" pos:column="9">styler</name><op:operator pos:line="185" pos:column="15">.</op:operator><name pos:line="185" pos:column="16">SetLevel</name></name><argument_list pos:line="185" pos:column="24">(<argument><expr><name pos:line="185" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="38">lev</name> <op:operator pos:line="185" pos:column="42">|</op:operator> <name pos:line="185" pos:column="44">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="188" pos:column="1">static</specifier> <specifier pos:line="188" pos:column="8">const</specifier> <name pos:line="188" pos:column="14">char</name> <type:modifier pos:line="188" pos:column="19">*</type:modifier> <specifier pos:line="188" pos:column="21">const</specifier></type> <name><name pos:line="188" pos:column="27">emptyWordListDesc</name><index pos:line="188" pos:column="44">[]</index></name> <init pos:line="188" pos:column="47">= <expr><block pos:line="188" pos:column="49">{
	<expr><lit:literal type="number" pos:line="189" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="192" pos:column="1">LexerModule</name></type> <name pos:line="192" pos:column="13">lmLot</name><argument_list pos:line="192" pos:column="18">(<argument><expr><name pos:line="192" pos:column="19">SCLEX_LOT</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="30">ColourizeLotDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="47">"lot"</lit:literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="54">FoldLotDoc</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="66">emptyWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
