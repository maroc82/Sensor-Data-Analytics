<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\LexerSimple.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexerSimple.cxx
 ** A simple lexer with no state.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexerBase.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerSimple.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="33" pos:column="1">LexerSimple</name><op:operator pos:line="33" pos:column="12">::</op:operator><name pos:line="33" pos:column="14">LexerSimple</name></name><parameter_list pos:line="33" pos:column="25">(<param><decl><type><specifier pos:line="33" pos:column="26">const</specifier> <name pos:line="33" pos:column="32">LexerModule</name> <type:modifier pos:line="33" pos:column="44">*</type:modifier></type><name pos:line="33" pos:column="45">module_</name></decl></param>)</parameter_list> <member_list pos:line="33" pos:column="54">: <call><name pos:line="33" pos:column="56">module</name><argument_list pos:line="33" pos:column="62">(<argument><expr><name pos:line="33" pos:column="63">module_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="33" pos:column="72">{
	<for pos:line="34" pos:column="9">for (<init><decl><type><name pos:line="34" pos:column="14">int</name></type> <name pos:line="34" pos:column="18">wl</name> <init pos:line="34" pos:column="21">= <expr><lit:literal type="number" pos:line="34" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="34" pos:column="26">wl</name> <op:operator pos:line="34" pos:column="29">&lt;</op:operator> <call><name><name pos:line="34" pos:column="31">module</name><op:operator pos:line="34" pos:column="37">-&gt;</op:operator><name pos:line="34" pos:column="39">GetNumWordLists</name></name><argument_list pos:line="34" pos:column="54">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="34" pos:column="58">wl</name><op:operator pos:line="34" pos:column="60">++</op:operator></expr></incr>) <block pos:line="34" pos:column="64">{
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><op:operator pos:line="35" pos:column="21">!</op:operator><call><name><name pos:line="35" pos:column="22">wordLists</name><op:operator pos:line="35" pos:column="31">.</op:operator><name pos:line="35" pos:column="32">empty</name></name><argument_list pos:line="35" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="35" pos:column="40">
			<expr_stmt><expr><name pos:line="36" pos:column="25">wordLists</name> <op:operator pos:line="36" pos:column="35">+=</op:operator> <lit:literal type="string" pos:line="36" pos:column="38">"\n"</lit:literal></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="37" pos:column="17">wordLists</name> <op:operator pos:line="37" pos:column="27">+=</op:operator> <call><name><name pos:line="37" pos:column="30">module</name><op:operator pos:line="37" pos:column="36">-&gt;</op:operator><name pos:line="37" pos:column="38">GetWordListDescription</name></name><argument_list pos:line="37" pos:column="60">(<argument><expr><name pos:line="37" pos:column="61">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></constructor>

<function><type><specifier pos:line="41" pos:column="1">const</specifier> <name pos:line="41" pos:column="7">char</name> <type:modifier pos:line="41" pos:column="12">*</type:modifier> <name pos:line="41" pos:column="14">SCI_METHOD</name></type> <name><name pos:line="41" pos:column="25">LexerSimple</name><op:operator pos:line="41" pos:column="36">::</op:operator><name pos:line="41" pos:column="38">DescribeWordListSets</name></name><parameter_list pos:line="41" pos:column="58">()</parameter_list> <block pos:line="41" pos:column="61">{
	<return pos:line="42" pos:column="9">return <expr><call><name><name pos:line="42" pos:column="16">wordLists</name><op:operator pos:line="42" pos:column="25">.</op:operator><name pos:line="42" pos:column="26">c_str</name></name><argument_list pos:line="42" pos:column="31">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="45" pos:column="1">void</name> <name pos:line="45" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="45" pos:column="17">LexerSimple</name><op:operator pos:line="45" pos:column="28">::</op:operator><name pos:line="45" pos:column="30">Lex</name></name><parameter_list pos:line="45" pos:column="33">(<param><decl><type><name pos:line="45" pos:column="34">unsigned</name> <name pos:line="45" pos:column="43">int</name></type> <name pos:line="45" pos:column="47">startPos</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="57">int</name></type> <name pos:line="45" pos:column="61">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="72">int</name></type> <name pos:line="45" pos:column="76">initStyle</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="87">IDocument</name> <type:modifier pos:line="45" pos:column="97">*</type:modifier></type><name pos:line="45" pos:column="98">pAccess</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="107">{
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">Accessor</name></type> <name pos:line="46" pos:column="18">astyler</name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">pAccess</name></expr></argument>, <argument><expr><op:operator pos:line="46" pos:column="35">&amp;</op:operator><name pos:line="46" pos:column="36">props</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="47" pos:column="9">module</name><op:operator pos:line="47" pos:column="15">-&gt;</op:operator><name pos:line="47" pos:column="17">Lex</name></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name pos:line="47" pos:column="21">startPos</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="31">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="42">initStyle</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="53">keyWordLists</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="67">astyler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="48" pos:column="9">astyler</name><op:operator pos:line="48" pos:column="16">.</op:operator><name pos:line="48" pos:column="17">Flush</name></name><argument_list pos:line="48" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="51" pos:column="1">void</name> <name pos:line="51" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="51" pos:column="17">LexerSimple</name><op:operator pos:line="51" pos:column="28">::</op:operator><name pos:line="51" pos:column="30">Fold</name></name><parameter_list pos:line="51" pos:column="34">(<param><decl><type><name pos:line="51" pos:column="35">unsigned</name> <name pos:line="51" pos:column="44">int</name></type> <name pos:line="51" pos:column="48">startPos</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="58">int</name></type> <name pos:line="51" pos:column="62">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="73">int</name></type> <name pos:line="51" pos:column="77">initStyle</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="88">IDocument</name> <type:modifier pos:line="51" pos:column="98">*</type:modifier></type><name pos:line="51" pos:column="99">pAccess</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="108">{
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name><name pos:line="52" pos:column="13">props</name><op:operator pos:line="52" pos:column="18">.</op:operator><name pos:line="52" pos:column="19">GetInt</name></name><argument_list pos:line="52" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="26">"fold"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="52" pos:column="34"> <block pos:line="52" pos:column="35">{
		<decl_stmt><decl><type><name pos:line="53" pos:column="17">Accessor</name></type> <name pos:line="53" pos:column="26">astyler</name><argument_list pos:line="53" pos:column="33">(<argument><expr><name pos:line="53" pos:column="34">pAccess</name></expr></argument>, <argument><expr><op:operator pos:line="53" pos:column="43">&amp;</op:operator><name pos:line="53" pos:column="44">props</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="54" pos:column="17">module</name><op:operator pos:line="54" pos:column="23">-&gt;</op:operator><name pos:line="54" pos:column="25">Fold</name></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">startPos</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="40">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="51">initStyle</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="62">keyWordLists</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="76">astyler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="55" pos:column="17">astyler</name><op:operator pos:line="55" pos:column="24">.</op:operator><name pos:line="55" pos:column="25">Flush</name></name><argument_list pos:line="55" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
</unit>
