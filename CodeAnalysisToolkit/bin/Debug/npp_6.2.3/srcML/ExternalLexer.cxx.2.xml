<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\ExternalLexer.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file ExternalLexer.cxx
 ** Support external lexers in DLLs.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2001 Simon Steele &lt;ss@pnotepad.org&gt;, portions copyright Neil Hodgson.</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Catalogue.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"ExternalLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name pos:line="30" pos:column="1">LexerManager</name> <type:modifier pos:line="30" pos:column="14">*</type:modifier></type><name><name pos:line="30" pos:column="15">LexerManager</name><op:operator pos:line="30" pos:column="27">::</op:operator><name pos:line="30" pos:column="29">theInstance</name></name> <init pos:line="30" pos:column="41">= <expr><name pos:line="30" pos:column="43">NULL</name></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="32" pos:column="1">//------------------------------------------</comment>
<comment type="line" pos:line="33" pos:column="1">//</comment>
<comment type="line" pos:line="34" pos:column="1">// ExternalLexerModule</comment>
<comment type="line" pos:line="35" pos:column="1">//</comment>
<comment type="line" pos:line="36" pos:column="1">//------------------------------------------</comment>

<function><type><name pos:line="38" pos:column="1">void</name></type> <name><name pos:line="38" pos:column="6">ExternalLexerModule</name><op:operator pos:line="38" pos:column="25">::</op:operator><name pos:line="38" pos:column="27">SetExternal</name></name><parameter_list pos:line="38" pos:column="38">(<param><decl><type><name pos:line="38" pos:column="39">GetLexerFactoryFunction</name></type> <name pos:line="38" pos:column="63">fFactory</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="73">int</name></type> <name pos:line="38" pos:column="77">index</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="84">{
	<expr_stmt><expr><name pos:line="39" pos:column="9">fneFactory</name> <op:operator pos:line="39" pos:column="20">=</op:operator> <name pos:line="39" pos:column="22">fFactory</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="40" pos:column="9">fnFactory</name> <op:operator pos:line="40" pos:column="19">=</op:operator> <call><name pos:line="40" pos:column="21">fFactory</name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="43" pos:column="1">//------------------------------------------</comment>
<comment type="line" pos:line="44" pos:column="1">//</comment>
<comment type="line" pos:line="45" pos:column="1">// LexerLibrary</comment>
<comment type="line" pos:line="46" pos:column="1">//</comment>
<comment type="line" pos:line="47" pos:column="1">//------------------------------------------</comment>

<constructor><name><name pos:line="49" pos:column="1">LexerLibrary</name><op:operator pos:line="49" pos:column="13">::</op:operator><name pos:line="49" pos:column="15">LexerLibrary</name></name><parameter_list pos:line="49" pos:column="27">(<param><decl><type><specifier pos:line="49" pos:column="28">const</specifier> <name pos:line="49" pos:column="34">char</name> <type:modifier pos:line="49" pos:column="39">*</type:modifier></type><name pos:line="49" pos:column="40">ModuleName</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="52">{
	<comment type="line" pos:line="50" pos:column="9">// Initialise some members...</comment>
	<expr_stmt><expr><name pos:line="51" pos:column="9">first</name> <op:operator pos:line="51" pos:column="15">=</op:operator> <name pos:line="51" pos:column="17">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="52" pos:column="9">last</name> <op:operator pos:line="52" pos:column="14">=</op:operator> <name pos:line="52" pos:column="16">NULL</name></expr>;</expr_stmt>

	<comment type="line" pos:line="54" pos:column="9">// Load the DLL</comment>
	<expr_stmt><expr><name pos:line="55" pos:column="9">lib</name> <op:operator pos:line="55" pos:column="13">=</op:operator> <call><name><name pos:line="55" pos:column="15">DynamicLibrary</name><op:operator pos:line="55" pos:column="29">::</op:operator><name pos:line="55" pos:column="31">Load</name></name><argument_list pos:line="55" pos:column="35">(<argument><expr><name pos:line="55" pos:column="36">ModuleName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><call><name><name pos:line="56" pos:column="13">lib</name><op:operator pos:line="56" pos:column="16">-&gt;</op:operator><name pos:line="56" pos:column="18">IsValid</name></name><argument_list pos:line="56" pos:column="25">()</argument_list></call></expr>)</condition><then pos:line="56" pos:column="28"> <block pos:line="56" pos:column="29">{
		<expr_stmt><expr><name pos:line="57" pos:column="17">m_sModuleName</name> <op:operator pos:line="57" pos:column="31">=</op:operator> <name pos:line="57" pos:column="33">ModuleName</name></expr>;</expr_stmt>
		<comment type="line" pos:line="58" pos:column="17">//Cannot use reinterpret_cast because: ANSI C++ forbids casting between pointers to functions and objects</comment>
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">GetLexerCountFn</name></type> <name pos:line="59" pos:column="33">GetLexerCount</name> <init pos:line="59" pos:column="47">= <expr><op:operator pos:line="59" pos:column="49">(</op:operator><name pos:line="59" pos:column="50">GetLexerCountFn</name><op:operator pos:line="59" pos:column="65">)</op:operator><op:operator pos:line="59" pos:column="66">(</op:operator><name pos:line="59" pos:column="67">sptr_t</name><op:operator pos:line="59" pos:column="73">)</op:operator><call><name><name pos:line="59" pos:column="74">lib</name><op:operator pos:line="59" pos:column="77">-&gt;</op:operator><name pos:line="59" pos:column="79">FindFunction</name></name><argument_list pos:line="59" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="92">"GetLexerCount"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">GetLexerCount</name></expr>)</condition><then pos:line="61" pos:column="35"> <block pos:line="61" pos:column="36">{
			<decl_stmt><decl><type><name pos:line="62" pos:column="25">ExternalLexerModule</name> <type:modifier pos:line="62" pos:column="45">*</type:modifier></type><name pos:line="62" pos:column="46">lex</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="63" pos:column="25">LexerMinder</name> <type:modifier pos:line="63" pos:column="37">*</type:modifier></type><name pos:line="63" pos:column="38">lm</name></decl>;</decl_stmt>

			<comment type="line" pos:line="65" pos:column="25">// Find functions in the DLL</comment>
			<decl_stmt><decl><type><name pos:line="66" pos:column="25">GetLexerNameFn</name></type> <name pos:line="66" pos:column="40">GetLexerName</name> <init pos:line="66" pos:column="53">= <expr><op:operator pos:line="66" pos:column="55">(</op:operator><name pos:line="66" pos:column="56">GetLexerNameFn</name><op:operator pos:line="66" pos:column="70">)</op:operator><op:operator pos:line="66" pos:column="71">(</op:operator><name pos:line="66" pos:column="72">sptr_t</name><op:operator pos:line="66" pos:column="78">)</op:operator><call><name><name pos:line="66" pos:column="79">lib</name><op:operator pos:line="66" pos:column="82">-&gt;</op:operator><name pos:line="66" pos:column="84">FindFunction</name></name><argument_list pos:line="66" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="97">"GetLexerName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="67" pos:column="25">GetLexerFactoryFunction</name></type> <name pos:line="67" pos:column="49">fnFactory</name> <init pos:line="67" pos:column="59">= <expr><op:operator pos:line="67" pos:column="61">(</op:operator><name pos:line="67" pos:column="62">GetLexerFactoryFunction</name><op:operator pos:line="67" pos:column="85">)</op:operator><op:operator pos:line="67" pos:column="86">(</op:operator><name pos:line="67" pos:column="87">sptr_t</name><op:operator pos:line="67" pos:column="93">)</op:operator><call><name><name pos:line="67" pos:column="94">lib</name><op:operator pos:line="67" pos:column="97">-&gt;</op:operator><name pos:line="67" pos:column="99">FindFunction</name></name><argument_list pos:line="67" pos:column="111">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="112">"GetLexerFactory"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="69" pos:column="25">// Assign a buffer for the lexer name.</comment>
			<decl_stmt><decl><type><name pos:line="70" pos:column="25">char</name></type> <name><name pos:line="70" pos:column="30">lexname</name><index pos:line="70" pos:column="37">[<expr><lit:literal type="number" pos:line="70" pos:column="38">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="71" pos:column="25">strcpy</name><argument_list pos:line="71" pos:column="31">(<argument><expr><name pos:line="71" pos:column="32">lexname</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="71" pos:column="41">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="73" pos:column="25">int</name></type> <name pos:line="73" pos:column="29">nl</name> <init pos:line="73" pos:column="32">= <expr><call><name pos:line="73" pos:column="34">GetLexerCount</name><argument_list pos:line="73" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<for pos:line="75" pos:column="25">for (<init><decl><type><name pos:line="75" pos:column="30">int</name></type> <name pos:line="75" pos:column="34">i</name> <init pos:line="75" pos:column="36">= <expr><lit:literal type="number" pos:line="75" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="75" pos:column="41">i</name> <op:operator pos:line="75" pos:column="43">&lt;</op:operator> <name pos:line="75" pos:column="45">nl</name></expr>;</condition> <incr><expr><name pos:line="75" pos:column="49">i</name><op:operator pos:line="75" pos:column="50">++</op:operator></expr></incr>) <block pos:line="75" pos:column="54">{
				<expr_stmt><expr><call><name pos:line="76" pos:column="33">GetLexerName</name><argument_list pos:line="76" pos:column="45">(<argument><expr><name pos:line="76" pos:column="46">i</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="49">lexname</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="76" pos:column="58">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="77" pos:column="33">lex</name> <op:operator pos:line="77" pos:column="37">=</op:operator> <op:operator pos:line="77" pos:column="39">new</op:operator> <call><name pos:line="77" pos:column="43">ExternalLexerModule</name><argument_list pos:line="77" pos:column="62">(<argument><expr><name pos:line="77" pos:column="63">SCLEX_AUTOMATIC</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="80">NULL</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="86">lexname</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="95">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">Catalogue</name><op:operator pos:line="78" pos:column="42">::</op:operator><name pos:line="78" pos:column="44">AddLexerModule</name></name><argument_list pos:line="78" pos:column="58">(<argument><expr><name pos:line="78" pos:column="59">lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line" pos:line="80" pos:column="33">// Create a LexerMinder so we don't leak the ExternalLexerModule...</comment>
				<expr_stmt><expr><name pos:line="81" pos:column="33">lm</name> <op:operator pos:line="81" pos:column="36">=</op:operator> <op:operator pos:line="81" pos:column="38">new</op:operator> <name pos:line="81" pos:column="42">LexerMinder</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="82" pos:column="33">lm</name><op:operator pos:line="82" pos:column="35">-&gt;</op:operator><name pos:line="82" pos:column="37">self</name></name> <op:operator pos:line="82" pos:column="42">=</op:operator> <name pos:line="82" pos:column="44">lex</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="83" pos:column="33">lm</name><op:operator pos:line="83" pos:column="35">-&gt;</op:operator><name pos:line="83" pos:column="37">next</name></name> <op:operator pos:line="83" pos:column="42">=</op:operator> <name pos:line="83" pos:column="44">NULL</name></expr>;</expr_stmt>
				<if pos:line="84" pos:column="33">if <condition pos:line="84" pos:column="36">(<expr><name pos:line="84" pos:column="37">first</name> <op:operator pos:line="84" pos:column="43">!=</op:operator> <name pos:line="84" pos:column="46">NULL</name></expr>)</condition><then pos:line="84" pos:column="51"> <block pos:line="84" pos:column="52">{
					<expr_stmt><expr><name><name pos:line="85" pos:column="41">last</name><op:operator pos:line="85" pos:column="45">-&gt;</op:operator><name pos:line="85" pos:column="47">next</name></name> <op:operator pos:line="85" pos:column="52">=</op:operator> <name pos:line="85" pos:column="54">lm</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="86" pos:column="41">last</name> <op:operator pos:line="86" pos:column="46">=</op:operator> <name pos:line="86" pos:column="48">lm</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="87" pos:column="35">else <block pos:line="87" pos:column="40">{
					<expr_stmt><expr><name pos:line="88" pos:column="41">first</name> <op:operator pos:line="88" pos:column="47">=</op:operator> <name pos:line="88" pos:column="49">lm</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="89" pos:column="41">last</name> <op:operator pos:line="89" pos:column="46">=</op:operator> <name pos:line="89" pos:column="48">lm</name></expr>;</expr_stmt>
				}</block></else></if>

				<comment type="line" pos:line="92" pos:column="33">// The external lexer needs to know how to call into its DLL to</comment>
				<comment type="line" pos:line="93" pos:column="33">// do its lexing and folding, we tell it here.</comment>
				<expr_stmt><expr><call><name><name pos:line="94" pos:column="33">lex</name><op:operator pos:line="94" pos:column="36">-&gt;</op:operator><name pos:line="94" pos:column="38">SetExternal</name></name><argument_list pos:line="94" pos:column="49">(<argument><expr><name pos:line="94" pos:column="50">fnFactory</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="61">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="98" pos:column="9">next</name> <op:operator pos:line="98" pos:column="14">=</op:operator> <name pos:line="98" pos:column="16">NULL</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="101" pos:column="1">LexerLibrary</name><op:operator pos:line="101" pos:column="13">::</op:operator>~<name pos:line="101" pos:column="16">LexerLibrary</name></name><parameter_list pos:line="101" pos:column="28">()</parameter_list> <block pos:line="101" pos:column="31">{
	<expr_stmt><expr><call><name pos:line="102" pos:column="9">Release</name><argument_list pos:line="102" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="103" pos:column="9">delete</op:operator> <name pos:line="103" pos:column="16">lib</name></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="106" pos:column="1">void</name></type> <name><name pos:line="106" pos:column="6">LexerLibrary</name><op:operator pos:line="106" pos:column="18">::</op:operator><name pos:line="106" pos:column="20">Release</name></name><parameter_list pos:line="106" pos:column="27">()</parameter_list> <block pos:line="106" pos:column="30">{
	<decl_stmt><decl><type><name pos:line="107" pos:column="9">LexerMinder</name> <type:modifier pos:line="107" pos:column="21">*</type:modifier></type><name pos:line="107" pos:column="22">lm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="108" pos:column="9">LexerMinder</name> <type:modifier pos:line="108" pos:column="21">*</type:modifier></type><name pos:line="108" pos:column="22">lmNext</name></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="109" pos:column="9">lm</name> <op:operator pos:line="109" pos:column="12">=</op:operator> <name pos:line="109" pos:column="14">first</name></expr>;</expr_stmt>
	<while pos:line="110" pos:column="9">while <condition pos:line="110" pos:column="15">(<expr><name pos:line="110" pos:column="16">NULL</name> <op:operator pos:line="110" pos:column="21">!=</op:operator> <name pos:line="110" pos:column="24">lm</name></expr>)</condition> <block pos:line="110" pos:column="28">{
		<expr_stmt><expr><name pos:line="111" pos:column="17">lmNext</name> <op:operator pos:line="111" pos:column="24">=</op:operator> <name><name pos:line="111" pos:column="26">lm</name><op:operator pos:line="111" pos:column="28">-&gt;</op:operator><name pos:line="111" pos:column="30">next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="112" pos:column="17">delete</op:operator> <name><name pos:line="112" pos:column="24">lm</name><op:operator pos:line="112" pos:column="26">-&gt;</op:operator><name pos:line="112" pos:column="28">self</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="113" pos:column="17">delete</op:operator> <name pos:line="113" pos:column="24">lm</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="114" pos:column="17">lm</name> <op:operator pos:line="114" pos:column="20">=</op:operator> <name pos:line="114" pos:column="22">lmNext</name></expr>;</expr_stmt>
	}</block></while>

	<expr_stmt><expr><name pos:line="117" pos:column="9">first</name> <op:operator pos:line="117" pos:column="15">=</op:operator> <name pos:line="117" pos:column="17">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="118" pos:column="9">last</name> <op:operator pos:line="118" pos:column="14">=</op:operator> <name pos:line="118" pos:column="16">NULL</name></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="121" pos:column="1">//------------------------------------------</comment>
<comment type="line" pos:line="122" pos:column="1">//</comment>
<comment type="line" pos:line="123" pos:column="1">// LexerManager</comment>
<comment type="line" pos:line="124" pos:column="1">//</comment>
<comment type="line" pos:line="125" pos:column="1">//------------------------------------------</comment>

<comment type="line" format="doxygen" pos:line="127" pos:column="1">/// Return the single LexerManager instance...</comment>
<function><type><name pos:line="128" pos:column="1">LexerManager</name> <type:modifier pos:line="128" pos:column="14">*</type:modifier></type><name><name pos:line="128" pos:column="15">LexerManager</name><op:operator pos:line="128" pos:column="27">::</op:operator><name pos:line="128" pos:column="29">GetInstance</name></name><parameter_list pos:line="128" pos:column="40">()</parameter_list> <block pos:line="128" pos:column="43">{
	<if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><op:operator pos:line="129" pos:column="13">!</op:operator><name pos:line="129" pos:column="14">theInstance</name></expr>)</condition><then pos:line="129" pos:column="26">
		<expr_stmt><expr><name pos:line="130" pos:column="17">theInstance</name> <op:operator pos:line="130" pos:column="29">=</op:operator> <op:operator pos:line="130" pos:column="31">new</op:operator> <name pos:line="130" pos:column="35">LexerManager</name></expr>;</expr_stmt></then></if>
	<return pos:line="131" pos:column="9">return <expr><name pos:line="131" pos:column="16">theInstance</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="134" pos:column="1">/// Delete any LexerManager instance...</comment>
<function><type><name pos:line="135" pos:column="1">void</name></type> <name><name pos:line="135" pos:column="6">LexerManager</name><op:operator pos:line="135" pos:column="18">::</op:operator><name pos:line="135" pos:column="20">DeleteInstance</name></name><parameter_list pos:line="135" pos:column="34">()</parameter_list> <block pos:line="135" pos:column="37">{
	<expr_stmt><expr><op:operator pos:line="136" pos:column="9">delete</op:operator> <name pos:line="136" pos:column="16">theInstance</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="137" pos:column="9">theInstance</name> <op:operator pos:line="137" pos:column="21">=</op:operator> <name pos:line="137" pos:column="23">NULL</name></expr>;</expr_stmt>
}</block></function>

<comment type="line" format="doxygen" pos:line="140" pos:column="1">/// protected constructor - this is a singleton...</comment>
<constructor><name><name pos:line="141" pos:column="1">LexerManager</name><op:operator pos:line="141" pos:column="13">::</op:operator><name pos:line="141" pos:column="15">LexerManager</name></name><parameter_list pos:line="141" pos:column="27">()</parameter_list> <block pos:line="141" pos:column="30">{
	<expr_stmt><expr><name pos:line="142" pos:column="9">first</name> <op:operator pos:line="142" pos:column="15">=</op:operator> <name pos:line="142" pos:column="17">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="143" pos:column="9">last</name> <op:operator pos:line="143" pos:column="14">=</op:operator> <name pos:line="143" pos:column="16">NULL</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="146" pos:column="1">LexerManager</name><op:operator pos:line="146" pos:column="13">::</op:operator>~<name pos:line="146" pos:column="16">LexerManager</name></name><parameter_list pos:line="146" pos:column="28">()</parameter_list> <block pos:line="146" pos:column="31">{
	<expr_stmt><expr><call><name pos:line="147" pos:column="9">Clear</name><argument_list pos:line="147" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="150" pos:column="1">void</name></type> <name><name pos:line="150" pos:column="6">LexerManager</name><op:operator pos:line="150" pos:column="18">::</op:operator><name pos:line="150" pos:column="20">Load</name></name><parameter_list pos:line="150" pos:column="24">(<param><decl><type><specifier pos:line="150" pos:column="25">const</specifier> <name pos:line="150" pos:column="31">char</name> <type:modifier pos:line="150" pos:column="36">*</type:modifier></type><name pos:line="150" pos:column="37">path</name></decl></param>)</parameter_list> <block pos:line="150" pos:column="43">{
	<expr_stmt><expr><call><name pos:line="151" pos:column="9">LoadLexerLibrary</name><argument_list pos:line="151" pos:column="25">(<argument><expr><name pos:line="151" pos:column="26">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="154" pos:column="1">void</name></type> <name><name pos:line="154" pos:column="6">LexerManager</name><op:operator pos:line="154" pos:column="18">::</op:operator><name pos:line="154" pos:column="20">LoadLexerLibrary</name></name><parameter_list pos:line="154" pos:column="36">(<param><decl><type><specifier pos:line="154" pos:column="37">const</specifier> <name pos:line="154" pos:column="43">char</name> <type:modifier pos:line="154" pos:column="48">*</type:modifier></type><name pos:line="154" pos:column="49">module</name></decl></param>)</parameter_list> <block pos:line="154" pos:column="57">{
	<for pos:line="155" pos:column="9">for (<init><decl><type><name pos:line="155" pos:column="14">LexerLibrary</name> <type:modifier pos:line="155" pos:column="27">*</type:modifier></type><name pos:line="155" pos:column="28">ll</name> <init pos:line="155" pos:column="31">= <expr><name pos:line="155" pos:column="33">first</name></expr></init></decl>;</init> <condition><expr><name pos:line="155" pos:column="40">ll</name></expr>;</condition> <incr><expr><name pos:line="155" pos:column="44">ll</name><op:operator pos:line="155" pos:column="46">=</op:operator> <name><name pos:line="155" pos:column="48">ll</name><op:operator pos:line="155" pos:column="50">-&gt;</op:operator><name pos:line="155" pos:column="52">next</name></name></expr></incr>) <block pos:line="155" pos:column="58">{
		<if pos:line="156" pos:column="17">if <condition pos:line="156" pos:column="20">(<expr><call><name pos:line="156" pos:column="21">strcmp</name><argument_list pos:line="156" pos:column="27">(<argument><expr><call><name><name pos:line="156" pos:column="28">ll</name><op:operator pos:line="156" pos:column="30">-&gt;</op:operator><name pos:line="156" pos:column="32">m_sModuleName</name><op:operator pos:line="156" pos:column="45">.</op:operator><name pos:line="156" pos:column="46">c_str</name></name><argument_list pos:line="156" pos:column="51">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="156" pos:column="55">module</name></expr></argument>)</argument_list></call> <op:operator pos:line="156" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="156" pos:column="66">0</lit:literal></expr>)</condition><then pos:line="156" pos:column="68">
			<return pos:line="157" pos:column="25">return;</return></then></if>
	}</block></for>
	<decl_stmt><decl><type><name pos:line="159" pos:column="9">LexerLibrary</name> <type:modifier pos:line="159" pos:column="22">*</type:modifier></type><name pos:line="159" pos:column="23">lib</name> <init pos:line="159" pos:column="27">= <expr><op:operator pos:line="159" pos:column="29">new</op:operator> <call><name pos:line="159" pos:column="33">LexerLibrary</name><argument_list pos:line="159" pos:column="45">(<argument><expr><name pos:line="159" pos:column="46">module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="160" pos:column="9">if <condition pos:line="160" pos:column="12">(<expr><name pos:line="160" pos:column="13">NULL</name> <op:operator pos:line="160" pos:column="18">!=</op:operator> <name pos:line="160" pos:column="21">first</name></expr>)</condition><then pos:line="160" pos:column="27"> <block pos:line="160" pos:column="28">{
		<expr_stmt><expr><name><name pos:line="161" pos:column="17">last</name><op:operator pos:line="161" pos:column="21">-&gt;</op:operator><name pos:line="161" pos:column="23">next</name></name> <op:operator pos:line="161" pos:column="28">=</op:operator> <name pos:line="161" pos:column="30">lib</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="162" pos:column="17">last</name> <op:operator pos:line="162" pos:column="22">=</op:operator> <name pos:line="162" pos:column="24">lib</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="163" pos:column="11">else <block pos:line="163" pos:column="16">{
		<expr_stmt><expr><name pos:line="164" pos:column="17">first</name> <op:operator pos:line="164" pos:column="23">=</op:operator> <name pos:line="164" pos:column="25">lib</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="165" pos:column="17">last</name> <op:operator pos:line="165" pos:column="22">=</op:operator> <name pos:line="165" pos:column="24">lib</name></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="169" pos:column="1">void</name></type> <name><name pos:line="169" pos:column="6">LexerManager</name><op:operator pos:line="169" pos:column="18">::</op:operator><name pos:line="169" pos:column="20">Clear</name></name><parameter_list pos:line="169" pos:column="25">()</parameter_list> <block pos:line="169" pos:column="28">{
	<if pos:line="170" pos:column="9">if <condition pos:line="170" pos:column="12">(<expr><name pos:line="170" pos:column="13">NULL</name> <op:operator pos:line="170" pos:column="18">!=</op:operator> <name pos:line="170" pos:column="21">first</name></expr>)</condition><then pos:line="170" pos:column="27"> <block pos:line="170" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="171" pos:column="17">LexerLibrary</name> <type:modifier pos:line="171" pos:column="30">*</type:modifier></type><name pos:line="171" pos:column="31">cur</name> <init pos:line="171" pos:column="35">= <expr><name pos:line="171" pos:column="37">first</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="172" pos:column="17">LexerLibrary</name> <type:modifier pos:line="172" pos:column="30">*</type:modifier></type><name pos:line="172" pos:column="31">next</name></decl>;</decl_stmt>
		<while pos:line="173" pos:column="17">while <condition pos:line="173" pos:column="23">(<expr><name pos:line="173" pos:column="24">cur</name></expr>)</condition> <block pos:line="173" pos:column="29">{
			<expr_stmt><expr><name pos:line="174" pos:column="25">next</name> <op:operator pos:line="174" pos:column="30">=</op:operator> <name><name pos:line="174" pos:column="32">cur</name><op:operator pos:line="174" pos:column="35">-&gt;</op:operator><name pos:line="174" pos:column="37">next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="175" pos:column="25">delete</op:operator> <name pos:line="175" pos:column="32">cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="176" pos:column="25">cur</name> <op:operator pos:line="176" pos:column="29">=</op:operator> <name pos:line="176" pos:column="31">next</name></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name pos:line="178" pos:column="17">first</name> <op:operator pos:line="178" pos:column="23">=</op:operator> <name pos:line="178" pos:column="25">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="179" pos:column="17">last</name> <op:operator pos:line="179" pos:column="22">=</op:operator> <name pos:line="179" pos:column="24">NULL</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<comment type="line" pos:line="183" pos:column="1">//------------------------------------------</comment>
<comment type="line" pos:line="184" pos:column="1">//</comment>
<comment type="line" pos:line="185" pos:column="1">// LexerManager</comment>
<comment type="line" pos:line="186" pos:column="1">//</comment>
<comment type="line" pos:line="187" pos:column="1">//------------------------------------------</comment>

<destructor><name><name pos:line="189" pos:column="1">LMMinder</name><op:operator pos:line="189" pos:column="9">::</op:operator>~<name pos:line="189" pos:column="12">LMMinder</name></name><parameter_list pos:line="189" pos:column="20">()</parameter_list> <block pos:line="189" pos:column="23">{
	<expr_stmt><expr><call><name><name pos:line="190" pos:column="9">LexerManager</name><op:operator pos:line="190" pos:column="21">::</op:operator><name pos:line="190" pos:column="23">DeleteInstance</name></name><argument_list pos:line="190" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<decl_stmt><decl><type><name pos:line="193" pos:column="1">LMMinder</name></type> <name pos:line="193" pos:column="10">minder</name></decl>;</decl_stmt>
</unit>
