<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexKix.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexKix.cxx
 ** Lexer for KIX-Scripts.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2004 by Manfred Becker &lt;manfred@becker-trdf.de&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="30" pos:column="1">// Extended to accept accented characters</comment>
<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">IsAWordChar</name><parameter_list pos:line="31" pos:column="31">(<param><decl><type><name pos:line="31" pos:column="32">int</name></type> <name pos:line="31" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="40">{
	<return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">ch</name> <op:operator pos:line="32" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="32" pos:column="22">0x80</lit:literal> <op:operator pos:line="32" pos:column="27">||</op:operator> <call><name pos:line="32" pos:column="30">isalnum</name><argument_list pos:line="32" pos:column="37">(<argument><expr><name pos:line="32" pos:column="38">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="42">||</op:operator> <name pos:line="32" pos:column="45">ch</name> <op:operator pos:line="32" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="51">'_'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <specifier pos:line="35" pos:column="8">inline</specifier> <name pos:line="35" pos:column="15">bool</name></type> <name pos:line="35" pos:column="20">IsOperator</name><parameter_list pos:line="35" pos:column="30">(<param><decl><type><specifier pos:line="35" pos:column="31">const</specifier> <name pos:line="35" pos:column="37">int</name></type> <name pos:line="35" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="45">{
	<return pos:line="36" pos:column="9">return <expr><op:operator pos:line="36" pos:column="16">(</op:operator><name pos:line="36" pos:column="17">ch</name> <op:operator pos:line="36" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="23">'+'</lit:literal> <op:operator pos:line="36" pos:column="27">||</op:operator> <name pos:line="36" pos:column="30">ch</name> <op:operator pos:line="36" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="36">'-'</lit:literal> <op:operator pos:line="36" pos:column="40">||</op:operator> <name pos:line="36" pos:column="43">ch</name> <op:operator pos:line="36" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="49">'*'</lit:literal> <op:operator pos:line="36" pos:column="53">||</op:operator> <name pos:line="36" pos:column="56">ch</name> <op:operator pos:line="36" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="62">'/'</lit:literal> <op:operator pos:line="36" pos:column="66">||</op:operator> <name pos:line="36" pos:column="69">ch</name> <op:operator pos:line="36" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="75">'&amp;'</lit:literal> <op:operator pos:line="36" pos:column="79">||</op:operator> <name pos:line="36" pos:column="82">ch</name> <op:operator pos:line="36" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="88">'|'</lit:literal> <op:operator pos:line="36" pos:column="92">||</op:operator> <name pos:line="36" pos:column="95">ch</name> <op:operator pos:line="36" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="101">'&lt;'</lit:literal> <op:operator pos:line="36" pos:column="105">||</op:operator> <name pos:line="36" pos:column="108">ch</name> <op:operator pos:line="36" pos:column="111">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="114">'&gt;'</lit:literal> <op:operator pos:line="36" pos:column="118">||</op:operator> <name pos:line="36" pos:column="121">ch</name> <op:operator pos:line="36" pos:column="124">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="127">'='</lit:literal><op:operator pos:line="36" pos:column="130">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <name pos:line="39" pos:column="8">void</name></type> <name pos:line="39" pos:column="13">ColouriseKixDoc</name><parameter_list pos:line="39" pos:column="28">(<param><decl><type><name pos:line="39" pos:column="29">unsigned</name> <name pos:line="39" pos:column="38">int</name></type> <name pos:line="39" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="52">int</name></type> <name pos:line="39" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="64">int</name></type> <name pos:line="39" pos:column="68">initStyle</name></decl></param>,
                           <param><decl><type><name pos:line="40" pos:column="28">WordList</name> <type:modifier pos:line="40" pos:column="37">*</type:modifier></type><name><name pos:line="40" pos:column="38">keywordlists</name><index pos:line="40" pos:column="50">[]</index></name></decl></param>, <param><decl><type><name pos:line="40" pos:column="54">Accessor</name> <type:modifier pos:line="40" pos:column="63">&amp;</type:modifier></type><name pos:line="40" pos:column="64">styler</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="72">{

	<decl_stmt><decl><type><name pos:line="42" pos:column="9">WordList</name> <type:modifier pos:line="42" pos:column="18">&amp;</type:modifier></type><name pos:line="42" pos:column="19">keywords</name> <init pos:line="42" pos:column="28">= <expr><op:operator pos:line="42" pos:column="30">*</op:operator><name><name pos:line="42" pos:column="31">keywordlists</name><index pos:line="42" pos:column="43">[<expr><lit:literal type="number" pos:line="42" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">WordList</name> <type:modifier pos:line="43" pos:column="18">&amp;</type:modifier></type><name pos:line="43" pos:column="19">keywords2</name> <init pos:line="43" pos:column="29">= <expr><op:operator pos:line="43" pos:column="31">*</op:operator><name><name pos:line="43" pos:column="32">keywordlists</name><index pos:line="43" pos:column="44">[<expr><lit:literal type="number" pos:line="43" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">WordList</name> <type:modifier pos:line="44" pos:column="18">&amp;</type:modifier></type><name pos:line="44" pos:column="19">keywords3</name> <init pos:line="44" pos:column="29">= <expr><op:operator pos:line="44" pos:column="31">*</op:operator><name><name pos:line="44" pos:column="32">keywordlists</name><index pos:line="44" pos:column="44">[<expr><lit:literal type="number" pos:line="44" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="45" pos:column="1">//	WordList &amp;keywords4 = *keywordlists[3];</comment>

	<expr_stmt><expr><call><name><name pos:line="47" pos:column="9">styler</name><op:operator pos:line="47" pos:column="15">.</op:operator><name pos:line="47" pos:column="16">StartAt</name></name><argument_list pos:line="47" pos:column="23">(<argument><expr><name pos:line="47" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<function_decl><type><name pos:line="49" pos:column="9">StyleContext</name></type> <name pos:line="49" pos:column="22">sc</name><parameter_list pos:line="49" pos:column="24">(<param><decl><type><name pos:line="49" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="49" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="49" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="49" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="51" pos:column="9">for (<init pos:line="51" pos:column="14">;</init> <condition><expr><call><name><name pos:line="51" pos:column="16">sc</name><op:operator pos:line="51" pos:column="18">.</op:operator><name pos:line="51" pos:column="19">More</name></name><argument_list pos:line="51" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="51" pos:column="27">sc</name><op:operator pos:line="51" pos:column="29">.</op:operator><name pos:line="51" pos:column="30">Forward</name></name><argument_list pos:line="51" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="51" pos:column="41">{

		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name><name pos:line="53" pos:column="21">sc</name><op:operator pos:line="53" pos:column="23">.</op:operator><name pos:line="53" pos:column="24">state</name></name> <op:operator pos:line="53" pos:column="30">==</op:operator> <name pos:line="53" pos:column="33">SCE_KIX_COMMENT</name></expr>)</condition><then pos:line="53" pos:column="49"> <block pos:line="53" pos:column="50">{
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name><name pos:line="54" pos:column="29">sc</name><op:operator pos:line="54" pos:column="31">.</op:operator><name pos:line="54" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="54" pos:column="42"> <block pos:line="54" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="55" pos:column="33">sc</name><op:operator pos:line="55" pos:column="35">.</op:operator><name pos:line="55" pos:column="36">SetState</name></name><argument_list pos:line="55" pos:column="44">(<argument><expr><name pos:line="55" pos:column="45">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="57" pos:column="19">else <if pos:line="57" pos:column="24">if <condition pos:line="57" pos:column="27">(<expr><name><name pos:line="57" pos:column="28">sc</name><op:operator pos:line="57" pos:column="30">.</op:operator><name pos:line="57" pos:column="31">state</name></name> <op:operator pos:line="57" pos:column="37">==</op:operator> <name pos:line="57" pos:column="40">SCE_KIX_STRING1</name></expr>)</condition><then pos:line="57" pos:column="56"> <block pos:line="57" pos:column="57">{
			<comment type="line" pos:line="58" pos:column="25">// This is a doubles quotes string</comment>
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name><name pos:line="59" pos:column="29">sc</name><op:operator pos:line="59" pos:column="31">.</op:operator><name pos:line="59" pos:column="32">ch</name></name> <op:operator pos:line="59" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="38">'\"'</lit:literal></expr>)</condition><then pos:line="59" pos:column="43"> <block pos:line="59" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="60" pos:column="33">sc</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">ForwardSetState</name></name><argument_list pos:line="60" pos:column="51">(<argument><expr><name pos:line="60" pos:column="52">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="62" pos:column="19">else <if pos:line="62" pos:column="24">if <condition pos:line="62" pos:column="27">(<expr><name><name pos:line="62" pos:column="28">sc</name><op:operator pos:line="62" pos:column="30">.</op:operator><name pos:line="62" pos:column="31">state</name></name> <op:operator pos:line="62" pos:column="37">==</op:operator> <name pos:line="62" pos:column="40">SCE_KIX_STRING2</name></expr>)</condition><then pos:line="62" pos:column="56"> <block pos:line="62" pos:column="57">{
			<comment type="line" pos:line="63" pos:column="25">// This is a single quote string</comment>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><name><name pos:line="64" pos:column="29">sc</name><op:operator pos:line="64" pos:column="31">.</op:operator><name pos:line="64" pos:column="32">ch</name></name> <op:operator pos:line="64" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="38">'\''</lit:literal></expr>)</condition><then pos:line="64" pos:column="43"> <block pos:line="64" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="65" pos:column="33">sc</name><op:operator pos:line="65" pos:column="35">.</op:operator><name pos:line="65" pos:column="36">ForwardSetState</name></name><argument_list pos:line="65" pos:column="51">(<argument><expr><name pos:line="65" pos:column="52">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="67" pos:column="19">else <if pos:line="67" pos:column="24">if <condition pos:line="67" pos:column="27">(<expr><name><name pos:line="67" pos:column="28">sc</name><op:operator pos:line="67" pos:column="30">.</op:operator><name pos:line="67" pos:column="31">state</name></name> <op:operator pos:line="67" pos:column="37">==</op:operator> <name pos:line="67" pos:column="40">SCE_KIX_NUMBER</name></expr>)</condition><then pos:line="67" pos:column="55"> <block pos:line="67" pos:column="56">{
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><op:operator pos:line="68" pos:column="29">!</op:operator><call><name pos:line="68" pos:column="30">IsADigit</name><argument_list pos:line="68" pos:column="38">(<argument><expr><name><name pos:line="68" pos:column="39">sc</name><op:operator pos:line="68" pos:column="41">.</op:operator><name pos:line="68" pos:column="42">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="68" pos:column="46"> <block pos:line="68" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="69" pos:column="33">sc</name><op:operator pos:line="69" pos:column="35">.</op:operator><name pos:line="69" pos:column="36">SetState</name></name><argument_list pos:line="69" pos:column="44">(<argument><expr><name pos:line="69" pos:column="45">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="71" pos:column="19">else <if pos:line="71" pos:column="24">if <condition pos:line="71" pos:column="27">(<expr><name><name pos:line="71" pos:column="28">sc</name><op:operator pos:line="71" pos:column="30">.</op:operator><name pos:line="71" pos:column="31">state</name></name> <op:operator pos:line="71" pos:column="37">==</op:operator> <name pos:line="71" pos:column="40">SCE_KIX_VAR</name></expr>)</condition><then pos:line="71" pos:column="52"> <block pos:line="71" pos:column="53">{
			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><op:operator pos:line="72" pos:column="29">!</op:operator><call><name pos:line="72" pos:column="30">IsAWordChar</name><argument_list pos:line="72" pos:column="41">(<argument><expr><name><name pos:line="72" pos:column="42">sc</name><op:operator pos:line="72" pos:column="44">.</op:operator><name pos:line="72" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="72" pos:column="49"> <block pos:line="72" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="73" pos:column="33">sc</name><op:operator pos:line="73" pos:column="35">.</op:operator><name pos:line="73" pos:column="36">SetState</name></name><argument_list pos:line="73" pos:column="44">(<argument><expr><name pos:line="73" pos:column="45">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="75" pos:column="19">else <if pos:line="75" pos:column="24">if <condition pos:line="75" pos:column="27">(<expr><name><name pos:line="75" pos:column="28">sc</name><op:operator pos:line="75" pos:column="30">.</op:operator><name pos:line="75" pos:column="31">state</name></name> <op:operator pos:line="75" pos:column="37">==</op:operator> <name pos:line="75" pos:column="40">SCE_KIX_MACRO</name></expr>)</condition><then pos:line="75" pos:column="54"> <block pos:line="75" pos:column="55">{
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><op:operator pos:line="76" pos:column="29">!</op:operator><call><name pos:line="76" pos:column="30">IsAWordChar</name><argument_list pos:line="76" pos:column="41">(<argument><expr><name><name pos:line="76" pos:column="42">sc</name><op:operator pos:line="76" pos:column="44">.</op:operator><name pos:line="76" pos:column="45">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="76" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="76" pos:column="52">!</op:operator><call><name pos:line="76" pos:column="53">IsADigit</name><argument_list pos:line="76" pos:column="61">(<argument><expr><name><name pos:line="76" pos:column="62">sc</name><op:operator pos:line="76" pos:column="64">.</op:operator><name pos:line="76" pos:column="65">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="69"> <block pos:line="76" pos:column="70">{
				<decl_stmt><decl><type><name pos:line="77" pos:column="33">char</name></type> <name><name pos:line="77" pos:column="38">s</name><index pos:line="77" pos:column="39">[<expr><lit:literal type="number" pos:line="77" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">sc</name><op:operator pos:line="78" pos:column="35">.</op:operator><name pos:line="78" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="78" pos:column="53">(<argument><expr><name pos:line="78" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="78" pos:column="57">sizeof<argument_list pos:line="78" pos:column="63">(<argument><expr><name pos:line="78" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="80" pos:column="33">if <condition pos:line="80" pos:column="36">(<expr><op:operator pos:line="80" pos:column="37">!</op:operator><call><name><name pos:line="80" pos:column="38">keywords3</name><op:operator pos:line="80" pos:column="47">.</op:operator><name pos:line="80" pos:column="48">InList</name></name><argument_list pos:line="80" pos:column="54">(<argument><expr><op:operator pos:line="80" pos:column="55">&amp;</op:operator><name><name pos:line="80" pos:column="56">s</name><index pos:line="80" pos:column="57">[<expr><lit:literal type="number" pos:line="80" pos:column="58">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="80" pos:column="62"> <block pos:line="80" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="81" pos:column="41">sc</name><op:operator pos:line="81" pos:column="43">.</op:operator><name pos:line="81" pos:column="44">ChangeState</name></name><argument_list pos:line="81" pos:column="55">(<argument><expr><name pos:line="81" pos:column="56">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="83" pos:column="33">sc</name><op:operator pos:line="83" pos:column="35">.</op:operator><name pos:line="83" pos:column="36">SetState</name></name><argument_list pos:line="83" pos:column="44">(<argument><expr><name pos:line="83" pos:column="45">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="85" pos:column="19">else <if pos:line="85" pos:column="24">if <condition pos:line="85" pos:column="27">(<expr><name><name pos:line="85" pos:column="28">sc</name><op:operator pos:line="85" pos:column="30">.</op:operator><name pos:line="85" pos:column="31">state</name></name> <op:operator pos:line="85" pos:column="37">==</op:operator> <name pos:line="85" pos:column="40">SCE_KIX_OPERATOR</name></expr>)</condition><then pos:line="85" pos:column="57"> <block pos:line="85" pos:column="58">{
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><op:operator pos:line="86" pos:column="29">!</op:operator><call><name pos:line="86" pos:column="30">IsOperator</name><argument_list pos:line="86" pos:column="40">(<argument><expr><name><name pos:line="86" pos:column="41">sc</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="48"> <block pos:line="86" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="87" pos:column="33">sc</name><op:operator pos:line="87" pos:column="35">.</op:operator><name pos:line="87" pos:column="36">SetState</name></name><argument_list pos:line="87" pos:column="44">(<argument><expr><name pos:line="87" pos:column="45">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="89" pos:column="19">else <if pos:line="89" pos:column="24">if <condition pos:line="89" pos:column="27">(<expr><name><name pos:line="89" pos:column="28">sc</name><op:operator pos:line="89" pos:column="30">.</op:operator><name pos:line="89" pos:column="31">state</name></name> <op:operator pos:line="89" pos:column="37">==</op:operator> <name pos:line="89" pos:column="40">SCE_KIX_IDENTIFIER</name></expr>)</condition><then pos:line="89" pos:column="59"> <block pos:line="89" pos:column="60">{
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><op:operator pos:line="90" pos:column="29">!</op:operator><call><name pos:line="90" pos:column="30">IsAWordChar</name><argument_list pos:line="90" pos:column="41">(<argument><expr><name><name pos:line="90" pos:column="42">sc</name><op:operator pos:line="90" pos:column="44">.</op:operator><name pos:line="90" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="49"> <block pos:line="90" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="91" pos:column="33">char</name></type> <name><name pos:line="91" pos:column="38">s</name><index pos:line="91" pos:column="39">[<expr><lit:literal type="number" pos:line="91" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="92" pos:column="33">sc</name><op:operator pos:line="92" pos:column="35">.</op:operator><name pos:line="92" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="92" pos:column="53">(<argument><expr><name pos:line="92" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="57">sizeof<argument_list pos:line="92" pos:column="63">(<argument><expr><name pos:line="92" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="94" pos:column="33">if <condition pos:line="94" pos:column="36">(<expr><call><name><name pos:line="94" pos:column="37">keywords</name><op:operator pos:line="94" pos:column="45">.</op:operator><name pos:line="94" pos:column="46">InList</name></name><argument_list pos:line="94" pos:column="52">(<argument><expr><name pos:line="94" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="56"> <block pos:line="94" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="95" pos:column="41">sc</name><op:operator pos:line="95" pos:column="43">.</op:operator><name pos:line="95" pos:column="44">ChangeState</name></name><argument_list pos:line="95" pos:column="55">(<argument><expr><name pos:line="95" pos:column="56">SCE_KIX_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="96" pos:column="35">else <if pos:line="96" pos:column="40">if <condition pos:line="96" pos:column="43">(<expr><call><name><name pos:line="96" pos:column="44">keywords2</name><op:operator pos:line="96" pos:column="53">.</op:operator><name pos:line="96" pos:column="54">InList</name></name><argument_list pos:line="96" pos:column="60">(<argument><expr><name pos:line="96" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="96" pos:column="64"> <block pos:line="96" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">sc</name><op:operator pos:line="97" pos:column="43">.</op:operator><name pos:line="97" pos:column="44">ChangeState</name></name><argument_list pos:line="97" pos:column="55">(<argument><expr><name pos:line="97" pos:column="56">SCE_KIX_FUNCTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="99" pos:column="33">sc</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">SetState</name></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">SCE_KIX_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="103" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name><name pos:line="104" pos:column="21">sc</name><op:operator pos:line="104" pos:column="23">.</op:operator><name pos:line="104" pos:column="24">state</name></name> <op:operator pos:line="104" pos:column="30">==</op:operator> <name pos:line="104" pos:column="33">SCE_KIX_DEFAULT</name></expr>)</condition><then pos:line="104" pos:column="49"> <block pos:line="104" pos:column="50">{
			<if pos:line="105" pos:column="25">if <condition pos:line="105" pos:column="28">(<expr><name><name pos:line="105" pos:column="29">sc</name><op:operator pos:line="105" pos:column="31">.</op:operator><name pos:line="105" pos:column="32">ch</name></name> <op:operator pos:line="105" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="38">';'</lit:literal></expr>)</condition><then pos:line="105" pos:column="42"> <block pos:line="105" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="106" pos:column="33">sc</name><op:operator pos:line="106" pos:column="35">.</op:operator><name pos:line="106" pos:column="36">SetState</name></name><argument_list pos:line="106" pos:column="44">(<argument><expr><name pos:line="106" pos:column="45">SCE_KIX_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="107" pos:column="27">else <if pos:line="107" pos:column="32">if <condition pos:line="107" pos:column="35">(<expr><name><name pos:line="107" pos:column="36">sc</name><op:operator pos:line="107" pos:column="38">.</op:operator><name pos:line="107" pos:column="39">ch</name></name> <op:operator pos:line="107" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="107" pos:column="50"> <block pos:line="107" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="108" pos:column="33">sc</name><op:operator pos:line="108" pos:column="35">.</op:operator><name pos:line="108" pos:column="36">SetState</name></name><argument_list pos:line="108" pos:column="44">(<argument><expr><name pos:line="108" pos:column="45">SCE_KIX_STRING1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="109" pos:column="27">else <if pos:line="109" pos:column="32">if <condition pos:line="109" pos:column="35">(<expr><name><name pos:line="109" pos:column="36">sc</name><op:operator pos:line="109" pos:column="38">.</op:operator><name pos:line="109" pos:column="39">ch</name></name> <op:operator pos:line="109" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="109" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="109" pos:column="50"> <block pos:line="109" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="110" pos:column="33">sc</name><op:operator pos:line="110" pos:column="35">.</op:operator><name pos:line="110" pos:column="36">SetState</name></name><argument_list pos:line="110" pos:column="44">(<argument><expr><name pos:line="110" pos:column="45">SCE_KIX_STRING2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="111" pos:column="27">else <if pos:line="111" pos:column="32">if <condition pos:line="111" pos:column="35">(<expr><name><name pos:line="111" pos:column="36">sc</name><op:operator pos:line="111" pos:column="38">.</op:operator><name pos:line="111" pos:column="39">ch</name></name> <op:operator pos:line="111" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="111" pos:column="45">'$'</lit:literal></expr>)</condition><then pos:line="111" pos:column="49"> <block pos:line="111" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="112" pos:column="33">sc</name><op:operator pos:line="112" pos:column="35">.</op:operator><name pos:line="112" pos:column="36">SetState</name></name><argument_list pos:line="112" pos:column="44">(<argument><expr><name pos:line="112" pos:column="45">SCE_KIX_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="113" pos:column="27">else <if pos:line="113" pos:column="32">if <condition pos:line="113" pos:column="35">(<expr><name><name pos:line="113" pos:column="36">sc</name><op:operator pos:line="113" pos:column="38">.</op:operator><name pos:line="113" pos:column="39">ch</name></name> <op:operator pos:line="113" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="45">'@'</lit:literal></expr>)</condition><then pos:line="113" pos:column="49"> <block pos:line="113" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="114" pos:column="33">sc</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">SetState</name></name><argument_list pos:line="114" pos:column="44">(<argument><expr><name pos:line="114" pos:column="45">SCE_KIX_MACRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="115" pos:column="27">else <if pos:line="115" pos:column="32">if <condition pos:line="115" pos:column="35">(<expr><call><name pos:line="115" pos:column="36">IsADigit</name><argument_list pos:line="115" pos:column="44">(<argument><expr><name><name pos:line="115" pos:column="45">sc</name><op:operator pos:line="115" pos:column="47">.</op:operator><name pos:line="115" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="52">||</op:operator> <op:operator pos:line="115" pos:column="55">(</op:operator><op:operator pos:line="115" pos:column="56">(</op:operator><name><name pos:line="115" pos:column="57">sc</name><op:operator pos:line="115" pos:column="59">.</op:operator><name pos:line="115" pos:column="60">ch</name></name> <op:operator pos:line="115" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="66">'.'</lit:literal> <op:operator pos:line="115" pos:column="70">||</op:operator> <name><name pos:line="115" pos:column="73">sc</name><op:operator pos:line="115" pos:column="75">.</op:operator><name pos:line="115" pos:column="76">ch</name></name> <op:operator pos:line="115" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="82">'&amp;'</lit:literal><op:operator pos:line="115" pos:column="85">)</op:operator> <op:operator pos:line="115" pos:column="87">&amp;&amp;</op:operator> <call><name pos:line="115" pos:column="90">IsADigit</name><argument_list pos:line="115" pos:column="98">(<argument><expr><name><name pos:line="115" pos:column="99">sc</name><op:operator pos:line="115" pos:column="101">.</op:operator><name pos:line="115" pos:column="102">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="115" pos:column="109">)</op:operator></expr>)</condition><then pos:line="115" pos:column="111"> <block pos:line="115" pos:column="112">{
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">sc</name><op:operator pos:line="116" pos:column="35">.</op:operator><name pos:line="116" pos:column="36">SetState</name></name><argument_list pos:line="116" pos:column="44">(<argument><expr><name pos:line="116" pos:column="45">SCE_KIX_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="117" pos:column="27">else <if pos:line="117" pos:column="32">if <condition pos:line="117" pos:column="35">(<expr><call><name pos:line="117" pos:column="36">IsOperator</name><argument_list pos:line="117" pos:column="46">(<argument><expr><name><name pos:line="117" pos:column="47">sc</name><op:operator pos:line="117" pos:column="49">.</op:operator><name pos:line="117" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="117" pos:column="54"> <block pos:line="117" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="118" pos:column="33">sc</name><op:operator pos:line="118" pos:column="35">.</op:operator><name pos:line="118" pos:column="36">SetState</name></name><argument_list pos:line="118" pos:column="44">(<argument><expr><name pos:line="118" pos:column="45">SCE_KIX_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="119" pos:column="27">else <if pos:line="119" pos:column="32">if <condition pos:line="119" pos:column="35">(<expr><call><name pos:line="119" pos:column="36">IsAWordChar</name><argument_list pos:line="119" pos:column="47">(<argument><expr><name><name pos:line="119" pos:column="48">sc</name><op:operator pos:line="119" pos:column="50">.</op:operator><name pos:line="119" pos:column="51">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="119" pos:column="55"> <block pos:line="119" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="120" pos:column="33">sc</name><op:operator pos:line="120" pos:column="35">.</op:operator><name pos:line="120" pos:column="36">SetState</name></name><argument_list pos:line="120" pos:column="44">(<argument><expr><name pos:line="120" pos:column="45">SCE_KIX_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="124" pos:column="9">sc</name><op:operator pos:line="124" pos:column="11">.</op:operator><name pos:line="124" pos:column="12">Complete</name></name><argument_list pos:line="124" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<decl_stmt><decl><type><name pos:line="128" pos:column="1">LexerModule</name></type> <name pos:line="128" pos:column="13">lmKix</name><argument_list pos:line="128" pos:column="18">(<argument><expr><name pos:line="128" pos:column="19">SCLEX_KIX</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="30">ColouriseKixDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="128" pos:column="47">"kix"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
