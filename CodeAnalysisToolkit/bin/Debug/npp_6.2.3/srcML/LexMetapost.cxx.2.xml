<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexMetapost.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>

<comment type="line" pos:line="3" pos:column="1">// File: LexMetapost.cxx - general context conformant metapost coloring scheme</comment>
<comment type="line" pos:line="4" pos:column="1">// Author: Hans Hagen - PRAGMA ADE - Hasselt NL - www.pragma-ade.com</comment>
<comment type="line" pos:line="5" pos:column="1">// Version: September 28, 2003</comment>
<comment type="line" pos:line="6" pos:column="1">// Modified by instanton: July 10, 2007</comment>
<comment type="line" pos:line="7" pos:column="1">// Folding based on keywordlists[]</comment>

<comment type="line" pos:line="9" pos:column="1">// Copyright: 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="10" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<comment type="line" pos:line="12" pos:column="1">// This lexer is derived from the one written for the texwork environment (1999++) which in</comment>
<comment type="line" pos:line="13" pos:column="1">// turn is inspired on texedit (1991++) which finds its roots in wdt (1986).</comment>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file pos:line="18" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file pos:line="19" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifdef</cpp:directive> <name pos:line="33" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="34" pos:column="1">using namespace <name pos:line="34" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="37" pos:column="1">// val SCE_METAPOST_DEFAULT = 0</comment>
<comment type="line" pos:line="38" pos:column="1">// val SCE_METAPOST_SPECIAL = 1</comment>
<comment type="line" pos:line="39" pos:column="1">// val SCE_METAPOST_GROUP = 2</comment>
<comment type="line" pos:line="40" pos:column="1">// val SCE_METAPOST_SYMBOL = 3</comment>
<comment type="line" pos:line="41" pos:column="1">// val SCE_METAPOST_COMMAND = 4</comment>
<comment type="line" pos:line="42" pos:column="1">// val SCE_METAPOST_TEXT = 5</comment>

<comment type="line" pos:line="44" pos:column="1">// Definitions in SciTEGlobal.properties:</comment>
<comment type="line" pos:line="45" pos:column="1">//</comment>
<comment type="line" pos:line="46" pos:column="1">// Metapost Highlighting</comment>
<comment type="line" pos:line="47" pos:column="1">//</comment>
<comment type="line" pos:line="48" pos:column="1">// # Default</comment>
<comment type="line" pos:line="49" pos:column="1">// style.metapost.0=fore:#7F7F00</comment>
<comment type="line" pos:line="50" pos:column="1">// # Special</comment>
<comment type="line" pos:line="51" pos:column="1">// style.metapost.1=fore:#007F7F</comment>
<comment type="line" pos:line="52" pos:column="1">// # Group</comment>
<comment type="line" pos:line="53" pos:column="1">// style.metapost.2=fore:#880000</comment>
<comment type="line" pos:line="54" pos:column="1">// # Symbol</comment>
<comment type="line" pos:line="55" pos:column="1">// style.metapost.3=fore:#7F7F00</comment>
<comment type="line" pos:line="56" pos:column="1">// # Command</comment>
<comment type="line" pos:line="57" pos:column="1">// style.metapost.4=fore:#008800</comment>
<comment type="line" pos:line="58" pos:column="1">// # Text</comment>
<comment type="line" pos:line="59" pos:column="1">// style.metapost.5=fore:#000000</comment>

<comment type="line" pos:line="61" pos:column="1">// lexer.tex.comment.process=0</comment>

<comment type="line" pos:line="63" pos:column="1">// Auxiliary functions:</comment>

<function><type><specifier pos:line="65" pos:column="1">static</specifier> <specifier pos:line="65" pos:column="8">inline</specifier> <name pos:line="65" pos:column="15">bool</name></type> <name pos:line="65" pos:column="20">endOfLine</name><parameter_list pos:line="65" pos:column="29">(<param><decl><type><name pos:line="65" pos:column="30">Accessor</name> <type:modifier pos:line="65" pos:column="39">&amp;</type:modifier></type><name pos:line="65" pos:column="40">styler</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="48">unsigned</name> <name pos:line="65" pos:column="57">int</name></type> <name pos:line="65" pos:column="61">i</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="64">{
	<return pos:line="66" pos:column="9">return
      <expr><op:operator pos:line="67" pos:column="7">(</op:operator><name><name pos:line="67" pos:column="8">styler</name><index pos:line="67" pos:column="14">[<expr><name pos:line="67" pos:column="15">i</name></expr>]</index></name> <op:operator pos:line="67" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="21">'\n'</lit:literal><op:operator pos:line="67" pos:column="25">)</op:operator> <op:operator pos:line="67" pos:column="27">||</op:operator> <op:operator pos:line="67" pos:column="30">(</op:operator><op:operator pos:line="67" pos:column="31">(</op:operator><name><name pos:line="67" pos:column="32">styler</name><index pos:line="67" pos:column="38">[<expr><name pos:line="67" pos:column="39">i</name></expr>]</index></name> <op:operator pos:line="67" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="45">'\r'</lit:literal><op:operator pos:line="67" pos:column="49">)</op:operator> <op:operator pos:line="67" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="67" pos:column="54">(</op:operator><call><name><name pos:line="67" pos:column="55">styler</name><op:operator pos:line="67" pos:column="61">.</op:operator><name pos:line="67" pos:column="62">SafeGetCharAt</name></name><argument_list pos:line="67" pos:column="75">(<argument><expr><name pos:line="67" pos:column="76">i</name> <op:operator pos:line="67" pos:column="78">+</op:operator> <lit:literal type="number" pos:line="67" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="83">!=</op:operator> <lit:literal type="char" pos:line="67" pos:column="86">'\n'</lit:literal><op:operator pos:line="67" pos:column="90">)</op:operator><op:operator pos:line="67" pos:column="91">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="70" pos:column="1">static</specifier> <specifier pos:line="70" pos:column="8">inline</specifier> <name pos:line="70" pos:column="15">bool</name></type> <name pos:line="70" pos:column="20">isMETAPOSTcomment</name><parameter_list pos:line="70" pos:column="37">(<param><decl><type><name pos:line="70" pos:column="38">int</name></type> <name pos:line="70" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="46">{
	<return pos:line="71" pos:column="9">return
      <expr><op:operator pos:line="72" pos:column="7">(</op:operator><name pos:line="72" pos:column="8">ch</name> <op:operator pos:line="72" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="72" pos:column="14">'%'</lit:literal><op:operator pos:line="72" pos:column="17">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="75" pos:column="1">static</specifier> <specifier pos:line="75" pos:column="8">inline</specifier> <name pos:line="75" pos:column="15">bool</name></type> <name pos:line="75" pos:column="20">isMETAPOSTone</name><parameter_list pos:line="75" pos:column="33">(<param><decl><type><name pos:line="75" pos:column="34">int</name></type> <name pos:line="75" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="75" pos:column="42">{
	<return pos:line="76" pos:column="9">return
      <expr><op:operator pos:line="77" pos:column="7">(</op:operator><name pos:line="77" pos:column="8">ch</name> <op:operator pos:line="77" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="14">'['</lit:literal><op:operator pos:line="77" pos:column="17">)</op:operator> <op:operator pos:line="77" pos:column="19">||</op:operator> <op:operator pos:line="77" pos:column="22">(</op:operator><name pos:line="77" pos:column="23">ch</name> <op:operator pos:line="77" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="29">']'</lit:literal><op:operator pos:line="77" pos:column="32">)</op:operator> <op:operator pos:line="77" pos:column="34">||</op:operator> <op:operator pos:line="77" pos:column="37">(</op:operator><name pos:line="77" pos:column="38">ch</name> <op:operator pos:line="77" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="44">'('</lit:literal><op:operator pos:line="77" pos:column="47">)</op:operator> <op:operator pos:line="77" pos:column="49">||</op:operator> <op:operator pos:line="77" pos:column="52">(</op:operator><name pos:line="77" pos:column="53">ch</name> <op:operator pos:line="77" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="59">')'</lit:literal><op:operator pos:line="77" pos:column="62">)</op:operator> <op:operator pos:line="77" pos:column="64">||</op:operator>
      <op:operator pos:line="78" pos:column="7">(</op:operator><name pos:line="78" pos:column="8">ch</name> <op:operator pos:line="78" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="14">':'</lit:literal><op:operator pos:line="78" pos:column="17">)</op:operator> <op:operator pos:line="78" pos:column="19">||</op:operator> <op:operator pos:line="78" pos:column="22">(</op:operator><name pos:line="78" pos:column="23">ch</name> <op:operator pos:line="78" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="29">'='</lit:literal><op:operator pos:line="78" pos:column="32">)</op:operator> <op:operator pos:line="78" pos:column="34">||</op:operator> <op:operator pos:line="78" pos:column="37">(</op:operator><name pos:line="78" pos:column="38">ch</name> <op:operator pos:line="78" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="44">'&lt;'</lit:literal><op:operator pos:line="78" pos:column="47">)</op:operator> <op:operator pos:line="78" pos:column="49">||</op:operator> <op:operator pos:line="78" pos:column="52">(</op:operator><name pos:line="78" pos:column="53">ch</name> <op:operator pos:line="78" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="59">'&gt;'</lit:literal><op:operator pos:line="78" pos:column="62">)</op:operator> <op:operator pos:line="78" pos:column="64">||</op:operator>
      <op:operator pos:line="79" pos:column="7">(</op:operator><name pos:line="79" pos:column="8">ch</name> <op:operator pos:line="79" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="14">'{'</lit:literal><op:operator pos:line="79" pos:column="17">)</op:operator> <op:operator pos:line="79" pos:column="19">||</op:operator> <op:operator pos:line="79" pos:column="22">(</op:operator><name pos:line="79" pos:column="23">ch</name> <op:operator pos:line="79" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="29">'}'</lit:literal><op:operator pos:line="79" pos:column="32">)</op:operator> <op:operator pos:line="79" pos:column="34">||</op:operator> <op:operator pos:line="79" pos:column="37">(</op:operator><name pos:line="79" pos:column="38">ch</name> <op:operator pos:line="79" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="44">'\''</lit:literal><op:operator pos:line="79" pos:column="48">)</op:operator> <op:operator pos:line="79" pos:column="50">||</op:operator> <op:operator pos:line="79" pos:column="53">(</op:operator><name pos:line="79" pos:column="54">ch</name> <op:operator pos:line="79" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="60">'\"'</lit:literal><op:operator pos:line="79" pos:column="64">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="82" pos:column="1">static</specifier> <specifier pos:line="82" pos:column="8">inline</specifier> <name pos:line="82" pos:column="15">bool</name></type> <name pos:line="82" pos:column="20">isMETAPOSTtwo</name><parameter_list pos:line="82" pos:column="33">(<param><decl><type><name pos:line="82" pos:column="34">int</name></type> <name pos:line="82" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="42">{
	<return pos:line="83" pos:column="9">return
      <expr><op:operator pos:line="84" pos:column="7">(</op:operator><name pos:line="84" pos:column="8">ch</name> <op:operator pos:line="84" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="14">';'</lit:literal><op:operator pos:line="84" pos:column="17">)</op:operator> <op:operator pos:line="84" pos:column="19">||</op:operator> <op:operator pos:line="84" pos:column="22">(</op:operator><name pos:line="84" pos:column="23">ch</name> <op:operator pos:line="84" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="29">'$'</lit:literal><op:operator pos:line="84" pos:column="32">)</op:operator> <op:operator pos:line="84" pos:column="34">||</op:operator> <op:operator pos:line="84" pos:column="37">(</op:operator><name pos:line="84" pos:column="38">ch</name> <op:operator pos:line="84" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="44">'@'</lit:literal><op:operator pos:line="84" pos:column="47">)</op:operator> <op:operator pos:line="84" pos:column="49">||</op:operator> <op:operator pos:line="84" pos:column="52">(</op:operator><name pos:line="84" pos:column="53">ch</name> <op:operator pos:line="84" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="59">'#'</lit:literal><op:operator pos:line="84" pos:column="62">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="87" pos:column="1">static</specifier> <specifier pos:line="87" pos:column="8">inline</specifier> <name pos:line="87" pos:column="15">bool</name></type> <name pos:line="87" pos:column="20">isMETAPOSTthree</name><parameter_list pos:line="87" pos:column="35">(<param><decl><type><name pos:line="87" pos:column="36">int</name></type> <name pos:line="87" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="44">{
	<return pos:line="88" pos:column="9">return
      <expr><op:operator pos:line="89" pos:column="7">(</op:operator><name pos:line="89" pos:column="8">ch</name> <op:operator pos:line="89" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="89" pos:column="14">'.'</lit:literal><op:operator pos:line="89" pos:column="17">)</op:operator> <op:operator pos:line="89" pos:column="19">||</op:operator> <op:operator pos:line="89" pos:column="22">(</op:operator><name pos:line="89" pos:column="23">ch</name> <op:operator pos:line="89" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="89" pos:column="29">'-'</lit:literal><op:operator pos:line="89" pos:column="32">)</op:operator> <op:operator pos:line="89" pos:column="34">||</op:operator> <op:operator pos:line="89" pos:column="37">(</op:operator><name pos:line="89" pos:column="38">ch</name> <op:operator pos:line="89" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="89" pos:column="44">'+'</lit:literal><op:operator pos:line="89" pos:column="47">)</op:operator> <op:operator pos:line="89" pos:column="49">||</op:operator> <op:operator pos:line="89" pos:column="52">(</op:operator><name pos:line="89" pos:column="53">ch</name> <op:operator pos:line="89" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="89" pos:column="59">'/'</lit:literal><op:operator pos:line="89" pos:column="62">)</op:operator> <op:operator pos:line="89" pos:column="64">||</op:operator>
      <op:operator pos:line="90" pos:column="7">(</op:operator><name pos:line="90" pos:column="8">ch</name> <op:operator pos:line="90" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="90" pos:column="14">'*'</lit:literal><op:operator pos:line="90" pos:column="17">)</op:operator> <op:operator pos:line="90" pos:column="19">||</op:operator> <op:operator pos:line="90" pos:column="22">(</op:operator><name pos:line="90" pos:column="23">ch</name> <op:operator pos:line="90" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="90" pos:column="29">','</lit:literal><op:operator pos:line="90" pos:column="32">)</op:operator> <op:operator pos:line="90" pos:column="34">||</op:operator> <op:operator pos:line="90" pos:column="37">(</op:operator><name pos:line="90" pos:column="38">ch</name> <op:operator pos:line="90" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="90" pos:column="44">'|'</lit:literal><op:operator pos:line="90" pos:column="47">)</op:operator> <op:operator pos:line="90" pos:column="49">||</op:operator> <op:operator pos:line="90" pos:column="52">(</op:operator><name pos:line="90" pos:column="53">ch</name> <op:operator pos:line="90" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="90" pos:column="59">'`'</lit:literal><op:operator pos:line="90" pos:column="62">)</op:operator> <op:operator pos:line="90" pos:column="64">||</op:operator>
      <op:operator pos:line="91" pos:column="7">(</op:operator><name pos:line="91" pos:column="8">ch</name> <op:operator pos:line="91" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="14">'!'</lit:literal><op:operator pos:line="91" pos:column="17">)</op:operator> <op:operator pos:line="91" pos:column="19">||</op:operator> <op:operator pos:line="91" pos:column="22">(</op:operator><name pos:line="91" pos:column="23">ch</name> <op:operator pos:line="91" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="29">'?'</lit:literal><op:operator pos:line="91" pos:column="32">)</op:operator> <op:operator pos:line="91" pos:column="34">||</op:operator> <op:operator pos:line="91" pos:column="37">(</op:operator><name pos:line="91" pos:column="38">ch</name> <op:operator pos:line="91" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="44">'^'</lit:literal><op:operator pos:line="91" pos:column="47">)</op:operator> <op:operator pos:line="91" pos:column="49">||</op:operator> <op:operator pos:line="91" pos:column="52">(</op:operator><name pos:line="91" pos:column="53">ch</name> <op:operator pos:line="91" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="59">'&amp;'</lit:literal><op:operator pos:line="91" pos:column="62">)</op:operator> <op:operator pos:line="91" pos:column="64">||</op:operator>
      <op:operator pos:line="92" pos:column="7">(</op:operator><name pos:line="92" pos:column="8">ch</name> <op:operator pos:line="92" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="14">'%'</lit:literal><op:operator pos:line="92" pos:column="17">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="95" pos:column="1">static</specifier> <specifier pos:line="95" pos:column="8">inline</specifier> <name pos:line="95" pos:column="15">bool</name></type> <name pos:line="95" pos:column="20">isMETAPOSTidentifier</name><parameter_list pos:line="95" pos:column="40">(<param><decl><type><name pos:line="95" pos:column="41">int</name></type> <name pos:line="95" pos:column="45">ch</name></decl></param>)</parameter_list> <block pos:line="95" pos:column="49">{
	<return pos:line="96" pos:column="9">return
      <expr><op:operator pos:line="97" pos:column="7">(</op:operator><op:operator pos:line="97" pos:column="8">(</op:operator><name pos:line="97" pos:column="9">ch</name> <op:operator pos:line="97" pos:column="12">&gt;=</op:operator> <lit:literal type="char" pos:line="97" pos:column="15">'a'</lit:literal><op:operator pos:line="97" pos:column="18">)</op:operator> <op:operator pos:line="97" pos:column="20">&amp;&amp;</op:operator> <op:operator pos:line="97" pos:column="23">(</op:operator><name pos:line="97" pos:column="24">ch</name> <op:operator pos:line="97" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="97" pos:column="30">'z'</lit:literal><op:operator pos:line="97" pos:column="33">)</op:operator><op:operator pos:line="97" pos:column="34">)</op:operator> <op:operator pos:line="97" pos:column="36">||</op:operator> <op:operator pos:line="97" pos:column="39">(</op:operator><op:operator pos:line="97" pos:column="40">(</op:operator><name pos:line="97" pos:column="41">ch</name> <op:operator pos:line="97" pos:column="44">&gt;=</op:operator> <lit:literal type="char" pos:line="97" pos:column="47">'A'</lit:literal><op:operator pos:line="97" pos:column="50">)</op:operator> <op:operator pos:line="97" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="97" pos:column="55">(</op:operator><name pos:line="97" pos:column="56">ch</name> <op:operator pos:line="97" pos:column="59">&lt;=</op:operator> <lit:literal type="char" pos:line="97" pos:column="62">'Z'</lit:literal><op:operator pos:line="97" pos:column="65">)</op:operator><op:operator pos:line="97" pos:column="66">)</op:operator> <op:operator pos:line="97" pos:column="68">||</op:operator>
      <op:operator pos:line="98" pos:column="7">(</op:operator><name pos:line="98" pos:column="8">ch</name> <op:operator pos:line="98" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="14">'_'</lit:literal><op:operator pos:line="98" pos:column="17">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="101" pos:column="1">static</specifier> <specifier pos:line="101" pos:column="8">inline</specifier> <name pos:line="101" pos:column="15">bool</name></type> <name pos:line="101" pos:column="20">isMETAPOSTnumber</name><parameter_list pos:line="101" pos:column="36">(<param><decl><type><name pos:line="101" pos:column="37">int</name></type> <name pos:line="101" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="101" pos:column="45">{
	<return pos:line="102" pos:column="9">return
      <expr><op:operator pos:line="103" pos:column="7">(</op:operator><name pos:line="103" pos:column="8">ch</name> <op:operator pos:line="103" pos:column="11">&gt;=</op:operator> <lit:literal type="char" pos:line="103" pos:column="14">'0'</lit:literal><op:operator pos:line="103" pos:column="17">)</op:operator> <op:operator pos:line="103" pos:column="19">&amp;&amp;</op:operator> <op:operator pos:line="103" pos:column="22">(</op:operator><name pos:line="103" pos:column="23">ch</name> <op:operator pos:line="103" pos:column="26">&lt;=</op:operator> <lit:literal type="char" pos:line="103" pos:column="29">'9'</lit:literal><op:operator pos:line="103" pos:column="32">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="106" pos:column="1">static</specifier> <specifier pos:line="106" pos:column="8">inline</specifier> <name pos:line="106" pos:column="15">bool</name></type> <name pos:line="106" pos:column="20">isMETAPOSTstring</name><parameter_list pos:line="106" pos:column="36">(<param><decl><type><name pos:line="106" pos:column="37">int</name></type> <name pos:line="106" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="106" pos:column="45">{
	<return pos:line="107" pos:column="9">return
      <expr><op:operator pos:line="108" pos:column="7">(</op:operator><name pos:line="108" pos:column="8">ch</name> <op:operator pos:line="108" pos:column="11">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="14">'\"'</lit:literal><op:operator pos:line="108" pos:column="18">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="111" pos:column="1">static</specifier> <specifier pos:line="111" pos:column="8">inline</specifier> <name pos:line="111" pos:column="15">bool</name></type> <name pos:line="111" pos:column="20">isMETAPOSTcolon</name><parameter_list pos:line="111" pos:column="35">(<param><decl><type><name pos:line="111" pos:column="36">int</name></type> <name pos:line="111" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="44">{
	<return pos:line="112" pos:column="9">return
		<expr><op:operator pos:line="113" pos:column="17">(</op:operator><name pos:line="113" pos:column="18">ch</name> <op:operator pos:line="113" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="113" pos:column="24">':'</lit:literal><op:operator pos:line="113" pos:column="27">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="116" pos:column="1">static</specifier> <specifier pos:line="116" pos:column="8">inline</specifier> <name pos:line="116" pos:column="15">bool</name></type> <name pos:line="116" pos:column="20">isMETAPOSTequal</name><parameter_list pos:line="116" pos:column="35">(<param><decl><type><name pos:line="116" pos:column="36">int</name></type> <name pos:line="116" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="116" pos:column="44">{
	<return pos:line="117" pos:column="9">return
		<expr><op:operator pos:line="118" pos:column="17">(</op:operator><name pos:line="118" pos:column="18">ch</name> <op:operator pos:line="118" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="24">'='</lit:literal><op:operator pos:line="118" pos:column="27">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="121" pos:column="1">static</specifier> <name pos:line="121" pos:column="8">int</name></type> <name pos:line="121" pos:column="12">CheckMETAPOSTInterface</name><parameter_list pos:line="121" pos:column="34">(
    <param><decl><type><name pos:line="122" pos:column="5">unsigned</name> <name pos:line="122" pos:column="14">int</name></type> <name pos:line="122" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="123" pos:column="5">int</name></type> <name pos:line="123" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="124" pos:column="5">Accessor</name> <type:modifier pos:line="124" pos:column="14">&amp;</type:modifier></type><name pos:line="124" pos:column="15">styler</name></decl></param>,
	<param><decl><type><name pos:line="125" pos:column="9">int</name></type> <name pos:line="125" pos:column="13">defaultInterface</name></decl></param>)</parameter_list> <block pos:line="125" pos:column="31">{

    <decl_stmt><decl><type><name pos:line="127" pos:column="5">char</name></type> <name><name pos:line="127" pos:column="10">lineBuffer</name><index pos:line="127" pos:column="20">[<expr><lit:literal type="number" pos:line="127" pos:column="21">1024</lit:literal></expr>]</index></name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="128" pos:column="9">unsigned</name> <name pos:line="128" pos:column="18">int</name></type> <name pos:line="128" pos:column="22">linePos</name> <init pos:line="128" pos:column="30">= <expr><lit:literal type="number" pos:line="128" pos:column="32">0</lit:literal></expr></init></decl> ;</decl_stmt>

	<comment type="line" pos:line="130" pos:column="9">// some day we can make something lexer.metapost.mapping=(none,0)(metapost,1)(mp,1)(metafun,2)...</comment>

    <if pos:line="132" pos:column="5">if <condition pos:line="132" pos:column="8">(<expr><call><name><name pos:line="132" pos:column="9">styler</name><op:operator pos:line="132" pos:column="15">.</op:operator><name pos:line="132" pos:column="16">SafeGetCharAt</name></name><argument_list pos:line="132" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="132" pos:column="30">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="132" pos:column="36">'%'</lit:literal></expr>)</condition><then pos:line="132" pos:column="40"> <block pos:line="132" pos:column="41">{
        <for pos:line="133" pos:column="9">for (<init><decl><type><name pos:line="133" pos:column="14">unsigned</name> <name pos:line="133" pos:column="23">int</name></type> <name pos:line="133" pos:column="27">i</name> <init pos:line="133" pos:column="29">= <expr><lit:literal type="number" pos:line="133" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="133" pos:column="34">i</name> <op:operator pos:line="133" pos:column="36">&lt;</op:operator> <name pos:line="133" pos:column="38">startPos</name> <op:operator pos:line="133" pos:column="47">+</op:operator> <name pos:line="133" pos:column="49">length</name></expr>;</condition> <incr><expr><name pos:line="133" pos:column="57">i</name><op:operator pos:line="133" pos:column="58">++</op:operator></expr></incr>) <block pos:line="133" pos:column="62">{
            <expr_stmt><expr><name><name pos:line="134" pos:column="13">lineBuffer</name><index pos:line="134" pos:column="23">[<expr><name pos:line="134" pos:column="24">linePos</name><op:operator pos:line="134" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="134" pos:column="35">=</op:operator> <call><name><name pos:line="134" pos:column="37">styler</name><op:operator pos:line="134" pos:column="43">.</op:operator><name pos:line="134" pos:column="44">SafeGetCharAt</name></name><argument_list pos:line="134" pos:column="57">(<argument><expr><name pos:line="134" pos:column="58">i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if pos:line="135" pos:column="13">if <condition pos:line="135" pos:column="16">(<expr><call><name pos:line="135" pos:column="17">endOfLine</name><argument_list pos:line="135" pos:column="26">(<argument><expr><name pos:line="135" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="135" pos:column="38">||</op:operator> <op:operator pos:line="135" pos:column="41">(</op:operator><name pos:line="135" pos:column="42">linePos</name> <op:operator pos:line="135" pos:column="50">&gt;=</op:operator> <sizeof pos:line="135" pos:column="53">sizeof<argument_list pos:line="135" pos:column="59">(<argument><expr><name pos:line="135" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="135" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="135" pos:column="74">1</lit:literal><op:operator pos:line="135" pos:column="75">)</op:operator></expr>)</condition><then pos:line="135" pos:column="77"> <block pos:line="135" pos:column="78">{
                <expr_stmt><expr><name><name pos:line="136" pos:column="17">lineBuffer</name><index pos:line="136" pos:column="27">[<expr><name pos:line="136" pos:column="28">linePos</name></expr>]</index></name> <op:operator pos:line="136" pos:column="37">=</op:operator> <lit:literal type="char" pos:line="136" pos:column="39">'\0'</lit:literal></expr>;</expr_stmt>
				<if pos:line="137" pos:column="33">if <condition pos:line="137" pos:column="36">(<expr><call><name pos:line="137" pos:column="37">strstr</name><argument_list pos:line="137" pos:column="43">(<argument><expr><name pos:line="137" pos:column="44">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="137" pos:column="56">"interface=none"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="137" pos:column="74"> <block pos:line="137" pos:column="75">{
                    <return pos:line="138" pos:column="21">return <expr><lit:literal type="number" pos:line="138" pos:column="28">0</lit:literal></expr> ;</return>
				}</block></then> <else pos:line="139" pos:column="35">else <if pos:line="139" pos:column="40">if <condition pos:line="139" pos:column="43">(<expr><call><name pos:line="139" pos:column="44">strstr</name><argument_list pos:line="139" pos:column="50">(<argument><expr><name pos:line="139" pos:column="51">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="63">"interface=metapost"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="139" pos:column="85">||</op:operator> <call><name pos:line="139" pos:column="88">strstr</name><argument_list pos:line="139" pos:column="94">(<argument><expr><name pos:line="139" pos:column="95">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="107">"interface=mp"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="139" pos:column="123"> <block pos:line="139" pos:column="124">{
                    <return pos:line="140" pos:column="21">return <expr><lit:literal type="number" pos:line="140" pos:column="28">1</lit:literal></expr> ;</return>
				}</block></then> <else pos:line="141" pos:column="35">else <if pos:line="141" pos:column="40">if <condition pos:line="141" pos:column="43">(<expr><call><name pos:line="141" pos:column="44">strstr</name><argument_list pos:line="141" pos:column="50">(<argument><expr><name pos:line="141" pos:column="51">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="63">"interface=metafun"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="141" pos:column="84"> <block pos:line="141" pos:column="85">{
                    <return pos:line="142" pos:column="21">return <expr><lit:literal type="number" pos:line="142" pos:column="28">2</lit:literal></expr> ;</return>
				}</block></then> <else pos:line="143" pos:column="35">else <if pos:line="143" pos:column="40">if <condition pos:line="143" pos:column="43">(<expr><call><name><name pos:line="143" pos:column="44">styler</name><op:operator pos:line="143" pos:column="50">.</op:operator><name pos:line="143" pos:column="51">SafeGetCharAt</name></name><argument_list pos:line="143" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="143" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="143" pos:column="71">'D'</lit:literal> <op:operator pos:line="143" pos:column="75">&amp;&amp;</op:operator> <call><name pos:line="143" pos:column="78">strstr</name><argument_list pos:line="143" pos:column="84">(<argument><expr><name pos:line="143" pos:column="85">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="143" pos:column="97">"%D \\module"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="143" pos:column="112"> <block pos:line="143" pos:column="113">{
					<comment type="line" pos:line="144" pos:column="41">// better would be to limit the search to just one line</comment>
					<return pos:line="145" pos:column="41">return <expr><lit:literal type="number" pos:line="145" pos:column="48">2</lit:literal></expr> ;</return>
                }</block></then> <else pos:line="146" pos:column="19">else <block pos:line="146" pos:column="24">{
                    <return pos:line="147" pos:column="21">return <expr><name pos:line="147" pos:column="28">defaultInterface</name></expr> ;</return>
                }</block></else></if></else></if></else></if></else></if>
            }</block></then></if>
		}</block></for>
    }</block></then></if>

    <return pos:line="153" pos:column="5">return <expr><name pos:line="153" pos:column="12">defaultInterface</name></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="156" pos:column="1">static</specifier> <name pos:line="156" pos:column="8">void</name></type> <name pos:line="156" pos:column="13">ColouriseMETAPOSTDoc</name><parameter_list pos:line="156" pos:column="33">(
    <param><decl><type><name pos:line="157" pos:column="5">unsigned</name> <name pos:line="157" pos:column="14">int</name></type> <name pos:line="157" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="158" pos:column="5">int</name></type> <name pos:line="158" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="159" pos:column="5">int</name></type></decl></param>,
    <param><decl><type><name pos:line="160" pos:column="5">WordList</name> <type:modifier pos:line="160" pos:column="14">*</type:modifier></type><name><name pos:line="160" pos:column="15">keywordlists</name><index pos:line="160" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="161" pos:column="5">Accessor</name> <type:modifier pos:line="161" pos:column="14">&amp;</type:modifier></type><name pos:line="161" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="161" pos:column="23">{

	<expr_stmt><expr><call><name><name pos:line="163" pos:column="9">styler</name><op:operator pos:line="163" pos:column="15">.</op:operator><name pos:line="163" pos:column="16">StartAt</name></name><argument_list pos:line="163" pos:column="23">(<argument><expr><name pos:line="163" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="164" pos:column="9">styler</name><op:operator pos:line="164" pos:column="15">.</op:operator><name pos:line="164" pos:column="16">StartSegment</name></name><argument_list pos:line="164" pos:column="28">(<argument><expr><name pos:line="164" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="166" pos:column="9">bool</name></type> <name pos:line="166" pos:column="14">processComment</name>   <init pos:line="166" pos:column="31">= <expr><call><name><name pos:line="166" pos:column="33">styler</name><op:operator pos:line="166" pos:column="39">.</op:operator><name pos:line="166" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="166" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="55">"lexer.metapost.comment.process"</lit:literal></expr></argument>,   <argument><expr><lit:literal type="number" pos:line="166" pos:column="91">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="166" pos:column="94">==</op:operator> <lit:literal type="number" pos:line="166" pos:column="97">1</lit:literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="167" pos:column="5">int</name></type>  <name pos:line="167" pos:column="10">defaultInterface</name> <init pos:line="167" pos:column="27">= <expr><call><name><name pos:line="167" pos:column="29">styler</name><op:operator pos:line="167" pos:column="35">.</op:operator><name pos:line="167" pos:column="36">GetPropertyInt</name></name><argument_list pos:line="167" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="167" pos:column="51">"lexer.metapost.interface.default"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="167" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="169" pos:column="9">int</name></type> <name pos:line="169" pos:column="13">currentInterface</name> <init pos:line="169" pos:column="30">= <expr><call><name pos:line="169" pos:column="32">CheckMETAPOSTInterface</name><argument_list pos:line="169" pos:column="54">(<argument><expr><name pos:line="169" pos:column="55">startPos</name></expr></argument>,<argument><expr><name pos:line="169" pos:column="64">length</name></expr></argument>,<argument><expr><name pos:line="169" pos:column="71">styler</name></expr></argument>,<argument><expr><name pos:line="169" pos:column="78">defaultInterface</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

	<comment type="line" pos:line="171" pos:column="9">// 0  no keyword highlighting</comment>
	<comment type="line" pos:line="172" pos:column="9">// 1  metapost keyword hightlighting</comment>
	<comment type="line" pos:line="173" pos:column="9">// 2+ metafun keyword hightlighting</comment>

	<decl_stmt><decl><type><name pos:line="175" pos:column="9">int</name></type> <name pos:line="175" pos:column="13">extraInterface</name> <init pos:line="175" pos:column="28">= <expr><lit:literal type="number" pos:line="175" pos:column="30">0</lit:literal></expr></init></decl> ;</decl_stmt>

	<if pos:line="177" pos:column="9">if <condition pos:line="177" pos:column="12">(<expr><name pos:line="177" pos:column="13">currentInterface</name> <op:operator pos:line="177" pos:column="30">!=</op:operator> <lit:literal type="number" pos:line="177" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="177" pos:column="35"> <block pos:line="177" pos:column="36">{
		<expr_stmt><expr><name pos:line="178" pos:column="17">extraInterface</name> <op:operator pos:line="178" pos:column="32">=</op:operator> <name pos:line="178" pos:column="34">currentInterface</name></expr> ;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="181" pos:column="9">WordList</name> <type:modifier pos:line="181" pos:column="18">&amp;</type:modifier></type><name pos:line="181" pos:column="19">keywords</name>  <init pos:line="181" pos:column="29">= <expr><op:operator pos:line="181" pos:column="31">*</op:operator><name><name pos:line="181" pos:column="32">keywordlists</name><index pos:line="181" pos:column="44">[<expr><lit:literal type="number" pos:line="181" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="182" pos:column="9">WordList</name> <type:modifier pos:line="182" pos:column="18">&amp;</type:modifier></type><name pos:line="182" pos:column="19">keywords2</name> <init pos:line="182" pos:column="29">= <expr><op:operator pos:line="182" pos:column="31">*</op:operator><name><name pos:line="182" pos:column="32">keywordlists</name><index pos:line="182" pos:column="44">[<expr><name pos:line="182" pos:column="45">extraInterface</name><op:operator pos:line="182" pos:column="59">-</op:operator><lit:literal type="number" pos:line="182" pos:column="60">1</lit:literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

	<function_decl><type><name pos:line="184" pos:column="9">StyleContext</name></type> <name pos:line="184" pos:column="22">sc</name><parameter_list pos:line="184" pos:column="24">(<param><decl><type><name pos:line="184" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="184" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="184" pos:column="43">SCE_METAPOST_TEXT</name></type></decl></param>, <param><decl><type><name pos:line="184" pos:column="62">styler</name></type></decl></param>)</parameter_list> ;</function_decl>

	<decl_stmt><decl><type><name pos:line="186" pos:column="9">char</name></type> <name><name pos:line="186" pos:column="14">key</name><index pos:line="186" pos:column="17">[<expr><lit:literal type="number" pos:line="186" pos:column="18">100</lit:literal></expr>]</index></name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="188" pos:column="5">bool</name></type> <name pos:line="188" pos:column="10">inTeX</name>     <init pos:line="188" pos:column="20">= <expr><lit:literal type="boolean" pos:line="188" pos:column="22">false</lit:literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="189" pos:column="9">bool</name></type> <name pos:line="189" pos:column="14">inComment</name> <init pos:line="189" pos:column="24">= <expr><lit:literal type="boolean" pos:line="189" pos:column="26">false</lit:literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="190" pos:column="9">bool</name></type> <name pos:line="190" pos:column="14">inString</name>  <init pos:line="190" pos:column="24">= <expr><lit:literal type="boolean" pos:line="190" pos:column="26">false</lit:literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="191" pos:column="9">bool</name></type> <name pos:line="191" pos:column="14">inClause</name>  <init pos:line="191" pos:column="24">= <expr><lit:literal type="boolean" pos:line="191" pos:column="26">false</lit:literal></expr></init></decl> ;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="193" pos:column="9">bool</name></type> <name pos:line="193" pos:column="14">going</name> <init pos:line="193" pos:column="20">= <expr><call><name><name pos:line="193" pos:column="22">sc</name><op:operator pos:line="193" pos:column="24">.</op:operator><name pos:line="193" pos:column="25">More</name></name><argument_list pos:line="193" pos:column="29">()</argument_list></call></expr></init></decl> ;</decl_stmt> <comment type="line" pos:line="193" pos:column="34">// needed because of a fuzzy end of file state</comment>

	<for pos:line="195" pos:column="9">for (<init pos:line="195" pos:column="14">;</init> <condition><expr><name pos:line="195" pos:column="16">going</name></expr>;</condition> <incr><expr><call><name><name pos:line="195" pos:column="23">sc</name><op:operator pos:line="195" pos:column="25">.</op:operator><name pos:line="195" pos:column="26">Forward</name></name><argument_list pos:line="195" pos:column="33">()</argument_list></call></expr></incr>) <block pos:line="195" pos:column="37">{

		<if pos:line="197" pos:column="17">if <condition pos:line="197" pos:column="20">(<expr><op:operator pos:line="197" pos:column="21">!</op:operator> <call><name><name pos:line="197" pos:column="23">sc</name><op:operator pos:line="197" pos:column="25">.</op:operator><name pos:line="197" pos:column="26">More</name></name><argument_list pos:line="197" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="197" pos:column="33"> <block pos:line="197" pos:column="34">{ <expr_stmt><expr><name pos:line="197" pos:column="36">going</name> <op:operator pos:line="197" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="197" pos:column="44">false</lit:literal></expr> ;</expr_stmt> }</block></then></if> <comment type="line" pos:line="197" pos:column="54">// we need to go one behind the end of text</comment>

		<if pos:line="199" pos:column="17">if <condition pos:line="199" pos:column="20">(<expr><name pos:line="199" pos:column="21">inClause</name></expr>)</condition><then pos:line="199" pos:column="30"> <block pos:line="199" pos:column="31">{
			<expr_stmt><expr><call><name><name pos:line="200" pos:column="25">sc</name><op:operator pos:line="200" pos:column="27">.</op:operator><name pos:line="200" pos:column="28">SetState</name></name><argument_list pos:line="200" pos:column="36">(<argument><expr><name pos:line="200" pos:column="37">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
			<expr_stmt><expr><name pos:line="201" pos:column="25">inClause</name> <op:operator pos:line="201" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="201" pos:column="36">false</lit:literal></expr> ;</expr_stmt>
		}</block></then></if>

		<if pos:line="204" pos:column="17">if <condition pos:line="204" pos:column="20">(<expr><name pos:line="204" pos:column="21">inComment</name></expr>)</condition><then pos:line="204" pos:column="31"> <block pos:line="204" pos:column="32">{
			<if pos:line="205" pos:column="25">if <condition pos:line="205" pos:column="28">(<expr><name><name pos:line="205" pos:column="29">sc</name><op:operator pos:line="205" pos:column="31">.</op:operator><name pos:line="205" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="205" pos:column="42"> <block pos:line="205" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="206" pos:column="33">sc</name><op:operator pos:line="206" pos:column="35">.</op:operator><name pos:line="206" pos:column="36">SetState</name></name><argument_list pos:line="206" pos:column="44">(<argument><expr><name pos:line="206" pos:column="45">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="207" pos:column="33">inTeX</name> <op:operator pos:line="207" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="207" pos:column="41">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="208" pos:column="33">inComment</name> <op:operator pos:line="208" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="208" pos:column="45">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="209" pos:column="33">inClause</name> <op:operator pos:line="209" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="209" pos:column="44">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="210" pos:column="33">inString</name> <op:operator pos:line="210" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="210" pos:column="44">false</lit:literal></expr> ;</expr_stmt> <comment type="line" pos:line="210" pos:column="52">// not correct but we want to stimulate one-lines</comment>
			}</block></then></if>
		}</block></then> <else pos:line="212" pos:column="19">else <if pos:line="212" pos:column="24">if <condition pos:line="212" pos:column="27">(<expr><name pos:line="212" pos:column="28">inString</name></expr>)</condition><then pos:line="212" pos:column="37"> <block pos:line="212" pos:column="38">{
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><call><name pos:line="213" pos:column="29">isMETAPOSTstring</name><argument_list pos:line="213" pos:column="45">(<argument><expr><name><name pos:line="213" pos:column="46">sc</name><op:operator pos:line="213" pos:column="48">.</op:operator><name pos:line="213" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="213" pos:column="53"> <block pos:line="213" pos:column="54">{
				<expr_stmt><expr><call><name><name pos:line="214" pos:column="33">sc</name><op:operator pos:line="214" pos:column="35">.</op:operator><name pos:line="214" pos:column="36">SetState</name></name><argument_list pos:line="214" pos:column="44">(<argument><expr><name pos:line="214" pos:column="45">SCE_METAPOST_SPECIAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="215" pos:column="33">sc</name><op:operator pos:line="215" pos:column="35">.</op:operator><name pos:line="215" pos:column="36">ForwardSetState</name></name><argument_list pos:line="215" pos:column="51">(<argument><expr><name pos:line="215" pos:column="52">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="216" pos:column="33">inString</name> <op:operator pos:line="216" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="216" pos:column="44">false</lit:literal></expr> ;</expr_stmt>
			}</block></then> <else pos:line="217" pos:column="27">else <if pos:line="217" pos:column="32">if <condition pos:line="217" pos:column="35">(<expr><name><name pos:line="217" pos:column="36">sc</name><op:operator pos:line="217" pos:column="38">.</op:operator><name pos:line="217" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="217" pos:column="49"> <block pos:line="217" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="218" pos:column="33">sc</name><op:operator pos:line="218" pos:column="35">.</op:operator><name pos:line="218" pos:column="36">SetState</name></name><argument_list pos:line="218" pos:column="44">(<argument><expr><name pos:line="218" pos:column="45">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="219" pos:column="33">inTeX</name> <op:operator pos:line="219" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="219" pos:column="41">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="220" pos:column="33">inComment</name> <op:operator pos:line="220" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="220" pos:column="45">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="221" pos:column="33">inClause</name> <op:operator pos:line="221" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="221" pos:column="44">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="222" pos:column="33">inString</name> <op:operator pos:line="222" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="222" pos:column="44">false</lit:literal></expr> ;</expr_stmt> <comment type="line" pos:line="222" pos:column="52">// not correct but we want to stimulate one-lines</comment>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="224" pos:column="19">else <block pos:line="224" pos:column="24">{
			<if pos:line="225" pos:column="25">if <condition pos:line="225" pos:column="28">(<expr><op:operator pos:line="225" pos:column="29">(</op:operator><op:operator pos:line="225" pos:column="30">!</op:operator> <call><name pos:line="225" pos:column="32">isMETAPOSTidentifier</name><argument_list pos:line="225" pos:column="52">(<argument><expr><name><name pos:line="225" pos:column="53">sc</name><op:operator pos:line="225" pos:column="55">.</op:operator><name pos:line="225" pos:column="56">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="225" pos:column="59">)</op:operator> <op:operator pos:line="225" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="225" pos:column="64">(</op:operator><call><name><name pos:line="225" pos:column="65">sc</name><op:operator pos:line="225" pos:column="67">.</op:operator><name pos:line="225" pos:column="68">LengthCurrent</name></name><argument_list pos:line="225" pos:column="81">()</argument_list></call> <op:operator pos:line="225" pos:column="84">&gt;</op:operator> <lit:literal type="number" pos:line="225" pos:column="86">0</lit:literal><op:operator pos:line="225" pos:column="87">)</op:operator></expr>)</condition><then pos:line="225" pos:column="89"> <block pos:line="225" pos:column="90">{
				<if pos:line="226" pos:column="33">if <condition pos:line="226" pos:column="36">(<expr><name><name pos:line="226" pos:column="37">sc</name><op:operator pos:line="226" pos:column="39">.</op:operator><name pos:line="226" pos:column="40">state</name></name> <op:operator pos:line="226" pos:column="46">==</op:operator> <name pos:line="226" pos:column="49">SCE_METAPOST_COMMAND</name></expr>)</condition><then pos:line="226" pos:column="70"> <block pos:line="226" pos:column="71">{
					<expr_stmt><expr><call><name><name pos:line="227" pos:column="41">sc</name><op:operator pos:line="227" pos:column="43">.</op:operator><name pos:line="227" pos:column="44">GetCurrent</name></name><argument_list pos:line="227" pos:column="54">(<argument><expr><name pos:line="227" pos:column="55">key</name></expr></argument>, <argument><expr><sizeof pos:line="227" pos:column="60">sizeof<argument_list pos:line="227" pos:column="66">(<argument><expr><name pos:line="227" pos:column="67">key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<if pos:line="228" pos:column="41">if <condition pos:line="228" pos:column="44">(<expr><op:operator pos:line="228" pos:column="45">(</op:operator><call><name pos:line="228" pos:column="46">strcmp</name><argument_list pos:line="228" pos:column="52">(<argument><expr><name pos:line="228" pos:column="53">key</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="228" pos:column="57">"btex"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="228" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="228" pos:column="68">0</lit:literal><op:operator pos:line="228" pos:column="69">)</op:operator> <op:operator pos:line="228" pos:column="71">||</op:operator> <op:operator pos:line="228" pos:column="74">(</op:operator><call><name pos:line="228" pos:column="75">strcmp</name><argument_list pos:line="228" pos:column="81">(<argument><expr><name pos:line="228" pos:column="82">key</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="228" pos:column="86">"verbatimtex"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="228" pos:column="101">==</op:operator> <lit:literal type="number" pos:line="228" pos:column="104">0</lit:literal><op:operator pos:line="228" pos:column="105">)</op:operator></expr>)</condition><then pos:line="228" pos:column="107"> <block pos:line="228" pos:column="108">{
    					<expr_stmt><expr><call><name><name pos:line="229" pos:column="41">sc</name><op:operator pos:line="229" pos:column="43">.</op:operator><name pos:line="229" pos:column="44">ChangeState</name></name><argument_list pos:line="229" pos:column="55">(<argument><expr><name pos:line="229" pos:column="56">SCE_METAPOST_GROUP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						<expr_stmt><expr><name pos:line="230" pos:column="49">inTeX</name> <op:operator pos:line="230" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="230" pos:column="57">true</lit:literal></expr> ;</expr_stmt>
					}</block></then> <else pos:line="231" pos:column="43">else <if pos:line="231" pos:column="48">if <condition pos:line="231" pos:column="51">(<expr><name pos:line="231" pos:column="52">inTeX</name></expr>)</condition><then pos:line="231" pos:column="58"> <block pos:line="231" pos:column="59">{
						<if pos:line="232" pos:column="49">if <condition pos:line="232" pos:column="52">(<expr><call><name pos:line="232" pos:column="53">strcmp</name><argument_list pos:line="232" pos:column="59">(<argument><expr><name pos:line="232" pos:column="60">key</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="232" pos:column="64">"etex"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="232" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="232" pos:column="75">0</lit:literal></expr>)</condition><then pos:line="232" pos:column="77"> <block pos:line="232" pos:column="78">{
	    					<expr_stmt><expr><call><name><name pos:line="233" pos:column="49">sc</name><op:operator pos:line="233" pos:column="51">.</op:operator><name pos:line="233" pos:column="52">ChangeState</name></name><argument_list pos:line="233" pos:column="63">(<argument><expr><name pos:line="233" pos:column="64">SCE_METAPOST_GROUP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
							<expr_stmt><expr><name pos:line="234" pos:column="57">inTeX</name> <op:operator pos:line="234" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="234" pos:column="65">false</lit:literal></expr> ;</expr_stmt>
						}</block></then> <else pos:line="235" pos:column="51">else <block pos:line="235" pos:column="56">{
	    					<expr_stmt><expr><call><name><name pos:line="236" pos:column="49">sc</name><op:operator pos:line="236" pos:column="51">.</op:operator><name pos:line="236" pos:column="52">ChangeState</name></name><argument_list pos:line="236" pos:column="63">(<argument><expr><name pos:line="236" pos:column="64">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						}</block></else></if>
					}</block></then> <else pos:line="238" pos:column="43">else <block pos:line="238" pos:column="48">{
						<if pos:line="239" pos:column="49">if <condition pos:line="239" pos:column="52">(<expr><name pos:line="239" pos:column="53">keywords</name> <op:operator pos:line="239" pos:column="62">&amp;&amp;</op:operator> <call><name><name pos:line="239" pos:column="65">keywords</name><op:operator pos:line="239" pos:column="73">.</op:operator><name pos:line="239" pos:column="74">InList</name></name><argument_list pos:line="239" pos:column="80">(<argument><expr><name pos:line="239" pos:column="81">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="239" pos:column="86"> <block pos:line="239" pos:column="87">{
    						<expr_stmt><expr><call><name><name pos:line="240" pos:column="49">sc</name><op:operator pos:line="240" pos:column="51">.</op:operator><name pos:line="240" pos:column="52">ChangeState</name></name><argument_list pos:line="240" pos:column="63">(<argument><expr><name pos:line="240" pos:column="64">SCE_METAPOST_COMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						}</block></then> <else pos:line="241" pos:column="51">else <if pos:line="241" pos:column="56">if <condition pos:line="241" pos:column="59">(<expr><name pos:line="241" pos:column="60">keywords2</name> <op:operator pos:line="241" pos:column="70">&amp;&amp;</op:operator> <call><name><name pos:line="241" pos:column="73">keywords2</name><op:operator pos:line="241" pos:column="82">.</op:operator><name pos:line="241" pos:column="83">InList</name></name><argument_list pos:line="241" pos:column="89">(<argument><expr><name pos:line="241" pos:column="90">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="241" pos:column="95"> <block pos:line="241" pos:column="96">{
							<expr_stmt><expr><call><name><name pos:line="242" pos:column="57">sc</name><op:operator pos:line="242" pos:column="59">.</op:operator><name pos:line="242" pos:column="60">ChangeState</name></name><argument_list pos:line="242" pos:column="71">(<argument><expr><name pos:line="242" pos:column="72">SCE_METAPOST_EXTRA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						}</block></then> <else pos:line="243" pos:column="51">else <block pos:line="243" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="244" pos:column="57">sc</name><op:operator pos:line="244" pos:column="59">.</op:operator><name pos:line="244" pos:column="60">ChangeState</name></name><argument_list pos:line="244" pos:column="71">(<argument><expr><name pos:line="244" pos:column="72">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						}</block></else></if></else></if>
					}</block></else></if></else></if>
				}</block></then></if>
			}</block></then></if>
			<if pos:line="249" pos:column="25">if <condition pos:line="249" pos:column="28">(<expr><call><name pos:line="249" pos:column="29">isMETAPOSTcomment</name><argument_list pos:line="249" pos:column="46">(<argument><expr><name><name pos:line="249" pos:column="47">sc</name><op:operator pos:line="249" pos:column="49">.</op:operator><name pos:line="249" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="249" pos:column="54"> <block pos:line="249" pos:column="55">{
				<if pos:line="250" pos:column="33">if <condition pos:line="250" pos:column="36">(<expr><op:operator pos:line="250" pos:column="37">!</op:operator> <name pos:line="250" pos:column="39">inTeX</name></expr>)</condition><then pos:line="250" pos:column="45"> <block pos:line="250" pos:column="46">{
					<expr_stmt><expr><call><name><name pos:line="251" pos:column="41">sc</name><op:operator pos:line="251" pos:column="43">.</op:operator><name pos:line="251" pos:column="44">SetState</name></name><argument_list pos:line="251" pos:column="52">(<argument><expr><name pos:line="251" pos:column="53">SCE_METAPOST_SYMBOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="252" pos:column="41">sc</name><op:operator pos:line="252" pos:column="43">.</op:operator><name pos:line="252" pos:column="44">ForwardSetState</name></name><argument_list pos:line="252" pos:column="59">(<argument><expr><name pos:line="252" pos:column="60">SCE_METAPOST_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<expr_stmt><expr><name pos:line="253" pos:column="41">inComment</name> <op:operator pos:line="253" pos:column="51">=</op:operator> <op:operator pos:line="253" pos:column="53">!</op:operator> <name pos:line="253" pos:column="55">processComment</name></expr> ;</expr_stmt>
				}</block></then> <else pos:line="254" pos:column="35">else <block pos:line="254" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="255" pos:column="41">sc</name><op:operator pos:line="255" pos:column="43">.</op:operator><name pos:line="255" pos:column="44">SetState</name></name><argument_list pos:line="255" pos:column="52">(<argument><expr><name pos:line="255" pos:column="53">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="257" pos:column="27">else <if pos:line="257" pos:column="32">if <condition pos:line="257" pos:column="35">(<expr><call><name pos:line="257" pos:column="36">isMETAPOSTstring</name><argument_list pos:line="257" pos:column="52">(<argument><expr><name><name pos:line="257" pos:column="53">sc</name><op:operator pos:line="257" pos:column="55">.</op:operator><name pos:line="257" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="257" pos:column="60"> <block pos:line="257" pos:column="61">{
				<if pos:line="258" pos:column="33">if <condition pos:line="258" pos:column="36">(<expr><op:operator pos:line="258" pos:column="37">!</op:operator> <name pos:line="258" pos:column="39">inTeX</name></expr>)</condition><then pos:line="258" pos:column="45"> <block pos:line="258" pos:column="46">{
					<expr_stmt><expr><call><name><name pos:line="259" pos:column="41">sc</name><op:operator pos:line="259" pos:column="43">.</op:operator><name pos:line="259" pos:column="44">SetState</name></name><argument_list pos:line="259" pos:column="52">(<argument><expr><name pos:line="259" pos:column="53">SCE_METAPOST_SPECIAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<if pos:line="260" pos:column="41">if <condition pos:line="260" pos:column="44">(<expr><op:operator pos:line="260" pos:column="45">!</op:operator> <call><name pos:line="260" pos:column="47">isMETAPOSTstring</name><argument_list pos:line="260" pos:column="63">(<argument><expr><name><name pos:line="260" pos:column="64">sc</name><op:operator pos:line="260" pos:column="66">.</op:operator><name pos:line="260" pos:column="67">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="260" pos:column="75"> <block pos:line="260" pos:column="76">{
						<expr_stmt><expr><call><name><name pos:line="261" pos:column="49">sc</name><op:operator pos:line="261" pos:column="51">.</op:operator><name pos:line="261" pos:column="52">ForwardSetState</name></name><argument_list pos:line="261" pos:column="67">(<argument><expr><name pos:line="261" pos:column="68">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="263" pos:column="41">inString</name> <op:operator pos:line="263" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="263" pos:column="52">true</lit:literal></expr> ;</expr_stmt>
				}</block></then> <else pos:line="264" pos:column="35">else <block pos:line="264" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="265" pos:column="41">sc</name><op:operator pos:line="265" pos:column="43">.</op:operator><name pos:line="265" pos:column="44">SetState</name></name><argument_list pos:line="265" pos:column="52">(<argument><expr><name pos:line="265" pos:column="53">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="267" pos:column="27">else <if pos:line="267" pos:column="32">if <condition pos:line="267" pos:column="35">(<expr><call><name pos:line="267" pos:column="36">isMETAPOSTcolon</name><argument_list pos:line="267" pos:column="51">(<argument><expr><name><name pos:line="267" pos:column="52">sc</name><op:operator pos:line="267" pos:column="54">.</op:operator><name pos:line="267" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="267" pos:column="59"> <block pos:line="267" pos:column="60">{
				<if pos:line="268" pos:column="33">if <condition pos:line="268" pos:column="36">(<expr><op:operator pos:line="268" pos:column="37">!</op:operator> <name pos:line="268" pos:column="39">inTeX</name></expr>)</condition><then pos:line="268" pos:column="45"> <block pos:line="268" pos:column="46">{
					<if pos:line="269" pos:column="41">if <condition pos:line="269" pos:column="44">(<expr><op:operator pos:line="269" pos:column="45">!</op:operator> <call><name pos:line="269" pos:column="47">isMETAPOSTequal</name><argument_list pos:line="269" pos:column="62">(<argument><expr><name><name pos:line="269" pos:column="63">sc</name><op:operator pos:line="269" pos:column="65">.</op:operator><name pos:line="269" pos:column="66">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="269" pos:column="74"> <block pos:line="269" pos:column="75">{
						<expr_stmt><expr><call><name><name pos:line="270" pos:column="49">sc</name><op:operator pos:line="270" pos:column="51">.</op:operator><name pos:line="270" pos:column="52">SetState</name></name><argument_list pos:line="270" pos:column="60">(<argument><expr><name pos:line="270" pos:column="61">SCE_METAPOST_COMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
						<expr_stmt><expr><name pos:line="271" pos:column="49">inClause</name> <op:operator pos:line="271" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="271" pos:column="60">true</lit:literal></expr> ;</expr_stmt>
					}</block></then> <else pos:line="272" pos:column="43">else <block pos:line="272" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="273" pos:column="49">sc</name><op:operator pos:line="273" pos:column="51">.</op:operator><name pos:line="273" pos:column="52">SetState</name></name><argument_list pos:line="273" pos:column="60">(<argument><expr><name pos:line="273" pos:column="61">SCE_METAPOST_SPECIAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="275" pos:column="35">else <block pos:line="275" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="276" pos:column="41">sc</name><op:operator pos:line="276" pos:column="43">.</op:operator><name pos:line="276" pos:column="44">SetState</name></name><argument_list pos:line="276" pos:column="52">(<argument><expr><name pos:line="276" pos:column="53">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="278" pos:column="27">else <if pos:line="278" pos:column="32">if <condition pos:line="278" pos:column="35">(<expr><call><name pos:line="278" pos:column="36">isMETAPOSTone</name><argument_list pos:line="278" pos:column="49">(<argument><expr><name><name pos:line="278" pos:column="50">sc</name><op:operator pos:line="278" pos:column="52">.</op:operator><name pos:line="278" pos:column="53">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="278" pos:column="57"> <block pos:line="278" pos:column="58">{
				<if pos:line="279" pos:column="33">if <condition pos:line="279" pos:column="36">(<expr><op:operator pos:line="279" pos:column="37">!</op:operator> <name pos:line="279" pos:column="39">inTeX</name></expr>)</condition><then pos:line="279" pos:column="45"> <block pos:line="279" pos:column="46">{
					<expr_stmt><expr><call><name><name pos:line="280" pos:column="41">sc</name><op:operator pos:line="280" pos:column="43">.</op:operator><name pos:line="280" pos:column="44">SetState</name></name><argument_list pos:line="280" pos:column="52">(<argument><expr><name pos:line="280" pos:column="53">SCE_METAPOST_SPECIAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></then> <else pos:line="281" pos:column="35">else <block pos:line="281" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="282" pos:column="41">sc</name><op:operator pos:line="282" pos:column="43">.</op:operator><name pos:line="282" pos:column="44">SetState</name></name><argument_list pos:line="282" pos:column="52">(<argument><expr><name pos:line="282" pos:column="53">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="284" pos:column="27">else <if pos:line="284" pos:column="32">if <condition pos:line="284" pos:column="35">(<expr><call><name pos:line="284" pos:column="36">isMETAPOSTtwo</name><argument_list pos:line="284" pos:column="49">(<argument><expr><name><name pos:line="284" pos:column="50">sc</name><op:operator pos:line="284" pos:column="52">.</op:operator><name pos:line="284" pos:column="53">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="284" pos:column="57"> <block pos:line="284" pos:column="58">{
				<if pos:line="285" pos:column="33">if <condition pos:line="285" pos:column="36">(<expr><op:operator pos:line="285" pos:column="37">!</op:operator> <name pos:line="285" pos:column="39">inTeX</name></expr>)</condition><then pos:line="285" pos:column="45"> <block pos:line="285" pos:column="46">{
					<expr_stmt><expr><call><name><name pos:line="286" pos:column="41">sc</name><op:operator pos:line="286" pos:column="43">.</op:operator><name pos:line="286" pos:column="44">SetState</name></name><argument_list pos:line="286" pos:column="52">(<argument><expr><name pos:line="286" pos:column="53">SCE_METAPOST_GROUP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></then> <else pos:line="287" pos:column="35">else <block pos:line="287" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="288" pos:column="41">sc</name><op:operator pos:line="288" pos:column="43">.</op:operator><name pos:line="288" pos:column="44">SetState</name></name><argument_list pos:line="288" pos:column="52">(<argument><expr><name pos:line="288" pos:column="53">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="290" pos:column="27">else <if pos:line="290" pos:column="32">if <condition pos:line="290" pos:column="35">(<expr><call><name pos:line="290" pos:column="36">isMETAPOSTthree</name><argument_list pos:line="290" pos:column="51">(<argument><expr><name><name pos:line="290" pos:column="52">sc</name><op:operator pos:line="290" pos:column="54">.</op:operator><name pos:line="290" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="290" pos:column="59"> <block pos:line="290" pos:column="60">{
				<if pos:line="291" pos:column="33">if <condition pos:line="291" pos:column="36">(<expr><op:operator pos:line="291" pos:column="37">!</op:operator> <name pos:line="291" pos:column="39">inTeX</name></expr>)</condition><then pos:line="291" pos:column="45"> <block pos:line="291" pos:column="46">{
					<expr_stmt><expr><call><name><name pos:line="292" pos:column="41">sc</name><op:operator pos:line="292" pos:column="43">.</op:operator><name pos:line="292" pos:column="44">SetState</name></name><argument_list pos:line="292" pos:column="52">(<argument><expr><name pos:line="292" pos:column="53">SCE_METAPOST_SYMBOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></then> <else pos:line="293" pos:column="35">else <block pos:line="293" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="294" pos:column="41">sc</name><op:operator pos:line="294" pos:column="43">.</op:operator><name pos:line="294" pos:column="44">SetState</name></name><argument_list pos:line="294" pos:column="52">(<argument><expr><name pos:line="294" pos:column="53">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="296" pos:column="27">else <if pos:line="296" pos:column="32">if <condition pos:line="296" pos:column="35">(<expr><call><name pos:line="296" pos:column="36">isMETAPOSTidentifier</name><argument_list pos:line="296" pos:column="56">(<argument><expr><name><name pos:line="296" pos:column="57">sc</name><op:operator pos:line="296" pos:column="59">.</op:operator><name pos:line="296" pos:column="60">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="296" pos:column="64"> <block pos:line="296" pos:column="65">{
				<if pos:line="297" pos:column="33">if <condition pos:line="297" pos:column="36">(<expr><name><name pos:line="297" pos:column="37">sc</name><op:operator pos:line="297" pos:column="39">.</op:operator><name pos:line="297" pos:column="40">state</name></name> <op:operator pos:line="297" pos:column="46">!=</op:operator> <name pos:line="297" pos:column="49">SCE_METAPOST_COMMAND</name></expr>)</condition><then pos:line="297" pos:column="70"> <block pos:line="297" pos:column="71">{
					<expr_stmt><expr><call><name><name pos:line="298" pos:column="41">sc</name><op:operator pos:line="298" pos:column="43">.</op:operator><name pos:line="298" pos:column="44">SetState</name></name><argument_list pos:line="298" pos:column="52">(<argument><expr><name pos:line="298" pos:column="53">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="299" pos:column="41">sc</name><op:operator pos:line="299" pos:column="43">.</op:operator><name pos:line="299" pos:column="44">ChangeState</name></name><argument_list pos:line="299" pos:column="55">(<argument><expr><name pos:line="299" pos:column="56">SCE_METAPOST_COMMAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="301" pos:column="27">else <if pos:line="301" pos:column="32">if <condition pos:line="301" pos:column="35">(<expr><call><name pos:line="301" pos:column="36">isMETAPOSTnumber</name><argument_list pos:line="301" pos:column="52">(<argument><expr><name><name pos:line="301" pos:column="53">sc</name><op:operator pos:line="301" pos:column="55">.</op:operator><name pos:line="301" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="301" pos:column="60"> <block pos:line="301" pos:column="61">{
				<comment type="line" pos:line="302" pos:column="33">// rather redundant since for the moment we don't handle numbers</comment>
				<expr_stmt><expr><call><name><name pos:line="303" pos:column="33">sc</name><op:operator pos:line="303" pos:column="35">.</op:operator><name pos:line="303" pos:column="36">SetState</name></name><argument_list pos:line="303" pos:column="44">(<argument><expr><name pos:line="303" pos:column="45">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
			}</block></then> <else pos:line="304" pos:column="27">else <if pos:line="304" pos:column="32">if <condition pos:line="304" pos:column="35">(<expr><name><name pos:line="304" pos:column="36">sc</name><op:operator pos:line="304" pos:column="38">.</op:operator><name pos:line="304" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="304" pos:column="49"> <block pos:line="304" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="305" pos:column="33">sc</name><op:operator pos:line="305" pos:column="35">.</op:operator><name pos:line="305" pos:column="36">SetState</name></name><argument_list pos:line="305" pos:column="44">(<argument><expr><name pos:line="305" pos:column="45">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="306" pos:column="33">inTeX</name> <op:operator pos:line="306" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="306" pos:column="41">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="307" pos:column="33">inComment</name> <op:operator pos:line="307" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="307" pos:column="45">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="308" pos:column="33">inClause</name> <op:operator pos:line="308" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="308" pos:column="44">false</lit:literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name pos:line="309" pos:column="33">inString</name> <op:operator pos:line="309" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="309" pos:column="44">false</lit:literal></expr> ;</expr_stmt>
			}</block></then> <else pos:line="310" pos:column="27">else <block pos:line="310" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="311" pos:column="33">sc</name><op:operator pos:line="311" pos:column="35">.</op:operator><name pos:line="311" pos:column="36">SetState</name></name><argument_list pos:line="311" pos:column="44">(<argument><expr><name pos:line="311" pos:column="45">SCE_METAPOST_TEXT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></else></if></else></if>

	}</block></for>

	<expr_stmt><expr><call><name><name pos:line="317" pos:column="9">sc</name><op:operator pos:line="317" pos:column="11">.</op:operator><name pos:line="317" pos:column="12">Complete</name></name><argument_list pos:line="317" pos:column="20">()</argument_list></call></expr>;</expr_stmt>

}</block></function>

<comment type="line" pos:line="321" pos:column="1">// Hooks info the system:</comment>

<decl_stmt><decl><type><specifier pos:line="323" pos:column="1">static</specifier> <specifier pos:line="323" pos:column="8">const</specifier> <name pos:line="323" pos:column="14">char</name> <type:modifier pos:line="323" pos:column="19">*</type:modifier> <specifier pos:line="323" pos:column="21">const</specifier></type> <name><name pos:line="323" pos:column="27">metapostWordListDesc</name><index pos:line="323" pos:column="47">[]</index></name> <init pos:line="323" pos:column="50">= <expr><block pos:line="323" pos:column="52">{
	<expr><lit:literal type="string" pos:line="324" pos:column="9">"MetaPost"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="325" pos:column="9">"MetaFun"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="326" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl> ;</decl_stmt>

<function><type><specifier pos:line="329" pos:column="1">static</specifier> <name pos:line="329" pos:column="8">int</name></type> <name pos:line="329" pos:column="12">classifyFoldPointMetapost</name><parameter_list pos:line="329" pos:column="37">(<param><decl><type><specifier pos:line="329" pos:column="38">const</specifier> <name pos:line="329" pos:column="44">char</name><type:modifier pos:line="329" pos:column="48">*</type:modifier></type> <name pos:line="329" pos:column="50">s</name></decl></param>,<param><decl><type><name pos:line="329" pos:column="52">WordList</name> <type:modifier pos:line="329" pos:column="61">*</type:modifier></type><name><name pos:line="329" pos:column="62">keywordlists</name><index pos:line="329" pos:column="74">[]</index></name></decl></param>)</parameter_list> <block pos:line="329" pos:column="78">{
	<decl_stmt><decl><type><name pos:line="330" pos:column="9">WordList</name><type:modifier pos:line="330" pos:column="17">&amp;</type:modifier></type> <name pos:line="330" pos:column="19">keywordsStart</name><init pos:line="330" pos:column="32">=<expr><op:operator pos:line="330" pos:column="33">*</op:operator><name><name pos:line="330" pos:column="34">keywordlists</name><index pos:line="330" pos:column="46">[<expr><lit:literal type="number" pos:line="330" pos:column="47">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="331" pos:column="9">WordList</name><type:modifier pos:line="331" pos:column="17">&amp;</type:modifier></type> <name pos:line="331" pos:column="19">keywordsStop1</name><init pos:line="331" pos:column="32">=<expr><op:operator pos:line="331" pos:column="33">*</op:operator><name><name pos:line="331" pos:column="34">keywordlists</name><index pos:line="331" pos:column="46">[<expr><lit:literal type="number" pos:line="331" pos:column="47">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if pos:line="333" pos:column="9">if <condition pos:line="333" pos:column="12">(<expr><call><name><name pos:line="333" pos:column="13">keywordsStart</name><op:operator pos:line="333" pos:column="26">.</op:operator><name pos:line="333" pos:column="27">InList</name></name><argument_list pos:line="333" pos:column="33">(<argument><expr><name pos:line="333" pos:column="34">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="333" pos:column="37"> <block pos:line="333" pos:column="38">{<return pos:line="333" pos:column="39">return <expr><lit:literal type="number" pos:line="333" pos:column="46">1</lit:literal></expr>;</return>}</block></then>
	<else pos:line="334" pos:column="9">else <if pos:line="334" pos:column="14">if <condition pos:line="334" pos:column="17">(<expr><call><name><name pos:line="334" pos:column="18">keywordsStop1</name><op:operator pos:line="334" pos:column="31">.</op:operator><name pos:line="334" pos:column="32">InList</name></name><argument_list pos:line="334" pos:column="38">(<argument><expr><name pos:line="334" pos:column="39">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="334" pos:column="42"> <block pos:line="334" pos:column="43">{<return pos:line="334" pos:column="44">return <expr><op:operator pos:line="334" pos:column="51">-</op:operator><lit:literal type="number" pos:line="334" pos:column="52">1</lit:literal></expr>;</return>}</block></then></if></else></if>
	<return pos:line="335" pos:column="9">return <expr><lit:literal type="number" pos:line="335" pos:column="16">0</lit:literal></expr>;</return>

}</block></function>

<function><type><specifier pos:line="339" pos:column="1">static</specifier> <name pos:line="339" pos:column="8">int</name></type> <name pos:line="339" pos:column="12">ParseMetapostWord</name><parameter_list pos:line="339" pos:column="29">(<param><decl><type><name pos:line="339" pos:column="30">unsigned</name> <name pos:line="339" pos:column="39">int</name></type> <name pos:line="339" pos:column="43">pos</name></decl></param>, <param><decl><type><name pos:line="339" pos:column="48">Accessor</name> <type:modifier pos:line="339" pos:column="57">&amp;</type:modifier></type><name pos:line="339" pos:column="58">styler</name></decl></param>, <param><decl><type><name pos:line="339" pos:column="66">char</name> <type:modifier pos:line="339" pos:column="71">*</type:modifier></type><name pos:line="339" pos:column="72">word</name></decl></param>)</parameter_list>
<block pos:line="340" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="341" pos:column="3">int</name></type> <name pos:line="341" pos:column="7">length</name><init pos:line="341" pos:column="13">=<expr><lit:literal type="number" pos:line="341" pos:column="14">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="342" pos:column="3">char</name></type> <name pos:line="342" pos:column="8">ch</name><init pos:line="342" pos:column="10">=<expr><call><name><name pos:line="342" pos:column="11">styler</name><op:operator pos:line="342" pos:column="17">.</op:operator><name pos:line="342" pos:column="18">SafeGetCharAt</name></name><argument_list pos:line="342" pos:column="31">(<argument><expr><name pos:line="342" pos:column="32">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><op:operator pos:line="343" pos:column="3">*</op:operator><name pos:line="343" pos:column="4">word</name><op:operator pos:line="343" pos:column="8">=</op:operator><lit:literal type="number" pos:line="343" pos:column="9">0</lit:literal></expr>;</expr_stmt>

  <while pos:line="345" pos:column="3">while<condition pos:line="345" pos:column="8">(<expr><call><name pos:line="345" pos:column="9">isMETAPOSTidentifier</name><argument_list pos:line="345" pos:column="29">(<argument><expr><name pos:line="345" pos:column="30">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="345" pos:column="34">&amp;&amp;</op:operator> <call><name pos:line="345" pos:column="37">isalpha</name><argument_list pos:line="345" pos:column="44">(<argument><expr><name pos:line="345" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="345" pos:column="49">&amp;&amp;</op:operator> <name pos:line="345" pos:column="52">length</name><op:operator pos:line="345" pos:column="58">&lt;</op:operator><lit:literal type="number" pos:line="345" pos:column="59">100</lit:literal></expr>)</condition><block pos:line="345" pos:column="63">{
          <expr_stmt><expr><name><name pos:line="346" pos:column="11">word</name><index pos:line="346" pos:column="15">[<expr><name pos:line="346" pos:column="16">length</name></expr>]</index></name><op:operator pos:line="346" pos:column="23">=</op:operator><name pos:line="346" pos:column="24">ch</name></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="347" pos:column="11">length</name><op:operator pos:line="347" pos:column="17">++</op:operator></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="348" pos:column="11">ch</name><op:operator pos:line="348" pos:column="13">=</op:operator><call><name><name pos:line="348" pos:column="14">styler</name><op:operator pos:line="348" pos:column="20">.</op:operator><name pos:line="348" pos:column="21">SafeGetCharAt</name></name><argument_list pos:line="348" pos:column="34">(<argument><expr><name pos:line="348" pos:column="35">pos</name><op:operator pos:line="348" pos:column="38">+</op:operator><name pos:line="348" pos:column="39">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><name><name pos:line="350" pos:column="3">word</name><index pos:line="350" pos:column="7">[<expr><name pos:line="350" pos:column="8">length</name></expr>]</index></name><op:operator pos:line="350" pos:column="15">=</op:operator><lit:literal type="number" pos:line="350" pos:column="16">0</lit:literal></expr>;</expr_stmt>
  <return pos:line="351" pos:column="3">return <expr><name pos:line="351" pos:column="10">length</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="354" pos:column="1">static</specifier> <name pos:line="354" pos:column="8">void</name></type> <name pos:line="354" pos:column="13">FoldMetapostDoc</name><parameter_list pos:line="354" pos:column="28">(<param><decl><type><name pos:line="354" pos:column="29">unsigned</name> <name pos:line="354" pos:column="38">int</name></type> <name pos:line="354" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="354" pos:column="52">int</name></type> <name pos:line="354" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="354" pos:column="64">int</name></type></decl></param>, <param><decl><type><name pos:line="354" pos:column="69">WordList</name> <type:modifier pos:line="354" pos:column="78">*</type:modifier></type><name><name pos:line="354" pos:column="79">keywordlists</name><index pos:line="354" pos:column="91">[]</index></name></decl></param>, <param><decl><type><name pos:line="354" pos:column="95">Accessor</name> <type:modifier pos:line="354" pos:column="104">&amp;</type:modifier></type><name pos:line="354" pos:column="105">styler</name></decl></param>)</parameter_list>
<block pos:line="355" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="356" pos:column="9">bool</name></type> <name pos:line="356" pos:column="14">foldCompact</name> <init pos:line="356" pos:column="26">= <expr><call><name><name pos:line="356" pos:column="28">styler</name><op:operator pos:line="356" pos:column="34">.</op:operator><name pos:line="356" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="356" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="356" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="356" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="356" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="356" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="357" pos:column="9">unsigned</name> <name pos:line="357" pos:column="18">int</name></type> <name pos:line="357" pos:column="22">endPos</name> <init pos:line="357" pos:column="29">= <expr><name pos:line="357" pos:column="31">startPos</name><op:operator pos:line="357" pos:column="39">+</op:operator><name pos:line="357" pos:column="40">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="358" pos:column="9">int</name></type> <name pos:line="358" pos:column="13">visibleChars</name><init pos:line="358" pos:column="25">=<expr><lit:literal type="number" pos:line="358" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="359" pos:column="9">int</name></type> <name pos:line="359" pos:column="13">lineCurrent</name><init pos:line="359" pos:column="24">=<expr><call><name><name pos:line="359" pos:column="25">styler</name><op:operator pos:line="359" pos:column="31">.</op:operator><name pos:line="359" pos:column="32">GetLine</name></name><argument_list pos:line="359" pos:column="39">(<argument><expr><name pos:line="359" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="360" pos:column="9">int</name></type> <name pos:line="360" pos:column="13">levelPrev</name><init pos:line="360" pos:column="22">=<expr><call><name><name pos:line="360" pos:column="23">styler</name><op:operator pos:line="360" pos:column="29">.</op:operator><name pos:line="360" pos:column="30">LevelAt</name></name><argument_list pos:line="360" pos:column="37">(<argument><expr><name pos:line="360" pos:column="38">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="360" pos:column="51">&amp;</op:operator> <name pos:line="360" pos:column="53">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="361" pos:column="9">int</name></type> <name pos:line="361" pos:column="13">levelCurrent</name><init pos:line="361" pos:column="25">=<expr><name pos:line="361" pos:column="26">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="362" pos:column="9">char</name></type> <name pos:line="362" pos:column="14">chNext</name><init pos:line="362" pos:column="20">=<expr><name><name pos:line="362" pos:column="21">styler</name><index pos:line="362" pos:column="27">[<expr><name pos:line="362" pos:column="28">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="364" pos:column="9">char</name></type> <name><name pos:line="364" pos:column="14">buffer</name><index pos:line="364" pos:column="20">[<expr><lit:literal type="number" pos:line="364" pos:column="21">100</lit:literal></expr>]</index></name><init pos:line="364" pos:column="25">=<expr><lit:literal type="string" pos:line="364" pos:column="26">""</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="366" pos:column="9">for (<init><decl><type><name pos:line="366" pos:column="14">unsigned</name> <name pos:line="366" pos:column="23">int</name></type> <name pos:line="366" pos:column="27">i</name><init pos:line="366" pos:column="28">=<expr><name pos:line="366" pos:column="29">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="366" pos:column="39">i</name> <op:operator pos:line="366" pos:column="41">&lt;</op:operator> <name pos:line="366" pos:column="43">endPos</name></expr>;</condition> <incr><expr><name pos:line="366" pos:column="51">i</name><op:operator pos:line="366" pos:column="52">++</op:operator></expr></incr>) <block pos:line="366" pos:column="56">{
		<decl_stmt><decl><type><name pos:line="367" pos:column="17">char</name></type> <name pos:line="367" pos:column="22">ch</name><init pos:line="367" pos:column="24">=<expr><name pos:line="367" pos:column="25">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="368" pos:column="17">chNext</name><op:operator pos:line="368" pos:column="23">=</op:operator><call><name><name pos:line="368" pos:column="24">styler</name><op:operator pos:line="368" pos:column="30">.</op:operator><name pos:line="368" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="368" pos:column="44">(<argument><expr><name pos:line="368" pos:column="45">i</name><op:operator pos:line="368" pos:column="46">+</op:operator><lit:literal type="number" pos:line="368" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="369" pos:column="17">char</name></type> <name pos:line="369" pos:column="22">chPrev</name><init pos:line="369" pos:column="28">=<expr><call><name><name pos:line="369" pos:column="29">styler</name><op:operator pos:line="369" pos:column="35">.</op:operator><name pos:line="369" pos:column="36">SafeGetCharAt</name></name><argument_list pos:line="369" pos:column="49">(<argument><expr><name pos:line="369" pos:column="50">i</name><op:operator pos:line="369" pos:column="51">-</op:operator><lit:literal type="number" pos:line="369" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="370" pos:column="17">bool</name></type> <name pos:line="370" pos:column="22">atEOL</name> <init pos:line="370" pos:column="28">= <expr><op:operator pos:line="370" pos:column="30">(</op:operator><name pos:line="370" pos:column="31">ch</name> <op:operator pos:line="370" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="370" pos:column="37">'\r'</lit:literal> <op:operator pos:line="370" pos:column="42">&amp;&amp;</op:operator> <name pos:line="370" pos:column="45">chNext</name> <op:operator pos:line="370" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="370" pos:column="55">'\n'</lit:literal><op:operator pos:line="370" pos:column="59">)</op:operator> <op:operator pos:line="370" pos:column="61">||</op:operator> <op:operator pos:line="370" pos:column="64">(</op:operator><name pos:line="370" pos:column="65">ch</name> <op:operator pos:line="370" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="370" pos:column="71">'\n'</lit:literal><op:operator pos:line="370" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="372" pos:column="17">if<condition pos:line="372" pos:column="19">(<expr><name pos:line="372" pos:column="20">i</name><op:operator pos:line="372" pos:column="21">==</op:operator><lit:literal type="number" pos:line="372" pos:column="23">0</lit:literal> <op:operator pos:line="372" pos:column="25">||</op:operator> <name pos:line="372" pos:column="28">chPrev</name> <op:operator pos:line="372" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="372" pos:column="38">'\r'</lit:literal> <op:operator pos:line="372" pos:column="43">||</op:operator> <name pos:line="372" pos:column="46">chPrev</name><op:operator pos:line="372" pos:column="52">==</op:operator><lit:literal type="char" pos:line="372" pos:column="54">'\n'</lit:literal><op:operator pos:line="372" pos:column="58">||</op:operator> <name pos:line="372" pos:column="61">chPrev</name><op:operator pos:line="372" pos:column="67">==</op:operator><lit:literal type="char" pos:line="372" pos:column="69">' '</lit:literal><op:operator pos:line="372" pos:column="72">||</op:operator> <name pos:line="372" pos:column="75">chPrev</name><op:operator pos:line="372" pos:column="81">==</op:operator><lit:literal type="char" pos:line="372" pos:column="83">'('</lit:literal> <op:operator pos:line="372" pos:column="87">||</op:operator> <name pos:line="372" pos:column="90">chPrev</name><op:operator pos:line="372" pos:column="96">==</op:operator><lit:literal type="char" pos:line="372" pos:column="98">'$'</lit:literal></expr>)</condition><then pos:line="372" pos:column="102">
		<block pos:line="373" pos:column="17">{
            <expr_stmt><expr><call><name pos:line="374" pos:column="13">ParseMetapostWord</name><argument_list pos:line="374" pos:column="30">(<argument><expr><name pos:line="374" pos:column="31">i</name></expr></argument>, <argument><expr><name pos:line="374" pos:column="34">styler</name></expr></argument>, <argument><expr><name pos:line="374" pos:column="42">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="375" pos:column="25">levelCurrent</name> <op:operator pos:line="375" pos:column="38">+=</op:operator> <call><name pos:line="375" pos:column="41">classifyFoldPointMetapost</name><argument_list pos:line="375" pos:column="66">(<argument><expr><name pos:line="375" pos:column="67">buffer</name></expr></argument>,<argument><expr><name pos:line="375" pos:column="74">keywordlists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="378" pos:column="17">if <condition pos:line="378" pos:column="20">(<expr><name pos:line="378" pos:column="21">atEOL</name></expr>)</condition><then pos:line="378" pos:column="27"> <block pos:line="378" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="379" pos:column="25">int</name></type> <name pos:line="379" pos:column="29">lev</name> <init pos:line="379" pos:column="33">= <expr><name pos:line="379" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="380" pos:column="25">if <condition pos:line="380" pos:column="28">(<expr><name pos:line="380" pos:column="29">visibleChars</name> <op:operator pos:line="380" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="380" pos:column="45">0</lit:literal> <op:operator pos:line="380" pos:column="47">&amp;&amp;</op:operator> <name pos:line="380" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="380" pos:column="62">
				<expr_stmt><expr><name pos:line="381" pos:column="33">lev</name> <op:operator pos:line="381" pos:column="37">|=</op:operator> <name pos:line="381" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="382" pos:column="25">if <condition pos:line="382" pos:column="28">(<expr><op:operator pos:line="382" pos:column="29">(</op:operator><name pos:line="382" pos:column="30">levelCurrent</name> <op:operator pos:line="382" pos:column="43">&gt;</op:operator> <name pos:line="382" pos:column="45">levelPrev</name><op:operator pos:line="382" pos:column="54">)</op:operator> <op:operator pos:line="382" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="382" pos:column="59">(</op:operator><name pos:line="382" pos:column="60">visibleChars</name> <op:operator pos:line="382" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="382" pos:column="75">0</lit:literal><op:operator pos:line="382" pos:column="76">)</op:operator></expr>)</condition><then pos:line="382" pos:column="78">
				<expr_stmt><expr><name pos:line="383" pos:column="33">lev</name> <op:operator pos:line="383" pos:column="37">|=</op:operator> <name pos:line="383" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="384" pos:column="25">if <condition pos:line="384" pos:column="28">(<expr><name pos:line="384" pos:column="29">lev</name> <op:operator pos:line="384" pos:column="33">!=</op:operator> <call><name><name pos:line="384" pos:column="36">styler</name><op:operator pos:line="384" pos:column="42">.</op:operator><name pos:line="384" pos:column="43">LevelAt</name></name><argument_list pos:line="384" pos:column="50">(<argument><expr><name pos:line="384" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="384" pos:column="64"> <block pos:line="384" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="385" pos:column="33">styler</name><op:operator pos:line="385" pos:column="39">.</op:operator><name pos:line="385" pos:column="40">SetLevel</name></name><argument_list pos:line="385" pos:column="48">(<argument><expr><name pos:line="385" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="385" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="387" pos:column="25">lineCurrent</name><op:operator pos:line="387" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="388" pos:column="25">levelPrev</name> <op:operator pos:line="388" pos:column="35">=</op:operator> <name pos:line="388" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="389" pos:column="25">visibleChars</name> <op:operator pos:line="389" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="389" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="392" pos:column="17">if <condition pos:line="392" pos:column="20">(<expr><op:operator pos:line="392" pos:column="21">!</op:operator><call><name pos:line="392" pos:column="22">isspacechar</name><argument_list pos:line="392" pos:column="33">(<argument><expr><name pos:line="392" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="392" pos:column="38">
			<expr_stmt><expr><name pos:line="393" pos:column="25">visibleChars</name><op:operator pos:line="393" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="395" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="396" pos:column="9">int</name></type> <name pos:line="396" pos:column="13">flagsNext</name> <init pos:line="396" pos:column="23">= <expr><call><name><name pos:line="396" pos:column="25">styler</name><op:operator pos:line="396" pos:column="31">.</op:operator><name pos:line="396" pos:column="32">LevelAt</name></name><argument_list pos:line="396" pos:column="39">(<argument><expr><name pos:line="396" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="396" pos:column="53">&amp;</op:operator> <op:operator pos:line="396" pos:column="55">~</op:operator><name pos:line="396" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="397" pos:column="9">styler</name><op:operator pos:line="397" pos:column="15">.</op:operator><name pos:line="397" pos:column="16">SetLevel</name></name><argument_list pos:line="397" pos:column="24">(<argument><expr><name pos:line="397" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="397" pos:column="38">levelPrev</name> <op:operator pos:line="397" pos:column="48">|</op:operator> <name pos:line="397" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>


<decl_stmt><decl><type><name pos:line="402" pos:column="1">LexerModule</name></type> <name pos:line="402" pos:column="13">lmMETAPOST</name><argument_list pos:line="402" pos:column="23">(<argument><expr><name pos:line="402" pos:column="24">SCLEX_METAPOST</name></expr></argument>, <argument><expr><name pos:line="402" pos:column="40">ColouriseMETAPOSTDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="402" pos:column="62">"metapost"</lit:literal></expr></argument>, <argument><expr><name pos:line="402" pos:column="74">FoldMetapostDoc</name></expr></argument>, <argument><expr><name pos:line="402" pos:column="91">metapostWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
