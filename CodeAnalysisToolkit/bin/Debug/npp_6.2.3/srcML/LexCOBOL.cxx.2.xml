<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexCOBOL.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexCOBOL.cxx
 ** Lexer for COBOL
 ** Based on LexPascal.cxx
 ** Written by Laurent le Tynevez
 ** Updated by Simon Steele &lt;s.steele@pnotepad.org&gt; September 2002
 ** Updated by Mathias Rauen &lt;scite@madshi.net&gt; May 2003 (Delphi adjustments)
 ** Updated by Rod Falck, Aug 2006 Converted to COBOL
 **/</comment>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">IN_DIVISION</name></cpp:macro> <cpp:value pos:line="33" pos:column="21">0x01</cpp:value></cpp:define>
<cpp:define pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="34" pos:column="9">IN_DECLARATIVES</name></cpp:macro> <cpp:value pos:line="34" pos:column="25">0x02</cpp:value></cpp:define>
<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">IN_SECTION</name></cpp:macro> <cpp:value pos:line="35" pos:column="20">0x04</cpp:value></cpp:define>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">IN_PARAGRAPH</name></cpp:macro> <cpp:value pos:line="36" pos:column="22">0x08</cpp:value></cpp:define>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">IN_FLAGS</name></cpp:macro> <cpp:value pos:line="37" pos:column="18">0xF</cpp:value></cpp:define>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">NOT_HEADER</name></cpp:macro> <cpp:value pos:line="38" pos:column="20">0x10</cpp:value></cpp:define>

<function><type><specifier pos:line="40" pos:column="1">inline</specifier> <name pos:line="40" pos:column="8">bool</name></type> <name pos:line="40" pos:column="13">isCOBOLoperator</name><parameter_list pos:line="40" pos:column="28">(<param><decl><type><name pos:line="40" pos:column="29">char</name></type> <name pos:line="40" pos:column="34">ch</name></decl></param>)</parameter_list>
    <block pos:line="41" pos:column="5">{
    <return pos:line="42" pos:column="5">return <expr><call><name pos:line="42" pos:column="12">isoperator</name><argument_list pos:line="42" pos:column="22">(<argument><expr><name pos:line="42" pos:column="23">ch</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

<function><type><specifier pos:line="45" pos:column="1">inline</specifier> <name pos:line="45" pos:column="8">bool</name></type> <name pos:line="45" pos:column="13">isCOBOLwordchar</name><parameter_list pos:line="45" pos:column="28">(<param><decl><type><name pos:line="45" pos:column="29">char</name></type> <name pos:line="45" pos:column="34">ch</name></decl></param>)</parameter_list>
    <block pos:line="46" pos:column="5">{
    <return pos:line="47" pos:column="5">return <expr><call><name pos:line="47" pos:column="12">isascii</name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="47" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="47" pos:column="27">(</op:operator><call><name pos:line="47" pos:column="28">isalnum</name><argument_list pos:line="47" pos:column="35">(<argument><expr><name pos:line="47" pos:column="36">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="47" pos:column="40">||</op:operator> <name pos:line="47" pos:column="43">ch</name> <op:operator pos:line="47" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="49">'-'</lit:literal><op:operator pos:line="47" pos:column="52">)</op:operator></expr>;</return>

    }</block></function>

<function><type><specifier pos:line="51" pos:column="1">inline</specifier> <name pos:line="51" pos:column="8">bool</name></type> <name pos:line="51" pos:column="13">isCOBOLwordstart</name><parameter_list pos:line="51" pos:column="29">(<param><decl><type><name pos:line="51" pos:column="30">char</name></type> <name pos:line="51" pos:column="35">ch</name></decl></param>)</parameter_list>
    <block pos:line="52" pos:column="5">{
    <return pos:line="53" pos:column="5">return <expr><call><name pos:line="53" pos:column="12">isascii</name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="53" pos:column="24">&amp;&amp;</op:operator> <call><name pos:line="53" pos:column="27">isalnum</name><argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">ch</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

<function><type><specifier pos:line="56" pos:column="1">static</specifier> <name pos:line="56" pos:column="8">int</name></type> <name pos:line="56" pos:column="12">CountBits</name><parameter_list pos:line="56" pos:column="21">(<param><decl><type><name pos:line="56" pos:column="22">int</name></type> <name pos:line="56" pos:column="26">nBits</name></decl></param>)</parameter_list>
	<block pos:line="57" pos:column="9">{
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">int</name></type> <name pos:line="58" pos:column="13">count</name> <init pos:line="58" pos:column="19">= <expr><lit:literal type="number" pos:line="58" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="59" pos:column="9">for (<init><decl><type><name pos:line="59" pos:column="14">int</name></type> <name pos:line="59" pos:column="18">i</name> <init pos:line="59" pos:column="20">= <expr><lit:literal type="number" pos:line="59" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="59" pos:column="25">i</name> <op:operator pos:line="59" pos:column="27">&lt;</op:operator> <lit:literal type="number" pos:line="59" pos:column="29">32</lit:literal></expr>;</condition> <incr><expr><op:operator pos:line="59" pos:column="33">++</op:operator><name pos:line="59" pos:column="35">i</name></expr></incr>)
		<block pos:line="60" pos:column="17">{
		<expr_stmt><expr><name pos:line="61" pos:column="17">count</name> <op:operator pos:line="61" pos:column="23">+=</op:operator> <name pos:line="61" pos:column="26">nBits</name> <op:operator pos:line="61" pos:column="32">&amp;</op:operator> <lit:literal type="number" pos:line="61" pos:column="34">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="62" pos:column="17">nBits</name> <op:operator pos:line="62" pos:column="23">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="62" pos:column="27">1</lit:literal></expr>;</expr_stmt>
		}</block></for>
	<return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">count</name></expr>;</return>
	}</block></function>

<function><type><specifier pos:line="67" pos:column="1">static</specifier> <name pos:line="67" pos:column="8">void</name></type> <name pos:line="67" pos:column="13">getRange</name><parameter_list pos:line="67" pos:column="21">(<param><decl><type><name pos:line="67" pos:column="22">unsigned</name> <name pos:line="67" pos:column="31">int</name></type> <name pos:line="67" pos:column="35">start</name></decl></param>,
        <param><decl><type><name pos:line="68" pos:column="9">unsigned</name> <name pos:line="68" pos:column="18">int</name></type> <name pos:line="68" pos:column="22">end</name></decl></param>,
        <param><decl><type><name pos:line="69" pos:column="9">Accessor</name> <type:modifier pos:line="69" pos:column="18">&amp;</type:modifier></type><name pos:line="69" pos:column="19">styler</name></decl></param>,
        <param><decl><type><name pos:line="70" pos:column="9">char</name> <type:modifier pos:line="70" pos:column="14">*</type:modifier></type><name pos:line="70" pos:column="15">s</name></decl></param>,
        <param><decl><type><name pos:line="71" pos:column="9">unsigned</name> <name pos:line="71" pos:column="18">int</name></type> <name pos:line="71" pos:column="22">len</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="72" pos:column="5">unsigned</name> <name pos:line="72" pos:column="14">int</name></type> <name pos:line="72" pos:column="18">i</name> <init pos:line="72" pos:column="20">= <expr><lit:literal type="number" pos:line="72" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
    <while pos:line="73" pos:column="5">while <condition pos:line="73" pos:column="11">(<expr><op:operator pos:line="73" pos:column="12">(</op:operator><name pos:line="73" pos:column="13">i</name> <op:operator pos:line="73" pos:column="15">&lt;</op:operator> <name pos:line="73" pos:column="17">end</name> <op:operator pos:line="73" pos:column="21">-</op:operator> <name pos:line="73" pos:column="23">start</name> <op:operator pos:line="73" pos:column="29">+</op:operator> <lit:literal type="number" pos:line="73" pos:column="31">1</lit:literal><op:operator pos:line="73" pos:column="32">)</op:operator> <op:operator pos:line="73" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="73" pos:column="37">(</op:operator><name pos:line="73" pos:column="38">i</name> <op:operator pos:line="73" pos:column="40">&lt;</op:operator> <name pos:line="73" pos:column="42">len</name><op:operator pos:line="73" pos:column="45">-</op:operator><lit:literal type="number" pos:line="73" pos:column="46">1</lit:literal><op:operator pos:line="73" pos:column="47">)</op:operator></expr>)</condition> <block pos:line="73" pos:column="50">{
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">s</name><index pos:line="74" pos:column="10">[<expr><name pos:line="74" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="74" pos:column="14">=</op:operator> <call><name><name pos:line="74" pos:column="16">static_cast</name><argument_list pos:line="74" pos:column="27">&lt;<argument><expr><name pos:line="74" pos:column="28">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="74" pos:column="33">(<argument><expr><call><name pos:line="74" pos:column="34">tolower</name><argument_list pos:line="74" pos:column="41">(<argument><expr><name><name pos:line="74" pos:column="42">styler</name><index pos:line="74" pos:column="48">[<expr><name pos:line="74" pos:column="49">start</name> <op:operator pos:line="74" pos:column="55">+</op:operator> <name pos:line="74" pos:column="57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="75" pos:column="9">i</name><op:operator pos:line="75" pos:column="10">++</op:operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name><name pos:line="77" pos:column="5">s</name><index pos:line="77" pos:column="6">[<expr><name pos:line="77" pos:column="7">i</name></expr>]</index></name> <op:operator pos:line="77" pos:column="10">=</op:operator> <lit:literal type="char" pos:line="77" pos:column="12">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="80" pos:column="1">static</specifier> <name pos:line="80" pos:column="8">void</name></type> <name pos:line="80" pos:column="13">ColourTo</name><parameter_list pos:line="80" pos:column="21">(<param><decl><type><name pos:line="80" pos:column="22">Accessor</name> <type:modifier pos:line="80" pos:column="31">&amp;</type:modifier></type><name pos:line="80" pos:column="32">styler</name></decl></param>, <param><decl><type><name pos:line="80" pos:column="40">unsigned</name> <name pos:line="80" pos:column="49">int</name></type> <name pos:line="80" pos:column="53">end</name></decl></param>, <param><decl><type><name pos:line="80" pos:column="58">unsigned</name> <name pos:line="80" pos:column="67">int</name></type> <name pos:line="80" pos:column="71">attr</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="77">{
    <expr_stmt><expr><call><name><name pos:line="81" pos:column="5">styler</name><op:operator pos:line="81" pos:column="11">.</op:operator><name pos:line="81" pos:column="12">ColourTo</name></name><argument_list pos:line="81" pos:column="20">(<argument><expr><name pos:line="81" pos:column="21">end</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="26">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier pos:line="85" pos:column="1">static</specifier> <name pos:line="85" pos:column="8">int</name></type> <name pos:line="85" pos:column="12">classifyWordCOBOL</name><parameter_list pos:line="85" pos:column="29">(<param><decl><type><name pos:line="85" pos:column="30">unsigned</name> <name pos:line="85" pos:column="39">int</name></type> <name pos:line="85" pos:column="43">start</name></decl></param>, <param><decl><type><name pos:line="85" pos:column="50">unsigned</name> <name pos:line="85" pos:column="59">int</name></type> <name pos:line="85" pos:column="63">end</name></decl></param>, <comment type="block" pos:line="85" pos:column="68">/*WordList &amp;keywords*/</comment><param><decl><type><name pos:line="85" pos:column="90">WordList</name> <type:modifier pos:line="85" pos:column="99">*</type:modifier></type><name><name pos:line="85" pos:column="100">keywordlists</name><index pos:line="85" pos:column="112">[]</index></name></decl></param>, <param><decl><type><name pos:line="85" pos:column="116">Accessor</name> <type:modifier pos:line="85" pos:column="125">&amp;</type:modifier></type><name pos:line="85" pos:column="126">styler</name></decl></param>, <param><decl><type><name pos:line="85" pos:column="134">int</name></type> <name pos:line="85" pos:column="138">nContainment</name></decl></param>, <param><decl><type><name pos:line="85" pos:column="152">bool</name> <type:modifier pos:line="85" pos:column="157">*</type:modifier></type><name pos:line="85" pos:column="158">bAarea</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="166">{
    <decl_stmt><decl><type><name pos:line="86" pos:column="5">int</name></type> <name pos:line="86" pos:column="9">ret</name> <init pos:line="86" pos:column="13">= <expr><lit:literal type="number" pos:line="86" pos:column="15">0</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="88" pos:column="5">WordList</name><type:modifier pos:line="88" pos:column="13">&amp;</type:modifier></type> <name pos:line="88" pos:column="15">a_keywords</name> <init pos:line="88" pos:column="26">= <expr><op:operator pos:line="88" pos:column="28">*</op:operator><name><name pos:line="88" pos:column="29">keywordlists</name><index pos:line="88" pos:column="41">[<expr><lit:literal type="number" pos:line="88" pos:column="42">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="89" pos:column="5">WordList</name><type:modifier pos:line="89" pos:column="13">&amp;</type:modifier></type> <name pos:line="89" pos:column="15">b_keywords</name> <init pos:line="89" pos:column="26">= <expr><op:operator pos:line="89" pos:column="28">*</op:operator><name><name pos:line="89" pos:column="29">keywordlists</name><index pos:line="89" pos:column="41">[<expr><lit:literal type="number" pos:line="89" pos:column="42">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="90" pos:column="5">WordList</name><type:modifier pos:line="90" pos:column="13">&amp;</type:modifier></type> <name pos:line="90" pos:column="15">c_keywords</name> <init pos:line="90" pos:column="26">= <expr><op:operator pos:line="90" pos:column="28">*</op:operator><name><name pos:line="90" pos:column="29">keywordlists</name><index pos:line="90" pos:column="41">[<expr><lit:literal type="number" pos:line="90" pos:column="42">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="92" pos:column="5">char</name></type> <name><name pos:line="92" pos:column="10">s</name><index pos:line="92" pos:column="11">[<expr><lit:literal type="number" pos:line="92" pos:column="12">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">getRange</name><argument_list pos:line="93" pos:column="13">(<argument><expr><name pos:line="93" pos:column="14">start</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="21">end</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="34">s</name></expr></argument>, <argument><expr><sizeof pos:line="93" pos:column="37">sizeof<argument_list pos:line="93" pos:column="43">(<argument><expr><name pos:line="93" pos:column="44">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="95" pos:column="5">char</name></type> <name pos:line="95" pos:column="10">chAttr</name> <init pos:line="95" pos:column="17">= <expr><name pos:line="95" pos:column="19">SCE_C_IDENTIFIER</name></expr></init></decl>;</decl_stmt>
    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><call><name pos:line="96" pos:column="9">isdigit</name><argument_list pos:line="96" pos:column="16">(<argument><expr><name><name pos:line="96" pos:column="17">s</name><index pos:line="96" pos:column="18">[<expr><lit:literal type="number" pos:line="96" pos:column="19">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="96" pos:column="23">||</op:operator> <op:operator pos:line="96" pos:column="26">(</op:operator><name><name pos:line="96" pos:column="27">s</name><index pos:line="96" pos:column="28">[<expr><lit:literal type="number" pos:line="96" pos:column="29">0</lit:literal></expr>]</index></name> <op:operator pos:line="96" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="35">'.'</lit:literal><op:operator pos:line="96" pos:column="38">)</op:operator> <op:operator pos:line="96" pos:column="40">||</op:operator> <op:operator pos:line="96" pos:column="43">(</op:operator><name><name pos:line="96" pos:column="44">s</name><index pos:line="96" pos:column="45">[<expr><lit:literal type="number" pos:line="96" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="96" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="52">'v'</lit:literal><op:operator pos:line="96" pos:column="55">)</op:operator></expr>)</condition><then pos:line="96" pos:column="57"> <block pos:line="96" pos:column="58">{
        <expr_stmt><expr><name pos:line="97" pos:column="9">chAttr</name> <op:operator pos:line="97" pos:column="16">=</op:operator> <name pos:line="97" pos:column="18">SCE_C_NUMBER</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="98" pos:column="17">char</name> <type:modifier pos:line="98" pos:column="22">*</type:modifier></type><name pos:line="98" pos:column="23">p</name> <init pos:line="98" pos:column="25">= <expr><name pos:line="98" pos:column="27">s</name> <op:operator pos:line="98" pos:column="29">+</op:operator> <lit:literal type="number" pos:line="98" pos:column="31">1</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="99" pos:column="17">while <condition pos:line="99" pos:column="23">(<expr><op:operator pos:line="99" pos:column="24">*</op:operator><name pos:line="99" pos:column="25">p</name></expr>)</condition> <block pos:line="99" pos:column="28">{
			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><op:operator pos:line="100" pos:column="29">(</op:operator><op:operator pos:line="100" pos:column="30">!</op:operator><call><name pos:line="100" pos:column="31">isdigit</name><argument_list pos:line="100" pos:column="38">(<argument><expr><op:operator pos:line="100" pos:column="39">*</op:operator><name pos:line="100" pos:column="40">p</name></expr></argument>)</argument_list></call> <op:operator pos:line="100" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="100" pos:column="46">(</op:operator><op:operator pos:line="100" pos:column="47">*</op:operator><name pos:line="100" pos:column="48">p</name><op:operator pos:line="100" pos:column="49">)</op:operator> <op:operator pos:line="100" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="100" pos:column="54">'v'</lit:literal><op:operator pos:line="100" pos:column="57">)</op:operator> <op:operator pos:line="100" pos:column="59">&amp;&amp;</op:operator> <call><name pos:line="100" pos:column="62">isCOBOLwordchar</name><argument_list pos:line="100" pos:column="77">(<argument><expr><op:operator pos:line="100" pos:column="78">*</op:operator><name pos:line="100" pos:column="79">p</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="82"> <block pos:line="100" pos:column="83">{
				<expr_stmt><expr><name pos:line="101" pos:column="33">chAttr</name> <op:operator pos:line="101" pos:column="40">=</op:operator> <name pos:line="101" pos:column="42">SCE_C_IDENTIFIER</name></expr>;</expr_stmt>
			    <break pos:line="102" pos:column="29">break;</break>
			}</block></then></if>
			<expr_stmt><expr><op:operator pos:line="104" pos:column="25">++</op:operator><name pos:line="104" pos:column="27">p</name></expr>;</expr_stmt>
		}</block></while>
    }</block></then>
    <else pos:line="107" pos:column="5">else <block pos:line="107" pos:column="10">{
        <if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><call><name><name pos:line="108" pos:column="13">a_keywords</name><op:operator pos:line="108" pos:column="23">.</op:operator><name pos:line="108" pos:column="24">InList</name></name><argument_list pos:line="108" pos:column="30">(<argument><expr><name pos:line="108" pos:column="31">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="34"> <block pos:line="108" pos:column="35">{
            <expr_stmt><expr><name pos:line="109" pos:column="13">chAttr</name> <op:operator pos:line="109" pos:column="20">=</op:operator> <name pos:line="109" pos:column="22">SCE_C_WORD</name></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="111" pos:column="9">else <if pos:line="111" pos:column="14">if <condition pos:line="111" pos:column="17">(<expr><call><name><name pos:line="111" pos:column="18">b_keywords</name><op:operator pos:line="111" pos:column="28">.</op:operator><name pos:line="111" pos:column="29">InList</name></name><argument_list pos:line="111" pos:column="35">(<argument><expr><name pos:line="111" pos:column="36">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="111" pos:column="39"> <block pos:line="111" pos:column="40">{
            <expr_stmt><expr><name pos:line="112" pos:column="13">chAttr</name> <op:operator pos:line="112" pos:column="20">=</op:operator> <name pos:line="112" pos:column="22">SCE_C_WORD2</name></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="114" pos:column="9">else <if pos:line="114" pos:column="14">if <condition pos:line="114" pos:column="17">(<expr><call><name><name pos:line="114" pos:column="18">c_keywords</name><op:operator pos:line="114" pos:column="28">.</op:operator><name pos:line="114" pos:column="29">InList</name></name><argument_list pos:line="114" pos:column="35">(<argument><expr><name pos:line="114" pos:column="36">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="114" pos:column="39"> <block pos:line="114" pos:column="40">{
            <expr_stmt><expr><name pos:line="115" pos:column="13">chAttr</name> <op:operator pos:line="115" pos:column="20">=</op:operator> <name pos:line="115" pos:column="22">SCE_C_UUID</name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
    }</block></else></if>
    <if pos:line="118" pos:column="5">if <condition pos:line="118" pos:column="8">(<expr><op:operator pos:line="118" pos:column="9">*</op:operator><name pos:line="118" pos:column="10">bAarea</name></expr>)</condition><then pos:line="118" pos:column="17"> <block pos:line="118" pos:column="18">{
        <if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><call><name pos:line="119" pos:column="13">strcmp</name><argument_list pos:line="119" pos:column="19">(<argument><expr><name pos:line="119" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="119" pos:column="23">"division"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="119" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="119" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="119" pos:column="40"> <block pos:line="119" pos:column="41">{
            <expr_stmt><expr><name pos:line="120" pos:column="13">ret</name> <op:operator pos:line="120" pos:column="17">=</op:operator> <name pos:line="120" pos:column="19">IN_DIVISION</name></expr>;</expr_stmt>
			<comment type="line" pos:line="121" pos:column="25">// we've determined the containment, anything else is just ignored for those purposes</comment>
			<expr_stmt><expr><op:operator pos:line="122" pos:column="25">*</op:operator><name pos:line="122" pos:column="26">bAarea</name> <op:operator pos:line="122" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="122" pos:column="35">false</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="123" pos:column="19">else <if pos:line="123" pos:column="24">if <condition pos:line="123" pos:column="27">(<expr><call><name pos:line="123" pos:column="28">strcmp</name><argument_list pos:line="123" pos:column="34">(<argument><expr><name pos:line="123" pos:column="35">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="123" pos:column="38">"declaratives"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="123" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="123" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="123" pos:column="59"> <block pos:line="123" pos:column="60">{
            <expr_stmt><expr><name pos:line="124" pos:column="13">ret</name> <op:operator pos:line="124" pos:column="17">=</op:operator> <name pos:line="124" pos:column="19">IN_DIVISION</name> <op:operator pos:line="124" pos:column="31">|</op:operator> <name pos:line="124" pos:column="33">IN_DECLARATIVES</name></expr>;</expr_stmt>
			<if pos:line="125" pos:column="25">if <condition pos:line="125" pos:column="28">(<expr><name pos:line="125" pos:column="29">nContainment</name> <op:operator pos:line="125" pos:column="42">&amp;</op:operator> <name pos:line="125" pos:column="44">IN_DECLARATIVES</name></expr>)</condition><then pos:line="125" pos:column="60">
				<expr_stmt><expr><name pos:line="126" pos:column="33">ret</name> <op:operator pos:line="126" pos:column="37">|=</op:operator> <name pos:line="126" pos:column="40">NOT_HEADER</name> <op:operator pos:line="126" pos:column="51">|</op:operator> <name pos:line="126" pos:column="53">IN_SECTION</name></expr>;</expr_stmt></then></if>
			<comment type="line" pos:line="127" pos:column="25">// we've determined the containment, anything else is just ignored for those purposes</comment>
			<expr_stmt><expr><op:operator pos:line="128" pos:column="25">*</op:operator><name pos:line="128" pos:column="26">bAarea</name> <op:operator pos:line="128" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="128" pos:column="35">false</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="129" pos:column="19">else <if pos:line="129" pos:column="24">if <condition pos:line="129" pos:column="27">(<expr><call><name pos:line="129" pos:column="28">strcmp</name><argument_list pos:line="129" pos:column="34">(<argument><expr><name pos:line="129" pos:column="35">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="129" pos:column="38">"section"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="129" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="129" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="129" pos:column="54"> <block pos:line="129" pos:column="55">{
            <expr_stmt><expr><name pos:line="130" pos:column="13">ret</name> <op:operator pos:line="130" pos:column="17">=</op:operator> <op:operator pos:line="130" pos:column="19">(</op:operator><name pos:line="130" pos:column="20">nContainment</name> <op:operator pos:line="130" pos:column="33">&amp;</op:operator><op:operator pos:line="130" pos:column="34">~</op:operator> <name pos:line="130" pos:column="36">IN_PARAGRAPH</name><op:operator pos:line="130" pos:column="48">)</op:operator> <op:operator pos:line="130" pos:column="50">|</op:operator> <name pos:line="130" pos:column="52">IN_SECTION</name></expr>;</expr_stmt>
			<comment type="line" pos:line="131" pos:column="25">// we've determined the containment, anything else is just ignored for those purposes</comment>
			<expr_stmt><expr><op:operator pos:line="132" pos:column="25">*</op:operator><name pos:line="132" pos:column="26">bAarea</name> <op:operator pos:line="132" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="132" pos:column="35">false</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="133" pos:column="19">else <if pos:line="133" pos:column="24">if <condition pos:line="133" pos:column="27">(<expr><call><name pos:line="133" pos:column="28">strcmp</name><argument_list pos:line="133" pos:column="34">(<argument><expr><name pos:line="133" pos:column="35">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="133" pos:column="38">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="133" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="133" pos:column="48">0</lit:literal> <op:operator pos:line="133" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="133" pos:column="53">(</op:operator><name pos:line="133" pos:column="54">nContainment</name> <op:operator pos:line="133" pos:column="67">&amp;</op:operator> <name pos:line="133" pos:column="69">IN_DECLARATIVES</name><op:operator pos:line="133" pos:column="84">)</op:operator></expr>)</condition><then pos:line="133" pos:column="86"> <block pos:line="133" pos:column="87">{
            <expr_stmt><expr><name pos:line="134" pos:column="13">ret</name> <op:operator pos:line="134" pos:column="17">=</op:operator> <name pos:line="134" pos:column="19">IN_DIVISION</name> <op:operator pos:line="134" pos:column="31">|</op:operator> <name pos:line="134" pos:column="33">IN_DECLARATIVES</name> <op:operator pos:line="134" pos:column="49">|</op:operator> <name pos:line="134" pos:column="51">IN_SECTION</name> <op:operator pos:line="134" pos:column="62">|</op:operator> <name pos:line="134" pos:column="64">NOT_HEADER</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="135" pos:column="19">else <block pos:line="135" pos:column="24">{
			<expr_stmt><expr><name pos:line="136" pos:column="25">ret</name> <op:operator pos:line="136" pos:column="29">=</op:operator> <name pos:line="136" pos:column="31">nContainment</name> <op:operator pos:line="136" pos:column="44">|</op:operator> <name pos:line="136" pos:column="46">IN_PARAGRAPH</name></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="139" pos:column="5">ColourTo</name><argument_list pos:line="139" pos:column="13">(<argument><expr><name pos:line="139" pos:column="14">styler</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="22">end</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="27">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="140" pos:column="5">return <expr><name pos:line="140" pos:column="12">ret</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="143" pos:column="1">static</specifier> <name pos:line="143" pos:column="8">void</name></type> <name pos:line="143" pos:column="13">ColouriseCOBOLDoc</name><parameter_list pos:line="143" pos:column="30">(<param><decl><type><name pos:line="143" pos:column="31">unsigned</name> <name pos:line="143" pos:column="40">int</name></type> <name pos:line="143" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="54">int</name></type> <name pos:line="143" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="66">int</name></type> <name pos:line="143" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="81">WordList</name> <type:modifier pos:line="143" pos:column="90">*</type:modifier></type><name><name pos:line="143" pos:column="91">keywordlists</name><index pos:line="143" pos:column="103">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="144" pos:column="5">Accessor</name> <type:modifier pos:line="144" pos:column="14">&amp;</type:modifier></type><name pos:line="144" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="144" pos:column="23">{

    <expr_stmt><expr><call><name><name pos:line="146" pos:column="5">styler</name><op:operator pos:line="146" pos:column="11">.</op:operator><name pos:line="146" pos:column="12">StartAt</name></name><argument_list pos:line="146" pos:column="19">(<argument><expr><name pos:line="146" pos:column="20">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="148" pos:column="5">int</name></type> <name pos:line="148" pos:column="9">state</name> <init pos:line="148" pos:column="15">= <expr><name pos:line="148" pos:column="17">initStyle</name></expr></init></decl>;</decl_stmt>
    <if pos:line="149" pos:column="5">if <condition pos:line="149" pos:column="8">(<expr><name pos:line="149" pos:column="9">state</name> <op:operator pos:line="149" pos:column="15">==</op:operator> <name pos:line="149" pos:column="18">SCE_C_CHARACTER</name></expr>)</condition><then pos:line="149" pos:column="34">   <comment type="line" pos:line="149" pos:column="37">// Does not leak onto next line</comment>
        <expr_stmt><expr><name pos:line="150" pos:column="9">state</name> <op:operator pos:line="150" pos:column="15">=</op:operator> <name pos:line="150" pos:column="17">SCE_C_DEFAULT</name></expr>;</expr_stmt></then></if>
    <decl_stmt><decl><type><name pos:line="151" pos:column="5">char</name></type> <name pos:line="151" pos:column="10">chPrev</name> <init pos:line="151" pos:column="17">= <expr><lit:literal type="char" pos:line="151" pos:column="19">' '</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="152" pos:column="5">char</name></type> <name pos:line="152" pos:column="10">chNext</name> <init pos:line="152" pos:column="17">= <expr><name><name pos:line="152" pos:column="19">styler</name><index pos:line="152" pos:column="25">[<expr><name pos:line="152" pos:column="26">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="153" pos:column="5">unsigned</name> <name pos:line="153" pos:column="14">int</name></type> <name pos:line="153" pos:column="18">lengthDoc</name> <init pos:line="153" pos:column="28">= <expr><name pos:line="153" pos:column="30">startPos</name> <op:operator pos:line="153" pos:column="39">+</op:operator> <name pos:line="153" pos:column="41">length</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="155" pos:column="5">int</name></type> <name pos:line="155" pos:column="9">nContainment</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="157" pos:column="5">int</name></type> <name pos:line="157" pos:column="9">currentLine</name> <init pos:line="157" pos:column="21">= <expr><call><name><name pos:line="157" pos:column="23">styler</name><op:operator pos:line="157" pos:column="29">.</op:operator><name pos:line="157" pos:column="30">GetLine</name></name><argument_list pos:line="157" pos:column="37">(<argument><expr><name pos:line="157" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="158" pos:column="5">if <condition pos:line="158" pos:column="8">(<expr><name pos:line="158" pos:column="9">currentLine</name> <op:operator pos:line="158" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="158" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="158" pos:column="25"> <block pos:line="158" pos:column="26">{
        <expr_stmt><expr><call><name><name pos:line="159" pos:column="9">styler</name><op:operator pos:line="159" pos:column="15">.</op:operator><name pos:line="159" pos:column="16">SetLineState</name></name><argument_list pos:line="159" pos:column="28">(<argument><expr><name pos:line="159" pos:column="29">currentLine</name></expr></argument>, <argument><expr><call><name><name pos:line="159" pos:column="42">styler</name><op:operator pos:line="159" pos:column="48">.</op:operator><name pos:line="159" pos:column="49">GetLineState</name></name><argument_list pos:line="159" pos:column="61">(<argument><expr><name pos:line="159" pos:column="62">currentLine</name><op:operator pos:line="159" pos:column="73">-</op:operator><lit:literal type="number" pos:line="159" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="160" pos:column="9">nContainment</name> <op:operator pos:line="160" pos:column="22">=</op:operator> <call><name><name pos:line="160" pos:column="24">styler</name><op:operator pos:line="160" pos:column="30">.</op:operator><name pos:line="160" pos:column="31">GetLineState</name></name><argument_list pos:line="160" pos:column="43">(<argument><expr><name pos:line="160" pos:column="44">currentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="161" pos:column="17">nContainment</name> <op:operator pos:line="161" pos:column="30">&amp;=</op:operator> <op:operator pos:line="161" pos:column="33">~</op:operator><name pos:line="161" pos:column="34">NOT_HEADER</name></expr>;</expr_stmt>
    }</block></then> <else pos:line="162" pos:column="7">else <block pos:line="162" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="163" pos:column="9">styler</name><op:operator pos:line="163" pos:column="15">.</op:operator><name pos:line="163" pos:column="16">SetLineState</name></name><argument_list pos:line="163" pos:column="28">(<argument><expr><name pos:line="163" pos:column="29">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="163" pos:column="42">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="164" pos:column="9">nContainment</name> <op:operator pos:line="164" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="164" pos:column="24">0</lit:literal></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name pos:line="167" pos:column="5">styler</name><op:operator pos:line="167" pos:column="11">.</op:operator><name pos:line="167" pos:column="12">StartSegment</name></name><argument_list pos:line="167" pos:column="24">(<argument><expr><name pos:line="167" pos:column="25">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="168" pos:column="5">bool</name></type> <name pos:line="168" pos:column="10">bNewLine</name> <init pos:line="168" pos:column="19">= <expr><lit:literal type="boolean" pos:line="168" pos:column="21">true</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="169" pos:column="5">bool</name></type> <name pos:line="169" pos:column="10">bAarea</name> <init pos:line="169" pos:column="17">= <expr><op:operator pos:line="169" pos:column="19">!</op:operator><call><name pos:line="169" pos:column="20">isspacechar</name><argument_list pos:line="169" pos:column="31">(<argument><expr><name pos:line="169" pos:column="32">chNext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="170" pos:column="9">int</name></type> <name pos:line="170" pos:column="13">column</name> <init pos:line="170" pos:column="20">= <expr><lit:literal type="number" pos:line="170" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="171" pos:column="5">for (<init><decl><type><name pos:line="171" pos:column="10">unsigned</name> <name pos:line="171" pos:column="19">int</name></type> <name pos:line="171" pos:column="23">i</name> <init pos:line="171" pos:column="25">= <expr><name pos:line="171" pos:column="27">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="171" pos:column="37">i</name> <op:operator pos:line="171" pos:column="39">&lt;</op:operator> <name pos:line="171" pos:column="41">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="171" pos:column="52">i</name><op:operator pos:line="171" pos:column="53">++</op:operator></expr></incr>) <block pos:line="171" pos:column="57">{
        <decl_stmt><decl><type><name pos:line="172" pos:column="9">char</name></type> <name pos:line="172" pos:column="14">ch</name> <init pos:line="172" pos:column="17">= <expr><name pos:line="172" pos:column="19">chNext</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name pos:line="174" pos:column="9">chNext</name> <op:operator pos:line="174" pos:column="16">=</op:operator> <call><name><name pos:line="174" pos:column="18">styler</name><op:operator pos:line="174" pos:column="24">.</op:operator><name pos:line="174" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="174" pos:column="38">(<argument><expr><name pos:line="174" pos:column="39">i</name> <op:operator pos:line="174" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="174" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><op:operator pos:line="176" pos:column="17">++</op:operator><name pos:line="176" pos:column="19">column</name></expr>;</expr_stmt>

        <if pos:line="178" pos:column="9">if <condition pos:line="178" pos:column="12">(<expr><name pos:line="178" pos:column="13">bNewLine</name></expr>)</condition><then pos:line="178" pos:column="22"> <block pos:line="178" pos:column="23">{
			<expr_stmt><expr><name pos:line="179" pos:column="25">column</name> <op:operator pos:line="179" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="179" pos:column="34">0</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
		<if pos:line="181" pos:column="17">if <condition pos:line="181" pos:column="20">(<expr><name pos:line="181" pos:column="21">column</name> <op:operator pos:line="181" pos:column="28">&lt;=</op:operator> <lit:literal type="number" pos:line="181" pos:column="31">1</lit:literal> <op:operator pos:line="181" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="181" pos:column="36">!</op:operator><name pos:line="181" pos:column="37">bAarea</name></expr>)</condition><then pos:line="181" pos:column="44"> <block pos:line="181" pos:column="45">{
			<expr_stmt><expr><name pos:line="182" pos:column="25">bAarea</name> <op:operator pos:line="182" pos:column="32">=</op:operator> <op:operator pos:line="182" pos:column="34">!</op:operator><call><name pos:line="182" pos:column="35">isspacechar</name><argument_list pos:line="182" pos:column="46">(<argument><expr><name pos:line="182" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
        <decl_stmt><decl><type><name pos:line="184" pos:column="9">bool</name></type> <name pos:line="184" pos:column="14">bSetNewLine</name> <init pos:line="184" pos:column="26">= <expr><lit:literal type="boolean" pos:line="184" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
        <if pos:line="185" pos:column="9">if <condition pos:line="185" pos:column="12">(<expr><op:operator pos:line="185" pos:column="13">(</op:operator><name pos:line="185" pos:column="14">ch</name> <op:operator pos:line="185" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="20">'\r'</lit:literal> <op:operator pos:line="185" pos:column="25">&amp;&amp;</op:operator> <name pos:line="185" pos:column="28">chNext</name> <op:operator pos:line="185" pos:column="35">!=</op:operator> <lit:literal type="char" pos:line="185" pos:column="38">'\n'</lit:literal><op:operator pos:line="185" pos:column="42">)</op:operator> <op:operator pos:line="185" pos:column="44">||</op:operator> <op:operator pos:line="185" pos:column="47">(</op:operator><name pos:line="185" pos:column="48">ch</name> <op:operator pos:line="185" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="54">'\n'</lit:literal><op:operator pos:line="185" pos:column="58">)</op:operator></expr>)</condition><then pos:line="185" pos:column="60"> <block pos:line="185" pos:column="61">{
            <comment type="line" pos:line="186" pos:column="13">// Trigger on CR only (Mac style) or either on LF from CR+LF (Dos/Win) or on LF alone (Unix)</comment>
            <comment type="line" pos:line="187" pos:column="13">// Avoid triggering two times on Dos/Win</comment>
            <comment type="line" pos:line="188" pos:column="13">// End of line</comment>
            <if pos:line="189" pos:column="13">if <condition pos:line="189" pos:column="16">(<expr><name pos:line="189" pos:column="17">state</name> <op:operator pos:line="189" pos:column="23">==</op:operator> <name pos:line="189" pos:column="26">SCE_C_CHARACTER</name></expr>)</condition><then pos:line="189" pos:column="42"> <block pos:line="189" pos:column="43">{
                <expr_stmt><expr><call><name pos:line="190" pos:column="17">ColourTo</name><argument_list pos:line="190" pos:column="25">(<argument><expr><name pos:line="190" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="37">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="191" pos:column="17">state</name> <op:operator pos:line="191" pos:column="23">=</op:operator> <name pos:line="191" pos:column="25">SCE_C_DEFAULT</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="193" pos:column="13">styler</name><op:operator pos:line="193" pos:column="19">.</op:operator><name pos:line="193" pos:column="20">SetLineState</name></name><argument_list pos:line="193" pos:column="32">(<argument><expr><name pos:line="193" pos:column="33">currentLine</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="46">nContainment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="194" pos:column="13">currentLine</name><op:operator pos:line="194" pos:column="24">++</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="195" pos:column="13">bSetNewLine</name> <op:operator pos:line="195" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="195" pos:column="27">true</lit:literal></expr>;</expr_stmt>
			<if pos:line="196" pos:column="25">if <condition pos:line="196" pos:column="28">(<expr><name pos:line="196" pos:column="29">nContainment</name> <op:operator pos:line="196" pos:column="42">&amp;</op:operator> <name pos:line="196" pos:column="44">NOT_HEADER</name></expr>)</condition><then pos:line="196" pos:column="55">
				<expr_stmt><expr><name pos:line="197" pos:column="33">nContainment</name> <op:operator pos:line="197" pos:column="46">&amp;=</op:operator> <op:operator pos:line="197" pos:column="49">~</op:operator><op:operator pos:line="197" pos:column="50">(</op:operator><name pos:line="197" pos:column="51">NOT_HEADER</name> <op:operator pos:line="197" pos:column="62">|</op:operator> <name pos:line="197" pos:column="64">IN_DECLARATIVES</name> <op:operator pos:line="197" pos:column="80">|</op:operator> <name pos:line="197" pos:column="82">IN_SECTION</name><op:operator pos:line="197" pos:column="92">)</op:operator></expr>;</expr_stmt></then></if>
        }</block></then></if>

        <if pos:line="200" pos:column="9">if <condition pos:line="200" pos:column="12">(<expr><call><name><name pos:line="200" pos:column="13">styler</name><op:operator pos:line="200" pos:column="19">.</op:operator><name pos:line="200" pos:column="20">IsLeadByte</name></name><argument_list pos:line="200" pos:column="30">(<argument><expr><name pos:line="200" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="200" pos:column="35"> <block pos:line="200" pos:column="36">{
            <expr_stmt><expr><name pos:line="201" pos:column="13">chNext</name> <op:operator pos:line="201" pos:column="20">=</op:operator> <call><name><name pos:line="201" pos:column="22">styler</name><op:operator pos:line="201" pos:column="28">.</op:operator><name pos:line="201" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="201" pos:column="42">(<argument><expr><name pos:line="201" pos:column="43">i</name> <op:operator pos:line="201" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="201" pos:column="47">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="202" pos:column="13">chPrev</name> <op:operator pos:line="202" pos:column="20">=</op:operator> <lit:literal type="char" pos:line="202" pos:column="22">' '</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="203" pos:column="13">i</name> <op:operator pos:line="203" pos:column="15">+=</op:operator> <lit:literal type="number" pos:line="203" pos:column="18">1</lit:literal></expr>;</expr_stmt>
            <continue pos:line="204" pos:column="13">continue;</continue>
        }</block></then></if>

        <if pos:line="207" pos:column="9">if <condition pos:line="207" pos:column="12">(<expr><name pos:line="207" pos:column="13">state</name> <op:operator pos:line="207" pos:column="19">==</op:operator> <name pos:line="207" pos:column="22">SCE_C_DEFAULT</name></expr>)</condition><then pos:line="207" pos:column="36"> <block pos:line="207" pos:column="37">{
            <if pos:line="208" pos:column="13">if <condition pos:line="208" pos:column="16">(<expr><call><name pos:line="208" pos:column="17">isCOBOLwordstart</name><argument_list pos:line="208" pos:column="33">(<argument><expr><name pos:line="208" pos:column="34">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="38">||</op:operator> <op:operator pos:line="208" pos:column="41">(</op:operator><name pos:line="208" pos:column="42">ch</name> <op:operator pos:line="208" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="208" pos:column="48">'$'</lit:literal> <op:operator pos:line="208" pos:column="52">&amp;&amp;</op:operator> <call><name pos:line="208" pos:column="55">isascii</name><argument_list pos:line="208" pos:column="62">(<argument><expr><name pos:line="208" pos:column="63">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="71">&amp;&amp;</op:operator> <call><name pos:line="208" pos:column="74">isalpha</name><argument_list pos:line="208" pos:column="81">(<argument><expr><name pos:line="208" pos:column="82">chNext</name></expr></argument>)</argument_list></call><op:operator pos:line="208" pos:column="89">)</op:operator></expr>)</condition><then pos:line="208" pos:column="91"> <block pos:line="208" pos:column="92">{
                <expr_stmt><expr><call><name pos:line="209" pos:column="17">ColourTo</name><argument_list pos:line="209" pos:column="25">(<argument><expr><name pos:line="209" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="34">i</name><op:operator pos:line="209" pos:column="35">-</op:operator><lit:literal type="number" pos:line="209" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="209" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="210" pos:column="17">state</name> <op:operator pos:line="210" pos:column="23">=</op:operator> <name pos:line="210" pos:column="25">SCE_C_IDENTIFIER</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="211" pos:column="15">else <if pos:line="211" pos:column="20">if <condition pos:line="211" pos:column="23">(<expr><name pos:line="211" pos:column="24">column</name> <op:operator pos:line="211" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="211" pos:column="34">0</lit:literal> <op:operator pos:line="211" pos:column="36">&amp;&amp;</op:operator> <name pos:line="211" pos:column="39">ch</name> <op:operator pos:line="211" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="211" pos:column="45">'*'</lit:literal> <op:operator pos:line="211" pos:column="49">&amp;&amp;</op:operator> <name pos:line="211" pos:column="52">chNext</name> <op:operator pos:line="211" pos:column="59">!=</op:operator> <lit:literal type="char" pos:line="211" pos:column="62">'*'</lit:literal></expr>)</condition><then pos:line="211" pos:column="66"> <block pos:line="211" pos:column="67">{
                <expr_stmt><expr><call><name pos:line="212" pos:column="17">ColourTo</name><argument_list pos:line="212" pos:column="25">(<argument><expr><name pos:line="212" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="212" pos:column="34">i</name><op:operator pos:line="212" pos:column="35">-</op:operator><lit:literal type="number" pos:line="212" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="212" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="213" pos:column="17">state</name> <op:operator pos:line="213" pos:column="23">=</op:operator> <name pos:line="213" pos:column="25">SCE_C_COMMENTLINE</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="214" pos:column="15">else <if pos:line="214" pos:column="20">if <condition pos:line="214" pos:column="23">(<expr><name pos:line="214" pos:column="24">column</name> <op:operator pos:line="214" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="214" pos:column="34">0</lit:literal> <op:operator pos:line="214" pos:column="36">&amp;&amp;</op:operator> <name pos:line="214" pos:column="39">ch</name> <op:operator pos:line="214" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="214" pos:column="45">'/'</lit:literal> <op:operator pos:line="214" pos:column="49">&amp;&amp;</op:operator> <name pos:line="214" pos:column="52">chNext</name> <op:operator pos:line="214" pos:column="59">!=</op:operator> <lit:literal type="char" pos:line="214" pos:column="62">'*'</lit:literal></expr>)</condition><then pos:line="214" pos:column="66"> <block pos:line="214" pos:column="67">{
                <expr_stmt><expr><call><name pos:line="215" pos:column="17">ColourTo</name><argument_list pos:line="215" pos:column="25">(<argument><expr><name pos:line="215" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="34">i</name><op:operator pos:line="215" pos:column="35">-</op:operator><lit:literal type="number" pos:line="215" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="215" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="216" pos:column="17">state</name> <op:operator pos:line="216" pos:column="23">=</op:operator> <name pos:line="216" pos:column="25">SCE_C_COMMENTLINE</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="217" pos:column="15">else <if pos:line="217" pos:column="20">if <condition pos:line="217" pos:column="23">(<expr><name pos:line="217" pos:column="24">column</name> <op:operator pos:line="217" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="217" pos:column="34">0</lit:literal> <op:operator pos:line="217" pos:column="36">&amp;&amp;</op:operator> <name pos:line="217" pos:column="39">ch</name> <op:operator pos:line="217" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="217" pos:column="45">'*'</lit:literal> <op:operator pos:line="217" pos:column="49">&amp;&amp;</op:operator> <name pos:line="217" pos:column="52">chNext</name> <op:operator pos:line="217" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="217" pos:column="62">'*'</lit:literal></expr>)</condition><then pos:line="217" pos:column="66"> <block pos:line="217" pos:column="67">{
                <expr_stmt><expr><call><name pos:line="218" pos:column="17">ColourTo</name><argument_list pos:line="218" pos:column="25">(<argument><expr><name pos:line="218" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="218" pos:column="34">i</name><op:operator pos:line="218" pos:column="35">-</op:operator><lit:literal type="number" pos:line="218" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="218" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="219" pos:column="17">state</name> <op:operator pos:line="219" pos:column="23">=</op:operator> <name pos:line="219" pos:column="25">SCE_C_COMMENTDOC</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="220" pos:column="15">else <if pos:line="220" pos:column="20">if <condition pos:line="220" pos:column="23">(<expr><name pos:line="220" pos:column="24">column</name> <op:operator pos:line="220" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="220" pos:column="34">0</lit:literal> <op:operator pos:line="220" pos:column="36">&amp;&amp;</op:operator> <name pos:line="220" pos:column="39">ch</name> <op:operator pos:line="220" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="220" pos:column="45">'/'</lit:literal> <op:operator pos:line="220" pos:column="49">&amp;&amp;</op:operator> <name pos:line="220" pos:column="52">chNext</name> <op:operator pos:line="220" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="220" pos:column="62">'*'</lit:literal></expr>)</condition><then pos:line="220" pos:column="66"> <block pos:line="220" pos:column="67">{
                <expr_stmt><expr><call><name pos:line="221" pos:column="17">ColourTo</name><argument_list pos:line="221" pos:column="25">(<argument><expr><name pos:line="221" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="221" pos:column="34">i</name><op:operator pos:line="221" pos:column="35">-</op:operator><lit:literal type="number" pos:line="221" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="221" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="222" pos:column="17">state</name> <op:operator pos:line="222" pos:column="23">=</op:operator> <name pos:line="222" pos:column="25">SCE_C_COMMENTDOC</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="223" pos:column="15">else <if pos:line="223" pos:column="20">if <condition pos:line="223" pos:column="23">(<expr><name pos:line="223" pos:column="24">ch</name> <op:operator pos:line="223" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="223" pos:column="30">'"'</lit:literal></expr>)</condition><then pos:line="223" pos:column="34"> <block pos:line="223" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="224" pos:column="17">ColourTo</name><argument_list pos:line="224" pos:column="25">(<argument><expr><name pos:line="224" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="34">i</name><op:operator pos:line="224" pos:column="35">-</op:operator><lit:literal type="number" pos:line="224" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="224" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="225" pos:column="17">state</name> <op:operator pos:line="225" pos:column="23">=</op:operator> <name pos:line="225" pos:column="25">SCE_C_STRING</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="226" pos:column="15">else <if pos:line="226" pos:column="20">if <condition pos:line="226" pos:column="23">(<expr><name pos:line="226" pos:column="24">ch</name> <op:operator pos:line="226" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="226" pos:column="30">'\''</lit:literal></expr>)</condition><then pos:line="226" pos:column="35"> <block pos:line="226" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="227" pos:column="17">ColourTo</name><argument_list pos:line="227" pos:column="25">(<argument><expr><name pos:line="227" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="227" pos:column="34">i</name><op:operator pos:line="227" pos:column="35">-</op:operator><lit:literal type="number" pos:line="227" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="227" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="228" pos:column="17">state</name> <op:operator pos:line="228" pos:column="23">=</op:operator> <name pos:line="228" pos:column="25">SCE_C_CHARACTER</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="229" pos:column="15">else <if pos:line="229" pos:column="20">if <condition pos:line="229" pos:column="23">(<expr><name pos:line="229" pos:column="24">ch</name> <op:operator pos:line="229" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="229" pos:column="30">'?'</lit:literal> <op:operator pos:line="229" pos:column="34">&amp;&amp;</op:operator> <name pos:line="229" pos:column="37">column</name> <op:operator pos:line="229" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="229" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="229" pos:column="49"> <block pos:line="229" pos:column="50">{
                <expr_stmt><expr><call><name pos:line="230" pos:column="17">ColourTo</name><argument_list pos:line="230" pos:column="25">(<argument><expr><name pos:line="230" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="34">i</name><op:operator pos:line="230" pos:column="35">-</op:operator><lit:literal type="number" pos:line="230" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="231" pos:column="17">state</name> <op:operator pos:line="231" pos:column="23">=</op:operator> <name pos:line="231" pos:column="25">SCE_C_PREPROCESSOR</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="232" pos:column="15">else <if pos:line="232" pos:column="20">if <condition pos:line="232" pos:column="23">(<expr><call><name pos:line="232" pos:column="24">isCOBOLoperator</name><argument_list pos:line="232" pos:column="39">(<argument><expr><name pos:line="232" pos:column="40">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="232" pos:column="44"> <block pos:line="232" pos:column="45">{
                <expr_stmt><expr><call><name pos:line="233" pos:column="17">ColourTo</name><argument_list pos:line="233" pos:column="25">(<argument><expr><name pos:line="233" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="233" pos:column="34">i</name><op:operator pos:line="233" pos:column="35">-</op:operator><lit:literal type="number" pos:line="233" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="233" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="234" pos:column="17">ColourTo</name><argument_list pos:line="234" pos:column="25">(<argument><expr><name pos:line="234" pos:column="26">styler</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="37">SCE_C_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></then> <else pos:line="236" pos:column="11">else <if pos:line="236" pos:column="16">if <condition pos:line="236" pos:column="19">(<expr><name pos:line="236" pos:column="20">state</name> <op:operator pos:line="236" pos:column="26">==</op:operator> <name pos:line="236" pos:column="29">SCE_C_IDENTIFIER</name></expr>)</condition><then pos:line="236" pos:column="46"> <block pos:line="236" pos:column="47">{
            <if pos:line="237" pos:column="13">if <condition pos:line="237" pos:column="16">(<expr><op:operator pos:line="237" pos:column="17">!</op:operator><call><name pos:line="237" pos:column="18">isCOBOLwordchar</name><argument_list pos:line="237" pos:column="33">(<argument><expr><name pos:line="237" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="237" pos:column="38"> <block pos:line="237" pos:column="39">{
                <decl_stmt><decl><type><name pos:line="238" pos:column="17">int</name></type> <name pos:line="238" pos:column="21">lStateChange</name> <init pos:line="238" pos:column="34">= <expr><call><name pos:line="238" pos:column="36">classifyWordCOBOL</name><argument_list pos:line="238" pos:column="53">(<argument><expr><call><name><name pos:line="238" pos:column="54">styler</name><op:operator pos:line="238" pos:column="60">.</op:operator><name pos:line="238" pos:column="61">GetStartSegment</name></name><argument_list pos:line="238" pos:column="76">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="238" pos:column="80">i</name> <op:operator pos:line="238" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="238" pos:column="84">1</lit:literal></expr></argument>, <argument><expr><name pos:line="238" pos:column="87">keywordlists</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="101">styler</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="109">nContainment</name></expr></argument>, <argument><expr><op:operator pos:line="238" pos:column="123">&amp;</op:operator><name pos:line="238" pos:column="124">bAarea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="240" pos:column="17">if<condition pos:line="240" pos:column="19">(<expr><name pos:line="240" pos:column="20">lStateChange</name> <op:operator pos:line="240" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="240" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="240" pos:column="38"> <block pos:line="240" pos:column="39">{
                    <expr_stmt><expr><call><name><name pos:line="241" pos:column="21">styler</name><op:operator pos:line="241" pos:column="27">.</op:operator><name pos:line="241" pos:column="28">SetLineState</name></name><argument_list pos:line="241" pos:column="40">(<argument><expr><name pos:line="241" pos:column="41">currentLine</name></expr></argument>, <argument><expr><name pos:line="241" pos:column="54">lStateChange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="242" pos:column="21">nContainment</name> <op:operator pos:line="242" pos:column="34">=</op:operator> <name pos:line="242" pos:column="36">lStateChange</name></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name pos:line="245" pos:column="17">state</name> <op:operator pos:line="245" pos:column="23">=</op:operator> <name pos:line="245" pos:column="25">SCE_C_DEFAULT</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="246" pos:column="17">chNext</name> <op:operator pos:line="246" pos:column="24">=</op:operator> <call><name><name pos:line="246" pos:column="26">styler</name><op:operator pos:line="246" pos:column="32">.</op:operator><name pos:line="246" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="246" pos:column="46">(<argument><expr><name pos:line="246" pos:column="47">i</name> <op:operator pos:line="246" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="246" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="247" pos:column="17">if <condition pos:line="247" pos:column="20">(<expr><name pos:line="247" pos:column="21">ch</name> <op:operator pos:line="247" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="247" pos:column="27">'"'</lit:literal></expr>)</condition><then pos:line="247" pos:column="31"> <block pos:line="247" pos:column="32">{
                    <expr_stmt><expr><name pos:line="248" pos:column="21">state</name> <op:operator pos:line="248" pos:column="27">=</op:operator> <name pos:line="248" pos:column="29">SCE_C_STRING</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="249" pos:column="19">else <if pos:line="249" pos:column="24">if <condition pos:line="249" pos:column="27">(<expr><name pos:line="249" pos:column="28">ch</name> <op:operator pos:line="249" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="249" pos:column="34">'\''</lit:literal></expr>)</condition><then pos:line="249" pos:column="39"> <block pos:line="249" pos:column="40">{
                    <expr_stmt><expr><name pos:line="250" pos:column="21">state</name> <op:operator pos:line="250" pos:column="27">=</op:operator> <name pos:line="250" pos:column="29">SCE_C_CHARACTER</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="251" pos:column="19">else <if pos:line="251" pos:column="24">if <condition pos:line="251" pos:column="27">(<expr><call><name pos:line="251" pos:column="28">isCOBOLoperator</name><argument_list pos:line="251" pos:column="43">(<argument><expr><name pos:line="251" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="251" pos:column="48"> <block pos:line="251" pos:column="49">{
                    <expr_stmt><expr><call><name pos:line="252" pos:column="21">ColourTo</name><argument_list pos:line="252" pos:column="29">(<argument><expr><name pos:line="252" pos:column="30">styler</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="41">SCE_C_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if>
            }</block></then></if>
        }</block></then> <else pos:line="255" pos:column="11">else <block pos:line="255" pos:column="16">{
            <if pos:line="256" pos:column="13">if <condition pos:line="256" pos:column="16">(<expr><name pos:line="256" pos:column="17">state</name> <op:operator pos:line="256" pos:column="23">==</op:operator> <name pos:line="256" pos:column="26">SCE_C_PREPROCESSOR</name></expr>)</condition><then pos:line="256" pos:column="45"> <block pos:line="256" pos:column="46">{
                <if pos:line="257" pos:column="17">if <condition pos:line="257" pos:column="20">(<expr><op:operator pos:line="257" pos:column="21">(</op:operator><name pos:line="257" pos:column="22">ch</name> <op:operator pos:line="257" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="257" pos:column="28">'\r'</lit:literal> <op:operator pos:line="257" pos:column="33">||</op:operator> <name pos:line="257" pos:column="36">ch</name> <op:operator pos:line="257" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="257" pos:column="42">'\n'</lit:literal><op:operator pos:line="257" pos:column="46">)</op:operator> <op:operator pos:line="257" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="257" pos:column="51">!</op:operator><op:operator pos:line="257" pos:column="52">(</op:operator><name pos:line="257" pos:column="53">chPrev</name> <op:operator pos:line="257" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="257" pos:column="63">'\\'</lit:literal> <op:operator pos:line="257" pos:column="68">||</op:operator> <name pos:line="257" pos:column="71">chPrev</name> <op:operator pos:line="257" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="257" pos:column="81">'\r'</lit:literal><op:operator pos:line="257" pos:column="85">)</op:operator></expr>)</condition><then pos:line="257" pos:column="87"> <block pos:line="257" pos:column="88">{
                    <expr_stmt><expr><call><name pos:line="258" pos:column="21">ColourTo</name><argument_list pos:line="258" pos:column="29">(<argument><expr><name pos:line="258" pos:column="30">styler</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="38">i</name><op:operator pos:line="258" pos:column="39">-</op:operator><lit:literal type="number" pos:line="258" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="258" pos:column="43">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="259" pos:column="21">state</name> <op:operator pos:line="259" pos:column="27">=</op:operator> <name pos:line="259" pos:column="29">SCE_C_DEFAULT</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="261" pos:column="15">else <if pos:line="261" pos:column="20">if <condition pos:line="261" pos:column="23">(<expr><name pos:line="261" pos:column="24">state</name> <op:operator pos:line="261" pos:column="30">==</op:operator> <name pos:line="261" pos:column="33">SCE_C_COMMENT</name></expr>)</condition><then pos:line="261" pos:column="47"> <block pos:line="261" pos:column="48">{
                <if pos:line="262" pos:column="17">if <condition pos:line="262" pos:column="20">(<expr><name pos:line="262" pos:column="21">ch</name> <op:operator pos:line="262" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="27">'\r'</lit:literal> <op:operator pos:line="262" pos:column="32">||</op:operator> <name pos:line="262" pos:column="35">ch</name> <op:operator pos:line="262" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="41">'\n'</lit:literal></expr>)</condition><then pos:line="262" pos:column="46"> <block pos:line="262" pos:column="47">{
                    <expr_stmt><expr><call><name pos:line="263" pos:column="21">ColourTo</name><argument_list pos:line="263" pos:column="29">(<argument><expr><name pos:line="263" pos:column="30">styler</name></expr></argument>, <argument><expr><name pos:line="263" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="263" pos:column="41">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="264" pos:column="21">state</name> <op:operator pos:line="264" pos:column="27">=</op:operator> <name pos:line="264" pos:column="29">SCE_C_DEFAULT</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="266" pos:column="15">else <if pos:line="266" pos:column="20">if <condition pos:line="266" pos:column="23">(<expr><name pos:line="266" pos:column="24">state</name> <op:operator pos:line="266" pos:column="30">==</op:operator> <name pos:line="266" pos:column="33">SCE_C_COMMENTDOC</name></expr>)</condition><then pos:line="266" pos:column="50"> <block pos:line="266" pos:column="51">{
                <if pos:line="267" pos:column="17">if <condition pos:line="267" pos:column="20">(<expr><name pos:line="267" pos:column="21">ch</name> <op:operator pos:line="267" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="267" pos:column="27">'\r'</lit:literal> <op:operator pos:line="267" pos:column="32">||</op:operator> <name pos:line="267" pos:column="35">ch</name> <op:operator pos:line="267" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="267" pos:column="41">'\n'</lit:literal></expr>)</condition><then pos:line="267" pos:column="46"> <block pos:line="267" pos:column="47">{
                    <if pos:line="268" pos:column="21">if <condition pos:line="268" pos:column="24">(<expr><op:operator pos:line="268" pos:column="25">(</op:operator><op:operator pos:line="268" pos:column="26">(</op:operator><name pos:line="268" pos:column="27">i</name> <op:operator pos:line="268" pos:column="29">&gt;</op:operator> <call><name><name pos:line="268" pos:column="31">styler</name><op:operator pos:line="268" pos:column="37">.</op:operator><name pos:line="268" pos:column="38">GetStartSegment</name></name><argument_list pos:line="268" pos:column="53">()</argument_list></call> <op:operator pos:line="268" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="268" pos:column="58">2</lit:literal><op:operator pos:line="268" pos:column="59">)</op:operator> <op:operator pos:line="268" pos:column="61">||</op:operator> <op:operator pos:line="268" pos:column="64">(</op:operator>
                        <op:operator pos:line="269" pos:column="25">(</op:operator><name pos:line="269" pos:column="26">initStyle</name> <op:operator pos:line="269" pos:column="36">==</op:operator> <name pos:line="269" pos:column="39">SCE_C_COMMENTDOC</name><op:operator pos:line="269" pos:column="55">)</op:operator> <op:operator pos:line="269" pos:column="57">&amp;&amp;</op:operator>
                        <op:operator pos:line="270" pos:column="25">(</op:operator><call><name><name pos:line="270" pos:column="26">styler</name><op:operator pos:line="270" pos:column="32">.</op:operator><name pos:line="270" pos:column="33">GetStartSegment</name></name><argument_list pos:line="270" pos:column="48">()</argument_list></call> <op:operator pos:line="270" pos:column="51">==</op:operator> <call><name><name pos:line="270" pos:column="54">static_cast</name><argument_list pos:line="270" pos:column="65">&lt;<argument><expr><name pos:line="270" pos:column="66">unsigned</name> <name pos:line="270" pos:column="75">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="270" pos:column="79">(<argument><expr><name pos:line="270" pos:column="80">startPos</name></expr></argument>)</argument_list></call><op:operator pos:line="270" pos:column="89">)</op:operator><op:operator pos:line="270" pos:column="90">)</op:operator><op:operator pos:line="270" pos:column="91">)</op:operator></expr>)</condition><then pos:line="270" pos:column="93"> <block pos:line="270" pos:column="94">{
                            <expr_stmt><expr><call><name pos:line="271" pos:column="29">ColourTo</name><argument_list pos:line="271" pos:column="37">(<argument><expr><name pos:line="271" pos:column="38">styler</name></expr></argument>, <argument><expr><name pos:line="271" pos:column="46">i</name></expr></argument>, <argument><expr><name pos:line="271" pos:column="49">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="272" pos:column="29">state</name> <op:operator pos:line="272" pos:column="35">=</op:operator> <name pos:line="272" pos:column="37">SCE_C_DEFAULT</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then> <else pos:line="275" pos:column="15">else <if pos:line="275" pos:column="20">if <condition pos:line="275" pos:column="23">(<expr><name pos:line="275" pos:column="24">state</name> <op:operator pos:line="275" pos:column="30">==</op:operator> <name pos:line="275" pos:column="33">SCE_C_COMMENTLINE</name></expr>)</condition><then pos:line="275" pos:column="51"> <block pos:line="275" pos:column="52">{
                <if pos:line="276" pos:column="17">if <condition pos:line="276" pos:column="20">(<expr><name pos:line="276" pos:column="21">ch</name> <op:operator pos:line="276" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="276" pos:column="27">'\r'</lit:literal> <op:operator pos:line="276" pos:column="32">||</op:operator> <name pos:line="276" pos:column="35">ch</name> <op:operator pos:line="276" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="276" pos:column="41">'\n'</lit:literal></expr>)</condition><then pos:line="276" pos:column="46"> <block pos:line="276" pos:column="47">{
                    <expr_stmt><expr><call><name pos:line="277" pos:column="21">ColourTo</name><argument_list pos:line="277" pos:column="29">(<argument><expr><name pos:line="277" pos:column="30">styler</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="38">i</name><op:operator pos:line="277" pos:column="39">-</op:operator><lit:literal type="number" pos:line="277" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="277" pos:column="43">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="278" pos:column="21">state</name> <op:operator pos:line="278" pos:column="27">=</op:operator> <name pos:line="278" pos:column="29">SCE_C_DEFAULT</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="280" pos:column="15">else <if pos:line="280" pos:column="20">if <condition pos:line="280" pos:column="23">(<expr><name pos:line="280" pos:column="24">state</name> <op:operator pos:line="280" pos:column="30">==</op:operator> <name pos:line="280" pos:column="33">SCE_C_STRING</name></expr>)</condition><then pos:line="280" pos:column="46"> <block pos:line="280" pos:column="47">{
                <if pos:line="281" pos:column="17">if <condition pos:line="281" pos:column="20">(<expr><name pos:line="281" pos:column="21">ch</name> <op:operator pos:line="281" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="281" pos:column="27">'"'</lit:literal></expr>)</condition><then pos:line="281" pos:column="31"> <block pos:line="281" pos:column="32">{
                    <expr_stmt><expr><call><name pos:line="282" pos:column="21">ColourTo</name><argument_list pos:line="282" pos:column="29">(<argument><expr><name pos:line="282" pos:column="30">styler</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="41">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="283" pos:column="21">state</name> <op:operator pos:line="283" pos:column="27">=</op:operator> <name pos:line="283" pos:column="29">SCE_C_DEFAULT</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="285" pos:column="15">else <if pos:line="285" pos:column="20">if <condition pos:line="285" pos:column="23">(<expr><name pos:line="285" pos:column="24">state</name> <op:operator pos:line="285" pos:column="30">==</op:operator> <name pos:line="285" pos:column="33">SCE_C_CHARACTER</name></expr>)</condition><then pos:line="285" pos:column="49"> <block pos:line="285" pos:column="50">{
                <if pos:line="286" pos:column="17">if <condition pos:line="286" pos:column="20">(<expr><name pos:line="286" pos:column="21">ch</name> <op:operator pos:line="286" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="286" pos:column="27">'\''</lit:literal></expr>)</condition><then pos:line="286" pos:column="32"> <block pos:line="286" pos:column="33">{
                    <expr_stmt><expr><call><name pos:line="287" pos:column="21">ColourTo</name><argument_list pos:line="287" pos:column="29">(<argument><expr><name pos:line="287" pos:column="30">styler</name></expr></argument>, <argument><expr><name pos:line="287" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="287" pos:column="41">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="288" pos:column="21">state</name> <op:operator pos:line="288" pos:column="27">=</op:operator> <name pos:line="288" pos:column="29">SCE_C_DEFAULT</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if>
        }</block></else></if></else></if>
        <expr_stmt><expr><name pos:line="292" pos:column="9">chPrev</name> <op:operator pos:line="292" pos:column="16">=</op:operator> <name pos:line="292" pos:column="18">ch</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="293" pos:column="9">bNewLine</name> <op:operator pos:line="293" pos:column="18">=</op:operator> <name pos:line="293" pos:column="20">bSetNewLine</name></expr>;</expr_stmt>
		<if pos:line="294" pos:column="17">if <condition pos:line="294" pos:column="20">(<expr><name pos:line="294" pos:column="21">bNewLine</name></expr>)</condition><then pos:line="294" pos:column="30">
			<block pos:line="295" pos:column="25">{
			<expr_stmt><expr><name pos:line="296" pos:column="25">bAarea</name> <op:operator pos:line="296" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="296" pos:column="34">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name pos:line="299" pos:column="5">ColourTo</name><argument_list pos:line="299" pos:column="13">(<argument><expr><name pos:line="299" pos:column="14">styler</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="22">lengthDoc</name> <op:operator pos:line="299" pos:column="32">-</op:operator> <lit:literal type="number" pos:line="299" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><name pos:line="299" pos:column="37">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="302" pos:column="1">static</specifier> <name pos:line="302" pos:column="8">void</name></type> <name pos:line="302" pos:column="13">FoldCOBOLDoc</name><parameter_list pos:line="302" pos:column="25">(<param><decl><type><name pos:line="302" pos:column="26">unsigned</name> <name pos:line="302" pos:column="35">int</name></type> <name pos:line="302" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="302" pos:column="49">int</name></type> <name pos:line="302" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="302" pos:column="61">int</name></type></decl></param>, <param><decl><type><name><name pos:line="302" pos:column="66">WordList</name> <type:modifier pos:line="302" pos:column="75">*</type:modifier><index pos:line="302" pos:column="76">[]</index></name></type></decl></param>,
                            <param><decl><type><name pos:line="303" pos:column="29">Accessor</name> <type:modifier pos:line="303" pos:column="38">&amp;</type:modifier></type><name pos:line="303" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="47">{
    <decl_stmt><decl><type><name pos:line="304" pos:column="5">bool</name></type> <name pos:line="304" pos:column="10">foldCompact</name> <init pos:line="304" pos:column="22">= <expr><call><name><name pos:line="304" pos:column="24">styler</name><op:operator pos:line="304" pos:column="30">.</op:operator><name pos:line="304" pos:column="31">GetPropertyInt</name></name><argument_list pos:line="304" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="46">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="304" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="304" pos:column="65">!=</op:operator> <lit:literal type="number" pos:line="304" pos:column="68">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="305" pos:column="5">unsigned</name> <name pos:line="305" pos:column="14">int</name></type> <name pos:line="305" pos:column="18">endPos</name> <init pos:line="305" pos:column="25">= <expr><name pos:line="305" pos:column="27">startPos</name> <op:operator pos:line="305" pos:column="36">+</op:operator> <name pos:line="305" pos:column="38">length</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="306" pos:column="5">int</name></type> <name pos:line="306" pos:column="9">visibleChars</name> <init pos:line="306" pos:column="22">= <expr><lit:literal type="number" pos:line="306" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="307" pos:column="5">int</name></type> <name pos:line="307" pos:column="9">lineCurrent</name> <init pos:line="307" pos:column="21">= <expr><call><name><name pos:line="307" pos:column="23">styler</name><op:operator pos:line="307" pos:column="29">.</op:operator><name pos:line="307" pos:column="30">GetLine</name></name><argument_list pos:line="307" pos:column="37">(<argument><expr><name pos:line="307" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="308" pos:column="5">int</name></type> <name pos:line="308" pos:column="9">levelPrev</name> <init pos:line="308" pos:column="19">= <expr><name pos:line="308" pos:column="21">lineCurrent</name> <op:operator pos:line="308" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="308" pos:column="35">0</lit:literal> <op:operator pos:line="308" pos:column="37">?</op:operator> <call><name><name pos:line="308" pos:column="39">styler</name><op:operator pos:line="308" pos:column="45">.</op:operator><name pos:line="308" pos:column="46">LevelAt</name></name><argument_list pos:line="308" pos:column="53">(<argument><expr><name pos:line="308" pos:column="54">lineCurrent</name> <op:operator pos:line="308" pos:column="66">-</op:operator> <lit:literal type="number" pos:line="308" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="308" pos:column="71">&amp;</op:operator> <name pos:line="308" pos:column="73">SC_FOLDLEVELNUMBERMASK</name> <op:operator pos:line="308" pos:column="96">:</op:operator> <lit:literal type="number" pos:line="308" pos:column="98">0xFFF</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="309" pos:column="5">char</name></type> <name pos:line="309" pos:column="10">chNext</name> <init pos:line="309" pos:column="17">= <expr><name><name pos:line="309" pos:column="19">styler</name><index pos:line="309" pos:column="25">[<expr><name pos:line="309" pos:column="26">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="311" pos:column="5">bool</name></type> <name pos:line="311" pos:column="10">bNewLine</name> <init pos:line="311" pos:column="19">= <expr><lit:literal type="boolean" pos:line="311" pos:column="21">true</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="312" pos:column="5">bool</name></type> <name pos:line="312" pos:column="10">bAarea</name> <init pos:line="312" pos:column="17">= <expr><op:operator pos:line="312" pos:column="19">!</op:operator><call><name pos:line="312" pos:column="20">isspacechar</name><argument_list pos:line="312" pos:column="31">(<argument><expr><name pos:line="312" pos:column="32">chNext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="313" pos:column="9">int</name></type> <name pos:line="313" pos:column="13">column</name> <init pos:line="313" pos:column="20">= <expr><lit:literal type="number" pos:line="313" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="314" pos:column="9">bool</name></type> <name pos:line="314" pos:column="14">bComment</name> <init pos:line="314" pos:column="23">= <expr><lit:literal type="boolean" pos:line="314" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="315" pos:column="5">for (<init><decl><type><name pos:line="315" pos:column="10">unsigned</name> <name pos:line="315" pos:column="19">int</name></type> <name pos:line="315" pos:column="23">i</name> <init pos:line="315" pos:column="25">= <expr><name pos:line="315" pos:column="27">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="315" pos:column="37">i</name> <op:operator pos:line="315" pos:column="39">&lt;</op:operator> <name pos:line="315" pos:column="41">endPos</name></expr>;</condition> <incr><expr><name pos:line="315" pos:column="49">i</name><op:operator pos:line="315" pos:column="50">++</op:operator></expr></incr>) <block pos:line="315" pos:column="54">{
        <decl_stmt><decl><type><name pos:line="316" pos:column="9">char</name></type> <name pos:line="316" pos:column="14">ch</name> <init pos:line="316" pos:column="17">= <expr><name pos:line="316" pos:column="19">chNext</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="317" pos:column="9">chNext</name> <op:operator pos:line="317" pos:column="16">=</op:operator> <call><name><name pos:line="317" pos:column="18">styler</name><op:operator pos:line="317" pos:column="24">.</op:operator><name pos:line="317" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="317" pos:column="38">(<argument><expr><name pos:line="317" pos:column="39">i</name> <op:operator pos:line="317" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="317" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="318" pos:column="17">++</op:operator><name pos:line="318" pos:column="19">column</name></expr>;</expr_stmt>

        <if pos:line="320" pos:column="9">if <condition pos:line="320" pos:column="12">(<expr><name pos:line="320" pos:column="13">bNewLine</name></expr>)</condition><then pos:line="320" pos:column="22"> <block pos:line="320" pos:column="23">{
			<expr_stmt><expr><name pos:line="321" pos:column="25">column</name> <op:operator pos:line="321" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="321" pos:column="34">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="322" pos:column="25">bComment</name> <op:operator pos:line="322" pos:column="34">=</op:operator> <op:operator pos:line="322" pos:column="36">(</op:operator><name pos:line="322" pos:column="37">ch</name> <op:operator pos:line="322" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="322" pos:column="43">'*'</lit:literal> <op:operator pos:line="322" pos:column="47">||</op:operator> <name pos:line="322" pos:column="50">ch</name> <op:operator pos:line="322" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="322" pos:column="56">'/'</lit:literal> <op:operator pos:line="322" pos:column="60">||</op:operator> <name pos:line="322" pos:column="63">ch</name> <op:operator pos:line="322" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="322" pos:column="69">'?'</lit:literal><op:operator pos:line="322" pos:column="72">)</op:operator></expr>;</expr_stmt>
        }</block></then></if>
		<if pos:line="324" pos:column="17">if <condition pos:line="324" pos:column="20">(<expr><name pos:line="324" pos:column="21">column</name> <op:operator pos:line="324" pos:column="28">&lt;=</op:operator> <lit:literal type="number" pos:line="324" pos:column="31">1</lit:literal> <op:operator pos:line="324" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="324" pos:column="36">!</op:operator><name pos:line="324" pos:column="37">bAarea</name></expr>)</condition><then pos:line="324" pos:column="44"> <block pos:line="324" pos:column="45">{
			<expr_stmt><expr><name pos:line="325" pos:column="25">bAarea</name> <op:operator pos:line="325" pos:column="32">=</op:operator> <op:operator pos:line="325" pos:column="34">!</op:operator><call><name pos:line="325" pos:column="35">isspacechar</name><argument_list pos:line="325" pos:column="46">(<argument><expr><name pos:line="325" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
        <decl_stmt><decl><type><name pos:line="327" pos:column="9">bool</name></type> <name pos:line="327" pos:column="14">atEOL</name> <init pos:line="327" pos:column="20">= <expr><op:operator pos:line="327" pos:column="22">(</op:operator><name pos:line="327" pos:column="23">ch</name> <op:operator pos:line="327" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="29">'\r'</lit:literal> <op:operator pos:line="327" pos:column="34">&amp;&amp;</op:operator> <name pos:line="327" pos:column="37">chNext</name> <op:operator pos:line="327" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="327" pos:column="47">'\n'</lit:literal><op:operator pos:line="327" pos:column="51">)</op:operator> <op:operator pos:line="327" pos:column="53">||</op:operator> <op:operator pos:line="327" pos:column="56">(</op:operator><name pos:line="327" pos:column="57">ch</name> <op:operator pos:line="327" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="63">'\n'</lit:literal><op:operator pos:line="327" pos:column="67">)</op:operator></expr></init></decl>;</decl_stmt>
        <if pos:line="328" pos:column="9">if <condition pos:line="328" pos:column="12">(<expr><name pos:line="328" pos:column="13">atEOL</name></expr>)</condition><then pos:line="328" pos:column="19"> <block pos:line="328" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="329" pos:column="25">int</name></type> <name pos:line="329" pos:column="29">nContainment</name> <init pos:line="329" pos:column="42">= <expr><call><name><name pos:line="329" pos:column="44">styler</name><op:operator pos:line="329" pos:column="50">.</op:operator><name pos:line="329" pos:column="51">GetLineState</name></name><argument_list pos:line="329" pos:column="63">(<argument><expr><name pos:line="329" pos:column="64">lineCurrent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="330" pos:column="13">int</name></type> <name pos:line="330" pos:column="17">lev</name> <init pos:line="330" pos:column="21">= <expr><call><name pos:line="330" pos:column="23">CountBits</name><argument_list pos:line="330" pos:column="32">(<argument><expr><name pos:line="330" pos:column="33">nContainment</name> <op:operator pos:line="330" pos:column="46">&amp;</op:operator> <name pos:line="330" pos:column="48">IN_FLAGS</name></expr></argument>)</argument_list></call> <op:operator pos:line="330" pos:column="58">|</op:operator> <name pos:line="330" pos:column="60">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
			<if pos:line="331" pos:column="25">if <condition pos:line="331" pos:column="28">(<expr><name pos:line="331" pos:column="29">bAarea</name> <op:operator pos:line="331" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="331" pos:column="39">!</op:operator><name pos:line="331" pos:column="40">bComment</name></expr>)</condition><then pos:line="331" pos:column="49">
				<expr_stmt><expr><op:operator pos:line="332" pos:column="33">--</op:operator><name pos:line="332" pos:column="35">lev</name></expr>;</expr_stmt></then></if>
            <if pos:line="333" pos:column="13">if <condition pos:line="333" pos:column="16">(<expr><name pos:line="333" pos:column="17">visibleChars</name> <op:operator pos:line="333" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="333" pos:column="33">0</lit:literal> <op:operator pos:line="333" pos:column="35">&amp;&amp;</op:operator> <name pos:line="333" pos:column="38">foldCompact</name></expr>)</condition><then pos:line="333" pos:column="50">
                <expr_stmt><expr><name pos:line="334" pos:column="17">lev</name> <op:operator pos:line="334" pos:column="21">|=</op:operator> <name pos:line="334" pos:column="24">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
            <if pos:line="335" pos:column="13">if <condition pos:line="335" pos:column="16">(<expr><op:operator pos:line="335" pos:column="17">(</op:operator><name pos:line="335" pos:column="18">bAarea</name><op:operator pos:line="335" pos:column="24">)</op:operator> <op:operator pos:line="335" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="335" pos:column="29">(</op:operator><name pos:line="335" pos:column="30">visibleChars</name> <op:operator pos:line="335" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="335" pos:column="45">0</lit:literal><op:operator pos:line="335" pos:column="46">)</op:operator> <op:operator pos:line="335" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="335" pos:column="51">!</op:operator><op:operator pos:line="335" pos:column="52">(</op:operator><name pos:line="335" pos:column="53">nContainment</name> <op:operator pos:line="335" pos:column="66">&amp;</op:operator> <name pos:line="335" pos:column="68">NOT_HEADER</name><op:operator pos:line="335" pos:column="78">)</op:operator> <op:operator pos:line="335" pos:column="80">&amp;&amp;</op:operator> <op:operator pos:line="335" pos:column="83">!</op:operator><name pos:line="335" pos:column="84">bComment</name></expr>)</condition><then pos:line="335" pos:column="93">
                <expr_stmt><expr><name pos:line="336" pos:column="17">lev</name> <op:operator pos:line="336" pos:column="21">|=</op:operator> <name pos:line="336" pos:column="24">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
            <if pos:line="337" pos:column="13">if <condition pos:line="337" pos:column="16">(<expr><name pos:line="337" pos:column="17">lev</name> <op:operator pos:line="337" pos:column="21">!=</op:operator> <call><name><name pos:line="337" pos:column="24">styler</name><op:operator pos:line="337" pos:column="30">.</op:operator><name pos:line="337" pos:column="31">LevelAt</name></name><argument_list pos:line="337" pos:column="38">(<argument><expr><name pos:line="337" pos:column="39">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="337" pos:column="52"> <block pos:line="337" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="338" pos:column="17">styler</name><op:operator pos:line="338" pos:column="23">.</op:operator><name pos:line="338" pos:column="24">SetLevel</name></name><argument_list pos:line="338" pos:column="32">(<argument><expr><name pos:line="338" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="46">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
			<if pos:line="340" pos:column="25">if <condition pos:line="340" pos:column="28">(<expr><op:operator pos:line="340" pos:column="29">(</op:operator><name pos:line="340" pos:column="30">lev</name> <op:operator pos:line="340" pos:column="34">&amp;</op:operator> <name pos:line="340" pos:column="36">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="340" pos:column="58">)</op:operator> <op:operator pos:line="340" pos:column="60">&lt;=</op:operator> <op:operator pos:line="340" pos:column="63">(</op:operator><name pos:line="340" pos:column="64">levelPrev</name> <op:operator pos:line="340" pos:column="74">&amp;</op:operator> <name pos:line="340" pos:column="76">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="340" pos:column="98">)</op:operator></expr>)</condition><then pos:line="340" pos:column="100"> <block pos:line="340" pos:column="101">{
				<comment type="line" pos:line="341" pos:column="33">// this level is at the same level or less than the previous line</comment>
				<comment type="line" pos:line="342" pos:column="33">// therefore these is nothing for the previous header to collapse, so remove the header</comment>
				<expr_stmt><expr><call><name><name pos:line="343" pos:column="33">styler</name><op:operator pos:line="343" pos:column="39">.</op:operator><name pos:line="343" pos:column="40">SetLevel</name></name><argument_list pos:line="343" pos:column="48">(<argument><expr><name pos:line="343" pos:column="49">lineCurrent</name> <op:operator pos:line="343" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="343" pos:column="63">1</lit:literal></expr></argument>, <argument><expr><name pos:line="343" pos:column="66">levelPrev</name> <op:operator pos:line="343" pos:column="76">&amp;</op:operator> <op:operator pos:line="343" pos:column="78">~</op:operator><name pos:line="343" pos:column="79">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
            <expr_stmt><expr><name pos:line="345" pos:column="13">levelPrev</name> <op:operator pos:line="345" pos:column="23">=</op:operator> <name pos:line="345" pos:column="25">lev</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="346" pos:column="13">visibleChars</name> <op:operator pos:line="346" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="346" pos:column="28">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="347" pos:column="25">bAarea</name> <op:operator pos:line="347" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="347" pos:column="34">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="348" pos:column="13">bNewLine</name> <op:operator pos:line="348" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="348" pos:column="24">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="349" pos:column="13">lineCurrent</name><op:operator pos:line="349" pos:column="24">++</op:operator></expr>;</expr_stmt>
        }</block></then> <else pos:line="350" pos:column="11">else <block pos:line="350" pos:column="16">{
            <expr_stmt><expr><name pos:line="351" pos:column="13">bNewLine</name> <op:operator pos:line="351" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="351" pos:column="24">false</lit:literal></expr>;</expr_stmt>
        }</block></else></if>


        <if pos:line="355" pos:column="9">if <condition pos:line="355" pos:column="12">(<expr><op:operator pos:line="355" pos:column="13">!</op:operator><call><name pos:line="355" pos:column="14">isspacechar</name><argument_list pos:line="355" pos:column="25">(<argument><expr><name pos:line="355" pos:column="26">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="355" pos:column="30">
            <expr_stmt><expr><name pos:line="356" pos:column="13">visibleChars</name><op:operator pos:line="356" pos:column="25">++</op:operator></expr>;</expr_stmt></then></if>
    }</block></for>

    <comment type="line" pos:line="359" pos:column="5">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
    <decl_stmt><decl><type><name pos:line="360" pos:column="5">int</name></type> <name pos:line="360" pos:column="9">flagsNext</name> <init pos:line="360" pos:column="19">= <expr><call><name><name pos:line="360" pos:column="21">styler</name><op:operator pos:line="360" pos:column="27">.</op:operator><name pos:line="360" pos:column="28">LevelAt</name></name><argument_list pos:line="360" pos:column="35">(<argument><expr><name pos:line="360" pos:column="36">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="360" pos:column="49">&amp;</op:operator> <op:operator pos:line="360" pos:column="51">~</op:operator><name pos:line="360" pos:column="52">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="361" pos:column="5">styler</name><op:operator pos:line="361" pos:column="11">.</op:operator><name pos:line="361" pos:column="12">SetLevel</name></name><argument_list pos:line="361" pos:column="20">(<argument><expr><name pos:line="361" pos:column="21">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="34">levelPrev</name> <op:operator pos:line="361" pos:column="44">|</op:operator> <name pos:line="361" pos:column="46">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="364" pos:column="1">static</specifier> <specifier pos:line="364" pos:column="8">const</specifier> <name pos:line="364" pos:column="14">char</name> <type:modifier pos:line="364" pos:column="19">*</type:modifier> <specifier pos:line="364" pos:column="21">const</specifier></type> <name><name pos:line="364" pos:column="27">COBOLWordListDesc</name><index pos:line="364" pos:column="44">[]</index></name> <init pos:line="364" pos:column="47">= <expr><block pos:line="364" pos:column="49">{
    <expr><lit:literal type="string" pos:line="365" pos:column="5">"A Keywords"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="366" pos:column="5">"B Keywords"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="367" pos:column="5">"Extended Keywords"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="368" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="371" pos:column="1">LexerModule</name></type> <name pos:line="371" pos:column="13">lmCOBOL</name><argument_list pos:line="371" pos:column="20">(<argument><expr><name pos:line="371" pos:column="21">SCLEX_COBOL</name></expr></argument>, <argument><expr><name pos:line="371" pos:column="34">ColouriseCOBOLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="371" pos:column="53">"COBOL"</lit:literal></expr></argument>, <argument><expr><name pos:line="371" pos:column="62">FoldCOBOLDoc</name></expr></argument>, <argument><expr><name pos:line="371" pos:column="76">COBOLWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
