<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexPS.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexPS.cxx
 ** Lexer for PostScript
 **
 ** Written by Nigel Hathaway &lt;nigel@bprj.co.uk&gt;.
 ** The License.txt file describes the conditions under which this software may be distributed.
 **/</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">IsASelfDelimitingChar</name><parameter_list pos:line="31" pos:column="41">(<param><decl><type><specifier pos:line="31" pos:column="42">const</specifier> <name pos:line="31" pos:column="48">int</name></type> <name pos:line="31" pos:column="52">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="56">{
    <return pos:line="32" pos:column="5">return <expr><op:operator pos:line="32" pos:column="12">(</op:operator><name pos:line="32" pos:column="13">ch</name> <op:operator pos:line="32" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="19">'['</lit:literal> <op:operator pos:line="32" pos:column="23">||</op:operator> <name pos:line="32" pos:column="26">ch</name> <op:operator pos:line="32" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="32">']'</lit:literal> <op:operator pos:line="32" pos:column="36">||</op:operator> <name pos:line="32" pos:column="39">ch</name> <op:operator pos:line="32" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="45">'{'</lit:literal> <op:operator pos:line="32" pos:column="49">||</op:operator> <name pos:line="32" pos:column="52">ch</name> <op:operator pos:line="32" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="58">'}'</lit:literal> <op:operator pos:line="32" pos:column="62">||</op:operator>
            <name pos:line="33" pos:column="13">ch</name> <op:operator pos:line="33" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="19">'/'</lit:literal> <op:operator pos:line="33" pos:column="23">||</op:operator> <name pos:line="33" pos:column="26">ch</name> <op:operator pos:line="33" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="32">'&lt;'</lit:literal> <op:operator pos:line="33" pos:column="36">||</op:operator> <name pos:line="33" pos:column="39">ch</name> <op:operator pos:line="33" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="45">'&gt;'</lit:literal> <op:operator pos:line="33" pos:column="49">||</op:operator>
            <name pos:line="34" pos:column="13">ch</name> <op:operator pos:line="34" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="19">'('</lit:literal> <op:operator pos:line="34" pos:column="23">||</op:operator> <name pos:line="34" pos:column="26">ch</name> <op:operator pos:line="34" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="32">')'</lit:literal> <op:operator pos:line="34" pos:column="36">||</op:operator> <name pos:line="34" pos:column="39">ch</name> <op:operator pos:line="34" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="45">'%'</lit:literal><op:operator pos:line="34" pos:column="48">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="37" pos:column="1">static</specifier> <specifier pos:line="37" pos:column="8">inline</specifier> <name pos:line="37" pos:column="15">bool</name></type> <name pos:line="37" pos:column="20">IsAWhitespaceChar</name><parameter_list pos:line="37" pos:column="37">(<param><decl><type><specifier pos:line="37" pos:column="38">const</specifier> <name pos:line="37" pos:column="44">int</name></type> <name pos:line="37" pos:column="48">ch</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="52">{
    <return pos:line="38" pos:column="5">return <expr><op:operator pos:line="38" pos:column="12">(</op:operator><name pos:line="38" pos:column="13">ch</name> <op:operator pos:line="38" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="19">' '</lit:literal>  <op:operator pos:line="38" pos:column="24">||</op:operator> <name pos:line="38" pos:column="27">ch</name> <op:operator pos:line="38" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="33">'\t'</lit:literal> <op:operator pos:line="38" pos:column="38">||</op:operator> <name pos:line="38" pos:column="41">ch</name> <op:operator pos:line="38" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="47">'\r'</lit:literal> <op:operator pos:line="38" pos:column="52">||</op:operator>
            <name pos:line="39" pos:column="13">ch</name> <op:operator pos:line="39" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="19">'\n'</lit:literal> <op:operator pos:line="39" pos:column="24">||</op:operator> <name pos:line="39" pos:column="27">ch</name> <op:operator pos:line="39" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="33">'\f'</lit:literal> <op:operator pos:line="39" pos:column="38">||</op:operator> <name pos:line="39" pos:column="41">ch</name> <op:operator pos:line="39" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="47">'\0'</lit:literal><op:operator pos:line="39" pos:column="51">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="42" pos:column="1">static</specifier> <name pos:line="42" pos:column="8">bool</name></type> <name pos:line="42" pos:column="13">IsABaseNDigit</name><parameter_list pos:line="42" pos:column="26">(<param><decl><type><specifier pos:line="42" pos:column="27">const</specifier> <name pos:line="42" pos:column="33">int</name></type> <name pos:line="42" pos:column="37">ch</name></decl></param>, <param><decl><type><specifier pos:line="42" pos:column="41">const</specifier> <name pos:line="42" pos:column="47">int</name></type> <name pos:line="42" pos:column="51">base</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="57">{
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">int</name></type> <name pos:line="43" pos:column="9">maxdig</name> <init pos:line="43" pos:column="16">= <expr><lit:literal type="char" pos:line="43" pos:column="18">'9'</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">int</name></type> <name pos:line="44" pos:column="9">letterext</name> <init pos:line="44" pos:column="19">= <expr><op:operator pos:line="44" pos:column="21">-</op:operator><lit:literal type="number" pos:line="44" pos:column="22">1</lit:literal></expr></init></decl>;</decl_stmt>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">base</name> <op:operator pos:line="46" pos:column="14">&lt;=</op:operator> <lit:literal type="number" pos:line="46" pos:column="17">10</lit:literal></expr>)</condition><then pos:line="46" pos:column="20">
        <expr_stmt><expr><name pos:line="47" pos:column="9">maxdig</name> <op:operator pos:line="47" pos:column="16">=</op:operator> <lit:literal type="char" pos:line="47" pos:column="18">'0'</lit:literal> <op:operator pos:line="47" pos:column="22">+</op:operator> <name pos:line="47" pos:column="24">base</name> <op:operator pos:line="47" pos:column="29">-</op:operator> <lit:literal type="number" pos:line="47" pos:column="31">1</lit:literal></expr>;</expr_stmt></then>
    <else pos:line="48" pos:column="5">else
        <expr_stmt><expr><name pos:line="49" pos:column="9">letterext</name> <op:operator pos:line="49" pos:column="19">=</op:operator> <name pos:line="49" pos:column="21">base</name> <op:operator pos:line="49" pos:column="26">-</op:operator> <lit:literal type="number" pos:line="49" pos:column="28">11</lit:literal></expr>;</expr_stmt></else></if>

    <return pos:line="51" pos:column="5">return <expr><op:operator pos:line="51" pos:column="12">(</op:operator><op:operator pos:line="51" pos:column="13">(</op:operator><name pos:line="51" pos:column="14">ch</name> <op:operator pos:line="51" pos:column="17">&gt;=</op:operator> <lit:literal type="char" pos:line="51" pos:column="20">'0'</lit:literal> <op:operator pos:line="51" pos:column="24">&amp;&amp;</op:operator> <name pos:line="51" pos:column="27">ch</name> <op:operator pos:line="51" pos:column="30">&lt;=</op:operator> <name pos:line="51" pos:column="33">maxdig</name><op:operator pos:line="51" pos:column="39">)</op:operator> <op:operator pos:line="51" pos:column="41">||</op:operator>
            <op:operator pos:line="52" pos:column="13">(</op:operator><name pos:line="52" pos:column="14">ch</name> <op:operator pos:line="52" pos:column="17">&gt;=</op:operator> <lit:literal type="char" pos:line="52" pos:column="20">'A'</lit:literal> <op:operator pos:line="52" pos:column="24">&amp;&amp;</op:operator> <name pos:line="52" pos:column="27">ch</name> <op:operator pos:line="52" pos:column="30">&lt;=</op:operator> <op:operator pos:line="52" pos:column="33">(</op:operator><lit:literal type="char" pos:line="52" pos:column="34">'A'</lit:literal> <op:operator pos:line="52" pos:column="38">+</op:operator> <name pos:line="52" pos:column="40">letterext</name><op:operator pos:line="52" pos:column="49">)</op:operator><op:operator pos:line="52" pos:column="50">)</op:operator> <op:operator pos:line="52" pos:column="52">||</op:operator>
            <op:operator pos:line="53" pos:column="13">(</op:operator><name pos:line="53" pos:column="14">ch</name> <op:operator pos:line="53" pos:column="17">&gt;=</op:operator> <lit:literal type="char" pos:line="53" pos:column="20">'a'</lit:literal> <op:operator pos:line="53" pos:column="24">&amp;&amp;</op:operator> <name pos:line="53" pos:column="27">ch</name> <op:operator pos:line="53" pos:column="30">&lt;=</op:operator> <op:operator pos:line="53" pos:column="33">(</op:operator><lit:literal type="char" pos:line="53" pos:column="34">'a'</lit:literal> <op:operator pos:line="53" pos:column="38">+</op:operator> <name pos:line="53" pos:column="40">letterext</name><op:operator pos:line="53" pos:column="49">)</op:operator><op:operator pos:line="53" pos:column="50">)</op:operator><op:operator pos:line="53" pos:column="51">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="56" pos:column="1">static</specifier> <specifier pos:line="56" pos:column="8">inline</specifier> <name pos:line="56" pos:column="15">bool</name></type> <name pos:line="56" pos:column="20">IsABase85Char</name><parameter_list pos:line="56" pos:column="33">(<param><decl><type><specifier pos:line="56" pos:column="34">const</specifier> <name pos:line="56" pos:column="40">int</name></type> <name pos:line="56" pos:column="44">ch</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="48">{
    <return pos:line="57" pos:column="5">return <expr><op:operator pos:line="57" pos:column="12">(</op:operator><op:operator pos:line="57" pos:column="13">(</op:operator><name pos:line="57" pos:column="14">ch</name> <op:operator pos:line="57" pos:column="17">&gt;=</op:operator> <lit:literal type="char" pos:line="57" pos:column="20">'!'</lit:literal> <op:operator pos:line="57" pos:column="24">&amp;&amp;</op:operator> <name pos:line="57" pos:column="27">ch</name> <op:operator pos:line="57" pos:column="30">&lt;=</op:operator> <lit:literal type="char" pos:line="57" pos:column="33">'u'</lit:literal><op:operator pos:line="57" pos:column="36">)</op:operator> <op:operator pos:line="57" pos:column="38">||</op:operator> <name pos:line="57" pos:column="41">ch</name> <op:operator pos:line="57" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="47">'z'</lit:literal><op:operator pos:line="57" pos:column="50">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="60" pos:column="1">static</specifier> <name pos:line="60" pos:column="8">void</name></type> <name pos:line="60" pos:column="13">ColourisePSDoc</name><parameter_list pos:line="60" pos:column="27">(
    <param><decl><type><name pos:line="61" pos:column="5">unsigned</name> <name pos:line="61" pos:column="14">int</name></type> <name pos:line="61" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="62" pos:column="5">int</name></type> <name pos:line="62" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="63" pos:column="5">int</name></type> <name pos:line="63" pos:column="9">initStyle</name></decl></param>,
    <param><decl><type><name pos:line="64" pos:column="5">WordList</name> <type:modifier pos:line="64" pos:column="14">*</type:modifier></type><name><name pos:line="64" pos:column="15">keywordlists</name><index pos:line="64" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="65" pos:column="5">Accessor</name> <type:modifier pos:line="65" pos:column="14">&amp;</type:modifier></type><name pos:line="65" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="23">{

    <decl_stmt><decl><type><name pos:line="67" pos:column="5">WordList</name> <type:modifier pos:line="67" pos:column="14">&amp;</type:modifier></type><name pos:line="67" pos:column="15">keywords1</name> <init pos:line="67" pos:column="25">= <expr><op:operator pos:line="67" pos:column="27">*</op:operator><name><name pos:line="67" pos:column="28">keywordlists</name><index pos:line="67" pos:column="40">[<expr><lit:literal type="number" pos:line="67" pos:column="41">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="68" pos:column="5">WordList</name> <type:modifier pos:line="68" pos:column="14">&amp;</type:modifier></type><name pos:line="68" pos:column="15">keywords2</name> <init pos:line="68" pos:column="25">= <expr><op:operator pos:line="68" pos:column="27">*</op:operator><name><name pos:line="68" pos:column="28">keywordlists</name><index pos:line="68" pos:column="40">[<expr><lit:literal type="number" pos:line="68" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="69" pos:column="5">WordList</name> <type:modifier pos:line="69" pos:column="14">&amp;</type:modifier></type><name pos:line="69" pos:column="15">keywords3</name> <init pos:line="69" pos:column="25">= <expr><op:operator pos:line="69" pos:column="27">*</op:operator><name><name pos:line="69" pos:column="28">keywordlists</name><index pos:line="69" pos:column="40">[<expr><lit:literal type="number" pos:line="69" pos:column="41">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="70" pos:column="5">WordList</name> <type:modifier pos:line="70" pos:column="14">&amp;</type:modifier></type><name pos:line="70" pos:column="15">keywords4</name> <init pos:line="70" pos:column="25">= <expr><op:operator pos:line="70" pos:column="27">*</op:operator><name><name pos:line="70" pos:column="28">keywordlists</name><index pos:line="70" pos:column="40">[<expr><lit:literal type="number" pos:line="70" pos:column="41">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="71" pos:column="5">WordList</name> <type:modifier pos:line="71" pos:column="14">&amp;</type:modifier></type><name pos:line="71" pos:column="15">keywords5</name> <init pos:line="71" pos:column="25">= <expr><op:operator pos:line="71" pos:column="27">*</op:operator><name><name pos:line="71" pos:column="28">keywordlists</name><index pos:line="71" pos:column="40">[<expr><lit:literal type="number" pos:line="71" pos:column="41">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <function_decl><type><name pos:line="73" pos:column="5">StyleContext</name></type> <name pos:line="73" pos:column="18">sc</name><parameter_list pos:line="73" pos:column="20">(<param><decl><type><name pos:line="73" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="73" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="73" pos:column="39">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="73" pos:column="50">styler</name></type></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name pos:line="75" pos:column="5">bool</name></type> <name pos:line="75" pos:column="10">tokenizing</name> <init pos:line="75" pos:column="21">= <expr><call><name><name pos:line="75" pos:column="23">styler</name><op:operator pos:line="75" pos:column="29">.</op:operator><name pos:line="75" pos:column="30">GetPropertyInt</name></name><argument_list pos:line="75" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="45">"ps.tokenize"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="75" pos:column="60">!=</op:operator> <lit:literal type="number" pos:line="75" pos:column="63">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">int</name></type> <name pos:line="76" pos:column="9">pslevel</name> <init pos:line="76" pos:column="17">= <expr><call><name><name pos:line="76" pos:column="19">styler</name><op:operator pos:line="76" pos:column="25">.</op:operator><name pos:line="76" pos:column="26">GetPropertyInt</name></name><argument_list pos:line="76" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="41">"ps.level"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="76" pos:column="53">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">int</name></type> <name pos:line="77" pos:column="9">lineCurrent</name> <init pos:line="77" pos:column="21">= <expr><call><name><name pos:line="77" pos:column="23">styler</name><op:operator pos:line="77" pos:column="29">.</op:operator><name pos:line="77" pos:column="30">GetLine</name></name><argument_list pos:line="77" pos:column="37">(<argument><expr><name pos:line="77" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="78" pos:column="5">int</name></type> <name pos:line="78" pos:column="9">nestTextCurrent</name> <init pos:line="78" pos:column="25">= <expr><lit:literal type="number" pos:line="78" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">lineCurrent</name> <op:operator pos:line="79" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="79" pos:column="23">0</lit:literal> <op:operator pos:line="79" pos:column="25">&amp;&amp;</op:operator> <name pos:line="79" pos:column="28">initStyle</name> <op:operator pos:line="79" pos:column="38">==</op:operator> <name pos:line="79" pos:column="41">SCE_PS_TEXT</name></expr>)</condition><then pos:line="79" pos:column="53">
        <expr_stmt><expr><name pos:line="80" pos:column="9">nestTextCurrent</name> <op:operator pos:line="80" pos:column="25">=</op:operator> <call><name><name pos:line="80" pos:column="27">styler</name><op:operator pos:line="80" pos:column="33">.</op:operator><name pos:line="80" pos:column="34">GetLineState</name></name><argument_list pos:line="80" pos:column="46">(<argument><expr><name pos:line="80" pos:column="47">lineCurrent</name> <op:operator pos:line="80" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="80" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <decl_stmt><decl><type><name pos:line="81" pos:column="5">int</name></type> <name pos:line="81" pos:column="9">numRadix</name> <init pos:line="81" pos:column="18">= <expr><lit:literal type="number" pos:line="81" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">bool</name></type> <name pos:line="82" pos:column="10">numHasPoint</name> <init pos:line="82" pos:column="22">= <expr><lit:literal type="boolean" pos:line="82" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="83" pos:column="5">bool</name></type> <name pos:line="83" pos:column="10">numHasExponent</name> <init pos:line="83" pos:column="25">= <expr><lit:literal type="boolean" pos:line="83" pos:column="27">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="84" pos:column="5">bool</name></type> <name pos:line="84" pos:column="10">numHasSign</name> <init pos:line="84" pos:column="21">= <expr><lit:literal type="boolean" pos:line="84" pos:column="23">false</lit:literal></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:line="86" pos:column="5">// Clear out existing tokenization</comment>
    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><name pos:line="87" pos:column="9">tokenizing</name> <op:operator pos:line="87" pos:column="20">&amp;&amp;</op:operator> <name pos:line="87" pos:column="23">length</name> <op:operator pos:line="87" pos:column="30">&gt;</op:operator> <lit:literal type="number" pos:line="87" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="87" pos:column="34"> <block pos:line="87" pos:column="35">{
        <expr_stmt><expr><call><name><name pos:line="88" pos:column="9">styler</name><op:operator pos:line="88" pos:column="15">.</op:operator><name pos:line="88" pos:column="16">StartAt</name></name><argument_list pos:line="88" pos:column="23">(<argument><expr><name pos:line="88" pos:column="24">startPos</name></expr></argument>, <argument><expr><call><name><name pos:line="88" pos:column="34">static_cast</name><argument_list pos:line="88" pos:column="45">&lt;<argument><expr><name pos:line="88" pos:column="46">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="88" pos:column="51">(<argument><expr><name pos:line="88" pos:column="52">INDIC2_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="89" pos:column="9">styler</name><op:operator pos:line="89" pos:column="15">.</op:operator><name pos:line="89" pos:column="16">ColourTo</name></name><argument_list pos:line="89" pos:column="24">(<argument><expr><name pos:line="89" pos:column="25">startPos</name> <op:operator pos:line="89" pos:column="34">+</op:operator> <name pos:line="89" pos:column="36">length</name><op:operator pos:line="89" pos:column="42">-</op:operator><lit:literal type="number" pos:line="89" pos:column="43">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="89" pos:column="46">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="90" pos:column="9">styler</name><op:operator pos:line="90" pos:column="15">.</op:operator><name pos:line="90" pos:column="16">Flush</name></name><argument_list pos:line="90" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="91" pos:column="9">styler</name><op:operator pos:line="91" pos:column="15">.</op:operator><name pos:line="91" pos:column="16">StartAt</name></name><argument_list pos:line="91" pos:column="23">(<argument><expr><name pos:line="91" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="92" pos:column="9">styler</name><op:operator pos:line="92" pos:column="15">.</op:operator><name pos:line="92" pos:column="16">StartSegment</name></name><argument_list pos:line="92" pos:column="28">(<argument><expr><name pos:line="92" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <for pos:line="95" pos:column="5">for (<init pos:line="95" pos:column="10">;</init> <condition><expr><call><name><name pos:line="95" pos:column="12">sc</name><op:operator pos:line="95" pos:column="14">.</op:operator><name pos:line="95" pos:column="15">More</name></name><argument_list pos:line="95" pos:column="19">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="95" pos:column="23">sc</name><op:operator pos:line="95" pos:column="25">.</op:operator><name pos:line="95" pos:column="26">Forward</name></name><argument_list pos:line="95" pos:column="33">()</argument_list></call></expr></incr>) <block pos:line="95" pos:column="37">{
        <if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name><name pos:line="96" pos:column="13">sc</name><op:operator pos:line="96" pos:column="15">.</op:operator><name pos:line="96" pos:column="16">atLineStart</name></name></expr>)</condition><then pos:line="96" pos:column="28">
            <expr_stmt><expr><name pos:line="97" pos:column="13">lineCurrent</name> <op:operator pos:line="97" pos:column="25">=</op:operator> <call><name><name pos:line="97" pos:column="27">styler</name><op:operator pos:line="97" pos:column="33">.</op:operator><name pos:line="97" pos:column="34">GetLine</name></name><argument_list pos:line="97" pos:column="41">(<argument><expr><name><name pos:line="97" pos:column="42">sc</name><op:operator pos:line="97" pos:column="44">.</op:operator><name pos:line="97" pos:column="45">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="line" pos:line="99" pos:column="9">// Determine if the current state should terminate.</comment>
        <if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name><name pos:line="100" pos:column="13">sc</name><op:operator pos:line="100" pos:column="15">.</op:operator><name pos:line="100" pos:column="16">state</name></name> <op:operator pos:line="100" pos:column="22">==</op:operator> <name pos:line="100" pos:column="25">SCE_PS_COMMENT</name> <op:operator pos:line="100" pos:column="40">||</op:operator> <name><name pos:line="100" pos:column="43">sc</name><op:operator pos:line="100" pos:column="45">.</op:operator><name pos:line="100" pos:column="46">state</name></name> <op:operator pos:line="100" pos:column="52">==</op:operator> <name pos:line="100" pos:column="55">SCE_PS_DSC_VALUE</name></expr>)</condition><then pos:line="100" pos:column="72"> <block pos:line="100" pos:column="73">{
            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name><name pos:line="101" pos:column="17">sc</name><op:operator pos:line="101" pos:column="19">.</op:operator><name pos:line="101" pos:column="20">atLineEnd</name></name></expr>)</condition><then pos:line="101" pos:column="30"> <block pos:line="101" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="102" pos:column="17">sc</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">SetState</name></name><argument_list pos:line="102" pos:column="28">(<argument><expr><name pos:line="102" pos:column="29">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else pos:line="104" pos:column="11">else <if pos:line="104" pos:column="16">if <condition pos:line="104" pos:column="19">(<expr><name><name pos:line="104" pos:column="20">sc</name><op:operator pos:line="104" pos:column="22">.</op:operator><name pos:line="104" pos:column="23">state</name></name> <op:operator pos:line="104" pos:column="29">==</op:operator> <name pos:line="104" pos:column="32">SCE_PS_DSC_COMMENT</name></expr>)</condition><then pos:line="104" pos:column="51"> <block pos:line="104" pos:column="52">{
            <if pos:line="105" pos:column="13">if <condition pos:line="105" pos:column="16">(<expr><name><name pos:line="105" pos:column="17">sc</name><op:operator pos:line="105" pos:column="19">.</op:operator><name pos:line="105" pos:column="20">ch</name></name> <op:operator pos:line="105" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="26">':'</lit:literal></expr>)</condition><then pos:line="105" pos:column="30"> <block pos:line="105" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="106" pos:column="17">sc</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">Forward</name></name><argument_list pos:line="106" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><op:operator pos:line="107" pos:column="21">!</op:operator><name><name pos:line="107" pos:column="22">sc</name><op:operator pos:line="107" pos:column="24">.</op:operator><name pos:line="107" pos:column="25">atLineEnd</name></name></expr>)</condition><then pos:line="107" pos:column="35">
                    <expr_stmt><expr><call><name><name pos:line="108" pos:column="21">sc</name><op:operator pos:line="108" pos:column="23">.</op:operator><name pos:line="108" pos:column="24">SetState</name></name><argument_list pos:line="108" pos:column="32">(<argument><expr><name pos:line="108" pos:column="33">SCE_PS_DSC_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else pos:line="109" pos:column="17">else
                    <expr_stmt><expr><call><name><name pos:line="110" pos:column="21">sc</name><op:operator pos:line="110" pos:column="23">.</op:operator><name pos:line="110" pos:column="24">SetState</name></name><argument_list pos:line="110" pos:column="32">(<argument><expr><name pos:line="110" pos:column="33">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then> <else pos:line="111" pos:column="15">else <if pos:line="111" pos:column="20">if <condition pos:line="111" pos:column="23">(<expr><name><name pos:line="111" pos:column="24">sc</name><op:operator pos:line="111" pos:column="26">.</op:operator><name pos:line="111" pos:column="27">atLineEnd</name></name></expr>)</condition><then pos:line="111" pos:column="37"> <block pos:line="111" pos:column="38">{
                <expr_stmt><expr><call><name><name pos:line="112" pos:column="17">sc</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">SetState</name></name><argument_list pos:line="112" pos:column="28">(<argument><expr><name pos:line="112" pos:column="29">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="113" pos:column="15">else <if pos:line="113" pos:column="20">if <condition pos:line="113" pos:column="23">(<expr><call><name pos:line="113" pos:column="24">IsAWhitespaceChar</name><argument_list pos:line="113" pos:column="41">(<argument><expr><name><name pos:line="113" pos:column="42">sc</name><op:operator pos:line="113" pos:column="44">.</op:operator><name pos:line="113" pos:column="45">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="113" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="113" pos:column="52">sc</name><op:operator pos:line="113" pos:column="54">.</op:operator><name pos:line="113" pos:column="55">ch</name></name> <op:operator pos:line="113" pos:column="58">!=</op:operator> <lit:literal type="char" pos:line="113" pos:column="61">'\r'</lit:literal></expr>)</condition><then pos:line="113" pos:column="66"> <block pos:line="113" pos:column="67">{
                <expr_stmt><expr><call><name><name pos:line="114" pos:column="17">sc</name><op:operator pos:line="114" pos:column="19">.</op:operator><name pos:line="114" pos:column="20">ChangeState</name></name><argument_list pos:line="114" pos:column="31">(<argument><expr><name pos:line="114" pos:column="32">SCE_PS_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></then> <else pos:line="116" pos:column="11">else <if pos:line="116" pos:column="16">if <condition pos:line="116" pos:column="19">(<expr><name><name pos:line="116" pos:column="20">sc</name><op:operator pos:line="116" pos:column="22">.</op:operator><name pos:line="116" pos:column="23">state</name></name> <op:operator pos:line="116" pos:column="29">==</op:operator> <name pos:line="116" pos:column="32">SCE_PS_NUMBER</name></expr>)</condition><then pos:line="116" pos:column="46"> <block pos:line="116" pos:column="47">{
            <if pos:line="117" pos:column="13">if <condition pos:line="117" pos:column="16">(<expr><call><name pos:line="117" pos:column="17">IsASelfDelimitingChar</name><argument_list pos:line="117" pos:column="38">(<argument><expr><name><name pos:line="117" pos:column="39">sc</name><op:operator pos:line="117" pos:column="41">.</op:operator><name pos:line="117" pos:column="42">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="46">||</op:operator> <call><name pos:line="117" pos:column="49">IsAWhitespaceChar</name><argument_list pos:line="117" pos:column="66">(<argument><expr><name><name pos:line="117" pos:column="67">sc</name><op:operator pos:line="117" pos:column="69">.</op:operator><name pos:line="117" pos:column="70">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="117" pos:column="74"> <block pos:line="117" pos:column="75">{
                <if pos:line="118" pos:column="17">if <condition pos:line="118" pos:column="20">(<expr><op:operator pos:line="118" pos:column="21">(</op:operator><name><name pos:line="118" pos:column="22">sc</name><op:operator pos:line="118" pos:column="24">.</op:operator><name pos:line="118" pos:column="25">chPrev</name></name> <op:operator pos:line="118" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="35">'+'</lit:literal> <op:operator pos:line="118" pos:column="39">||</op:operator> <name><name pos:line="118" pos:column="42">sc</name><op:operator pos:line="118" pos:column="44">.</op:operator><name pos:line="118" pos:column="45">chPrev</name></name> <op:operator pos:line="118" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="55">'-'</lit:literal> <op:operator pos:line="118" pos:column="59">||</op:operator>
                     <name><name pos:line="119" pos:column="22">sc</name><op:operator pos:line="119" pos:column="24">.</op:operator><name pos:line="119" pos:column="25">chPrev</name></name> <op:operator pos:line="119" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="35">'E'</lit:literal> <op:operator pos:line="119" pos:column="39">||</op:operator> <name><name pos:line="119" pos:column="42">sc</name><op:operator pos:line="119" pos:column="44">.</op:operator><name pos:line="119" pos:column="45">chPrev</name></name> <op:operator pos:line="119" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="55">'e'</lit:literal><op:operator pos:line="119" pos:column="58">)</op:operator> <op:operator pos:line="119" pos:column="60">&amp;&amp;</op:operator> <name pos:line="119" pos:column="63">numRadix</name> <op:operator pos:line="119" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="119" pos:column="75">0</lit:literal></expr>)</condition><then pos:line="119" pos:column="77">
                    <expr_stmt><expr><call><name><name pos:line="120" pos:column="21">sc</name><op:operator pos:line="120" pos:column="23">.</op:operator><name pos:line="120" pos:column="24">ChangeState</name></name><argument_list pos:line="120" pos:column="35">(<argument><expr><name pos:line="120" pos:column="36">SCE_PS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name><name pos:line="121" pos:column="17">sc</name><op:operator pos:line="121" pos:column="19">.</op:operator><name pos:line="121" pos:column="20">SetState</name></name><argument_list pos:line="121" pos:column="28">(<argument><expr><name pos:line="121" pos:column="29">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="122" pos:column="15">else <if pos:line="122" pos:column="20">if <condition pos:line="122" pos:column="23">(<expr><name><name pos:line="122" pos:column="24">sc</name><op:operator pos:line="122" pos:column="26">.</op:operator><name pos:line="122" pos:column="27">ch</name></name> <op:operator pos:line="122" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="33">'#'</lit:literal></expr>)</condition><then pos:line="122" pos:column="37"> <block pos:line="122" pos:column="38">{
                <if pos:line="123" pos:column="17">if <condition pos:line="123" pos:column="20">(<expr><name pos:line="123" pos:column="21">numHasPoint</name> <op:operator pos:line="123" pos:column="33">||</op:operator> <name pos:line="123" pos:column="36">numHasExponent</name> <op:operator pos:line="123" pos:column="51">||</op:operator> <name pos:line="123" pos:column="54">numHasSign</name> <op:operator pos:line="123" pos:column="65">||</op:operator> <name pos:line="123" pos:column="68">numRadix</name> <op:operator pos:line="123" pos:column="77">!=</op:operator> <lit:literal type="number" pos:line="123" pos:column="80">0</lit:literal></expr>)</condition><then pos:line="123" pos:column="82"> <block pos:line="123" pos:column="83">{
                    <expr_stmt><expr><call><name><name pos:line="124" pos:column="21">sc</name><op:operator pos:line="124" pos:column="23">.</op:operator><name pos:line="124" pos:column="24">ChangeState</name></name><argument_list pos:line="124" pos:column="35">(<argument><expr><name pos:line="124" pos:column="36">SCE_PS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="125" pos:column="19">else <block pos:line="125" pos:column="24">{
                    <decl_stmt><decl><type><name pos:line="126" pos:column="21">char</name></type> <name><name pos:line="126" pos:column="26">szradix</name><index pos:line="126" pos:column="33">[<expr><lit:literal type="number" pos:line="126" pos:column="34">5</lit:literal></expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="127" pos:column="21">sc</name><op:operator pos:line="127" pos:column="23">.</op:operator><name pos:line="127" pos:column="24">GetCurrent</name></name><argument_list pos:line="127" pos:column="34">(<argument><expr><name pos:line="127" pos:column="35">szradix</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="127" pos:column="44">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="128" pos:column="21">numRadix</name> <op:operator pos:line="128" pos:column="30">=</op:operator> <call><name pos:line="128" pos:column="32">atoi</name><argument_list pos:line="128" pos:column="36">(<argument><expr><name pos:line="128" pos:column="37">szradix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="129" pos:column="21">if <condition pos:line="129" pos:column="24">(<expr><name><name pos:line="129" pos:column="25">numRadix</name> <argument_list pos:line="129" pos:column="34">&lt; <argument><expr><lit:literal type="number" pos:line="129" pos:column="36">2</lit:literal> <op:operator pos:line="129" pos:column="38">||</op:operator> <name pos:line="129" pos:column="41">numRadix</name></expr></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="129" pos:column="52">36</lit:literal></expr>)</condition><then pos:line="129" pos:column="55">
                        <expr_stmt><expr><call><name><name pos:line="130" pos:column="25">sc</name><op:operator pos:line="130" pos:column="27">.</op:operator><name pos:line="130" pos:column="28">ChangeState</name></name><argument_list pos:line="130" pos:column="39">(<argument><expr><name pos:line="130" pos:column="40">SCE_PS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></else></if>
            }</block></then> <else pos:line="132" pos:column="15">else <if pos:line="132" pos:column="20">if <condition pos:line="132" pos:column="23">(<expr><op:operator pos:line="132" pos:column="24">(</op:operator><name><name pos:line="132" pos:column="25">sc</name><op:operator pos:line="132" pos:column="27">.</op:operator><name pos:line="132" pos:column="28">ch</name></name> <op:operator pos:line="132" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="132" pos:column="34">'E'</lit:literal> <op:operator pos:line="132" pos:column="38">||</op:operator> <name><name pos:line="132" pos:column="41">sc</name><op:operator pos:line="132" pos:column="43">.</op:operator><name pos:line="132" pos:column="44">ch</name></name> <op:operator pos:line="132" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="132" pos:column="50">'e'</lit:literal><op:operator pos:line="132" pos:column="53">)</op:operator> <op:operator pos:line="132" pos:column="55">&amp;&amp;</op:operator> <name pos:line="132" pos:column="58">numRadix</name> <op:operator pos:line="132" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="132" pos:column="70">0</lit:literal></expr>)</condition><then pos:line="132" pos:column="72"> <block pos:line="132" pos:column="73">{
                <if pos:line="133" pos:column="17">if <condition pos:line="133" pos:column="20">(<expr><name pos:line="133" pos:column="21">numHasExponent</name></expr>)</condition><then pos:line="133" pos:column="36"> <block pos:line="133" pos:column="37">{
                    <expr_stmt><expr><call><name><name pos:line="134" pos:column="21">sc</name><op:operator pos:line="134" pos:column="23">.</op:operator><name pos:line="134" pos:column="24">ChangeState</name></name><argument_list pos:line="134" pos:column="35">(<argument><expr><name pos:line="134" pos:column="36">SCE_PS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="135" pos:column="19">else <block pos:line="135" pos:column="24">{
                    <expr_stmt><expr><name pos:line="136" pos:column="21">numHasExponent</name> <op:operator pos:line="136" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="136" pos:column="38">true</lit:literal></expr>;</expr_stmt>
                    <if pos:line="137" pos:column="21">if <condition pos:line="137" pos:column="24">(<expr><name><name pos:line="137" pos:column="25">sc</name><op:operator pos:line="137" pos:column="27">.</op:operator><name pos:line="137" pos:column="28">chNext</name></name> <op:operator pos:line="137" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="38">'+'</lit:literal> <op:operator pos:line="137" pos:column="42">||</op:operator> <name><name pos:line="137" pos:column="45">sc</name><op:operator pos:line="137" pos:column="47">.</op:operator><name pos:line="137" pos:column="48">chNext</name></name> <op:operator pos:line="137" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="58">'-'</lit:literal></expr>)</condition><then pos:line="137" pos:column="62">
                        <expr_stmt><expr><call><name><name pos:line="138" pos:column="25">sc</name><op:operator pos:line="138" pos:column="27">.</op:operator><name pos:line="138" pos:column="28">Forward</name></name><argument_list pos:line="138" pos:column="35">()</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></else></if>
            }</block></then> <else pos:line="140" pos:column="15">else <if pos:line="140" pos:column="20">if <condition pos:line="140" pos:column="23">(<expr><name><name pos:line="140" pos:column="24">sc</name><op:operator pos:line="140" pos:column="26">.</op:operator><name pos:line="140" pos:column="27">ch</name></name> <op:operator pos:line="140" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="33">'.'</lit:literal></expr>)</condition><then pos:line="140" pos:column="37"> <block pos:line="140" pos:column="38">{
                <if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><name pos:line="141" pos:column="21">numHasPoint</name> <op:operator pos:line="141" pos:column="33">||</op:operator> <name pos:line="141" pos:column="36">numHasExponent</name> <op:operator pos:line="141" pos:column="51">||</op:operator> <name pos:line="141" pos:column="54">numRadix</name> <op:operator pos:line="141" pos:column="63">!=</op:operator> <lit:literal type="number" pos:line="141" pos:column="66">0</lit:literal></expr>)</condition><then pos:line="141" pos:column="68"> <block pos:line="141" pos:column="69">{
                    <expr_stmt><expr><call><name><name pos:line="142" pos:column="21">sc</name><op:operator pos:line="142" pos:column="23">.</op:operator><name pos:line="142" pos:column="24">ChangeState</name></name><argument_list pos:line="142" pos:column="35">(<argument><expr><name pos:line="142" pos:column="36">SCE_PS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="143" pos:column="19">else <block pos:line="143" pos:column="24">{
                    <expr_stmt><expr><name pos:line="144" pos:column="21">numHasPoint</name> <op:operator pos:line="144" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="144" pos:column="35">true</lit:literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="146" pos:column="15">else <if pos:line="146" pos:column="20">if <condition pos:line="146" pos:column="23">(<expr><name pos:line="146" pos:column="24">numRadix</name> <op:operator pos:line="146" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="146" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="146" pos:column="38"> <block pos:line="146" pos:column="39">{
                <if pos:line="147" pos:column="17">if <condition pos:line="147" pos:column="20">(<expr><op:operator pos:line="147" pos:column="21">!</op:operator><call><name pos:line="147" pos:column="22">IsABaseNDigit</name><argument_list pos:line="147" pos:column="35">(<argument><expr><name><name pos:line="147" pos:column="36">sc</name><op:operator pos:line="147" pos:column="38">.</op:operator><name pos:line="147" pos:column="39">ch</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="147" pos:column="43">10</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="147" pos:column="47">
                    <expr_stmt><expr><call><name><name pos:line="148" pos:column="21">sc</name><op:operator pos:line="148" pos:column="23">.</op:operator><name pos:line="148" pos:column="24">ChangeState</name></name><argument_list pos:line="148" pos:column="35">(<argument><expr><name pos:line="148" pos:column="36">SCE_PS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then> <else pos:line="149" pos:column="15">else <block pos:line="149" pos:column="20">{
                <if pos:line="150" pos:column="17">if <condition pos:line="150" pos:column="20">(<expr><op:operator pos:line="150" pos:column="21">!</op:operator><call><name pos:line="150" pos:column="22">IsABaseNDigit</name><argument_list pos:line="150" pos:column="35">(<argument><expr><name><name pos:line="150" pos:column="36">sc</name><op:operator pos:line="150" pos:column="38">.</op:operator><name pos:line="150" pos:column="39">ch</name></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="43">numRadix</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="150" pos:column="53">
                    <expr_stmt><expr><call><name><name pos:line="151" pos:column="21">sc</name><op:operator pos:line="151" pos:column="23">.</op:operator><name pos:line="151" pos:column="24">ChangeState</name></name><argument_list pos:line="151" pos:column="35">(<argument><expr><name pos:line="151" pos:column="36">SCE_PS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></else></if></else></if></else></if></else></if></else></if>
        }</block></then> <else pos:line="153" pos:column="11">else <if pos:line="153" pos:column="16">if <condition pos:line="153" pos:column="19">(<expr><name><name pos:line="153" pos:column="20">sc</name><op:operator pos:line="153" pos:column="22">.</op:operator><name pos:line="153" pos:column="23">state</name></name> <op:operator pos:line="153" pos:column="29">==</op:operator> <name pos:line="153" pos:column="32">SCE_PS_NAME</name> <op:operator pos:line="153" pos:column="44">||</op:operator> <name><name pos:line="153" pos:column="47">sc</name><op:operator pos:line="153" pos:column="49">.</op:operator><name pos:line="153" pos:column="50">state</name></name> <op:operator pos:line="153" pos:column="56">==</op:operator> <name pos:line="153" pos:column="59">SCE_PS_KEYWORD</name></expr>)</condition><then pos:line="153" pos:column="74"> <block pos:line="153" pos:column="75">{
            <if pos:line="154" pos:column="13">if <condition pos:line="154" pos:column="16">(<expr><call><name pos:line="154" pos:column="17">IsASelfDelimitingChar</name><argument_list pos:line="154" pos:column="38">(<argument><expr><name><name pos:line="154" pos:column="39">sc</name><op:operator pos:line="154" pos:column="41">.</op:operator><name pos:line="154" pos:column="42">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="154" pos:column="46">||</op:operator> <call><name pos:line="154" pos:column="49">IsAWhitespaceChar</name><argument_list pos:line="154" pos:column="66">(<argument><expr><name><name pos:line="154" pos:column="67">sc</name><op:operator pos:line="154" pos:column="69">.</op:operator><name pos:line="154" pos:column="70">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="74"> <block pos:line="154" pos:column="75">{
                <decl_stmt><decl><type><name pos:line="155" pos:column="17">char</name></type> <name><name pos:line="155" pos:column="22">s</name><index pos:line="155" pos:column="23">[<expr><lit:literal type="number" pos:line="155" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="156" pos:column="17">sc</name><op:operator pos:line="156" pos:column="19">.</op:operator><name pos:line="156" pos:column="20">GetCurrent</name></name><argument_list pos:line="156" pos:column="30">(<argument><expr><name pos:line="156" pos:column="31">s</name></expr></argument>, <argument><expr><sizeof pos:line="156" pos:column="34">sizeof<argument_list pos:line="156" pos:column="40">(<argument><expr><name pos:line="156" pos:column="41">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><op:operator pos:line="157" pos:column="21">(</op:operator><name pos:line="157" pos:column="22">pslevel</name> <op:operator pos:line="157" pos:column="30">&gt;=</op:operator> <lit:literal type="number" pos:line="157" pos:column="33">1</lit:literal> <op:operator pos:line="157" pos:column="35">&amp;&amp;</op:operator> <call><name><name pos:line="157" pos:column="38">keywords1</name><op:operator pos:line="157" pos:column="47">.</op:operator><name pos:line="157" pos:column="48">InList</name></name><argument_list pos:line="157" pos:column="54">(<argument><expr><name pos:line="157" pos:column="55">s</name></expr></argument>)</argument_list></call><op:operator pos:line="157" pos:column="57">)</op:operator> <op:operator pos:line="157" pos:column="59">||</op:operator>
                    <op:operator pos:line="158" pos:column="21">(</op:operator><name pos:line="158" pos:column="22">pslevel</name> <op:operator pos:line="158" pos:column="30">&gt;=</op:operator> <lit:literal type="number" pos:line="158" pos:column="33">2</lit:literal> <op:operator pos:line="158" pos:column="35">&amp;&amp;</op:operator> <call><name><name pos:line="158" pos:column="38">keywords2</name><op:operator pos:line="158" pos:column="47">.</op:operator><name pos:line="158" pos:column="48">InList</name></name><argument_list pos:line="158" pos:column="54">(<argument><expr><name pos:line="158" pos:column="55">s</name></expr></argument>)</argument_list></call><op:operator pos:line="158" pos:column="57">)</op:operator> <op:operator pos:line="158" pos:column="59">||</op:operator>
                    <op:operator pos:line="159" pos:column="21">(</op:operator><name pos:line="159" pos:column="22">pslevel</name> <op:operator pos:line="159" pos:column="30">&gt;=</op:operator> <lit:literal type="number" pos:line="159" pos:column="33">3</lit:literal> <op:operator pos:line="159" pos:column="35">&amp;&amp;</op:operator> <call><name><name pos:line="159" pos:column="38">keywords3</name><op:operator pos:line="159" pos:column="47">.</op:operator><name pos:line="159" pos:column="48">InList</name></name><argument_list pos:line="159" pos:column="54">(<argument><expr><name pos:line="159" pos:column="55">s</name></expr></argument>)</argument_list></call><op:operator pos:line="159" pos:column="57">)</op:operator> <op:operator pos:line="159" pos:column="59">||</op:operator>
                    <call><name><name pos:line="160" pos:column="21">keywords4</name><op:operator pos:line="160" pos:column="30">.</op:operator><name pos:line="160" pos:column="31">InList</name></name><argument_list pos:line="160" pos:column="37">(<argument><expr><name pos:line="160" pos:column="38">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="160" pos:column="41">||</op:operator> <call><name><name pos:line="160" pos:column="44">keywords5</name><op:operator pos:line="160" pos:column="53">.</op:operator><name pos:line="160" pos:column="54">InList</name></name><argument_list pos:line="160" pos:column="60">(<argument><expr><name pos:line="160" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="64"> <block pos:line="160" pos:column="65">{
                    <expr_stmt><expr><call><name><name pos:line="161" pos:column="21">sc</name><op:operator pos:line="161" pos:column="23">.</op:operator><name pos:line="161" pos:column="24">ChangeState</name></name><argument_list pos:line="161" pos:column="35">(<argument><expr><name pos:line="161" pos:column="36">SCE_PS_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="163" pos:column="17">sc</name><op:operator pos:line="163" pos:column="19">.</op:operator><name pos:line="163" pos:column="20">SetState</name></name><argument_list pos:line="163" pos:column="28">(<argument><expr><name pos:line="163" pos:column="29">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else pos:line="165" pos:column="11">else <if pos:line="165" pos:column="16">if <condition pos:line="165" pos:column="19">(<expr><name><name pos:line="165" pos:column="20">sc</name><op:operator pos:line="165" pos:column="22">.</op:operator><name pos:line="165" pos:column="23">state</name></name> <op:operator pos:line="165" pos:column="29">==</op:operator> <name pos:line="165" pos:column="32">SCE_PS_LITERAL</name> <op:operator pos:line="165" pos:column="47">||</op:operator> <name><name pos:line="165" pos:column="50">sc</name><op:operator pos:line="165" pos:column="52">.</op:operator><name pos:line="165" pos:column="53">state</name></name> <op:operator pos:line="165" pos:column="59">==</op:operator> <name pos:line="165" pos:column="62">SCE_PS_IMMEVAL</name></expr>)</condition><then pos:line="165" pos:column="77"> <block pos:line="165" pos:column="78">{
            <if pos:line="166" pos:column="13">if <condition pos:line="166" pos:column="16">(<expr><call><name pos:line="166" pos:column="17">IsASelfDelimitingChar</name><argument_list pos:line="166" pos:column="38">(<argument><expr><name><name pos:line="166" pos:column="39">sc</name><op:operator pos:line="166" pos:column="41">.</op:operator><name pos:line="166" pos:column="42">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="166" pos:column="46">||</op:operator> <call><name pos:line="166" pos:column="49">IsAWhitespaceChar</name><argument_list pos:line="166" pos:column="66">(<argument><expr><name><name pos:line="166" pos:column="67">sc</name><op:operator pos:line="166" pos:column="69">.</op:operator><name pos:line="166" pos:column="70">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="74">
                <expr_stmt><expr><call><name><name pos:line="167" pos:column="17">sc</name><op:operator pos:line="167" pos:column="19">.</op:operator><name pos:line="167" pos:column="20">SetState</name></name><argument_list pos:line="167" pos:column="28">(<argument><expr><name pos:line="167" pos:column="29">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then> <else pos:line="168" pos:column="11">else <if pos:line="168" pos:column="16">if <condition pos:line="168" pos:column="19">(<expr><name><name pos:line="168" pos:column="20">sc</name><op:operator pos:line="168" pos:column="22">.</op:operator><name pos:line="168" pos:column="23">state</name></name> <op:operator pos:line="168" pos:column="29">==</op:operator> <name pos:line="168" pos:column="32">SCE_PS_PAREN_ARRAY</name> <op:operator pos:line="168" pos:column="51">||</op:operator> <name><name pos:line="168" pos:column="54">sc</name><op:operator pos:line="168" pos:column="56">.</op:operator><name pos:line="168" pos:column="57">state</name></name> <op:operator pos:line="168" pos:column="63">==</op:operator> <name pos:line="168" pos:column="66">SCE_PS_PAREN_DICT</name> <op:operator pos:line="168" pos:column="84">||</op:operator>
                   <name><name pos:line="169" pos:column="20">sc</name><op:operator pos:line="169" pos:column="22">.</op:operator><name pos:line="169" pos:column="23">state</name></name> <op:operator pos:line="169" pos:column="29">==</op:operator> <name pos:line="169" pos:column="32">SCE_PS_PAREN_PROC</name></expr>)</condition><then pos:line="169" pos:column="50"> <block pos:line="169" pos:column="51">{
            <expr_stmt><expr><call><name><name pos:line="170" pos:column="13">sc</name><op:operator pos:line="170" pos:column="15">.</op:operator><name pos:line="170" pos:column="16">SetState</name></name><argument_list pos:line="170" pos:column="24">(<argument><expr><name pos:line="170" pos:column="25">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="171" pos:column="11">else <if pos:line="171" pos:column="16">if <condition pos:line="171" pos:column="19">(<expr><name><name pos:line="171" pos:column="20">sc</name><op:operator pos:line="171" pos:column="22">.</op:operator><name pos:line="171" pos:column="23">state</name></name> <op:operator pos:line="171" pos:column="29">==</op:operator> <name pos:line="171" pos:column="32">SCE_PS_TEXT</name></expr>)</condition><then pos:line="171" pos:column="44"> <block pos:line="171" pos:column="45">{
            <if pos:line="172" pos:column="13">if <condition pos:line="172" pos:column="16">(<expr><name><name pos:line="172" pos:column="17">sc</name><op:operator pos:line="172" pos:column="19">.</op:operator><name pos:line="172" pos:column="20">ch</name></name> <op:operator pos:line="172" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="172" pos:column="26">'('</lit:literal></expr>)</condition><then pos:line="172" pos:column="30"> <block pos:line="172" pos:column="31">{
                <expr_stmt><expr><name pos:line="173" pos:column="17">nestTextCurrent</name><op:operator pos:line="173" pos:column="32">++</op:operator></expr>;</expr_stmt>
            }</block></then> <else pos:line="174" pos:column="15">else <if pos:line="174" pos:column="20">if <condition pos:line="174" pos:column="23">(<expr><name><name pos:line="174" pos:column="24">sc</name><op:operator pos:line="174" pos:column="26">.</op:operator><name pos:line="174" pos:column="27">ch</name></name> <op:operator pos:line="174" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="174" pos:column="33">')'</lit:literal></expr>)</condition><then pos:line="174" pos:column="37"> <block pos:line="174" pos:column="38">{
                <if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><op:operator pos:line="175" pos:column="21">--</op:operator><name pos:line="175" pos:column="23">nestTextCurrent</name> <op:operator pos:line="175" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="175" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="175" pos:column="44">
                   <expr_stmt><expr><call><name><name pos:line="176" pos:column="20">sc</name><op:operator pos:line="176" pos:column="22">.</op:operator><name pos:line="176" pos:column="23">ForwardSetState</name></name><argument_list pos:line="176" pos:column="38">(<argument><expr><name pos:line="176" pos:column="39">SCE_PS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then> <else pos:line="177" pos:column="15">else <if pos:line="177" pos:column="20">if <condition pos:line="177" pos:column="23">(<expr><name><name pos:line="177" pos:column="24">sc</name><op:operator pos:line="177" pos:column="26">.</op:operator><name pos:line="177" pos:column="27">ch</name></name> <op:operator pos:line="177" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="177" pos:column="33">'\\'</lit:literal></expr>)</condition><then pos:line="177" pos:column="38"> <block pos:line="177" pos:column="39">{
                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">sc</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">Forward</name></name><argument_list pos:line="178" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></then> <else pos:line="180" pos:column="11">else <if pos:line="180" pos:column="16">if <condition pos:line="180" pos:column="19">(<expr><name><name pos:line="180" pos:column="20">sc</name><op:operator pos:line="180" pos:column="22">.</op:operator><name pos:line="180" pos:column="23">state</name></name> <op:operator pos:line="180" pos:column="29">==</op:operator> <name pos:line="180" pos:column="32">SCE_PS_HEXSTRING</name></expr>)</condition><then pos:line="180" pos:column="49"> <block pos:line="180" pos:column="50">{
            <if pos:line="181" pos:column="13">if <condition pos:line="181" pos:column="16">(<expr><name><name pos:line="181" pos:column="17">sc</name><op:operator pos:line="181" pos:column="19">.</op:operator><name pos:line="181" pos:column="20">ch</name></name> <op:operator pos:line="181" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="26">'&gt;'</lit:literal></expr>)</condition><then pos:line="181" pos:column="30"> <block pos:line="181" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="182" pos:column="17">sc</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">ForwardSetState</name></name><argument_list pos:line="182" pos:column="35">(<argument><expr><name pos:line="182" pos:column="36">SCE_PS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="183" pos:column="15">else <if pos:line="183" pos:column="20">if <condition pos:line="183" pos:column="23">(<expr><op:operator pos:line="183" pos:column="24">!</op:operator><call><name pos:line="183" pos:column="25">IsABaseNDigit</name><argument_list pos:line="183" pos:column="38">(<argument><expr><name><name pos:line="183" pos:column="39">sc</name><op:operator pos:line="183" pos:column="41">.</op:operator><name pos:line="183" pos:column="42">ch</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="183" pos:column="46">16</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="183" pos:column="53">!</op:operator><call><name pos:line="183" pos:column="54">IsAWhitespaceChar</name><argument_list pos:line="183" pos:column="71">(<argument><expr><name><name pos:line="183" pos:column="72">sc</name><op:operator pos:line="183" pos:column="74">.</op:operator><name pos:line="183" pos:column="75">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="183" pos:column="79"> <block pos:line="183" pos:column="80">{
                <expr_stmt><expr><call><name><name pos:line="184" pos:column="17">sc</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">SetState</name></name><argument_list pos:line="184" pos:column="28">(<argument><expr><name pos:line="184" pos:column="29">SCE_PS_HEXSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="185" pos:column="17">styler</name><op:operator pos:line="185" pos:column="23">.</op:operator><name pos:line="185" pos:column="24">ColourTo</name></name><argument_list pos:line="185" pos:column="32">(<argument><expr><name><name pos:line="185" pos:column="33">sc</name><op:operator pos:line="185" pos:column="35">.</op:operator><name pos:line="185" pos:column="36">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="48">SCE_PS_BADSTRINGCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then> <else pos:line="187" pos:column="11">else <if pos:line="187" pos:column="16">if <condition pos:line="187" pos:column="19">(<expr><name><name pos:line="187" pos:column="20">sc</name><op:operator pos:line="187" pos:column="22">.</op:operator><name pos:line="187" pos:column="23">state</name></name> <op:operator pos:line="187" pos:column="29">==</op:operator> <name pos:line="187" pos:column="32">SCE_PS_BASE85STRING</name></expr>)</condition><then pos:line="187" pos:column="52"> <block pos:line="187" pos:column="53">{
            <if pos:line="188" pos:column="13">if <condition pos:line="188" pos:column="16">(<expr><call><name><name pos:line="188" pos:column="17">sc</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">Match</name></name><argument_list pos:line="188" pos:column="25">(<argument><expr><lit:literal type="char" pos:line="188" pos:column="26">'~'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="188" pos:column="31">'&gt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="188" pos:column="36"> <block pos:line="188" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="189" pos:column="17">sc</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">Forward</name></name><argument_list pos:line="189" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="190" pos:column="17">sc</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">ForwardSetState</name></name><argument_list pos:line="190" pos:column="35">(<argument><expr><name pos:line="190" pos:column="36">SCE_PS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="191" pos:column="15">else <if pos:line="191" pos:column="20">if <condition pos:line="191" pos:column="23">(<expr><op:operator pos:line="191" pos:column="24">!</op:operator><call><name pos:line="191" pos:column="25">IsABase85Char</name><argument_list pos:line="191" pos:column="38">(<argument><expr><name><name pos:line="191" pos:column="39">sc</name><op:operator pos:line="191" pos:column="41">.</op:operator><name pos:line="191" pos:column="42">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="191" pos:column="49">!</op:operator><call><name pos:line="191" pos:column="50">IsAWhitespaceChar</name><argument_list pos:line="191" pos:column="67">(<argument><expr><name><name pos:line="191" pos:column="68">sc</name><op:operator pos:line="191" pos:column="70">.</op:operator><name pos:line="191" pos:column="71">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="191" pos:column="75"> <block pos:line="191" pos:column="76">{
                <expr_stmt><expr><call><name><name pos:line="192" pos:column="17">sc</name><op:operator pos:line="192" pos:column="19">.</op:operator><name pos:line="192" pos:column="20">SetState</name></name><argument_list pos:line="192" pos:column="28">(<argument><expr><name pos:line="192" pos:column="29">SCE_PS_BASE85STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="193" pos:column="17">styler</name><op:operator pos:line="193" pos:column="23">.</op:operator><name pos:line="193" pos:column="24">ColourTo</name></name><argument_list pos:line="193" pos:column="32">(<argument><expr><name><name pos:line="193" pos:column="33">sc</name><op:operator pos:line="193" pos:column="35">.</op:operator><name pos:line="193" pos:column="36">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="48">SCE_PS_BADSTRINGCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

        <comment type="line" pos:line="197" pos:column="9">// Determine if a new state should be entered.</comment>
        <if pos:line="198" pos:column="9">if <condition pos:line="198" pos:column="12">(<expr><name><name pos:line="198" pos:column="13">sc</name><op:operator pos:line="198" pos:column="15">.</op:operator><name pos:line="198" pos:column="16">state</name></name> <op:operator pos:line="198" pos:column="22">==</op:operator> <name pos:line="198" pos:column="25">SCE_C_DEFAULT</name></expr>)</condition><then pos:line="198" pos:column="39"> <block pos:line="198" pos:column="40">{
            <decl_stmt><decl><type><name pos:line="199" pos:column="13">unsigned</name> <name pos:line="199" pos:column="22">int</name></type> <name pos:line="199" pos:column="26">tokenpos</name> <init pos:line="199" pos:column="35">= <expr><name><name pos:line="199" pos:column="37">sc</name><op:operator pos:line="199" pos:column="39">.</op:operator><name pos:line="199" pos:column="40">currentPos</name></name></expr></init></decl>;</decl_stmt>

            <if pos:line="201" pos:column="13">if <condition pos:line="201" pos:column="16">(<expr><name><name pos:line="201" pos:column="17">sc</name><op:operator pos:line="201" pos:column="19">.</op:operator><name pos:line="201" pos:column="20">ch</name></name> <op:operator pos:line="201" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="201" pos:column="26">'['</lit:literal> <op:operator pos:line="201" pos:column="30">||</op:operator> <name><name pos:line="201" pos:column="33">sc</name><op:operator pos:line="201" pos:column="35">.</op:operator><name pos:line="201" pos:column="36">ch</name></name> <op:operator pos:line="201" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="201" pos:column="42">']'</lit:literal></expr>)</condition><then pos:line="201" pos:column="46"> <block pos:line="201" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="202" pos:column="17">sc</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">SetState</name></name><argument_list pos:line="202" pos:column="28">(<argument><expr><name pos:line="202" pos:column="29">SCE_PS_PAREN_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="203" pos:column="15">else <if pos:line="203" pos:column="20">if <condition pos:line="203" pos:column="23">(<expr><name><name pos:line="203" pos:column="24">sc</name><op:operator pos:line="203" pos:column="26">.</op:operator><name pos:line="203" pos:column="27">ch</name></name> <op:operator pos:line="203" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="203" pos:column="33">'{'</lit:literal> <op:operator pos:line="203" pos:column="37">||</op:operator> <name><name pos:line="203" pos:column="40">sc</name><op:operator pos:line="203" pos:column="42">.</op:operator><name pos:line="203" pos:column="43">ch</name></name> <op:operator pos:line="203" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="203" pos:column="49">'}'</lit:literal></expr>)</condition><then pos:line="203" pos:column="53"> <block pos:line="203" pos:column="54">{
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">sc</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">SetState</name></name><argument_list pos:line="204" pos:column="28">(<argument><expr><name pos:line="204" pos:column="29">SCE_PS_PAREN_PROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="205" pos:column="15">else <if pos:line="205" pos:column="20">if <condition pos:line="205" pos:column="23">(<expr><name><name pos:line="205" pos:column="24">sc</name><op:operator pos:line="205" pos:column="26">.</op:operator><name pos:line="205" pos:column="27">ch</name></name> <op:operator pos:line="205" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="205" pos:column="33">'/'</lit:literal></expr>)</condition><then pos:line="205" pos:column="37"> <block pos:line="205" pos:column="38">{
                <if pos:line="206" pos:column="17">if <condition pos:line="206" pos:column="20">(<expr><name><name pos:line="206" pos:column="21">sc</name><op:operator pos:line="206" pos:column="23">.</op:operator><name pos:line="206" pos:column="24">chNext</name></name> <op:operator pos:line="206" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="206" pos:column="34">'/'</lit:literal></expr>)</condition><then pos:line="206" pos:column="38"> <block pos:line="206" pos:column="39">{
                    <expr_stmt><expr><call><name><name pos:line="207" pos:column="21">sc</name><op:operator pos:line="207" pos:column="23">.</op:operator><name pos:line="207" pos:column="24">SetState</name></name><argument_list pos:line="207" pos:column="32">(<argument><expr><name pos:line="207" pos:column="33">SCE_PS_IMMEVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="208" pos:column="21">sc</name><op:operator pos:line="208" pos:column="23">.</op:operator><name pos:line="208" pos:column="24">Forward</name></name><argument_list pos:line="208" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="209" pos:column="19">else <block pos:line="209" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="210" pos:column="21">sc</name><op:operator pos:line="210" pos:column="23">.</op:operator><name pos:line="210" pos:column="24">SetState</name></name><argument_list pos:line="210" pos:column="32">(<argument><expr><name pos:line="210" pos:column="33">SCE_PS_LITERAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="212" pos:column="15">else <if pos:line="212" pos:column="20">if <condition pos:line="212" pos:column="23">(<expr><name><name pos:line="212" pos:column="24">sc</name><op:operator pos:line="212" pos:column="26">.</op:operator><name pos:line="212" pos:column="27">ch</name></name> <op:operator pos:line="212" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="212" pos:column="33">'&lt;'</lit:literal></expr>)</condition><then pos:line="212" pos:column="37"> <block pos:line="212" pos:column="38">{
                <if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><name><name pos:line="213" pos:column="21">sc</name><op:operator pos:line="213" pos:column="23">.</op:operator><name pos:line="213" pos:column="24">chNext</name></name> <op:operator pos:line="213" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="213" pos:column="34">'&lt;'</lit:literal></expr>)</condition><then pos:line="213" pos:column="38"> <block pos:line="213" pos:column="39">{
                    <expr_stmt><expr><call><name><name pos:line="214" pos:column="21">sc</name><op:operator pos:line="214" pos:column="23">.</op:operator><name pos:line="214" pos:column="24">SetState</name></name><argument_list pos:line="214" pos:column="32">(<argument><expr><name pos:line="214" pos:column="33">SCE_PS_PAREN_DICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="215" pos:column="21">sc</name><op:operator pos:line="215" pos:column="23">.</op:operator><name pos:line="215" pos:column="24">Forward</name></name><argument_list pos:line="215" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="216" pos:column="19">else <if pos:line="216" pos:column="24">if <condition pos:line="216" pos:column="27">(<expr><name><name pos:line="216" pos:column="28">sc</name><op:operator pos:line="216" pos:column="30">.</op:operator><name pos:line="216" pos:column="31">chNext</name></name> <op:operator pos:line="216" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="216" pos:column="41">'~'</lit:literal></expr>)</condition><then pos:line="216" pos:column="45"> <block pos:line="216" pos:column="46">{
                    <expr_stmt><expr><call><name><name pos:line="217" pos:column="21">sc</name><op:operator pos:line="217" pos:column="23">.</op:operator><name pos:line="217" pos:column="24">SetState</name></name><argument_list pos:line="217" pos:column="32">(<argument><expr><name pos:line="217" pos:column="33">SCE_PS_BASE85STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="218" pos:column="21">sc</name><op:operator pos:line="218" pos:column="23">.</op:operator><name pos:line="218" pos:column="24">Forward</name></name><argument_list pos:line="218" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="219" pos:column="19">else <block pos:line="219" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="220" pos:column="21">sc</name><op:operator pos:line="220" pos:column="23">.</op:operator><name pos:line="220" pos:column="24">SetState</name></name><argument_list pos:line="220" pos:column="32">(<argument><expr><name pos:line="220" pos:column="33">SCE_PS_HEXSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></then> <else pos:line="222" pos:column="15">else <if pos:line="222" pos:column="20">if <condition pos:line="222" pos:column="23">(<expr><name><name pos:line="222" pos:column="24">sc</name><op:operator pos:line="222" pos:column="26">.</op:operator><name pos:line="222" pos:column="27">ch</name></name> <op:operator pos:line="222" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="222" pos:column="33">'&gt;'</lit:literal> <op:operator pos:line="222" pos:column="37">&amp;&amp;</op:operator> <name><name pos:line="222" pos:column="40">sc</name><op:operator pos:line="222" pos:column="42">.</op:operator><name pos:line="222" pos:column="43">chNext</name></name> <op:operator pos:line="222" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="222" pos:column="53">'&gt;'</lit:literal></expr>)</condition><then pos:line="222" pos:column="57"> <block pos:line="222" pos:column="58">{
                    <expr_stmt><expr><call><name><name pos:line="223" pos:column="21">sc</name><op:operator pos:line="223" pos:column="23">.</op:operator><name pos:line="223" pos:column="24">SetState</name></name><argument_list pos:line="223" pos:column="32">(<argument><expr><name pos:line="223" pos:column="33">SCE_PS_PAREN_DICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="224" pos:column="21">sc</name><op:operator pos:line="224" pos:column="23">.</op:operator><name pos:line="224" pos:column="24">Forward</name></name><argument_list pos:line="224" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="225" pos:column="15">else <if pos:line="225" pos:column="20">if <condition pos:line="225" pos:column="23">(<expr><name><name pos:line="225" pos:column="24">sc</name><op:operator pos:line="225" pos:column="26">.</op:operator><name pos:line="225" pos:column="27">ch</name></name> <op:operator pos:line="225" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="225" pos:column="33">'&gt;'</lit:literal> <op:operator pos:line="225" pos:column="37">||</op:operator> <name><name pos:line="225" pos:column="40">sc</name><op:operator pos:line="225" pos:column="42">.</op:operator><name pos:line="225" pos:column="43">ch</name></name> <op:operator pos:line="225" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="225" pos:column="49">')'</lit:literal></expr>)</condition><then pos:line="225" pos:column="53"> <block pos:line="225" pos:column="54">{
                <expr_stmt><expr><call><name><name pos:line="226" pos:column="17">sc</name><op:operator pos:line="226" pos:column="19">.</op:operator><name pos:line="226" pos:column="20">SetState</name></name><argument_list pos:line="226" pos:column="28">(<argument><expr><name pos:line="226" pos:column="29">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="227" pos:column="17">styler</name><op:operator pos:line="227" pos:column="23">.</op:operator><name pos:line="227" pos:column="24">ColourTo</name></name><argument_list pos:line="227" pos:column="32">(<argument><expr><name><name pos:line="227" pos:column="33">sc</name><op:operator pos:line="227" pos:column="35">.</op:operator><name pos:line="227" pos:column="36">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="48">SCE_PS_BADSTRINGCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="228" pos:column="15">else <if pos:line="228" pos:column="20">if <condition pos:line="228" pos:column="23">(<expr><name><name pos:line="228" pos:column="24">sc</name><op:operator pos:line="228" pos:column="26">.</op:operator><name pos:line="228" pos:column="27">ch</name></name> <op:operator pos:line="228" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="228" pos:column="33">'('</lit:literal></expr>)</condition><then pos:line="228" pos:column="37"> <block pos:line="228" pos:column="38">{
                <expr_stmt><expr><call><name><name pos:line="229" pos:column="17">sc</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">SetState</name></name><argument_list pos:line="229" pos:column="28">(<argument><expr><name pos:line="229" pos:column="29">SCE_PS_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="230" pos:column="17">nestTextCurrent</name> <op:operator pos:line="230" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="230" pos:column="35">1</lit:literal></expr>;</expr_stmt>
            }</block></then> <else pos:line="231" pos:column="15">else <if pos:line="231" pos:column="20">if <condition pos:line="231" pos:column="23">(<expr><name><name pos:line="231" pos:column="24">sc</name><op:operator pos:line="231" pos:column="26">.</op:operator><name pos:line="231" pos:column="27">ch</name></name> <op:operator pos:line="231" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="231" pos:column="33">'%'</lit:literal></expr>)</condition><then pos:line="231" pos:column="37"> <block pos:line="231" pos:column="38">{
                <if pos:line="232" pos:column="17">if <condition pos:line="232" pos:column="20">(<expr><name><name pos:line="232" pos:column="21">sc</name><op:operator pos:line="232" pos:column="23">.</op:operator><name pos:line="232" pos:column="24">chNext</name></name> <op:operator pos:line="232" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="232" pos:column="34">'%'</lit:literal> <op:operator pos:line="232" pos:column="38">&amp;&amp;</op:operator> <name><name pos:line="232" pos:column="41">sc</name><op:operator pos:line="232" pos:column="43">.</op:operator><name pos:line="232" pos:column="44">atLineStart</name></name></expr>)</condition><then pos:line="232" pos:column="56"> <block pos:line="232" pos:column="57">{
                    <expr_stmt><expr><call><name><name pos:line="233" pos:column="21">sc</name><op:operator pos:line="233" pos:column="23">.</op:operator><name pos:line="233" pos:column="24">SetState</name></name><argument_list pos:line="233" pos:column="32">(<argument><expr><name pos:line="233" pos:column="33">SCE_PS_DSC_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="234" pos:column="21">sc</name><op:operator pos:line="234" pos:column="23">.</op:operator><name pos:line="234" pos:column="24">Forward</name></name><argument_list pos:line="234" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="235" pos:column="21">if <condition pos:line="235" pos:column="24">(<expr><name><name pos:line="235" pos:column="25">sc</name><op:operator pos:line="235" pos:column="27">.</op:operator><name pos:line="235" pos:column="28">chNext</name></name> <op:operator pos:line="235" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="235" pos:column="38">'+'</lit:literal></expr>)</condition><then pos:line="235" pos:column="42"> <block pos:line="235" pos:column="43">{
                        <expr_stmt><expr><call><name><name pos:line="236" pos:column="25">sc</name><op:operator pos:line="236" pos:column="27">.</op:operator><name pos:line="236" pos:column="28">Forward</name></name><argument_list pos:line="236" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="237" pos:column="25">sc</name><op:operator pos:line="237" pos:column="27">.</op:operator><name pos:line="237" pos:column="28">ForwardSetState</name></name><argument_list pos:line="237" pos:column="43">(<argument><expr><name pos:line="237" pos:column="44">SCE_PS_DSC_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="239" pos:column="19">else <block pos:line="239" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="240" pos:column="21">sc</name><op:operator pos:line="240" pos:column="23">.</op:operator><name pos:line="240" pos:column="24">SetState</name></name><argument_list pos:line="240" pos:column="32">(<argument><expr><name pos:line="240" pos:column="33">SCE_PS_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="242" pos:column="15">else <if pos:line="242" pos:column="20">if <condition pos:line="242" pos:column="23">(<expr><op:operator pos:line="242" pos:column="24">(</op:operator><name><name pos:line="242" pos:column="25">sc</name><op:operator pos:line="242" pos:column="27">.</op:operator><name pos:line="242" pos:column="28">ch</name></name> <op:operator pos:line="242" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="242" pos:column="34">'+'</lit:literal> <op:operator pos:line="242" pos:column="38">||</op:operator> <name><name pos:line="242" pos:column="41">sc</name><op:operator pos:line="242" pos:column="43">.</op:operator><name pos:line="242" pos:column="44">ch</name></name> <op:operator pos:line="242" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="242" pos:column="50">'-'</lit:literal> <op:operator pos:line="242" pos:column="54">||</op:operator> <name><name pos:line="242" pos:column="57">sc</name><op:operator pos:line="242" pos:column="59">.</op:operator><name pos:line="242" pos:column="60">ch</name></name> <op:operator pos:line="242" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="242" pos:column="66">'.'</lit:literal><op:operator pos:line="242" pos:column="69">)</op:operator> <op:operator pos:line="242" pos:column="71">&amp;&amp;</op:operator>
                       <call><name pos:line="243" pos:column="24">IsABaseNDigit</name><argument_list pos:line="243" pos:column="37">(<argument><expr><name><name pos:line="243" pos:column="38">sc</name><op:operator pos:line="243" pos:column="40">.</op:operator><name pos:line="243" pos:column="41">chNext</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="243" pos:column="49">10</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="243" pos:column="53"> <block pos:line="243" pos:column="54">{
                <expr_stmt><expr><call><name><name pos:line="244" pos:column="17">sc</name><op:operator pos:line="244" pos:column="19">.</op:operator><name pos:line="244" pos:column="20">SetState</name></name><argument_list pos:line="244" pos:column="28">(<argument><expr><name pos:line="244" pos:column="29">SCE_PS_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="245" pos:column="17">numRadix</name> <op:operator pos:line="245" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="245" pos:column="28">0</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="246" pos:column="17">numHasPoint</name> <op:operator pos:line="246" pos:column="29">=</op:operator> <op:operator pos:line="246" pos:column="31">(</op:operator><name><name pos:line="246" pos:column="32">sc</name><op:operator pos:line="246" pos:column="34">.</op:operator><name pos:line="246" pos:column="35">ch</name></name> <op:operator pos:line="246" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="246" pos:column="41">'.'</lit:literal><op:operator pos:line="246" pos:column="44">)</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="247" pos:column="17">numHasExponent</name> <op:operator pos:line="247" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="247" pos:column="34">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="248" pos:column="17">numHasSign</name> <op:operator pos:line="248" pos:column="28">=</op:operator> <op:operator pos:line="248" pos:column="30">(</op:operator><name><name pos:line="248" pos:column="31">sc</name><op:operator pos:line="248" pos:column="33">.</op:operator><name pos:line="248" pos:column="34">ch</name></name> <op:operator pos:line="248" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="40">'+'</lit:literal> <op:operator pos:line="248" pos:column="44">||</op:operator> <name><name pos:line="248" pos:column="47">sc</name><op:operator pos:line="248" pos:column="49">.</op:operator><name pos:line="248" pos:column="50">ch</name></name> <op:operator pos:line="248" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="56">'-'</lit:literal><op:operator pos:line="248" pos:column="59">)</op:operator></expr>;</expr_stmt>
            }</block></then> <else pos:line="249" pos:column="15">else <if pos:line="249" pos:column="20">if <condition pos:line="249" pos:column="23">(<expr><op:operator pos:line="249" pos:column="24">(</op:operator><name><name pos:line="249" pos:column="25">sc</name><op:operator pos:line="249" pos:column="27">.</op:operator><name pos:line="249" pos:column="28">ch</name></name> <op:operator pos:line="249" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="249" pos:column="34">'+'</lit:literal> <op:operator pos:line="249" pos:column="38">||</op:operator> <name><name pos:line="249" pos:column="41">sc</name><op:operator pos:line="249" pos:column="43">.</op:operator><name pos:line="249" pos:column="44">ch</name></name> <op:operator pos:line="249" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="249" pos:column="50">'-'</lit:literal><op:operator pos:line="249" pos:column="53">)</op:operator> <op:operator pos:line="249" pos:column="55">&amp;&amp;</op:operator> <name><name pos:line="249" pos:column="58">sc</name><op:operator pos:line="249" pos:column="60">.</op:operator><name pos:line="249" pos:column="61">chNext</name></name> <op:operator pos:line="249" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="249" pos:column="71">'.'</lit:literal> <op:operator pos:line="249" pos:column="75">&amp;&amp;</op:operator>
                       <call><name pos:line="250" pos:column="24">IsABaseNDigit</name><argument_list pos:line="250" pos:column="37">(<argument><expr><call><name><name pos:line="250" pos:column="38">sc</name><op:operator pos:line="250" pos:column="40">.</op:operator><name pos:line="250" pos:column="41">GetRelative</name></name><argument_list pos:line="250" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="250" pos:column="53">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="250" pos:column="57">10</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="250" pos:column="61"> <block pos:line="250" pos:column="62">{
                <expr_stmt><expr><call><name><name pos:line="251" pos:column="17">sc</name><op:operator pos:line="251" pos:column="19">.</op:operator><name pos:line="251" pos:column="20">SetState</name></name><argument_list pos:line="251" pos:column="28">(<argument><expr><name pos:line="251" pos:column="29">SCE_PS_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="252" pos:column="17">numRadix</name> <op:operator pos:line="252" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="252" pos:column="28">0</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="253" pos:column="17">numHasPoint</name> <op:operator pos:line="253" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="253" pos:column="31">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="254" pos:column="17">numHasExponent</name> <op:operator pos:line="254" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="254" pos:column="34">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="255" pos:column="17">numHasSign</name> <op:operator pos:line="255" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="255" pos:column="30">true</lit:literal></expr>;</expr_stmt>
            }</block></then> <else pos:line="256" pos:column="15">else <if pos:line="256" pos:column="20">if <condition pos:line="256" pos:column="23">(<expr><call><name pos:line="256" pos:column="24">IsABaseNDigit</name><argument_list pos:line="256" pos:column="37">(<argument><expr><name><name pos:line="256" pos:column="38">sc</name><op:operator pos:line="256" pos:column="40">.</op:operator><name pos:line="256" pos:column="41">ch</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="256" pos:column="45">10</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="256" pos:column="49"> <block pos:line="256" pos:column="50">{
                <expr_stmt><expr><call><name><name pos:line="257" pos:column="17">sc</name><op:operator pos:line="257" pos:column="19">.</op:operator><name pos:line="257" pos:column="20">SetState</name></name><argument_list pos:line="257" pos:column="28">(<argument><expr><name pos:line="257" pos:column="29">SCE_PS_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="258" pos:column="17">numRadix</name> <op:operator pos:line="258" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="258" pos:column="28">0</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="259" pos:column="17">numHasPoint</name> <op:operator pos:line="259" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="259" pos:column="31">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="260" pos:column="17">numHasExponent</name> <op:operator pos:line="260" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="260" pos:column="34">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="261" pos:column="17">numHasSign</name> <op:operator pos:line="261" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="261" pos:column="30">false</lit:literal></expr>;</expr_stmt>
            }</block></then> <else pos:line="262" pos:column="15">else <if pos:line="262" pos:column="20">if <condition pos:line="262" pos:column="23">(<expr><op:operator pos:line="262" pos:column="24">!</op:operator><call><name pos:line="262" pos:column="25">IsAWhitespaceChar</name><argument_list pos:line="262" pos:column="42">(<argument><expr><name><name pos:line="262" pos:column="43">sc</name><op:operator pos:line="262" pos:column="45">.</op:operator><name pos:line="262" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="262" pos:column="50"> <block pos:line="262" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="263" pos:column="17">sc</name><op:operator pos:line="263" pos:column="19">.</op:operator><name pos:line="263" pos:column="20">SetState</name></name><argument_list pos:line="263" pos:column="28">(<argument><expr><name pos:line="263" pos:column="29">SCE_PS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

            <comment type="line" pos:line="266" pos:column="13">// Mark the start of tokens</comment>
            <if pos:line="267" pos:column="13">if <condition pos:line="267" pos:column="16">(<expr><name pos:line="267" pos:column="17">tokenizing</name> <op:operator pos:line="267" pos:column="28">&amp;&amp;</op:operator> <name><name pos:line="267" pos:column="31">sc</name><op:operator pos:line="267" pos:column="33">.</op:operator><name pos:line="267" pos:column="34">state</name></name> <op:operator pos:line="267" pos:column="40">!=</op:operator> <name pos:line="267" pos:column="43">SCE_C_DEFAULT</name> <op:operator pos:line="267" pos:column="57">&amp;&amp;</op:operator> <name><name pos:line="267" pos:column="60">sc</name><op:operator pos:line="267" pos:column="62">.</op:operator><name pos:line="267" pos:column="63">state</name></name> <op:operator pos:line="267" pos:column="69">!=</op:operator> <name pos:line="267" pos:column="72">SCE_PS_COMMENT</name> <op:operator pos:line="267" pos:column="87">&amp;&amp;</op:operator>
                <name><name pos:line="268" pos:column="17">sc</name><op:operator pos:line="268" pos:column="19">.</op:operator><name pos:line="268" pos:column="20">state</name></name> <op:operator pos:line="268" pos:column="26">!=</op:operator> <name pos:line="268" pos:column="29">SCE_PS_DSC_COMMENT</name> <op:operator pos:line="268" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="268" pos:column="51">sc</name><op:operator pos:line="268" pos:column="53">.</op:operator><name pos:line="268" pos:column="54">state</name></name> <op:operator pos:line="268" pos:column="60">!=</op:operator> <name pos:line="268" pos:column="63">SCE_PS_DSC_VALUE</name></expr>)</condition><then pos:line="268" pos:column="80"> <block pos:line="268" pos:column="81">{
                <expr_stmt><expr><call><name><name pos:line="269" pos:column="17">styler</name><op:operator pos:line="269" pos:column="23">.</op:operator><name pos:line="269" pos:column="24">Flush</name></name><argument_list pos:line="269" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="270" pos:column="17">styler</name><op:operator pos:line="270" pos:column="23">.</op:operator><name pos:line="270" pos:column="24">StartAt</name></name><argument_list pos:line="270" pos:column="31">(<argument><expr><name pos:line="270" pos:column="32">tokenpos</name></expr></argument>, <argument><expr><call><name><name pos:line="270" pos:column="42">static_cast</name><argument_list pos:line="270" pos:column="53">&lt;<argument><expr><name pos:line="270" pos:column="54">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="270" pos:column="59">(<argument><expr><name pos:line="270" pos:column="60">INDIC2_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="271" pos:column="17">styler</name><op:operator pos:line="271" pos:column="23">.</op:operator><name pos:line="271" pos:column="24">ColourTo</name></name><argument_list pos:line="271" pos:column="32">(<argument><expr><name pos:line="271" pos:column="33">tokenpos</name></expr></argument>, <argument><expr><name pos:line="271" pos:column="43">INDIC2_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="272" pos:column="17">styler</name><op:operator pos:line="272" pos:column="23">.</op:operator><name pos:line="272" pos:column="24">Flush</name></name><argument_list pos:line="272" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="273" pos:column="17">styler</name><op:operator pos:line="273" pos:column="23">.</op:operator><name pos:line="273" pos:column="24">StartAt</name></name><argument_list pos:line="273" pos:column="31">(<argument><expr><name pos:line="273" pos:column="32">tokenpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="274" pos:column="17">styler</name><op:operator pos:line="274" pos:column="23">.</op:operator><name pos:line="274" pos:column="24">StartSegment</name></name><argument_list pos:line="274" pos:column="36">(<argument><expr><name pos:line="274" pos:column="37">tokenpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <if pos:line="278" pos:column="9">if <condition pos:line="278" pos:column="12">(<expr><name><name pos:line="278" pos:column="13">sc</name><op:operator pos:line="278" pos:column="15">.</op:operator><name pos:line="278" pos:column="16">atLineEnd</name></name></expr>)</condition><then pos:line="278" pos:column="26">
            <expr_stmt><expr><call><name><name pos:line="279" pos:column="13">styler</name><op:operator pos:line="279" pos:column="19">.</op:operator><name pos:line="279" pos:column="20">SetLineState</name></name><argument_list pos:line="279" pos:column="32">(<argument><expr><name pos:line="279" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="279" pos:column="46">nestTextCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>

    <expr_stmt><expr><call><name><name pos:line="282" pos:column="5">sc</name><op:operator pos:line="282" pos:column="7">.</op:operator><name pos:line="282" pos:column="8">Complete</name></name><argument_list pos:line="282" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="285" pos:column="1">static</specifier> <name pos:line="285" pos:column="8">void</name></type> <name pos:line="285" pos:column="13">FoldPSDoc</name><parameter_list pos:line="285" pos:column="22">(<param><decl><type><name pos:line="285" pos:column="23">unsigned</name> <name pos:line="285" pos:column="32">int</name></type> <name pos:line="285" pos:column="36">startPos</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="46">int</name></type> <name pos:line="285" pos:column="50">length</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="58">int</name></type></decl></param>, <param><decl><type><name><name pos:line="285" pos:column="63">WordList</name> <type:modifier pos:line="285" pos:column="72">*</type:modifier><index pos:line="285" pos:column="73">[]</index></name></type></decl></param>,
                       <param><decl><type><name pos:line="286" pos:column="24">Accessor</name> <type:modifier pos:line="286" pos:column="33">&amp;</type:modifier></type><name pos:line="286" pos:column="34">styler</name></decl></param>)</parameter_list> <block pos:line="286" pos:column="42">{
    <decl_stmt><decl><type><name pos:line="287" pos:column="5">bool</name></type> <name pos:line="287" pos:column="10">foldCompact</name> <init pos:line="287" pos:column="22">= <expr><call><name><name pos:line="287" pos:column="24">styler</name><op:operator pos:line="287" pos:column="30">.</op:operator><name pos:line="287" pos:column="31">GetPropertyInt</name></name><argument_list pos:line="287" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="287" pos:column="46">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="287" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="287" pos:column="65">!=</op:operator> <lit:literal type="number" pos:line="287" pos:column="68">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="288" pos:column="5">bool</name></type> <name pos:line="288" pos:column="10">foldAtElse</name> <init pos:line="288" pos:column="21">= <expr><call><name><name pos:line="288" pos:column="23">styler</name><op:operator pos:line="288" pos:column="29">.</op:operator><name pos:line="288" pos:column="30">GetPropertyInt</name></name><argument_list pos:line="288" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="288" pos:column="45">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="288" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="288" pos:column="64">!=</op:operator> <lit:literal type="number" pos:line="288" pos:column="67">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="289" pos:column="5">unsigned</name> <name pos:line="289" pos:column="14">int</name></type> <name pos:line="289" pos:column="18">endPos</name> <init pos:line="289" pos:column="25">= <expr><name pos:line="289" pos:column="27">startPos</name> <op:operator pos:line="289" pos:column="36">+</op:operator> <name pos:line="289" pos:column="38">length</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="290" pos:column="5">int</name></type> <name pos:line="290" pos:column="9">visibleChars</name> <init pos:line="290" pos:column="22">= <expr><lit:literal type="number" pos:line="290" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="291" pos:column="5">int</name></type> <name pos:line="291" pos:column="9">lineCurrent</name> <init pos:line="291" pos:column="21">= <expr><call><name><name pos:line="291" pos:column="23">styler</name><op:operator pos:line="291" pos:column="29">.</op:operator><name pos:line="291" pos:column="30">GetLine</name></name><argument_list pos:line="291" pos:column="37">(<argument><expr><name pos:line="291" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="292" pos:column="5">int</name></type> <name pos:line="292" pos:column="9">levelCurrent</name> <init pos:line="292" pos:column="22">= <expr><name pos:line="292" pos:column="24">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
    <if pos:line="293" pos:column="5">if <condition pos:line="293" pos:column="8">(<expr><name pos:line="293" pos:column="9">lineCurrent</name> <op:operator pos:line="293" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="293" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="293" pos:column="25">
        <expr_stmt><expr><name pos:line="294" pos:column="9">levelCurrent</name> <op:operator pos:line="294" pos:column="22">=</op:operator> <call><name><name pos:line="294" pos:column="24">styler</name><op:operator pos:line="294" pos:column="30">.</op:operator><name pos:line="294" pos:column="31">LevelAt</name></name><argument_list pos:line="294" pos:column="38">(<argument><expr><name pos:line="294" pos:column="39">lineCurrent</name><op:operator pos:line="294" pos:column="50">-</op:operator><lit:literal type="number" pos:line="294" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="294" pos:column="54">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="294" pos:column="57">16</lit:literal></expr>;</expr_stmt></then></if>
    <decl_stmt><decl><type><name pos:line="295" pos:column="5">int</name></type> <name pos:line="295" pos:column="9">levelMinCurrent</name> <init pos:line="295" pos:column="25">= <expr><name pos:line="295" pos:column="27">levelCurrent</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="296" pos:column="5">int</name></type> <name pos:line="296" pos:column="9">levelNext</name> <init pos:line="296" pos:column="19">= <expr><name pos:line="296" pos:column="21">levelCurrent</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="297" pos:column="5">char</name></type> <name pos:line="297" pos:column="10">chNext</name> <init pos:line="297" pos:column="17">= <expr><name><name pos:line="297" pos:column="19">styler</name><index pos:line="297" pos:column="25">[<expr><name pos:line="297" pos:column="26">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="298" pos:column="5">int</name></type> <name pos:line="298" pos:column="9">styleNext</name> <init pos:line="298" pos:column="19">= <expr><call><name><name pos:line="298" pos:column="21">styler</name><op:operator pos:line="298" pos:column="27">.</op:operator><name pos:line="298" pos:column="28">StyleAt</name></name><argument_list pos:line="298" pos:column="35">(<argument><expr><name pos:line="298" pos:column="36">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="299" pos:column="5">int</name></type> <name pos:line="299" pos:column="9">style</name></decl>;</decl_stmt>
    <for pos:line="300" pos:column="5">for (<init><decl><type><name pos:line="300" pos:column="10">unsigned</name> <name pos:line="300" pos:column="19">int</name></type> <name pos:line="300" pos:column="23">i</name> <init pos:line="300" pos:column="25">= <expr><name pos:line="300" pos:column="27">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="300" pos:column="37">i</name> <op:operator pos:line="300" pos:column="39">&lt;</op:operator> <name pos:line="300" pos:column="41">endPos</name></expr>;</condition> <incr><expr><name pos:line="300" pos:column="49">i</name><op:operator pos:line="300" pos:column="50">++</op:operator></expr></incr>) <block pos:line="300" pos:column="54">{
        <decl_stmt><decl><type><name pos:line="301" pos:column="9">char</name></type> <name pos:line="301" pos:column="14">ch</name> <init pos:line="301" pos:column="17">= <expr><name pos:line="301" pos:column="19">chNext</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="302" pos:column="9">chNext</name> <op:operator pos:line="302" pos:column="16">=</op:operator> <call><name><name pos:line="302" pos:column="18">styler</name><op:operator pos:line="302" pos:column="24">.</op:operator><name pos:line="302" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="302" pos:column="38">(<argument><expr><name pos:line="302" pos:column="39">i</name> <op:operator pos:line="302" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="302" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="303" pos:column="9">style</name> <op:operator pos:line="303" pos:column="15">=</op:operator> <name pos:line="303" pos:column="17">styleNext</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="304" pos:column="9">styleNext</name> <op:operator pos:line="304" pos:column="19">=</op:operator> <call><name><name pos:line="304" pos:column="21">styler</name><op:operator pos:line="304" pos:column="27">.</op:operator><name pos:line="304" pos:column="28">StyleAt</name></name><argument_list pos:line="304" pos:column="35">(<argument><expr><name pos:line="304" pos:column="36">i</name> <op:operator pos:line="304" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="304" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="305" pos:column="9">bool</name></type> <name pos:line="305" pos:column="14">atEOL</name> <init pos:line="305" pos:column="20">= <expr><op:operator pos:line="305" pos:column="22">(</op:operator><name pos:line="305" pos:column="23">ch</name> <op:operator pos:line="305" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="305" pos:column="29">'\r'</lit:literal> <op:operator pos:line="305" pos:column="34">&amp;&amp;</op:operator> <name pos:line="305" pos:column="37">chNext</name> <op:operator pos:line="305" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="305" pos:column="47">'\n'</lit:literal><op:operator pos:line="305" pos:column="51">)</op:operator> <op:operator pos:line="305" pos:column="53">||</op:operator> <op:operator pos:line="305" pos:column="56">(</op:operator><name pos:line="305" pos:column="57">ch</name> <op:operator pos:line="305" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="305" pos:column="63">'\n'</lit:literal><op:operator pos:line="305" pos:column="67">)</op:operator></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="305" pos:column="71">//mac??</comment>
        <if pos:line="306" pos:column="9">if <condition pos:line="306" pos:column="12">(<expr><op:operator pos:line="306" pos:column="13">(</op:operator><name pos:line="306" pos:column="14">style</name> <op:operator pos:line="306" pos:column="20">&amp;</op:operator> <lit:literal type="number" pos:line="306" pos:column="22">31</lit:literal><op:operator pos:line="306" pos:column="24">)</op:operator> <op:operator pos:line="306" pos:column="26">==</op:operator> <name pos:line="306" pos:column="29">SCE_PS_PAREN_PROC</name></expr>)</condition><then pos:line="306" pos:column="47"> <block pos:line="306" pos:column="48">{
            <if pos:line="307" pos:column="13">if <condition pos:line="307" pos:column="16">(<expr><name pos:line="307" pos:column="17">ch</name> <op:operator pos:line="307" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="307" pos:column="23">'{'</lit:literal></expr>)</condition><then pos:line="307" pos:column="27"> <block pos:line="307" pos:column="28">{
                <comment type="line" pos:line="308" pos:column="17">// Measure the minimum before a '{' to allow</comment>
                <comment type="line" pos:line="309" pos:column="17">// folding on "} {"</comment>
                <if pos:line="310" pos:column="17">if <condition pos:line="310" pos:column="20">(<expr><name pos:line="310" pos:column="21">levelMinCurrent</name> <op:operator pos:line="310" pos:column="37">&gt;</op:operator> <name pos:line="310" pos:column="39">levelNext</name></expr>)</condition><then pos:line="310" pos:column="49"> <block pos:line="310" pos:column="50">{
                    <expr_stmt><expr><name pos:line="311" pos:column="21">levelMinCurrent</name> <op:operator pos:line="311" pos:column="37">=</op:operator> <name pos:line="311" pos:column="39">levelNext</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="313" pos:column="17">levelNext</name><op:operator pos:line="313" pos:column="26">++</op:operator></expr>;</expr_stmt>
            }</block></then> <else pos:line="314" pos:column="15">else <if pos:line="314" pos:column="20">if <condition pos:line="314" pos:column="23">(<expr><name pos:line="314" pos:column="24">ch</name> <op:operator pos:line="314" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="314" pos:column="30">'}'</lit:literal></expr>)</condition><then pos:line="314" pos:column="34"> <block pos:line="314" pos:column="35">{
                <expr_stmt><expr><name pos:line="315" pos:column="17">levelNext</name><op:operator pos:line="315" pos:column="26">--</op:operator></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if>
        <if pos:line="318" pos:column="9">if <condition pos:line="318" pos:column="12">(<expr><name pos:line="318" pos:column="13">atEOL</name></expr>)</condition><then pos:line="318" pos:column="19"> <block pos:line="318" pos:column="20">{
            <decl_stmt><decl><type><name pos:line="319" pos:column="13">int</name></type> <name pos:line="319" pos:column="17">levelUse</name> <init pos:line="319" pos:column="26">= <expr><name pos:line="319" pos:column="28">levelCurrent</name></expr></init></decl>;</decl_stmt>
            <if pos:line="320" pos:column="13">if <condition pos:line="320" pos:column="16">(<expr><name pos:line="320" pos:column="17">foldAtElse</name></expr>)</condition><then pos:line="320" pos:column="28"> <block pos:line="320" pos:column="29">{
                <expr_stmt><expr><name pos:line="321" pos:column="17">levelUse</name> <op:operator pos:line="321" pos:column="26">=</op:operator> <name pos:line="321" pos:column="28">levelMinCurrent</name></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="323" pos:column="13">int</name></type> <name pos:line="323" pos:column="17">lev</name> <init pos:line="323" pos:column="21">= <expr><name pos:line="323" pos:column="23">levelUse</name> <op:operator pos:line="323" pos:column="32">|</op:operator> <name pos:line="323" pos:column="34">levelNext</name> <op:operator pos:line="323" pos:column="44">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="323" pos:column="47">16</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="324" pos:column="13">if <condition pos:line="324" pos:column="16">(<expr><name pos:line="324" pos:column="17">visibleChars</name> <op:operator pos:line="324" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="324" pos:column="33">0</lit:literal> <op:operator pos:line="324" pos:column="35">&amp;&amp;</op:operator> <name pos:line="324" pos:column="38">foldCompact</name></expr>)</condition><then pos:line="324" pos:column="50">
                <expr_stmt><expr><name pos:line="325" pos:column="17">lev</name> <op:operator pos:line="325" pos:column="21">|=</op:operator> <name pos:line="325" pos:column="24">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
            <if pos:line="326" pos:column="13">if <condition pos:line="326" pos:column="16">(<expr><name pos:line="326" pos:column="17">levelUse</name> <op:operator pos:line="326" pos:column="26">&lt;</op:operator> <name pos:line="326" pos:column="28">levelNext</name></expr>)</condition><then pos:line="326" pos:column="38">
                <expr_stmt><expr><name pos:line="327" pos:column="17">lev</name> <op:operator pos:line="327" pos:column="21">|=</op:operator> <name pos:line="327" pos:column="24">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
            <if pos:line="328" pos:column="13">if <condition pos:line="328" pos:column="16">(<expr><name pos:line="328" pos:column="17">lev</name> <op:operator pos:line="328" pos:column="21">!=</op:operator> <call><name><name pos:line="328" pos:column="24">styler</name><op:operator pos:line="328" pos:column="30">.</op:operator><name pos:line="328" pos:column="31">LevelAt</name></name><argument_list pos:line="328" pos:column="38">(<argument><expr><name pos:line="328" pos:column="39">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="328" pos:column="52"> <block pos:line="328" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="329" pos:column="17">styler</name><op:operator pos:line="329" pos:column="23">.</op:operator><name pos:line="329" pos:column="24">SetLevel</name></name><argument_list pos:line="329" pos:column="32">(<argument><expr><name pos:line="329" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="329" pos:column="46">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="331" pos:column="13">lineCurrent</name><op:operator pos:line="331" pos:column="24">++</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="332" pos:column="13">levelCurrent</name> <op:operator pos:line="332" pos:column="26">=</op:operator> <name pos:line="332" pos:column="28">levelNext</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="333" pos:column="13">levelMinCurrent</name> <op:operator pos:line="333" pos:column="29">=</op:operator> <name pos:line="333" pos:column="31">levelCurrent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="334" pos:column="13">visibleChars</name> <op:operator pos:line="334" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="334" pos:column="28">0</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
        <if pos:line="336" pos:column="9">if <condition pos:line="336" pos:column="12">(<expr><op:operator pos:line="336" pos:column="13">!</op:operator><call><name pos:line="336" pos:column="14">isspacechar</name><argument_list pos:line="336" pos:column="25">(<argument><expr><name pos:line="336" pos:column="26">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="336" pos:column="30">
            <expr_stmt><expr><name pos:line="337" pos:column="13">visibleChars</name><op:operator pos:line="337" pos:column="25">++</op:operator></expr>;</expr_stmt></then></if>
    }</block></for>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="341" pos:column="1">static</specifier> <specifier pos:line="341" pos:column="8">const</specifier> <name pos:line="341" pos:column="14">char</name> <type:modifier pos:line="341" pos:column="19">*</type:modifier> <specifier pos:line="341" pos:column="21">const</specifier></type> <name><name pos:line="341" pos:column="27">psWordListDesc</name><index pos:line="341" pos:column="41">[]</index></name> <init pos:line="341" pos:column="44">= <expr><block pos:line="341" pos:column="46">{
    <expr><lit:literal type="string" pos:line="342" pos:column="5">"PS Level 1 operators"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="343" pos:column="5">"PS Level 2 operators"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="344" pos:column="5">"PS Level 3 operators"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="345" pos:column="5">"RIP-specific operators"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="346" pos:column="5">"User-defined operators"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="347" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="350" pos:column="1">LexerModule</name></type> <name pos:line="350" pos:column="13">lmPS</name><argument_list pos:line="350" pos:column="17">(<argument><expr><name pos:line="350" pos:column="18">SCLEX_PS</name></expr></argument>, <argument><expr><name pos:line="350" pos:column="28">ColourisePSDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="350" pos:column="44">"ps"</lit:literal></expr></argument>, <argument><expr><name pos:line="350" pos:column="50">FoldPSDoc</name></expr></argument>, <argument><expr><name pos:line="350" pos:column="61">psWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
