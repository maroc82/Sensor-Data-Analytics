<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\AnsiCharPanel\ListView.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"ListView.h"</lit:literal></cpp:file></cpp:include>


<function><type><name pos:line="33" pos:column="1">void</name></type> <name><name pos:line="33" pos:column="6">ListView</name><op:operator pos:line="33" pos:column="14">::</op:operator><name pos:line="33" pos:column="16">init</name></name><parameter_list pos:line="33" pos:column="20">(<param><decl><type><name pos:line="33" pos:column="21">HINSTANCE</name></type> <name pos:line="33" pos:column="31">hInst</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="38">HWND</name></type> <name pos:line="33" pos:column="43">parent</name></decl></param>)</parameter_list>
<block pos:line="34" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="35" pos:column="9">Window</name><op:operator pos:line="35" pos:column="15">::</op:operator><name pos:line="35" pos:column="17">init</name></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">hInst</name></expr></argument>, <argument><expr><name pos:line="35" pos:column="29">parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">INITCOMMONCONTROLSEX</name></type> <name pos:line="36" pos:column="26">icex</name></decl>;</decl_stmt>
    
    <comment type="line" pos:line="38" pos:column="5">// Ensure that the common control DLL is loaded. </comment>
    <expr_stmt><expr><name><name pos:line="39" pos:column="5">icex</name><op:operator pos:line="39" pos:column="9">.</op:operator><name pos:line="39" pos:column="10">dwSize</name></name> <op:operator pos:line="39" pos:column="17">=</op:operator> <sizeof pos:line="39" pos:column="19">sizeof<argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">INITCOMMONCONTROLSEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">icex</name><op:operator pos:line="40" pos:column="9">.</op:operator><name pos:line="40" pos:column="10">dwICC</name></name>  <op:operator pos:line="40" pos:column="17">=</op:operator> <name pos:line="40" pos:column="19">ICC_LISTVIEW_CLASSES</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">InitCommonControlsEx</name><argument_list pos:line="41" pos:column="25">(<argument><expr><op:operator pos:line="41" pos:column="26">&amp;</op:operator><name pos:line="41" pos:column="27">icex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line" pos:line="43" pos:column="5">// Create the list-view window in report view with label editing enabled.</comment>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">int</name></type> <name pos:line="44" pos:column="13">listViewStyles</name> <init pos:line="44" pos:column="28">= <expr><name pos:line="44" pos:column="30">LVS_REPORT</name> <op:operator pos:line="44" pos:column="41">|</op:operator> <name pos:line="44" pos:column="43">LVS_NOSORTHEADER</name>\
						<op:operator pos:line="45" pos:column="49">|</op:operator> <name pos:line="45" pos:column="51">LVS_SINGLESEL</name> <op:operator pos:line="45" pos:column="65">|</op:operator> <name pos:line="45" pos:column="67">LVS_AUTOARRANGE</name>\
						<op:operator pos:line="46" pos:column="49">|</op:operator> <name pos:line="46" pos:column="51">LVS_SHAREIMAGELISTS</name> <op:operator pos:line="46" pos:column="71">|</op:operator> <name pos:line="46" pos:column="73">LVS_SHOWSELALWAYS</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="48" pos:column="9">_hSelf</name> <op:operator pos:line="48" pos:column="16">=</op:operator> <call><name><op:operator pos:line="48" pos:column="18">::</op:operator><name pos:line="48" pos:column="20">CreateWindow</name></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">WC_LISTVIEW</name></expr></argument>, 
                                <argument><expr><call><name pos:line="49" pos:column="33">TEXT</name><argument_list pos:line="49" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="38">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, 
                                <argument><expr><name pos:line="50" pos:column="33">WS_CHILD</name> <op:operator pos:line="50" pos:column="42">|</op:operator> <name pos:line="50" pos:column="44">listViewStyles</name></expr></argument>,
                                <argument><expr><lit:literal type="number" pos:line="51" pos:column="33">0</lit:literal></expr></argument>,
                                <argument><expr><lit:literal type="number" pos:line="52" pos:column="33">0</lit:literal></expr></argument>, 
                                <argument><expr><lit:literal type="number" pos:line="53" pos:column="33">0</lit:literal></expr></argument>,
                                <argument><expr><lit:literal type="number" pos:line="54" pos:column="33">0</lit:literal></expr></argument>,
                                <argument><expr><name pos:line="55" pos:column="33">_hParent</name></expr></argument>, 
                                <argument><expr><op:operator pos:line="56" pos:column="33">(</op:operator><name pos:line="56" pos:column="34">HMENU</name><op:operator pos:line="56" pos:column="39">)</op:operator> <name pos:line="56" pos:column="41">NULL</name></expr></argument>, 
                                <argument><expr><name pos:line="57" pos:column="33">hInst</name></expr></argument>,
                                <argument><expr><name pos:line="58" pos:column="33">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><op:operator pos:line="59" pos:column="13">!</op:operator><name pos:line="59" pos:column="14">_hSelf</name></expr>)</condition><then pos:line="59" pos:column="21">
	<block pos:line="60" pos:column="9">{
		<throw pos:line="61" pos:column="17">throw <expr><call><name><name pos:line="61" pos:column="23">std</name><op:operator pos:line="61" pos:column="26">::</op:operator><name pos:line="61" pos:column="28">runtime_error</name></name><argument_list pos:line="61" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="42">"ListView::init : CreateWindowEx() function return null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>

	<expr_stmt><expr><call><name><op:operator pos:line="64" pos:column="9">::</op:operator><name pos:line="64" pos:column="11">SetWindowLongPtr</name></name><argument_list pos:line="64" pos:column="27">(<argument><expr><name pos:line="64" pos:column="28">_hSelf</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="36">GWLP_USERDATA</name></expr></argument>, <argument><expr><op:operator pos:line="64" pos:column="51">(</op:operator><name pos:line="64" pos:column="52">LONG_PTR</name><op:operator pos:line="64" pos:column="60">)</op:operator><name pos:line="64" pos:column="61">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="65" pos:column="9">_defaultProc</name> <op:operator pos:line="65" pos:column="22">=</op:operator> <call><name><name pos:line="65" pos:column="24">reinterpret_cast</name><argument_list pos:line="65" pos:column="40">&lt;<argument><expr><name pos:line="65" pos:column="41">WNDPROC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="49">(<argument><expr><call><name><op:operator pos:line="65" pos:column="50">::</op:operator><name pos:line="65" pos:column="52">SetWindowLongPtr</name></name><argument_list pos:line="65" pos:column="68">(<argument><expr><name pos:line="65" pos:column="69">_hSelf</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="77">GWLP_WNDPROC</name></expr></argument>, <argument><expr><op:operator pos:line="65" pos:column="91">(</op:operator><name pos:line="65" pos:column="92">LONG_PTR</name><op:operator pos:line="65" pos:column="100">)</op:operator><name pos:line="65" pos:column="101">staticProc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="67" pos:column="9">DWORD</name></type> <name pos:line="67" pos:column="15">exStyle</name> <init pos:line="67" pos:column="23">= <expr><call><name pos:line="67" pos:column="25">ListView_GetExtendedListViewStyle</name><argument_list pos:line="67" pos:column="58">(<argument><expr><name pos:line="67" pos:column="59">_hSelf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="68" pos:column="9">exStyle</name> <op:operator pos:line="68" pos:column="17">|=</op:operator> <name pos:line="68" pos:column="20">LVS_EX_FULLROWSELECT</name> <op:operator pos:line="68" pos:column="41">|</op:operator> <name pos:line="68" pos:column="43">LVS_EX_BORDERSELECT</name></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">ListView_SetExtendedListViewStyle</name><argument_list pos:line="69" pos:column="42">(<argument><expr><name pos:line="69" pos:column="43">_hSelf</name></expr></argument>, <argument><expr><name pos:line="69" pos:column="51">exStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="71" pos:column="9">LVCOLUMN</name></type> <name pos:line="71" pos:column="18">lvColumn</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="72" pos:column="9">lvColumn</name><op:operator pos:line="72" pos:column="17">.</op:operator><name pos:line="72" pos:column="18">mask</name></name> <op:operator pos:line="72" pos:column="23">=</op:operator> <name pos:line="72" pos:column="25">LVCF_TEXT</name><op:operator pos:line="72" pos:column="34">|</op:operator><name pos:line="72" pos:column="35">LVCF_WIDTH</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="74" pos:column="9">lvColumn</name><op:operator pos:line="74" pos:column="17">.</op:operator><name pos:line="74" pos:column="18">cx</name></name> <op:operator pos:line="74" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="74" pos:column="23">45</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="75" pos:column="9">lvColumn</name><op:operator pos:line="75" pos:column="17">.</op:operator><name pos:line="75" pos:column="18">pszText</name></name> <op:operator pos:line="75" pos:column="26">=</op:operator> <call><name pos:line="75" pos:column="28">TEXT</name><argument_list pos:line="75" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="33">"Value"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="76" pos:column="9">ListView_InsertColumn</name><argument_list pos:line="76" pos:column="30">(<argument><expr><name pos:line="76" pos:column="31">_hSelf</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="76" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="76" pos:column="42">&amp;</op:operator><name pos:line="76" pos:column="43">lvColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="78" pos:column="9">lvColumn</name><op:operator pos:line="78" pos:column="17">.</op:operator><name pos:line="78" pos:column="18">cx</name></name> <op:operator pos:line="78" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="78" pos:column="23">70</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="79" pos:column="9">lvColumn</name><op:operator pos:line="79" pos:column="17">.</op:operator><name pos:line="79" pos:column="18">pszText</name></name> <op:operator pos:line="79" pos:column="26">=</op:operator> <call><name pos:line="79" pos:column="28">TEXT</name><argument_list pos:line="79" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="33">"Character"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">ListView_InsertColumn</name><argument_list pos:line="80" pos:column="30">(<argument><expr><name pos:line="80" pos:column="31">_hSelf</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="80" pos:column="39">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="80" pos:column="42">&amp;</op:operator><name pos:line="80" pos:column="43">lvColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="83" pos:column="1">void</name></type> <name><name pos:line="83" pos:column="6">ListView</name><op:operator pos:line="83" pos:column="14">::</op:operator><name pos:line="83" pos:column="16">resetValues</name></name><parameter_list pos:line="83" pos:column="27">(<param><decl><type><name pos:line="83" pos:column="28">int</name></type> <name pos:line="83" pos:column="32">codepage</name></decl></param>)</parameter_list>
<block pos:line="84" pos:column="1">{
	<if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">codepage</name> <op:operator pos:line="85" pos:column="22">==</op:operator> <op:operator pos:line="85" pos:column="25">-</op:operator><lit:literal type="number" pos:line="85" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="85" pos:column="28">
		<expr_stmt><expr><name pos:line="86" pos:column="17">codepage</name> <op:operator pos:line="86" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="86" pos:column="28">0</lit:literal></expr>;</expr_stmt></then></if>

	<if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name pos:line="88" pos:column="13">_codepage</name> <op:operator pos:line="88" pos:column="23">==</op:operator> <name pos:line="88" pos:column="26">codepage</name></expr>)</condition><then pos:line="88" pos:column="35">
		<return pos:line="89" pos:column="17">return;</return></then></if>

	<expr_stmt><expr><call><name pos:line="91" pos:column="9">ListView_DeleteAllItems</name><argument_list pos:line="91" pos:column="32">(<argument><expr><name pos:line="91" pos:column="33">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="92" pos:column="9">setValues</name><argument_list pos:line="92" pos:column="18">(<argument><expr><name pos:line="92" pos:column="19">codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="95" pos:column="1">generic_string</name></type> <name><name pos:line="95" pos:column="16">ListView</name><op:operator pos:line="95" pos:column="24">::</op:operator><name pos:line="95" pos:column="26">getAscii</name></name><parameter_list pos:line="95" pos:column="34">(<param><decl><type><name pos:line="95" pos:column="35">unsigned</name> <name pos:line="95" pos:column="44">char</name></type> <name pos:line="95" pos:column="49">value</name></decl></param>)</parameter_list>
<block pos:line="96" pos:column="1">{
	<switch pos:line="97" pos:column="9">switch <condition pos:line="97" pos:column="16">(<expr><name pos:line="97" pos:column="17">value</name></expr>)</condition>
	<block pos:line="98" pos:column="9">{
		<case pos:line="99" pos:column="17">case <expr><lit:literal type="number" pos:line="99" pos:column="22">0</lit:literal></expr>:
			<return pos:line="100" pos:column="25">return <expr><call><name pos:line="100" pos:column="32">TEXT</name><argument_list pos:line="100" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="37">"NULL"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="101" pos:column="17">case <expr><lit:literal type="number" pos:line="101" pos:column="22">1</lit:literal></expr>:
			<return pos:line="102" pos:column="25">return <expr><call><name pos:line="102" pos:column="32">TEXT</name><argument_list pos:line="102" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="37">"SOH"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="103" pos:column="17">case <expr><lit:literal type="number" pos:line="103" pos:column="22">2</lit:literal></expr>:
			<return pos:line="104" pos:column="25">return <expr><call><name pos:line="104" pos:column="32">TEXT</name><argument_list pos:line="104" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="37">"STX"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="105" pos:column="17">case <expr><lit:literal type="number" pos:line="105" pos:column="22">3</lit:literal></expr>:
			<return pos:line="106" pos:column="25">return <expr><call><name pos:line="106" pos:column="32">TEXT</name><argument_list pos:line="106" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="37">"ETX"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="107" pos:column="17">case <expr><lit:literal type="number" pos:line="107" pos:column="22">4</lit:literal></expr>:
			<return pos:line="108" pos:column="25">return <expr><call><name pos:line="108" pos:column="32">TEXT</name><argument_list pos:line="108" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="37">"EOT"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="109" pos:column="17">case <expr><lit:literal type="number" pos:line="109" pos:column="22">5</lit:literal></expr>:
			<return pos:line="110" pos:column="25">return <expr><call><name pos:line="110" pos:column="32">TEXT</name><argument_list pos:line="110" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="37">"ENQ"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="111" pos:column="17">case <expr><lit:literal type="number" pos:line="111" pos:column="22">6</lit:literal></expr>:
			<return pos:line="112" pos:column="25">return <expr><call><name pos:line="112" pos:column="32">TEXT</name><argument_list pos:line="112" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="37">"ACK"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="113" pos:column="17">case <expr><lit:literal type="number" pos:line="113" pos:column="22">7</lit:literal></expr>:
			<return pos:line="114" pos:column="25">return <expr><call><name pos:line="114" pos:column="32">TEXT</name><argument_list pos:line="114" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="37">"BEL"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="115" pos:column="17">case <expr><lit:literal type="number" pos:line="115" pos:column="22">8</lit:literal></expr>:
			<return pos:line="116" pos:column="25">return <expr><call><name pos:line="116" pos:column="32">TEXT</name><argument_list pos:line="116" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="37">"BS"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="117" pos:column="17">case <expr><lit:literal type="number" pos:line="117" pos:column="22">9</lit:literal></expr>:
			<return pos:line="118" pos:column="25">return <expr><call><name pos:line="118" pos:column="32">TEXT</name><argument_list pos:line="118" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="37">"TAB"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="119" pos:column="17">case <expr><lit:literal type="number" pos:line="119" pos:column="22">10</lit:literal></expr>:
			<return pos:line="120" pos:column="25">return <expr><call><name pos:line="120" pos:column="32">TEXT</name><argument_list pos:line="120" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="37">"LF"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="121" pos:column="17">case <expr><lit:literal type="number" pos:line="121" pos:column="22">11</lit:literal></expr>:
			<return pos:line="122" pos:column="25">return <expr><call><name pos:line="122" pos:column="32">TEXT</name><argument_list pos:line="122" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="37">"VT"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="123" pos:column="17">case <expr><lit:literal type="number" pos:line="123" pos:column="22">12</lit:literal></expr>:
			<return pos:line="124" pos:column="25">return <expr><call><name pos:line="124" pos:column="32">TEXT</name><argument_list pos:line="124" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="37">"FF"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="125" pos:column="17">case <expr><lit:literal type="number" pos:line="125" pos:column="22">13</lit:literal></expr>:
			<return pos:line="126" pos:column="25">return <expr><call><name pos:line="126" pos:column="32">TEXT</name><argument_list pos:line="126" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="37">"CR"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="127" pos:column="17">case <expr><lit:literal type="number" pos:line="127" pos:column="22">14</lit:literal></expr>:
			<return pos:line="128" pos:column="25">return <expr><call><name pos:line="128" pos:column="32">TEXT</name><argument_list pos:line="128" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="37">"SO"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="129" pos:column="17">case <expr><lit:literal type="number" pos:line="129" pos:column="22">15</lit:literal></expr>:
			<return pos:line="130" pos:column="25">return <expr><call><name pos:line="130" pos:column="32">TEXT</name><argument_list pos:line="130" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="37">"SI"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="131" pos:column="17">case <expr><lit:literal type="number" pos:line="131" pos:column="22">16</lit:literal></expr>:
			<return pos:line="132" pos:column="25">return <expr><call><name pos:line="132" pos:column="32">TEXT</name><argument_list pos:line="132" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="37">"DLE"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="133" pos:column="17">case <expr><lit:literal type="number" pos:line="133" pos:column="22">17</lit:literal></expr>:
			<return pos:line="134" pos:column="25">return <expr><call><name pos:line="134" pos:column="32">TEXT</name><argument_list pos:line="134" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="37">"DC1"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="135" pos:column="17">case <expr><lit:literal type="number" pos:line="135" pos:column="22">18</lit:literal></expr>:
			<return pos:line="136" pos:column="25">return <expr><call><name pos:line="136" pos:column="32">TEXT</name><argument_list pos:line="136" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="37">"DC2"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="137" pos:column="17">case <expr><lit:literal type="number" pos:line="137" pos:column="22">19</lit:literal></expr>:
			<return pos:line="138" pos:column="25">return <expr><call><name pos:line="138" pos:column="32">TEXT</name><argument_list pos:line="138" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="37">"DC3"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="139" pos:column="17">case <expr><lit:literal type="number" pos:line="139" pos:column="22">20</lit:literal></expr>:
			<return pos:line="140" pos:column="25">return <expr><call><name pos:line="140" pos:column="32">TEXT</name><argument_list pos:line="140" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="37">"DC4"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="141" pos:column="17">case <expr><lit:literal type="number" pos:line="141" pos:column="22">21</lit:literal></expr>:
			<return pos:line="142" pos:column="25">return <expr><call><name pos:line="142" pos:column="32">TEXT</name><argument_list pos:line="142" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="37">"NAK"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="143" pos:column="17">case <expr><lit:literal type="number" pos:line="143" pos:column="22">22</lit:literal></expr>:
			<return pos:line="144" pos:column="25">return <expr><call><name pos:line="144" pos:column="32">TEXT</name><argument_list pos:line="144" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="37">"SYN"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="145" pos:column="17">case <expr><lit:literal type="number" pos:line="145" pos:column="22">23</lit:literal></expr>:
			<return pos:line="146" pos:column="25">return <expr><call><name pos:line="146" pos:column="32">TEXT</name><argument_list pos:line="146" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="37">"ETB"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="147" pos:column="17">case <expr><lit:literal type="number" pos:line="147" pos:column="22">24</lit:literal></expr>:
			<return pos:line="148" pos:column="25">return <expr><call><name pos:line="148" pos:column="32">TEXT</name><argument_list pos:line="148" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="37">"CAN"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="149" pos:column="17">case <expr><lit:literal type="number" pos:line="149" pos:column="22">25</lit:literal></expr>:
			<return pos:line="150" pos:column="25">return <expr><call><name pos:line="150" pos:column="32">TEXT</name><argument_list pos:line="150" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="37">"EM"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="151" pos:column="17">case <expr><lit:literal type="number" pos:line="151" pos:column="22">26</lit:literal></expr>:
			<return pos:line="152" pos:column="25">return <expr><call><name pos:line="152" pos:column="32">TEXT</name><argument_list pos:line="152" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="37">"SUB"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="153" pos:column="17">case <expr><lit:literal type="number" pos:line="153" pos:column="22">27</lit:literal></expr>:
			<return pos:line="154" pos:column="25">return <expr><call><name pos:line="154" pos:column="32">TEXT</name><argument_list pos:line="154" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="37">"ESC"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="155" pos:column="17">case <expr><lit:literal type="number" pos:line="155" pos:column="22">28</lit:literal></expr>:
			<return pos:line="156" pos:column="25">return <expr><call><name pos:line="156" pos:column="32">TEXT</name><argument_list pos:line="156" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="37">"FS"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="157" pos:column="17">case <expr><lit:literal type="number" pos:line="157" pos:column="22">29</lit:literal></expr>:
			<return pos:line="158" pos:column="25">return <expr><call><name pos:line="158" pos:column="32">TEXT</name><argument_list pos:line="158" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="37">"GS"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="159" pos:column="17">case <expr><lit:literal type="number" pos:line="159" pos:column="22">30</lit:literal></expr>:
			<return pos:line="160" pos:column="25">return <expr><call><name pos:line="160" pos:column="32">TEXT</name><argument_list pos:line="160" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="37">"RS"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="161" pos:column="17">case <expr><lit:literal type="number" pos:line="161" pos:column="22">31</lit:literal></expr>:
			<return pos:line="162" pos:column="25">return <expr><call><name pos:line="162" pos:column="32">TEXT</name><argument_list pos:line="162" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="37">"US"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="163" pos:column="17">case <expr><lit:literal type="number" pos:line="163" pos:column="22">32</lit:literal></expr>:
			<return pos:line="164" pos:column="25">return <expr><call><name pos:line="164" pos:column="32">TEXT</name><argument_list pos:line="164" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="37">"Space"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><case pos:line="165" pos:column="17">case <expr><lit:literal type="number" pos:line="165" pos:column="22">127</lit:literal></expr>:
			<return pos:line="166" pos:column="25">return <expr><call><name pos:line="166" pos:column="32">TEXT</name><argument_list pos:line="166" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="37">"DEL"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		</case><default pos:line="167" pos:column="17">default:
		<block pos:line="168" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="169" pos:column="25">TCHAR</name></type> <name><name pos:line="169" pos:column="31">charStr</name><index pos:line="169" pos:column="38">[<expr><lit:literal type="number" pos:line="169" pos:column="39">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifdef pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">ifdef</cpp:directive> <name pos:line="170" pos:column="8">UNICODE</name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="171" pos:column="25">char</name></type> <name><name pos:line="171" pos:column="30">ascii</name><index pos:line="171" pos:column="35">[<expr><lit:literal type="number" pos:line="171" pos:column="36">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="172" pos:column="25">ascii</name><index pos:line="172" pos:column="30">[<expr><lit:literal type="number" pos:line="172" pos:column="31">0</lit:literal></expr>]</index></name> <op:operator pos:line="172" pos:column="34">=</op:operator> <name pos:line="172" pos:column="36">value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="173" pos:column="25">ascii</name><index pos:line="173" pos:column="30">[<expr><lit:literal type="number" pos:line="173" pos:column="31">1</lit:literal></expr>]</index></name> <op:operator pos:line="173" pos:column="34">=</op:operator> <lit:literal type="char" pos:line="173" pos:column="36">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="174" pos:column="25">MultiByteToWideChar</name><argument_list pos:line="174" pos:column="44">(<argument><expr><name pos:line="174" pos:column="45">_codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="174" pos:column="56">0</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="59">ascii</name></expr></argument>, <argument><expr><op:operator pos:line="174" pos:column="66">-</op:operator><lit:literal type="number" pos:line="174" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="70">charStr</name></expr></argument>, <argument><expr><sizeof pos:line="174" pos:column="79">sizeof<argument_list pos:line="174" pos:column="85">(<argument><expr><name pos:line="174" pos:column="86">charStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">else</cpp:directive></cpp:else>
			<expr_stmt><expr><name><name pos:line="176" pos:column="25">charStr</name><index pos:line="176" pos:column="32">[<expr><lit:literal type="number" pos:line="176" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="176" pos:column="36">=</op:operator> <op:operator pos:line="176" pos:column="38">(</op:operator><name pos:line="176" pos:column="39">unsigned</name> <name pos:line="176" pos:column="48">char</name><op:operator pos:line="176" pos:column="52">)</op:operator><name pos:line="176" pos:column="53">value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="177" pos:column="25">charStr</name><index pos:line="177" pos:column="32">[<expr><lit:literal type="number" pos:line="177" pos:column="33">1</lit:literal></expr>]</index></name> <op:operator pos:line="177" pos:column="36">=</op:operator> <lit:literal type="char" pos:line="177" pos:column="38">'\0'</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="178" pos:column="1">#<cpp:directive pos:line="178" pos:column="2">endif</cpp:directive></cpp:endif>
			<return pos:line="179" pos:column="25">return <expr><name pos:line="179" pos:column="32">charStr</name></expr>;</return>
		}</block>

	</default>}</block></switch>
	<comment type="line" pos:line="183" pos:column="9">//return TEXT("");</comment>
}</block></function>

<function><type><name pos:line="186" pos:column="1">void</name></type> <name><name pos:line="186" pos:column="6">ListView</name><op:operator pos:line="186" pos:column="14">::</op:operator><name pos:line="186" pos:column="16">setValues</name></name><parameter_list pos:line="186" pos:column="25">(<param><decl><type><name pos:line="186" pos:column="26">int</name></type> <name pos:line="186" pos:column="30">codepage</name></decl></param>)</parameter_list>
<block pos:line="187" pos:column="1">{
	<expr_stmt><expr><name pos:line="188" pos:column="9">_codepage</name> <op:operator pos:line="188" pos:column="19">=</op:operator> <name pos:line="188" pos:column="21">codepage</name></expr>;</expr_stmt>
	
	<for pos:line="190" pos:column="9">for (<init><decl><type><name pos:line="190" pos:column="14">int</name></type> <name pos:line="190" pos:column="18">i</name> <init pos:line="190" pos:column="20">= <expr><lit:literal type="number" pos:line="190" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="190" pos:column="26">i</name> <op:operator pos:line="190" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="190" pos:column="30">256</lit:literal></expr> ;</condition> <incr><expr><name pos:line="190" pos:column="36">i</name><op:operator pos:line="190" pos:column="37">++</op:operator></expr></incr>)
	<block pos:line="191" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="192" pos:column="17">LVITEM</name></type> <name pos:line="192" pos:column="24">item</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="193" pos:column="17">item</name><op:operator pos:line="193" pos:column="21">.</op:operator><name pos:line="193" pos:column="22">mask</name></name> <op:operator pos:line="193" pos:column="27">=</op:operator> <name pos:line="193" pos:column="29">LVIF_TEXT</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="194" pos:column="17">TCHAR</name></type> <name><name pos:line="194" pos:column="23">num</name><index pos:line="194" pos:column="26">[<expr><lit:literal type="number" pos:line="194" pos:column="27">8</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="195" pos:column="17">generic_sprintf</name><argument_list pos:line="195" pos:column="32">(<argument><expr><name pos:line="195" pos:column="33">num</name></expr></argument>, <argument><expr><call><name pos:line="195" pos:column="38">TEXT</name><argument_list pos:line="195" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="43">"%d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="195" pos:column="50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name pos:line="196" pos:column="17">item</name><op:operator pos:line="196" pos:column="21">.</op:operator><name pos:line="196" pos:column="22">pszText</name></name> <op:operator pos:line="196" pos:column="30">=</op:operator> <name pos:line="196" pos:column="32">num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="197" pos:column="17">item</name><op:operator pos:line="197" pos:column="21">.</op:operator><name pos:line="197" pos:column="22">iItem</name></name> <op:operator pos:line="197" pos:column="28">=</op:operator> <name pos:line="197" pos:column="30">i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="198" pos:column="17">item</name><op:operator pos:line="198" pos:column="21">.</op:operator><name pos:line="198" pos:column="22">iSubItem</name></name> <op:operator pos:line="198" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="198" pos:column="33">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="199" pos:column="17">ListView_InsertItem</name><argument_list pos:line="199" pos:column="36">(<argument><expr><name pos:line="199" pos:column="37">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="199" pos:column="45">&amp;</op:operator><name pos:line="199" pos:column="46">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="201" pos:column="17">generic_string</name></type> <name pos:line="201" pos:column="32">s</name> <init pos:line="201" pos:column="34">= <expr><call><name pos:line="201" pos:column="36">getAscii</name><argument_list pos:line="201" pos:column="44">(<argument><expr><op:operator pos:line="201" pos:column="45">(</op:operator><name pos:line="201" pos:column="46">unsigned</name> <name pos:line="201" pos:column="55">char</name><op:operator pos:line="201" pos:column="59">)</op:operator><name pos:line="201" pos:column="60">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="202" pos:column="17">ListView_SetItemText</name><argument_list pos:line="202" pos:column="37">(<argument><expr><name pos:line="202" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="202" pos:column="46">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="202" pos:column="49">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="202" pos:column="52">(</op:operator><name pos:line="202" pos:column="53">LPTSTR</name><op:operator pos:line="202" pos:column="59">)</op:operator><call><name><name pos:line="202" pos:column="60">s</name><op:operator pos:line="202" pos:column="61">.</op:operator><name pos:line="202" pos:column="62">c_str</name></name><argument_list pos:line="202" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>


<function><type><name pos:line="207" pos:column="1">void</name></type> <name><name pos:line="207" pos:column="6">ListView</name><op:operator pos:line="207" pos:column="14">::</op:operator><name pos:line="207" pos:column="16">destroy</name></name><parameter_list pos:line="207" pos:column="23">()</parameter_list>
<block pos:line="208" pos:column="1">{
	<expr_stmt><expr><call><name><op:operator pos:line="209" pos:column="9">::</op:operator><name pos:line="209" pos:column="11">DestroyWindow</name></name><argument_list pos:line="209" pos:column="24">(<argument><expr><name pos:line="209" pos:column="25">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="210" pos:column="9">_hSelf</name> <op:operator pos:line="210" pos:column="16">=</op:operator> <name pos:line="210" pos:column="18">NULL</name></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="214" pos:column="1">LRESULT</name></type> <name><name pos:line="214" pos:column="9">ListView</name><op:operator pos:line="214" pos:column="17">::</op:operator><name pos:line="214" pos:column="19">runProc</name></name><parameter_list pos:line="214" pos:column="26">(<param><decl><type><name pos:line="214" pos:column="27">HWND</name></type> <name pos:line="214" pos:column="32">hwnd</name></decl></param>, <param><decl><type><name pos:line="214" pos:column="38">UINT</name></type> <name pos:line="214" pos:column="43">Message</name></decl></param>, <param><decl><type><name pos:line="214" pos:column="52">WPARAM</name></type> <name pos:line="214" pos:column="59">wParam</name></decl></param>, <param><decl><type><name pos:line="214" pos:column="67">LPARAM</name></type> <name pos:line="214" pos:column="74">lParam</name></decl></param>)</parameter_list>
<block pos:line="215" pos:column="1">{
	<return pos:line="216" pos:column="9">return <expr><call><name><op:operator pos:line="216" pos:column="16">::</op:operator><name pos:line="216" pos:column="18">CallWindowProc</name></name><argument_list pos:line="216" pos:column="32">(<argument><expr><name pos:line="216" pos:column="33">_defaultProc</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="47">hwnd</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="53">Message</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="62">wParam</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="70">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

</unit>
