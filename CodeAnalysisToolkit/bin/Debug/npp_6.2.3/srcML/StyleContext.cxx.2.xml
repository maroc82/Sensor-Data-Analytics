<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\StyleContext.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file StyleContext.cxx
 ** Lexer infrastructure.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2004 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// This file is in the public domain.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef</cpp:directive> <name pos:line="20" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="21" pos:column="1">using namespace <name pos:line="21" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="24" pos:column="1">static</specifier> <name pos:line="24" pos:column="8">void</name></type> <name pos:line="24" pos:column="13">getRange</name><parameter_list pos:line="24" pos:column="21">(<param><decl><type><name pos:line="24" pos:column="22">unsigned</name> <name pos:line="24" pos:column="31">int</name></type> <name pos:line="24" pos:column="35">start</name></decl></param>,
		<param><decl><type><name pos:line="25" pos:column="17">unsigned</name> <name pos:line="25" pos:column="26">int</name></type> <name pos:line="25" pos:column="30">end</name></decl></param>,
		<param><decl><type><name pos:line="26" pos:column="17">LexAccessor</name> <type:modifier pos:line="26" pos:column="29">&amp;</type:modifier></type><name pos:line="26" pos:column="30">styler</name></decl></param>,
		<param><decl><type><name pos:line="27" pos:column="17">char</name> <type:modifier pos:line="27" pos:column="22">*</type:modifier></type><name pos:line="27" pos:column="23">s</name></decl></param>,
		<param><decl><type><name pos:line="28" pos:column="17">unsigned</name> <name pos:line="28" pos:column="26">int</name></type> <name pos:line="28" pos:column="30">len</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">unsigned</name> <name pos:line="29" pos:column="18">int</name></type> <name pos:line="29" pos:column="22">i</name> <init pos:line="29" pos:column="24">= <expr><lit:literal type="number" pos:line="29" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="30" pos:column="9">while <condition pos:line="30" pos:column="15">(<expr><op:operator pos:line="30" pos:column="16">(</op:operator><name pos:line="30" pos:column="17">i</name> <op:operator pos:line="30" pos:column="19">&lt;</op:operator> <name pos:line="30" pos:column="21">end</name> <op:operator pos:line="30" pos:column="25">-</op:operator> <name pos:line="30" pos:column="27">start</name> <op:operator pos:line="30" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="30" pos:column="35">1</lit:literal><op:operator pos:line="30" pos:column="36">)</op:operator> <op:operator pos:line="30" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="30" pos:column="41">(</op:operator><name pos:line="30" pos:column="42">i</name> <op:operator pos:line="30" pos:column="44">&lt;</op:operator> <name pos:line="30" pos:column="46">len</name><op:operator pos:line="30" pos:column="49">-</op:operator><lit:literal type="number" pos:line="30" pos:column="50">1</lit:literal><op:operator pos:line="30" pos:column="51">)</op:operator></expr>)</condition> <block pos:line="30" pos:column="54">{
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">s</name><index pos:line="31" pos:column="18">[<expr><name pos:line="31" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="31" pos:column="22">=</op:operator> <name><name pos:line="31" pos:column="24">styler</name><index pos:line="31" pos:column="30">[<expr><name pos:line="31" pos:column="31">start</name> <op:operator pos:line="31" pos:column="37">+</op:operator> <name pos:line="31" pos:column="39">i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">i</name><op:operator pos:line="32" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="34" pos:column="9">s</name><index pos:line="34" pos:column="10">[<expr><name pos:line="34" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="34" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="34" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="37" pos:column="1">void</name></type> <name><name pos:line="37" pos:column="6">StyleContext</name><op:operator pos:line="37" pos:column="18">::</op:operator><name pos:line="37" pos:column="20">GetCurrent</name></name><parameter_list pos:line="37" pos:column="30">(<param><decl><type><name pos:line="37" pos:column="31">char</name> <type:modifier pos:line="37" pos:column="36">*</type:modifier></type><name pos:line="37" pos:column="37">s</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="40">unsigned</name> <name pos:line="37" pos:column="49">int</name></type> <name pos:line="37" pos:column="53">len</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="58">{
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">getRange</name><argument_list pos:line="38" pos:column="17">(<argument><expr><call><name><name pos:line="38" pos:column="18">styler</name><op:operator pos:line="38" pos:column="24">.</op:operator><name pos:line="38" pos:column="25">GetStartSegment</name></name><argument_list pos:line="38" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="38" pos:column="44">currentPos</name> <op:operator pos:line="38" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="38" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="60">styler</name></expr></argument>, <argument><expr><name pos:line="38" pos:column="68">s</name></expr></argument>, <argument><expr><name pos:line="38" pos:column="71">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <name pos:line="41" pos:column="8">void</name></type> <name pos:line="41" pos:column="13">getRangeLowered</name><parameter_list pos:line="41" pos:column="28">(<param><decl><type><name pos:line="41" pos:column="29">unsigned</name> <name pos:line="41" pos:column="38">int</name></type> <name pos:line="41" pos:column="42">start</name></decl></param>,
		<param><decl><type><name pos:line="42" pos:column="17">unsigned</name> <name pos:line="42" pos:column="26">int</name></type> <name pos:line="42" pos:column="30">end</name></decl></param>,
		<param><decl><type><name pos:line="43" pos:column="17">LexAccessor</name> <type:modifier pos:line="43" pos:column="29">&amp;</type:modifier></type><name pos:line="43" pos:column="30">styler</name></decl></param>,
		<param><decl><type><name pos:line="44" pos:column="17">char</name> <type:modifier pos:line="44" pos:column="22">*</type:modifier></type><name pos:line="44" pos:column="23">s</name></decl></param>,
		<param><decl><type><name pos:line="45" pos:column="17">unsigned</name> <name pos:line="45" pos:column="26">int</name></type> <name pos:line="45" pos:column="30">len</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">unsigned</name> <name pos:line="46" pos:column="18">int</name></type> <name pos:line="46" pos:column="22">i</name> <init pos:line="46" pos:column="24">= <expr><lit:literal type="number" pos:line="46" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="47" pos:column="9">while <condition pos:line="47" pos:column="15">(<expr><op:operator pos:line="47" pos:column="16">(</op:operator><name pos:line="47" pos:column="17">i</name> <op:operator pos:line="47" pos:column="19">&lt;</op:operator> <name pos:line="47" pos:column="21">end</name> <op:operator pos:line="47" pos:column="25">-</op:operator> <name pos:line="47" pos:column="27">start</name> <op:operator pos:line="47" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="47" pos:column="35">1</lit:literal><op:operator pos:line="47" pos:column="36">)</op:operator> <op:operator pos:line="47" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="47" pos:column="41">(</op:operator><name pos:line="47" pos:column="42">i</name> <op:operator pos:line="47" pos:column="44">&lt;</op:operator> <name pos:line="47" pos:column="46">len</name><op:operator pos:line="47" pos:column="49">-</op:operator><lit:literal type="number" pos:line="47" pos:column="50">1</lit:literal><op:operator pos:line="47" pos:column="51">)</op:operator></expr>)</condition> <block pos:line="47" pos:column="54">{
		<expr_stmt><expr><name><name pos:line="48" pos:column="17">s</name><index pos:line="48" pos:column="18">[<expr><name pos:line="48" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="48" pos:column="22">=</op:operator> <call><name><name pos:line="48" pos:column="24">static_cast</name><argument_list pos:line="48" pos:column="35">&lt;<argument><expr><name pos:line="48" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="41">(<argument><expr><call><name pos:line="48" pos:column="42">tolower</name><argument_list pos:line="48" pos:column="49">(<argument><expr><name><name pos:line="48" pos:column="50">styler</name><index pos:line="48" pos:column="56">[<expr><name pos:line="48" pos:column="57">start</name> <op:operator pos:line="48" pos:column="63">+</op:operator> <name pos:line="48" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">i</name><op:operator pos:line="49" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="51" pos:column="9">s</name><index pos:line="51" pos:column="10">[<expr><name pos:line="51" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="51" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="51" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="54" pos:column="1">void</name></type> <name><name pos:line="54" pos:column="6">StyleContext</name><op:operator pos:line="54" pos:column="18">::</op:operator><name pos:line="54" pos:column="20">GetCurrentLowered</name></name><parameter_list pos:line="54" pos:column="37">(<param><decl><type><name pos:line="54" pos:column="38">char</name> <type:modifier pos:line="54" pos:column="43">*</type:modifier></type><name pos:line="54" pos:column="44">s</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="47">unsigned</name> <name pos:line="54" pos:column="56">int</name></type> <name pos:line="54" pos:column="60">len</name></decl></param>)</parameter_list> <block pos:line="54" pos:column="65">{
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">getRangeLowered</name><argument_list pos:line="55" pos:column="24">(<argument><expr><call><name><name pos:line="55" pos:column="25">styler</name><op:operator pos:line="55" pos:column="31">.</op:operator><name pos:line="55" pos:column="32">GetStartSegment</name></name><argument_list pos:line="55" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="55" pos:column="51">currentPos</name> <op:operator pos:line="55" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="55" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="67">styler</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="75">s</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="78">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
