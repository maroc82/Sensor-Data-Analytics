<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\crc16\Crc16.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">_CRC16_H_</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">_CRC16_H_</name></cpp:macro></cpp:define>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file pos:line="31" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<class pos:line="33" pos:column="1">class <name pos:line="33" pos:column="7">CRC16_ISO_3309</name>
<block pos:line="34" pos:column="1">{<private type="default" pos:line="34" pos:column="2">
</private><public pos:line="35" pos:column="1">public :
    <constructor><name pos:line="36" pos:column="5">CRC16_ISO_3309</name><parameter_list pos:line="36" pos:column="19">(<param><decl><type><name pos:line="36" pos:column="20">unsigned</name> <name pos:line="36" pos:column="29">short</name></type> <name pos:line="36" pos:column="35">polynom</name> <init pos:line="36" pos:column="43">= <expr><lit:literal type="number" pos:line="36" pos:column="45">0x1021</lit:literal></expr></init></decl></param>, <name pos:line="36" pos:column="53">unsigned</name> <name pos:line="36" pos:column="62">short</name> <name pos:line="36" pos:column="68">initVal</name> <op:operator pos:line="36" pos:column="76">=</op:operator> <lit:literal type="number" pos:line="36" pos:column="78">0xFFFF</lit:literal>)</parameter_list>
        <member_list pos:line="37" pos:column="9">:<call><name pos:line="37" pos:column="10">_polynom</name><argument_list pos:line="37" pos:column="18">(<argument><expr><name pos:line="37" pos:column="19">polynom</name></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="27">,</op:operator> <call><name pos:line="37" pos:column="29">_initVal</name><argument_list pos:line="37" pos:column="37">(<argument><expr><name pos:line="37" pos:column="38">initVal</name></expr></argument>)</argument_list></call> </member_list><block pos:line="37" pos:column="47">{}</block></constructor><empty_stmt pos:line="37" pos:column="49">;</empty_stmt>
    <destructor><name pos:line="38" pos:column="5">~<name pos:line="38" pos:column="6">CRC16_ISO_3309</name></name><parameter_list pos:line="38" pos:column="20">()</parameter_list><block pos:line="38" pos:column="22">{}</block></destructor><empty_stmt pos:line="38" pos:column="24">;</empty_stmt>

    <function><type><name pos:line="40" pos:column="5">void</name></type> <name pos:line="40" pos:column="10">set</name><parameter_list pos:line="40" pos:column="13">(<param><decl><type><name pos:line="40" pos:column="14">unsigned</name> <name pos:line="40" pos:column="23">short</name></type> <name pos:line="40" pos:column="29">polynom</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="38">unsigned</name> <name pos:line="40" pos:column="47">short</name></type> <name pos:line="40" pos:column="53">initVal</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="62">{
        <expr_stmt><expr><name pos:line="41" pos:column="9">_polynom</name> <op:operator pos:line="41" pos:column="18">=</op:operator> <name pos:line="41" pos:column="20">polynom</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="42" pos:column="9">_initVal</name> <op:operator pos:line="42" pos:column="18">=</op:operator> <name pos:line="42" pos:column="20">initVal</name></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="43" pos:column="6">;</empty_stmt>

    <function><type><name pos:line="45" pos:column="5">unsigned</name> <name pos:line="45" pos:column="14">short</name></type> <name pos:line="45" pos:column="20">calculate</name><parameter_list pos:line="45" pos:column="29">(<param><decl><type><name pos:line="45" pos:column="30">unsigned</name> <name pos:line="45" pos:column="39">char</name> <type:modifier pos:line="45" pos:column="44">*</type:modifier></type><name pos:line="45" pos:column="45">data</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="51">unsigned</name> <name pos:line="45" pos:column="60">short</name></type> <name pos:line="45" pos:column="66">count</name></decl></param>)</parameter_list>
    <block pos:line="46" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="47" pos:column="9">unsigned</name> <name pos:line="47" pos:column="18">short</name></type> <name pos:line="47" pos:column="24">fcs</name> <init pos:line="47" pos:column="28">= <expr><name pos:line="47" pos:column="30">_initVal</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="48" pos:column="9">unsigned</name> <name pos:line="48" pos:column="18">short</name></type> <name pos:line="48" pos:column="24">d</name></decl><op:operator pos:line="48" pos:column="25">,</op:operator> <decl><type ref="prev"/><name pos:line="48" pos:column="27">i</name></decl><op:operator pos:line="48" pos:column="28">,</op:operator> <decl><type ref="prev"/><name pos:line="48" pos:column="30">k</name></decl>;</decl_stmt>
        <for pos:line="49" pos:column="9">for (<init><expr><name pos:line="49" pos:column="14">i</name><op:operator pos:line="49" pos:column="15">=</op:operator><lit:literal type="number" pos:line="49" pos:column="16">0</lit:literal></expr>;</init> <condition><expr><name pos:line="49" pos:column="19">i</name><op:operator pos:line="49" pos:column="20">&lt;</op:operator><name pos:line="49" pos:column="21">count</name></expr>;</condition> <incr><expr><name pos:line="49" pos:column="28">i</name><op:operator pos:line="49" pos:column="29">++</op:operator></expr></incr>)
        <block pos:line="50" pos:column="9">{
            <expr_stmt><expr><name pos:line="51" pos:column="13">d</name> <op:operator pos:line="51" pos:column="15">=</op:operator> <op:operator pos:line="51" pos:column="17">*</op:operator><name pos:line="51" pos:column="18">data</name><op:operator pos:line="51" pos:column="22">++</op:operator> <op:operator pos:line="51" pos:column="25">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="51" pos:column="28">8</lit:literal></expr>;</expr_stmt>
            <for pos:line="52" pos:column="13">for (<init><expr><name pos:line="52" pos:column="18">k</name><op:operator pos:line="52" pos:column="19">=</op:operator><lit:literal type="number" pos:line="52" pos:column="20">0</lit:literal></expr>;</init> <condition><expr><name pos:line="52" pos:column="23">k</name><op:operator pos:line="52" pos:column="24">&lt;</op:operator><lit:literal type="number" pos:line="52" pos:column="25">8</lit:literal></expr>;</condition> <incr><expr><name pos:line="52" pos:column="28">k</name><op:operator pos:line="52" pos:column="29">++</op:operator></expr></incr>)
            <block pos:line="53" pos:column="13">{
                <if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><op:operator pos:line="54" pos:column="21">(</op:operator><name pos:line="54" pos:column="22">fcs</name> <op:operator pos:line="54" pos:column="26">^</op:operator> <name pos:line="54" pos:column="28">d</name><op:operator pos:line="54" pos:column="29">)</op:operator> <op:operator pos:line="54" pos:column="31">&amp;</op:operator> <lit:literal type="number" pos:line="54" pos:column="33">0x8000</lit:literal></expr>)</condition><then pos:line="54" pos:column="40">
                    <expr_stmt><expr><name pos:line="55" pos:column="21">fcs</name> <op:operator pos:line="55" pos:column="25">=</op:operator> <op:operator pos:line="55" pos:column="27">(</op:operator><name pos:line="55" pos:column="28">fcs</name> <op:operator pos:line="55" pos:column="32">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="55" pos:column="35">1</lit:literal><op:operator pos:line="55" pos:column="36">)</op:operator> <op:operator pos:line="55" pos:column="38">^</op:operator> <name pos:line="55" pos:column="40">_polynom</name></expr>;</expr_stmt></then>
                <else pos:line="56" pos:column="17">else
                    <expr_stmt><expr><name pos:line="57" pos:column="21">fcs</name> <op:operator pos:line="57" pos:column="25">=</op:operator> <op:operator pos:line="57" pos:column="27">(</op:operator><name pos:line="57" pos:column="28">fcs</name> <op:operator pos:line="57" pos:column="32">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="57" pos:column="35">1</lit:literal><op:operator pos:line="57" pos:column="36">)</op:operator></expr>;</expr_stmt></else></if>
                <expr_stmt><expr><name pos:line="58" pos:column="17">d</name> <op:operator pos:line="58" pos:column="19">&lt;&lt;=</op:operator> <lit:literal type="number" pos:line="58" pos:column="23">1</lit:literal></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <return pos:line="61" pos:column="9">return<expr><op:operator pos:line="61" pos:column="15">(</op:operator><name pos:line="61" pos:column="16">fcs</name><op:operator pos:line="61" pos:column="19">)</op:operator></expr>;</return>
    }</block></function>

</public><private pos:line="64" pos:column="1">private :
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">unsigned</name> <name pos:line="65" pos:column="14">short</name></type> <name pos:line="65" pos:column="20">_polynom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">unsigned</name> <name pos:line="66" pos:column="14">short</name></type> <name pos:line="66" pos:column="20">_initVal</name></decl>;</decl_stmt>

</private>}</block>;</class>

<decl_stmt><decl><type><specifier pos:line="70" pos:column="1">const</specifier> <name pos:line="70" pos:column="7">bool</name></type> <name pos:line="70" pos:column="12">bits8</name> <init pos:line="70" pos:column="18">= <expr><lit:literal type="boolean" pos:line="70" pos:column="20">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="71" pos:column="1">const</specifier> <name pos:line="71" pos:column="7">bool</name></type> <name pos:line="71" pos:column="12">bits16</name> <init pos:line="71" pos:column="19">= <expr><lit:literal type="boolean" pos:line="71" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt>

<class pos:line="73" pos:column="1">class <name pos:line="73" pos:column="7">CRC16</name> <super pos:line="73" pos:column="13">: <specifier pos:line="73" pos:column="15">public</specifier> <name pos:line="73" pos:column="22">CRC16_ISO_3309</name></super>
<block pos:line="74" pos:column="1">{<private type="default" pos:line="74" pos:column="2">
</private><public pos:line="75" pos:column="1">public:
    <constructor><name pos:line="76" pos:column="5">CRC16</name><parameter_list pos:line="76" pos:column="10">()</parameter_list><block pos:line="76" pos:column="12">{}</block></constructor><empty_stmt pos:line="76" pos:column="14">;</empty_stmt>
    <destructor><name pos:line="77" pos:column="5">~<name pos:line="77" pos:column="6">CRC16</name></name><parameter_list pos:line="77" pos:column="11">()</parameter_list><block pos:line="77" pos:column="13">{}</block></destructor><empty_stmt pos:line="77" pos:column="15">;</empty_stmt>
    <function><type><name pos:line="78" pos:column="5">unsigned</name> <name pos:line="78" pos:column="14">short</name></type> <name pos:line="78" pos:column="20">calculate</name><parameter_list pos:line="78" pos:column="29">(<param><decl><type><specifier pos:line="78" pos:column="30">const</specifier> <name pos:line="78" pos:column="36">unsigned</name> <name pos:line="78" pos:column="45">char</name> <type:modifier pos:line="78" pos:column="50">*</type:modifier></type><name pos:line="78" pos:column="51">data</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="57">unsigned</name> <name pos:line="78" pos:column="66">short</name></type> <name pos:line="78" pos:column="72">count</name></decl></param>)</parameter_list>
    <block pos:line="79" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">assert</name><argument_list pos:line="80" pos:column="15">(<argument><expr><name pos:line="80" pos:column="16">data</name> <op:operator pos:line="80" pos:column="21">!=</op:operator> <name pos:line="80" pos:column="24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="81" pos:column="9">assert</name><argument_list pos:line="81" pos:column="15">(<argument><expr><name pos:line="81" pos:column="16">count</name> <op:operator pos:line="81" pos:column="22">!=</op:operator> <lit:literal type="number" pos:line="81" pos:column="25">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="83" pos:column="9">//unsigned short wordResult;</comment>
        <decl_stmt><decl><type><name pos:line="84" pos:column="9">unsigned</name> <name pos:line="84" pos:column="18">char</name> <type:modifier pos:line="84" pos:column="23">*</type:modifier></type><name pos:line="84" pos:column="24">pBuffer</name> <init pos:line="84" pos:column="32">= <expr><op:operator pos:line="84" pos:column="34">new</op:operator> <name pos:line="84" pos:column="38">unsigned</name> <name><name pos:line="84" pos:column="47">char</name><index pos:line="84" pos:column="51">[<expr><name pos:line="84" pos:column="52">count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="86" pos:column="9">// Reverse all bits of the byte then copy the result byte by byte in the array</comment>
        <for pos:line="87" pos:column="9">for (<init><decl><type><name pos:line="87" pos:column="14">int</name></type> <name pos:line="87" pos:column="18">i</name> <init pos:line="87" pos:column="20">= <expr><lit:literal type="number" pos:line="87" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="87" pos:column="26">i</name> <op:operator pos:line="87" pos:column="28">&lt;</op:operator> <name pos:line="87" pos:column="30">count</name></expr> ;</condition> <incr><expr><name pos:line="87" pos:column="38">i</name><op:operator pos:line="87" pos:column="39">++</op:operator></expr></incr>)
            <expr_stmt><expr><name><name pos:line="88" pos:column="13">pBuffer</name><index pos:line="88" pos:column="20">[<expr><name pos:line="88" pos:column="21">i</name></expr>]</index></name> <op:operator pos:line="88" pos:column="24">=</op:operator> <call><name><name pos:line="88" pos:column="26">reverseByte</name><argument_list pos:line="88" pos:column="37">&lt;<argument><expr><name pos:line="88" pos:column="38">unsigned</name> <name pos:line="88" pos:column="47">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="88" pos:column="52">(<argument><expr><name><name pos:line="88" pos:column="53">data</name><index pos:line="88" pos:column="57">[<expr><name pos:line="88" pos:column="58">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <comment type="line" pos:line="90" pos:column="9">// calculate CRC : by default polynom = 0x1021, init val = 0xFFFF)</comment>
        <decl_stmt><decl><type><name pos:line="91" pos:column="9">unsigned</name> <name pos:line="91" pos:column="18">short</name></type> <name pos:line="91" pos:column="24">wordResult</name> <init pos:line="91" pos:column="35">= <expr><call><name><name pos:line="91" pos:column="37">CRC16_ISO_3309</name><op:operator pos:line="91" pos:column="51">::</op:operator><name pos:line="91" pos:column="53">calculate</name></name><argument_list pos:line="91" pos:column="62">(<argument><expr><name pos:line="91" pos:column="63">pBuffer</name></expr></argument>, <argument><expr><name pos:line="91" pos:column="72">count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="93" pos:column="9">// Reverse the WORD bits</comment>
        <expr_stmt><expr><name pos:line="94" pos:column="9">wordResult</name> <op:operator pos:line="94" pos:column="20">=</op:operator> <call><name><name pos:line="94" pos:column="22">reverseByte</name><argument_list pos:line="94" pos:column="33">&lt;<argument><expr><name pos:line="94" pos:column="34">unsigned</name> <name pos:line="94" pos:column="43">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="94" pos:column="49">(<argument><expr><name pos:line="94" pos:column="50">wordResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="96" pos:column="9">// XOR FFFF</comment>
        <expr_stmt><expr><name pos:line="97" pos:column="9">wordResult</name> <op:operator pos:line="97" pos:column="20">^=</op:operator> <lit:literal type="number" pos:line="97" pos:column="23">0xFFFF</lit:literal></expr>;</expr_stmt>

        <comment type="line" pos:line="99" pos:column="9">// Invert MSB/LSB</comment>
        <expr_stmt><expr><name pos:line="100" pos:column="9">wordResult</name> <op:operator pos:line="100" pos:column="20">=</op:operator> <name pos:line="100" pos:column="22">wordResult</name> <op:operator pos:line="100" pos:column="33">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="100" pos:column="36">8</lit:literal> <op:operator pos:line="100" pos:column="38">|</op:operator> <name pos:line="100" pos:column="40">wordResult</name> <op:operator pos:line="100" pos:column="51">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="100" pos:column="54">8</lit:literal></expr> ;</expr_stmt>

        <expr_stmt><expr><op:operator pos:line="102" pos:column="9">delete</op:operator> <index pos:line="102" pos:column="16">[]</index> <name pos:line="102" pos:column="19">pBuffer</name></expr>;</expr_stmt>

        <return pos:line="104" pos:column="9">return <expr><name pos:line="104" pos:column="16">wordResult</name></expr>;</return>
    }</block></function><empty_stmt pos:line="105" pos:column="6">;</empty_stmt>

</public><private pos:line="107" pos:column="1">private:
    <template pos:line="108" pos:column="5">template <parameter_list pos:line="108" pos:column="14">&lt;<param><type><name pos:line="108" pos:column="15">class</name></type> <name pos:line="108" pos:column="21">IntType</name></param>&gt;</parameter_list>
    <function><type><name pos:line="109" pos:column="5">IntType</name></type> <name pos:line="109" pos:column="13">reverseByte</name><parameter_list pos:line="109" pos:column="24">(<param><decl><type><name pos:line="109" pos:column="25">IntType</name></type> <name pos:line="109" pos:column="33">val2Reverses</name></decl></param>)</parameter_list>
    <block pos:line="110" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="111" pos:column="9">IntType</name></type> <name pos:line="111" pos:column="17">reversedValue</name> <init pos:line="111" pos:column="31">= <expr><lit:literal type="number" pos:line="111" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="112" pos:column="9">long</name></type> <name pos:line="112" pos:column="14">mask</name> <init pos:line="112" pos:column="19">= <expr><lit:literal type="number" pos:line="112" pos:column="21">1</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="113" pos:column="9">int</name></type> <name pos:line="113" pos:column="13">nBits</name> <init pos:line="113" pos:column="19">= <expr><sizeof pos:line="113" pos:column="21">sizeof<argument_list pos:line="113" pos:column="27">(<argument><expr><name pos:line="113" pos:column="28">val2Reverses</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="113" pos:column="42">*</op:operator> <lit:literal type="number" pos:line="113" pos:column="44">8</lit:literal></expr></init></decl>;</decl_stmt>
        <for pos:line="114" pos:column="9">for (<init><decl><type><name pos:line="114" pos:column="14">int</name></type> <name pos:line="114" pos:column="18">i</name> <init pos:line="114" pos:column="20">= <expr><lit:literal type="number" pos:line="114" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="114" pos:column="26">i</name> <op:operator pos:line="114" pos:column="28">&lt;</op:operator> <name pos:line="114" pos:column="30">nBits</name></expr> ;</condition> <incr><expr><name pos:line="114" pos:column="38">i</name><op:operator pos:line="114" pos:column="39">++</op:operator></expr></incr>)
            <if pos:line="115" pos:column="13">if <condition pos:line="115" pos:column="16">(<expr><op:operator pos:line="115" pos:column="17">(</op:operator><name pos:line="115" pos:column="18">mask</name> <op:operator pos:line="115" pos:column="23">&lt;&lt;</op:operator> <name pos:line="115" pos:column="26">i</name><op:operator pos:line="115" pos:column="27">)</op:operator> <op:operator pos:line="115" pos:column="29">&amp;</op:operator> <name pos:line="115" pos:column="31">val2Reverses</name></expr>)</condition><then pos:line="115" pos:column="44">
                <expr_stmt><expr><name pos:line="116" pos:column="17">reversedValue</name> <op:operator pos:line="116" pos:column="31">+=</op:operator> <op:operator pos:line="116" pos:column="34">(</op:operator><name pos:line="116" pos:column="35">mask</name> <op:operator pos:line="116" pos:column="40">&lt;&lt;</op:operator> <op:operator pos:line="116" pos:column="43">(</op:operator><name pos:line="116" pos:column="44">nBits</name> <op:operator pos:line="116" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="116" pos:column="52">1</lit:literal> <op:operator pos:line="116" pos:column="54">-</op:operator> <name pos:line="116" pos:column="56">i</name><op:operator pos:line="116" pos:column="57">)</op:operator><op:operator pos:line="116" pos:column="58">)</op:operator></expr>;</expr_stmt></then></if></for>

        <return pos:line="118" pos:column="9">return <expr><name pos:line="118" pos:column="16">reversedValue</name></expr>;</return>
    }</block></function></template><empty_stmt pos:line="119" pos:column="6">;</empty_stmt>
</private>}</block>;

<cpp:endif pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">endif</cpp:directive></cpp:endif></class></unit>
