<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\UniConversion.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file UniConversion.cxx
 ** Functions to handle UTF-8 and UTF-16 strings.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="10" pos:column="10">"UniConversion.h"</lit:literal></cpp:file></cpp:include>

<enum pos:line="12" pos:column="1">enum <block pos:line="12" pos:column="6">{ <decl><name pos:line="12" pos:column="8">SURROGATE_LEAD_FIRST</name> <init pos:line="12" pos:column="29">= <expr><lit:literal type="number" pos:line="12" pos:column="31">0xD800</lit:literal></expr></init></decl> }</block>;</enum>
<enum pos:line="13" pos:column="1">enum <block pos:line="13" pos:column="6">{ <decl><name pos:line="13" pos:column="8">SURROGATE_TRAIL_FIRST</name> <init pos:line="13" pos:column="30">= <expr><lit:literal type="number" pos:line="13" pos:column="32">0xDC00</lit:literal></expr></init></decl> }</block>;</enum>
<enum pos:line="14" pos:column="1">enum <block pos:line="14" pos:column="6">{ <decl><name pos:line="14" pos:column="8">SURROGATE_TRAIL_LAST</name> <init pos:line="14" pos:column="29">= <expr><lit:literal type="number" pos:line="14" pos:column="31">0xDFFF</lit:literal></expr></init></decl> }</block>;</enum>

<function><type><name pos:line="16" pos:column="1">unsigned</name> <name pos:line="16" pos:column="10">int</name></type> <name pos:line="16" pos:column="14">UTF8Length</name><parameter_list pos:line="16" pos:column="24">(<param><decl><type><specifier pos:line="16" pos:column="25">const</specifier> <name pos:line="16" pos:column="31">wchar_t</name> <type:modifier pos:line="16" pos:column="39">*</type:modifier></type><name pos:line="16" pos:column="40">uptr</name></decl></param>, <param><decl><type><name pos:line="16" pos:column="46">unsigned</name> <name pos:line="16" pos:column="55">int</name></type> <name pos:line="16" pos:column="59">tlen</name></decl></param>)</parameter_list> <block pos:line="16" pos:column="65">{
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">unsigned</name> <name pos:line="17" pos:column="18">int</name></type> <name pos:line="17" pos:column="22">len</name> <init pos:line="17" pos:column="26">= <expr><lit:literal type="number" pos:line="17" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="18" pos:column="9">for (<init><decl><type><name pos:line="18" pos:column="14">unsigned</name> <name pos:line="18" pos:column="23">int</name></type> <name pos:line="18" pos:column="27">i</name> <init pos:line="18" pos:column="29">= <expr><lit:literal type="number" pos:line="18" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="18" pos:column="34">i</name> <op:operator pos:line="18" pos:column="36">&lt;</op:operator> <name pos:line="18" pos:column="38">tlen</name> <op:operator pos:line="18" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="18" pos:column="46">uptr</name><index pos:line="18" pos:column="50">[<expr><name pos:line="18" pos:column="51">i</name></expr>]</index></name></expr>;</condition><incr/>) <block pos:line="18" pos:column="56">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">unsigned</name> <name pos:line="19" pos:column="26">int</name></type> <name pos:line="19" pos:column="30">uch</name> <init pos:line="19" pos:column="34">= <expr><name><name pos:line="19" pos:column="36">uptr</name><index pos:line="19" pos:column="40">[<expr><name pos:line="19" pos:column="41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">uch</name> <op:operator pos:line="20" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="20" pos:column="27">0x80</lit:literal></expr>)</condition><then pos:line="20" pos:column="32"> <block pos:line="20" pos:column="33">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">len</name><op:operator pos:line="21" pos:column="28">++</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="22" pos:column="19">else <if pos:line="22" pos:column="24">if <condition pos:line="22" pos:column="27">(<expr><name pos:line="22" pos:column="28">uch</name> <op:operator pos:line="22" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="22" pos:column="34">0x800</lit:literal></expr>)</condition><then pos:line="22" pos:column="40"> <block pos:line="22" pos:column="41">{
			<expr_stmt><expr><name pos:line="23" pos:column="25">len</name> <op:operator pos:line="23" pos:column="29">+=</op:operator> <lit:literal type="number" pos:line="23" pos:column="32">2</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="24" pos:column="19">else <if pos:line="24" pos:column="24">if <condition pos:line="24" pos:column="27">(<expr><op:operator pos:line="24" pos:column="28">(</op:operator><name pos:line="24" pos:column="29">uch</name> <op:operator pos:line="24" pos:column="33">&gt;=</op:operator> <name pos:line="24" pos:column="36">SURROGATE_LEAD_FIRST</name><op:operator pos:line="24" pos:column="56">)</op:operator> <op:operator pos:line="24" pos:column="58">&amp;&amp;</op:operator>
			<op:operator pos:line="25" pos:column="25">(</op:operator><name pos:line="25" pos:column="26">uch</name> <op:operator pos:line="25" pos:column="30">&lt;=</op:operator> <name pos:line="25" pos:column="33">SURROGATE_TRAIL_LAST</name><op:operator pos:line="25" pos:column="53">)</op:operator></expr>)</condition><then pos:line="25" pos:column="55"> <block pos:line="25" pos:column="56">{
			<expr_stmt><expr><name pos:line="26" pos:column="25">len</name> <op:operator pos:line="26" pos:column="29">+=</op:operator> <lit:literal type="number" pos:line="26" pos:column="32">4</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="27" pos:column="25">i</name><op:operator pos:line="27" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="28" pos:column="19">else <block pos:line="28" pos:column="24">{
			<expr_stmt><expr><name pos:line="29" pos:column="25">len</name> <op:operator pos:line="29" pos:column="29">+=</op:operator> <lit:literal type="number" pos:line="29" pos:column="32">3</lit:literal></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if>
		<expr_stmt><expr><name pos:line="31" pos:column="17">i</name><op:operator pos:line="31" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></for>
	<return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">len</name></expr>;</return>
}</block></function>

<function><type><name pos:line="36" pos:column="1">void</name></type> <name pos:line="36" pos:column="6">UTF8FromUTF16</name><parameter_list pos:line="36" pos:column="19">(<param><decl><type><specifier pos:line="36" pos:column="20">const</specifier> <name pos:line="36" pos:column="26">wchar_t</name> <type:modifier pos:line="36" pos:column="34">*</type:modifier></type><name pos:line="36" pos:column="35">uptr</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="41">unsigned</name> <name pos:line="36" pos:column="50">int</name></type> <name pos:line="36" pos:column="54">tlen</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="60">char</name> <type:modifier pos:line="36" pos:column="65">*</type:modifier></type><name pos:line="36" pos:column="66">putf</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="72">unsigned</name> <name pos:line="36" pos:column="81">int</name></type> <name pos:line="36" pos:column="85">len</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="90">{
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">int</name></type> <name pos:line="37" pos:column="13">k</name> <init pos:line="37" pos:column="15">= <expr><lit:literal type="number" pos:line="37" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="38" pos:column="9">for (<init><decl><type><name pos:line="38" pos:column="14">unsigned</name> <name pos:line="38" pos:column="23">int</name></type> <name pos:line="38" pos:column="27">i</name> <init pos:line="38" pos:column="29">= <expr><lit:literal type="number" pos:line="38" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="38" pos:column="34">i</name> <op:operator pos:line="38" pos:column="36">&lt;</op:operator> <name pos:line="38" pos:column="38">tlen</name> <op:operator pos:line="38" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="38" pos:column="46">uptr</name><index pos:line="38" pos:column="50">[<expr><name pos:line="38" pos:column="51">i</name></expr>]</index></name></expr>;</condition><incr/>) <block pos:line="38" pos:column="56">{
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">unsigned</name> <name pos:line="39" pos:column="26">int</name></type> <name pos:line="39" pos:column="30">uch</name> <init pos:line="39" pos:column="34">= <expr><name><name pos:line="39" pos:column="36">uptr</name><index pos:line="39" pos:column="40">[<expr><name pos:line="39" pos:column="41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">uch</name> <op:operator pos:line="40" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="40" pos:column="27">0x80</lit:literal></expr>)</condition><then pos:line="40" pos:column="32"> <block pos:line="40" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="41" pos:column="25">putf</name><index pos:line="41" pos:column="29">[<expr><name pos:line="41" pos:column="30">k</name><op:operator pos:line="41" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="41" pos:column="35">=</op:operator> <call><name><name pos:line="41" pos:column="37">static_cast</name><argument_list pos:line="41" pos:column="48">&lt;<argument><expr><name pos:line="41" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="54">(<argument><expr><name pos:line="41" pos:column="55">uch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="42" pos:column="19">else <if pos:line="42" pos:column="24">if <condition pos:line="42" pos:column="27">(<expr><name pos:line="42" pos:column="28">uch</name> <op:operator pos:line="42" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="42" pos:column="34">0x800</lit:literal></expr>)</condition><then pos:line="42" pos:column="40"> <block pos:line="42" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="43" pos:column="25">putf</name><index pos:line="43" pos:column="29">[<expr><name pos:line="43" pos:column="30">k</name><op:operator pos:line="43" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="43" pos:column="35">=</op:operator> <call><name><name pos:line="43" pos:column="37">static_cast</name><argument_list pos:line="43" pos:column="48">&lt;<argument><expr><name pos:line="43" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="43" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="55">0xC0</lit:literal> <op:operator pos:line="43" pos:column="60">|</op:operator> <op:operator pos:line="43" pos:column="62">(</op:operator><name pos:line="43" pos:column="63">uch</name> <op:operator pos:line="43" pos:column="67">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="43" pos:column="70">6</lit:literal><op:operator pos:line="43" pos:column="71">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="44" pos:column="25">putf</name><index pos:line="44" pos:column="29">[<expr><name pos:line="44" pos:column="30">k</name><op:operator pos:line="44" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="44" pos:column="35">=</op:operator> <call><name><name pos:line="44" pos:column="37">static_cast</name><argument_list pos:line="44" pos:column="48">&lt;<argument><expr><name pos:line="44" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="44" pos:column="55">0x80</lit:literal> <op:operator pos:line="44" pos:column="60">|</op:operator> <op:operator pos:line="44" pos:column="62">(</op:operator><name pos:line="44" pos:column="63">uch</name> <op:operator pos:line="44" pos:column="67">&amp;</op:operator> <lit:literal type="number" pos:line="44" pos:column="69">0x3f</lit:literal><op:operator pos:line="44" pos:column="73">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="45" pos:column="19">else <if pos:line="45" pos:column="24">if <condition pos:line="45" pos:column="27">(<expr><op:operator pos:line="45" pos:column="28">(</op:operator><name pos:line="45" pos:column="29">uch</name> <op:operator pos:line="45" pos:column="33">&gt;=</op:operator> <name pos:line="45" pos:column="36">SURROGATE_LEAD_FIRST</name><op:operator pos:line="45" pos:column="56">)</op:operator> <op:operator pos:line="45" pos:column="58">&amp;&amp;</op:operator>
			<op:operator pos:line="46" pos:column="25">(</op:operator><name pos:line="46" pos:column="26">uch</name> <op:operator pos:line="46" pos:column="30">&lt;=</op:operator> <name pos:line="46" pos:column="33">SURROGATE_TRAIL_LAST</name><op:operator pos:line="46" pos:column="53">)</op:operator></expr>)</condition><then pos:line="46" pos:column="55"> <block pos:line="46" pos:column="56">{
			<comment type="line" pos:line="47" pos:column="25">// Half a surrogate pair</comment>
			<expr_stmt><expr><name pos:line="48" pos:column="25">i</name><op:operator pos:line="48" pos:column="26">++</op:operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="49" pos:column="25">unsigned</name> <name pos:line="49" pos:column="34">int</name></type> <name pos:line="49" pos:column="38">xch</name> <init pos:line="49" pos:column="42">= <expr><lit:literal type="number" pos:line="49" pos:column="44">0x10000</lit:literal> <op:operator pos:line="49" pos:column="52">+</op:operator> <op:operator pos:line="49" pos:column="54">(</op:operator><op:operator pos:line="49" pos:column="55">(</op:operator><name pos:line="49" pos:column="56">uch</name> <op:operator pos:line="49" pos:column="60">&amp;</op:operator> <lit:literal type="number" pos:line="49" pos:column="62">0x3ff</lit:literal><op:operator pos:line="49" pos:column="67">)</op:operator> <op:operator pos:line="49" pos:column="69">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="49" pos:column="72">10</lit:literal><op:operator pos:line="49" pos:column="74">)</op:operator> <op:operator pos:line="49" pos:column="76">+</op:operator> <op:operator pos:line="49" pos:column="78">(</op:operator><name><name pos:line="49" pos:column="79">uptr</name><index pos:line="49" pos:column="83">[<expr><name pos:line="49" pos:column="84">i</name></expr>]</index></name> <op:operator pos:line="49" pos:column="87">&amp;</op:operator> <lit:literal type="number" pos:line="49" pos:column="89">0x3ff</lit:literal><op:operator pos:line="49" pos:column="94">)</op:operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="50" pos:column="25">putf</name><index pos:line="50" pos:column="29">[<expr><name pos:line="50" pos:column="30">k</name><op:operator pos:line="50" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="50" pos:column="35">=</op:operator> <call><name><name pos:line="50" pos:column="37">static_cast</name><argument_list pos:line="50" pos:column="48">&lt;<argument><expr><name pos:line="50" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="50" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="50" pos:column="55">0xF0</lit:literal> <op:operator pos:line="50" pos:column="60">|</op:operator> <op:operator pos:line="50" pos:column="62">(</op:operator><name pos:line="50" pos:column="63">xch</name> <op:operator pos:line="50" pos:column="67">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="50" pos:column="70">18</lit:literal><op:operator pos:line="50" pos:column="72">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="51" pos:column="25">putf</name><index pos:line="51" pos:column="29">[<expr><name pos:line="51" pos:column="30">k</name><op:operator pos:line="51" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="51" pos:column="35">=</op:operator> <call><name><name pos:line="51" pos:column="37">static_cast</name><argument_list pos:line="51" pos:column="48">&lt;<argument><expr><name pos:line="51" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="51" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="51" pos:column="55">0x80</lit:literal> <op:operator pos:line="51" pos:column="60">|</op:operator> <op:operator pos:line="51" pos:column="62">(</op:operator><op:operator pos:line="51" pos:column="63">(</op:operator><name pos:line="51" pos:column="64">xch</name> <op:operator pos:line="51" pos:column="68">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="51" pos:column="71">12</lit:literal><op:operator pos:line="51" pos:column="73">)</op:operator> <op:operator pos:line="51" pos:column="75">&amp;</op:operator> <lit:literal type="number" pos:line="51" pos:column="77">0x3f</lit:literal><op:operator pos:line="51" pos:column="81">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="52" pos:column="25">putf</name><index pos:line="52" pos:column="29">[<expr><name pos:line="52" pos:column="30">k</name><op:operator pos:line="52" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="52" pos:column="35">=</op:operator> <call><name><name pos:line="52" pos:column="37">static_cast</name><argument_list pos:line="52" pos:column="48">&lt;<argument><expr><name pos:line="52" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="52" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="52" pos:column="55">0x80</lit:literal> <op:operator pos:line="52" pos:column="60">|</op:operator> <op:operator pos:line="52" pos:column="62">(</op:operator><op:operator pos:line="52" pos:column="63">(</op:operator><name pos:line="52" pos:column="64">xch</name> <op:operator pos:line="52" pos:column="68">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="52" pos:column="71">6</lit:literal><op:operator pos:line="52" pos:column="72">)</op:operator> <op:operator pos:line="52" pos:column="74">&amp;</op:operator> <lit:literal type="number" pos:line="52" pos:column="76">0x3f</lit:literal><op:operator pos:line="52" pos:column="80">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="53" pos:column="25">putf</name><index pos:line="53" pos:column="29">[<expr><name pos:line="53" pos:column="30">k</name><op:operator pos:line="53" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="53" pos:column="35">=</op:operator> <call><name><name pos:line="53" pos:column="37">static_cast</name><argument_list pos:line="53" pos:column="48">&lt;<argument><expr><name pos:line="53" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="53" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="53" pos:column="55">0x80</lit:literal> <op:operator pos:line="53" pos:column="60">|</op:operator> <op:operator pos:line="53" pos:column="62">(</op:operator><name pos:line="53" pos:column="63">xch</name> <op:operator pos:line="53" pos:column="67">&amp;</op:operator> <lit:literal type="number" pos:line="53" pos:column="69">0x3f</lit:literal><op:operator pos:line="53" pos:column="73">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="54" pos:column="19">else <block pos:line="54" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="55" pos:column="25">putf</name><index pos:line="55" pos:column="29">[<expr><name pos:line="55" pos:column="30">k</name><op:operator pos:line="55" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="55" pos:column="35">=</op:operator> <call><name><name pos:line="55" pos:column="37">static_cast</name><argument_list pos:line="55" pos:column="48">&lt;<argument><expr><name pos:line="55" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="55" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="55">0xE0</lit:literal> <op:operator pos:line="55" pos:column="60">|</op:operator> <op:operator pos:line="55" pos:column="62">(</op:operator><name pos:line="55" pos:column="63">uch</name> <op:operator pos:line="55" pos:column="67">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="55" pos:column="70">12</lit:literal><op:operator pos:line="55" pos:column="72">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="56" pos:column="25">putf</name><index pos:line="56" pos:column="29">[<expr><name pos:line="56" pos:column="30">k</name><op:operator pos:line="56" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="56" pos:column="35">=</op:operator> <call><name><name pos:line="56" pos:column="37">static_cast</name><argument_list pos:line="56" pos:column="48">&lt;<argument><expr><name pos:line="56" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="56" pos:column="55">0x80</lit:literal> <op:operator pos:line="56" pos:column="60">|</op:operator> <op:operator pos:line="56" pos:column="62">(</op:operator><op:operator pos:line="56" pos:column="63">(</op:operator><name pos:line="56" pos:column="64">uch</name> <op:operator pos:line="56" pos:column="68">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="56" pos:column="71">6</lit:literal><op:operator pos:line="56" pos:column="72">)</op:operator> <op:operator pos:line="56" pos:column="74">&amp;</op:operator> <lit:literal type="number" pos:line="56" pos:column="76">0x3f</lit:literal><op:operator pos:line="56" pos:column="80">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="57" pos:column="25">putf</name><index pos:line="57" pos:column="29">[<expr><name pos:line="57" pos:column="30">k</name><op:operator pos:line="57" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="57" pos:column="35">=</op:operator> <call><name><name pos:line="57" pos:column="37">static_cast</name><argument_list pos:line="57" pos:column="48">&lt;<argument><expr><name pos:line="57" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="57" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="57" pos:column="55">0x80</lit:literal> <op:operator pos:line="57" pos:column="60">|</op:operator> <op:operator pos:line="57" pos:column="62">(</op:operator><name pos:line="57" pos:column="63">uch</name> <op:operator pos:line="57" pos:column="67">&amp;</op:operator> <lit:literal type="number" pos:line="57" pos:column="69">0x3f</lit:literal><op:operator pos:line="57" pos:column="73">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if>
		<expr_stmt><expr><name pos:line="59" pos:column="17">i</name><op:operator pos:line="59" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="61" pos:column="9">putf</name><index pos:line="61" pos:column="13">[<expr><name pos:line="61" pos:column="14">len</name></expr>]</index></name> <op:operator pos:line="61" pos:column="19">=</op:operator> <lit:literal type="char" pos:line="61" pos:column="21">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="64" pos:column="1">unsigned</name> <name pos:line="64" pos:column="10">int</name></type> <name pos:line="64" pos:column="14">UTF8CharLength</name><parameter_list pos:line="64" pos:column="28">(<param><decl><type><name pos:line="64" pos:column="29">unsigned</name> <name pos:line="64" pos:column="38">char</name></type> <name pos:line="64" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="47">{
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">ch</name> <op:operator pos:line="65" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="65" pos:column="18">0x80</lit:literal></expr>)</condition><then pos:line="65" pos:column="23"> <block pos:line="65" pos:column="24">{
		<return pos:line="66" pos:column="17">return <expr><lit:literal type="number" pos:line="66" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="67" pos:column="11">else <if pos:line="67" pos:column="16">if <condition pos:line="67" pos:column="19">(<expr><name pos:line="67" pos:column="20">ch</name> <op:operator pos:line="67" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="67" pos:column="25">0x80</lit:literal> <op:operator pos:line="67" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="67" pos:column="32">0x40</lit:literal> <op:operator pos:line="67" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="67" pos:column="39">0x20</lit:literal></expr>)</condition><then pos:line="67" pos:column="44"> <block pos:line="67" pos:column="45">{
		<return pos:line="68" pos:column="17">return <expr><lit:literal type="number" pos:line="68" pos:column="24">2</lit:literal></expr>;</return>
	}</block></then> <else pos:line="69" pos:column="11">else <if pos:line="69" pos:column="16">if <condition pos:line="69" pos:column="19">(<expr><name pos:line="69" pos:column="20">ch</name> <op:operator pos:line="69" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="69" pos:column="25">0x80</lit:literal> <op:operator pos:line="69" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="69" pos:column="32">0x40</lit:literal> <op:operator pos:line="69" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="69" pos:column="39">0x20</lit:literal> <op:operator pos:line="69" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="69" pos:column="46">0x10</lit:literal></expr>)</condition><then pos:line="69" pos:column="51"> <block pos:line="69" pos:column="52">{
		<return pos:line="70" pos:column="17">return <expr><lit:literal type="number" pos:line="70" pos:column="24">3</lit:literal></expr>;</return>
	}</block></then> <else pos:line="71" pos:column="11">else <block pos:line="71" pos:column="16">{
		<return pos:line="72" pos:column="17">return <expr><lit:literal type="number" pos:line="72" pos:column="24">4</lit:literal></expr>;</return>
	}</block></else></if></else></if></else></if>
}</block></function>

<function><type><name pos:line="76" pos:column="1">unsigned</name> <name pos:line="76" pos:column="10">int</name></type> <name pos:line="76" pos:column="14">UTF16Length</name><parameter_list pos:line="76" pos:column="25">(<param><decl><type><specifier pos:line="76" pos:column="26">const</specifier> <name pos:line="76" pos:column="32">char</name> <type:modifier pos:line="76" pos:column="37">*</type:modifier></type><name pos:line="76" pos:column="38">s</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="41">unsigned</name> <name pos:line="76" pos:column="50">int</name></type> <name pos:line="76" pos:column="54">len</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="59">{
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">unsigned</name> <name pos:line="77" pos:column="18">int</name></type> <name pos:line="77" pos:column="22">ulen</name> <init pos:line="77" pos:column="27">= <expr><lit:literal type="number" pos:line="77" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="78" pos:column="9">unsigned</name> <name pos:line="78" pos:column="18">int</name></type> <name pos:line="78" pos:column="22">charLen</name></decl>;</decl_stmt>
	<for pos:line="79" pos:column="9">for (<init><decl><type><name pos:line="79" pos:column="14">unsigned</name> <name pos:line="79" pos:column="23">int</name></type> <name pos:line="79" pos:column="27">i</name><init pos:line="79" pos:column="28">=<expr><lit:literal type="number" pos:line="79" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="79" pos:column="32">i</name><op:operator pos:line="79" pos:column="33">&lt;</op:operator><name pos:line="79" pos:column="34">len</name></expr>;</condition><incr/>) <block pos:line="79" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="80" pos:column="17">unsigned</name> <name pos:line="80" pos:column="26">char</name></type> <name pos:line="80" pos:column="31">ch</name> <init pos:line="80" pos:column="34">= <expr><call><name><name pos:line="80" pos:column="36">static_cast</name><argument_list pos:line="80" pos:column="47">&lt;<argument><expr><name pos:line="80" pos:column="48">unsigned</name> <name pos:line="80" pos:column="57">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="80" pos:column="62">(<argument><expr><name><name pos:line="80" pos:column="63">s</name><index pos:line="80" pos:column="64">[<expr><name pos:line="80" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">ch</name> <op:operator pos:line="81" pos:column="24">&lt;</op:operator> <lit:literal type="number" pos:line="81" pos:column="26">0x80</lit:literal></expr>)</condition><then pos:line="81" pos:column="31"> <block pos:line="81" pos:column="32">{
			<expr_stmt><expr><name pos:line="82" pos:column="25">charLen</name> <op:operator pos:line="82" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="82" pos:column="35">1</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="83" pos:column="19">else <if pos:line="83" pos:column="24">if <condition pos:line="83" pos:column="27">(<expr><name pos:line="83" pos:column="28">ch</name> <op:operator pos:line="83" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="83" pos:column="33">0x80</lit:literal> <op:operator pos:line="83" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="83" pos:column="40">0x40</lit:literal> <op:operator pos:line="83" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="83" pos:column="47">0x20</lit:literal></expr>)</condition><then pos:line="83" pos:column="52"> <block pos:line="83" pos:column="53">{
			<expr_stmt><expr><name pos:line="84" pos:column="25">charLen</name> <op:operator pos:line="84" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="84" pos:column="35">2</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="85" pos:column="19">else <if pos:line="85" pos:column="24">if <condition pos:line="85" pos:column="27">(<expr><name pos:line="85" pos:column="28">ch</name> <op:operator pos:line="85" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="85" pos:column="33">0x80</lit:literal> <op:operator pos:line="85" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="85" pos:column="40">0x40</lit:literal> <op:operator pos:line="85" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="85" pos:column="47">0x20</lit:literal> <op:operator pos:line="85" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="85" pos:column="54">0x10</lit:literal></expr>)</condition><then pos:line="85" pos:column="59"> <block pos:line="85" pos:column="60">{
			<expr_stmt><expr><name pos:line="86" pos:column="25">charLen</name> <op:operator pos:line="86" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="86" pos:column="35">3</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="87" pos:column="19">else <block pos:line="87" pos:column="24">{
			<expr_stmt><expr><name pos:line="88" pos:column="25">charLen</name> <op:operator pos:line="88" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="88" pos:column="35">4</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="89" pos:column="25">ulen</name><op:operator pos:line="89" pos:column="29">++</op:operator></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if>
		<expr_stmt><expr><name pos:line="91" pos:column="17">i</name> <op:operator pos:line="91" pos:column="19">+=</op:operator> <name pos:line="91" pos:column="22">charLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="92" pos:column="17">ulen</name><op:operator pos:line="92" pos:column="21">++</op:operator></expr>;</expr_stmt>
	}</block></for>
	<return pos:line="94" pos:column="9">return <expr><name pos:line="94" pos:column="16">ulen</name></expr>;</return>
}</block></function>

<function><type><name pos:line="97" pos:column="1">unsigned</name> <name pos:line="97" pos:column="10">int</name></type> <name pos:line="97" pos:column="14">UTF16FromUTF8</name><parameter_list pos:line="97" pos:column="27">(<param><decl><type><specifier pos:line="97" pos:column="28">const</specifier> <name pos:line="97" pos:column="34">char</name> <type:modifier pos:line="97" pos:column="39">*</type:modifier></type><name pos:line="97" pos:column="40">s</name></decl></param>, <param><decl><type><name pos:line="97" pos:column="43">unsigned</name> <name pos:line="97" pos:column="52">int</name></type> <name pos:line="97" pos:column="56">len</name></decl></param>, <param><decl><type><name pos:line="97" pos:column="61">wchar_t</name> <type:modifier pos:line="97" pos:column="69">*</type:modifier></type><name pos:line="97" pos:column="70">tbuf</name></decl></param>, <param><decl><type><name pos:line="97" pos:column="76">unsigned</name> <name pos:line="97" pos:column="85">int</name></type> <name pos:line="97" pos:column="89">tlen</name></decl></param>)</parameter_list> <block pos:line="97" pos:column="95">{
	<decl_stmt><decl><type><name pos:line="98" pos:column="9">unsigned</name> <name pos:line="98" pos:column="18">int</name></type> <name pos:line="98" pos:column="22">ui</name><init pos:line="98" pos:column="24">=<expr><lit:literal type="number" pos:line="98" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="99" pos:column="9">const</specifier> <name pos:line="99" pos:column="15">unsigned</name> <name pos:line="99" pos:column="24">char</name> <type:modifier pos:line="99" pos:column="29">*</type:modifier></type><name pos:line="99" pos:column="30">us</name> <init pos:line="99" pos:column="33">= <expr><call><name><name pos:line="99" pos:column="35">reinterpret_cast</name><argument_list pos:line="99" pos:column="51">&lt;<argument><expr><specifier pos:line="99" pos:column="52">const</specifier> <name pos:line="99" pos:column="58">unsigned</name> <name pos:line="99" pos:column="67">char</name> <op:operator pos:line="99" pos:column="72">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="99" pos:column="74">(<argument><expr><name pos:line="99" pos:column="75">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="100" pos:column="9">unsigned</name> <name pos:line="100" pos:column="18">int</name></type> <name pos:line="100" pos:column="22">i</name><init pos:line="100" pos:column="23">=<expr><lit:literal type="number" pos:line="100" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="101" pos:column="9">while <condition pos:line="101" pos:column="15">(<expr><op:operator pos:line="101" pos:column="16">(</op:operator><name pos:line="101" pos:column="17">i</name><op:operator pos:line="101" pos:column="18">&lt;</op:operator><name pos:line="101" pos:column="19">len</name><op:operator pos:line="101" pos:column="22">)</op:operator> <op:operator pos:line="101" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="101" pos:column="27">(</op:operator><name pos:line="101" pos:column="28">ui</name><op:operator pos:line="101" pos:column="30">&lt;</op:operator><name pos:line="101" pos:column="31">tlen</name><op:operator pos:line="101" pos:column="35">)</op:operator></expr>)</condition> <block pos:line="101" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">unsigned</name> <name pos:line="102" pos:column="26">char</name></type> <name pos:line="102" pos:column="31">ch</name> <init pos:line="102" pos:column="34">= <expr><name><name pos:line="102" pos:column="36">us</name><index pos:line="102" pos:column="38">[<expr><name pos:line="102" pos:column="39">i</name><op:operator pos:line="102" pos:column="40">++</op:operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><name pos:line="103" pos:column="21">ch</name> <op:operator pos:line="103" pos:column="24">&lt;</op:operator> <lit:literal type="number" pos:line="103" pos:column="26">0x80</lit:literal></expr>)</condition><then pos:line="103" pos:column="31"> <block pos:line="103" pos:column="32">{
			<expr_stmt><expr><name><name pos:line="104" pos:column="25">tbuf</name><index pos:line="104" pos:column="29">[<expr><name pos:line="104" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="104" pos:column="34">=</op:operator> <name pos:line="104" pos:column="36">ch</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="105" pos:column="19">else <if pos:line="105" pos:column="24">if <condition pos:line="105" pos:column="27">(<expr><name pos:line="105" pos:column="28">ch</name> <op:operator pos:line="105" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="105" pos:column="33">0x80</lit:literal> <op:operator pos:line="105" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="105" pos:column="40">0x40</lit:literal> <op:operator pos:line="105" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="105" pos:column="47">0x20</lit:literal></expr>)</condition><then pos:line="105" pos:column="52"> <block pos:line="105" pos:column="53">{
			<expr_stmt><expr><name><name pos:line="106" pos:column="25">tbuf</name><index pos:line="106" pos:column="29">[<expr><name pos:line="106" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="106" pos:column="34">=</op:operator> <call><name><name pos:line="106" pos:column="36">static_cast</name><argument_list pos:line="106" pos:column="47">&lt;<argument><expr><name pos:line="106" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="106" pos:column="56">(<argument><expr><op:operator pos:line="106" pos:column="57">(</op:operator><name pos:line="106" pos:column="58">ch</name> <op:operator pos:line="106" pos:column="61">&amp;</op:operator> <lit:literal type="number" pos:line="106" pos:column="63">0x1F</lit:literal><op:operator pos:line="106" pos:column="67">)</op:operator> <op:operator pos:line="106" pos:column="69">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="106" pos:column="72">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="107" pos:column="25">ch</name> <op:operator pos:line="107" pos:column="28">=</op:operator> <name><name pos:line="107" pos:column="30">us</name><index pos:line="107" pos:column="32">[<expr><name pos:line="107" pos:column="33">i</name><op:operator pos:line="107" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="108" pos:column="25">tbuf</name><index pos:line="108" pos:column="29">[<expr><name pos:line="108" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="108" pos:column="34">=</op:operator> <call><name><name pos:line="108" pos:column="36">static_cast</name><argument_list pos:line="108" pos:column="47">&lt;<argument><expr><name pos:line="108" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="108" pos:column="56">(<argument><expr><name><name pos:line="108" pos:column="57">tbuf</name><index pos:line="108" pos:column="61">[<expr><name pos:line="108" pos:column="62">ui</name></expr>]</index></name> <op:operator pos:line="108" pos:column="66">+</op:operator> <op:operator pos:line="108" pos:column="68">(</op:operator><name pos:line="108" pos:column="69">ch</name> <op:operator pos:line="108" pos:column="72">&amp;</op:operator> <lit:literal type="number" pos:line="108" pos:column="74">0x7F</lit:literal><op:operator pos:line="108" pos:column="78">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="109" pos:column="19">else <if pos:line="109" pos:column="24">if <condition pos:line="109" pos:column="27">(<expr><name pos:line="109" pos:column="28">ch</name> <op:operator pos:line="109" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="109" pos:column="33">0x80</lit:literal> <op:operator pos:line="109" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="109" pos:column="40">0x40</lit:literal> <op:operator pos:line="109" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="109" pos:column="47">0x20</lit:literal> <op:operator pos:line="109" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="109" pos:column="54">0x10</lit:literal></expr>)</condition><then pos:line="109" pos:column="59"> <block pos:line="109" pos:column="60">{
			<expr_stmt><expr><name><name pos:line="110" pos:column="25">tbuf</name><index pos:line="110" pos:column="29">[<expr><name pos:line="110" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="110" pos:column="34">=</op:operator> <call><name><name pos:line="110" pos:column="36">static_cast</name><argument_list pos:line="110" pos:column="47">&lt;<argument><expr><name pos:line="110" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="110" pos:column="56">(<argument><expr><op:operator pos:line="110" pos:column="57">(</op:operator><name pos:line="110" pos:column="58">ch</name> <op:operator pos:line="110" pos:column="61">&amp;</op:operator> <lit:literal type="number" pos:line="110" pos:column="63">0xF</lit:literal><op:operator pos:line="110" pos:column="66">)</op:operator> <op:operator pos:line="110" pos:column="68">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="110" pos:column="71">12</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="111" pos:column="25">ch</name> <op:operator pos:line="111" pos:column="28">=</op:operator> <name><name pos:line="111" pos:column="30">us</name><index pos:line="111" pos:column="32">[<expr><name pos:line="111" pos:column="33">i</name><op:operator pos:line="111" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="112" pos:column="25">tbuf</name><index pos:line="112" pos:column="29">[<expr><name pos:line="112" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="112" pos:column="34">=</op:operator> <call><name><name pos:line="112" pos:column="36">static_cast</name><argument_list pos:line="112" pos:column="47">&lt;<argument><expr><name pos:line="112" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="112" pos:column="56">(<argument><expr><name><name pos:line="112" pos:column="57">tbuf</name><index pos:line="112" pos:column="61">[<expr><name pos:line="112" pos:column="62">ui</name></expr>]</index></name> <op:operator pos:line="112" pos:column="66">+</op:operator> <op:operator pos:line="112" pos:column="68">(</op:operator><op:operator pos:line="112" pos:column="69">(</op:operator><name pos:line="112" pos:column="70">ch</name> <op:operator pos:line="112" pos:column="73">&amp;</op:operator> <lit:literal type="number" pos:line="112" pos:column="75">0x7F</lit:literal><op:operator pos:line="112" pos:column="79">)</op:operator> <op:operator pos:line="112" pos:column="81">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="112" pos:column="84">6</lit:literal><op:operator pos:line="112" pos:column="85">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="113" pos:column="25">ch</name> <op:operator pos:line="113" pos:column="28">=</op:operator> <name><name pos:line="113" pos:column="30">us</name><index pos:line="113" pos:column="32">[<expr><name pos:line="113" pos:column="33">i</name><op:operator pos:line="113" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="114" pos:column="25">tbuf</name><index pos:line="114" pos:column="29">[<expr><name pos:line="114" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="114" pos:column="34">=</op:operator> <call><name><name pos:line="114" pos:column="36">static_cast</name><argument_list pos:line="114" pos:column="47">&lt;<argument><expr><name pos:line="114" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="56">(<argument><expr><name><name pos:line="114" pos:column="57">tbuf</name><index pos:line="114" pos:column="61">[<expr><name pos:line="114" pos:column="62">ui</name></expr>]</index></name> <op:operator pos:line="114" pos:column="66">+</op:operator> <op:operator pos:line="114" pos:column="68">(</op:operator><name pos:line="114" pos:column="69">ch</name> <op:operator pos:line="114" pos:column="72">&amp;</op:operator> <lit:literal type="number" pos:line="114" pos:column="74">0x7F</lit:literal><op:operator pos:line="114" pos:column="78">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="115" pos:column="19">else <block pos:line="115" pos:column="24">{
			<comment type="line" pos:line="116" pos:column="25">// Outside the BMP so need two surrogates</comment>
			<decl_stmt><decl><type><name pos:line="117" pos:column="25">int</name></type> <name pos:line="117" pos:column="29">val</name> <init pos:line="117" pos:column="33">= <expr><op:operator pos:line="117" pos:column="35">(</op:operator><name pos:line="117" pos:column="36">ch</name> <op:operator pos:line="117" pos:column="39">&amp;</op:operator> <lit:literal type="number" pos:line="117" pos:column="41">0x7</lit:literal><op:operator pos:line="117" pos:column="44">)</op:operator> <op:operator pos:line="117" pos:column="46">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="117" pos:column="49">18</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="118" pos:column="25">ch</name> <op:operator pos:line="118" pos:column="28">=</op:operator> <name><name pos:line="118" pos:column="30">us</name><index pos:line="118" pos:column="32">[<expr><name pos:line="118" pos:column="33">i</name><op:operator pos:line="118" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="119" pos:column="25">val</name> <op:operator pos:line="119" pos:column="29">+=</op:operator> <op:operator pos:line="119" pos:column="32">(</op:operator><name pos:line="119" pos:column="33">ch</name> <op:operator pos:line="119" pos:column="36">&amp;</op:operator> <lit:literal type="number" pos:line="119" pos:column="38">0x3F</lit:literal><op:operator pos:line="119" pos:column="42">)</op:operator> <op:operator pos:line="119" pos:column="44">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="119" pos:column="47">12</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="120" pos:column="25">ch</name> <op:operator pos:line="120" pos:column="28">=</op:operator> <name><name pos:line="120" pos:column="30">us</name><index pos:line="120" pos:column="32">[<expr><name pos:line="120" pos:column="33">i</name><op:operator pos:line="120" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="121" pos:column="25">val</name> <op:operator pos:line="121" pos:column="29">+=</op:operator> <op:operator pos:line="121" pos:column="32">(</op:operator><name pos:line="121" pos:column="33">ch</name> <op:operator pos:line="121" pos:column="36">&amp;</op:operator> <lit:literal type="number" pos:line="121" pos:column="38">0x3F</lit:literal><op:operator pos:line="121" pos:column="42">)</op:operator> <op:operator pos:line="121" pos:column="44">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="121" pos:column="47">6</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="122" pos:column="25">ch</name> <op:operator pos:line="122" pos:column="28">=</op:operator> <name><name pos:line="122" pos:column="30">us</name><index pos:line="122" pos:column="32">[<expr><name pos:line="122" pos:column="33">i</name><op:operator pos:line="122" pos:column="34">++</op:operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="123" pos:column="25">val</name> <op:operator pos:line="123" pos:column="29">+=</op:operator> <op:operator pos:line="123" pos:column="32">(</op:operator><name pos:line="123" pos:column="33">ch</name> <op:operator pos:line="123" pos:column="36">&amp;</op:operator> <lit:literal type="number" pos:line="123" pos:column="38">0x3F</lit:literal><op:operator pos:line="123" pos:column="42">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="124" pos:column="25">tbuf</name><index pos:line="124" pos:column="29">[<expr><name pos:line="124" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="124" pos:column="34">=</op:operator> <call><name><name pos:line="124" pos:column="36">static_cast</name><argument_list pos:line="124" pos:column="47">&lt;<argument><expr><name pos:line="124" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="124" pos:column="56">(<argument><expr><op:operator pos:line="124" pos:column="57">(</op:operator><op:operator pos:line="124" pos:column="58">(</op:operator><name pos:line="124" pos:column="59">val</name> <op:operator pos:line="124" pos:column="63">-</op:operator> <lit:literal type="number" pos:line="124" pos:column="65">0x10000</lit:literal><op:operator pos:line="124" pos:column="72">)</op:operator> <op:operator pos:line="124" pos:column="74">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="124" pos:column="77">10</lit:literal><op:operator pos:line="124" pos:column="79">)</op:operator> <op:operator pos:line="124" pos:column="81">+</op:operator> <name pos:line="124" pos:column="83">SURROGATE_LEAD_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="125" pos:column="25">ui</name><op:operator pos:line="125" pos:column="27">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="126" pos:column="25">tbuf</name><index pos:line="126" pos:column="29">[<expr><name pos:line="126" pos:column="30">ui</name></expr>]</index></name> <op:operator pos:line="126" pos:column="34">=</op:operator> <call><name><name pos:line="126" pos:column="36">static_cast</name><argument_list pos:line="126" pos:column="47">&lt;<argument><expr><name pos:line="126" pos:column="48">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="126" pos:column="56">(<argument><expr><op:operator pos:line="126" pos:column="57">(</op:operator><name pos:line="126" pos:column="58">val</name> <op:operator pos:line="126" pos:column="62">&amp;</op:operator> <lit:literal type="number" pos:line="126" pos:column="64">0x3ff</lit:literal><op:operator pos:line="126" pos:column="69">)</op:operator> <op:operator pos:line="126" pos:column="71">+</op:operator> <name pos:line="126" pos:column="73">SURROGATE_TRAIL_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if>
		<expr_stmt><expr><name pos:line="128" pos:column="17">ui</name><op:operator pos:line="128" pos:column="19">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="130" pos:column="9">return <expr><name pos:line="130" pos:column="16">ui</name></expr>;</return>
}</block></function>
</unit>
