<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\Partitioning.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file Partitioning.h
 ** Data structure used to partition an interval. Used for holding line start/end positions.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2007 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">PARTITIONING_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">PARTITIONING_H</name></cpp:macro></cpp:define>

<comment type="line" format="doxygen" pos:line="11" pos:column="1">/// A split vector of integers with a method for adding a value to all elements</comment>
<comment type="line" format="doxygen" pos:line="12" pos:column="1">/// in a range.</comment>
<comment type="line" format="doxygen" pos:line="13" pos:column="1">/// Used by the Partitioning class.</comment>

<class pos:line="15" pos:column="1">class <name pos:line="15" pos:column="7">SplitVectorWithRangeAdd</name> <super pos:line="15" pos:column="31">: <specifier pos:line="15" pos:column="33">public</specifier> <name><name pos:line="15" pos:column="40">SplitVector</name><argument_list pos:line="15" pos:column="51">&lt;<argument><expr><name pos:line="15" pos:column="52">int</name></expr></argument>&gt;</argument_list></name></super> <block pos:line="15" pos:column="57">{<private type="default" pos:line="15" pos:column="58">
</private><public pos:line="16" pos:column="1">public:
	<constructor><name pos:line="17" pos:column="9">SplitVectorWithRangeAdd</name><parameter_list pos:line="17" pos:column="32">(<param><decl><type><name pos:line="17" pos:column="33">int</name></type> <name pos:line="17" pos:column="37">growSize_</name></decl></param>)</parameter_list> <block pos:line="17" pos:column="48">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">SetGrowSize</name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">growSize_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">ReAllocate</name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">growSize_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<destructor><name pos:line="21" pos:column="9">~<name pos:line="21" pos:column="10">SplitVectorWithRangeAdd</name></name><parameter_list pos:line="21" pos:column="33">()</parameter_list> <block pos:line="21" pos:column="36">{
	}</block></destructor>
	<function><type><name pos:line="23" pos:column="9">void</name></type> <name pos:line="23" pos:column="14">RangeAddDelta</name><parameter_list pos:line="23" pos:column="27">(<param><decl><type><name pos:line="23" pos:column="28">int</name></type> <name pos:line="23" pos:column="32">start</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="39">int</name></type> <name pos:line="23" pos:column="43">end</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="48">int</name></type> <name pos:line="23" pos:column="52">delta</name></decl></param>)</parameter_list> <block pos:line="23" pos:column="59">{
		<comment type="line" pos:line="24" pos:column="17">// end is 1 past end, so end-start is number of elements to change</comment>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">int</name></type> <name pos:line="25" pos:column="21">i</name> <init pos:line="25" pos:column="23">= <expr><lit:literal type="number" pos:line="25" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">int</name></type> <name pos:line="26" pos:column="21">rangeLength</name> <init pos:line="26" pos:column="33">= <expr><name pos:line="26" pos:column="35">end</name> <op:operator pos:line="26" pos:column="39">-</op:operator> <name pos:line="26" pos:column="41">start</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">int</name></type> <name pos:line="27" pos:column="21">range1Length</name> <init pos:line="27" pos:column="34">= <expr><name pos:line="27" pos:column="36">rangeLength</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">int</name></type> <name pos:line="28" pos:column="21">part1Left</name> <init pos:line="28" pos:column="31">= <expr><name pos:line="28" pos:column="33">part1Length</name> <op:operator pos:line="28" pos:column="45">-</op:operator> <name pos:line="28" pos:column="47">start</name></expr></init></decl>;</decl_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">range1Length</name> <op:operator pos:line="29" pos:column="34">&gt;</op:operator> <name pos:line="29" pos:column="36">part1Left</name></expr>)</condition><then pos:line="29" pos:column="46">
			<expr_stmt><expr><name pos:line="30" pos:column="25">range1Length</name> <op:operator pos:line="30" pos:column="38">=</op:operator> <name pos:line="30" pos:column="40">part1Left</name></expr>;</expr_stmt></then></if>
		<while pos:line="31" pos:column="17">while <condition pos:line="31" pos:column="23">(<expr><name pos:line="31" pos:column="24">i</name> <op:operator pos:line="31" pos:column="26">&lt;</op:operator> <name pos:line="31" pos:column="28">range1Length</name></expr>)</condition> <block pos:line="31" pos:column="42">{
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">body</name><index pos:line="32" pos:column="29">[<expr><name pos:line="32" pos:column="30">start</name><op:operator pos:line="32" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="32" pos:column="39">+=</op:operator> <name pos:line="32" pos:column="42">delta</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">i</name><op:operator pos:line="33" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name pos:line="35" pos:column="17">start</name> <op:operator pos:line="35" pos:column="23">+=</op:operator> <name pos:line="35" pos:column="26">gapLength</name></expr>;</expr_stmt>
		<while pos:line="36" pos:column="17">while <condition pos:line="36" pos:column="23">(<expr><name pos:line="36" pos:column="24">i</name> <op:operator pos:line="36" pos:column="26">&lt;</op:operator> <name pos:line="36" pos:column="28">rangeLength</name></expr>)</condition> <block pos:line="36" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">body</name><index pos:line="37" pos:column="29">[<expr><name pos:line="37" pos:column="30">start</name><op:operator pos:line="37" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="37" pos:column="39">+=</op:operator> <name pos:line="37" pos:column="42">delta</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="38" pos:column="25">i</name><op:operator pos:line="38" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></function>
</public>}</block>;</class>

<comment type="line" format="doxygen" pos:line="43" pos:column="1">/// Divide an interval into multiple partitions.</comment>
<comment type="line" format="doxygen" pos:line="44" pos:column="1">/// Useful for breaking a document down into sections such as lines.</comment>
<comment type="line" format="doxygen" pos:line="45" pos:column="1">/// A 0 length interval has a single 0 length partition, numbered 0</comment>
<comment type="line" format="doxygen" pos:line="46" pos:column="1">/// If interval not 0 length then each partition non-zero length</comment>
<comment type="line" format="doxygen" pos:line="47" pos:column="1">/// When needed, positions after the interval are considered part of the last partition</comment>
<comment type="line" format="doxygen" pos:line="48" pos:column="1">/// but the end of the last partition can be found with PositionFromPartition(last+1).</comment>

<class pos:line="50" pos:column="1">class <name pos:line="50" pos:column="7">Partitioning</name> <block pos:line="50" pos:column="20">{<private type="default" pos:line="50" pos:column="21">
</private><private pos:line="51" pos:column="1">private:
	<comment type="line" pos:line="52" pos:column="9">// To avoid calculating all the partition positions whenever any text is inserted</comment>
	<comment type="line" pos:line="53" pos:column="9">// there may be a step somewhere in the list.</comment>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">int</name></type> <name pos:line="54" pos:column="13">stepPartition</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">int</name></type> <name pos:line="55" pos:column="13">stepLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">SplitVectorWithRangeAdd</name> <type:modifier pos:line="56" pos:column="33">*</type:modifier></type><name pos:line="56" pos:column="34">body</name></decl>;</decl_stmt>

	<comment type="line" pos:line="58" pos:column="9">// Move step forward</comment>
	<function><type><name pos:line="59" pos:column="9">void</name></type> <name pos:line="59" pos:column="14">ApplyStep</name><parameter_list pos:line="59" pos:column="23">(<param><decl><type><name pos:line="59" pos:column="24">int</name></type> <name pos:line="59" pos:column="28">partitionUpTo</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="43">{
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">stepLength</name> <op:operator pos:line="60" pos:column="32">!=</op:operator> <lit:literal type="number" pos:line="60" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="60" pos:column="37"> <block pos:line="60" pos:column="38">{
			<expr_stmt><expr><call><name><name pos:line="61" pos:column="25">body</name><op:operator pos:line="61" pos:column="29">-&gt;</op:operator><name pos:line="61" pos:column="31">RangeAddDelta</name></name><argument_list pos:line="61" pos:column="44">(<argument><expr><name pos:line="61" pos:column="45">stepPartition</name><op:operator pos:line="61" pos:column="58">+</op:operator><lit:literal type="number" pos:line="61" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="62">partitionUpTo</name> <op:operator pos:line="61" pos:column="76">+</op:operator> <lit:literal type="number" pos:line="61" pos:column="78">1</lit:literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="81">stepLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="63" pos:column="17">stepPartition</name> <op:operator pos:line="63" pos:column="31">=</op:operator> <name pos:line="63" pos:column="33">partitionUpTo</name></expr>;</expr_stmt>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">stepPartition</name> <op:operator pos:line="64" pos:column="35">&gt;=</op:operator> <call><name><name pos:line="64" pos:column="38">body</name><op:operator pos:line="64" pos:column="42">-&gt;</op:operator><name pos:line="64" pos:column="44">Length</name></name><argument_list pos:line="64" pos:column="50">()</argument_list></call><op:operator pos:line="64" pos:column="52">-</op:operator><lit:literal type="number" pos:line="64" pos:column="53">1</lit:literal></expr>)</condition><then pos:line="64" pos:column="55"> <block pos:line="64" pos:column="56">{
			<expr_stmt><expr><name pos:line="65" pos:column="25">stepPartition</name> <op:operator pos:line="65" pos:column="39">=</op:operator> <call><name><name pos:line="65" pos:column="41">body</name><op:operator pos:line="65" pos:column="45">-&gt;</op:operator><name pos:line="65" pos:column="47">Length</name></name><argument_list pos:line="65" pos:column="53">()</argument_list></call><op:operator pos:line="65" pos:column="55">-</op:operator><lit:literal type="number" pos:line="65" pos:column="56">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="66" pos:column="25">stepLength</name> <op:operator pos:line="66" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="66" pos:column="38">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="line" pos:line="70" pos:column="9">// Move step backward</comment>
	<function><type><name pos:line="71" pos:column="9">void</name></type> <name pos:line="71" pos:column="14">BackStep</name><parameter_list pos:line="71" pos:column="22">(<param><decl><type><name pos:line="71" pos:column="23">int</name></type> <name pos:line="71" pos:column="27">partitionDownTo</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="44">{
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name pos:line="72" pos:column="21">stepLength</name> <op:operator pos:line="72" pos:column="32">!=</op:operator> <lit:literal type="number" pos:line="72" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="72" pos:column="37"> <block pos:line="72" pos:column="38">{
			<expr_stmt><expr><call><name><name pos:line="73" pos:column="25">body</name><op:operator pos:line="73" pos:column="29">-&gt;</op:operator><name pos:line="73" pos:column="31">RangeAddDelta</name></name><argument_list pos:line="73" pos:column="44">(<argument><expr><name pos:line="73" pos:column="45">partitionDownTo</name><op:operator pos:line="73" pos:column="60">+</op:operator><lit:literal type="number" pos:line="73" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="64">stepPartition</name><op:operator pos:line="73" pos:column="77">+</op:operator><lit:literal type="number" pos:line="73" pos:column="78">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="73" pos:column="81">-</op:operator><name pos:line="73" pos:column="82">stepLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="75" pos:column="17">stepPartition</name> <op:operator pos:line="75" pos:column="31">=</op:operator> <name pos:line="75" pos:column="33">partitionDownTo</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="78" pos:column="9">void</name></type> <name pos:line="78" pos:column="14">Allocate</name><parameter_list pos:line="78" pos:column="22">(<param><decl><type><name pos:line="78" pos:column="23">int</name></type> <name pos:line="78" pos:column="27">growSize</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="37">{
		<expr_stmt><expr><name pos:line="79" pos:column="17">body</name> <op:operator pos:line="79" pos:column="22">=</op:operator> <op:operator pos:line="79" pos:column="24">new</op:operator> <call><name pos:line="79" pos:column="28">SplitVectorWithRangeAdd</name><argument_list pos:line="79" pos:column="51">(<argument><expr><name pos:line="79" pos:column="52">growSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="80" pos:column="17">stepPartition</name> <op:operator pos:line="80" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="80" pos:column="33">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="81" pos:column="17">stepLength</name> <op:operator pos:line="81" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="81" pos:column="30">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="82" pos:column="17">body</name><op:operator pos:line="82" pos:column="21">-&gt;</op:operator><name pos:line="82" pos:column="23">Insert</name></name><argument_list pos:line="82" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="82" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="82" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="82" pos:column="41">// This value stays 0 for ever</comment>
		<expr_stmt><expr><call><name><name pos:line="83" pos:column="17">body</name><op:operator pos:line="83" pos:column="21">-&gt;</op:operator><name pos:line="83" pos:column="23">Insert</name></name><argument_list pos:line="83" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="83" pos:column="30">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="83" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="83" pos:column="41">// This is the end of the first partition and will be the start of the second</comment>
	}</block></function>

</private><public pos:line="86" pos:column="1">public:
	<constructor><name pos:line="87" pos:column="9">Partitioning</name><parameter_list pos:line="87" pos:column="21">(<param><decl><type><name pos:line="87" pos:column="22">int</name></type> <name pos:line="87" pos:column="26">growSize</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="88" pos:column="17">Allocate</name><argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">growSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<destructor><name pos:line="91" pos:column="9">~<name pos:line="91" pos:column="10">Partitioning</name></name><parameter_list pos:line="91" pos:column="22">()</parameter_list> <block pos:line="91" pos:column="25">{
		<expr_stmt><expr><op:operator pos:line="92" pos:column="17">delete</op:operator> <name pos:line="92" pos:column="24">body</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="93" pos:column="17">body</name> <op:operator pos:line="93" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="93" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	}</block></destructor>

	<function><type><name pos:line="96" pos:column="9">int</name></type> <name pos:line="96" pos:column="13">Partitions</name><parameter_list pos:line="96" pos:column="23">()</parameter_list> <specifier pos:line="96" pos:column="26">const</specifier> <block pos:line="96" pos:column="32">{
		<return pos:line="97" pos:column="17">return <expr><call><name><name pos:line="97" pos:column="24">body</name><op:operator pos:line="97" pos:column="28">-&gt;</op:operator><name pos:line="97" pos:column="30">Length</name></name><argument_list pos:line="97" pos:column="36">()</argument_list></call><op:operator pos:line="97" pos:column="38">-</op:operator><lit:literal type="number" pos:line="97" pos:column="39">1</lit:literal></expr>;</return>
	}</block></function>

	<function><type><name pos:line="100" pos:column="9">void</name></type> <name pos:line="100" pos:column="14">InsertPartition</name><parameter_list pos:line="100" pos:column="29">(<param><decl><type><name pos:line="100" pos:column="30">int</name></type> <name pos:line="100" pos:column="34">partition</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="45">int</name></type> <name pos:line="100" pos:column="49">pos</name></decl></param>)</parameter_list> <block pos:line="100" pos:column="54">{
		<if pos:line="101" pos:column="17">if <condition pos:line="101" pos:column="20">(<expr><name pos:line="101" pos:column="21">stepPartition</name> <op:operator pos:line="101" pos:column="35">&lt;</op:operator> <name pos:line="101" pos:column="37">partition</name></expr>)</condition><then pos:line="101" pos:column="47"> <block pos:line="101" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="102" pos:column="25">ApplyStep</name><argument_list pos:line="102" pos:column="34">(<argument><expr><name pos:line="102" pos:column="35">partition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="104" pos:column="17">body</name><op:operator pos:line="104" pos:column="21">-&gt;</op:operator><name pos:line="104" pos:column="23">Insert</name></name><argument_list pos:line="104" pos:column="29">(<argument><expr><name pos:line="104" pos:column="30">partition</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="41">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="105" pos:column="17">stepPartition</name><op:operator pos:line="105" pos:column="30">++</op:operator></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="108" pos:column="9">void</name></type> <name pos:line="108" pos:column="14">SetPartitionStartPosition</name><parameter_list pos:line="108" pos:column="39">(<param><decl><type><name pos:line="108" pos:column="40">int</name></type> <name pos:line="108" pos:column="44">partition</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="55">int</name></type> <name pos:line="108" pos:column="59">pos</name></decl></param>)</parameter_list> <block pos:line="108" pos:column="64">{
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">ApplyStep</name><argument_list pos:line="109" pos:column="26">(<argument><expr><name pos:line="109" pos:column="27">partition</name><op:operator pos:line="109" pos:column="36">+</op:operator><lit:literal type="number" pos:line="109" pos:column="37">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><op:operator pos:line="110" pos:column="21">(</op:operator><name pos:line="110" pos:column="22">partition</name> <op:operator pos:line="110" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="110" pos:column="34">0</lit:literal><op:operator pos:line="110" pos:column="35">)</op:operator> <op:operator pos:line="110" pos:column="37">||</op:operator> <op:operator pos:line="110" pos:column="40">(</op:operator><name pos:line="110" pos:column="41">partition</name> <op:operator pos:line="110" pos:column="51">&gt;</op:operator> <call><name><name pos:line="110" pos:column="53">body</name><op:operator pos:line="110" pos:column="57">-&gt;</op:operator><name pos:line="110" pos:column="59">Length</name></name><argument_list pos:line="110" pos:column="65">()</argument_list></call><op:operator pos:line="110" pos:column="67">)</op:operator></expr>)</condition><then pos:line="110" pos:column="69"> <block pos:line="110" pos:column="70">{
			<return pos:line="111" pos:column="25">return;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="113" pos:column="17">body</name><op:operator pos:line="113" pos:column="21">-&gt;</op:operator><name pos:line="113" pos:column="23">SetValueAt</name></name><argument_list pos:line="113" pos:column="33">(<argument><expr><name pos:line="113" pos:column="34">partition</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="45">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="116" pos:column="9">void</name></type> <name pos:line="116" pos:column="14">InsertText</name><parameter_list pos:line="116" pos:column="24">(<param><decl><type><name pos:line="116" pos:column="25">int</name></type> <name pos:line="116" pos:column="29">partitionInsert</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="46">int</name></type> <name pos:line="116" pos:column="50">delta</name></decl></param>)</parameter_list> <block pos:line="116" pos:column="57">{
		<comment type="line" pos:line="117" pos:column="17">// Point all the partitions after the insertion point further along in the buffer</comment>
		<if pos:line="118" pos:column="17">if <condition pos:line="118" pos:column="20">(<expr><name pos:line="118" pos:column="21">stepLength</name> <op:operator pos:line="118" pos:column="32">!=</op:operator> <lit:literal type="number" pos:line="118" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="118" pos:column="37"> <block pos:line="118" pos:column="38">{
			<if pos:line="119" pos:column="25">if <condition pos:line="119" pos:column="28">(<expr><name pos:line="119" pos:column="29">partitionInsert</name> <op:operator pos:line="119" pos:column="45">&gt;=</op:operator> <name pos:line="119" pos:column="48">stepPartition</name></expr>)</condition><then pos:line="119" pos:column="62"> <block pos:line="119" pos:column="63">{
				<comment type="line" pos:line="120" pos:column="33">// Fill in up to the new insertion point</comment>
				<expr_stmt><expr><call><name pos:line="121" pos:column="33">ApplyStep</name><argument_list pos:line="121" pos:column="42">(<argument><expr><name pos:line="121" pos:column="43">partitionInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="122" pos:column="33">stepLength</name> <op:operator pos:line="122" pos:column="44">+=</op:operator> <name pos:line="122" pos:column="47">delta</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="123" pos:column="27">else <if pos:line="123" pos:column="32">if <condition pos:line="123" pos:column="35">(<expr><name pos:line="123" pos:column="36">partitionInsert</name> <op:operator pos:line="123" pos:column="52">&gt;=</op:operator> <op:operator pos:line="123" pos:column="55">(</op:operator><name pos:line="123" pos:column="56">stepPartition</name> <op:operator pos:line="123" pos:column="70">-</op:operator> <call><name><name pos:line="123" pos:column="72">body</name><op:operator pos:line="123" pos:column="76">-&gt;</op:operator><name pos:line="123" pos:column="78">Length</name></name><argument_list pos:line="123" pos:column="84">()</argument_list></call> <op:operator pos:line="123" pos:column="87">/</op:operator> <lit:literal type="number" pos:line="123" pos:column="89">10</lit:literal><op:operator pos:line="123" pos:column="91">)</op:operator></expr>)</condition><then pos:line="123" pos:column="93"> <block pos:line="123" pos:column="94">{
				<comment type="line" pos:line="124" pos:column="33">// Close to step but before so move step back</comment>
				<expr_stmt><expr><call><name pos:line="125" pos:column="33">BackStep</name><argument_list pos:line="125" pos:column="41">(<argument><expr><name pos:line="125" pos:column="42">partitionInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="126" pos:column="33">stepLength</name> <op:operator pos:line="126" pos:column="44">+=</op:operator> <name pos:line="126" pos:column="47">delta</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="127" pos:column="27">else <block pos:line="127" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="128" pos:column="33">ApplyStep</name><argument_list pos:line="128" pos:column="42">(<argument><expr><call><name><name pos:line="128" pos:column="43">body</name><op:operator pos:line="128" pos:column="47">-&gt;</op:operator><name pos:line="128" pos:column="49">Length</name></name><argument_list pos:line="128" pos:column="55">()</argument_list></call><op:operator pos:line="128" pos:column="57">-</op:operator><lit:literal type="number" pos:line="128" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="129" pos:column="33">stepPartition</name> <op:operator pos:line="129" pos:column="47">=</op:operator> <name pos:line="129" pos:column="49">partitionInsert</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="130" pos:column="33">stepLength</name> <op:operator pos:line="130" pos:column="44">=</op:operator> <name pos:line="130" pos:column="46">delta</name></expr>;</expr_stmt>
			}</block></else></if></else></if>
		}</block></then> <else pos:line="132" pos:column="19">else <block pos:line="132" pos:column="24">{
			<expr_stmt><expr><name pos:line="133" pos:column="25">stepPartition</name> <op:operator pos:line="133" pos:column="39">=</op:operator> <name pos:line="133" pos:column="41">partitionInsert</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="134" pos:column="25">stepLength</name> <op:operator pos:line="134" pos:column="36">=</op:operator> <name pos:line="134" pos:column="38">delta</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><type><name pos:line="138" pos:column="9">void</name></type> <name pos:line="138" pos:column="14">RemovePartition</name><parameter_list pos:line="138" pos:column="29">(<param><decl><type><name pos:line="138" pos:column="30">int</name></type> <name pos:line="138" pos:column="34">partition</name></decl></param>)</parameter_list> <block pos:line="138" pos:column="45">{
		<if pos:line="139" pos:column="17">if <condition pos:line="139" pos:column="20">(<expr><name pos:line="139" pos:column="21">partition</name> <op:operator pos:line="139" pos:column="31">&gt;</op:operator> <name pos:line="139" pos:column="33">stepPartition</name></expr>)</condition><then pos:line="139" pos:column="47"> <block pos:line="139" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="140" pos:column="25">ApplyStep</name><argument_list pos:line="140" pos:column="34">(<argument><expr><name pos:line="140" pos:column="35">partition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="141" pos:column="25">stepPartition</name><op:operator pos:line="141" pos:column="38">--</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="142" pos:column="19">else <block pos:line="142" pos:column="24">{
			<expr_stmt><expr><name pos:line="143" pos:column="25">stepPartition</name><op:operator pos:line="143" pos:column="38">--</op:operator></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name pos:line="145" pos:column="17">body</name><op:operator pos:line="145" pos:column="21">-&gt;</op:operator><name pos:line="145" pos:column="23">Delete</name></name><argument_list pos:line="145" pos:column="29">(<argument><expr><name pos:line="145" pos:column="30">partition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="148" pos:column="9">int</name></type> <name pos:line="148" pos:column="13">PositionFromPartition</name><parameter_list pos:line="148" pos:column="34">(<param><decl><type><name pos:line="148" pos:column="35">int</name></type> <name pos:line="148" pos:column="39">partition</name></decl></param>)</parameter_list> <specifier pos:line="148" pos:column="50">const</specifier> <block pos:line="148" pos:column="56">{
		<expr_stmt><expr><call><name pos:line="149" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="149" pos:column="32">(<argument><expr><name pos:line="149" pos:column="33">partition</name> <op:operator pos:line="149" pos:column="43">&gt;=</op:operator> <lit:literal type="number" pos:line="149" pos:column="46">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="150" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="150" pos:column="32">(<argument><expr><name pos:line="150" pos:column="33">partition</name> <op:operator pos:line="150" pos:column="43">&lt;</op:operator> <call><name><name pos:line="150" pos:column="45">body</name><op:operator pos:line="150" pos:column="49">-&gt;</op:operator><name pos:line="150" pos:column="51">Length</name></name><argument_list pos:line="150" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="151" pos:column="17">if <condition pos:line="151" pos:column="20">(<expr><op:operator pos:line="151" pos:column="21">(</op:operator><name pos:line="151" pos:column="22">partition</name> <op:operator pos:line="151" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="151" pos:column="34">0</lit:literal><op:operator pos:line="151" pos:column="35">)</op:operator> <op:operator pos:line="151" pos:column="37">||</op:operator> <op:operator pos:line="151" pos:column="40">(</op:operator><name pos:line="151" pos:column="41">partition</name> <op:operator pos:line="151" pos:column="51">&gt;=</op:operator> <call><name><name pos:line="151" pos:column="54">body</name><op:operator pos:line="151" pos:column="58">-&gt;</op:operator><name pos:line="151" pos:column="60">Length</name></name><argument_list pos:line="151" pos:column="66">()</argument_list></call><op:operator pos:line="151" pos:column="68">)</op:operator></expr>)</condition><then pos:line="151" pos:column="70"> <block pos:line="151" pos:column="71">{
			<return pos:line="152" pos:column="25">return <expr><lit:literal type="number" pos:line="152" pos:column="32">0</lit:literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="154" pos:column="17">int</name></type> <name pos:line="154" pos:column="21">pos</name> <init pos:line="154" pos:column="25">= <expr><call><name><name pos:line="154" pos:column="27">body</name><op:operator pos:line="154" pos:column="31">-&gt;</op:operator><name pos:line="154" pos:column="33">ValueAt</name></name><argument_list pos:line="154" pos:column="40">(<argument><expr><name pos:line="154" pos:column="41">partition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><name pos:line="155" pos:column="21">partition</name> <op:operator pos:line="155" pos:column="31">&gt;</op:operator> <name pos:line="155" pos:column="33">stepPartition</name></expr>)</condition><then pos:line="155" pos:column="47">
			<expr_stmt><expr><name pos:line="156" pos:column="25">pos</name> <op:operator pos:line="156" pos:column="29">+=</op:operator> <name pos:line="156" pos:column="32">stepLength</name></expr>;</expr_stmt></then></if>
		<return pos:line="157" pos:column="17">return <expr><name pos:line="157" pos:column="24">pos</name></expr>;</return>
	}</block></function>

	<comment type="line" format="doxygen" pos:line="160" pos:column="9">/// Return value in range [0 .. Partitions() - 1] even for arguments outside interval</comment>
	<function><type><name pos:line="161" pos:column="9">int</name></type> <name pos:line="161" pos:column="13">PartitionFromPosition</name><parameter_list pos:line="161" pos:column="34">(<param><decl><type><name pos:line="161" pos:column="35">int</name></type> <name pos:line="161" pos:column="39">pos</name></decl></param>)</parameter_list> <specifier pos:line="161" pos:column="44">const</specifier> <block pos:line="161" pos:column="50">{
		<if pos:line="162" pos:column="17">if <condition pos:line="162" pos:column="20">(<expr><call><name><name pos:line="162" pos:column="21">body</name><op:operator pos:line="162" pos:column="25">-&gt;</op:operator><name pos:line="162" pos:column="27">Length</name></name><argument_list pos:line="162" pos:column="33">()</argument_list></call> <op:operator pos:line="162" pos:column="36">&lt;=</op:operator> <lit:literal type="number" pos:line="162" pos:column="39">1</lit:literal></expr>)</condition><then pos:line="162" pos:column="41">
			<return pos:line="163" pos:column="25">return <expr><lit:literal type="number" pos:line="163" pos:column="32">0</lit:literal></expr>;</return></then></if>
		<if pos:line="164" pos:column="17">if <condition pos:line="164" pos:column="20">(<expr><name pos:line="164" pos:column="21">pos</name> <op:operator pos:line="164" pos:column="25">&gt;=</op:operator> <op:operator pos:line="164" pos:column="28">(</op:operator><call><name pos:line="164" pos:column="29">PositionFromPartition</name><argument_list pos:line="164" pos:column="50">(<argument><expr><call><name><name pos:line="164" pos:column="51">body</name><op:operator pos:line="164" pos:column="55">-&gt;</op:operator><name pos:line="164" pos:column="57">Length</name></name><argument_list pos:line="164" pos:column="63">()</argument_list></call><op:operator pos:line="164" pos:column="65">-</op:operator><lit:literal type="number" pos:line="164" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="164" pos:column="68">)</op:operator></expr>)</condition><then pos:line="164" pos:column="70">
			<return pos:line="165" pos:column="25">return <expr><call><name><name pos:line="165" pos:column="32">body</name><op:operator pos:line="165" pos:column="36">-&gt;</op:operator><name pos:line="165" pos:column="38">Length</name></name><argument_list pos:line="165" pos:column="44">()</argument_list></call> <op:operator pos:line="165" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="165" pos:column="49">1</lit:literal> <op:operator pos:line="165" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="165" pos:column="53">1</lit:literal></expr>;</return></then></if>
		<decl_stmt><decl><type><name pos:line="166" pos:column="17">int</name></type> <name pos:line="166" pos:column="21">lower</name> <init pos:line="166" pos:column="27">= <expr><lit:literal type="number" pos:line="166" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="167" pos:column="17">int</name></type> <name pos:line="167" pos:column="21">upper</name> <init pos:line="167" pos:column="27">= <expr><call><name><name pos:line="167" pos:column="29">body</name><op:operator pos:line="167" pos:column="33">-&gt;</op:operator><name pos:line="167" pos:column="35">Length</name></name><argument_list pos:line="167" pos:column="41">()</argument_list></call><op:operator pos:line="167" pos:column="43">-</op:operator><lit:literal type="number" pos:line="167" pos:column="44">1</lit:literal></expr></init></decl>;</decl_stmt>
		<do pos:line="168" pos:column="17">do <block pos:line="168" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="169" pos:column="25">int</name></type> <name pos:line="169" pos:column="29">middle</name> <init pos:line="169" pos:column="36">= <expr><op:operator pos:line="169" pos:column="38">(</op:operator><name pos:line="169" pos:column="39">upper</name> <op:operator pos:line="169" pos:column="45">+</op:operator> <name pos:line="169" pos:column="47">lower</name> <op:operator pos:line="169" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="169" pos:column="55">1</lit:literal><op:operator pos:line="169" pos:column="56">)</op:operator> <op:operator pos:line="169" pos:column="58">/</op:operator> <lit:literal type="number" pos:line="169" pos:column="60">2</lit:literal></expr></init></decl>;</decl_stmt> 	<comment type="line" pos:line="169" pos:column="65">// Round high</comment>
			<decl_stmt><decl><type><name pos:line="170" pos:column="25">int</name></type> <name pos:line="170" pos:column="29">posMiddle</name> <init pos:line="170" pos:column="39">= <expr><call><name><name pos:line="170" pos:column="41">body</name><op:operator pos:line="170" pos:column="45">-&gt;</op:operator><name pos:line="170" pos:column="47">ValueAt</name></name><argument_list pos:line="170" pos:column="54">(<argument><expr><name pos:line="170" pos:column="55">middle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="171" pos:column="25">if <condition pos:line="171" pos:column="28">(<expr><name pos:line="171" pos:column="29">middle</name> <op:operator pos:line="171" pos:column="36">&gt;</op:operator> <name pos:line="171" pos:column="38">stepPartition</name></expr>)</condition><then pos:line="171" pos:column="52">
				<expr_stmt><expr><name pos:line="172" pos:column="33">posMiddle</name> <op:operator pos:line="172" pos:column="43">+=</op:operator> <name pos:line="172" pos:column="46">stepLength</name></expr>;</expr_stmt></then></if>
			<if pos:line="173" pos:column="25">if <condition pos:line="173" pos:column="28">(<expr><name pos:line="173" pos:column="29">pos</name> <op:operator pos:line="173" pos:column="33">&lt;</op:operator> <name pos:line="173" pos:column="35">posMiddle</name></expr>)</condition><then pos:line="173" pos:column="45"> <block pos:line="173" pos:column="46">{
				<expr_stmt><expr><name pos:line="174" pos:column="33">upper</name> <op:operator pos:line="174" pos:column="39">=</op:operator> <name pos:line="174" pos:column="41">middle</name> <op:operator pos:line="174" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="174" pos:column="50">1</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="175" pos:column="27">else <block pos:line="175" pos:column="32">{
				<expr_stmt><expr><name pos:line="176" pos:column="33">lower</name> <op:operator pos:line="176" pos:column="39">=</op:operator> <name pos:line="176" pos:column="41">middle</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block> while <condition pos:line="178" pos:column="25">(<expr><name pos:line="178" pos:column="26">lower</name> <op:operator pos:line="178" pos:column="32">&lt;</op:operator> <name pos:line="178" pos:column="34">upper</name></expr>)</condition>;</do>
		<return pos:line="179" pos:column="17">return <expr><name pos:line="179" pos:column="24">lower</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="182" pos:column="9">void</name></type> <name pos:line="182" pos:column="14">DeleteAll</name><parameter_list pos:line="182" pos:column="23">()</parameter_list> <block pos:line="182" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="183" pos:column="17">int</name></type> <name pos:line="183" pos:column="21">growSize</name> <init pos:line="183" pos:column="30">= <expr><call><name><name pos:line="183" pos:column="32">body</name><op:operator pos:line="183" pos:column="36">-&gt;</op:operator><name pos:line="183" pos:column="38">GetGrowSize</name></name><argument_list pos:line="183" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><op:operator pos:line="184" pos:column="17">delete</op:operator> <name pos:line="184" pos:column="24">body</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="185" pos:column="17">Allocate</name><argument_list pos:line="185" pos:column="25">(<argument><expr><name pos:line="185" pos:column="26">growSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</class>

<cpp:endif pos:line="189" pos:column="1">#<cpp:directive pos:line="189" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
