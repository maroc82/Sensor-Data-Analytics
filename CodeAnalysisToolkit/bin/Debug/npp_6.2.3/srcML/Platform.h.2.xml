<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\include\Platform.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file Platform.h
 ** Interface to platform facilities. Also includes some basic utilities.
 ** Implemented in PlatGTK.cxx for GTK+/Linux, PlatWin.cxx for Windows, and PlatWX.cxx for wxWindows.
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2009 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifndef</cpp:directive> <name pos:line="9" pos:column="9">PLATFORM_H</name></cpp:ifndef>
<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">PLATFORM_H</name></cpp:macro></cpp:define>

<comment type="line" pos:line="12" pos:column="1">// PLAT_GTK = GTK+ on Linux or Win32</comment>
<comment type="line" pos:line="13" pos:column="1">// PLAT_GTK_WIN32 is defined additionally when running PLAT_GTK under Win32</comment>
<comment type="line" pos:line="14" pos:column="1">// PLAT_WIN = Win32 API on Win32 OS</comment>
<comment type="line" pos:line="15" pos:column="1">// PLAT_WX is wxWindows on any supported platform</comment>

<cpp:define pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="17" pos:column="9">PLAT_GTK</name></cpp:macro> <cpp:value pos:line="17" pos:column="18">0</cpp:value></cpp:define>
<cpp:define pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="18" pos:column="9">PLAT_GTK_WIN32</name></cpp:macro> <cpp:value pos:line="18" pos:column="24">0</cpp:value></cpp:define>
<cpp:define pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="19" pos:column="9">PLAT_MACOSX</name></cpp:macro> <cpp:value pos:line="19" pos:column="21">0</cpp:value></cpp:define>
<cpp:define pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="20" pos:column="9">PLAT_WIN</name></cpp:macro> <cpp:value pos:line="20" pos:column="18">0</cpp:value></cpp:define>
<cpp:define pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="21" pos:column="9">PLAT_WX</name></cpp:macro>  <cpp:value pos:line="21" pos:column="18">0</cpp:value></cpp:define>
<cpp:define pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="22" pos:column="9">PLAT_FOX</name></cpp:macro> <cpp:value pos:line="22" pos:column="18">0</cpp:value></cpp:define>

<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if</cpp:directive> <expr><call><name pos:line="24" pos:column="5">defined</name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">FOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">undef</cpp:directive> <name pos:line="25" pos:column="8">PLAT_FOX</name></cpp:undef>
<cpp:define pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="26" pos:column="9">PLAT_FOX</name></cpp:macro> <cpp:value pos:line="26" pos:column="18">1</cpp:value></cpp:define>

<cpp:elif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">elif</cpp:directive> <expr><call><name pos:line="28" pos:column="7">defined</name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">__WX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:undef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">undef</cpp:directive> <name pos:line="29" pos:column="8">PLAT_WX</name></cpp:undef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">PLAT_WX</name></cpp:macro>  <cpp:value pos:line="30" pos:column="18">1</cpp:value></cpp:define>

<cpp:elif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">elif</cpp:directive> <expr><call><name pos:line="32" pos:column="7">defined</name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">GTK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:undef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">undef</cpp:directive> <name pos:line="33" pos:column="8">PLAT_GTK</name></cpp:undef>
<cpp:define pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="34" pos:column="9">PLAT_GTK</name></cpp:macro> <cpp:value pos:line="34" pos:column="18">1</cpp:value></cpp:define>

<cpp:if pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">if</cpp:directive> <expr><call><name pos:line="36" pos:column="5">defined</name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">__WIN32__</name></expr></argument>)</argument_list></call> <op:operator pos:line="36" pos:column="24">||</op:operator> <call><name pos:line="36" pos:column="27">defined</name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">undef</cpp:directive> <name pos:line="37" pos:column="8">PLAT_GTK_WIN32</name></cpp:undef>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">PLAT_GTK_WIN32</name></cpp:macro> <cpp:value pos:line="38" pos:column="24">1</cpp:value></cpp:define>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:elif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">elif</cpp:directive> <expr><call><name pos:line="41" pos:column="7">defined</name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:undef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">undef</cpp:directive> <name pos:line="43" pos:column="8">PLAT_MACOSX</name></cpp:undef>
<cpp:define pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="44" pos:column="9">PLAT_MACOSX</name></cpp:macro> <cpp:value pos:line="44" pos:column="21">1</cpp:value></cpp:define>

<cpp:else pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">else</cpp:directive></cpp:else>
<cpp:undef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">undef</cpp:directive> <name pos:line="47" pos:column="8">PLAT_WIN</name></cpp:undef>
<cpp:define pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="48" pos:column="9">PLAT_WIN</name></cpp:macro> <cpp:value pos:line="48" pos:column="18">1</cpp:value></cpp:define>

<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">ifdef</cpp:directive> <name pos:line="52" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="53" pos:column="1">namespace <name pos:line="53" pos:column="11">Scintilla</name> <block pos:line="53" pos:column="21">{
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="56" pos:column="1">// Underlying the implementation of the platform classes are platform specific types.</comment>
<comment type="line" pos:line="57" pos:column="1">// Sometimes these need to be passed around by client code so they are defined here</comment>

<typedef pos:line="59" pos:column="1">typedef <type><name pos:line="59" pos:column="9">void</name> <type:modifier pos:line="59" pos:column="14">*</type:modifier></type><name pos:line="59" pos:column="15">FontID</name>;</typedef>
<typedef pos:line="60" pos:column="1">typedef <type><name pos:line="60" pos:column="9">void</name> <type:modifier pos:line="60" pos:column="14">*</type:modifier></type><name pos:line="60" pos:column="15">SurfaceID</name>;</typedef>
<typedef pos:line="61" pos:column="1">typedef <type><name pos:line="61" pos:column="9">void</name> <type:modifier pos:line="61" pos:column="14">*</type:modifier></type><name pos:line="61" pos:column="15">WindowID</name>;</typedef>
<typedef pos:line="62" pos:column="1">typedef <type><name pos:line="62" pos:column="9">void</name> <type:modifier pos:line="62" pos:column="14">*</type:modifier></type><name pos:line="62" pos:column="15">MenuID</name>;</typedef>
<typedef pos:line="63" pos:column="1">typedef <type><name pos:line="63" pos:column="9">void</name> <type:modifier pos:line="63" pos:column="14">*</type:modifier></type><name pos:line="63" pos:column="15">TickerID</name>;</typedef>
<typedef pos:line="64" pos:column="1">typedef <type><name pos:line="64" pos:column="9">void</name> <type:modifier pos:line="64" pos:column="14">*</type:modifier></type><name pos:line="64" pos:column="15">Function</name>;</typedef>
<typedef pos:line="65" pos:column="1">typedef <type><name pos:line="65" pos:column="9">void</name> <type:modifier pos:line="65" pos:column="14">*</type:modifier></type><name pos:line="65" pos:column="15">IdlerID</name>;</typedef>

<comment type="block" format="doxygen" pos:line="67" pos:column="1">/**
 * A geometric point class.
 * Point is exactly the same as the Win32 POINT and GTK+ GdkPoint so can be used interchangeably.
 */</comment>
<class pos:line="71" pos:column="1">class <name pos:line="71" pos:column="7">Point</name> <block pos:line="71" pos:column="13">{<private type="default" pos:line="71" pos:column="14">
</private><public pos:line="72" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">int</name></type> <name pos:line="73" pos:column="13">x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">int</name></type> <name pos:line="74" pos:column="13">y</name></decl>;</decl_stmt>

	<constructor><specifier pos:line="76" pos:column="9">explicit</specifier> <name pos:line="76" pos:column="18">Point</name><parameter_list pos:line="76" pos:column="23">(<param><decl><type><name pos:line="76" pos:column="24">int</name></type> <name pos:line="76" pos:column="28">x_</name><init pos:line="76" pos:column="30">=<expr><lit:literal type="number" pos:line="76" pos:column="31">0</lit:literal></expr></init></decl></param>, <name pos:line="76" pos:column="34">int</name> <name pos:line="76" pos:column="38">y_</name><op:operator pos:line="76" pos:column="40">=</op:operator><lit:literal type="number" pos:line="76" pos:column="41">0</lit:literal>)</parameter_list> <member_list pos:line="76" pos:column="44">: <call><name pos:line="76" pos:column="46">x</name><argument_list pos:line="76" pos:column="47">(<argument><expr><name pos:line="76" pos:column="48">x_</name></expr></argument>)</argument_list></call><op:operator pos:line="76" pos:column="51">,</op:operator> <call><name pos:line="76" pos:column="53">y</name><argument_list pos:line="76" pos:column="54">(<argument><expr><name pos:line="76" pos:column="55">y_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="76" pos:column="59">{
	}</block></constructor>

	<comment type="line" pos:line="79" pos:column="9">// Other automatically defined methods (assignment, copy constructor, destructor) are fine</comment>

	<function_decl><type><specifier pos:line="81" pos:column="9">static</specifier> <name pos:line="81" pos:column="16">Point</name></type> <name pos:line="81" pos:column="22">FromLong</name><parameter_list pos:line="81" pos:column="30">(<param><decl><type><name pos:line="81" pos:column="31">long</name></type> <name pos:line="81" pos:column="36">lpoint</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="84" pos:column="1">/**
 * A geometric rectangle class.
 * PRectangle is exactly the same as the Win32 RECT so can be used interchangeably.
 * PRectangles contain their top and left sides, but not their right and bottom sides.
 */</comment>
<class pos:line="89" pos:column="1">class <name pos:line="89" pos:column="7">PRectangle</name> <block pos:line="89" pos:column="18">{<private type="default" pos:line="89" pos:column="19">
</private><public pos:line="90" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="91" pos:column="9">int</name></type> <name pos:line="91" pos:column="13">left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="92" pos:column="9">int</name></type> <name pos:line="92" pos:column="13">top</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">int</name></type> <name pos:line="93" pos:column="13">right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="94" pos:column="9">int</name></type> <name pos:line="94" pos:column="13">bottom</name></decl>;</decl_stmt>

	<constructor><name pos:line="96" pos:column="9">PRectangle</name><parameter_list pos:line="96" pos:column="19">(<param><decl><type><name pos:line="96" pos:column="20">int</name></type> <name pos:line="96" pos:column="24">left_</name><init pos:line="96" pos:column="29">=<expr><lit:literal type="number" pos:line="96" pos:column="30">0</lit:literal></expr></init></decl></param>, <name pos:line="96" pos:column="33">int</name> <name pos:line="96" pos:column="37">top_</name><op:operator pos:line="96" pos:column="41">=</op:operator><lit:literal type="number" pos:line="96" pos:column="42">0</lit:literal>, <name pos:line="96" pos:column="45">int</name> <name pos:line="96" pos:column="49">right_</name><op:operator pos:line="96" pos:column="55">=</op:operator><lit:literal type="number" pos:line="96" pos:column="56">0</lit:literal>, <name pos:line="96" pos:column="59">int</name> <name pos:line="96" pos:column="63">bottom_</name> <op:operator pos:line="96" pos:column="71">=</op:operator> <lit:literal type="number" pos:line="96" pos:column="73">0</lit:literal>)</parameter_list> <member_list pos:line="96" pos:column="76">:
		<call><name pos:line="97" pos:column="17">left</name><argument_list pos:line="97" pos:column="21">(<argument><expr><name pos:line="97" pos:column="22">left_</name></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="28">,</op:operator> <call><name pos:line="97" pos:column="30">top</name><argument_list pos:line="97" pos:column="33">(<argument><expr><name pos:line="97" pos:column="34">top_</name></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="39">,</op:operator> <call><name pos:line="97" pos:column="41">right</name><argument_list pos:line="97" pos:column="46">(<argument><expr><name pos:line="97" pos:column="47">right_</name></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="54">,</op:operator> <call><name pos:line="97" pos:column="56">bottom</name><argument_list pos:line="97" pos:column="62">(<argument><expr><name pos:line="97" pos:column="63">bottom_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="97" pos:column="72">{
	}</block></constructor>

	<comment type="line" pos:line="100" pos:column="9">// Other automatically defined methods (assignment, copy constructor, destructor) are fine</comment>

	<function><type><name pos:line="102" pos:column="9">bool</name></type> <name pos:line="102" pos:column="14">operator==</name><parameter_list pos:line="102" pos:column="24">(<param><decl><type><name pos:line="102" pos:column="25">PRectangle</name> <type:modifier pos:line="102" pos:column="36">&amp;</type:modifier></type><name pos:line="102" pos:column="37">rc</name></decl></param>)</parameter_list> <block pos:line="102" pos:column="41">{
		<return pos:line="103" pos:column="17">return <expr><op:operator pos:line="103" pos:column="24">(</op:operator><name><name pos:line="103" pos:column="25">rc</name><op:operator pos:line="103" pos:column="27">.</op:operator><name pos:line="103" pos:column="28">left</name></name> <op:operator pos:line="103" pos:column="33">==</op:operator> <name pos:line="103" pos:column="36">left</name><op:operator pos:line="103" pos:column="40">)</op:operator> <op:operator pos:line="103" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="103" pos:column="45">(</op:operator><name><name pos:line="103" pos:column="46">rc</name><op:operator pos:line="103" pos:column="48">.</op:operator><name pos:line="103" pos:column="49">right</name></name> <op:operator pos:line="103" pos:column="55">==</op:operator> <name pos:line="103" pos:column="58">right</name><op:operator pos:line="103" pos:column="63">)</op:operator> <op:operator pos:line="103" pos:column="65">&amp;&amp;</op:operator>
			<op:operator pos:line="104" pos:column="25">(</op:operator><name><name pos:line="104" pos:column="26">rc</name><op:operator pos:line="104" pos:column="28">.</op:operator><name pos:line="104" pos:column="29">top</name></name> <op:operator pos:line="104" pos:column="33">==</op:operator> <name pos:line="104" pos:column="36">top</name><op:operator pos:line="104" pos:column="39">)</op:operator> <op:operator pos:line="104" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="104" pos:column="44">(</op:operator><name><name pos:line="104" pos:column="45">rc</name><op:operator pos:line="104" pos:column="47">.</op:operator><name pos:line="104" pos:column="48">bottom</name></name> <op:operator pos:line="104" pos:column="55">==</op:operator> <name pos:line="104" pos:column="58">bottom</name><op:operator pos:line="104" pos:column="64">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><name pos:line="106" pos:column="9">bool</name></type> <name pos:line="106" pos:column="14">Contains</name><parameter_list pos:line="106" pos:column="22">(<param><decl><type><name pos:line="106" pos:column="23">Point</name></type> <name pos:line="106" pos:column="29">pt</name></decl></param>)</parameter_list> <block pos:line="106" pos:column="33">{
		<return pos:line="107" pos:column="17">return <expr><op:operator pos:line="107" pos:column="24">(</op:operator><name><name pos:line="107" pos:column="25">pt</name><op:operator pos:line="107" pos:column="27">.</op:operator><name pos:line="107" pos:column="28">x</name></name> <op:operator pos:line="107" pos:column="30">&gt;=</op:operator> <name pos:line="107" pos:column="33">left</name><op:operator pos:line="107" pos:column="37">)</op:operator> <op:operator pos:line="107" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="107" pos:column="42">(</op:operator><name><name pos:line="107" pos:column="43">pt</name><op:operator pos:line="107" pos:column="45">.</op:operator><name pos:line="107" pos:column="46">x</name></name> <op:operator pos:line="107" pos:column="48">&lt;=</op:operator> <name pos:line="107" pos:column="51">right</name><op:operator pos:line="107" pos:column="56">)</op:operator> <op:operator pos:line="107" pos:column="58">&amp;&amp;</op:operator>
			<op:operator pos:line="108" pos:column="25">(</op:operator><name><name pos:line="108" pos:column="26">pt</name><op:operator pos:line="108" pos:column="28">.</op:operator><name pos:line="108" pos:column="29">y</name></name> <op:operator pos:line="108" pos:column="31">&gt;=</op:operator> <name pos:line="108" pos:column="34">top</name><op:operator pos:line="108" pos:column="37">)</op:operator> <op:operator pos:line="108" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="108" pos:column="42">(</op:operator><name><name pos:line="108" pos:column="43">pt</name><op:operator pos:line="108" pos:column="45">.</op:operator><name pos:line="108" pos:column="46">y</name></name> <op:operator pos:line="108" pos:column="48">&lt;=</op:operator> <name pos:line="108" pos:column="51">bottom</name><op:operator pos:line="108" pos:column="57">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><name pos:line="110" pos:column="9">bool</name></type> <name pos:line="110" pos:column="14">Contains</name><parameter_list pos:line="110" pos:column="22">(<param><decl><type><name pos:line="110" pos:column="23">PRectangle</name></type> <name pos:line="110" pos:column="34">rc</name></decl></param>)</parameter_list> <block pos:line="110" pos:column="38">{
		<return pos:line="111" pos:column="17">return <expr><op:operator pos:line="111" pos:column="24">(</op:operator><name><name pos:line="111" pos:column="25">rc</name><op:operator pos:line="111" pos:column="27">.</op:operator><name pos:line="111" pos:column="28">left</name></name> <op:operator pos:line="111" pos:column="33">&gt;=</op:operator> <name pos:line="111" pos:column="36">left</name><op:operator pos:line="111" pos:column="40">)</op:operator> <op:operator pos:line="111" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="111" pos:column="45">(</op:operator><name><name pos:line="111" pos:column="46">rc</name><op:operator pos:line="111" pos:column="48">.</op:operator><name pos:line="111" pos:column="49">right</name></name> <op:operator pos:line="111" pos:column="55">&lt;=</op:operator> <name pos:line="111" pos:column="58">right</name><op:operator pos:line="111" pos:column="63">)</op:operator> <op:operator pos:line="111" pos:column="65">&amp;&amp;</op:operator>
			<op:operator pos:line="112" pos:column="25">(</op:operator><name><name pos:line="112" pos:column="26">rc</name><op:operator pos:line="112" pos:column="28">.</op:operator><name pos:line="112" pos:column="29">top</name></name> <op:operator pos:line="112" pos:column="33">&gt;=</op:operator> <name pos:line="112" pos:column="36">top</name><op:operator pos:line="112" pos:column="39">)</op:operator> <op:operator pos:line="112" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="112" pos:column="44">(</op:operator><name><name pos:line="112" pos:column="45">rc</name><op:operator pos:line="112" pos:column="47">.</op:operator><name pos:line="112" pos:column="48">bottom</name></name> <op:operator pos:line="112" pos:column="55">&lt;=</op:operator> <name pos:line="112" pos:column="58">bottom</name><op:operator pos:line="112" pos:column="64">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><name pos:line="114" pos:column="9">bool</name></type> <name pos:line="114" pos:column="14">Intersects</name><parameter_list pos:line="114" pos:column="24">(<param><decl><type><name pos:line="114" pos:column="25">PRectangle</name></type> <name pos:line="114" pos:column="36">other</name></decl></param>)</parameter_list> <block pos:line="114" pos:column="43">{
		<return pos:line="115" pos:column="17">return <expr><op:operator pos:line="115" pos:column="24">(</op:operator><name pos:line="115" pos:column="25">right</name> <op:operator pos:line="115" pos:column="31">&gt;</op:operator> <name><name pos:line="115" pos:column="33">other</name><op:operator pos:line="115" pos:column="38">.</op:operator><name pos:line="115" pos:column="39">left</name></name><op:operator pos:line="115" pos:column="43">)</op:operator> <op:operator pos:line="115" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="115" pos:column="48">(</op:operator><name pos:line="115" pos:column="49">left</name> <op:operator pos:line="115" pos:column="54">&lt;</op:operator> <name><name pos:line="115" pos:column="56">other</name><op:operator pos:line="115" pos:column="61">.</op:operator><name pos:line="115" pos:column="62">right</name></name><op:operator pos:line="115" pos:column="67">)</op:operator> <op:operator pos:line="115" pos:column="69">&amp;&amp;</op:operator>
			<op:operator pos:line="116" pos:column="25">(</op:operator><name pos:line="116" pos:column="26">bottom</name> <op:operator pos:line="116" pos:column="33">&gt;</op:operator> <name><name pos:line="116" pos:column="35">other</name><op:operator pos:line="116" pos:column="40">.</op:operator><name pos:line="116" pos:column="41">top</name></name><op:operator pos:line="116" pos:column="44">)</op:operator> <op:operator pos:line="116" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="116" pos:column="49">(</op:operator><name pos:line="116" pos:column="50">top</name> <op:operator pos:line="116" pos:column="54">&lt;</op:operator> <name><name pos:line="116" pos:column="56">other</name><op:operator pos:line="116" pos:column="61">.</op:operator><name pos:line="116" pos:column="62">bottom</name></name><op:operator pos:line="116" pos:column="68">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><name pos:line="118" pos:column="9">void</name></type> <name pos:line="118" pos:column="14">Move</name><parameter_list pos:line="118" pos:column="18">(<param><decl><type><name pos:line="118" pos:column="19">int</name></type> <name pos:line="118" pos:column="23">xDelta</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="31">int</name></type> <name pos:line="118" pos:column="35">yDelta</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="43">{
		<expr_stmt><expr><name pos:line="119" pos:column="17">left</name> <op:operator pos:line="119" pos:column="22">+=</op:operator> <name pos:line="119" pos:column="25">xDelta</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="120" pos:column="17">top</name> <op:operator pos:line="120" pos:column="21">+=</op:operator> <name pos:line="120" pos:column="24">yDelta</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="121" pos:column="17">right</name> <op:operator pos:line="121" pos:column="23">+=</op:operator> <name pos:line="121" pos:column="26">xDelta</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="122" pos:column="17">bottom</name> <op:operator pos:line="122" pos:column="24">+=</op:operator> <name pos:line="122" pos:column="27">yDelta</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="124" pos:column="9">int</name></type> <name pos:line="124" pos:column="13">Width</name><parameter_list pos:line="124" pos:column="18">()</parameter_list> <block pos:line="124" pos:column="21">{ <return pos:line="124" pos:column="23">return <expr><name pos:line="124" pos:column="30">right</name> <op:operator pos:line="124" pos:column="36">-</op:operator> <name pos:line="124" pos:column="38">left</name></expr>;</return> }</block></function>
	<function><type><name pos:line="125" pos:column="9">int</name></type> <name pos:line="125" pos:column="13">Height</name><parameter_list pos:line="125" pos:column="19">()</parameter_list> <block pos:line="125" pos:column="22">{ <return pos:line="125" pos:column="24">return <expr><name pos:line="125" pos:column="31">bottom</name> <op:operator pos:line="125" pos:column="38">-</op:operator> <name pos:line="125" pos:column="40">top</name></expr>;</return> }</block></function>
	<function><type><name pos:line="126" pos:column="9">bool</name></type> <name pos:line="126" pos:column="14">Empty</name><parameter_list pos:line="126" pos:column="19">()</parameter_list> <block pos:line="126" pos:column="22">{
		<return pos:line="127" pos:column="17">return <expr><op:operator pos:line="127" pos:column="24">(</op:operator><call><name pos:line="127" pos:column="25">Height</name><argument_list pos:line="127" pos:column="31">()</argument_list></call> <op:operator pos:line="127" pos:column="34">&lt;=</op:operator> <lit:literal type="number" pos:line="127" pos:column="37">0</lit:literal><op:operator pos:line="127" pos:column="38">)</op:operator> <op:operator pos:line="127" pos:column="40">||</op:operator> <op:operator pos:line="127" pos:column="43">(</op:operator><call><name pos:line="127" pos:column="44">Width</name><argument_list pos:line="127" pos:column="49">()</argument_list></call> <op:operator pos:line="127" pos:column="52">&lt;=</op:operator> <lit:literal type="number" pos:line="127" pos:column="55">0</lit:literal><op:operator pos:line="127" pos:column="56">)</op:operator></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="131" pos:column="1">/**
 * In some circumstances, including Win32 in paletted mode and GTK+, each colour
 * must be allocated before use. The desired colours are held in the ColourDesired class,
 * and after allocation the allocation entry is stored in the ColourAllocated class. In other
 * circumstances, such as Win32 in true colour mode, the allocation process just copies
 * the RGB values from the desired to the allocated class.
 * As each desired colour requires allocation before it can be used, the ColourPair class
 * holds both a ColourDesired and a ColourAllocated
 * The Palette class is responsible for managing the palette of colours which contains a
 * list of ColourPair objects and performs the allocation.
 */</comment>

<comment type="block" format="doxygen" pos:line="143" pos:column="1">/**
 * Holds a desired RGB colour.
 */</comment>
<class pos:line="146" pos:column="1">class <name pos:line="146" pos:column="7">ColourDesired</name> <block pos:line="146" pos:column="21">{<private type="default" pos:line="146" pos:column="22">
	<decl_stmt><decl><type><name pos:line="147" pos:column="9">long</name></type> <name pos:line="147" pos:column="14">co</name></decl>;</decl_stmt>
</private><public pos:line="148" pos:column="1">public:
	<constructor><name pos:line="149" pos:column="9">ColourDesired</name><parameter_list pos:line="149" pos:column="22">(<param><decl><type><name pos:line="149" pos:column="23">long</name></type> <name pos:line="149" pos:column="28">lcol</name><init pos:line="149" pos:column="32">=<expr><lit:literal type="number" pos:line="149" pos:column="33">0</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="149" pos:column="36">{
		<expr_stmt><expr><name pos:line="150" pos:column="17">co</name> <op:operator pos:line="150" pos:column="20">=</op:operator> <name pos:line="150" pos:column="22">lcol</name></expr>;</expr_stmt>
	}</block></constructor>

	<constructor><name pos:line="153" pos:column="9">ColourDesired</name><parameter_list pos:line="153" pos:column="22">(<param><decl><type><name pos:line="153" pos:column="23">unsigned</name> <name pos:line="153" pos:column="32">int</name></type> <name pos:line="153" pos:column="36">red</name></decl></param>, <param><decl><type><name pos:line="153" pos:column="41">unsigned</name> <name pos:line="153" pos:column="50">int</name></type> <name pos:line="153" pos:column="54">green</name></decl></param>, <param><decl><type><name pos:line="153" pos:column="61">unsigned</name> <name pos:line="153" pos:column="70">int</name></type> <name pos:line="153" pos:column="74">blue</name></decl></param>)</parameter_list> <block pos:line="153" pos:column="80">{
		<expr_stmt><expr><call><name pos:line="154" pos:column="17">Set</name><argument_list pos:line="154" pos:column="20">(<argument><expr><name pos:line="154" pos:column="21">red</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="26">green</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="33">blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><name pos:line="157" pos:column="9">bool</name></type> <name pos:line="157" pos:column="14">operator==</name><parameter_list pos:line="157" pos:column="24">(<param><decl><type><specifier pos:line="157" pos:column="25">const</specifier> <name pos:line="157" pos:column="31">ColourDesired</name> <type:modifier pos:line="157" pos:column="45">&amp;</type:modifier></type><name pos:line="157" pos:column="46">other</name></decl></param>)</parameter_list> <specifier pos:line="157" pos:column="53">const</specifier> <block pos:line="157" pos:column="59">{
		<return pos:line="158" pos:column="17">return <expr><name pos:line="158" pos:column="24">co</name> <op:operator pos:line="158" pos:column="27">==</op:operator> <name><name pos:line="158" pos:column="30">other</name><op:operator pos:line="158" pos:column="35">.</op:operator><name pos:line="158" pos:column="36">co</name></name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="161" pos:column="9">void</name></type> <name pos:line="161" pos:column="14">Set</name><parameter_list pos:line="161" pos:column="17">(<param><decl><type><name pos:line="161" pos:column="18">long</name></type> <name pos:line="161" pos:column="23">lcol</name></decl></param>)</parameter_list> <block pos:line="161" pos:column="29">{
		<expr_stmt><expr><name pos:line="162" pos:column="17">co</name> <op:operator pos:line="162" pos:column="20">=</op:operator> <name pos:line="162" pos:column="22">lcol</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="165" pos:column="9">void</name></type> <name pos:line="165" pos:column="14">Set</name><parameter_list pos:line="165" pos:column="17">(<param><decl><type><name pos:line="165" pos:column="18">unsigned</name> <name pos:line="165" pos:column="27">int</name></type> <name pos:line="165" pos:column="31">red</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="36">unsigned</name> <name pos:line="165" pos:column="45">int</name></type> <name pos:line="165" pos:column="49">green</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="56">unsigned</name> <name pos:line="165" pos:column="65">int</name></type> <name pos:line="165" pos:column="69">blue</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="75">{
		<expr_stmt><expr><name pos:line="166" pos:column="17">co</name> <op:operator pos:line="166" pos:column="20">=</op:operator> <name pos:line="166" pos:column="22">red</name> <op:operator pos:line="166" pos:column="26">|</op:operator> <op:operator pos:line="166" pos:column="28">(</op:operator><name pos:line="166" pos:column="29">green</name> <op:operator pos:line="166" pos:column="35">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="166" pos:column="38">8</lit:literal><op:operator pos:line="166" pos:column="39">)</op:operator> <op:operator pos:line="166" pos:column="41">|</op:operator> <op:operator pos:line="166" pos:column="43">(</op:operator><name pos:line="166" pos:column="44">blue</name> <op:operator pos:line="166" pos:column="49">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="166" pos:column="52">16</lit:literal><op:operator pos:line="166" pos:column="54">)</op:operator></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="169" pos:column="9">static</specifier> <specifier pos:line="169" pos:column="16">inline</specifier> <name pos:line="169" pos:column="23">unsigned</name> <name pos:line="169" pos:column="32">int</name></type> <name pos:line="169" pos:column="36">ValueOfHex</name><parameter_list pos:line="169" pos:column="46">(<param><decl><type><specifier pos:line="169" pos:column="47">const</specifier> <name pos:line="169" pos:column="53">char</name></type> <name pos:line="169" pos:column="58">ch</name></decl></param>)</parameter_list> <block pos:line="169" pos:column="62">{
		<if pos:line="170" pos:column="17">if <condition pos:line="170" pos:column="20">(<expr><name pos:line="170" pos:column="21">ch</name> <op:operator pos:line="170" pos:column="24">&gt;=</op:operator> <lit:literal type="char" pos:line="170" pos:column="27">'0'</lit:literal> <op:operator pos:line="170" pos:column="31">&amp;&amp;</op:operator> <name pos:line="170" pos:column="34">ch</name> <op:operator pos:line="170" pos:column="37">&lt;=</op:operator> <lit:literal type="char" pos:line="170" pos:column="40">'9'</lit:literal></expr>)</condition><then pos:line="170" pos:column="44">
			<return pos:line="171" pos:column="25">return <expr><name pos:line="171" pos:column="32">ch</name> <op:operator pos:line="171" pos:column="35">-</op:operator> <lit:literal type="char" pos:line="171" pos:column="37">'0'</lit:literal></expr>;</return></then>
		<else pos:line="172" pos:column="17">else <if pos:line="172" pos:column="22">if <condition pos:line="172" pos:column="25">(<expr><name pos:line="172" pos:column="26">ch</name> <op:operator pos:line="172" pos:column="29">&gt;=</op:operator> <lit:literal type="char" pos:line="172" pos:column="32">'A'</lit:literal> <op:operator pos:line="172" pos:column="36">&amp;&amp;</op:operator> <name pos:line="172" pos:column="39">ch</name> <op:operator pos:line="172" pos:column="42">&lt;=</op:operator> <lit:literal type="char" pos:line="172" pos:column="45">'F'</lit:literal></expr>)</condition><then pos:line="172" pos:column="49">
			<return pos:line="173" pos:column="25">return <expr><name pos:line="173" pos:column="32">ch</name> <op:operator pos:line="173" pos:column="35">-</op:operator> <lit:literal type="char" pos:line="173" pos:column="37">'A'</lit:literal> <op:operator pos:line="173" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="173" pos:column="43">10</lit:literal></expr>;</return></then>
		<else pos:line="174" pos:column="17">else <if pos:line="174" pos:column="22">if <condition pos:line="174" pos:column="25">(<expr><name pos:line="174" pos:column="26">ch</name> <op:operator pos:line="174" pos:column="29">&gt;=</op:operator> <lit:literal type="char" pos:line="174" pos:column="32">'a'</lit:literal> <op:operator pos:line="174" pos:column="36">&amp;&amp;</op:operator> <name pos:line="174" pos:column="39">ch</name> <op:operator pos:line="174" pos:column="42">&lt;=</op:operator> <lit:literal type="char" pos:line="174" pos:column="45">'f'</lit:literal></expr>)</condition><then pos:line="174" pos:column="49">
			<return pos:line="175" pos:column="25">return <expr><name pos:line="175" pos:column="32">ch</name> <op:operator pos:line="175" pos:column="35">-</op:operator> <lit:literal type="char" pos:line="175" pos:column="37">'a'</lit:literal> <op:operator pos:line="175" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="175" pos:column="43">10</lit:literal></expr>;</return></then>
		<else pos:line="176" pos:column="17">else
			<return pos:line="177" pos:column="25">return <expr><lit:literal type="number" pos:line="177" pos:column="32">0</lit:literal></expr>;</return></else></if></else></if></else></if>
	}</block></function>

	<function><type><name pos:line="180" pos:column="9">void</name></type> <name pos:line="180" pos:column="14">Set</name><parameter_list pos:line="180" pos:column="17">(<param><decl><type><specifier pos:line="180" pos:column="18">const</specifier> <name pos:line="180" pos:column="24">char</name> <type:modifier pos:line="180" pos:column="29">*</type:modifier></type><name pos:line="180" pos:column="30">val</name></decl></param>)</parameter_list> <block pos:line="180" pos:column="35">{
		<if pos:line="181" pos:column="17">if <condition pos:line="181" pos:column="20">(<expr><op:operator pos:line="181" pos:column="21">*</op:operator><name pos:line="181" pos:column="22">val</name> <op:operator pos:line="181" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="29">'#'</lit:literal></expr>)</condition><then pos:line="181" pos:column="33"> <block pos:line="181" pos:column="34">{
			<expr_stmt><expr><name pos:line="182" pos:column="25">val</name><op:operator pos:line="182" pos:column="28">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="184" pos:column="17">unsigned</name> <name pos:line="184" pos:column="26">int</name></type> <name pos:line="184" pos:column="30">r</name> <init pos:line="184" pos:column="32">= <expr><call><name pos:line="184" pos:column="34">ValueOfHex</name><argument_list pos:line="184" pos:column="44">(<argument><expr><name><name pos:line="184" pos:column="45">val</name><index pos:line="184" pos:column="48">[<expr><lit:literal type="number" pos:line="184" pos:column="49">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="184" pos:column="53">*</op:operator> <lit:literal type="number" pos:line="184" pos:column="55">16</lit:literal> <op:operator pos:line="184" pos:column="58">+</op:operator> <call><name pos:line="184" pos:column="60">ValueOfHex</name><argument_list pos:line="184" pos:column="70">(<argument><expr><name><name pos:line="184" pos:column="71">val</name><index pos:line="184" pos:column="74">[<expr><lit:literal type="number" pos:line="184" pos:column="75">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="185" pos:column="17">unsigned</name> <name pos:line="185" pos:column="26">int</name></type> <name pos:line="185" pos:column="30">g</name> <init pos:line="185" pos:column="32">= <expr><call><name pos:line="185" pos:column="34">ValueOfHex</name><argument_list pos:line="185" pos:column="44">(<argument><expr><name><name pos:line="185" pos:column="45">val</name><index pos:line="185" pos:column="48">[<expr><lit:literal type="number" pos:line="185" pos:column="49">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="185" pos:column="53">*</op:operator> <lit:literal type="number" pos:line="185" pos:column="55">16</lit:literal> <op:operator pos:line="185" pos:column="58">+</op:operator> <call><name pos:line="185" pos:column="60">ValueOfHex</name><argument_list pos:line="185" pos:column="70">(<argument><expr><name><name pos:line="185" pos:column="71">val</name><index pos:line="185" pos:column="74">[<expr><lit:literal type="number" pos:line="185" pos:column="75">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="186" pos:column="17">unsigned</name> <name pos:line="186" pos:column="26">int</name></type> <name pos:line="186" pos:column="30">b</name> <init pos:line="186" pos:column="32">= <expr><call><name pos:line="186" pos:column="34">ValueOfHex</name><argument_list pos:line="186" pos:column="44">(<argument><expr><name><name pos:line="186" pos:column="45">val</name><index pos:line="186" pos:column="48">[<expr><lit:literal type="number" pos:line="186" pos:column="49">4</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="186" pos:column="53">*</op:operator> <lit:literal type="number" pos:line="186" pos:column="55">16</lit:literal> <op:operator pos:line="186" pos:column="58">+</op:operator> <call><name pos:line="186" pos:column="60">ValueOfHex</name><argument_list pos:line="186" pos:column="70">(<argument><expr><name><name pos:line="186" pos:column="71">val</name><index pos:line="186" pos:column="74">[<expr><lit:literal type="number" pos:line="186" pos:column="75">5</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="187" pos:column="17">Set</name><argument_list pos:line="187" pos:column="20">(<argument><expr><name pos:line="187" pos:column="21">r</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="24">g</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="27">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="190" pos:column="9">long</name></type> <name pos:line="190" pos:column="14">AsLong</name><parameter_list pos:line="190" pos:column="20">()</parameter_list> <specifier pos:line="190" pos:column="23">const</specifier> <block pos:line="190" pos:column="29">{
		<return pos:line="191" pos:column="17">return <expr><name pos:line="191" pos:column="24">co</name></expr>;</return>
	}</block></function>

	<function><type><name pos:line="194" pos:column="9">unsigned</name> <name pos:line="194" pos:column="18">int</name></type> <name pos:line="194" pos:column="22">GetRed</name><parameter_list pos:line="194" pos:column="28">()</parameter_list> <block pos:line="194" pos:column="31">{
		<return pos:line="195" pos:column="17">return <expr><name pos:line="195" pos:column="24">co</name> <op:operator pos:line="195" pos:column="27">&amp;</op:operator> <lit:literal type="number" pos:line="195" pos:column="29">0xff</lit:literal></expr>;</return>
	}</block></function>

	<function><type><name pos:line="198" pos:column="9">unsigned</name> <name pos:line="198" pos:column="18">int</name></type> <name pos:line="198" pos:column="22">GetGreen</name><parameter_list pos:line="198" pos:column="30">()</parameter_list> <block pos:line="198" pos:column="33">{
		<return pos:line="199" pos:column="17">return <expr><op:operator pos:line="199" pos:column="24">(</op:operator><name pos:line="199" pos:column="25">co</name> <op:operator pos:line="199" pos:column="28">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="199" pos:column="31">8</lit:literal><op:operator pos:line="199" pos:column="32">)</op:operator> <op:operator pos:line="199" pos:column="34">&amp;</op:operator> <lit:literal type="number" pos:line="199" pos:column="36">0xff</lit:literal></expr>;</return>
	}</block></function>

	<function><type><name pos:line="202" pos:column="9">unsigned</name> <name pos:line="202" pos:column="18">int</name></type> <name pos:line="202" pos:column="22">GetBlue</name><parameter_list pos:line="202" pos:column="29">()</parameter_list> <block pos:line="202" pos:column="32">{
		<return pos:line="203" pos:column="17">return <expr><op:operator pos:line="203" pos:column="24">(</op:operator><name pos:line="203" pos:column="25">co</name> <op:operator pos:line="203" pos:column="28">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="203" pos:column="31">16</lit:literal><op:operator pos:line="203" pos:column="33">)</op:operator> <op:operator pos:line="203" pos:column="35">&amp;</op:operator> <lit:literal type="number" pos:line="203" pos:column="37">0xff</lit:literal></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="207" pos:column="1">/**
 * Holds an allocated RGB colour which may be an approximation to the desired colour.
 */</comment>
<class pos:line="210" pos:column="1">class <name pos:line="210" pos:column="7">ColourAllocated</name> <block pos:line="210" pos:column="23">{<private type="default" pos:line="210" pos:column="24">
	<decl_stmt><decl><type><name pos:line="211" pos:column="9">long</name></type> <name pos:line="211" pos:column="14">coAllocated</name></decl>;</decl_stmt>

</private><public pos:line="213" pos:column="1">public:

	<constructor><name pos:line="215" pos:column="9">ColourAllocated</name><parameter_list pos:line="215" pos:column="24">(<param><decl><type><name pos:line="215" pos:column="25">long</name></type> <name pos:line="215" pos:column="30">lcol</name><init pos:line="215" pos:column="34">=<expr><lit:literal type="number" pos:line="215" pos:column="35">0</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="215" pos:column="38">{
		<expr_stmt><expr><name pos:line="216" pos:column="17">coAllocated</name> <op:operator pos:line="216" pos:column="29">=</op:operator> <name pos:line="216" pos:column="31">lcol</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><name pos:line="219" pos:column="9">void</name></type> <name pos:line="219" pos:column="14">Set</name><parameter_list pos:line="219" pos:column="17">(<param><decl><type><name pos:line="219" pos:column="18">long</name></type> <name pos:line="219" pos:column="23">lcol</name></decl></param>)</parameter_list> <block pos:line="219" pos:column="29">{
		<expr_stmt><expr><name pos:line="220" pos:column="17">coAllocated</name> <op:operator pos:line="220" pos:column="29">=</op:operator> <name pos:line="220" pos:column="31">lcol</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="223" pos:column="9">long</name></type> <name pos:line="223" pos:column="14">AsLong</name><parameter_list pos:line="223" pos:column="20">()</parameter_list> <specifier pos:line="223" pos:column="23">const</specifier> <block pos:line="223" pos:column="29">{
		<return pos:line="224" pos:column="17">return <expr><name pos:line="224" pos:column="24">coAllocated</name></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="228" pos:column="1">/**
 * Colour pairs hold a desired colour and an allocated colour.
 */</comment>
<struct pos:line="231" pos:column="1">struct <name pos:line="231" pos:column="8">ColourPair</name> <block pos:line="231" pos:column="19">{<public type="default" pos:line="231" pos:column="20">
	<decl_stmt><decl><type><name pos:line="232" pos:column="9">ColourDesired</name></type> <name pos:line="232" pos:column="23">desired</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="233" pos:column="9">ColourAllocated</name></type> <name pos:line="233" pos:column="25">allocated</name></decl>;</decl_stmt>

	<constructor><name pos:line="235" pos:column="9">ColourPair</name><parameter_list pos:line="235" pos:column="19">(<param><decl><type><name pos:line="235" pos:column="20">ColourDesired</name></type> <name pos:line="235" pos:column="34">desired_</name><init pos:line="235" pos:column="42">=<expr><call><name pos:line="235" pos:column="43">ColourDesired</name><argument_list pos:line="235" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="235" pos:column="57">0</lit:literal></expr></argument>,<lit:literal type="number" pos:line="235" pos:column="59">0</lit:literal>,<lit:literal type="number" pos:line="235" pos:column="61">0</lit:literal>)</argument_list></call></expr></init></decl></param>)</parameter_list> <block pos:line="235" pos:column="65">{
		<expr_stmt><expr><name pos:line="236" pos:column="17">desired</name> <op:operator pos:line="236" pos:column="25">=</op:operator> <name pos:line="236" pos:column="27">desired_</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="237" pos:column="17">allocated</name><op:operator pos:line="237" pos:column="26">.</op:operator><name pos:line="237" pos:column="27">Set</name></name><argument_list pos:line="237" pos:column="30">(<argument><expr><call><name><name pos:line="237" pos:column="31">desired</name><op:operator pos:line="237" pos:column="38">.</op:operator><name pos:line="237" pos:column="39">AsLong</name></name><argument_list pos:line="237" pos:column="45">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function><type><name pos:line="239" pos:column="9">void</name></type> <name pos:line="239" pos:column="14">Copy</name><parameter_list pos:line="239" pos:column="18">()</parameter_list> <block pos:line="239" pos:column="21">{
		<expr_stmt><expr><call><name><name pos:line="240" pos:column="17">allocated</name><op:operator pos:line="240" pos:column="26">.</op:operator><name pos:line="240" pos:column="27">Set</name></name><argument_list pos:line="240" pos:column="30">(<argument><expr><call><name><name pos:line="240" pos:column="31">desired</name><op:operator pos:line="240" pos:column="38">.</op:operator><name pos:line="240" pos:column="39">AsLong</name></name><argument_list pos:line="240" pos:column="45">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</struct>

<class_decl pos:line="244" pos:column="1">class <name pos:line="244" pos:column="7">Window</name>;</class_decl>	<comment type="line" pos:line="244" pos:column="17">// Forward declaration for Palette</comment>

<comment type="block" format="doxygen" pos:line="246" pos:column="1">/**
 * Colour palette management.
 */</comment>
<class pos:line="249" pos:column="1">class <name pos:line="249" pos:column="7">Palette</name> <block pos:line="249" pos:column="15">{<private type="default" pos:line="249" pos:column="16">
	<decl_stmt><decl><type><name pos:line="250" pos:column="9">int</name></type> <name pos:line="250" pos:column="13">used</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="251" pos:column="9">int</name></type> <name pos:line="251" pos:column="13">size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="252" pos:column="9">ColourPair</name> <type:modifier pos:line="252" pos:column="20">*</type:modifier></type><name pos:line="252" pos:column="21">entries</name></decl>;</decl_stmt>
<cpp:if pos:line="253" pos:column="1">#<cpp:directive pos:line="253" pos:column="2">if</cpp:directive> <expr><name pos:line="253" pos:column="5">PLAT_GTK</name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="254" pos:column="9">void</name> <type:modifier pos:line="254" pos:column="14">*</type:modifier></type><name pos:line="254" pos:column="15">allocatedPalette</name></decl>;</decl_stmt> <comment type="line" pos:line="254" pos:column="33">// GdkColor *</comment>
	<decl_stmt><decl><type><name pos:line="255" pos:column="9">int</name></type> <name pos:line="255" pos:column="13">allocatedLen</name></decl>;</decl_stmt>
<cpp:endif pos:line="256" pos:column="1">#<cpp:directive pos:line="256" pos:column="2">endif</cpp:directive></cpp:endif>
	<comment type="line" pos:line="257" pos:column="9">// Private so Palette objects can not be copied</comment>
	<constructor_decl><name pos:line="258" pos:column="9">Palette</name><parameter_list pos:line="258" pos:column="16">(<param><decl><type><specifier pos:line="258" pos:column="17">const</specifier></type> <name pos:line="258" pos:column="23">Palette</name> <type:modifier pos:line="258" pos:column="31">&amp;</type:modifier></decl></param>)</parameter_list>;</constructor_decl>
	<function_decl><type><name pos:line="259" pos:column="9">Palette</name> <type:modifier pos:line="259" pos:column="17">&amp;</type:modifier></type><name pos:line="259" pos:column="18">operator=</name><parameter_list pos:line="259" pos:column="27">(<param><decl><type><specifier pos:line="259" pos:column="28">const</specifier></type> <name pos:line="259" pos:column="34">Palette</name> <type:modifier pos:line="259" pos:column="42">&amp;</type:modifier></decl></param>)</parameter_list>;</function_decl>
</private><public pos:line="260" pos:column="1">public:
<cpp:if pos:line="261" pos:column="1">#<cpp:directive pos:line="261" pos:column="2">if</cpp:directive> <expr><name pos:line="261" pos:column="5">PLAT_WIN</name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="262" pos:column="9">void</name> <type:modifier pos:line="262" pos:column="14">*</type:modifier></type><name pos:line="262" pos:column="15">hpal</name></decl>;</decl_stmt>
<cpp:endif pos:line="263" pos:column="1">#<cpp:directive pos:line="263" pos:column="2">endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="264" pos:column="9">bool</name></type> <name pos:line="264" pos:column="14">allowRealization</name></decl>;</decl_stmt>

	<constructor_decl><name pos:line="266" pos:column="9">Palette</name><parameter_list pos:line="266" pos:column="16">()</parameter_list>;</constructor_decl>
	<destructor_decl><name pos:line="267" pos:column="9">~<name pos:line="267" pos:column="10">Palette</name></name><parameter_list pos:line="267" pos:column="17">()</parameter_list>;</destructor_decl>

	<function_decl><type><name pos:line="269" pos:column="9">void</name></type> <name pos:line="269" pos:column="14">Release</name><parameter_list pos:line="269" pos:column="21">()</parameter_list>;</function_decl>

	<comment type="block" format="doxygen" pos:line="271" pos:column="9">/**
	 * This method either adds a colour to the list of wanted colours (want==true)
	 * or retrieves the allocated colour back to the ColourPair.
	 * This is one method to make it easier to keep the code for wanting and retrieving in sync.
	 */</comment>
	<function_decl><type><name pos:line="276" pos:column="9">void</name></type> <name pos:line="276" pos:column="14">WantFind</name><parameter_list pos:line="276" pos:column="22">(<param><decl><type><name pos:line="276" pos:column="23">ColourPair</name> <type:modifier pos:line="276" pos:column="34">&amp;</type:modifier></type><name pos:line="276" pos:column="35">cp</name></decl></param>, <param><decl><type><name pos:line="276" pos:column="39">bool</name></type> <name pos:line="276" pos:column="44">want</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="278" pos:column="9">void</name></type> <name pos:line="278" pos:column="14">Allocate</name><parameter_list pos:line="278" pos:column="22">(<param><decl><type><name pos:line="278" pos:column="23">Window</name> <type:modifier pos:line="278" pos:column="30">&amp;</type:modifier></type><name pos:line="278" pos:column="31">w</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="281" pos:column="1">/**
 * Font management.
 */</comment>
<class pos:line="284" pos:column="1">class <name pos:line="284" pos:column="7">Font</name> <block pos:line="284" pos:column="12">{<private type="default" pos:line="284" pos:column="13">
</private><protected pos:line="285" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="286" pos:column="9">FontID</name></type> <name pos:line="286" pos:column="16">fid</name></decl>;</decl_stmt>
<cpp:if pos:line="287" pos:column="1">#<cpp:directive pos:line="287" pos:column="2">if</cpp:directive> <expr><name pos:line="287" pos:column="5">PLAT_WX</name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="288" pos:column="9">int</name></type> <name pos:line="288" pos:column="13">ascent</name></decl>;</decl_stmt>
<cpp:endif pos:line="289" pos:column="1">#<cpp:directive pos:line="289" pos:column="2">endif</cpp:directive></cpp:endif>
	<comment type="line" pos:line="290" pos:column="9">// Private so Font objects can not be copied</comment>
	<constructor_decl><name pos:line="291" pos:column="9">Font</name><parameter_list pos:line="291" pos:column="13">(<param><decl><type><specifier pos:line="291" pos:column="14">const</specifier></type> <name pos:line="291" pos:column="20">Font</name> <type:modifier pos:line="291" pos:column="25">&amp;</type:modifier></decl></param>)</parameter_list>;</constructor_decl>
	<function_decl><type><name pos:line="292" pos:column="9">Font</name> <type:modifier pos:line="292" pos:column="14">&amp;</type:modifier></type><name pos:line="292" pos:column="15">operator=</name><parameter_list pos:line="292" pos:column="24">(<param><decl><type><specifier pos:line="292" pos:column="25">const</specifier></type> <name pos:line="292" pos:column="31">Font</name> <type:modifier pos:line="292" pos:column="36">&amp;</type:modifier></decl></param>)</parameter_list>;</function_decl>
</protected><public pos:line="293" pos:column="1">public:
	<constructor_decl><name pos:line="294" pos:column="9">Font</name><parameter_list pos:line="294" pos:column="13">()</parameter_list>;</constructor_decl>
	<destructor_decl><specifier pos:line="295" pos:column="9">virtual</specifier> <name pos:line="295" pos:column="17">~<name pos:line="295" pos:column="18">Font</name></name><parameter_list pos:line="295" pos:column="22">()</parameter_list>;</destructor_decl>

	<function_decl><type><specifier pos:line="297" pos:column="9">virtual</specifier> <name pos:line="297" pos:column="17">void</name></type> <name pos:line="297" pos:column="22">Create</name><parameter_list pos:line="297" pos:column="28">(<param><decl><type><specifier pos:line="297" pos:column="29">const</specifier> <name pos:line="297" pos:column="35">char</name> <type:modifier pos:line="297" pos:column="40">*</type:modifier></type><name pos:line="297" pos:column="41">faceName</name></decl></param>, <param><decl><type><name pos:line="297" pos:column="51">int</name></type> <name pos:line="297" pos:column="55">characterSet</name></decl></param>, <param><decl><type><name pos:line="297" pos:column="69">int</name></type> <name pos:line="297" pos:column="73">size</name></decl></param>,
		<param><decl><type><name pos:line="298" pos:column="17">bool</name></type> <name pos:line="298" pos:column="22">bold</name></decl></param>, <param><decl><type><name pos:line="298" pos:column="28">bool</name></type> <name pos:line="298" pos:column="33">italic</name></decl></param>, <param><decl><type><name pos:line="298" pos:column="41">int</name></type> <name pos:line="298" pos:column="45">extraFontFlag</name><init pos:line="298" pos:column="58">=<expr><lit:literal type="number" pos:line="298" pos:column="59">0</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="299" pos:column="9">virtual</specifier> <name pos:line="299" pos:column="17">void</name></type> <name pos:line="299" pos:column="22">Release</name><parameter_list pos:line="299" pos:column="29">()</parameter_list>;</function_decl>

	<function><type><name pos:line="301" pos:column="9">FontID</name></type> <name pos:line="301" pos:column="16">GetID</name><parameter_list pos:line="301" pos:column="21">()</parameter_list> <block pos:line="301" pos:column="24">{ <return pos:line="301" pos:column="26">return <expr><name pos:line="301" pos:column="33">fid</name></expr>;</return> }</block></function>
	<comment type="line" pos:line="302" pos:column="9">// Alias another font - caller guarantees not to Release</comment>
	<function><type><name pos:line="303" pos:column="9">void</name></type> <name pos:line="303" pos:column="14">SetID</name><parameter_list pos:line="303" pos:column="19">(<param><decl><type><name pos:line="303" pos:column="20">FontID</name></type> <name pos:line="303" pos:column="27">fid_</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="33">{ <expr_stmt><expr><name pos:line="303" pos:column="35">fid</name> <op:operator pos:line="303" pos:column="39">=</op:operator> <name pos:line="303" pos:column="41">fid_</name></expr>;</expr_stmt> }</block></function>
<cpp:if pos:line="304" pos:column="1">#<cpp:directive pos:line="304" pos:column="2">if</cpp:directive> <expr><name pos:line="304" pos:column="5">PLAT_WX</name></expr></cpp:if>
	<function><type><name pos:line="305" pos:column="9">void</name></type> <name pos:line="305" pos:column="14">SetAscent</name><parameter_list pos:line="305" pos:column="23">(<param><decl><type><name pos:line="305" pos:column="24">int</name></type> <name pos:line="305" pos:column="28">ascent_</name></decl></param>)</parameter_list> <block pos:line="305" pos:column="37">{ <expr_stmt><expr><name pos:line="305" pos:column="39">ascent</name> <op:operator pos:line="305" pos:column="46">=</op:operator> <name pos:line="305" pos:column="48">ascent_</name></expr>;</expr_stmt> }</block></function>
<cpp:endif pos:line="306" pos:column="1">#<cpp:directive pos:line="306" pos:column="2">endif</cpp:directive></cpp:endif>
	<class_decl><specifier pos:line="307" pos:column="9">friend</specifier> class <name pos:line="307" pos:column="22">Surface</name>;</class_decl>
	<class_decl><specifier pos:line="308" pos:column="9">friend</specifier> class <name pos:line="308" pos:column="22">SurfaceImpl</name>;</class_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="311" pos:column="1">/**
 * A surface abstracts a place to draw.
 */</comment>
<class pos:line="314" pos:column="1">class <name pos:line="314" pos:column="7">Surface</name> <block pos:line="314" pos:column="15">{<private type="default" pos:line="314" pos:column="16">
</private><private pos:line="315" pos:column="1">private:
	<comment type="line" pos:line="316" pos:column="9">// Private so Surface objects can not be copied</comment>
	<constructor><name pos:line="317" pos:column="9">Surface</name><parameter_list pos:line="317" pos:column="16">(<param><decl><type><specifier pos:line="317" pos:column="17">const</specifier></type> <name pos:line="317" pos:column="23">Surface</name> <type:modifier pos:line="317" pos:column="31">&amp;</type:modifier></decl></param>)</parameter_list> <block pos:line="317" pos:column="34">{}</block></constructor>
	<function><type><name pos:line="318" pos:column="9">Surface</name> <type:modifier pos:line="318" pos:column="17">&amp;</type:modifier></type><name pos:line="318" pos:column="18">operator=</name><parameter_list pos:line="318" pos:column="27">(<param><decl><type><specifier pos:line="318" pos:column="28">const</specifier></type> <name pos:line="318" pos:column="34">Surface</name> <type:modifier pos:line="318" pos:column="42">&amp;</type:modifier></decl></param>)</parameter_list> <block pos:line="318" pos:column="45">{ <return pos:line="318" pos:column="47">return <expr><op:operator pos:line="318" pos:column="54">*</op:operator><name pos:line="318" pos:column="55">this</name></expr>;</return> }</block></function>
</private><public pos:line="319" pos:column="1">public:
	<constructor><name pos:line="320" pos:column="9">Surface</name><parameter_list pos:line="320" pos:column="16">()</parameter_list> <block pos:line="320" pos:column="19">{}</block></constructor>
	<destructor><specifier pos:line="321" pos:column="9">virtual</specifier> <name pos:line="321" pos:column="17">~<name pos:line="321" pos:column="18">Surface</name></name><parameter_list pos:line="321" pos:column="25">()</parameter_list> <block pos:line="321" pos:column="28">{}</block></destructor>
	<function_decl><type><specifier pos:line="322" pos:column="9">static</specifier> <name pos:line="322" pos:column="16">Surface</name> <type:modifier pos:line="322" pos:column="24">*</type:modifier></type><name pos:line="322" pos:column="25">Allocate</name><parameter_list pos:line="322" pos:column="33">()</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="324" pos:column="9">virtual</specifier> <name pos:line="324" pos:column="17">void</name></type> <name pos:line="324" pos:column="22">Init</name><parameter_list pos:line="324" pos:column="26">(<param><decl><type><name pos:line="324" pos:column="27">WindowID</name></type> <name pos:line="324" pos:column="36">wid</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="324" pos:column="41">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="325" pos:column="9">virtual</specifier> <name pos:line="325" pos:column="17">void</name></type> <name pos:line="325" pos:column="22">Init</name><parameter_list pos:line="325" pos:column="26">(<param><decl><type><name pos:line="325" pos:column="27">SurfaceID</name></type> <name pos:line="325" pos:column="37">sid</name></decl></param>, <param><decl><type><name pos:line="325" pos:column="42">WindowID</name></type> <name pos:line="325" pos:column="51">wid</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="325" pos:column="56">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="326" pos:column="9">virtual</specifier> <name pos:line="326" pos:column="17">void</name></type> <name pos:line="326" pos:column="22">InitPixMap</name><parameter_list pos:line="326" pos:column="32">(<param><decl><type><name pos:line="326" pos:column="33">int</name></type> <name pos:line="326" pos:column="37">width</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="44">int</name></type> <name pos:line="326" pos:column="48">height</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="56">Surface</name> <type:modifier pos:line="326" pos:column="64">*</type:modifier></type><name pos:line="326" pos:column="65">surface_</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="75">WindowID</name></type> <name pos:line="326" pos:column="84">wid</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="326" pos:column="89">0</lit:literal>;</function_decl>

	<function_decl><type><specifier pos:line="328" pos:column="9">virtual</specifier> <name pos:line="328" pos:column="17">void</name></type> <name pos:line="328" pos:column="22">Release</name><parameter_list pos:line="328" pos:column="29">()</parameter_list>=<lit:literal type="number" pos:line="328" pos:column="32">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="329" pos:column="9">virtual</specifier> <name pos:line="329" pos:column="17">bool</name></type> <name pos:line="329" pos:column="22">Initialised</name><parameter_list pos:line="329" pos:column="33">()</parameter_list>=<lit:literal type="number" pos:line="329" pos:column="36">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="330" pos:column="9">virtual</specifier> <name pos:line="330" pos:column="17">void</name></type> <name pos:line="330" pos:column="22">PenColour</name><parameter_list pos:line="330" pos:column="31">(<param><decl><type><name pos:line="330" pos:column="32">ColourAllocated</name></type> <name pos:line="330" pos:column="48">fore</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="330" pos:column="54">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="331" pos:column="9">virtual</specifier> <name pos:line="331" pos:column="17">int</name></type> <name pos:line="331" pos:column="21">LogPixelsY</name><parameter_list pos:line="331" pos:column="31">()</parameter_list>=<lit:literal type="number" pos:line="331" pos:column="34">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="332" pos:column="9">virtual</specifier> <name pos:line="332" pos:column="17">int</name></type> <name pos:line="332" pos:column="21">DeviceHeightFont</name><parameter_list pos:line="332" pos:column="37">(<param><decl><type><name pos:line="332" pos:column="38">int</name></type> <name pos:line="332" pos:column="42">points</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="332" pos:column="50">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="333" pos:column="9">virtual</specifier> <name pos:line="333" pos:column="17">void</name></type> <name pos:line="333" pos:column="22">MoveTo</name><parameter_list pos:line="333" pos:column="28">(<param><decl><type><name pos:line="333" pos:column="29">int</name></type> <name pos:line="333" pos:column="33">x_</name></decl></param>, <param><decl><type><name pos:line="333" pos:column="37">int</name></type> <name pos:line="333" pos:column="41">y_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="333" pos:column="45">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="334" pos:column="9">virtual</specifier> <name pos:line="334" pos:column="17">void</name></type> <name pos:line="334" pos:column="22">LineTo</name><parameter_list pos:line="334" pos:column="28">(<param><decl><type><name pos:line="334" pos:column="29">int</name></type> <name pos:line="334" pos:column="33">x_</name></decl></param>, <param><decl><type><name pos:line="334" pos:column="37">int</name></type> <name pos:line="334" pos:column="41">y_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="334" pos:column="45">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="335" pos:column="9">virtual</specifier> <name pos:line="335" pos:column="17">void</name></type> <name pos:line="335" pos:column="22">Polygon</name><parameter_list pos:line="335" pos:column="29">(<param><decl><type><name pos:line="335" pos:column="30">Point</name> <type:modifier pos:line="335" pos:column="36">*</type:modifier></type><name pos:line="335" pos:column="37">pts</name></decl></param>, <param><decl><type><name pos:line="335" pos:column="42">int</name></type> <name pos:line="335" pos:column="46">npts</name></decl></param>, <param><decl><type><name pos:line="335" pos:column="52">ColourAllocated</name></type> <name pos:line="335" pos:column="68">fore</name></decl></param>, <param><decl><type><name pos:line="335" pos:column="74">ColourAllocated</name></type> <name pos:line="335" pos:column="90">back</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="335" pos:column="96">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="336" pos:column="9">virtual</specifier> <name pos:line="336" pos:column="17">void</name></type> <name pos:line="336" pos:column="22">RectangleDraw</name><parameter_list pos:line="336" pos:column="35">(<param><decl><type><name pos:line="336" pos:column="36">PRectangle</name></type> <name pos:line="336" pos:column="47">rc</name></decl></param>, <param><decl><type><name pos:line="336" pos:column="51">ColourAllocated</name></type> <name pos:line="336" pos:column="67">fore</name></decl></param>, <param><decl><type><name pos:line="336" pos:column="73">ColourAllocated</name></type> <name pos:line="336" pos:column="89">back</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="336" pos:column="95">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="337" pos:column="9">virtual</specifier> <name pos:line="337" pos:column="17">void</name></type> <name pos:line="337" pos:column="22">FillRectangle</name><parameter_list pos:line="337" pos:column="35">(<param><decl><type><name pos:line="337" pos:column="36">PRectangle</name></type> <name pos:line="337" pos:column="47">rc</name></decl></param>, <param><decl><type><name pos:line="337" pos:column="51">ColourAllocated</name></type> <name pos:line="337" pos:column="67">back</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="337" pos:column="73">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="338" pos:column="9">virtual</specifier> <name pos:line="338" pos:column="17">void</name></type> <name pos:line="338" pos:column="22">FillRectangle</name><parameter_list pos:line="338" pos:column="35">(<param><decl><type><name pos:line="338" pos:column="36">PRectangle</name></type> <name pos:line="338" pos:column="47">rc</name></decl></param>, <param><decl><type><name pos:line="338" pos:column="51">Surface</name> <type:modifier pos:line="338" pos:column="59">&amp;</type:modifier></type><name pos:line="338" pos:column="60">surfacePattern</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="338" pos:column="76">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="339" pos:column="9">virtual</specifier> <name pos:line="339" pos:column="17">void</name></type> <name pos:line="339" pos:column="22">RoundedRectangle</name><parameter_list pos:line="339" pos:column="38">(<param><decl><type><name pos:line="339" pos:column="39">PRectangle</name></type> <name pos:line="339" pos:column="50">rc</name></decl></param>, <param><decl><type><name pos:line="339" pos:column="54">ColourAllocated</name></type> <name pos:line="339" pos:column="70">fore</name></decl></param>, <param><decl><type><name pos:line="339" pos:column="76">ColourAllocated</name></type> <name pos:line="339" pos:column="92">back</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="339" pos:column="98">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="340" pos:column="9">virtual</specifier> <name pos:line="340" pos:column="17">void</name></type> <name pos:line="340" pos:column="22">AlphaRectangle</name><parameter_list pos:line="340" pos:column="36">(<param><decl><type><name pos:line="340" pos:column="37">PRectangle</name></type> <name pos:line="340" pos:column="48">rc</name></decl></param>, <param><decl><type><name pos:line="340" pos:column="52">int</name></type> <name pos:line="340" pos:column="56">cornerSize</name></decl></param>, <param><decl><type><name pos:line="340" pos:column="68">ColourAllocated</name></type> <name pos:line="340" pos:column="84">fill</name></decl></param>, <param><decl><type><name pos:line="340" pos:column="90">int</name></type> <name pos:line="340" pos:column="94">alphaFill</name></decl></param>,
		<param><decl><type><name pos:line="341" pos:column="17">ColourAllocated</name></type> <name pos:line="341" pos:column="33">outline</name></decl></param>, <param><decl><type><name pos:line="341" pos:column="42">int</name></type> <name pos:line="341" pos:column="46">alphaOutline</name></decl></param>, <param><decl><type><name pos:line="341" pos:column="60">int</name></type> <name pos:line="341" pos:column="64">flags</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="341" pos:column="71">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="342" pos:column="9">virtual</specifier> <name pos:line="342" pos:column="17">void</name></type> <name pos:line="342" pos:column="22">Ellipse</name><parameter_list pos:line="342" pos:column="29">(<param><decl><type><name pos:line="342" pos:column="30">PRectangle</name></type> <name pos:line="342" pos:column="41">rc</name></decl></param>, <param><decl><type><name pos:line="342" pos:column="45">ColourAllocated</name></type> <name pos:line="342" pos:column="61">fore</name></decl></param>, <param><decl><type><name pos:line="342" pos:column="67">ColourAllocated</name></type> <name pos:line="342" pos:column="83">back</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="342" pos:column="89">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="343" pos:column="9">virtual</specifier> <name pos:line="343" pos:column="17">void</name></type> <name pos:line="343" pos:column="22">Copy</name><parameter_list pos:line="343" pos:column="26">(<param><decl><type><name pos:line="343" pos:column="27">PRectangle</name></type> <name pos:line="343" pos:column="38">rc</name></decl></param>, <param><decl><type><name pos:line="343" pos:column="42">Point</name></type> <name pos:line="343" pos:column="48">from</name></decl></param>, <param><decl><type><name pos:line="343" pos:column="54">Surface</name> <type:modifier pos:line="343" pos:column="62">&amp;</type:modifier></type><name pos:line="343" pos:column="63">surfaceSource</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="343" pos:column="78">0</lit:literal>;</function_decl>

	<function_decl><type><specifier pos:line="345" pos:column="9">virtual</specifier> <name pos:line="345" pos:column="17">void</name></type> <name pos:line="345" pos:column="22">DrawTextNoClip</name><parameter_list pos:line="345" pos:column="36">(<param><decl><type><name pos:line="345" pos:column="37">PRectangle</name></type> <name pos:line="345" pos:column="48">rc</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="52">Font</name> <type:modifier pos:line="345" pos:column="57">&amp;</type:modifier></type><name pos:line="345" pos:column="58">font_</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="65">int</name></type> <name pos:line="345" pos:column="69">ybase</name></decl></param>, <param><decl><type><specifier pos:line="345" pos:column="76">const</specifier> <name pos:line="345" pos:column="82">char</name> <type:modifier pos:line="345" pos:column="87">*</type:modifier></type><name pos:line="345" pos:column="88">s</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="91">int</name></type> <name pos:line="345" pos:column="95">len</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="100">ColourAllocated</name></type> <name pos:line="345" pos:column="116">fore</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="122">ColourAllocated</name></type> <name pos:line="345" pos:column="138">back</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="345" pos:column="144">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="346" pos:column="9">virtual</specifier> <name pos:line="346" pos:column="17">void</name></type> <name pos:line="346" pos:column="22">DrawTextClipped</name><parameter_list pos:line="346" pos:column="37">(<param><decl><type><name pos:line="346" pos:column="38">PRectangle</name></type> <name pos:line="346" pos:column="49">rc</name></decl></param>, <param><decl><type><name pos:line="346" pos:column="53">Font</name> <type:modifier pos:line="346" pos:column="58">&amp;</type:modifier></type><name pos:line="346" pos:column="59">font_</name></decl></param>, <param><decl><type><name pos:line="346" pos:column="66">int</name></type> <name pos:line="346" pos:column="70">ybase</name></decl></param>, <param><decl><type><specifier pos:line="346" pos:column="77">const</specifier> <name pos:line="346" pos:column="83">char</name> <type:modifier pos:line="346" pos:column="88">*</type:modifier></type><name pos:line="346" pos:column="89">s</name></decl></param>, <param><decl><type><name pos:line="346" pos:column="92">int</name></type> <name pos:line="346" pos:column="96">len</name></decl></param>, <param><decl><type><name pos:line="346" pos:column="101">ColourAllocated</name></type> <name pos:line="346" pos:column="117">fore</name></decl></param>, <param><decl><type><name pos:line="346" pos:column="123">ColourAllocated</name></type> <name pos:line="346" pos:column="139">back</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="346" pos:column="145">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="347" pos:column="9">virtual</specifier> <name pos:line="347" pos:column="17">void</name></type> <name pos:line="347" pos:column="22">DrawTextTransparent</name><parameter_list pos:line="347" pos:column="41">(<param><decl><type><name pos:line="347" pos:column="42">PRectangle</name></type> <name pos:line="347" pos:column="53">rc</name></decl></param>, <param><decl><type><name pos:line="347" pos:column="57">Font</name> <type:modifier pos:line="347" pos:column="62">&amp;</type:modifier></type><name pos:line="347" pos:column="63">font_</name></decl></param>, <param><decl><type><name pos:line="347" pos:column="70">int</name></type> <name pos:line="347" pos:column="74">ybase</name></decl></param>, <param><decl><type><specifier pos:line="347" pos:column="81">const</specifier> <name pos:line="347" pos:column="87">char</name> <type:modifier pos:line="347" pos:column="92">*</type:modifier></type><name pos:line="347" pos:column="93">s</name></decl></param>, <param><decl><type><name pos:line="347" pos:column="96">int</name></type> <name pos:line="347" pos:column="100">len</name></decl></param>, <param><decl><type><name pos:line="347" pos:column="105">ColourAllocated</name></type> <name pos:line="347" pos:column="121">fore</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="347" pos:column="127">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="348" pos:column="9">virtual</specifier> <name pos:line="348" pos:column="17">void</name></type> <name pos:line="348" pos:column="22">MeasureWidths</name><parameter_list pos:line="348" pos:column="35">(<param><decl><type><name pos:line="348" pos:column="36">Font</name> <type:modifier pos:line="348" pos:column="41">&amp;</type:modifier></type><name pos:line="348" pos:column="42">font_</name></decl></param>, <param><decl><type><specifier pos:line="348" pos:column="49">const</specifier> <name pos:line="348" pos:column="55">char</name> <type:modifier pos:line="348" pos:column="60">*</type:modifier></type><name pos:line="348" pos:column="61">s</name></decl></param>, <param><decl><type><name pos:line="348" pos:column="64">int</name></type> <name pos:line="348" pos:column="68">len</name></decl></param>, <param><decl><type><name pos:line="348" pos:column="73">int</name> <type:modifier pos:line="348" pos:column="77">*</type:modifier></type><name pos:line="348" pos:column="78">positions</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="348" pos:column="89">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="349" pos:column="9">virtual</specifier> <name pos:line="349" pos:column="17">int</name></type> <name pos:line="349" pos:column="21">WidthText</name><parameter_list pos:line="349" pos:column="30">(<param><decl><type><name pos:line="349" pos:column="31">Font</name> <type:modifier pos:line="349" pos:column="36">&amp;</type:modifier></type><name pos:line="349" pos:column="37">font_</name></decl></param>, <param><decl><type><specifier pos:line="349" pos:column="44">const</specifier> <name pos:line="349" pos:column="50">char</name> <type:modifier pos:line="349" pos:column="55">*</type:modifier></type><name pos:line="349" pos:column="56">s</name></decl></param>, <param><decl><type><name pos:line="349" pos:column="59">int</name></type> <name pos:line="349" pos:column="63">len</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="349" pos:column="68">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="350" pos:column="9">virtual</specifier> <name pos:line="350" pos:column="17">int</name></type> <name pos:line="350" pos:column="21">WidthChar</name><parameter_list pos:line="350" pos:column="30">(<param><decl><type><name pos:line="350" pos:column="31">Font</name> <type:modifier pos:line="350" pos:column="36">&amp;</type:modifier></type><name pos:line="350" pos:column="37">font_</name></decl></param>, <param><decl><type><name pos:line="350" pos:column="44">char</name></type> <name pos:line="350" pos:column="49">ch</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="350" pos:column="53">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="351" pos:column="9">virtual</specifier> <name pos:line="351" pos:column="17">int</name></type> <name pos:line="351" pos:column="21">Ascent</name><parameter_list pos:line="351" pos:column="27">(<param><decl><type><name pos:line="351" pos:column="28">Font</name> <type:modifier pos:line="351" pos:column="33">&amp;</type:modifier></type><name pos:line="351" pos:column="34">font_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="351" pos:column="41">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="352" pos:column="9">virtual</specifier> <name pos:line="352" pos:column="17">int</name></type> <name pos:line="352" pos:column="21">Descent</name><parameter_list pos:line="352" pos:column="28">(<param><decl><type><name pos:line="352" pos:column="29">Font</name> <type:modifier pos:line="352" pos:column="34">&amp;</type:modifier></type><name pos:line="352" pos:column="35">font_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="352" pos:column="42">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="353" pos:column="9">virtual</specifier> <name pos:line="353" pos:column="17">int</name></type> <name pos:line="353" pos:column="21">InternalLeading</name><parameter_list pos:line="353" pos:column="36">(<param><decl><type><name pos:line="353" pos:column="37">Font</name> <type:modifier pos:line="353" pos:column="42">&amp;</type:modifier></type><name pos:line="353" pos:column="43">font_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="353" pos:column="50">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="354" pos:column="9">virtual</specifier> <name pos:line="354" pos:column="17">int</name></type> <name pos:line="354" pos:column="21">ExternalLeading</name><parameter_list pos:line="354" pos:column="36">(<param><decl><type><name pos:line="354" pos:column="37">Font</name> <type:modifier pos:line="354" pos:column="42">&amp;</type:modifier></type><name pos:line="354" pos:column="43">font_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="354" pos:column="50">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="355" pos:column="9">virtual</specifier> <name pos:line="355" pos:column="17">int</name></type> <name pos:line="355" pos:column="21">Height</name><parameter_list pos:line="355" pos:column="27">(<param><decl><type><name pos:line="355" pos:column="28">Font</name> <type:modifier pos:line="355" pos:column="33">&amp;</type:modifier></type><name pos:line="355" pos:column="34">font_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="355" pos:column="41">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="356" pos:column="9">virtual</specifier> <name pos:line="356" pos:column="17">int</name></type> <name pos:line="356" pos:column="21">AverageCharWidth</name><parameter_list pos:line="356" pos:column="37">(<param><decl><type><name pos:line="356" pos:column="38">Font</name> <type:modifier pos:line="356" pos:column="43">&amp;</type:modifier></type><name pos:line="356" pos:column="44">font_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="356" pos:column="51">0</lit:literal>;</function_decl>

	<function_decl><type><specifier pos:line="358" pos:column="9">virtual</specifier> <name pos:line="358" pos:column="17">int</name></type> <name pos:line="358" pos:column="21">SetPalette</name><parameter_list pos:line="358" pos:column="31">(<param><decl><type><name pos:line="358" pos:column="32">Palette</name> <type:modifier pos:line="358" pos:column="40">*</type:modifier></type><name pos:line="358" pos:column="41">pal</name></decl></param>, <param><decl><type><name pos:line="358" pos:column="46">bool</name></type> <name pos:line="358" pos:column="51">inBackGround</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="358" pos:column="65">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="359" pos:column="9">virtual</specifier> <name pos:line="359" pos:column="17">void</name></type> <name pos:line="359" pos:column="22">SetClip</name><parameter_list pos:line="359" pos:column="29">(<param><decl><type><name pos:line="359" pos:column="30">PRectangle</name></type> <name pos:line="359" pos:column="41">rc</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="359" pos:column="45">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="360" pos:column="9">virtual</specifier> <name pos:line="360" pos:column="17">void</name></type> <name pos:line="360" pos:column="22">FlushCachedState</name><parameter_list pos:line="360" pos:column="38">()</parameter_list>=<lit:literal type="number" pos:line="360" pos:column="41">0</lit:literal>;</function_decl>

	<function_decl><type><specifier pos:line="362" pos:column="9">virtual</specifier> <name pos:line="362" pos:column="17">void</name></type> <name pos:line="362" pos:column="22">SetUnicodeMode</name><parameter_list pos:line="362" pos:column="36">(<param><decl><type><name pos:line="362" pos:column="37">bool</name></type> <name pos:line="362" pos:column="42">unicodeMode_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="362" pos:column="56">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="363" pos:column="9">virtual</specifier> <name pos:line="363" pos:column="17">void</name></type> <name pos:line="363" pos:column="22">SetDBCSMode</name><parameter_list pos:line="363" pos:column="33">(<param><decl><type><name pos:line="363" pos:column="34">int</name></type> <name pos:line="363" pos:column="38">codePage</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="363" pos:column="48">0</lit:literal>;</function_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="366" pos:column="1">/**
 * A simple callback action passing one piece of untyped user data.
 */</comment>
<typedef pos:line="369" pos:column="1">typedef <function_decl><type><name pos:line="369" pos:column="9">void</name></type> (<type:modifier pos:line="369" pos:column="15">*</type:modifier><name pos:line="369" pos:column="16">CallBackAction</name>)<parameter_list pos:line="369" pos:column="31">(<param><decl><type><name pos:line="369" pos:column="32">void</name><type:modifier pos:line="369" pos:column="36">*</type:modifier></type></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block" format="doxygen" pos:line="371" pos:column="1">/**
 * Class to hide the details of window manipulation.
 * Does not own the window which will normally have a longer life than this object.
 */</comment>
<class pos:line="375" pos:column="1">class <name pos:line="375" pos:column="7">Window</name> <block pos:line="375" pos:column="14">{<private type="default" pos:line="375" pos:column="15">
</private><protected pos:line="376" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="377" pos:column="9">WindowID</name></type> <name pos:line="377" pos:column="18">wid</name></decl>;</decl_stmt>
<cpp:if pos:line="378" pos:column="1">#<cpp:directive pos:line="378" pos:column="2">if</cpp:directive> <expr><name pos:line="378" pos:column="5">PLAT_MACOSX</name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="379" pos:column="9">void</name> <type:modifier pos:line="379" pos:column="14">*</type:modifier></type><name pos:line="379" pos:column="15">windowRef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="380" pos:column="9">void</name> <type:modifier pos:line="380" pos:column="14">*</type:modifier></type><name pos:line="380" pos:column="15">control</name></decl>;</decl_stmt>
<cpp:endif pos:line="381" pos:column="1">#<cpp:directive pos:line="381" pos:column="2">endif</cpp:directive></cpp:endif>
</protected><public pos:line="382" pos:column="1">public:
	<constructor><name pos:line="383" pos:column="9">Window</name><parameter_list pos:line="383" pos:column="15">()</parameter_list> <member_list pos:line="383" pos:column="18">: <call><name pos:line="383" pos:column="20">wid</name><argument_list pos:line="383" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="383" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="383" pos:column="26">,</op:operator> <call><name pos:line="383" pos:column="28">cursorLast</name><argument_list pos:line="383" pos:column="38">(<argument><expr><name pos:line="383" pos:column="39">cursorInvalid</name></expr></argument>)</argument_list></call> </member_list><block pos:line="383" pos:column="54">{
<cpp:if pos:line="384" pos:column="1">#<cpp:directive pos:line="384" pos:column="2">if</cpp:directive> <expr><name pos:line="384" pos:column="5">PLAT_MACOSX</name></expr></cpp:if>
	  <expr_stmt><expr><name pos:line="385" pos:column="11">windowRef</name> <op:operator pos:line="385" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="385" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name pos:line="386" pos:column="11">control</name> <op:operator pos:line="386" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="386" pos:column="21">0</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="387" pos:column="1">#<cpp:directive pos:line="387" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></constructor>
	<constructor><name pos:line="389" pos:column="9">Window</name><parameter_list pos:line="389" pos:column="15">(<param><decl><type><specifier pos:line="389" pos:column="16">const</specifier> <name pos:line="389" pos:column="22">Window</name> <type:modifier pos:line="389" pos:column="29">&amp;</type:modifier></type><name pos:line="389" pos:column="30">source</name></decl></param>)</parameter_list> <member_list pos:line="389" pos:column="38">: <call><name pos:line="389" pos:column="40">wid</name><argument_list pos:line="389" pos:column="43">(<argument><expr><name><name pos:line="389" pos:column="44">source</name><op:operator pos:line="389" pos:column="50">.</op:operator><name pos:line="389" pos:column="51">wid</name></name></expr></argument>)</argument_list></call><op:operator pos:line="389" pos:column="55">,</op:operator> <call><name pos:line="389" pos:column="57">cursorLast</name><argument_list pos:line="389" pos:column="67">(<argument><expr><name pos:line="389" pos:column="68">cursorInvalid</name></expr></argument>)</argument_list></call> </member_list><block pos:line="389" pos:column="83">{
<cpp:if pos:line="390" pos:column="1">#<cpp:directive pos:line="390" pos:column="2">if</cpp:directive> <expr><name pos:line="390" pos:column="5">PLAT_MACOSX</name></expr></cpp:if>
	  <expr_stmt><expr><name pos:line="391" pos:column="11">windowRef</name> <op:operator pos:line="391" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="391" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name pos:line="392" pos:column="11">control</name> <op:operator pos:line="392" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="392" pos:column="21">0</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="393" pos:column="1">#<cpp:directive pos:line="393" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></constructor>
	<destructor_decl><specifier pos:line="395" pos:column="9">virtual</specifier> <name pos:line="395" pos:column="17">~<name pos:line="395" pos:column="18">Window</name></name><parameter_list pos:line="395" pos:column="24">()</parameter_list>;</destructor_decl>
	<function><type><name pos:line="396" pos:column="9">Window</name> <type:modifier pos:line="396" pos:column="16">&amp;</type:modifier></type><name pos:line="396" pos:column="17">operator=</name><parameter_list pos:line="396" pos:column="26">(<param><decl><type><name pos:line="396" pos:column="27">WindowID</name></type> <name pos:line="396" pos:column="36">wid_</name></decl></param>)</parameter_list> <block pos:line="396" pos:column="42">{
		<expr_stmt><expr><name pos:line="397" pos:column="17">wid</name> <op:operator pos:line="397" pos:column="21">=</op:operator> <name pos:line="397" pos:column="23">wid_</name></expr>;</expr_stmt>
		<return pos:line="398" pos:column="17">return <expr><op:operator pos:line="398" pos:column="24">*</op:operator><name pos:line="398" pos:column="25">this</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="400" pos:column="9">WindowID</name></type> <name pos:line="400" pos:column="18">GetID</name><parameter_list pos:line="400" pos:column="23">()</parameter_list> <specifier pos:line="400" pos:column="26">const</specifier> <block pos:line="400" pos:column="32">{ <return pos:line="400" pos:column="34">return <expr><name pos:line="400" pos:column="41">wid</name></expr>;</return> }</block></function>
	<function><type><name pos:line="401" pos:column="9">bool</name></type> <name pos:line="401" pos:column="14">Created</name><parameter_list pos:line="401" pos:column="21">()</parameter_list> <specifier pos:line="401" pos:column="24">const</specifier> <block pos:line="401" pos:column="30">{ <return pos:line="401" pos:column="32">return <expr><name pos:line="401" pos:column="39">wid</name> <op:operator pos:line="401" pos:column="43">!=</op:operator> <lit:literal type="number" pos:line="401" pos:column="46">0</lit:literal></expr>;</return> }</block></function>
	<function_decl><type><name pos:line="402" pos:column="9">void</name></type> <name pos:line="402" pos:column="14">Destroy</name><parameter_list pos:line="402" pos:column="21">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="403" pos:column="9">bool</name></type> <name pos:line="403" pos:column="14">HasFocus</name><parameter_list pos:line="403" pos:column="22">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="404" pos:column="9">PRectangle</name></type> <name pos:line="404" pos:column="20">GetPosition</name><parameter_list pos:line="404" pos:column="31">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="405" pos:column="9">void</name></type> <name pos:line="405" pos:column="14">SetPosition</name><parameter_list pos:line="405" pos:column="25">(<param><decl><type><name pos:line="405" pos:column="26">PRectangle</name></type> <name pos:line="405" pos:column="37">rc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="406" pos:column="9">void</name></type> <name pos:line="406" pos:column="14">SetPositionRelative</name><parameter_list pos:line="406" pos:column="33">(<param><decl><type><name pos:line="406" pos:column="34">PRectangle</name></type> <name pos:line="406" pos:column="45">rc</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="49">Window</name></type> <name pos:line="406" pos:column="56">relativeTo</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="407" pos:column="9">PRectangle</name></type> <name pos:line="407" pos:column="20">GetClientPosition</name><parameter_list pos:line="407" pos:column="37">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="408" pos:column="9">void</name></type> <name pos:line="408" pos:column="14">Show</name><parameter_list pos:line="408" pos:column="18">(<param><decl><type><name pos:line="408" pos:column="19">bool</name></type> <name pos:line="408" pos:column="24">show</name><init pos:line="408" pos:column="28">=<expr><lit:literal type="boolean" pos:line="408" pos:column="29">true</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="409" pos:column="9">void</name></type> <name pos:line="409" pos:column="14">InvalidateAll</name><parameter_list pos:line="409" pos:column="27">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="410" pos:column="9">void</name></type> <name pos:line="410" pos:column="14">InvalidateRectangle</name><parameter_list pos:line="410" pos:column="33">(<param><decl><type><name pos:line="410" pos:column="34">PRectangle</name></type> <name pos:line="410" pos:column="45">rc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="411" pos:column="9">virtual</specifier> <name pos:line="411" pos:column="17">void</name></type> <name pos:line="411" pos:column="22">SetFont</name><parameter_list pos:line="411" pos:column="29">(<param><decl><type><name pos:line="411" pos:column="30">Font</name> <type:modifier pos:line="411" pos:column="35">&amp;</type:modifier></type><name pos:line="411" pos:column="36">font</name></decl></param>)</parameter_list>;</function_decl>
	<enum pos:line="412" pos:column="9">enum <name pos:line="412" pos:column="14">Cursor</name> <block pos:line="412" pos:column="21">{ <decl><name pos:line="412" pos:column="23">cursorInvalid</name></decl><op:operator pos:line="412" pos:column="36">,</op:operator> <decl><name pos:line="412" pos:column="38">cursorText</name></decl><op:operator pos:line="412" pos:column="48">,</op:operator> <decl><name pos:line="412" pos:column="50">cursorArrow</name></decl><op:operator pos:line="412" pos:column="61">,</op:operator> <decl><name pos:line="412" pos:column="63">cursorUp</name></decl><op:operator pos:line="412" pos:column="71">,</op:operator> <decl><name pos:line="412" pos:column="73">cursorWait</name></decl><op:operator pos:line="412" pos:column="83">,</op:operator> <decl><name pos:line="412" pos:column="85">cursorHoriz</name></decl><op:operator pos:line="412" pos:column="96">,</op:operator> <decl><name pos:line="412" pos:column="98">cursorVert</name></decl><op:operator pos:line="412" pos:column="108">,</op:operator> <decl><name pos:line="412" pos:column="110">cursorReverseArrow</name></decl><op:operator pos:line="412" pos:column="128">,</op:operator> <decl><name pos:line="412" pos:column="130">cursorHand</name></decl> }</block>;</enum>
	<function_decl><type><name pos:line="413" pos:column="9">void</name></type> <name pos:line="413" pos:column="14">SetCursor</name><parameter_list pos:line="413" pos:column="23">(<param><decl><type><name pos:line="413" pos:column="24">Cursor</name></type> <name pos:line="413" pos:column="31">curs</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="414" pos:column="9">void</name></type> <name pos:line="414" pos:column="14">SetTitle</name><parameter_list pos:line="414" pos:column="22">(<param><decl><type><specifier pos:line="414" pos:column="23">const</specifier> <name pos:line="414" pos:column="29">char</name> <type:modifier pos:line="414" pos:column="34">*</type:modifier></type><name pos:line="414" pos:column="35">s</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="415" pos:column="9">PRectangle</name></type> <name pos:line="415" pos:column="20">GetMonitorRect</name><parameter_list pos:line="415" pos:column="34">(<param><decl><type><name pos:line="415" pos:column="35">Point</name></type> <name pos:line="415" pos:column="41">pt</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if pos:line="416" pos:column="1">#<cpp:directive pos:line="416" pos:column="2">if</cpp:directive> <expr><name pos:line="416" pos:column="5">PLAT_MACOSX</name></expr></cpp:if>
	<function><type><name pos:line="417" pos:column="9">void</name></type> <name pos:line="417" pos:column="14">SetWindow</name><parameter_list pos:line="417" pos:column="23">(<param><decl><type><name pos:line="417" pos:column="24">void</name> <type:modifier pos:line="417" pos:column="29">*</type:modifier></type><name pos:line="417" pos:column="30">ref</name></decl></param>)</parameter_list> <block pos:line="417" pos:column="35">{ <expr_stmt><expr><name pos:line="417" pos:column="37">windowRef</name> <op:operator pos:line="417" pos:column="47">=</op:operator> <name pos:line="417" pos:column="49">ref</name></expr>;</expr_stmt> }</block></function>
	<function><type><name pos:line="418" pos:column="9">void</name></type> <name pos:line="418" pos:column="14">SetControl</name><parameter_list pos:line="418" pos:column="24">(<param><decl><type><name pos:line="418" pos:column="25">void</name> <type:modifier pos:line="418" pos:column="30">*</type:modifier></type><name pos:line="418" pos:column="31">_control</name></decl></param>)</parameter_list> <block pos:line="418" pos:column="41">{ <expr_stmt><expr><name pos:line="418" pos:column="43">control</name> <op:operator pos:line="418" pos:column="51">=</op:operator> <name pos:line="418" pos:column="53">_control</name></expr>;</expr_stmt> }</block></function>
<cpp:endif pos:line="419" pos:column="1">#<cpp:directive pos:line="419" pos:column="2">endif</cpp:directive></cpp:endif>
</public><private pos:line="420" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="421" pos:column="9">Cursor</name></type> <name pos:line="421" pos:column="16">cursorLast</name></decl>;</decl_stmt>
</private>}</block>;</class>

<comment type="block" format="doxygen" pos:line="424" pos:column="1">/**
 * Listbox management.
 */</comment>

<class pos:line="428" pos:column="1">class <name pos:line="428" pos:column="7">ListBox</name> <super pos:line="428" pos:column="15">: <specifier pos:line="428" pos:column="17">public</specifier> <name pos:line="428" pos:column="24">Window</name></super> <block pos:line="428" pos:column="31">{<private type="default" pos:line="428" pos:column="32">
</private><public pos:line="429" pos:column="1">public:
	<constructor_decl><name pos:line="430" pos:column="9">ListBox</name><parameter_list pos:line="430" pos:column="16">()</parameter_list>;</constructor_decl>
	<destructor_decl><specifier pos:line="431" pos:column="9">virtual</specifier> <name pos:line="431" pos:column="17">~<name pos:line="431" pos:column="18">ListBox</name></name><parameter_list pos:line="431" pos:column="25">()</parameter_list>;</destructor_decl>
	<function_decl><type><specifier pos:line="432" pos:column="9">static</specifier> <name pos:line="432" pos:column="16">ListBox</name> <type:modifier pos:line="432" pos:column="24">*</type:modifier></type><name pos:line="432" pos:column="25">Allocate</name><parameter_list pos:line="432" pos:column="33">()</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="434" pos:column="9">virtual</specifier> <name pos:line="434" pos:column="17">void</name></type> <name pos:line="434" pos:column="22">SetFont</name><parameter_list pos:line="434" pos:column="29">(<param><decl><type><name pos:line="434" pos:column="30">Font</name> <type:modifier pos:line="434" pos:column="35">&amp;</type:modifier></type><name pos:line="434" pos:column="36">font</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="434" pos:column="42">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="435" pos:column="9">virtual</specifier> <name pos:line="435" pos:column="17">void</name></type> <name pos:line="435" pos:column="22">Create</name><parameter_list pos:line="435" pos:column="28">(<param><decl><type><name pos:line="435" pos:column="29">Window</name> <type:modifier pos:line="435" pos:column="36">&amp;</type:modifier></type><name pos:line="435" pos:column="37">parent</name></decl></param>, <param><decl><type><name pos:line="435" pos:column="45">int</name></type> <name pos:line="435" pos:column="49">ctrlID</name></decl></param>, <param><decl><type><name pos:line="435" pos:column="57">Point</name></type> <name pos:line="435" pos:column="63">location</name></decl></param>, <param><decl><type><name pos:line="435" pos:column="73">int</name></type> <name pos:line="435" pos:column="77">lineHeight_</name></decl></param>, <param><decl><type><name pos:line="435" pos:column="90">bool</name></type> <name pos:line="435" pos:column="95">unicodeMode_</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="435" pos:column="109">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="436" pos:column="9">virtual</specifier> <name pos:line="436" pos:column="17">void</name></type> <name pos:line="436" pos:column="22">SetAverageCharWidth</name><parameter_list pos:line="436" pos:column="41">(<param><decl><type><name pos:line="436" pos:column="42">int</name></type> <name pos:line="436" pos:column="46">width</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="436" pos:column="53">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="437" pos:column="9">virtual</specifier> <name pos:line="437" pos:column="17">void</name></type> <name pos:line="437" pos:column="22">SetVisibleRows</name><parameter_list pos:line="437" pos:column="36">(<param><decl><type><name pos:line="437" pos:column="37">int</name></type> <name pos:line="437" pos:column="41">rows</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="437" pos:column="47">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="438" pos:column="9">virtual</specifier> <name pos:line="438" pos:column="17">int</name></type> <name pos:line="438" pos:column="21">GetVisibleRows</name><parameter_list pos:line="438" pos:column="35">()</parameter_list> <specifier pos:line="438" pos:column="38">const</specifier>=<lit:literal type="number" pos:line="438" pos:column="44">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="439" pos:column="9">virtual</specifier> <name pos:line="439" pos:column="17">PRectangle</name></type> <name pos:line="439" pos:column="28">GetDesiredRect</name><parameter_list pos:line="439" pos:column="42">()</parameter_list>=<lit:literal type="number" pos:line="439" pos:column="45">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="440" pos:column="9">virtual</specifier> <name pos:line="440" pos:column="17">int</name></type> <name pos:line="440" pos:column="21">CaretFromEdge</name><parameter_list pos:line="440" pos:column="34">()</parameter_list>=<lit:literal type="number" pos:line="440" pos:column="37">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="441" pos:column="9">virtual</specifier> <name pos:line="441" pos:column="17">void</name></type> <name pos:line="441" pos:column="22">Clear</name><parameter_list pos:line="441" pos:column="27">()</parameter_list>=<lit:literal type="number" pos:line="441" pos:column="30">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="442" pos:column="9">virtual</specifier> <name pos:line="442" pos:column="17">void</name></type> <name pos:line="442" pos:column="22">Append</name><parameter_list pos:line="442" pos:column="28">(<param><decl><type><name pos:line="442" pos:column="29">char</name> <type:modifier pos:line="442" pos:column="34">*</type:modifier></type><name pos:line="442" pos:column="35">s</name></decl></param>, <param><decl><type><name pos:line="442" pos:column="38">int</name></type> <name pos:line="442" pos:column="42">type</name> <init pos:line="442" pos:column="47">= <expr><op:operator pos:line="442" pos:column="49">-</op:operator><lit:literal type="number" pos:line="442" pos:column="50">1</lit:literal></expr></init></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="442" pos:column="53">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="443" pos:column="9">virtual</specifier> <name pos:line="443" pos:column="17">int</name></type> <name pos:line="443" pos:column="21">Length</name><parameter_list pos:line="443" pos:column="27">()</parameter_list>=<lit:literal type="number" pos:line="443" pos:column="30">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="444" pos:column="9">virtual</specifier> <name pos:line="444" pos:column="17">void</name></type> <name pos:line="444" pos:column="22">Select</name><parameter_list pos:line="444" pos:column="28">(<param><decl><type><name pos:line="444" pos:column="29">int</name></type> <name pos:line="444" pos:column="33">n</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="444" pos:column="36">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="445" pos:column="9">virtual</specifier> <name pos:line="445" pos:column="17">int</name></type> <name pos:line="445" pos:column="21">GetSelection</name><parameter_list pos:line="445" pos:column="33">()</parameter_list>=<lit:literal type="number" pos:line="445" pos:column="36">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="446" pos:column="9">virtual</specifier> <name pos:line="446" pos:column="17">int</name></type> <name pos:line="446" pos:column="21">Find</name><parameter_list pos:line="446" pos:column="25">(<param><decl><type><specifier pos:line="446" pos:column="26">const</specifier> <name pos:line="446" pos:column="32">char</name> <type:modifier pos:line="446" pos:column="37">*</type:modifier></type><name pos:line="446" pos:column="38">prefix</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="446" pos:column="46">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="447" pos:column="9">virtual</specifier> <name pos:line="447" pos:column="17">void</name></type> <name pos:line="447" pos:column="22">GetValue</name><parameter_list pos:line="447" pos:column="30">(<param><decl><type><name pos:line="447" pos:column="31">int</name></type> <name pos:line="447" pos:column="35">n</name></decl></param>, <param><decl><type><name pos:line="447" pos:column="38">char</name> <type:modifier pos:line="447" pos:column="43">*</type:modifier></type><name pos:line="447" pos:column="44">value</name></decl></param>, <param><decl><type><name pos:line="447" pos:column="51">int</name></type> <name pos:line="447" pos:column="55">len</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="447" pos:column="60">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="448" pos:column="9">virtual</specifier> <name pos:line="448" pos:column="17">void</name></type> <name pos:line="448" pos:column="22">RegisterImage</name><parameter_list pos:line="448" pos:column="35">(<param><decl><type><name pos:line="448" pos:column="36">int</name></type> <name pos:line="448" pos:column="40">type</name></decl></param>, <param><decl><type><specifier pos:line="448" pos:column="46">const</specifier> <name pos:line="448" pos:column="52">char</name> <type:modifier pos:line="448" pos:column="57">*</type:modifier></type><name pos:line="448" pos:column="58">xpm_data</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="448" pos:column="68">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="449" pos:column="9">virtual</specifier> <name pos:line="449" pos:column="17">void</name></type> <name pos:line="449" pos:column="22">ClearRegisteredImages</name><parameter_list pos:line="449" pos:column="43">()</parameter_list>=<lit:literal type="number" pos:line="449" pos:column="46">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="450" pos:column="9">virtual</specifier> <name pos:line="450" pos:column="17">void</name></type> <name pos:line="450" pos:column="22">SetDoubleClickAction</name><parameter_list pos:line="450" pos:column="42">(<param><decl><type><name pos:line="450" pos:column="43">CallBackAction</name></type></decl></param>, <param><decl><type><name pos:line="450" pos:column="59">void</name> <type:modifier pos:line="450" pos:column="64">*</type:modifier></type></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="450" pos:column="67">0</lit:literal>;</function_decl>
	<function_decl><type><specifier pos:line="451" pos:column="9">virtual</specifier> <name pos:line="451" pos:column="17">void</name></type> <name pos:line="451" pos:column="22">SetList</name><parameter_list pos:line="451" pos:column="29">(<param><decl><type><specifier pos:line="451" pos:column="30">const</specifier> <name pos:line="451" pos:column="36">char</name><type:modifier pos:line="451" pos:column="40">*</type:modifier></type> <name pos:line="451" pos:column="42">list</name></decl></param>, <param><decl><type><name pos:line="451" pos:column="48">char</name></type> <name pos:line="451" pos:column="53">separator</name></decl></param>, <param><decl><type><name pos:line="451" pos:column="64">char</name></type> <name pos:line="451" pos:column="69">typesep</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="451" pos:column="78">0</lit:literal>;</function_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="454" pos:column="1">/**
 * Menu management.
 */</comment>
<class pos:line="457" pos:column="1">class <name pos:line="457" pos:column="7">Menu</name> <block pos:line="457" pos:column="12">{<private type="default" pos:line="457" pos:column="13">
	<decl_stmt><decl><type><name pos:line="458" pos:column="9">MenuID</name></type> <name pos:line="458" pos:column="16">mid</name></decl>;</decl_stmt>
</private><public pos:line="459" pos:column="1">public:
	<constructor_decl><name pos:line="460" pos:column="9">Menu</name><parameter_list pos:line="460" pos:column="13">()</parameter_list>;</constructor_decl>
	<function><type><name pos:line="461" pos:column="9">MenuID</name></type> <name pos:line="461" pos:column="16">GetID</name><parameter_list pos:line="461" pos:column="21">()</parameter_list> <block pos:line="461" pos:column="24">{ <return pos:line="461" pos:column="26">return <expr><name pos:line="461" pos:column="33">mid</name></expr>;</return> }</block></function>
	<function_decl><type><name pos:line="462" pos:column="9">void</name></type> <name pos:line="462" pos:column="14">CreatePopUp</name><parameter_list pos:line="462" pos:column="25">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="463" pos:column="9">void</name></type> <name pos:line="463" pos:column="14">Destroy</name><parameter_list pos:line="463" pos:column="21">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="464" pos:column="9">void</name></type> <name pos:line="464" pos:column="14">Show</name><parameter_list pos:line="464" pos:column="18">(<param><decl><type><name pos:line="464" pos:column="19">Point</name></type> <name pos:line="464" pos:column="25">pt</name></decl></param>, <param><decl><type><name pos:line="464" pos:column="29">Window</name> <type:modifier pos:line="464" pos:column="36">&amp;</type:modifier></type><name pos:line="464" pos:column="37">w</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<class pos:line="467" pos:column="1">class <name pos:line="467" pos:column="7">ElapsedTime</name> <block pos:line="467" pos:column="19">{<private type="default" pos:line="467" pos:column="20">
	<decl_stmt><decl><type><name pos:line="468" pos:column="9">long</name></type> <name pos:line="468" pos:column="14">bigBit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="469" pos:column="9">long</name></type> <name pos:line="469" pos:column="14">littleBit</name></decl>;</decl_stmt>
</private><public pos:line="470" pos:column="1">public:
	<constructor_decl><name pos:line="471" pos:column="9">ElapsedTime</name><parameter_list pos:line="471" pos:column="20">()</parameter_list>;</constructor_decl>
	<function_decl><type><name pos:line="472" pos:column="9">double</name></type> <name pos:line="472" pos:column="16">Duration</name><parameter_list pos:line="472" pos:column="24">(<param><decl><type><name pos:line="472" pos:column="25">bool</name></type> <name pos:line="472" pos:column="30">reset</name><init pos:line="472" pos:column="35">=<expr><lit:literal type="boolean" pos:line="472" pos:column="36">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="475" pos:column="1">/**
 * Dynamic Library (DLL/SO/...) loading
 */</comment>
<class pos:line="478" pos:column="1">class <name pos:line="478" pos:column="7">DynamicLibrary</name> <block pos:line="478" pos:column="22">{<private type="default" pos:line="478" pos:column="23">
</private><public pos:line="479" pos:column="1">public:
	<destructor><specifier pos:line="480" pos:column="9">virtual</specifier> <name pos:line="480" pos:column="17">~<name pos:line="480" pos:column="18">DynamicLibrary</name></name><parameter_list pos:line="480" pos:column="32">()</parameter_list> <block pos:line="480" pos:column="35">{}</block></destructor>

	<comment type="line" format="doxygen" pos:line="482" pos:column="9">/// @return Pointer to function "name", or NULL on failure.</comment>
	<function_decl><type><specifier pos:line="483" pos:column="9">virtual</specifier> <name pos:line="483" pos:column="17">Function</name></type> <name pos:line="483" pos:column="26">FindFunction</name><parameter_list pos:line="483" pos:column="38">(<param><decl><type><specifier pos:line="483" pos:column="39">const</specifier> <name pos:line="483" pos:column="45">char</name> <type:modifier pos:line="483" pos:column="50">*</type:modifier></type><name pos:line="483" pos:column="51">name</name></decl></param>)</parameter_list> = <lit:literal type="number" pos:line="483" pos:column="59">0</lit:literal>;</function_decl>

	<comment type="line" format="doxygen" pos:line="485" pos:column="9">/// @return true if the library was loaded successfully.</comment>
	<function_decl><type><specifier pos:line="486" pos:column="9">virtual</specifier> <name pos:line="486" pos:column="17">bool</name></type> <name pos:line="486" pos:column="22">IsValid</name><parameter_list pos:line="486" pos:column="29">()</parameter_list> = <lit:literal type="number" pos:line="486" pos:column="34">0</lit:literal>;</function_decl>

	<comment type="line" format="doxygen" pos:line="488" pos:column="9">/// @return An instance of a DynamicLibrary subclass with "modulePath" loaded.</comment>
	<function_decl><type><specifier pos:line="489" pos:column="9">static</specifier> <name pos:line="489" pos:column="16">DynamicLibrary</name> <type:modifier pos:line="489" pos:column="31">*</type:modifier></type><name pos:line="489" pos:column="32">Load</name><parameter_list pos:line="489" pos:column="36">(<param><decl><type><specifier pos:line="489" pos:column="37">const</specifier> <name pos:line="489" pos:column="43">char</name> <type:modifier pos:line="489" pos:column="48">*</type:modifier></type><name pos:line="489" pos:column="49">modulePath</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="492" pos:column="1">/**
 * Platform class used to retrieve system wide parameters such as double click speed
 * and chrome colour. Not a creatable object, more of a module with several functions.
 */</comment>
<class pos:line="496" pos:column="1">class <name pos:line="496" pos:column="7">Platform</name> <block pos:line="496" pos:column="16">{<private type="default" pos:line="496" pos:column="17">
	<comment type="line" pos:line="497" pos:column="9">// Private so Platform objects can not be copied</comment>
	<constructor><name pos:line="498" pos:column="9">Platform</name><parameter_list pos:line="498" pos:column="17">(<param><decl><type><specifier pos:line="498" pos:column="18">const</specifier></type> <name pos:line="498" pos:column="24">Platform</name> <type:modifier pos:line="498" pos:column="33">&amp;</type:modifier></decl></param>)</parameter_list> <block pos:line="498" pos:column="36">{}</block></constructor>
	<function><type><name pos:line="499" pos:column="9">Platform</name> <type:modifier pos:line="499" pos:column="18">&amp;</type:modifier></type><name pos:line="499" pos:column="19">operator=</name><parameter_list pos:line="499" pos:column="28">(<param><decl><type><specifier pos:line="499" pos:column="29">const</specifier></type> <name pos:line="499" pos:column="35">Platform</name> <type:modifier pos:line="499" pos:column="44">&amp;</type:modifier></decl></param>)</parameter_list> <block pos:line="499" pos:column="47">{ <return pos:line="499" pos:column="49">return <expr><op:operator pos:line="499" pos:column="56">*</op:operator><name pos:line="499" pos:column="57">this</name></expr>;</return> }</block></function>
</private><public pos:line="500" pos:column="1">public:
	<comment type="line" pos:line="501" pos:column="9">// Should be private because no new Platforms are ever created</comment>
	<comment type="line" pos:line="502" pos:column="9">// but gcc warns about this</comment>
	<constructor><name pos:line="503" pos:column="9">Platform</name><parameter_list pos:line="503" pos:column="17">()</parameter_list> <block pos:line="503" pos:column="20">{}</block></constructor>
	<destructor><name pos:line="504" pos:column="9">~<name pos:line="504" pos:column="10">Platform</name></name><parameter_list pos:line="504" pos:column="18">()</parameter_list> <block pos:line="504" pos:column="21">{}</block></destructor>
	<function_decl><type><specifier pos:line="505" pos:column="9">static</specifier> <name pos:line="505" pos:column="16">ColourDesired</name></type> <name pos:line="505" pos:column="30">Chrome</name><parameter_list pos:line="505" pos:column="36">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="506" pos:column="9">static</specifier> <name pos:line="506" pos:column="16">ColourDesired</name></type> <name pos:line="506" pos:column="30">ChromeHighlight</name><parameter_list pos:line="506" pos:column="45">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="507" pos:column="9">static</specifier> <specifier pos:line="507" pos:column="16">const</specifier> <name pos:line="507" pos:column="22">char</name> <type:modifier pos:line="507" pos:column="27">*</type:modifier></type><name pos:line="507" pos:column="28">DefaultFont</name><parameter_list pos:line="507" pos:column="39">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="508" pos:column="9">static</specifier> <name pos:line="508" pos:column="16">int</name></type> <name pos:line="508" pos:column="20">DefaultFontSize</name><parameter_list pos:line="508" pos:column="35">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="509" pos:column="9">static</specifier> <name pos:line="509" pos:column="16">unsigned</name> <name pos:line="509" pos:column="25">int</name></type> <name pos:line="509" pos:column="29">DoubleClickTime</name><parameter_list pos:line="509" pos:column="44">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="510" pos:column="9">static</specifier> <name pos:line="510" pos:column="16">bool</name></type> <name pos:line="510" pos:column="21">MouseButtonBounce</name><parameter_list pos:line="510" pos:column="38">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="511" pos:column="9">static</specifier> <name pos:line="511" pos:column="16">void</name></type> <name pos:line="511" pos:column="21">DebugDisplay</name><parameter_list pos:line="511" pos:column="33">(<param><decl><type><specifier pos:line="511" pos:column="34">const</specifier> <name pos:line="511" pos:column="40">char</name> <type:modifier pos:line="511" pos:column="45">*</type:modifier></type><name pos:line="511" pos:column="46">s</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="512" pos:column="9">static</specifier> <name pos:line="512" pos:column="16">bool</name></type> <name pos:line="512" pos:column="21">IsKeyDown</name><parameter_list pos:line="512" pos:column="30">(<param><decl><type><name pos:line="512" pos:column="31">int</name></type> <name pos:line="512" pos:column="35">key</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="513" pos:column="9">static</specifier> <name pos:line="513" pos:column="16">long</name></type> <name pos:line="513" pos:column="21">SendScintilla</name><parameter_list pos:line="513" pos:column="34">(
		<param><decl><type><name pos:line="514" pos:column="17">WindowID</name></type> <name pos:line="514" pos:column="26">w</name></decl></param>, <param><decl><type><name pos:line="514" pos:column="29">unsigned</name> <name pos:line="514" pos:column="38">int</name></type> <name pos:line="514" pos:column="42">msg</name></decl></param>, <param><decl><type><name pos:line="514" pos:column="47">unsigned</name> <name pos:line="514" pos:column="56">long</name></type> <name pos:line="514" pos:column="61">wParam</name><init pos:line="514" pos:column="67">=<expr><lit:literal type="number" pos:line="514" pos:column="68">0</lit:literal></expr></init></decl></param>, <name pos:line="514" pos:column="71">long</name> <name pos:line="514" pos:column="76">lParam</name><op:operator pos:line="514" pos:column="82">=</op:operator><lit:literal type="number" pos:line="514" pos:column="83">0</lit:literal>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="515" pos:column="9">static</specifier> <name pos:line="515" pos:column="16">long</name></type> <name pos:line="515" pos:column="21">SendScintillaPointer</name><parameter_list pos:line="515" pos:column="41">(
		<param><decl><type><name pos:line="516" pos:column="17">WindowID</name></type> <name pos:line="516" pos:column="26">w</name></decl></param>, <param><decl><type><name pos:line="516" pos:column="29">unsigned</name> <name pos:line="516" pos:column="38">int</name></type> <name pos:line="516" pos:column="42">msg</name></decl></param>, <param><decl><type><name pos:line="516" pos:column="47">unsigned</name> <name pos:line="516" pos:column="56">long</name></type> <name pos:line="516" pos:column="61">wParam</name><init pos:line="516" pos:column="67">=<expr><lit:literal type="number" pos:line="516" pos:column="68">0</lit:literal></expr></init></decl></param>, <name pos:line="516" pos:column="71">void</name> <type:modifier pos:line="516" pos:column="76">*</type:modifier><name pos:line="516" pos:column="77">lParam</name><op:operator pos:line="516" pos:column="83">=</op:operator><lit:literal type="number" pos:line="516" pos:column="84">0</lit:literal>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="517" pos:column="9">static</specifier> <name pos:line="517" pos:column="16">bool</name></type> <name pos:line="517" pos:column="21">IsDBCSLeadByte</name><parameter_list pos:line="517" pos:column="35">(<param><decl><type><name pos:line="517" pos:column="36">int</name></type> <name pos:line="517" pos:column="40">codePage</name></decl></param>, <param><decl><type><name pos:line="517" pos:column="50">char</name></type> <name pos:line="517" pos:column="55">ch</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="518" pos:column="9">static</specifier> <name pos:line="518" pos:column="16">int</name></type> <name pos:line="518" pos:column="20">DBCSCharLength</name><parameter_list pos:line="518" pos:column="34">(<param><decl><type><name pos:line="518" pos:column="35">int</name></type> <name pos:line="518" pos:column="39">codePage</name></decl></param>, <param><decl><type><specifier pos:line="518" pos:column="49">const</specifier> <name pos:line="518" pos:column="55">char</name> <type:modifier pos:line="518" pos:column="60">*</type:modifier></type><name pos:line="518" pos:column="61">s</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="519" pos:column="9">static</specifier> <name pos:line="519" pos:column="16">int</name></type> <name pos:line="519" pos:column="20">DBCSCharMaxLength</name><parameter_list pos:line="519" pos:column="37">()</parameter_list>;</function_decl>

	<comment type="line" pos:line="521" pos:column="9">// These are utility functions not really tied to a platform</comment>
	<function_decl><type><specifier pos:line="522" pos:column="9">static</specifier> <name pos:line="522" pos:column="16">int</name></type> <name pos:line="522" pos:column="20">Minimum</name><parameter_list pos:line="522" pos:column="27">(<param><decl><type><name pos:line="522" pos:column="28">int</name></type> <name pos:line="522" pos:column="32">a</name></decl></param>, <param><decl><type><name pos:line="522" pos:column="35">int</name></type> <name pos:line="522" pos:column="39">b</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="523" pos:column="9">static</specifier> <name pos:line="523" pos:column="16">int</name></type> <name pos:line="523" pos:column="20">Maximum</name><parameter_list pos:line="523" pos:column="27">(<param><decl><type><name pos:line="523" pos:column="28">int</name></type> <name pos:line="523" pos:column="32">a</name></decl></param>, <param><decl><type><name pos:line="523" pos:column="35">int</name></type> <name pos:line="523" pos:column="39">b</name></decl></param>)</parameter_list>;</function_decl>
	<comment type="line" pos:line="524" pos:column="9">// Next three assume 16 bit shorts and 32 bit longs</comment>
	<function><type><specifier pos:line="525" pos:column="9">static</specifier> <name pos:line="525" pos:column="16">long</name></type> <name pos:line="525" pos:column="21">LongFromTwoShorts</name><parameter_list pos:line="525" pos:column="38">(<param><decl><type><name pos:line="525" pos:column="39">short</name></type> <name pos:line="525" pos:column="45">a</name></decl></param>,<param><decl><type><name pos:line="525" pos:column="47">short</name></type> <name pos:line="525" pos:column="53">b</name></decl></param>)</parameter_list> <block pos:line="525" pos:column="56">{
		<return pos:line="526" pos:column="17">return <expr><op:operator pos:line="526" pos:column="24">(</op:operator><name pos:line="526" pos:column="25">a</name><op:operator pos:line="526" pos:column="26">)</op:operator> <op:operator pos:line="526" pos:column="28">|</op:operator> <op:operator pos:line="526" pos:column="30">(</op:operator><op:operator pos:line="526" pos:column="31">(</op:operator><name pos:line="526" pos:column="32">b</name><op:operator pos:line="526" pos:column="33">)</op:operator> <op:operator pos:line="526" pos:column="35">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="526" pos:column="38">16</lit:literal><op:operator pos:line="526" pos:column="40">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="528" pos:column="9">static</specifier> <name pos:line="528" pos:column="16">short</name></type> <name pos:line="528" pos:column="22">HighShortFromLong</name><parameter_list pos:line="528" pos:column="39">(<param><decl><type><name pos:line="528" pos:column="40">long</name></type> <name pos:line="528" pos:column="45">x</name></decl></param>)</parameter_list> <block pos:line="528" pos:column="48">{
		<return pos:line="529" pos:column="17">return <expr><call><name><name pos:line="529" pos:column="24">static_cast</name><argument_list pos:line="529" pos:column="35">&lt;<argument><expr><name pos:line="529" pos:column="36">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="529" pos:column="42">(<argument><expr><name pos:line="529" pos:column="43">x</name> <op:operator pos:line="529" pos:column="45">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="529" pos:column="48">16</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="531" pos:column="9">static</specifier> <name pos:line="531" pos:column="16">short</name></type> <name pos:line="531" pos:column="22">LowShortFromLong</name><parameter_list pos:line="531" pos:column="38">(<param><decl><type><name pos:line="531" pos:column="39">long</name></type> <name pos:line="531" pos:column="44">x</name></decl></param>)</parameter_list> <block pos:line="531" pos:column="47">{
		<return pos:line="532" pos:column="17">return <expr><call><name><name pos:line="532" pos:column="24">static_cast</name><argument_list pos:line="532" pos:column="35">&lt;<argument><expr><name pos:line="532" pos:column="36">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="532" pos:column="42">(<argument><expr><name pos:line="532" pos:column="43">x</name> <op:operator pos:line="532" pos:column="45">&amp;</op:operator> <lit:literal type="number" pos:line="532" pos:column="47">0xffff</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><specifier pos:line="534" pos:column="9">static</specifier> <name pos:line="534" pos:column="16">void</name></type> <name pos:line="534" pos:column="21">DebugPrintf</name><parameter_list pos:line="534" pos:column="32">(<param><decl><type><specifier pos:line="534" pos:column="33">const</specifier> <name pos:line="534" pos:column="39">char</name> <type:modifier pos:line="534" pos:column="44">*</type:modifier></type><name pos:line="534" pos:column="45">format</name></decl></param>, <param><decl><type><type:modifier pos:line="534" pos:column="53">...</type:modifier></type></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="535" pos:column="9">static</specifier> <name pos:line="535" pos:column="16">bool</name></type> <name pos:line="535" pos:column="21">ShowAssertionPopUps</name><parameter_list pos:line="535" pos:column="40">(<param><decl><type><name pos:line="535" pos:column="41">bool</name></type> <name pos:line="535" pos:column="46">assertionPopUps_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="536" pos:column="9">static</specifier> <name pos:line="536" pos:column="16">void</name></type> <name pos:line="536" pos:column="21">Assert</name><parameter_list pos:line="536" pos:column="27">(<param><decl><type><specifier pos:line="536" pos:column="28">const</specifier> <name pos:line="536" pos:column="34">char</name> <type:modifier pos:line="536" pos:column="39">*</type:modifier></type><name pos:line="536" pos:column="40">c</name></decl></param>, <param><decl><type><specifier pos:line="536" pos:column="43">const</specifier> <name pos:line="536" pos:column="49">char</name> <type:modifier pos:line="536" pos:column="54">*</type:modifier></type><name pos:line="536" pos:column="55">file</name></decl></param>, <param><decl><type><name pos:line="536" pos:column="61">int</name></type> <name pos:line="536" pos:column="65">line</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="537" pos:column="9">static</specifier> <name pos:line="537" pos:column="16">int</name></type> <name pos:line="537" pos:column="20">Clamp</name><parameter_list pos:line="537" pos:column="25">(<param><decl><type><name pos:line="537" pos:column="26">int</name></type> <name pos:line="537" pos:column="30">val</name></decl></param>, <param><decl><type><name pos:line="537" pos:column="35">int</name></type> <name pos:line="537" pos:column="39">minVal</name></decl></param>, <param><decl><type><name pos:line="537" pos:column="47">int</name></type> <name pos:line="537" pos:column="51">maxVal</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<cpp:ifdef pos:line="540" pos:column="1">#<cpp:directive pos:line="540" pos:column="2">ifdef</cpp:directive>  <name pos:line="540" pos:column="9">NDEBUG</name></cpp:ifdef>
<cpp:define pos:line="541" pos:column="1">#<cpp:directive pos:line="541" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="541" pos:column="9">PLATFORM_ASSERT</name><parameter_list pos:line="541" pos:column="24">(<param><type><name pos:line="541" pos:column="25">c</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="541" pos:column="28">((void)0)</cpp:value></cpp:define>
<cpp:else pos:line="542" pos:column="1">#<cpp:directive pos:line="542" pos:column="2">else</cpp:directive></cpp:else>
<cpp:ifdef pos:line="543" pos:column="1">#<cpp:directive pos:line="543" pos:column="2">ifdef</cpp:directive> <name pos:line="543" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<cpp:define pos:line="544" pos:column="1">#<cpp:directive pos:line="544" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="544" pos:column="9">PLATFORM_ASSERT</name><parameter_list pos:line="544" pos:column="24">(<param><type><name pos:line="544" pos:column="25">c</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="544" pos:column="28">((c) ? (void)(0) : Scintilla::Platform::Assert(#c, __FILE__, __LINE__))</cpp:value></cpp:define>
<cpp:else pos:line="545" pos:column="1">#<cpp:directive pos:line="545" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="546" pos:column="1">#<cpp:directive pos:line="546" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="546" pos:column="9">PLATFORM_ASSERT</name><parameter_list pos:line="546" pos:column="24">(<param><type><name pos:line="546" pos:column="25">c</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="546" pos:column="28">((c) ? (void)(0) : Platform::Assert(#c, __FILE__, __LINE__))</cpp:value></cpp:define>
<cpp:endif pos:line="547" pos:column="1">#<cpp:directive pos:line="547" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif pos:line="548" pos:column="1">#<cpp:directive pos:line="548" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="550" pos:column="1">#<cpp:directive pos:line="550" pos:column="2">ifdef</cpp:directive> <name pos:line="550" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="552" pos:column="1">#<cpp:directive pos:line="552" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="554" pos:column="1">// Shut up annoying Visual C++ warnings:</comment>
<cpp:ifdef pos:line="555" pos:column="1">#<cpp:directive pos:line="555" pos:column="2">ifdef</cpp:directive> <name pos:line="555" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="556" pos:column="1">#<cpp:directive pos:line="556" pos:column="2">pragma</cpp:directive> warning(disable: 4244 4309 4514 4710)</cpp:pragma>
<cpp:endif pos:line="557" pos:column="1">#<cpp:directive pos:line="557" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="559" pos:column="1">#<cpp:directive pos:line="559" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
