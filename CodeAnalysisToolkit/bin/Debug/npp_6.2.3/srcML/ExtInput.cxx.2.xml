<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\macosx\ExtInput.cxx" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/*******************************************************************************

Copyright (c) 2007 Adobe Systems Incorporated

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

********************************************************************************/</comment>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"ScintillaMacOSX.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"ExtInput.h"</lit:literal></cpp:file></cpp:include>

<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>

<comment type="line" pos:line="29" pos:column="1">// uncomment this for a log to /dev/console</comment>
<comment type="line" pos:line="30" pos:column="1">// #define LOG_TSM 1</comment>

<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if</cpp:directive> <expr><name pos:line="32" pos:column="5">LOG_TSM</name></expr></cpp:if>
<decl_stmt><decl><type><name pos:line="33" pos:column="1">FILE</name><type:modifier pos:line="33" pos:column="5">*</type:modifier></type> <name pos:line="33" pos:column="7">logFile</name> <init pos:line="33" pos:column="15">= <expr><name pos:line="33" pos:column="17">NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier pos:line="36" pos:column="1">static</specifier> <name pos:line="36" pos:column="8">EventHandlerUPP</name></type> <name pos:line="36" pos:column="24">tsmHandler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="38" pos:column="1">static</specifier> <name pos:line="38" pos:column="8">EventTypeSpec</name></type>	<name><name pos:line="38" pos:column="25">tsmSpecs</name><index pos:line="38" pos:column="33">[]</index></name> <init pos:line="38" pos:column="36">= <expr><block pos:line="38" pos:column="38">{
	<expr><block pos:line="39" pos:column="9">{ <expr><name pos:line="39" pos:column="11">kEventClassTextInput</name></expr>, <expr><name pos:line="39" pos:column="33">kEventTextInputUpdateActiveInputArea</name></expr> }</block></expr>,
<comment type="line" pos:line="40" pos:column="1">//	{ kEventClassTextInput, kEventTextInputUnicodeForKeyEvent },</comment>
	<expr><block pos:line="41" pos:column="9">{ <expr><name pos:line="41" pos:column="11">kEventClassTextInput</name></expr>, <expr><name pos:line="41" pos:column="33">kEventTextInputOffsetToPos</name></expr> }</block></expr>,
	<expr><block pos:line="42" pos:column="9">{ <expr><name pos:line="42" pos:column="11">kEventClassTextInput</name></expr>, <expr><name pos:line="42" pos:column="33">kEventTextInputPosToOffset</name></expr> }</block></expr>,
	<expr><block pos:line="43" pos:column="9">{ <expr><name pos:line="43" pos:column="11">kEventClassTextInput</name></expr>, <expr><name pos:line="43" pos:column="33">kEventTextInputGetSelectedText</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="46" pos:column="9">kScintillaTSM</name></cpp:macro>	<cpp:value pos:line="46" pos:column="25">'ScTs'</cpp:value></cpp:define>

<comment type="line" pos:line="48" pos:column="1">// The following structure is attached to the HIViewRef as property kScintillaTSM</comment>

<struct pos:line="50" pos:column="1">struct <name pos:line="50" pos:column="8">TSMData</name>
<block pos:line="51" pos:column="1">{<public type="default" pos:line="51" pos:column="2">
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">HIViewRef</name></type>			<name pos:line="52" pos:column="41">view</name></decl>;</decl_stmt>				<comment type="line" pos:line="52" pos:column="73">// this view</comment>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">TSMDocumentID</name></type>		<name pos:line="53" pos:column="33">docid</name></decl>;</decl_stmt>				<comment type="line" pos:line="53" pos:column="65">// the TSM document ID</comment>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">EventHandlerRef</name></type>		<name pos:line="54" pos:column="33">handler</name></decl>;</decl_stmt>			<comment type="line" pos:line="54" pos:column="65">// the event handler</comment>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">ScintillaMacOSX</name><type:modifier pos:line="55" pos:column="24">*</type:modifier></type>	<name pos:line="55" pos:column="33">scintilla</name></decl>;</decl_stmt>			<comment type="line" pos:line="55" pos:column="65">// the Scintilla pointer</comment>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">int</name></type>					<name pos:line="56" pos:column="49">styleMask</name></decl>;</decl_stmt>			<comment type="line" pos:line="56" pos:column="81">// the document style mask</comment>
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">int</name></type>					<name><name pos:line="57" pos:column="49">indicStyle</name> <index pos:line="57" pos:column="60">[<expr><lit:literal type="number" pos:line="57" pos:column="61">3</lit:literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="line" pos:line="57" pos:column="73">// indicator styles save</comment>
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">int</name></type>					<name><name pos:line="58" pos:column="49">indicColor</name> <index pos:line="58" pos:column="60">[<expr><lit:literal type="number" pos:line="58" pos:column="61">3</lit:literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="line" pos:line="58" pos:column="73">// indicator colors save</comment>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">int</name></type>					<name pos:line="59" pos:column="49">selStart</name></decl>;</decl_stmt>			<comment type="line" pos:line="59" pos:column="81">// starting position of selection (Scintilla offset)</comment>
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">int</name></type>					<name pos:line="60" pos:column="49">selLength</name></decl>;</decl_stmt>			<comment type="line" pos:line="60" pos:column="81">// UTF-8 number of characters</comment>
	<decl_stmt><decl><type><name pos:line="61" pos:column="9">int</name></type>					<name pos:line="61" pos:column="49">selCur</name></decl>;</decl_stmt>				<comment type="line" pos:line="61" pos:column="81">// current position (Scintilla offset)</comment>
	<decl_stmt><decl><type><name pos:line="62" pos:column="9">int</name></type>					<name pos:line="62" pos:column="49">inhibitRecursion</name></decl>;</decl_stmt>	<comment type="line" pos:line="62" pos:column="73">// true to stop recursion</comment>
	<decl_stmt><decl><type><name pos:line="63" pos:column="9">bool</name></type>				<name pos:line="63" pos:column="41">active</name></decl>;</decl_stmt>				<comment type="line" pos:line="63" pos:column="73">// true if this is active</comment>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier pos:line="66" pos:column="1">static</specifier> <specifier pos:line="66" pos:column="8">const</specifier> <name pos:line="66" pos:column="14">int</name></type> <name pos:line="66" pos:column="18">numSpecs</name> <init pos:line="66" pos:column="27">= <expr><lit:literal type="number" pos:line="66" pos:column="29">5</lit:literal></expr></init></decl>;</decl_stmt>


<comment type="line" pos:line="69" pos:column="1">// Fetch a range of text as UTF-16; delete the buffer after use</comment>

<function><type><specifier pos:line="71" pos:column="1">static</specifier> <name pos:line="71" pos:column="8">char</name><type:modifier pos:line="71" pos:column="12">*</type:modifier></type> <name pos:line="71" pos:column="14">getTextPortion</name> <parameter_list pos:line="71" pos:column="29">(<param><decl><type><name pos:line="71" pos:column="30">TSMData</name><type:modifier pos:line="71" pos:column="37">*</type:modifier></type> <name pos:line="71" pos:column="39">data</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="45">UInt32</name></type> <name pos:line="71" pos:column="52">start</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="59">UInt32</name></type> <name pos:line="71" pos:column="66">size</name></decl></param>)</parameter_list>
<block pos:line="72" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="73" pos:column="9">Scintilla</name><op:operator pos:line="73" pos:column="18">::</op:operator><name pos:line="73" pos:column="20">TextRange</name></name></type> <name pos:line="73" pos:column="30">range</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="74" pos:column="9">range</name><op:operator pos:line="74" pos:column="14">.</op:operator><name pos:line="74" pos:column="15">chrg</name><op:operator pos:line="74" pos:column="19">.</op:operator><name pos:line="74" pos:column="20">cpMin</name></name> <op:operator pos:line="74" pos:column="26">=</op:operator> <name pos:line="74" pos:column="28">start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="75" pos:column="9">range</name><op:operator pos:line="75" pos:column="14">.</op:operator><name pos:line="75" pos:column="15">chrg</name><op:operator pos:line="75" pos:column="19">.</op:operator><name pos:line="75" pos:column="20">cpMax</name></name> <op:operator pos:line="75" pos:column="26">=</op:operator> <name pos:line="75" pos:column="28">start</name> <op:operator pos:line="75" pos:column="34">+</op:operator> <name pos:line="75" pos:column="36">size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="76" pos:column="9">range</name><op:operator pos:line="76" pos:column="14">.</op:operator><name pos:line="76" pos:column="15">lpstrText</name></name> <op:operator pos:line="76" pos:column="25">=</op:operator> <op:operator pos:line="76" pos:column="27">new</op:operator> <name><name pos:line="76" pos:column="31">char</name> <index pos:line="76" pos:column="36">[<expr><name pos:line="76" pos:column="37">size</name> <op:operator pos:line="76" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="76" pos:column="44">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="77" pos:column="9">range</name><op:operator pos:line="77" pos:column="14">.</op:operator><name pos:line="77" pos:column="15">lpstrText</name> <index pos:line="77" pos:column="25">[<expr><name pos:line="77" pos:column="26">size</name></expr>]</index></name> <op:operator pos:line="77" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="77" pos:column="34">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="78" pos:column="9">data</name><op:operator pos:line="78" pos:column="13">-&gt;</op:operator><name pos:line="78" pos:column="15">scintilla</name><op:operator pos:line="78" pos:column="24">-&gt;</op:operator><name pos:line="78" pos:column="26">WndProc</name></name> <argument_list pos:line="78" pos:column="34">(<argument><expr><name pos:line="78" pos:column="35">SCI_GETTEXTRANGE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="78" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="78" pos:column="56">(</op:operator><name pos:line="78" pos:column="57">uptr_t</name><op:operator pos:line="78" pos:column="63">)</op:operator> <op:operator pos:line="78" pos:column="65">&amp;</op:operator><name pos:line="78" pos:column="66">range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="79" pos:column="9">return <expr><name><name pos:line="79" pos:column="16">range</name><op:operator pos:line="79" pos:column="21">.</op:operator><name pos:line="79" pos:column="22">lpstrText</name></name></expr>;</return>
}</block></function>

<function_decl><type><specifier pos:line="82" pos:column="1">static</specifier> <name pos:line="82" pos:column="8">pascal</name> <name pos:line="82" pos:column="15">OSStatus</name></type> <name pos:line="82" pos:column="24">doHandleTSM</name> <parameter_list pos:line="82" pos:column="36">(<param><decl><type><name pos:line="82" pos:column="37">EventHandlerCallRef</name></type></decl></param>, <param><decl><type><name pos:line="82" pos:column="58">EventRef</name></type> <name pos:line="82" pos:column="67">inEvent</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="76">void</name><type:modifier pos:line="82" pos:column="80">*</type:modifier></type> <name pos:line="82" pos:column="82">userData</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name pos:line="84" pos:column="1">void</name></type> <name><name pos:line="84" pos:column="6">ExtInput</name><op:operator pos:line="84" pos:column="14">::</op:operator><name pos:line="84" pos:column="16">attach</name></name> <parameter_list pos:line="84" pos:column="23">(<param><decl><type><name pos:line="84" pos:column="24">HIViewRef</name></type> <name pos:line="84" pos:column="34">viewRef</name></decl></param>)</parameter_list>
<block pos:line="85" pos:column="1">{
	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">NULL</name> <op:operator pos:line="86" pos:column="18">==</op:operator> <name pos:line="86" pos:column="21">tsmHandler</name></expr>)</condition><then pos:line="86" pos:column="32">
		<expr_stmt><expr><name pos:line="87" pos:column="17">tsmHandler</name> <op:operator pos:line="87" pos:column="28">=</op:operator> <call><name pos:line="87" pos:column="30">NewEventHandlerUPP</name> <argument_list pos:line="87" pos:column="49">(<argument><expr><name pos:line="87" pos:column="50">doHandleTSM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="88" pos:column="9">::</op:operator><name pos:line="88" pos:column="11">UseInputWindow</name></name> <argument_list pos:line="88" pos:column="26">(<argument><expr><name pos:line="88" pos:column="27">NULL</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="33">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">ifdef</cpp:directive> <name pos:line="90" pos:column="8">LOG_TSM</name></cpp:ifdef>
	<if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name pos:line="91" pos:column="13">NULL</name> <op:operator pos:line="91" pos:column="18">==</op:operator> <name pos:line="91" pos:column="21">logFile</name></expr>)</condition><then pos:line="91" pos:column="29">
		<expr_stmt><expr><name pos:line="92" pos:column="17">logFile</name> <op:operator pos:line="92" pos:column="25">=</op:operator> <call><name pos:line="92" pos:column="27">fopen</name> <argument_list pos:line="92" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="34">"/dev/console"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="50">"a"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif</cpp:directive></cpp:endif>

	<comment type="line" pos:line="95" pos:column="9">// create and attach the TSM data</comment>
	<decl_stmt><decl><type><name pos:line="96" pos:column="9">TSMData</name><type:modifier pos:line="96" pos:column="16">*</type:modifier></type> <name pos:line="96" pos:column="18">data</name> <init pos:line="96" pos:column="23">= <expr><op:operator pos:line="96" pos:column="25">new</op:operator> <name pos:line="96" pos:column="29">TSMData</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name pos:line="98" pos:column="9">data</name><op:operator pos:line="98" pos:column="13">-&gt;</op:operator><name pos:line="98" pos:column="15">view</name></name>				<op:operator pos:line="98" pos:column="49">=</op:operator> <name pos:line="98" pos:column="51">viewRef</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="99" pos:column="9">data</name><op:operator pos:line="99" pos:column="13">-&gt;</op:operator><name pos:line="99" pos:column="15">active</name></name>			<op:operator pos:line="99" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="99" pos:column="43">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="100" pos:column="9">data</name><op:operator pos:line="100" pos:column="13">-&gt;</op:operator><name pos:line="100" pos:column="15">inhibitRecursion</name></name>	<op:operator pos:line="100" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="100" pos:column="35">0</lit:literal></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name><op:operator pos:line="102" pos:column="9">::</op:operator><name pos:line="102" pos:column="11">GetControlProperty</name></name> <argument_list pos:line="102" pos:column="30">(<argument><expr><name pos:line="102" pos:column="31">viewRef</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="40">scintillaMacOSType</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="102" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="102" pos:column="63">sizeof<argument_list pos:line="102" pos:column="69">( <argument><expr><name><name pos:line="102" pos:column="71">data</name><op:operator pos:line="102" pos:column="75">-&gt;</op:operator><name pos:line="102" pos:column="77">scintilla</name></name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="102" pos:column="90">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="102" pos:column="96">&amp;</op:operator><name><name pos:line="102" pos:column="97">data</name><op:operator pos:line="102" pos:column="101">-&gt;</op:operator><name pos:line="102" pos:column="103">scintilla</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">NULL</name> <op:operator pos:line="104" pos:column="18">!=</op:operator> <name><name pos:line="104" pos:column="21">data</name><op:operator pos:line="104" pos:column="25">-&gt;</op:operator><name pos:line="104" pos:column="27">scintilla</name></name></expr>)</condition><then pos:line="104" pos:column="37">
	<block pos:line="105" pos:column="9">{
		<comment type="line" pos:line="106" pos:column="17">// create the TSM document ref</comment>
		<decl_stmt><decl><type><name pos:line="107" pos:column="17">InterfaceTypeList</name></type> <name pos:line="107" pos:column="35">interfaceTypes</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="108" pos:column="17">interfaceTypes</name><index pos:line="108" pos:column="31">[<expr><lit:literal type="number" pos:line="108" pos:column="32">0</lit:literal></expr>]</index></name> <op:operator pos:line="108" pos:column="35">=</op:operator> <name pos:line="108" pos:column="37">kUnicodeDocumentInterfaceType</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="109" pos:column="17">::</op:operator><name pos:line="109" pos:column="19">NewTSMDocument</name></name> <argument_list pos:line="109" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="109" pos:column="35">1</lit:literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="38">interfaceTypes</name></expr></argument>, <argument><expr><op:operator pos:line="109" pos:column="54">&amp;</op:operator><name><name pos:line="109" pos:column="55">data</name><op:operator pos:line="109" pos:column="59">-&gt;</op:operator><name pos:line="109" pos:column="61">docid</name></name></expr></argument>, <argument><expr><op:operator pos:line="109" pos:column="68">(</op:operator><name pos:line="109" pos:column="69">long</name><op:operator pos:line="109" pos:column="73">)</op:operator> <name pos:line="109" pos:column="75">viewRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="110" pos:column="17">// install my event handler</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="111" pos:column="17">::</op:operator><name pos:line="111" pos:column="19">InstallControlEventHandler</name></name> <argument_list pos:line="111" pos:column="46">(<argument><expr><name pos:line="111" pos:column="47">viewRef</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="56">tsmHandler</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="68">numSpecs</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="78">tsmSpecs</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="88">data</name></expr></argument>, <argument><expr><op:operator pos:line="111" pos:column="94">&amp;</op:operator><name><name pos:line="111" pos:column="95">data</name><op:operator pos:line="111" pos:column="99">-&gt;</op:operator><name pos:line="111" pos:column="101">handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><op:operator pos:line="113" pos:column="17">::</op:operator><name pos:line="113" pos:column="19">SetControlProperty</name></name> <argument_list pos:line="113" pos:column="38">(<argument><expr><name pos:line="113" pos:column="39">viewRef</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="48">kScintillaTSM</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="113" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="113" pos:column="66">sizeof <argument_list pos:line="113" pos:column="73">(<argument><expr><name pos:line="113" pos:column="74">data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="113" pos:column="81">&amp;</op:operator><name pos:line="113" pos:column="82">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="115" pos:column="9">else
		<expr_stmt><expr><op:operator pos:line="116" pos:column="17">delete</op:operator> <name pos:line="116" pos:column="24">data</name></expr>;</expr_stmt></else></if>
}</block></function>

<function><type><specifier pos:line="119" pos:column="1">static</specifier> <name pos:line="119" pos:column="8">TSMData</name><type:modifier pos:line="119" pos:column="15">*</type:modifier></type> <name pos:line="119" pos:column="17">getTSMData</name> <parameter_list pos:line="119" pos:column="28">(<param><decl><type><name pos:line="119" pos:column="29">HIViewRef</name></type> <name pos:line="119" pos:column="39">viewRef</name></decl></param>)</parameter_list>
<block pos:line="120" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="121" pos:column="9">TSMData</name><type:modifier pos:line="121" pos:column="16">*</type:modifier></type> <name pos:line="121" pos:column="18">data</name> <init pos:line="121" pos:column="23">= <expr><name pos:line="121" pos:column="25">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="122" pos:column="9">UInt32</name></type> <name pos:line="122" pos:column="16">n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="123" pos:column="9">::</op:operator><name pos:line="123" pos:column="11">GetControlProperty</name></name> <argument_list pos:line="123" pos:column="30">(<argument><expr><name pos:line="123" pos:column="31">viewRef</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="40">kScintillaTSM</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="123" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="123" pos:column="58">sizeof <argument_list pos:line="123" pos:column="65">(<argument><expr><name pos:line="123" pos:column="66">data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="123" pos:column="73">&amp;</op:operator><name pos:line="123" pos:column="74">n</name></expr></argument>, <argument><expr><op:operator pos:line="123" pos:column="77">(</op:operator><name pos:line="123" pos:column="78">UInt32</name><op:operator pos:line="123" pos:column="84">*</op:operator><op:operator pos:line="123" pos:column="85">)</op:operator> <op:operator pos:line="123" pos:column="87">&amp;</op:operator><name pos:line="123" pos:column="88">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="124" pos:column="9">return <expr><name pos:line="124" pos:column="16">data</name></expr>;</return>
}</block></function>

<function><type><name pos:line="127" pos:column="1">void</name></type> <name><name pos:line="127" pos:column="6">ExtInput</name><op:operator pos:line="127" pos:column="14">::</op:operator><name pos:line="127" pos:column="16">detach</name></name> <parameter_list pos:line="127" pos:column="23">(<param><decl><type><name pos:line="127" pos:column="24">HIViewRef</name></type> <name pos:line="127" pos:column="34">viewRef</name></decl></param>)</parameter_list>
<block pos:line="128" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="129" pos:column="9">TSMData</name><type:modifier pos:line="129" pos:column="16">*</type:modifier></type> <name pos:line="129" pos:column="18">data</name> <init pos:line="129" pos:column="23">= <expr><call><name pos:line="129" pos:column="25">getTSMData</name> <argument_list pos:line="129" pos:column="36">(<argument><expr><name pos:line="129" pos:column="37">viewRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name pos:line="130" pos:column="13">NULL</name> <op:operator pos:line="130" pos:column="18">!=</op:operator> <name pos:line="130" pos:column="21">data</name></expr>)</condition><then pos:line="130" pos:column="26">
	<block pos:line="131" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="132" pos:column="17">::</op:operator><name pos:line="132" pos:column="19">DeleteTSMDocument</name></name> <argument_list pos:line="132" pos:column="37">(<argument><expr><name><name pos:line="132" pos:column="38">data</name><op:operator pos:line="132" pos:column="42">-&gt;</op:operator><name pos:line="132" pos:column="44">docid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="133" pos:column="17">::</op:operator><name pos:line="133" pos:column="19">RemoveEventHandler</name></name> <argument_list pos:line="133" pos:column="38">(<argument><expr><name><name pos:line="133" pos:column="39">data</name><op:operator pos:line="133" pos:column="43">-&gt;</op:operator><name pos:line="133" pos:column="45">handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="134" pos:column="17">delete</op:operator> <name pos:line="134" pos:column="24">data</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="138" pos:column="1">void</name></type> <name><name pos:line="138" pos:column="6">ExtInput</name><op:operator pos:line="138" pos:column="14">::</op:operator><name pos:line="138" pos:column="16">activate</name></name> <parameter_list pos:line="138" pos:column="25">(<param><decl><type><name pos:line="138" pos:column="26">HIViewRef</name></type> <name pos:line="138" pos:column="36">viewRef</name></decl></param>, <param><decl><type><name pos:line="138" pos:column="45">bool</name></type> <name pos:line="138" pos:column="50">on</name></decl></param>)</parameter_list>
<block pos:line="139" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="140" pos:column="9">TSMData</name><type:modifier pos:line="140" pos:column="16">*</type:modifier></type> <name pos:line="140" pos:column="18">data</name> <init pos:line="140" pos:column="23">= <expr><call><name pos:line="140" pos:column="25">getTSMData</name> <argument_list pos:line="140" pos:column="36">(<argument><expr><name pos:line="140" pos:column="37">viewRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><name pos:line="141" pos:column="13">NULL</name> <op:operator pos:line="141" pos:column="18">==</op:operator> <name pos:line="141" pos:column="21">data</name></expr>)</condition><then pos:line="141" pos:column="26">
		<return pos:line="142" pos:column="17">return;</return></then></if>

	<if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><name pos:line="144" pos:column="13">on</name></expr>)</condition><then pos:line="144" pos:column="16">
	<block pos:line="145" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="146" pos:column="17">::</op:operator><name pos:line="146" pos:column="19">ActivateTSMDocument</name></name> <argument_list pos:line="146" pos:column="39">(<argument><expr><name><name pos:line="146" pos:column="40">data</name><op:operator pos:line="146" pos:column="44">-&gt;</op:operator><name pos:line="146" pos:column="46">docid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="147" pos:column="17">HIRect</name></type> <name pos:line="147" pos:column="24">bounds</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="148" pos:column="17">::</op:operator><name pos:line="148" pos:column="19">HIViewGetBounds</name></name> <argument_list pos:line="148" pos:column="35">(<argument><expr><name pos:line="148" pos:column="36">viewRef</name></expr></argument>, <argument><expr><op:operator pos:line="148" pos:column="45">&amp;</op:operator><name pos:line="148" pos:column="46">bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="149" pos:column="17">::</op:operator><name pos:line="149" pos:column="19">HIViewConvertRect</name></name> <argument_list pos:line="149" pos:column="37">(<argument><expr><op:operator pos:line="149" pos:column="38">&amp;</op:operator><name pos:line="149" pos:column="39">bounds</name></expr></argument>, <argument><expr><name pos:line="149" pos:column="47">viewRef</name></expr></argument>, <argument><expr><name pos:line="149" pos:column="56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="150" pos:column="17">RgnHandle</name></type> <name pos:line="150" pos:column="27">hRgn</name> <init pos:line="150" pos:column="32">= <expr><call><name><op:operator pos:line="150" pos:column="34">::</op:operator><name pos:line="150" pos:column="36">NewRgn</name></name><argument_list pos:line="150" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="151" pos:column="17">::</op:operator><name pos:line="151" pos:column="19">SetRectRgn</name></name> <argument_list pos:line="151" pos:column="30">(<argument><expr><name pos:line="151" pos:column="31">hRgn</name></expr></argument>, <argument><expr><op:operator pos:line="151" pos:column="37">(</op:operator><name pos:line="151" pos:column="38">short</name><op:operator pos:line="151" pos:column="43">)</op:operator> <name><name pos:line="151" pos:column="45">bounds</name><op:operator pos:line="151" pos:column="51">.</op:operator><name pos:line="151" pos:column="52">origin</name><op:operator pos:line="151" pos:column="58">.</op:operator><name pos:line="151" pos:column="59">x</name></name></expr></argument>, <argument><expr><op:operator pos:line="151" pos:column="62">(</op:operator><name pos:line="151" pos:column="63">short</name><op:operator pos:line="151" pos:column="68">)</op:operator> <name><name pos:line="151" pos:column="70">bounds</name><op:operator pos:line="151" pos:column="76">.</op:operator><name pos:line="151" pos:column="77">origin</name><op:operator pos:line="151" pos:column="83">.</op:operator><name pos:line="151" pos:column="84">y</name></name></expr></argument>, 
							<argument><expr><call pos:line="152" pos:column="57">(<name pos:line="152" pos:column="58">short</name>) <argument_list pos:line="152" pos:column="65">(<argument><expr><name><name pos:line="152" pos:column="66">bounds</name><op:operator pos:line="152" pos:column="72">.</op:operator><name pos:line="152" pos:column="73">origin</name><op:operator pos:line="152" pos:column="79">.</op:operator><name pos:line="152" pos:column="80">x</name></name> <op:operator pos:line="152" pos:column="82">+</op:operator> <name><name pos:line="152" pos:column="84">bounds</name><op:operator pos:line="152" pos:column="90">.</op:operator><name pos:line="152" pos:column="91">size</name><op:operator pos:line="152" pos:column="95">.</op:operator><name pos:line="152" pos:column="96">width</name></name></expr></argument>)</argument_list></call></expr></argument>, 
							<argument><expr><call pos:line="153" pos:column="57">(<name pos:line="153" pos:column="58">short</name>) <argument_list pos:line="153" pos:column="65">(<argument><expr><name><name pos:line="153" pos:column="66">bounds</name><op:operator pos:line="153" pos:column="72">.</op:operator><name pos:line="153" pos:column="73">origin</name><op:operator pos:line="153" pos:column="79">.</op:operator><name pos:line="153" pos:column="80">y</name></name> <op:operator pos:line="153" pos:column="82">+</op:operator> <name><name pos:line="153" pos:column="84">bounds</name><op:operator pos:line="153" pos:column="90">.</op:operator><name pos:line="153" pos:column="91">size</name><op:operator pos:line="153" pos:column="95">.</op:operator><name pos:line="153" pos:column="96">height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:line="154" pos:column="1">#<cpp:directive pos:line="154" pos:column="2">if</cpp:directive> <expr><name pos:line="154" pos:column="5">LOG_TSM</name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="155" pos:column="17">fprintf</name> <argument_list pos:line="155" pos:column="25">(<argument><expr><name pos:line="155" pos:column="26">logFile</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="155" pos:column="35">"TSMSetInlineInputRegion (%08lX, %ld:%ld-%ld:%ld)\n"</lit:literal></expr></argument>, 
						 <argument><expr><op:operator pos:line="156" pos:column="50">(</op:operator><name pos:line="156" pos:column="51">long</name><op:operator pos:line="156" pos:column="55">)</op:operator> <name><name pos:line="156" pos:column="57">data</name><op:operator pos:line="156" pos:column="61">-&gt;</op:operator><name pos:line="156" pos:column="63">docid</name></name></expr></argument>, <argument><expr><op:operator pos:line="156" pos:column="70">(</op:operator><name pos:line="156" pos:column="71">long</name><op:operator pos:line="156" pos:column="75">)</op:operator> <name><name pos:line="156" pos:column="77">bounds</name><op:operator pos:line="156" pos:column="83">.</op:operator><name pos:line="156" pos:column="84">origin</name><op:operator pos:line="156" pos:column="90">.</op:operator><name pos:line="156" pos:column="91">x</name></name></expr></argument>, <argument><expr><op:operator pos:line="156" pos:column="94">(</op:operator><name pos:line="156" pos:column="95">long</name><op:operator pos:line="156" pos:column="99">)</op:operator> <name><name pos:line="156" pos:column="101">bounds</name><op:operator pos:line="156" pos:column="107">.</op:operator><name pos:line="156" pos:column="108">origin</name><op:operator pos:line="156" pos:column="114">.</op:operator><name pos:line="156" pos:column="115">y</name></name></expr></argument>,
						 <argument><expr><call pos:line="157" pos:column="50">(<name pos:line="157" pos:column="51">long</name>) <argument_list pos:line="157" pos:column="57">(<argument><expr><name><name pos:line="157" pos:column="58">bounds</name><op:operator pos:line="157" pos:column="64">.</op:operator><name pos:line="157" pos:column="65">origin</name><op:operator pos:line="157" pos:column="71">.</op:operator><name pos:line="157" pos:column="72">x</name></name> <op:operator pos:line="157" pos:column="74">+</op:operator> <name><name pos:line="157" pos:column="76">bounds</name><op:operator pos:line="157" pos:column="82">.</op:operator><name pos:line="157" pos:column="83">size</name><op:operator pos:line="157" pos:column="87">.</op:operator><name pos:line="157" pos:column="88">width</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call pos:line="157" pos:column="96">(<name pos:line="157" pos:column="97">long</name>) <argument_list pos:line="157" pos:column="103">(<argument><expr><name><name pos:line="157" pos:column="104">bounds</name><op:operator pos:line="157" pos:column="110">.</op:operator><name pos:line="157" pos:column="111">origin</name><op:operator pos:line="157" pos:column="117">.</op:operator><name pos:line="157" pos:column="118">y</name></name> <op:operator pos:line="157" pos:column="120">+</op:operator> <name><name pos:line="157" pos:column="122">bounds</name><op:operator pos:line="157" pos:column="128">.</op:operator><name pos:line="157" pos:column="129">size</name><op:operator pos:line="157" pos:column="133">.</op:operator><name pos:line="157" pos:column="134">height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="158" pos:column="17">fflush</name> <argument_list pos:line="158" pos:column="24">(<argument><expr><name pos:line="158" pos:column="25">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="159" pos:column="1">#<cpp:directive pos:line="159" pos:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name><op:operator pos:line="160" pos:column="17">::</op:operator><name pos:line="160" pos:column="19">TSMSetInlineInputRegion</name></name> <argument_list pos:line="160" pos:column="43">(<argument><expr><name><name pos:line="160" pos:column="44">data</name><op:operator pos:line="160" pos:column="48">-&gt;</op:operator><name pos:line="160" pos:column="50">docid</name></name></expr></argument>, <argument><expr><call><name pos:line="160" pos:column="57">HIViewGetWindow</name> <argument_list pos:line="160" pos:column="73">(<argument><expr><name><name pos:line="160" pos:column="74">data</name><op:operator pos:line="160" pos:column="78">-&gt;</op:operator><name pos:line="160" pos:column="80">view</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="160" pos:column="87">hRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="161" pos:column="17">::</op:operator><name pos:line="161" pos:column="19">DisposeRgn</name></name> <argument_list pos:line="161" pos:column="30">(<argument><expr><name pos:line="161" pos:column="31">hRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="162" pos:column="17">::</op:operator><name pos:line="162" pos:column="19">UseInputWindow</name></name> <argument_list pos:line="162" pos:column="34">(<argument><expr><name pos:line="162" pos:column="35">NULL</name></expr></argument>, <argument><expr><name pos:line="162" pos:column="41">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="164" pos:column="9">else
	<block pos:line="165" pos:column="9">{
<cpp:if pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">if</cpp:directive> <expr><name pos:line="166" pos:column="5">LOG_TSM</name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="167" pos:column="17">fprintf</name> <argument_list pos:line="167" pos:column="25">(<argument><expr><name pos:line="167" pos:column="26">logFile</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="167" pos:column="35">"DeactivateTSMDocument (%08lX)\n"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="167" pos:column="70">(</op:operator><name pos:line="167" pos:column="71">long</name><op:operator pos:line="167" pos:column="75">)</op:operator> <name><name pos:line="167" pos:column="77">data</name><op:operator pos:line="167" pos:column="81">-&gt;</op:operator><name pos:line="167" pos:column="83">docid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="168" pos:column="17">fflush</name> <argument_list pos:line="168" pos:column="24">(<argument><expr><name pos:line="168" pos:column="25">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="169" pos:column="1">#<cpp:directive pos:line="169" pos:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name><op:operator pos:line="170" pos:column="17">::</op:operator><name pos:line="170" pos:column="19">DeactivateTSMDocument</name></name> <argument_list pos:line="170" pos:column="41">(<argument><expr><name><name pos:line="170" pos:column="42">data</name><op:operator pos:line="170" pos:column="46">-&gt;</op:operator><name pos:line="170" pos:column="48">docid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="174" pos:column="1">static</specifier> <name pos:line="174" pos:column="8">void</name></type> <name pos:line="174" pos:column="13">startInput</name> <parameter_list pos:line="174" pos:column="24">(<param><decl><type><name pos:line="174" pos:column="25">TSMData</name><type:modifier pos:line="174" pos:column="32">*</type:modifier></type> <name pos:line="174" pos:column="34">data</name></decl></param>, <param><decl><type><name pos:line="174" pos:column="40">bool</name></type> <name pos:line="174" pos:column="45">delSelection</name> <init pos:line="174" pos:column="58">= <expr><lit:literal type="boolean" pos:line="174" pos:column="60">true</lit:literal></expr></init></decl></param>)</parameter_list>
<block pos:line="175" pos:column="1">{
	<if pos:line="176" pos:column="9">if <condition pos:line="176" pos:column="12">(<expr><op:operator pos:line="176" pos:column="13">!</op:operator><name><name pos:line="176" pos:column="14">data</name><op:operator pos:line="176" pos:column="18">-&gt;</op:operator><name pos:line="176" pos:column="20">active</name></name> <op:operator pos:line="176" pos:column="27">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="176" pos:column="30">0</lit:literal> <op:operator pos:line="176" pos:column="32">==</op:operator> <name><name pos:line="176" pos:column="35">data</name><op:operator pos:line="176" pos:column="39">-&gt;</op:operator><name pos:line="176" pos:column="41">inhibitRecursion</name></name></expr>)</condition><then pos:line="176" pos:column="58">
	<block pos:line="177" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="178" pos:column="17">data</name><op:operator pos:line="178" pos:column="21">-&gt;</op:operator><name pos:line="178" pos:column="23">active</name></name> <op:operator pos:line="178" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="178" pos:column="32">true</lit:literal></expr>;</expr_stmt>
		
		<comment type="line" pos:line="180" pos:column="17">// Delete any selection</comment>
		<if pos:line="181" pos:column="17">if<condition pos:line="181" pos:column="19">( <expr><name pos:line="181" pos:column="21">delSelection</name></expr> )</condition><then pos:line="181" pos:column="35">
			<expr_stmt><expr><call><name><name pos:line="182" pos:column="25">data</name><op:operator pos:line="182" pos:column="29">-&gt;</op:operator><name pos:line="182" pos:column="31">scintilla</name><op:operator pos:line="182" pos:column="40">-&gt;</op:operator><name pos:line="182" pos:column="42">WndProc</name></name> <argument_list pos:line="182" pos:column="50">(<argument><expr><name pos:line="182" pos:column="51">SCI_REPLACESEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="182" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="182" pos:column="70">reinterpret_cast</name><argument_list pos:line="182" pos:column="86">&lt;<argument><expr><name pos:line="182" pos:column="87">sptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="182" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="95">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		 
		<comment type="line" pos:line="184" pos:column="17">// need all style bits because we do indicators</comment>
		<expr_stmt><expr><name><name pos:line="185" pos:column="17">data</name><op:operator pos:line="185" pos:column="21">-&gt;</op:operator><name pos:line="185" pos:column="23">styleMask</name></name> <op:operator pos:line="185" pos:column="33">=</op:operator> <call><name><name pos:line="185" pos:column="35">data</name><op:operator pos:line="185" pos:column="39">-&gt;</op:operator><name pos:line="185" pos:column="41">scintilla</name><op:operator pos:line="185" pos:column="50">-&gt;</op:operator><name pos:line="185" pos:column="52">WndProc</name></name> <argument_list pos:line="185" pos:column="60">(<argument><expr><name pos:line="185" pos:column="61">SCI_GETSTYLEBITS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="185" pos:column="79">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="185" pos:column="82">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="186" pos:column="17">data</name><op:operator pos:line="186" pos:column="21">-&gt;</op:operator><name pos:line="186" pos:column="23">scintilla</name><op:operator pos:line="186" pos:column="32">-&gt;</op:operator><name pos:line="186" pos:column="34">WndProc</name></name> <argument_list pos:line="186" pos:column="42">(<argument><expr><name pos:line="186" pos:column="43">SCI_SETSTYLEBITS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="186" pos:column="61">5</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="186" pos:column="64">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line" pos:line="188" pos:column="17">// Set the target range for successive replacements</comment>
		<expr_stmt><expr><name><name pos:line="189" pos:column="17">data</name><op:operator pos:line="189" pos:column="21">-&gt;</op:operator><name pos:line="189" pos:column="23">selStart</name></name>	<op:operator pos:line="189" pos:column="33">=</op:operator>
		<name><name pos:line="190" pos:column="17">data</name><op:operator pos:line="190" pos:column="21">-&gt;</op:operator><name pos:line="190" pos:column="23">selCur</name></name>	<op:operator pos:line="190" pos:column="33">=</op:operator> <call><name><name pos:line="190" pos:column="35">data</name><op:operator pos:line="190" pos:column="39">-&gt;</op:operator><name pos:line="190" pos:column="41">scintilla</name><op:operator pos:line="190" pos:column="50">-&gt;</op:operator><name pos:line="190" pos:column="52">WndProc</name></name> <argument_list pos:line="190" pos:column="60">(<argument><expr><name pos:line="190" pos:column="61">SCI_GETCURRENTPOS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="190" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="190" pos:column="83">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="191" pos:column="17">data</name><op:operator pos:line="191" pos:column="21">-&gt;</op:operator><name pos:line="191" pos:column="23">selLength</name></name>	<op:operator pos:line="191" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="191" pos:column="35">0</lit:literal></expr>;</expr_stmt>
		
		<comment type="line" pos:line="193" pos:column="17">// save needed styles</comment>
		<for pos:line="194" pos:column="17">for (<init><decl><type><name pos:line="194" pos:column="22">int</name></type> <name pos:line="194" pos:column="26">i</name> <init pos:line="194" pos:column="28">= <expr><lit:literal type="number" pos:line="194" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="194" pos:column="33">i</name> <op:operator pos:line="194" pos:column="35">&lt;</op:operator> <lit:literal type="number" pos:line="194" pos:column="37">2</lit:literal></expr>;</condition> <incr><expr><name pos:line="194" pos:column="40">i</name><op:operator pos:line="194" pos:column="41">++</op:operator></expr></incr>)
		<block pos:line="195" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="196" pos:column="25">data</name><op:operator pos:line="196" pos:column="29">-&gt;</op:operator><name pos:line="196" pos:column="31">indicStyle</name> <index pos:line="196" pos:column="42">[<expr><name pos:line="196" pos:column="43">i</name></expr>]</index></name> <op:operator pos:line="196" pos:column="46">=</op:operator> <call><name><name pos:line="196" pos:column="48">data</name><op:operator pos:line="196" pos:column="52">-&gt;</op:operator><name pos:line="196" pos:column="54">scintilla</name><op:operator pos:line="196" pos:column="63">-&gt;</op:operator><name pos:line="196" pos:column="65">WndProc</name></name> <argument_list pos:line="196" pos:column="73">(<argument><expr><name pos:line="196" pos:column="74">SCI_INDICGETSTYLE</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="93">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="196" pos:column="96">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="197" pos:column="25">data</name><op:operator pos:line="197" pos:column="29">-&gt;</op:operator><name pos:line="197" pos:column="31">indicColor</name> <index pos:line="197" pos:column="42">[<expr><name pos:line="197" pos:column="43">i</name></expr>]</index></name> <op:operator pos:line="197" pos:column="46">=</op:operator> <call><name><name pos:line="197" pos:column="48">data</name><op:operator pos:line="197" pos:column="52">-&gt;</op:operator><name pos:line="197" pos:column="54">scintilla</name><op:operator pos:line="197" pos:column="63">-&gt;</op:operator><name pos:line="197" pos:column="65">WndProc</name></name> <argument_list pos:line="197" pos:column="73">(<argument><expr><name pos:line="197" pos:column="74">SCI_INDICGETFORE</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="92">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="197" pos:column="95">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<comment type="line" pos:line="199" pos:column="17">// set styles and colors</comment>
		<expr_stmt><expr><call><name><name pos:line="200" pos:column="17">data</name><op:operator pos:line="200" pos:column="21">-&gt;</op:operator><name pos:line="200" pos:column="23">scintilla</name><op:operator pos:line="200" pos:column="32">-&gt;</op:operator><name pos:line="200" pos:column="34">WndProc</name></name> <argument_list pos:line="200" pos:column="42">(<argument><expr><name pos:line="200" pos:column="43">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="200" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="200" pos:column="65">INDIC_SQUIGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="201" pos:column="17">data</name><op:operator pos:line="201" pos:column="21">-&gt;</op:operator><name pos:line="201" pos:column="23">scintilla</name><op:operator pos:line="201" pos:column="32">-&gt;</op:operator><name pos:line="201" pos:column="34">WndProc</name></name> <argument_list pos:line="201" pos:column="42">(<argument><expr><name pos:line="201" pos:column="43">SCI_INDICSETFORE</name></expr></argument>,  <argument><expr><lit:literal type="number" pos:line="201" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="201" pos:column="65">0x808080</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="202" pos:column="17">data</name><op:operator pos:line="202" pos:column="21">-&gt;</op:operator><name pos:line="202" pos:column="23">scintilla</name><op:operator pos:line="202" pos:column="32">-&gt;</op:operator><name pos:line="202" pos:column="34">WndProc</name></name> <argument_list pos:line="202" pos:column="42">(<argument><expr><name pos:line="202" pos:column="43">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="202" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="202" pos:column="65">INDIC_PLAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="202" pos:column="81">// selected converted</comment>
		<expr_stmt><expr><call><name><name pos:line="203" pos:column="17">data</name><op:operator pos:line="203" pos:column="21">-&gt;</op:operator><name pos:line="203" pos:column="23">scintilla</name><op:operator pos:line="203" pos:column="32">-&gt;</op:operator><name pos:line="203" pos:column="34">WndProc</name></name> <argument_list pos:line="203" pos:column="42">(<argument><expr><name pos:line="203" pos:column="43">SCI_INDICSETFORE</name></expr></argument>,  <argument><expr><lit:literal type="number" pos:line="203" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="203" pos:column="65">0x808080</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="204" pos:column="17">data</name><op:operator pos:line="204" pos:column="21">-&gt;</op:operator><name pos:line="204" pos:column="23">scintilla</name><op:operator pos:line="204" pos:column="32">-&gt;</op:operator><name pos:line="204" pos:column="34">WndProc</name></name> <argument_list pos:line="204" pos:column="42">(<argument><expr><name pos:line="204" pos:column="43">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="204" pos:column="62">2</lit:literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="65">INDIC_PLAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="204" pos:column="81">// selected raw</comment>
		<expr_stmt><expr><call><name><name pos:line="205" pos:column="17">data</name><op:operator pos:line="205" pos:column="21">-&gt;</op:operator><name pos:line="205" pos:column="23">scintilla</name><op:operator pos:line="205" pos:column="32">-&gt;</op:operator><name pos:line="205" pos:column="34">WndProc</name></name> <argument_list pos:line="205" pos:column="42">(<argument><expr><name pos:line="205" pos:column="43">SCI_INDICSETFORE</name></expr></argument>,  <argument><expr><lit:literal type="number" pos:line="205" pos:column="62">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="205" pos:column="65">0x0000FF</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="206" pos:column="17">// stop Undo</comment>
		<expr_stmt><expr><call><name><name pos:line="207" pos:column="17">data</name><op:operator pos:line="207" pos:column="21">-&gt;</op:operator><name pos:line="207" pos:column="23">scintilla</name><op:operator pos:line="207" pos:column="32">-&gt;</op:operator><name pos:line="207" pos:column="34">WndProc</name></name> <argument_list pos:line="207" pos:column="42">(<argument><expr><name pos:line="207" pos:column="43">SCI_BEGINUNDOACTION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="207" pos:column="64">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="207" pos:column="67">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="211" pos:column="1">static</specifier> <name pos:line="211" pos:column="8">void</name></type> <name pos:line="211" pos:column="13">stopInput</name> <parameter_list pos:line="211" pos:column="23">(<param><decl><type><name pos:line="211" pos:column="24">TSMData</name><type:modifier pos:line="211" pos:column="31">*</type:modifier></type> <name pos:line="211" pos:column="33">data</name></decl></param>, <param><decl><type><name pos:line="211" pos:column="39">int</name></type> <name pos:line="211" pos:column="43">pos</name></decl></param>)</parameter_list>
<block pos:line="212" pos:column="1">{
	<if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><name><name pos:line="213" pos:column="13">data</name><op:operator pos:line="213" pos:column="17">-&gt;</op:operator><name pos:line="213" pos:column="19">active</name></name> <op:operator pos:line="213" pos:column="26">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="213" pos:column="29">0</lit:literal> <op:operator pos:line="213" pos:column="31">==</op:operator> <name><name pos:line="213" pos:column="34">data</name><op:operator pos:line="213" pos:column="38">-&gt;</op:operator><name pos:line="213" pos:column="40">inhibitRecursion</name></name></expr>)</condition><then pos:line="213" pos:column="57">
	<block pos:line="214" pos:column="9">{
		<comment type="line" pos:line="215" pos:column="17">// First fix the doc - this may cause more messages</comment>
		<comment type="line" pos:line="216" pos:column="17">// but do not fall into recursion</comment>
		<expr_stmt><expr><name><name pos:line="217" pos:column="17">data</name><op:operator pos:line="217" pos:column="21">-&gt;</op:operator><name pos:line="217" pos:column="23">inhibitRecursion</name></name><op:operator pos:line="217" pos:column="39">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="218" pos:column="17">::</op:operator><name pos:line="218" pos:column="19">FixTSMDocument</name></name> <argument_list pos:line="218" pos:column="34">(<argument><expr><name><name pos:line="218" pos:column="35">data</name><op:operator pos:line="218" pos:column="39">-&gt;</op:operator><name pos:line="218" pos:column="41">docid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="219" pos:column="17">data</name><op:operator pos:line="219" pos:column="21">-&gt;</op:operator><name pos:line="219" pos:column="23">inhibitRecursion</name></name><op:operator pos:line="219" pos:column="39">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="220" pos:column="17">data</name><op:operator pos:line="220" pos:column="21">-&gt;</op:operator><name pos:line="220" pos:column="23">active</name></name> <op:operator pos:line="220" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="220" pos:column="32">false</lit:literal></expr>;</expr_stmt>
		
		<comment type="line" pos:line="222" pos:column="17">// Remove indicator styles</comment>
		<expr_stmt><expr><call><name><name pos:line="223" pos:column="17">data</name><op:operator pos:line="223" pos:column="21">-&gt;</op:operator><name pos:line="223" pos:column="23">scintilla</name><op:operator pos:line="223" pos:column="32">-&gt;</op:operator><name pos:line="223" pos:column="34">WndProc</name></name> <argument_list pos:line="223" pos:column="42">(<argument><expr><name pos:line="223" pos:column="43">SCI_STARTSTYLING</name></expr></argument>, <argument><expr><name><name pos:line="223" pos:column="61">data</name><op:operator pos:line="223" pos:column="65">-&gt;</op:operator><name pos:line="223" pos:column="67">selStart</name></name></expr></argument>, <argument><expr><name pos:line="223" pos:column="77">INDICS_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="224" pos:column="17">data</name><op:operator pos:line="224" pos:column="21">-&gt;</op:operator><name pos:line="224" pos:column="23">scintilla</name><op:operator pos:line="224" pos:column="32">-&gt;</op:operator><name pos:line="224" pos:column="34">WndProc</name></name> <argument_list pos:line="224" pos:column="42">(<argument><expr><name pos:line="224" pos:column="43">SCI_SETSTYLING</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="59">pos</name> <op:operator pos:line="224" pos:column="63">-</op:operator> <name><name pos:line="224" pos:column="65">data</name><op:operator pos:line="224" pos:column="69">-&gt;</op:operator><name pos:line="224" pos:column="71">selStart</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="224" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="225" pos:column="17">// Restore old indicator styles and colors</comment>
		<expr_stmt><expr><call><name><name pos:line="226" pos:column="17">data</name><op:operator pos:line="226" pos:column="21">-&gt;</op:operator><name pos:line="226" pos:column="23">scintilla</name><op:operator pos:line="226" pos:column="32">-&gt;</op:operator><name pos:line="226" pos:column="34">WndProc</name></name> <argument_list pos:line="226" pos:column="42">(<argument><expr><name pos:line="226" pos:column="43">SCI_SETSTYLEBITS</name></expr></argument>, <argument><expr><name><name pos:line="226" pos:column="61">data</name><op:operator pos:line="226" pos:column="65">-&gt;</op:operator><name pos:line="226" pos:column="67">styleMask</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="226" pos:column="78">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:line="227" pos:column="17">for (<init><decl><type><name pos:line="227" pos:column="22">int</name></type> <name pos:line="227" pos:column="26">i</name> <init pos:line="227" pos:column="28">= <expr><lit:literal type="number" pos:line="227" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="227" pos:column="33">i</name> <op:operator pos:line="227" pos:column="35">&lt;</op:operator> <lit:literal type="number" pos:line="227" pos:column="37">2</lit:literal></expr>;</condition> <incr><expr><name pos:line="227" pos:column="40">i</name><op:operator pos:line="227" pos:column="41">++</op:operator></expr></incr>)
		<block pos:line="228" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="229" pos:column="25">data</name><op:operator pos:line="229" pos:column="29">-&gt;</op:operator><name pos:line="229" pos:column="31">scintilla</name><op:operator pos:line="229" pos:column="40">-&gt;</op:operator><name pos:line="229" pos:column="42">WndProc</name></name> <argument_list pos:line="229" pos:column="50">(<argument><expr><name pos:line="229" pos:column="51">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="70">i</name></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="73">data</name><op:operator pos:line="229" pos:column="77">-&gt;</op:operator><name pos:line="229" pos:column="79">indicStyle</name> <index pos:line="229" pos:column="90">[<expr><name pos:line="229" pos:column="91">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="230" pos:column="25">data</name><op:operator pos:line="230" pos:column="29">-&gt;</op:operator><name pos:line="230" pos:column="31">scintilla</name><op:operator pos:line="230" pos:column="40">-&gt;</op:operator><name pos:line="230" pos:column="42">WndProc</name></name> <argument_list pos:line="230" pos:column="50">(<argument><expr><name pos:line="230" pos:column="51">SCI_INDICSETFORE</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="69">i</name></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="72">data</name><op:operator pos:line="230" pos:column="76">-&gt;</op:operator><name pos:line="230" pos:column="78">indicColor</name> <index pos:line="230" pos:column="89">[<expr><name pos:line="230" pos:column="90">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<comment type="line" pos:line="233" pos:column="17">// remove selection and re-allow selections to display</comment>
		<expr_stmt><expr><call><name><name pos:line="234" pos:column="17">data</name><op:operator pos:line="234" pos:column="21">-&gt;</op:operator><name pos:line="234" pos:column="23">scintilla</name><op:operator pos:line="234" pos:column="32">-&gt;</op:operator><name pos:line="234" pos:column="34">WndProc</name></name> <argument_list pos:line="234" pos:column="42">(<argument><expr><name pos:line="234" pos:column="43">SCI_SETSEL</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="55">pos</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="60">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="235" pos:column="17">data</name><op:operator pos:line="235" pos:column="21">-&gt;</op:operator><name pos:line="235" pos:column="23">scintilla</name><op:operator pos:line="235" pos:column="32">-&gt;</op:operator><name pos:line="235" pos:column="34">WndProc</name></name> <argument_list pos:line="235" pos:column="42">(<argument><expr><name pos:line="235" pos:column="43">SCI_TARGETFROMSELECTION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="235" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="235" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="236" pos:column="17">data</name><op:operator pos:line="236" pos:column="21">-&gt;</op:operator><name pos:line="236" pos:column="23">scintilla</name><op:operator pos:line="236" pos:column="32">-&gt;</op:operator><name pos:line="236" pos:column="34">WndProc</name></name> <argument_list pos:line="236" pos:column="42">(<argument><expr><name pos:line="236" pos:column="43">SCI_HIDESELECTION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="236" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="236" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="238" pos:column="17">// move the caret behind the current area</comment>
		<expr_stmt><expr><call><name><name pos:line="239" pos:column="17">data</name><op:operator pos:line="239" pos:column="21">-&gt;</op:operator><name pos:line="239" pos:column="23">scintilla</name><op:operator pos:line="239" pos:column="32">-&gt;</op:operator><name pos:line="239" pos:column="34">WndProc</name></name> <argument_list pos:line="239" pos:column="42">(<argument><expr><name pos:line="239" pos:column="43">SCI_SETCURRENTPOS</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="62">pos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="239" pos:column="67">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="240" pos:column="17">// re-enable Undo</comment>
		<expr_stmt><expr><call><name><name pos:line="241" pos:column="17">data</name><op:operator pos:line="241" pos:column="21">-&gt;</op:operator><name pos:line="241" pos:column="23">scintilla</name><op:operator pos:line="241" pos:column="32">-&gt;</op:operator><name pos:line="241" pos:column="34">WndProc</name></name> <argument_list pos:line="241" pos:column="42">(<argument><expr><name pos:line="241" pos:column="43">SCI_ENDUNDOACTION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="241" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="241" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="242" pos:column="17">// re-colorize</comment>
		<decl_stmt><decl><type><name pos:line="243" pos:column="17">int32_t</name></type> <name pos:line="243" pos:column="25">startLine</name> <init pos:line="243" pos:column="35">= <expr><call><name><name pos:line="243" pos:column="37">data</name><op:operator pos:line="243" pos:column="41">-&gt;</op:operator><name pos:line="243" pos:column="43">scintilla</name><op:operator pos:line="243" pos:column="52">-&gt;</op:operator><name pos:line="243" pos:column="54">WndProc</name></name> <argument_list pos:line="243" pos:column="62">(<argument><expr><name pos:line="243" pos:column="63">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="243" pos:column="85">data</name><op:operator pos:line="243" pos:column="89">-&gt;</op:operator><name pos:line="243" pos:column="91">selStart</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="243" pos:column="101">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="244" pos:column="17">int32_t</name></type> <name pos:line="244" pos:column="25">startPos</name>  <init pos:line="244" pos:column="35">= <expr><call><name><name pos:line="244" pos:column="37">data</name><op:operator pos:line="244" pos:column="41">-&gt;</op:operator><name pos:line="244" pos:column="43">scintilla</name><op:operator pos:line="244" pos:column="52">-&gt;</op:operator><name pos:line="244" pos:column="54">WndProc</name></name> <argument_list pos:line="244" pos:column="62">(<argument><expr><name pos:line="244" pos:column="63">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name pos:line="244" pos:column="85">startLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="244" pos:column="96">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="245" pos:column="17">int32_t</name></type> <name pos:line="245" pos:column="25">endLine</name>   <init pos:line="245" pos:column="35">= <expr><call><name><name pos:line="245" pos:column="37">data</name><op:operator pos:line="245" pos:column="41">-&gt;</op:operator><name pos:line="245" pos:column="43">scintilla</name><op:operator pos:line="245" pos:column="52">-&gt;</op:operator><name pos:line="245" pos:column="54">WndProc</name></name> <argument_list pos:line="245" pos:column="62">(<argument><expr><name pos:line="245" pos:column="63">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="245" pos:column="85">pos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="245" pos:column="90">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="246" pos:column="17">if <condition pos:line="246" pos:column="20">(<expr><name pos:line="246" pos:column="21">endLine</name> <op:operator pos:line="246" pos:column="29">==</op:operator> <name pos:line="246" pos:column="32">startLine</name></expr>)</condition><then pos:line="246" pos:column="42">
			<expr_stmt><expr><name pos:line="247" pos:column="25">endLine</name><op:operator pos:line="247" pos:column="32">++</op:operator></expr>;</expr_stmt></then></if>
		<decl_stmt><decl><type><name pos:line="248" pos:column="17">int32_t</name></type> <name pos:line="248" pos:column="25">endPos</name>    <init pos:line="248" pos:column="35">= <expr><call><name><name pos:line="248" pos:column="37">data</name><op:operator pos:line="248" pos:column="41">-&gt;</op:operator><name pos:line="248" pos:column="43">scintilla</name><op:operator pos:line="248" pos:column="52">-&gt;</op:operator><name pos:line="248" pos:column="54">WndProc</name></name> <argument_list pos:line="248" pos:column="62">(<argument><expr><name pos:line="248" pos:column="63">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="85">endLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="248" pos:column="94">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name pos:line="250" pos:column="17">data</name><op:operator pos:line="250" pos:column="21">-&gt;</op:operator><name pos:line="250" pos:column="23">scintilla</name><op:operator pos:line="250" pos:column="32">-&gt;</op:operator><name pos:line="250" pos:column="34">WndProc</name></name> <argument_list pos:line="250" pos:column="42">(<argument><expr><name pos:line="250" pos:column="43">SCI_COLOURISE</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="58">startPos</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="68">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="254" pos:column="1">void</name></type> <name><name pos:line="254" pos:column="6">ExtInput</name><op:operator pos:line="254" pos:column="14">::</op:operator><name pos:line="254" pos:column="16">stop</name></name> <parameter_list pos:line="254" pos:column="21">(<param><decl><type><name pos:line="254" pos:column="22">HIViewRef</name></type> <name pos:line="254" pos:column="32">viewRef</name></decl></param>)</parameter_list>
<block pos:line="255" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="256" pos:column="9">TSMData</name><type:modifier pos:line="256" pos:column="16">*</type:modifier></type> <name pos:line="256" pos:column="18">data</name> <init pos:line="256" pos:column="23">= <expr><call><name pos:line="256" pos:column="25">getTSMData</name> <argument_list pos:line="256" pos:column="36">(<argument><expr><name pos:line="256" pos:column="37">viewRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="257" pos:column="9">if <condition pos:line="257" pos:column="12">(<expr><name pos:line="257" pos:column="13">NULL</name> <op:operator pos:line="257" pos:column="18">!=</op:operator> <name pos:line="257" pos:column="21">data</name></expr>)</condition><then pos:line="257" pos:column="26">
		<expr_stmt><expr><call><name pos:line="258" pos:column="17">stopInput</name> <argument_list pos:line="258" pos:column="27">(<argument><expr><name pos:line="258" pos:column="28">data</name></expr></argument>, <argument><expr><name><name pos:line="258" pos:column="34">data</name><op:operator pos:line="258" pos:column="38">-&gt;</op:operator><name pos:line="258" pos:column="40">selStart</name></name> <op:operator pos:line="258" pos:column="49">+</op:operator> <name><name pos:line="258" pos:column="51">data</name><op:operator pos:line="258" pos:column="55">-&gt;</op:operator><name pos:line="258" pos:column="57">selLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><specifier pos:line="261" pos:column="1">static</specifier> <name pos:line="261" pos:column="8">char</name><type:modifier pos:line="261" pos:column="12">*</type:modifier></type> <name pos:line="261" pos:column="14">UTF16toUTF8</name> <parameter_list pos:line="261" pos:column="26">(<param><decl><type><specifier pos:line="261" pos:column="27">const</specifier> <name pos:line="261" pos:column="33">UniChar</name><type:modifier pos:line="261" pos:column="40">*</type:modifier></type> <name pos:line="261" pos:column="42">buf</name></decl></param>, <param><decl><type><name pos:line="261" pos:column="47">int</name></type> <name pos:line="261" pos:column="51">len</name></decl></param>, <param><decl><type><name pos:line="261" pos:column="56">int</name><type:modifier pos:line="261" pos:column="59">&amp;</type:modifier></type> <name pos:line="261" pos:column="61">utf8len</name></decl></param>)</parameter_list>
<block pos:line="262" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="263" pos:column="9">CFStringRef</name></type> <name pos:line="263" pos:column="21">str</name> <init pos:line="263" pos:column="25">= <expr><call><name pos:line="263" pos:column="27">CFStringCreateWithCharactersNoCopy</name> <argument_list pos:line="263" pos:column="62">(<argument><expr><name pos:line="263" pos:column="63">NULL</name></expr></argument>, <argument><expr><name pos:line="263" pos:column="69">buf</name></expr></argument>, <argument><expr><op:operator pos:line="263" pos:column="74">(</op:operator><name pos:line="263" pos:column="75">UInt32</name><op:operator pos:line="263" pos:column="81">)</op:operator> <name pos:line="263" pos:column="83">len</name></expr></argument>, <argument><expr><name pos:line="263" pos:column="88">kCFAllocatorNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="264" pos:column="9">CFRange</name></type> <name pos:line="264" pos:column="17">range</name> <init pos:line="264" pos:column="23">= <expr><block pos:line="264" pos:column="25">{ <expr><lit:literal type="number" pos:line="264" pos:column="27">0</lit:literal></expr>, <expr><name pos:line="264" pos:column="30">len</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="265" pos:column="9">CFIndex</name></type> <name pos:line="265" pos:column="17">bufLen</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="266" pos:column="9">CFStringGetBytes</name> <argument_list pos:line="266" pos:column="26">(<argument><expr><name pos:line="266" pos:column="27">str</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="32">range</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="39">kCFStringEncodingUTF8</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="266" pos:column="62">'?'</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="266" pos:column="67">false</lit:literal></expr></argument>, <argument><expr><name pos:line="266" pos:column="74">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="266" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="266" pos:column="83">&amp;</op:operator><name pos:line="266" pos:column="84">bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="267" pos:column="9">UInt8</name><type:modifier pos:line="267" pos:column="14">*</type:modifier></type> <name pos:line="267" pos:column="16">utf8buf</name> <init pos:line="267" pos:column="24">= <expr><op:operator pos:line="267" pos:column="26">new</op:operator> <name><name pos:line="267" pos:column="30">UInt8</name> <index pos:line="267" pos:column="36">[<expr><name pos:line="267" pos:column="37">bufLen</name><op:operator pos:line="267" pos:column="43">+</op:operator><lit:literal type="number" pos:line="267" pos:column="44">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="268" pos:column="9">CFStringGetBytes</name> <argument_list pos:line="268" pos:column="26">(<argument><expr><name pos:line="268" pos:column="27">str</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="32">range</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="39">kCFStringEncodingUTF8</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="268" pos:column="62">'?'</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="268" pos:column="67">false</lit:literal></expr></argument>, <argument><expr><name pos:line="268" pos:column="74">utf8buf</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="83">bufLen</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="91">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="269" pos:column="9">utf8buf</name> <index pos:line="269" pos:column="17">[<expr><name pos:line="269" pos:column="18">bufLen</name></expr>]</index></name> <op:operator pos:line="269" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="269" pos:column="28">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="270" pos:column="9">CFRelease</name> <argument_list pos:line="270" pos:column="19">(<argument><expr><name pos:line="270" pos:column="20">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="271" pos:column="9">utf8len</name> <op:operator pos:line="271" pos:column="17">=</op:operator> <op:operator pos:line="271" pos:column="19">(</op:operator><name pos:line="271" pos:column="20">int</name><op:operator pos:line="271" pos:column="23">)</op:operator> <name pos:line="271" pos:column="25">bufLen</name></expr>;</expr_stmt>
	<return pos:line="272" pos:column="9">return <expr><op:operator pos:line="272" pos:column="16">(</op:operator><name pos:line="272" pos:column="17">char</name><op:operator pos:line="272" pos:column="21">*</op:operator><op:operator pos:line="272" pos:column="22">)</op:operator> <name pos:line="272" pos:column="24">utf8buf</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="275" pos:column="1">static</specifier> <name pos:line="275" pos:column="8">int</name></type> <name pos:line="275" pos:column="12">UCS2Length</name> <parameter_list pos:line="275" pos:column="23">(<param><decl><type><specifier pos:line="275" pos:column="24">const</specifier> <name pos:line="275" pos:column="30">char</name><type:modifier pos:line="275" pos:column="34">*</type:modifier></type> <name pos:line="275" pos:column="36">buf</name></decl></param>, <param><decl><type><name pos:line="275" pos:column="41">int</name></type> <name pos:line="275" pos:column="45">len</name></decl></param>)</parameter_list>
<block pos:line="276" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="277" pos:column="9">int</name></type> <name pos:line="277" pos:column="13">n</name> <init pos:line="277" pos:column="15">= <expr><lit:literal type="number" pos:line="277" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="278" pos:column="9">while <condition pos:line="278" pos:column="15">(<expr><name pos:line="278" pos:column="16">len</name> <op:operator pos:line="278" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="278" pos:column="22">0</lit:literal></expr>)</condition>
	<block pos:line="279" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="280" pos:column="17">int</name></type> <name pos:line="280" pos:column="21">bytes</name> <init pos:line="280" pos:column="27">= <expr><lit:literal type="number" pos:line="280" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="281" pos:column="17">char</name></type> <name pos:line="281" pos:column="22">ch</name> <init pos:line="281" pos:column="25">= <expr><op:operator pos:line="281" pos:column="27">*</op:operator><name pos:line="281" pos:column="28">buf</name></expr></init></decl>;</decl_stmt>
		<while pos:line="282" pos:column="17">while <condition pos:line="282" pos:column="23">(<expr><name pos:line="282" pos:column="24">ch</name> <op:operator pos:line="282" pos:column="27">&amp;</op:operator> <lit:literal type="number" pos:line="282" pos:column="29">0x80</lit:literal></expr>)</condition>
			<expr_stmt><expr><name pos:line="283" pos:column="25">bytes</name><op:operator pos:line="283" pos:column="30">++</op:operator></expr><op:operator pos:line="283" pos:column="32">,</op:operator> <expr><name pos:line="283" pos:column="34">ch</name> <op:operator pos:line="283" pos:column="37">&lt;&lt;=</op:operator> <lit:literal type="number" pos:line="283" pos:column="41">1</lit:literal></expr>;</expr_stmt></while>
		<expr_stmt><expr><name pos:line="284" pos:column="17">len</name> <op:operator pos:line="284" pos:column="21">-=</op:operator> <name pos:line="284" pos:column="24">bytes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="285" pos:column="17">n</name> <op:operator pos:line="285" pos:column="19">+=</op:operator> <name pos:line="285" pos:column="22">bytes</name></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="287" pos:column="9">return <expr><name pos:line="287" pos:column="16">n</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="290" pos:column="1">static</specifier> <name pos:line="290" pos:column="8">int</name></type> <name pos:line="290" pos:column="12">UTF8Length</name> <parameter_list pos:line="290" pos:column="23">(<param><decl><type><specifier pos:line="290" pos:column="24">const</specifier> <name pos:line="290" pos:column="30">UniChar</name><type:modifier pos:line="290" pos:column="37">*</type:modifier></type> <name pos:line="290" pos:column="39">buf</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="44">int</name></type> <name pos:line="290" pos:column="48">len</name></decl></param>)</parameter_list>
<block pos:line="291" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="292" pos:column="9">int</name></type> <name pos:line="292" pos:column="13">n</name> <init pos:line="292" pos:column="15">= <expr><lit:literal type="number" pos:line="292" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="293" pos:column="9">while <condition pos:line="293" pos:column="15">(<expr><name pos:line="293" pos:column="16">len</name> <op:operator pos:line="293" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="293" pos:column="22">0</lit:literal></expr>)</condition>
	<block pos:line="294" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="295" pos:column="17">UInt32</name></type> <name pos:line="295" pos:column="24">uch</name> <init pos:line="295" pos:column="28">= <expr><op:operator pos:line="295" pos:column="30">*</op:operator><name pos:line="295" pos:column="31">buf</name><op:operator pos:line="295" pos:column="34">++</op:operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="296" pos:column="17">len</name><op:operator pos:line="296" pos:column="20">--</op:operator></expr>;</expr_stmt>
		<if pos:line="297" pos:column="17">if <condition pos:line="297" pos:column="20">(<expr><name pos:line="297" pos:column="21">uch</name> <op:operator pos:line="297" pos:column="25">&gt;=</op:operator> <lit:literal type="number" pos:line="297" pos:column="28">0xD800</lit:literal> <op:operator pos:line="297" pos:column="35">&amp;&amp;</op:operator> <name pos:line="297" pos:column="38">uch</name> <op:operator pos:line="297" pos:column="42">&lt;=</op:operator> <lit:literal type="number" pos:line="297" pos:column="45">0xDBFF</lit:literal> <op:operator pos:line="297" pos:column="52">&amp;&amp;</op:operator> <name pos:line="297" pos:column="55">len</name> <op:operator pos:line="297" pos:column="59">&gt;</op:operator> <lit:literal type="number" pos:line="297" pos:column="61">0</lit:literal></expr>)</condition><then pos:line="297" pos:column="63">
		<block pos:line="298" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="299" pos:column="25">UInt32</name></type> <name pos:line="299" pos:column="32">uch2</name> <init pos:line="299" pos:column="37">= <expr><op:operator pos:line="299" pos:column="39">*</op:operator><name pos:line="299" pos:column="40">buf</name></expr></init></decl>;</decl_stmt>
			<if pos:line="300" pos:column="25">if <condition pos:line="300" pos:column="28">(<expr><name pos:line="300" pos:column="29">uch2</name> <op:operator pos:line="300" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="300" pos:column="37">0xDC00</lit:literal> <op:operator pos:line="300" pos:column="44">&amp;&amp;</op:operator> <name pos:line="300" pos:column="47">uch2</name> <op:operator pos:line="300" pos:column="52">&lt;=</op:operator> <lit:literal type="number" pos:line="300" pos:column="55">0xDFFF</lit:literal></expr>)</condition><then pos:line="300" pos:column="62">
			<block pos:line="301" pos:column="25">{
				<expr_stmt><expr><name pos:line="302" pos:column="33">buf</name><op:operator pos:line="302" pos:column="36">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="303" pos:column="33">len</name><op:operator pos:line="303" pos:column="36">--</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="304" pos:column="33">uch</name> <op:operator pos:line="304" pos:column="37">=</op:operator> <op:operator pos:line="304" pos:column="39">(</op:operator><op:operator pos:line="304" pos:column="40">(</op:operator><name pos:line="304" pos:column="41">uch</name> <op:operator pos:line="304" pos:column="45">&amp;</op:operator> <lit:literal type="number" pos:line="304" pos:column="47">0x3FF</lit:literal><op:operator pos:line="304" pos:column="52">)</op:operator> <op:operator pos:line="304" pos:column="54">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="304" pos:column="57">10</lit:literal><op:operator pos:line="304" pos:column="59">)</op:operator> <op:operator pos:line="304" pos:column="61">+</op:operator> <op:operator pos:line="304" pos:column="63">(</op:operator><name pos:line="304" pos:column="64">uch2</name> <op:operator pos:line="304" pos:column="69">&amp;</op:operator> <lit:literal type="number" pos:line="304" pos:column="71">0x3FF</lit:literal><op:operator pos:line="304" pos:column="76">)</op:operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="307" pos:column="17">n</name><op:operator pos:line="307" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<if pos:line="308" pos:column="17">if <condition pos:line="308" pos:column="20">(<expr><name pos:line="308" pos:column="21">uch</name> <op:operator pos:line="308" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="308" pos:column="27">0x7F</lit:literal></expr>)</condition><then pos:line="308" pos:column="32">
			<expr_stmt><expr><name pos:line="309" pos:column="25">n</name><op:operator pos:line="309" pos:column="26">++</op:operator></expr>;</expr_stmt></then></if>
		<if pos:line="310" pos:column="17">if <condition pos:line="310" pos:column="20">(<expr><name pos:line="310" pos:column="21">uch</name> <op:operator pos:line="310" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="310" pos:column="27">0x7FF</lit:literal></expr>)</condition><then pos:line="310" pos:column="33">
			<expr_stmt><expr><name pos:line="311" pos:column="25">n</name><op:operator pos:line="311" pos:column="26">++</op:operator></expr>;</expr_stmt></then></if>
		<if pos:line="312" pos:column="17">if <condition pos:line="312" pos:column="20">(<expr><name pos:line="312" pos:column="21">uch</name> <op:operator pos:line="312" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="312" pos:column="27">0xFFFF</lit:literal></expr>)</condition><then pos:line="312" pos:column="34">
			<expr_stmt><expr><name pos:line="313" pos:column="25">n</name><op:operator pos:line="313" pos:column="26">++</op:operator></expr>;</expr_stmt></then></if>
		<if pos:line="314" pos:column="17">if <condition pos:line="314" pos:column="20">(<expr><name pos:line="314" pos:column="21">uch</name> <op:operator pos:line="314" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="314" pos:column="27">0x1FFFFF</lit:literal></expr>)</condition><then pos:line="314" pos:column="36">
			<expr_stmt><expr><name pos:line="315" pos:column="25">n</name><op:operator pos:line="315" pos:column="26">++</op:operator></expr>;</expr_stmt></then></if>
		<if pos:line="316" pos:column="17">if <condition pos:line="316" pos:column="20">(<expr><name pos:line="316" pos:column="21">uch</name> <op:operator pos:line="316" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="316" pos:column="27">0x3FFFFFF</lit:literal></expr>)</condition><then pos:line="316" pos:column="37">
			<expr_stmt><expr><name pos:line="317" pos:column="25">n</name><op:operator pos:line="317" pos:column="26">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></while>
	<return pos:line="319" pos:column="9">return <expr><name pos:line="319" pos:column="16">n</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="322" pos:column="1">static</specifier> <name pos:line="322" pos:column="8">OSStatus</name></type> <name pos:line="322" pos:column="17">handleTSMUpdateActiveInputArea</name> <parameter_list pos:line="322" pos:column="48">(<param><decl><type><name pos:line="322" pos:column="49">TSMData</name><type:modifier pos:line="322" pos:column="56">*</type:modifier></type> <name pos:line="322" pos:column="58">data</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="64">EventRef</name></type> <name pos:line="322" pos:column="73">inEvent</name></decl></param>)</parameter_list>
<block pos:line="323" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="324" pos:column="9">UInt32</name></type>				<name pos:line="324" pos:column="41">fixLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="325" pos:column="9">int</name></type>					<name pos:line="325" pos:column="49">caretPos</name> <init pos:line="325" pos:column="58">= <expr><op:operator pos:line="325" pos:column="60">-</op:operator><lit:literal type="number" pos:line="325" pos:column="61">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="326" pos:column="9">UInt32</name></type>				<name pos:line="326" pos:column="41">actualSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><op:operator pos:line="327" pos:column="9">::</op:operator><name pos:line="327" pos:column="11">TextRangeArray</name><type:modifier pos:line="327" pos:column="25">*</type:modifier></name></type>	<name pos:line="327" pos:column="33">hiliteRanges</name> <init pos:line="327" pos:column="46">= <expr><name pos:line="327" pos:column="48">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="328" pos:column="9">char</name><type:modifier pos:line="328" pos:column="13">*</type:modifier></type>				<name pos:line="328" pos:column="41">hiliteBuffer</name> <init pos:line="328" pos:column="54">= <expr><name pos:line="328" pos:column="56">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="329" pos:column="9">bool</name></type>				<name pos:line="329" pos:column="41">done</name></decl>;</decl_stmt>
	
	<comment type="line" pos:line="331" pos:column="9">// extract the text</comment>
	<decl_stmt><decl><type><name pos:line="332" pos:column="9">UniChar</name><type:modifier pos:line="332" pos:column="16">*</type:modifier></type> <name pos:line="332" pos:column="18">buffer</name> <init pos:line="332" pos:column="25">= <expr><name pos:line="332" pos:column="27">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="333" pos:column="9">UniChar</name></type> <name><name pos:line="333" pos:column="17">temp</name> <index pos:line="333" pos:column="22">[<expr><lit:literal type="number" pos:line="333" pos:column="23">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="334" pos:column="9">UniChar</name><type:modifier pos:line="334" pos:column="16">*</type:modifier></type> <name pos:line="334" pos:column="18">text</name> <init pos:line="334" pos:column="23">= <expr><name pos:line="334" pos:column="25">temp</name></expr></init></decl>;</decl_stmt>
	
	<comment type="line" pos:line="336" pos:column="9">// get the fix length (in bytes)</comment>
	<decl_stmt><decl><type><name pos:line="337" pos:column="9">OSStatus</name></type> <name pos:line="337" pos:column="18">err</name> <init pos:line="337" pos:column="22">= <expr><call><name><op:operator pos:line="337" pos:column="24">::</op:operator><name pos:line="337" pos:column="26">GetEventParameter</name></name> <argument_list pos:line="337" pos:column="44">(<argument><expr><name pos:line="337" pos:column="45">inEvent</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="54">kEventParamTextInputSendFixLen</name></expr></argument>,
								   <argument><expr><name pos:line="338" pos:column="68">typeLongInteger</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="85">NULL</name></expr></argument>, <argument><expr><sizeof pos:line="338" pos:column="91">sizeof <argument_list pos:line="338" pos:column="98">(<argument><expr><name pos:line="338" pos:column="99">long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="338" pos:column="106">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="338" pos:column="112">&amp;</op:operator><name pos:line="338" pos:column="113">fixLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="339" pos:column="9">// need the size (in bytes)</comment>
	<if pos:line="340" pos:column="9">if <condition pos:line="340" pos:column="12">(<expr><name pos:line="340" pos:column="13">noErr</name> <op:operator pos:line="340" pos:column="19">==</op:operator> <name pos:line="340" pos:column="22">err</name></expr>)</condition><then pos:line="340" pos:column="26">
		<expr_stmt><expr><name pos:line="341" pos:column="17">err</name> <op:operator pos:line="341" pos:column="21">=</op:operator> <call><name><op:operator pos:line="341" pos:column="23">::</op:operator><name pos:line="341" pos:column="25">GetEventParameter</name></name> <argument_list pos:line="341" pos:column="43">(<argument><expr><name pos:line="341" pos:column="44">inEvent</name></expr></argument>, <argument><expr><name pos:line="341" pos:column="53">kEventParamTextInputSendText</name></expr></argument>,
										<argument><expr><name pos:line="342" pos:column="81">typeUnicodeText</name></expr></argument>, <argument><expr><name pos:line="342" pos:column="98">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="342" pos:column="104">256</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="342" pos:column="109">&amp;</op:operator><name pos:line="342" pos:column="110">actualSize</name></expr></argument>, <argument><expr><name pos:line="342" pos:column="122">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
										
	<comment type="line" pos:line="344" pos:column="9">// then allocate and fetch if necessary</comment>
	<decl_stmt><decl><type><name pos:line="345" pos:column="9">UInt32</name></type> <name pos:line="345" pos:column="16">textLength</name> <init pos:line="345" pos:column="27">= <expr><name pos:line="345" pos:column="29">actualSize</name> <op:operator pos:line="345" pos:column="40">/</op:operator> <sizeof pos:line="345" pos:column="42">sizeof <argument_list pos:line="345" pos:column="49">(<argument><expr><name pos:line="345" pos:column="50">UniChar</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="346" pos:column="9">fixLength</name> <op:operator pos:line="346" pos:column="19">/=</op:operator> <sizeof pos:line="346" pos:column="22">sizeof <argument_list pos:line="346" pos:column="29">(<argument><expr><name pos:line="346" pos:column="30">UniChar</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if pos:line="348" pos:column="9">if <condition pos:line="348" pos:column="12">(<expr><name pos:line="348" pos:column="13">noErr</name> <op:operator pos:line="348" pos:column="19">==</op:operator> <name pos:line="348" pos:column="22">err</name></expr>)</condition><then pos:line="348" pos:column="26">
	<block pos:line="349" pos:column="9">{
		<comment type="line" pos:line="350" pos:column="17">// this indicates that we are completely done</comment>
		<expr_stmt><expr><name pos:line="351" pos:column="17">done</name> <op:operator pos:line="351" pos:column="22">=</op:operator> <op:operator pos:line="351" pos:column="24">(</op:operator><name pos:line="351" pos:column="25">fixLength</name> <op:operator pos:line="351" pos:column="35">==</op:operator> <name pos:line="351" pos:column="38">textLength</name> <op:operator pos:line="351" pos:column="49">||</op:operator> <name pos:line="351" pos:column="52">fixLength</name> <op:operator pos:line="351" pos:column="62">&lt;</op:operator> <lit:literal type="number" pos:line="351" pos:column="64">0</lit:literal><op:operator pos:line="351" pos:column="65">)</op:operator></expr>;</expr_stmt>
		<if pos:line="352" pos:column="17">if <condition pos:line="352" pos:column="20">(<expr><name pos:line="352" pos:column="21">textLength</name> <op:operator pos:line="352" pos:column="32">&gt;=</op:operator> <lit:literal type="number" pos:line="352" pos:column="35">128</lit:literal></expr>)</condition><then pos:line="352" pos:column="39">
		<block pos:line="353" pos:column="17">{
			<expr_stmt><expr><name pos:line="354" pos:column="25">buffer</name> <op:operator pos:line="354" pos:column="32">=</op:operator> <name pos:line="354" pos:column="34">text</name> <op:operator pos:line="354" pos:column="39">=</op:operator> <op:operator pos:line="354" pos:column="41">new</op:operator> <name><name pos:line="354" pos:column="45">UniChar</name> <index pos:line="354" pos:column="53">[<expr><name pos:line="354" pos:column="54">textLength</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="355" pos:column="25">err</name> <op:operator pos:line="355" pos:column="29">=</op:operator> <call><name><op:operator pos:line="355" pos:column="31">::</op:operator><name pos:line="355" pos:column="33">GetEventParameter</name></name> <argument_list pos:line="355" pos:column="51">(<argument><expr><name pos:line="355" pos:column="52">inEvent</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="61">kEventParamTextInputSendText</name></expr></argument>,
									   <argument><expr><name pos:line="356" pos:column="76">typeUnicodeText</name></expr></argument>, <argument><expr><name pos:line="356" pos:column="93">NULL</name></expr></argument>, <argument><expr><name pos:line="356" pos:column="99">actualSize</name></expr></argument>, <argument><expr><name pos:line="356" pos:column="111">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="356" pos:column="117">(</op:operator><name pos:line="356" pos:column="118">void</name><op:operator pos:line="356" pos:column="122">*</op:operator><op:operator pos:line="356" pos:column="123">)</op:operator> <name pos:line="356" pos:column="125">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		
		<comment type="line" pos:line="359" pos:column="17">// set the text now, but convert it to UTF-8 first</comment>
		<decl_stmt><decl><type><name pos:line="360" pos:column="17">int</name></type> <name pos:line="360" pos:column="21">utf8len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="361" pos:column="17">char</name><type:modifier pos:line="361" pos:column="21">*</type:modifier></type> <name pos:line="361" pos:column="23">utf8</name> <init pos:line="361" pos:column="28">= <expr><call><name pos:line="361" pos:column="30">UTF16toUTF8</name> <argument_list pos:line="361" pos:column="42">(<argument><expr><name pos:line="361" pos:column="43">text</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="49">textLength</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="61">utf8len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="362" pos:column="17">data</name><op:operator pos:line="362" pos:column="21">-&gt;</op:operator><name pos:line="362" pos:column="23">scintilla</name><op:operator pos:line="362" pos:column="32">-&gt;</op:operator><name pos:line="362" pos:column="34">WndProc</name></name> <argument_list pos:line="362" pos:column="42">(<argument><expr><name pos:line="362" pos:column="43">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name><name pos:line="362" pos:column="63">data</name><op:operator pos:line="362" pos:column="67">-&gt;</op:operator><name pos:line="362" pos:column="69">selStart</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="362" pos:column="79">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="363" pos:column="17">data</name><op:operator pos:line="363" pos:column="21">-&gt;</op:operator><name pos:line="363" pos:column="23">scintilla</name><op:operator pos:line="363" pos:column="32">-&gt;</op:operator><name pos:line="363" pos:column="34">WndProc</name></name> <argument_list pos:line="363" pos:column="42">(<argument><expr><name pos:line="363" pos:column="43">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name><name pos:line="363" pos:column="61">data</name><op:operator pos:line="363" pos:column="65">-&gt;</op:operator><name pos:line="363" pos:column="67">selStart</name></name> <op:operator pos:line="363" pos:column="76">+</op:operator> <name><name pos:line="363" pos:column="78">data</name><op:operator pos:line="363" pos:column="82">-&gt;</op:operator><name pos:line="363" pos:column="84">selLength</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="363" pos:column="95">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="364" pos:column="17">data</name><op:operator pos:line="364" pos:column="21">-&gt;</op:operator><name pos:line="364" pos:column="23">scintilla</name><op:operator pos:line="364" pos:column="32">-&gt;</op:operator><name pos:line="364" pos:column="34">WndProc</name></name> <argument_list pos:line="364" pos:column="42">(<argument><expr><name pos:line="364" pos:column="43">SCI_HIDESELECTION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="364" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="364" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="365" pos:column="17">data</name><op:operator pos:line="365" pos:column="21">-&gt;</op:operator><name pos:line="365" pos:column="23">scintilla</name><op:operator pos:line="365" pos:column="32">-&gt;</op:operator><name pos:line="365" pos:column="34">WndProc</name></name> <argument_list pos:line="365" pos:column="42">(<argument><expr><name pos:line="365" pos:column="43">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><name pos:line="365" pos:column="62">utf8len</name></expr></argument>, <argument><expr><op:operator pos:line="365" pos:column="71">(</op:operator><name pos:line="365" pos:column="72">sptr_t</name><op:operator pos:line="365" pos:column="78">)</op:operator> <name pos:line="365" pos:column="80">utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="366" pos:column="17">data</name><op:operator pos:line="366" pos:column="21">-&gt;</op:operator><name pos:line="366" pos:column="23">selLength</name></name> <op:operator pos:line="366" pos:column="33">=</op:operator> <name pos:line="366" pos:column="35">utf8len</name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="367" pos:column="17">delete</op:operator> <index pos:line="367" pos:column="24">[]</index> <name pos:line="367" pos:column="27">utf8</name></expr>;</expr_stmt>
	}</block></then></if>
	
	<comment type="line" pos:line="370" pos:column="9">// attempt to extract the array of hilite ranges</comment>
	<if pos:line="371" pos:column="9">if <condition pos:line="371" pos:column="12">(<expr><name pos:line="371" pos:column="13">noErr</name> <op:operator pos:line="371" pos:column="19">==</op:operator> <name pos:line="371" pos:column="22">err</name></expr>)</condition><then pos:line="371" pos:column="26">
	<block pos:line="372" pos:column="9">{
		<decl_stmt><decl><type><name><op:operator pos:line="373" pos:column="17">::</op:operator><name pos:line="373" pos:column="19">TextRangeArray</name></name></type> <name pos:line="373" pos:column="34">tempTextRangeArray</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="374" pos:column="17">OSStatus</name></type> <name pos:line="374" pos:column="26">tempErr</name> <init pos:line="374" pos:column="34">= <expr><call><name><op:operator pos:line="374" pos:column="36">::</op:operator><name pos:line="374" pos:column="38">GetEventParameter</name></name> <argument_list pos:line="374" pos:column="56">(<argument><expr><name pos:line="374" pos:column="57">inEvent</name></expr></argument>, <argument><expr><name pos:line="374" pos:column="66">kEventParamTextInputSendHiliteRng</name></expr></argument>,
											 <argument><expr><name pos:line="375" pos:column="90">typeTextRangeArray</name></expr></argument>, <argument><expr><name pos:line="375" pos:column="110">NULL</name></expr></argument>, <argument><expr><sizeof pos:line="375" pos:column="116">sizeof <argument_list pos:line="375" pos:column="123">(<argument><expr><name><op:operator pos:line="375" pos:column="124">::</op:operator><name pos:line="375" pos:column="126">TextRangeArray</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="375" pos:column="143">&amp;</op:operator><name pos:line="375" pos:column="144">actualSize</name></expr></argument>, <argument><expr><op:operator pos:line="375" pos:column="156">&amp;</op:operator><name pos:line="375" pos:column="157">tempTextRangeArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="376" pos:column="17">if <condition pos:line="376" pos:column="20">(<expr><name pos:line="376" pos:column="21">noErr</name> <op:operator pos:line="376" pos:column="27">==</op:operator> <name pos:line="376" pos:column="30">tempErr</name></expr>)</condition><then pos:line="376" pos:column="38">
		<block pos:line="377" pos:column="17">{
			<comment type="line" pos:line="378" pos:column="25">// allocate memory and get the stuff!</comment>
			<expr_stmt><expr><name pos:line="379" pos:column="25">hiliteBuffer</name> <op:operator pos:line="379" pos:column="38">=</op:operator> <op:operator pos:line="379" pos:column="40">new</op:operator> <name><name pos:line="379" pos:column="44">char</name> <index pos:line="379" pos:column="49">[<expr><name pos:line="379" pos:column="50">actualSize</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="380" pos:column="25">hiliteRanges</name> <op:operator pos:line="380" pos:column="38">=</op:operator> <op:operator pos:line="380" pos:column="40">(</op:operator><name><op:operator pos:line="380" pos:column="41">::</op:operator><name pos:line="380" pos:column="43">TextRangeArray</name></name><op:operator pos:line="380" pos:column="57">*</op:operator><op:operator pos:line="380" pos:column="58">)</op:operator> <name pos:line="380" pos:column="60">hiliteBuffer</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="381" pos:column="25">err</name> <op:operator pos:line="381" pos:column="29">=</op:operator> <call><name><op:operator pos:line="381" pos:column="31">::</op:operator><name pos:line="381" pos:column="33">GetEventParameter</name></name> <argument_list pos:line="381" pos:column="51">(<argument><expr><name pos:line="381" pos:column="52">inEvent</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="61">kEventParamTextInputSendHiliteRng</name></expr></argument>,
									   <argument><expr><name pos:line="382" pos:column="76">typeTextRangeArray</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="96">NULL</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="102">actualSize</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="114">NULL</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="120">hiliteRanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="383" pos:column="25">if <condition pos:line="383" pos:column="28">(<expr><name pos:line="383" pos:column="29">noErr</name> <op:operator pos:line="383" pos:column="35">!=</op:operator> <name pos:line="383" pos:column="38">err</name></expr>)</condition><then pos:line="383" pos:column="42">
			<block pos:line="384" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="385" pos:column="33">delete</op:operator> <index pos:line="385" pos:column="40">[]</index> <name pos:line="385" pos:column="43">hiliteBuffer</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="386" pos:column="33">hiliteBuffer</name> <op:operator pos:line="386" pos:column="46">=</op:operator> <name pos:line="386" pos:column="48">NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="387" pos:column="33">hiliteRanges</name> <op:operator pos:line="387" pos:column="46">=</op:operator> <name pos:line="387" pos:column="48">NULL</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>
<cpp:if pos:line="391" pos:column="1">#<cpp:directive pos:line="391" pos:column="2">if</cpp:directive> <expr><name pos:line="391" pos:column="5">LOG_TSM</name></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="392" pos:column="9">fprintf</name> <argument_list pos:line="392" pos:column="17">(<argument><expr><name pos:line="392" pos:column="18">logFile</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="392" pos:column="27">"kEventTextInputUpdateActiveInputArea:\n"</lit:literal>
					 <lit:literal type="string" pos:line="393" pos:column="42">"  TextLength = %ld\n"</lit:literal>
					 <lit:literal type="string" pos:line="394" pos:column="42">"  FixLength = %ld\n"</lit:literal></expr></argument>,
					 <argument><expr><op:operator pos:line="395" pos:column="42">(</op:operator><name pos:line="395" pos:column="43">long</name><op:operator pos:line="395" pos:column="47">)</op:operator> <name pos:line="395" pos:column="49">textLength</name></expr></argument>, <argument><expr><op:operator pos:line="395" pos:column="61">(</op:operator><name pos:line="395" pos:column="62">long</name><op:operator pos:line="395" pos:column="66">)</op:operator> <name pos:line="395" pos:column="68">fixLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="396" pos:column="9">fflush</name> <argument_list pos:line="396" pos:column="16">(<argument><expr><name pos:line="396" pos:column="17">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="397" pos:column="1">#<cpp:directive pos:line="397" pos:column="2">endif</cpp:directive></cpp:endif>

	<if pos:line="399" pos:column="9">if <condition pos:line="399" pos:column="12">(<expr><name pos:line="399" pos:column="13">NULL</name> <op:operator pos:line="399" pos:column="18">!=</op:operator> <name pos:line="399" pos:column="21">hiliteRanges</name></expr>)</condition><then pos:line="399" pos:column="34">
	<block pos:line="400" pos:column="9">{
		<for pos:line="401" pos:column="17">for (<init><decl><type><name pos:line="401" pos:column="22">int</name></type> <name pos:line="401" pos:column="26">i</name> <init pos:line="401" pos:column="28">= <expr><lit:literal type="number" pos:line="401" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="401" pos:column="33">i</name> <op:operator pos:line="401" pos:column="35">&lt;</op:operator> <name><name pos:line="401" pos:column="37">hiliteRanges</name><op:operator pos:line="401" pos:column="49">-&gt;</op:operator><name pos:line="401" pos:column="51">fNumOfRanges</name></name></expr>;</condition> <incr><expr><name pos:line="401" pos:column="65">i</name><op:operator pos:line="401" pos:column="66">++</op:operator></expr></incr>)
		<block pos:line="402" pos:column="17">{
<cpp:if pos:line="403" pos:column="1">#<cpp:directive pos:line="403" pos:column="2">if</cpp:directive> <expr><name pos:line="403" pos:column="5">LOG_TSM</name></expr></cpp:if>
			<expr_stmt><expr><call><name pos:line="404" pos:column="25">fprintf</name> <argument_list pos:line="404" pos:column="33">(<argument><expr><name pos:line="404" pos:column="34">logFile</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="404" pos:column="43">"  Range #%d: %ld-%ld (%d)\n"</lit:literal></expr></argument>,
								<argument><expr><name pos:line="405" pos:column="65">i</name><op:operator pos:line="405" pos:column="66">+</op:operator><lit:literal type="number" pos:line="405" pos:column="67">1</lit:literal></expr></argument>,
								<argument><expr><name><name pos:line="406" pos:column="65">hiliteRanges</name><op:operator pos:line="406" pos:column="77">-&gt;</op:operator><name pos:line="406" pos:column="79">fRange</name><index pos:line="406" pos:column="85">[<expr><name pos:line="406" pos:column="86">i</name></expr>]</index></name><op:operator pos:line="406" pos:column="88">.</op:operator><name pos:line="406" pos:column="89">fStart</name></expr></argument>,
								<argument><expr><name><name pos:line="407" pos:column="65">hiliteRanges</name><op:operator pos:line="407" pos:column="77">-&gt;</op:operator><name pos:line="407" pos:column="79">fRange</name><index pos:line="407" pos:column="85">[<expr><name pos:line="407" pos:column="86">i</name></expr>]</index></name><op:operator pos:line="407" pos:column="88">.</op:operator><name pos:line="407" pos:column="89">fEnd</name></expr></argument>,
								<argument><expr><name><name pos:line="408" pos:column="65">hiliteRanges</name><op:operator pos:line="408" pos:column="77">-&gt;</op:operator><name pos:line="408" pos:column="79">fRange</name><index pos:line="408" pos:column="85">[<expr><name pos:line="408" pos:column="86">i</name></expr>]</index></name><op:operator pos:line="408" pos:column="88">.</op:operator><name pos:line="408" pos:column="89">fHiliteStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="409" pos:column="25">fflush</name> <argument_list pos:line="409" pos:column="32">(<argument><expr><name pos:line="409" pos:column="33">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="410" pos:column="1">#<cpp:directive pos:line="410" pos:column="2">endif</cpp:directive></cpp:endif>
			<comment type="line" pos:line="411" pos:column="25">// start and end of range, zero based</comment>
			<decl_stmt><decl><type><name pos:line="412" pos:column="25">long</name></type> <name pos:line="412" pos:column="30">bgn</name> <init pos:line="412" pos:column="34">= <expr><call><name pos:line="412" pos:column="36">long</name> <argument_list pos:line="412" pos:column="41">(<argument><expr><name><name pos:line="412" pos:column="42">hiliteRanges</name><op:operator pos:line="412" pos:column="54">-&gt;</op:operator><name pos:line="412" pos:column="56">fRange</name><index pos:line="412" pos:column="62">[<expr><name pos:line="412" pos:column="63">i</name></expr>]</index></name><op:operator pos:line="412" pos:column="65">.</op:operator><name pos:line="412" pos:column="66">fStart</name></expr></argument>)</argument_list></call> <op:operator pos:line="412" pos:column="74">/</op:operator> <sizeof pos:line="412" pos:column="76">sizeof <argument_list pos:line="412" pos:column="83">(<argument><expr><name pos:line="412" pos:column="84">UniChar</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="413" pos:column="25">long</name></type> <name pos:line="413" pos:column="30">end</name> <init pos:line="413" pos:column="34">= <expr><call><name pos:line="413" pos:column="36">long</name> <argument_list pos:line="413" pos:column="41">(<argument><expr><name><name pos:line="413" pos:column="42">hiliteRanges</name><op:operator pos:line="413" pos:column="54">-&gt;</op:operator><name pos:line="413" pos:column="56">fRange</name><index pos:line="413" pos:column="62">[<expr><name pos:line="413" pos:column="63">i</name></expr>]</index></name><op:operator pos:line="413" pos:column="65">.</op:operator><name pos:line="413" pos:column="66">fEnd</name></expr></argument>)</argument_list></call> <op:operator pos:line="413" pos:column="72">/</op:operator> <sizeof pos:line="413" pos:column="74">sizeof <argument_list pos:line="413" pos:column="81">(<argument><expr><name pos:line="413" pos:column="82">UniChar</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
			<if pos:line="414" pos:column="25">if <condition pos:line="414" pos:column="28">(<expr><name pos:line="414" pos:column="29">bgn</name> <op:operator pos:line="414" pos:column="33">&gt;=</op:operator> <lit:literal type="number" pos:line="414" pos:column="36">0</lit:literal> <op:operator pos:line="414" pos:column="38">&amp;&amp;</op:operator> <name pos:line="414" pos:column="41">end</name> <op:operator pos:line="414" pos:column="45">&gt;=</op:operator> <lit:literal type="number" pos:line="414" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="414" pos:column="50">
			<block pos:line="415" pos:column="25">{
				<comment type="line" pos:line="416" pos:column="33">// move the caret if this is requested</comment>
				<if pos:line="417" pos:column="33">if <condition pos:line="417" pos:column="36">(<expr><name><name pos:line="417" pos:column="37">hiliteRanges</name><op:operator pos:line="417" pos:column="49">-&gt;</op:operator><name pos:line="417" pos:column="51">fRange</name><index pos:line="417" pos:column="57">[<expr><name pos:line="417" pos:column="58">i</name></expr>]</index></name><op:operator pos:line="417" pos:column="60">.</op:operator><name pos:line="417" pos:column="61">fHiliteStyle</name> <op:operator pos:line="417" pos:column="74">==</op:operator> <name pos:line="417" pos:column="77">kTSMHiliteCaretPosition</name></expr>)</condition><then pos:line="417" pos:column="101">
					<expr_stmt><expr><name pos:line="418" pos:column="41">caretPos</name> <op:operator pos:line="418" pos:column="50">=</op:operator> <name pos:line="418" pos:column="52">bgn</name></expr>;</expr_stmt></then>
				<else pos:line="419" pos:column="33">else
				<block pos:line="420" pos:column="33">{
					<comment type="line" pos:line="421" pos:column="41">// determine which style to use</comment>
					<decl_stmt><decl><type><name pos:line="422" pos:column="41">int</name></type> <name pos:line="422" pos:column="45">style</name></decl>;</decl_stmt>
					<switch pos:line="423" pos:column="41">switch <condition pos:line="423" pos:column="48">(<expr><name><name pos:line="423" pos:column="49">hiliteRanges</name><op:operator pos:line="423" pos:column="61">-&gt;</op:operator><name pos:line="423" pos:column="63">fRange</name><index pos:line="423" pos:column="69">[<expr><name pos:line="423" pos:column="70">i</name></expr>]</index></name><op:operator pos:line="423" pos:column="72">.</op:operator><name pos:line="423" pos:column="73">fHiliteStyle</name></expr>)</condition>
					<block pos:line="424" pos:column="41">{
						<case pos:line="425" pos:column="49">case <expr><name pos:line="425" pos:column="54">kTSMHiliteRawText</name></expr>:					<expr_stmt><expr><name pos:line="425" pos:column="105">style</name> <op:operator pos:line="425" pos:column="111">=</op:operator> <name pos:line="425" pos:column="113">INDIC0_MASK</name></expr>;</expr_stmt> <break pos:line="425" pos:column="126">break;</break>
						</case><case pos:line="426" pos:column="49">case <expr><name pos:line="426" pos:column="54">kTSMHiliteSelectedRawText</name></expr>:			<expr_stmt><expr><name pos:line="426" pos:column="97">style</name> <op:operator pos:line="426" pos:column="103">=</op:operator> <name pos:line="426" pos:column="105">INDIC0_MASK</name></expr>;</expr_stmt> <break pos:line="426" pos:column="118">break;</break>
						</case><case pos:line="427" pos:column="49">case <expr><name pos:line="427" pos:column="54">kTSMHiliteConvertedText</name></expr>:			<expr_stmt><expr><name pos:line="427" pos:column="97">style</name> <op:operator pos:line="427" pos:column="103">=</op:operator> <name pos:line="427" pos:column="105">INDIC1_MASK</name></expr>;</expr_stmt> <break pos:line="427" pos:column="118">break;</break>
						</case><case pos:line="428" pos:column="49">case <expr><name pos:line="428" pos:column="54">kTSMHiliteSelectedConvertedText</name></expr>:	<expr_stmt><expr><name pos:line="428" pos:column="89">style</name> <op:operator pos:line="428" pos:column="95">=</op:operator> <name pos:line="428" pos:column="97">INDIC2_MASK</name></expr>;</expr_stmt> <break pos:line="428" pos:column="110">break;</break>
						</case><default pos:line="429" pos:column="49">default:								<expr_stmt><expr><name pos:line="429" pos:column="121">style</name> <op:operator pos:line="429" pos:column="127">=</op:operator> <name pos:line="429" pos:column="129">INDIC0_MASK</name></expr>;</expr_stmt>
					</default>}</block></switch>
					<comment type="line" pos:line="431" pos:column="41">// bgn and end are Unicode offsets from the starting pos</comment>
					<comment type="line" pos:line="432" pos:column="41">// use the text buffer to determine the UTF-8 offsets</comment>
					<decl_stmt><decl><type><name pos:line="433" pos:column="41">long</name></type> <name pos:line="433" pos:column="46">utf8bgn</name>  <init pos:line="433" pos:column="55">= <expr><name><name pos:line="433" pos:column="57">data</name><op:operator pos:line="433" pos:column="61">-&gt;</op:operator><name pos:line="433" pos:column="63">selStart</name></name> <op:operator pos:line="433" pos:column="72">+</op:operator> <call><name pos:line="433" pos:column="74">UTF8Length</name> <argument_list pos:line="433" pos:column="85">(<argument><expr><name pos:line="433" pos:column="86">text</name></expr></argument>, <argument><expr><name pos:line="433" pos:column="92">bgn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="434" pos:column="41">long</name></type> <name pos:line="434" pos:column="46">utf8size</name> <init pos:line="434" pos:column="55">= <expr><call><name pos:line="434" pos:column="57">UTF8Length</name> <argument_list pos:line="434" pos:column="68">(<argument><expr><name pos:line="434" pos:column="69">text</name> <op:operator pos:line="434" pos:column="74">+</op:operator> <name pos:line="434" pos:column="76">bgn</name></expr></argument>, <argument><expr><name pos:line="434" pos:column="81">end</name> <op:operator pos:line="434" pos:column="85">-</op:operator> <name pos:line="434" pos:column="87">bgn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="435" pos:column="41">// set indicators</comment>
					<decl_stmt><decl><type><name pos:line="436" pos:column="41">int</name></type> <name pos:line="436" pos:column="45">oldEnd</name> <init pos:line="436" pos:column="52">= <expr><call><name><name pos:line="436" pos:column="54">data</name><op:operator pos:line="436" pos:column="58">-&gt;</op:operator><name pos:line="436" pos:column="60">scintilla</name><op:operator pos:line="436" pos:column="69">-&gt;</op:operator><name pos:line="436" pos:column="71">WndProc</name></name> <argument_list pos:line="436" pos:column="79">(<argument><expr><name pos:line="436" pos:column="80">SCI_GETENDSTYLED</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="436" pos:column="98">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="436" pos:column="101">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="437" pos:column="41">data</name><op:operator pos:line="437" pos:column="45">-&gt;</op:operator><name pos:line="437" pos:column="47">scintilla</name><op:operator pos:line="437" pos:column="56">-&gt;</op:operator><name pos:line="437" pos:column="58">WndProc</name></name> <argument_list pos:line="437" pos:column="66">(<argument><expr><name pos:line="437" pos:column="67">SCI_STARTSTYLING</name></expr></argument>, <argument><expr><name pos:line="437" pos:column="85">utf8bgn</name></expr></argument>, <argument><expr><name pos:line="437" pos:column="94">INDICS_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="438" pos:column="41">data</name><op:operator pos:line="438" pos:column="45">-&gt;</op:operator><name pos:line="438" pos:column="47">scintilla</name><op:operator pos:line="438" pos:column="56">-&gt;</op:operator><name pos:line="438" pos:column="58">WndProc</name></name> <argument_list pos:line="438" pos:column="66">(<argument><expr><name pos:line="438" pos:column="67">SCI_SETSTYLING</name></expr></argument>, <argument><expr><name pos:line="438" pos:column="83">utf8size</name></expr></argument>, <argument><expr><name pos:line="438" pos:column="93">style</name> <op:operator pos:line="438" pos:column="99">&amp;</op:operator> <op:operator pos:line="438" pos:column="101">~</op:operator><lit:literal type="number" pos:line="438" pos:column="102">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="439" pos:column="41">data</name><op:operator pos:line="439" pos:column="45">-&gt;</op:operator><name pos:line="439" pos:column="47">scintilla</name><op:operator pos:line="439" pos:column="56">-&gt;</op:operator><name pos:line="439" pos:column="58">WndProc</name></name> <argument_list pos:line="439" pos:column="66">(<argument><expr><name pos:line="439" pos:column="67">SCI_STARTSTYLING</name></expr></argument>, <argument><expr><name pos:line="439" pos:column="85">oldEnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="439" pos:column="93">31</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
	<if pos:line="444" pos:column="9">if <condition pos:line="444" pos:column="12">(<expr><name pos:line="444" pos:column="13">noErr</name> <op:operator pos:line="444" pos:column="19">==</op:operator> <name pos:line="444" pos:column="22">err</name></expr>)</condition><then pos:line="444" pos:column="26">
	<block pos:line="445" pos:column="9">{
		<comment type="line" pos:line="446" pos:column="17">// if the fixed length is == to the new text, we are done</comment>
		<if pos:line="447" pos:column="17">if <condition pos:line="447" pos:column="20">(<expr><name pos:line="447" pos:column="21">done</name></expr>)</condition><then pos:line="447" pos:column="26">
			<expr_stmt><expr><call><name pos:line="448" pos:column="25">stopInput</name> <argument_list pos:line="448" pos:column="35">(<argument><expr><name pos:line="448" pos:column="36">data</name></expr></argument>, <argument><expr><name><name pos:line="448" pos:column="42">data</name><op:operator pos:line="448" pos:column="46">-&gt;</op:operator><name pos:line="448" pos:column="48">selStart</name></name> <op:operator pos:line="448" pos:column="57">+</op:operator> <call><name pos:line="448" pos:column="59">UTF8Length</name> <argument_list pos:line="448" pos:column="70">(<argument><expr><name pos:line="448" pos:column="71">text</name></expr></argument>, <argument><expr><name pos:line="448" pos:column="77">textLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="449" pos:column="17">else <if pos:line="449" pos:column="22">if <condition pos:line="449" pos:column="25">(<expr><name pos:line="449" pos:column="26">caretPos</name> <op:operator pos:line="449" pos:column="35">&gt;=</op:operator> <lit:literal type="number" pos:line="449" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="449" pos:column="40">
		<block pos:line="450" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="451" pos:column="25">data</name><op:operator pos:line="451" pos:column="29">-&gt;</op:operator><name pos:line="451" pos:column="31">selCur</name></name> <op:operator pos:line="451" pos:column="38">=</op:operator> <name><name pos:line="451" pos:column="40">data</name><op:operator pos:line="451" pos:column="44">-&gt;</op:operator><name pos:line="451" pos:column="46">selStart</name></name> <op:operator pos:line="451" pos:column="55">+</op:operator> <call><name pos:line="451" pos:column="57">UTF8Length</name> <argument_list pos:line="451" pos:column="68">(<argument><expr><name pos:line="451" pos:column="69">text</name></expr></argument>, <argument><expr><name pos:line="451" pos:column="75">caretPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="452" pos:column="25">data</name><op:operator pos:line="452" pos:column="29">-&gt;</op:operator><name pos:line="452" pos:column="31">scintilla</name><op:operator pos:line="452" pos:column="40">-&gt;</op:operator><name pos:line="452" pos:column="42">WndProc</name></name> <argument_list pos:line="452" pos:column="50">(<argument><expr><name pos:line="452" pos:column="51">SCI_SETCURRENTPOS</name></expr></argument>, <argument><expr><name><name pos:line="452" pos:column="70">data</name><op:operator pos:line="452" pos:column="74">-&gt;</op:operator><name pos:line="452" pos:column="76">selCur</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="452" pos:column="84">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></else></if>
	}</block></then></if>
	
	<expr_stmt><expr><op:operator pos:line="456" pos:column="9">delete</op:operator> <index pos:line="456" pos:column="16">[]</index> <name pos:line="456" pos:column="19">hiliteBuffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="457" pos:column="9">delete</op:operator> <index pos:line="457" pos:column="16">[]</index> <name pos:line="457" pos:column="19">buffer</name></expr>;</expr_stmt>
	<return pos:line="458" pos:column="9">return <expr><name pos:line="458" pos:column="16">err</name></expr>;</return>
}</block></function>

<struct pos:line="461" pos:column="1">struct <name pos:line="461" pos:column="8">MacPoint</name> <block pos:line="461" pos:column="17">{<public type="default" pos:line="461" pos:column="18">
  <decl_stmt><decl><type><name pos:line="462" pos:column="3">short</name></type>               <name pos:line="462" pos:column="23">v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="463" pos:column="3">short</name></type>               <name pos:line="463" pos:column="23">h</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier pos:line="466" pos:column="1">static</specifier> <name pos:line="466" pos:column="8">OSErr</name></type> <name pos:line="466" pos:column="14">handleTSMOffset2Pos</name> <parameter_list pos:line="466" pos:column="34">(<param><decl><type><name pos:line="466" pos:column="35">TSMData</name><type:modifier pos:line="466" pos:column="42">*</type:modifier></type> <name pos:line="466" pos:column="44">data</name></decl></param>, <param><decl><type><name pos:line="466" pos:column="50">EventRef</name></type> <name pos:line="466" pos:column="59">inEvent</name></decl></param>)</parameter_list>
<block pos:line="467" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="468" pos:column="9">long</name></type> <name pos:line="468" pos:column="14">offset</name></decl>;</decl_stmt>
	
	<comment type="line" pos:line="470" pos:column="9">// get the offfset to convert</comment>
	<decl_stmt><decl><type><name pos:line="471" pos:column="9">OSStatus</name></type> <name pos:line="471" pos:column="18">err</name> <init pos:line="471" pos:column="22">= <expr><call><name><op:operator pos:line="471" pos:column="24">::</op:operator><name pos:line="471" pos:column="26">GetEventParameter</name></name> <argument_list pos:line="471" pos:column="44">(<argument><expr><name pos:line="471" pos:column="45">inEvent</name></expr></argument>, <argument><expr><name pos:line="471" pos:column="54">kEventParamTextInputSendTextOffset</name></expr></argument>,
										<argument><expr><name pos:line="472" pos:column="81">typeLongInteger</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="98">NULL</name></expr></argument>, <argument><expr><sizeof pos:line="472" pos:column="104">sizeof <argument_list pos:line="472" pos:column="111">(<argument><expr><name pos:line="472" pos:column="112">long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="472" pos:column="119">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="472" pos:column="125">&amp;</op:operator><name pos:line="472" pos:column="126">offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="473" pos:column="9">if <condition pos:line="473" pos:column="12">(<expr><name pos:line="473" pos:column="13">noErr</name> <op:operator pos:line="473" pos:column="19">==</op:operator> <name pos:line="473" pos:column="22">err</name></expr>)</condition><then pos:line="473" pos:column="26">
	<block pos:line="474" pos:column="9">{
		<comment type="line" pos:line="475" pos:column="17">// where is the caret now?</comment>
		<decl_stmt><decl><type><name pos:line="476" pos:column="17">HIPoint</name></type> <name pos:line="476" pos:column="25">where</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="478" pos:column="17">int</name></type> <name pos:line="478" pos:column="21">line</name> <init pos:line="478" pos:column="26">= <expr><op:operator pos:line="478" pos:column="28">(</op:operator><name pos:line="478" pos:column="29">int</name><op:operator pos:line="478" pos:column="32">)</op:operator> <call><name><name pos:line="478" pos:column="34">data</name><op:operator pos:line="478" pos:column="38">-&gt;</op:operator><name pos:line="478" pos:column="40">scintilla</name><op:operator pos:line="478" pos:column="49">-&gt;</op:operator><name pos:line="478" pos:column="51">WndProc</name></name> <argument_list pos:line="478" pos:column="59">(<argument><expr><name pos:line="478" pos:column="60">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="478" pos:column="82">data</name><op:operator pos:line="478" pos:column="86">-&gt;</op:operator><name pos:line="478" pos:column="88">selCur</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="478" pos:column="96">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="479" pos:column="17">where</name><op:operator pos:line="479" pos:column="22">.</op:operator><name pos:line="479" pos:column="23">x</name></name> <op:operator pos:line="479" pos:column="25">=</op:operator> <call><name><name pos:line="479" pos:column="27">data</name><op:operator pos:line="479" pos:column="31">-&gt;</op:operator><name pos:line="479" pos:column="33">scintilla</name><op:operator pos:line="479" pos:column="42">-&gt;</op:operator><name pos:line="479" pos:column="44">WndProc</name></name> <argument_list pos:line="479" pos:column="52">(<argument><expr><name pos:line="479" pos:column="53">SCI_POINTXFROMPOSITION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="479" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="479" pos:column="80">data</name><op:operator pos:line="479" pos:column="84">-&gt;</op:operator><name pos:line="479" pos:column="86">selCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="480" pos:column="17">where</name><op:operator pos:line="480" pos:column="22">.</op:operator><name pos:line="480" pos:column="23">y</name></name> <op:operator pos:line="480" pos:column="25">=</op:operator> <call><name><name pos:line="480" pos:column="27">data</name><op:operator pos:line="480" pos:column="31">-&gt;</op:operator><name pos:line="480" pos:column="33">scintilla</name><op:operator pos:line="480" pos:column="42">-&gt;</op:operator><name pos:line="480" pos:column="44">WndProc</name></name> <argument_list pos:line="480" pos:column="52">(<argument><expr><name pos:line="480" pos:column="53">SCI_POINTYFROMPOSITION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="480" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="480" pos:column="80">data</name><op:operator pos:line="480" pos:column="84">-&gt;</op:operator><name pos:line="480" pos:column="86">selCur</name></name></expr></argument>)</argument_list></call>
				<op:operator pos:line="481" pos:column="33">+</op:operator> <call><name><name pos:line="481" pos:column="35">data</name><op:operator pos:line="481" pos:column="39">-&gt;</op:operator><name pos:line="481" pos:column="41">scintilla</name><op:operator pos:line="481" pos:column="50">-&gt;</op:operator><name pos:line="481" pos:column="52">WndProc</name></name> <argument_list pos:line="481" pos:column="60">(<argument><expr><name pos:line="481" pos:column="61">SCI_TEXTHEIGHT</name></expr></argument>, <argument><expr><name pos:line="481" pos:column="77">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="481" pos:column="83">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="482" pos:column="17">// convert to window coords</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="483" pos:column="17">::</op:operator><name pos:line="483" pos:column="19">HIViewConvertPoint</name></name> <argument_list pos:line="483" pos:column="38">(<argument><expr><op:operator pos:line="483" pos:column="39">&amp;</op:operator><name pos:line="483" pos:column="40">where</name></expr></argument>, <argument><expr><name><name pos:line="483" pos:column="47">data</name><op:operator pos:line="483" pos:column="51">-&gt;</op:operator><name pos:line="483" pos:column="53">view</name></name></expr></argument>, <argument><expr><name pos:line="483" pos:column="59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="484" pos:column="17">// convert to screen coords</comment>
		<decl_stmt><decl><type><name pos:line="485" pos:column="17">Rect</name></type> <name pos:line="485" pos:column="22">global</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="486" pos:column="17">GetWindowBounds</name> <argument_list pos:line="486" pos:column="33">(<argument><expr><call><name pos:line="486" pos:column="34">HIViewGetWindow</name> <argument_list pos:line="486" pos:column="50">(<argument><expr><name><name pos:line="486" pos:column="51">data</name><op:operator pos:line="486" pos:column="55">-&gt;</op:operator><name pos:line="486" pos:column="57">view</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="486" pos:column="64">kWindowStructureRgn</name></expr></argument>, <argument><expr><op:operator pos:line="486" pos:column="85">&amp;</op:operator><name pos:line="486" pos:column="86">global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="487" pos:column="17">MacPoint</name></type> <name pos:line="487" pos:column="26">pt</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="488" pos:column="17">pt</name><op:operator pos:line="488" pos:column="19">.</op:operator><name pos:line="488" pos:column="20">h</name></name> <op:operator pos:line="488" pos:column="22">=</op:operator> <op:operator pos:line="488" pos:column="24">(</op:operator><name pos:line="488" pos:column="25">short</name><op:operator pos:line="488" pos:column="30">)</op:operator> <name><name pos:line="488" pos:column="32">where</name><op:operator pos:line="488" pos:column="37">.</op:operator><name pos:line="488" pos:column="38">x</name></name> <op:operator pos:line="488" pos:column="40">+</op:operator> <name><name pos:line="488" pos:column="42">global</name><op:operator pos:line="488" pos:column="48">.</op:operator><name pos:line="488" pos:column="49">left</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="489" pos:column="17">pt</name><op:operator pos:line="489" pos:column="19">.</op:operator><name pos:line="489" pos:column="20">v</name></name> <op:operator pos:line="489" pos:column="22">=</op:operator> <op:operator pos:line="489" pos:column="24">(</op:operator><name pos:line="489" pos:column="25">short</name><op:operator pos:line="489" pos:column="30">)</op:operator> <name><name pos:line="489" pos:column="32">where</name><op:operator pos:line="489" pos:column="37">.</op:operator><name pos:line="489" pos:column="38">y</name></name> <op:operator pos:line="489" pos:column="40">+</op:operator> <name><name pos:line="489" pos:column="42">global</name><op:operator pos:line="489" pos:column="48">.</op:operator><name pos:line="489" pos:column="49">top</name></name></expr>;</expr_stmt>

		<comment type="line" pos:line="491" pos:column="17">// set the result</comment>
		<expr_stmt><expr><name pos:line="492" pos:column="17">err</name> <op:operator pos:line="492" pos:column="21">=</op:operator> <call><name><op:operator pos:line="492" pos:column="23">::</op:operator><name pos:line="492" pos:column="25">SetEventParameter</name></name> <argument_list pos:line="492" pos:column="43">(<argument><expr><name pos:line="492" pos:column="44">inEvent</name></expr></argument>, <argument><expr><name pos:line="492" pos:column="53">kEventParamTextInputReplyPoint</name></expr></argument>, <argument><expr><name pos:line="492" pos:column="85">typeQDPoint</name></expr></argument>, <argument><expr><sizeof pos:line="492" pos:column="98">sizeof <argument_list pos:line="492" pos:column="105">(<argument><expr><name pos:line="492" pos:column="106">MacPoint</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="492" pos:column="117">&amp;</op:operator><name pos:line="492" pos:column="118">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:line="493" pos:column="1">#<cpp:directive pos:line="493" pos:column="2">if</cpp:directive> <expr><name pos:line="493" pos:column="5">LOG_TSM</name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="494" pos:column="17">fprintf</name> <argument_list pos:line="494" pos:column="25">(<argument><expr><name pos:line="494" pos:column="26">logFile</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="494" pos:column="35">"kEventTextInputOffsetToPos:\n"</lit:literal>
						 <lit:literal type="string" pos:line="495" pos:column="50">"  Offset: %ld\n"</lit:literal>
						 <lit:literal type="string" pos:line="496" pos:column="50">"  Pos: %ld:%ld (orig = %ld:%ld)\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="496" pos:column="87">offset</name></expr></argument>, 
						 <argument><expr><op:operator pos:line="497" pos:column="50">(</op:operator><name pos:line="497" pos:column="51">long</name><op:operator pos:line="497" pos:column="55">)</op:operator> <name><name pos:line="497" pos:column="57">pt</name><op:operator pos:line="497" pos:column="59">.</op:operator><name pos:line="497" pos:column="60">h</name></name></expr></argument>, <argument><expr><op:operator pos:line="497" pos:column="63">(</op:operator><name pos:line="497" pos:column="64">long</name><op:operator pos:line="497" pos:column="68">)</op:operator> <name><name pos:line="497" pos:column="70">pt</name><op:operator pos:line="497" pos:column="72">.</op:operator><name pos:line="497" pos:column="73">v</name></name></expr></argument>,
						 <argument><expr><op:operator pos:line="498" pos:column="50">(</op:operator><name pos:line="498" pos:column="51">long</name><op:operator pos:line="498" pos:column="55">)</op:operator> <name><name pos:line="498" pos:column="57">where</name><op:operator pos:line="498" pos:column="62">.</op:operator><name pos:line="498" pos:column="63">x</name></name></expr></argument>, <argument><expr><op:operator pos:line="498" pos:column="66">(</op:operator><name pos:line="498" pos:column="67">long</name><op:operator pos:line="498" pos:column="71">)</op:operator> <name><name pos:line="498" pos:column="73">where</name><op:operator pos:line="498" pos:column="78">.</op:operator><name pos:line="498" pos:column="79">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="499" pos:column="17">fflush</name> <argument_list pos:line="499" pos:column="24">(<argument><expr><name pos:line="499" pos:column="25">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="500" pos:column="1">#<cpp:directive pos:line="500" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<return pos:line="502" pos:column="9">return <expr><name pos:line="502" pos:column="16">err</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="505" pos:column="1">static</specifier> <name pos:line="505" pos:column="8">OSErr</name></type> <name pos:line="505" pos:column="14">handleTSMPos2Offset</name> <parameter_list pos:line="505" pos:column="34">(<param><decl><type><name pos:line="505" pos:column="35">TSMData</name><type:modifier pos:line="505" pos:column="42">*</type:modifier></type> <name pos:line="505" pos:column="44">data</name></decl></param>, <param><decl><type><name pos:line="505" pos:column="50">EventRef</name></type> <name pos:line="505" pos:column="59">inEvent</name></decl></param>)</parameter_list>
<block pos:line="506" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="507" pos:column="9">MacPoint</name></type>		<name pos:line="507" pos:column="33">qdPosition</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="508" pos:column="9">long</name></type>			<name pos:line="508" pos:column="33">offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="509" pos:column="9">short</name></type>			<name pos:line="509" pos:column="33">regionClass</name></decl>;</decl_stmt>
	
	<comment type="line" pos:line="511" pos:column="9">// retrieve the global point to convert</comment>
	<decl_stmt><decl><type><name pos:line="512" pos:column="9">OSStatus</name></type> <name pos:line="512" pos:column="18">err</name> <init pos:line="512" pos:column="22">= <expr><call><name><op:operator pos:line="512" pos:column="24">::</op:operator><name pos:line="512" pos:column="26">GetEventParameter</name></name> <argument_list pos:line="512" pos:column="44">(<argument><expr><name pos:line="512" pos:column="45">inEvent</name></expr></argument>, <argument><expr><name pos:line="512" pos:column="54">kEventParamTextInputSendCurrentPoint</name></expr></argument>,
										<argument><expr><name pos:line="513" pos:column="81">typeQDPoint</name></expr></argument>, <argument><expr><name pos:line="513" pos:column="94">NULL</name></expr></argument>, <argument><expr><sizeof pos:line="513" pos:column="100">sizeof <argument_list pos:line="513" pos:column="107">(<argument><expr><name pos:line="513" pos:column="108">MacPoint</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="513" pos:column="119">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="513" pos:column="125">&amp;</op:operator><name pos:line="513" pos:column="126">qdPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="514" pos:column="9">if <condition pos:line="514" pos:column="12">(<expr><name pos:line="514" pos:column="13">noErr</name> <op:operator pos:line="514" pos:column="19">==</op:operator> <name pos:line="514" pos:column="22">err</name></expr>)</condition><then pos:line="514" pos:column="26">
	<block pos:line="515" pos:column="9">{
<cpp:if pos:line="516" pos:column="1">#<cpp:directive pos:line="516" pos:column="2">if</cpp:directive> <expr><name pos:line="516" pos:column="5">LOG_TSM</name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="517" pos:column="17">fprintf</name> <argument_list pos:line="517" pos:column="25">(<argument><expr><name pos:line="517" pos:column="26">logFile</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="517" pos:column="35">"kEventTextInputPosToOffset:\n"</lit:literal>
						 <lit:literal type="string" pos:line="518" pos:column="50">"  Pos: %ld:%ld\n"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="518" pos:column="70">(</op:operator><name pos:line="518" pos:column="71">long</name><op:operator pos:line="518" pos:column="75">)</op:operator> <name><name pos:line="518" pos:column="77">qdPosition</name><op:operator pos:line="518" pos:column="87">.</op:operator><name pos:line="518" pos:column="88">v</name></name></expr></argument>, <argument><expr><op:operator pos:line="518" pos:column="91">(</op:operator><name pos:line="518" pos:column="92">long</name><op:operator pos:line="518" pos:column="96">)</op:operator> <name><name pos:line="518" pos:column="98">qdPosition</name><op:operator pos:line="518" pos:column="108">.</op:operator><name pos:line="518" pos:column="109">h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="519" pos:column="17">fflush</name> <argument_list pos:line="519" pos:column="24">(<argument><expr><name pos:line="519" pos:column="25">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="520" pos:column="1">#<cpp:directive pos:line="520" pos:column="2">endif</cpp:directive></cpp:endif>
		<comment type="line" pos:line="521" pos:column="17">// convert to local coordinates</comment>
		<decl_stmt><decl><type><name pos:line="522" pos:column="17">HIRect</name></type> <name pos:line="522" pos:column="24">rect</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="523" pos:column="17">rect</name><op:operator pos:line="523" pos:column="21">.</op:operator><name pos:line="523" pos:column="22">origin</name><op:operator pos:line="523" pos:column="28">.</op:operator><name pos:line="523" pos:column="29">x</name></name> <op:operator pos:line="523" pos:column="31">=</op:operator> <name><name pos:line="523" pos:column="33">qdPosition</name><op:operator pos:line="523" pos:column="43">.</op:operator><name pos:line="523" pos:column="44">h</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="524" pos:column="17">rect</name><op:operator pos:line="524" pos:column="21">.</op:operator><name pos:line="524" pos:column="22">origin</name><op:operator pos:line="524" pos:column="28">.</op:operator><name pos:line="524" pos:column="29">y</name></name> <op:operator pos:line="524" pos:column="31">=</op:operator> <name><name pos:line="524" pos:column="33">qdPosition</name><op:operator pos:line="524" pos:column="43">.</op:operator><name pos:line="524" pos:column="44">v</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="525" pos:column="17">rect</name><op:operator pos:line="525" pos:column="21">.</op:operator><name pos:line="525" pos:column="22">size</name><op:operator pos:line="525" pos:column="26">.</op:operator><name pos:line="525" pos:column="27">width</name></name> <op:operator pos:line="525" pos:column="33">=</op:operator>
		<name><name pos:line="526" pos:column="17">rect</name><op:operator pos:line="526" pos:column="21">.</op:operator><name pos:line="526" pos:column="22">size</name><op:operator pos:line="526" pos:column="26">.</op:operator><name pos:line="526" pos:column="27">height</name></name> <op:operator pos:line="526" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="526" pos:column="36">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="527" pos:column="17">::</op:operator><name pos:line="527" pos:column="19">HIViewConvertRect</name></name> <argument_list pos:line="527" pos:column="37">(<argument><expr><op:operator pos:line="527" pos:column="38">&amp;</op:operator><name pos:line="527" pos:column="39">rect</name></expr></argument>, <argument><expr><name pos:line="527" pos:column="45">NULL</name></expr></argument>, <argument><expr><name><name pos:line="527" pos:column="51">data</name><op:operator pos:line="527" pos:column="55">-&gt;</op:operator><name pos:line="527" pos:column="57">view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="529" pos:column="17">// we always report the position to be within the composition;</comment>
		<comment type="line" pos:line="530" pos:column="17">// coords inside the same pane are clipped to the composition,</comment>
		<comment type="line" pos:line="531" pos:column="17">// and if the position is outside, then we deactivate this instance</comment>
		<comment type="line" pos:line="532" pos:column="17">// this leaves the edit open and active so we can edit multiple panes</comment>
		<expr_stmt><expr><name pos:line="533" pos:column="17">regionClass</name> <op:operator pos:line="533" pos:column="29">=</op:operator> <name pos:line="533" pos:column="31">kTSMInsideOfActiveInputArea</name></expr>;</expr_stmt>
		
		<comment type="line" pos:line="535" pos:column="17">// compute the offset (relative value)</comment>
		<expr_stmt><expr><name pos:line="536" pos:column="17">offset</name> <op:operator pos:line="536" pos:column="24">=</op:operator> <call><name><name pos:line="536" pos:column="26">data</name><op:operator pos:line="536" pos:column="30">-&gt;</op:operator><name pos:line="536" pos:column="32">scintilla</name><op:operator pos:line="536" pos:column="41">-&gt;</op:operator><name pos:line="536" pos:column="43">WndProc</name></name> <argument_list pos:line="536" pos:column="51">(<argument><expr><name pos:line="536" pos:column="52">SCI_POSITIONFROMPOINTCLOSE</name></expr></argument>, <argument><expr><op:operator pos:line="536" pos:column="80">(</op:operator><name pos:line="536" pos:column="81">uptr_t</name><op:operator pos:line="536" pos:column="87">)</op:operator> <name><name pos:line="536" pos:column="89">rect</name><op:operator pos:line="536" pos:column="93">.</op:operator><name pos:line="536" pos:column="94">origin</name><op:operator pos:line="536" pos:column="100">.</op:operator><name pos:line="536" pos:column="101">x</name></name></expr></argument>, <argument><expr><op:operator pos:line="536" pos:column="104">(</op:operator><name pos:line="536" pos:column="105">sptr_t</name><op:operator pos:line="536" pos:column="111">)</op:operator> <name><name pos:line="536" pos:column="113">rect</name><op:operator pos:line="536" pos:column="117">.</op:operator><name pos:line="536" pos:column="118">origin</name><op:operator pos:line="536" pos:column="124">.</op:operator><name pos:line="536" pos:column="125">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="537" pos:column="17">if <condition pos:line="537" pos:column="20">(<expr><name pos:line="537" pos:column="21">offset</name> <op:operator pos:line="537" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="537" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="537" pos:column="33">
		<block pos:line="538" pos:column="17">{
			<comment type="line" pos:line="539" pos:column="25">// convert to a UTF-16 offset (Brute Force)</comment>
			<decl_stmt><decl><type><name pos:line="540" pos:column="25">char</name><type:modifier pos:line="540" pos:column="29">*</type:modifier></type> <name pos:line="540" pos:column="31">buf</name> <init pos:line="540" pos:column="35">= <expr><call><name pos:line="540" pos:column="37">getTextPortion</name> <argument_list pos:line="540" pos:column="52">(<argument><expr><name pos:line="540" pos:column="53">data</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="540" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><name pos:line="540" pos:column="62">offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="541" pos:column="25">offset</name> <op:operator pos:line="541" pos:column="32">=</op:operator> <call><name pos:line="541" pos:column="34">UCS2Length</name> <argument_list pos:line="541" pos:column="45">(<argument><expr><name pos:line="541" pos:column="46">buf</name></expr></argument>, <argument><expr><name pos:line="541" pos:column="51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="542" pos:column="25">delete</op:operator> <index pos:line="542" pos:column="32">[]</index> <name pos:line="542" pos:column="35">buf</name></expr>;</expr_stmt>
			
<cpp:if pos:line="544" pos:column="1">#<cpp:directive pos:line="544" pos:column="2">if</cpp:directive> <expr><name pos:line="544" pos:column="5">LOG_TSM</name></expr></cpp:if>
			<expr_stmt><expr><call><name pos:line="545" pos:column="25">fprintf</name> <argument_list pos:line="545" pos:column="33">(<argument><expr><name pos:line="545" pos:column="34">logFile</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="545" pos:column="43">"  Offset: %ld (class %ld)\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="545" pos:column="74">offset</name></expr></argument>, <argument><expr><op:operator pos:line="545" pos:column="82">(</op:operator><name pos:line="545" pos:column="83">long</name><op:operator pos:line="545" pos:column="87">)</op:operator> <name pos:line="545" pos:column="89">regionClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="546" pos:column="25">fflush</name> <argument_list pos:line="546" pos:column="32">(<argument><expr><name pos:line="546" pos:column="33">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="547" pos:column="1">#<cpp:directive pos:line="547" pos:column="2">endif</cpp:directive></cpp:endif>
			<comment type="line" pos:line="548" pos:column="25">// store the offset</comment>
			<expr_stmt><expr><name pos:line="549" pos:column="25">err</name> <op:operator pos:line="549" pos:column="29">=</op:operator> <call><name><op:operator pos:line="549" pos:column="31">::</op:operator><name pos:line="549" pos:column="33">SetEventParameter</name></name> <argument_list pos:line="549" pos:column="51">(<argument><expr><name pos:line="549" pos:column="52">inEvent</name></expr></argument>, <argument><expr><name pos:line="549" pos:column="61">kEventParamTextInputReplyTextOffset</name></expr></argument>, <argument><expr><name pos:line="549" pos:column="98">typeLongInteger</name></expr></argument>, <argument><expr><sizeof pos:line="549" pos:column="115">sizeof <argument_list pos:line="549" pos:column="122">(<argument><expr><name pos:line="549" pos:column="123">long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="549" pos:column="130">&amp;</op:operator><name pos:line="549" pos:column="131">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="550" pos:column="25">if <condition pos:line="550" pos:column="28">(<expr><name pos:line="550" pos:column="29">noErr</name> <op:operator pos:line="550" pos:column="35">==</op:operator> <name pos:line="550" pos:column="38">err</name></expr>)</condition><then pos:line="550" pos:column="42">
				<expr_stmt><expr><name pos:line="551" pos:column="33">err</name> <op:operator pos:line="551" pos:column="37">=</op:operator> <call><name><op:operator pos:line="551" pos:column="39">::</op:operator><name pos:line="551" pos:column="41">SetEventParameter</name></name> <argument_list pos:line="551" pos:column="59">(<argument><expr><name pos:line="551" pos:column="60">inEvent</name></expr></argument>, <argument><expr><name pos:line="551" pos:column="69">kEventParamTextInputReplyRegionClass</name></expr></argument>, <argument><expr><name pos:line="551" pos:column="107">typeShortInteger</name></expr></argument>, <argument><expr><sizeof pos:line="551" pos:column="125">sizeof <argument_list pos:line="551" pos:column="132">(<argument><expr><name pos:line="551" pos:column="133">short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="551" pos:column="141">&amp;</op:operator><name pos:line="551" pos:column="142">regionClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then>
		<else pos:line="553" pos:column="17">else
		<block pos:line="554" pos:column="17">{
			<comment type="line" pos:line="555" pos:column="25">// not this pane!</comment>
			<expr_stmt><expr><name pos:line="556" pos:column="25">err</name> <op:operator pos:line="556" pos:column="29">=</op:operator> <name pos:line="556" pos:column="31">eventNotHandledErr</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="557" pos:column="25">ExtInput</name><op:operator pos:line="557" pos:column="33">::</op:operator><name pos:line="557" pos:column="35">activate</name></name> <argument_list pos:line="557" pos:column="44">(<argument><expr><name><name pos:line="557" pos:column="45">data</name><op:operator pos:line="557" pos:column="49">-&gt;</op:operator><name pos:line="557" pos:column="51">view</name></name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="557" pos:column="57">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
			
	}</block></then></if>
	<return pos:line="561" pos:column="9">return <expr><name pos:line="561" pos:column="16">err</name></expr>;</return>	
}</block></function>

<function><type><specifier pos:line="564" pos:column="1">static</specifier> <name pos:line="564" pos:column="8">OSErr</name></type> <name pos:line="564" pos:column="14">handleTSMGetText</name> <parameter_list pos:line="564" pos:column="31">(<param><decl><type><name pos:line="564" pos:column="32">TSMData</name><type:modifier pos:line="564" pos:column="39">*</type:modifier></type> <name pos:line="564" pos:column="41">data</name></decl></param>, <param><decl><type><name pos:line="564" pos:column="47">EventRef</name></type> <name pos:line="564" pos:column="56">inEvent</name></decl></param>)</parameter_list>
<block pos:line="565" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="566" pos:column="9">char</name><type:modifier pos:line="566" pos:column="13">*</type:modifier></type> <name pos:line="566" pos:column="15">buf</name> <init pos:line="566" pos:column="19">= <expr><call><name pos:line="566" pos:column="21">getTextPortion</name> <argument_list pos:line="566" pos:column="36">(<argument><expr><name pos:line="566" pos:column="37">data</name></expr></argument>, <argument><expr><name><name pos:line="566" pos:column="43">data</name><op:operator pos:line="566" pos:column="47">-&gt;</op:operator><name pos:line="566" pos:column="49">selStart</name></name></expr></argument>, <argument><expr><name><name pos:line="566" pos:column="59">data</name><op:operator pos:line="566" pos:column="63">-&gt;</op:operator><name pos:line="566" pos:column="65">selLength</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
<cpp:if pos:line="568" pos:column="1">#<cpp:directive pos:line="568" pos:column="2">if</cpp:directive> <expr><name pos:line="568" pos:column="5">LOG_TSM</name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="569" pos:column="17">fprintf</name> <argument_list pos:line="569" pos:column="25">(<argument><expr><name pos:line="569" pos:column="26">logFile</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="569" pos:column="35">"kEventTextInputGetSelectedText:\n"</lit:literal>
						  <lit:literal type="string" pos:line="570" pos:column="51">"  Text: \"%s\"\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="570" pos:column="71">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="571" pos:column="17">fflush</name> <argument_list pos:line="571" pos:column="24">(<argument><expr><name pos:line="571" pos:column="25">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="572" pos:column="1">#<cpp:directive pos:line="572" pos:column="2">endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name pos:line="573" pos:column="9">OSStatus</name></type> <name pos:line="573" pos:column="18">status</name> <init pos:line="573" pos:column="25">= <expr><call><name><op:operator pos:line="573" pos:column="27">::</op:operator><name pos:line="573" pos:column="29">SetEventParameter</name></name> <argument_list pos:line="573" pos:column="47">(<argument><expr><name pos:line="573" pos:column="48">inEvent</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="57">kEventParamTextInputReplyText</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="88">typeUTF8Text</name></expr></argument>, <argument><expr><name><name pos:line="573" pos:column="102">data</name><op:operator pos:line="573" pos:column="106">-&gt;</op:operator><name pos:line="573" pos:column="108">selLength</name></name></expr></argument>, <argument><expr><name pos:line="573" pos:column="119">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="574" pos:column="9">delete</op:operator> <index pos:line="574" pos:column="16">[]</index> <name pos:line="574" pos:column="19">buf</name></expr>;</expr_stmt>
	<return pos:line="575" pos:column="9">return <expr><name pos:line="575" pos:column="16">status</name></expr>;</return>
}</block></function>		

<function><type><specifier pos:line="578" pos:column="1">static</specifier> <name pos:line="578" pos:column="8">pascal</name> <name pos:line="578" pos:column="15">OSStatus</name></type> <name pos:line="578" pos:column="24">doHandleTSM</name> <parameter_list pos:line="578" pos:column="36">(<param><decl><type><name pos:line="578" pos:column="37">EventHandlerCallRef</name></type></decl></param>, <param><decl><type><name pos:line="578" pos:column="58">EventRef</name></type> <name pos:line="578" pos:column="67">inEvent</name></decl></param>, <param><decl><type><name pos:line="578" pos:column="76">void</name><type:modifier pos:line="578" pos:column="80">*</type:modifier></type> <name pos:line="578" pos:column="82">userData</name></decl></param>)</parameter_list>
<block pos:line="579" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="580" pos:column="9">TSMData</name><type:modifier pos:line="580" pos:column="16">*</type:modifier></type> <name pos:line="580" pos:column="18">data</name> <init pos:line="580" pos:column="23">= <expr><op:operator pos:line="580" pos:column="25">(</op:operator><name pos:line="580" pos:column="26">TSMData</name><op:operator pos:line="580" pos:column="33">*</op:operator><op:operator pos:line="580" pos:column="34">)</op:operator> <name pos:line="580" pos:column="36">userData</name></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="582" pos:column="9">OSStatus</name></type> <name pos:line="582" pos:column="18">err</name> <init pos:line="582" pos:column="22">= <expr><name pos:line="582" pos:column="24">eventNotHandledErr</name></expr></init></decl>;</decl_stmt>

	<switch pos:line="584" pos:column="9">switch <condition pos:line="584" pos:column="16">(<expr><call><name><op:operator pos:line="584" pos:column="17">::</op:operator><name pos:line="584" pos:column="19">GetEventKind</name></name> <argument_list pos:line="584" pos:column="32">(<argument><expr><name pos:line="584" pos:column="33">inEvent</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block pos:line="585" pos:column="9">{
		<case pos:line="586" pos:column="17">case <expr><name pos:line="586" pos:column="22">kEventTextInputUpdateActiveInputArea</name></expr>:
			<comment type="line" pos:line="587" pos:column="25">// Make sure that input has been started</comment>
			<expr_stmt><expr><call><name pos:line="588" pos:column="25">startInput</name> <argument_list pos:line="588" pos:column="36">(<argument><expr><name pos:line="588" pos:column="37">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="589" pos:column="25">err</name> <op:operator pos:line="589" pos:column="29">=</op:operator> <call><name pos:line="589" pos:column="31">handleTSMUpdateActiveInputArea</name> <argument_list pos:line="589" pos:column="62">(<argument><expr><name pos:line="589" pos:column="63">data</name></expr></argument>, <argument><expr><name pos:line="589" pos:column="69">inEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="590" pos:column="25">break;</break>
<comment type="line" pos:line="591" pos:column="1">//		case kEventTextInputUnicodeForKeyEvent:</comment>
<comment type="line" pos:line="592" pos:column="1">//			err = handleTSMUnicodeInput (inEvent);</comment>
<comment type="line" pos:line="593" pos:column="1">//			break;</comment>
		</case><case pos:line="594" pos:column="17">case <expr><name pos:line="594" pos:column="22">kEventTextInputOffsetToPos</name></expr>:
			<expr_stmt><expr><name pos:line="595" pos:column="25">err</name> <op:operator pos:line="595" pos:column="29">=</op:operator> <call><name pos:line="595" pos:column="31">handleTSMOffset2Pos</name> <argument_list pos:line="595" pos:column="51">(<argument><expr><name pos:line="595" pos:column="52">data</name></expr></argument>, <argument><expr><name pos:line="595" pos:column="58">inEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="596" pos:column="25">break;</break>
		</case><case pos:line="597" pos:column="17">case <expr><name pos:line="597" pos:column="22">kEventTextInputPosToOffset</name></expr>:
			<expr_stmt><expr><name pos:line="598" pos:column="25">err</name> <op:operator pos:line="598" pos:column="29">=</op:operator> <call><name pos:line="598" pos:column="31">handleTSMPos2Offset</name> <argument_list pos:line="598" pos:column="51">(<argument><expr><name pos:line="598" pos:column="52">data</name></expr></argument>, <argument><expr><name pos:line="598" pos:column="58">inEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="599" pos:column="25">break;</break>
		</case><case pos:line="600" pos:column="17">case <expr><name pos:line="600" pos:column="22">kEventTextInputGetSelectedText</name></expr>:
			<comment type="line" pos:line="601" pos:column="25">// Make sure that input has been started</comment>
			<expr_stmt><expr><call><name pos:line="602" pos:column="25">startInput</name> <argument_list pos:line="602" pos:column="36">(<argument><expr><name pos:line="602" pos:column="37">data</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="602" pos:column="43">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="603" pos:column="25">err</name> <op:operator pos:line="603" pos:column="29">=</op:operator> <call><name pos:line="603" pos:column="31">handleTSMGetText</name> <argument_list pos:line="603" pos:column="48">(<argument><expr><name pos:line="603" pos:column="49">data</name></expr></argument>, <argument><expr><name pos:line="603" pos:column="55">inEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="604" pos:column="25">break;</break>
	</case>}</block></switch>
	<return pos:line="606" pos:column="9">return <expr><name pos:line="606" pos:column="16">err</name></expr>;</return>
}</block></function>

</unit>
