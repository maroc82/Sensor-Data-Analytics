<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexHaskell.cxx" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/******************************************************************
 *    LexHaskell.cxx
 *
 *    A haskell lexer for the scintilla code control.
 *    Some stuff "lended" from LexPython.cxx and LexCPP.cxx.
 *    External lexer stuff inspired from the caml external lexer.
 *
 *    Written by Tobias Engvall - tumm at dtek dot chalmers dot se
 *
 *    Several bug fixes by Krasimir Angelov - kr.angelov at gmail.com
 *
 *    TODO:
 *    * Implement a folder :)
 *    * Nice Character-lexing (stuff inside '\''), LexPython has
 *      this.
 *
 *
 *****************************************************************/</comment>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file pos:line="24" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file pos:line="25" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">ifdef</cpp:directive> <name pos:line="39" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="40" pos:column="1">using namespace <name pos:line="40" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef</cpp:directive> <name pos:line="43" pos:column="8">BUILD_AS_EXTERNAL_LEXER</name></cpp:ifdef>

<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"ExternalLexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="46" pos:column="10">"WindowAccessor.h"</lit:literal></cpp:file></cpp:include>

<cpp:define pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="48" pos:column="9">BUILD_EXTERNAL_LEXER</name></cpp:macro> <cpp:value pos:line="48" pos:column="30">0</cpp:value></cpp:define>

<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="52" pos:column="9">HA_MODE_DEFAULT</name></cpp:macro>     <cpp:value pos:line="52" pos:column="29">0</cpp:value></cpp:define>
<cpp:define pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="53" pos:column="9">HA_MODE_IMPORT1</name></cpp:macro>     <cpp:value pos:line="53" pos:column="29">1</cpp:value></cpp:define>
<cpp:define pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="54" pos:column="9">HA_MODE_IMPORT2</name></cpp:macro>     <cpp:value pos:line="54" pos:column="29">2</cpp:value></cpp:define>
<cpp:define pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="55" pos:column="9">HA_MODE_IMPORT3</name></cpp:macro>     <cpp:value pos:line="55" pos:column="29">3</cpp:value></cpp:define>
<cpp:define pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="9">HA_MODE_MODULE</name></cpp:macro>      <cpp:value pos:line="56" pos:column="29">4</cpp:value></cpp:define>
<cpp:define pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="57" pos:column="9">HA_MODE_FFI</name></cpp:macro>         <cpp:value pos:line="57" pos:column="29">5</cpp:value></cpp:define>
<cpp:define pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="58" pos:column="9">HA_MODE_TYPE</name></cpp:macro>        <cpp:value pos:line="58" pos:column="29">6</cpp:value></cpp:define>

<function><type><specifier pos:line="60" pos:column="1">static</specifier> <specifier pos:line="60" pos:column="8">inline</specifier> <name pos:line="60" pos:column="15">bool</name></type> <name pos:line="60" pos:column="20">IsNewline</name><parameter_list pos:line="60" pos:column="29">(<param><decl><type><specifier pos:line="60" pos:column="30">const</specifier> <name pos:line="60" pos:column="36">int</name></type> <name pos:line="60" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="44">{
   <return pos:line="61" pos:column="4">return <expr><op:operator pos:line="61" pos:column="11">(</op:operator><name pos:line="61" pos:column="12">ch</name> <op:operator pos:line="61" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="18">'\n'</lit:literal> <op:operator pos:line="61" pos:column="23">||</op:operator> <name pos:line="61" pos:column="26">ch</name> <op:operator pos:line="61" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="32">'\r'</lit:literal><op:operator pos:line="61" pos:column="36">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="64" pos:column="1">static</specifier> <specifier pos:line="64" pos:column="8">inline</specifier> <name pos:line="64" pos:column="15">bool</name></type> <name pos:line="64" pos:column="20">IsWhitespace</name><parameter_list pos:line="64" pos:column="32">(<param><decl><type><specifier pos:line="64" pos:column="33">const</specifier> <name pos:line="64" pos:column="39">int</name></type> <name pos:line="64" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="47">{
   <return pos:line="65" pos:column="4">return <expr><op:operator pos:line="65" pos:column="11">(</op:operator>  <name pos:line="65" pos:column="14">ch</name> <op:operator pos:line="65" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="20">' '</lit:literal>
          <op:operator pos:line="66" pos:column="11">||</op:operator> <name pos:line="66" pos:column="14">ch</name> <op:operator pos:line="66" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="20">'\t'</lit:literal>
          <op:operator pos:line="67" pos:column="11">||</op:operator> <call><name pos:line="67" pos:column="14">IsNewline</name><argument_list pos:line="67" pos:column="23">(<argument><expr><name pos:line="67" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="28">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="70" pos:column="1">static</specifier> <specifier pos:line="70" pos:column="8">inline</specifier> <name pos:line="70" pos:column="15">bool</name></type> <name pos:line="70" pos:column="20">IsAWordStart</name><parameter_list pos:line="70" pos:column="32">(<param><decl><type><specifier pos:line="70" pos:column="33">const</specifier> <name pos:line="70" pos:column="39">int</name></type> <name pos:line="70" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="47">{
   <return pos:line="71" pos:column="4">return <expr><op:operator pos:line="71" pos:column="11">(</op:operator><name pos:line="71" pos:column="12">ch</name> <op:operator pos:line="71" pos:column="15">&lt;</op:operator> <lit:literal type="number" pos:line="71" pos:column="17">0x80</lit:literal><op:operator pos:line="71" pos:column="21">)</op:operator> <op:operator pos:line="71" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="71" pos:column="26">(</op:operator><call><name pos:line="71" pos:column="27">isalnum</name><argument_list pos:line="71" pos:column="34">(<argument><expr><name pos:line="71" pos:column="35">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="71" pos:column="39">||</op:operator> <name pos:line="71" pos:column="42">ch</name> <op:operator pos:line="71" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="71" pos:column="48">'_'</lit:literal><op:operator pos:line="71" pos:column="51">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="74" pos:column="1">static</specifier> <specifier pos:line="74" pos:column="8">inline</specifier> <name pos:line="74" pos:column="15">bool</name></type> <name pos:line="74" pos:column="20">IsAWordChar</name><parameter_list pos:line="74" pos:column="31">(<param><decl><type><specifier pos:line="74" pos:column="32">const</specifier> <name pos:line="74" pos:column="38">int</name></type> <name pos:line="74" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="74" pos:column="46">{
   <return pos:line="75" pos:column="4">return <expr><op:operator pos:line="75" pos:column="11">(</op:operator><name pos:line="75" pos:column="12">ch</name> <op:operator pos:line="75" pos:column="15">&lt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="17">0x80</lit:literal><op:operator pos:line="75" pos:column="21">)</op:operator> <op:operator pos:line="75" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="75" pos:column="26">(</op:operator><call><name pos:line="75" pos:column="27">isalnum</name><argument_list pos:line="75" pos:column="34">(<argument><expr><name pos:line="75" pos:column="35">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="75" pos:column="39">||</op:operator> <name pos:line="75" pos:column="42">ch</name> <op:operator pos:line="75" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="48">'.'</lit:literal> <op:operator pos:line="75" pos:column="52">||</op:operator> <name pos:line="75" pos:column="55">ch</name> <op:operator pos:line="75" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="61">'_'</lit:literal> <op:operator pos:line="75" pos:column="65">||</op:operator> <name pos:line="75" pos:column="68">ch</name> <op:operator pos:line="75" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="74">'\''</lit:literal><op:operator pos:line="75" pos:column="78">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="78" pos:column="1">static</specifier> <name pos:line="78" pos:column="8">void</name></type> <name pos:line="78" pos:column="13">ColorizeHaskellDoc</name><parameter_list pos:line="78" pos:column="31">(<param><decl><type><name pos:line="78" pos:column="32">unsigned</name> <name pos:line="78" pos:column="41">int</name></type> <name pos:line="78" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="55">int</name></type> <name pos:line="78" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="67">int</name></type> <name pos:line="78" pos:column="71">initStyle</name></decl></param>,
                               <param><decl><type><name pos:line="79" pos:column="32">WordList</name> <type:modifier pos:line="79" pos:column="41">*</type:modifier></type><name><name pos:line="79" pos:column="42">keywordlists</name><index pos:line="79" pos:column="54">[]</index></name></decl></param>, <param><decl><type><name pos:line="79" pos:column="58">Accessor</name> <type:modifier pos:line="79" pos:column="67">&amp;</type:modifier></type><name pos:line="79" pos:column="68">styler</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="76">{

   <decl_stmt><decl><type><name pos:line="81" pos:column="4">WordList</name> <type:modifier pos:line="81" pos:column="13">&amp;</type:modifier></type><name pos:line="81" pos:column="14">keywords</name> <init pos:line="81" pos:column="23">= <expr><op:operator pos:line="81" pos:column="25">*</op:operator><name><name pos:line="81" pos:column="26">keywordlists</name><index pos:line="81" pos:column="38">[<expr><lit:literal type="number" pos:line="81" pos:column="39">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name pos:line="82" pos:column="4">WordList</name> <type:modifier pos:line="82" pos:column="13">&amp;</type:modifier></type><name pos:line="82" pos:column="14">ffi</name>      <init pos:line="82" pos:column="23">= <expr><op:operator pos:line="82" pos:column="25">*</op:operator><name><name pos:line="82" pos:column="26">keywordlists</name><index pos:line="82" pos:column="38">[<expr><lit:literal type="number" pos:line="82" pos:column="39">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

   <function_decl><type><name pos:line="84" pos:column="4">StyleContext</name></type> <name pos:line="84" pos:column="17">sc</name><parameter_list pos:line="84" pos:column="19">(<param><decl><type><name pos:line="84" pos:column="20">startPos</name></type></decl></param>, <param><decl><type><name pos:line="84" pos:column="30">length</name></type></decl></param>, <param><decl><type><name pos:line="84" pos:column="38">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="84" pos:column="49">styler</name></type></decl></param>)</parameter_list>;</function_decl>

   <decl_stmt><decl><type><name pos:line="86" pos:column="4">int</name></type> <name pos:line="86" pos:column="8">lineCurrent</name> <init pos:line="86" pos:column="20">= <expr><call><name><name pos:line="86" pos:column="22">styler</name><op:operator pos:line="86" pos:column="28">.</op:operator><name pos:line="86" pos:column="29">GetLine</name></name><argument_list pos:line="86" pos:column="36">(<argument><expr><name pos:line="86" pos:column="37">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name pos:line="87" pos:column="4">int</name></type> <name pos:line="87" pos:column="8">state</name> <init pos:line="87" pos:column="14">= <expr><name pos:line="87" pos:column="16">lineCurrent</name> <op:operator pos:line="87" pos:column="28">?</op:operator> <call><name><name pos:line="87" pos:column="30">styler</name><op:operator pos:line="87" pos:column="36">.</op:operator><name pos:line="87" pos:column="37">GetLineState</name></name><argument_list pos:line="87" pos:column="49">(<argument><expr><name pos:line="87" pos:column="50">lineCurrent</name><op:operator pos:line="87" pos:column="61">-</op:operator><lit:literal type="number" pos:line="87" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call>
                           <op:operator pos:line="88" pos:column="28">:</op:operator> <name pos:line="88" pos:column="30">HA_MODE_DEFAULT</name></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name pos:line="89" pos:column="4">int</name></type> <name pos:line="89" pos:column="8">mode</name>  <init pos:line="89" pos:column="14">= <expr><name pos:line="89" pos:column="16">state</name> <op:operator pos:line="89" pos:column="22">&amp;</op:operator> <lit:literal type="number" pos:line="89" pos:column="24">0xF</lit:literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name pos:line="90" pos:column="4">int</name></type> <name pos:line="90" pos:column="8">xmode</name> <init pos:line="90" pos:column="14">= <expr><name pos:line="90" pos:column="16">state</name> <op:operator pos:line="90" pos:column="22">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="90" pos:column="25">4</lit:literal></expr></init></decl>;</decl_stmt>

   <while pos:line="92" pos:column="4">while <condition pos:line="92" pos:column="10">(<expr><call><name><name pos:line="92" pos:column="11">sc</name><op:operator pos:line="92" pos:column="13">.</op:operator><name pos:line="92" pos:column="14">More</name></name><argument_list pos:line="92" pos:column="18">()</argument_list></call></expr>)</condition> <block pos:line="92" pos:column="22">{
      <comment type="line" pos:line="93" pos:column="7">// Check for state end</comment>

         <comment type="line" pos:line="95" pos:column="10">// Operator</comment>
      <if pos:line="96" pos:column="7">if <condition pos:line="96" pos:column="10">(<expr><name><name pos:line="96" pos:column="11">sc</name><op:operator pos:line="96" pos:column="13">.</op:operator><name pos:line="96" pos:column="14">state</name></name> <op:operator pos:line="96" pos:column="20">==</op:operator> <name pos:line="96" pos:column="23">SCE_HA_OPERATOR</name></expr>)</condition><then pos:line="96" pos:column="39"> <block pos:line="96" pos:column="40">{
         <if pos:line="97" pos:column="10">if <condition pos:line="97" pos:column="13">(<expr><call><name pos:line="97" pos:column="14">isascii</name><argument_list pos:line="97" pos:column="21">(<argument><expr><name><name pos:line="97" pos:column="22">sc</name><op:operator pos:line="97" pos:column="24">.</op:operator><name pos:line="97" pos:column="25">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="97" pos:column="32">isoperator</name><argument_list pos:line="97" pos:column="42">(<argument><expr><call><name><name pos:line="97" pos:column="43">static_cast</name><argument_list pos:line="97" pos:column="54">&lt;<argument><expr><name pos:line="97" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="97" pos:column="60">(<argument><expr><name><name pos:line="97" pos:column="61">sc</name><op:operator pos:line="97" pos:column="63">.</op:operator><name pos:line="97" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="97" pos:column="69"> <block pos:line="97" pos:column="70">{
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">sc</name><op:operator pos:line="98" pos:column="15">.</op:operator><name pos:line="98" pos:column="16">Forward</name></name><argument_list pos:line="98" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="99" pos:column="12">else <block pos:line="99" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">styler</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">ColourTo</name></name><argument_list pos:line="100" pos:column="28">(<argument><expr><name><name pos:line="100" pos:column="29">sc</name><op:operator pos:line="100" pos:column="31">.</op:operator><name pos:line="100" pos:column="32">currentPos</name></name> <op:operator pos:line="100" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="100" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="48">sc</name><op:operator pos:line="100" pos:column="50">.</op:operator><name pos:line="100" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">sc</name><op:operator pos:line="101" pos:column="15">.</op:operator><name pos:line="101" pos:column="16">ChangeState</name></name><argument_list pos:line="101" pos:column="27">(<argument><expr><name pos:line="101" pos:column="28">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></else></if>
      }</block></then>
         <comment type="line" pos:line="104" pos:column="10">// String</comment>
      <else pos:line="105" pos:column="7">else <if pos:line="105" pos:column="12">if <condition pos:line="105" pos:column="15">(<expr><name><name pos:line="105" pos:column="16">sc</name><op:operator pos:line="105" pos:column="18">.</op:operator><name pos:line="105" pos:column="19">state</name></name> <op:operator pos:line="105" pos:column="25">==</op:operator> <name pos:line="105" pos:column="28">SCE_HA_STRING</name></expr>)</condition><then pos:line="105" pos:column="42"> <block pos:line="105" pos:column="43">{
         <if pos:line="106" pos:column="10">if <condition pos:line="106" pos:column="13">(<expr><name><name pos:line="106" pos:column="14">sc</name><op:operator pos:line="106" pos:column="16">.</op:operator><name pos:line="106" pos:column="17">ch</name></name> <op:operator pos:line="106" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="106" pos:column="23">'\"'</lit:literal></expr>)</condition><then pos:line="106" pos:column="28"> <block pos:line="106" pos:column="29">{
			<expr_stmt><expr><call><name><name pos:line="107" pos:column="25">sc</name><op:operator pos:line="107" pos:column="27">.</op:operator><name pos:line="107" pos:column="28">Forward</name></name><argument_list pos:line="107" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">styler</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">ColourTo</name></name><argument_list pos:line="108" pos:column="28">(<argument><expr><name><name pos:line="108" pos:column="29">sc</name><op:operator pos:line="108" pos:column="31">.</op:operator><name pos:line="108" pos:column="32">currentPos</name></name><op:operator pos:line="108" pos:column="42">-</op:operator><lit:literal type="number" pos:line="108" pos:column="43">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="46">sc</name><op:operator pos:line="108" pos:column="48">.</op:operator><name pos:line="108" pos:column="49">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">sc</name><op:operator pos:line="109" pos:column="15">.</op:operator><name pos:line="109" pos:column="16">ChangeState</name></name><argument_list pos:line="109" pos:column="27">(<argument><expr><name pos:line="109" pos:column="28">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="110" pos:column="12">else <if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name><name pos:line="110" pos:column="21">sc</name><op:operator pos:line="110" pos:column="23">.</op:operator><name pos:line="110" pos:column="24">ch</name></name> <op:operator pos:line="110" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="110" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="110" pos:column="35"> <block pos:line="110" pos:column="36">{
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">sc</name><op:operator pos:line="111" pos:column="15">.</op:operator><name pos:line="111" pos:column="16">Forward</name></name><argument_list pos:line="111" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="111" pos:column="24">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="112" pos:column="12">else <if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name><name pos:line="112" pos:column="21">sc</name><op:operator pos:line="112" pos:column="23">.</op:operator><name pos:line="112" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="112" pos:column="34"> <block pos:line="112" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="113" pos:column="25">styler</name><op:operator pos:line="113" pos:column="31">.</op:operator><name pos:line="113" pos:column="32">ColourTo</name></name><argument_list pos:line="113" pos:column="40">(<argument><expr><name><name pos:line="113" pos:column="41">sc</name><op:operator pos:line="113" pos:column="43">.</op:operator><name pos:line="113" pos:column="44">currentPos</name></name><op:operator pos:line="113" pos:column="54">-</op:operator><lit:literal type="number" pos:line="113" pos:column="55">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="58">sc</name><op:operator pos:line="113" pos:column="60">.</op:operator><name pos:line="113" pos:column="61">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="114" pos:column="25">sc</name><op:operator pos:line="114" pos:column="27">.</op:operator><name pos:line="114" pos:column="28">ChangeState</name></name><argument_list pos:line="114" pos:column="39">(<argument><expr><name pos:line="114" pos:column="40">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 }</block></then> <else pos:line="115" pos:column="20">else <block pos:line="115" pos:column="25">{
			<expr_stmt><expr><call><name><name pos:line="116" pos:column="25">sc</name><op:operator pos:line="116" pos:column="27">.</op:operator><name pos:line="116" pos:column="28">Forward</name></name><argument_list pos:line="116" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		 }</block></else></if></else></if></else></if>
      }</block></then>
         <comment type="line" pos:line="119" pos:column="10">// Char</comment>
      <else pos:line="120" pos:column="7">else <if pos:line="120" pos:column="12">if <condition pos:line="120" pos:column="15">(<expr><name><name pos:line="120" pos:column="16">sc</name><op:operator pos:line="120" pos:column="18">.</op:operator><name pos:line="120" pos:column="19">state</name></name> <op:operator pos:line="120" pos:column="25">==</op:operator> <name pos:line="120" pos:column="28">SCE_HA_CHARACTER</name></expr>)</condition><then pos:line="120" pos:column="45"> <block pos:line="120" pos:column="46">{
         <if pos:line="121" pos:column="10">if <condition pos:line="121" pos:column="13">(<expr><name><name pos:line="121" pos:column="14">sc</name><op:operator pos:line="121" pos:column="16">.</op:operator><name pos:line="121" pos:column="17">ch</name></name> <op:operator pos:line="121" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="23">'\''</lit:literal></expr>)</condition><then pos:line="121" pos:column="28"> <block pos:line="121" pos:column="29">{
			<expr_stmt><expr><call><name><name pos:line="122" pos:column="25">sc</name><op:operator pos:line="122" pos:column="27">.</op:operator><name pos:line="122" pos:column="28">Forward</name></name><argument_list pos:line="122" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">styler</name><op:operator pos:line="123" pos:column="19">.</op:operator><name pos:line="123" pos:column="20">ColourTo</name></name><argument_list pos:line="123" pos:column="28">(<argument><expr><name><name pos:line="123" pos:column="29">sc</name><op:operator pos:line="123" pos:column="31">.</op:operator><name pos:line="123" pos:column="32">currentPos</name></name><op:operator pos:line="123" pos:column="42">-</op:operator><lit:literal type="number" pos:line="123" pos:column="43">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="46">sc</name><op:operator pos:line="123" pos:column="48">.</op:operator><name pos:line="123" pos:column="49">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">sc</name><op:operator pos:line="124" pos:column="15">.</op:operator><name pos:line="124" pos:column="16">ChangeState</name></name><argument_list pos:line="124" pos:column="27">(<argument><expr><name pos:line="124" pos:column="28">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="125" pos:column="12">else <if pos:line="125" pos:column="17">if <condition pos:line="125" pos:column="20">(<expr><name><name pos:line="125" pos:column="21">sc</name><op:operator pos:line="125" pos:column="23">.</op:operator><name pos:line="125" pos:column="24">ch</name></name> <op:operator pos:line="125" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="125" pos:column="35"> <block pos:line="125" pos:column="36">{
            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">sc</name><op:operator pos:line="126" pos:column="15">.</op:operator><name pos:line="126" pos:column="16">Forward</name></name><argument_list pos:line="126" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="126" pos:column="24">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="127" pos:column="12">else <if pos:line="127" pos:column="17">if <condition pos:line="127" pos:column="20">(<expr><name><name pos:line="127" pos:column="21">sc</name><op:operator pos:line="127" pos:column="23">.</op:operator><name pos:line="127" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="127" pos:column="34"> <block pos:line="127" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="128" pos:column="25">styler</name><op:operator pos:line="128" pos:column="31">.</op:operator><name pos:line="128" pos:column="32">ColourTo</name></name><argument_list pos:line="128" pos:column="40">(<argument><expr><name><name pos:line="128" pos:column="41">sc</name><op:operator pos:line="128" pos:column="43">.</op:operator><name pos:line="128" pos:column="44">currentPos</name></name><op:operator pos:line="128" pos:column="54">-</op:operator><lit:literal type="number" pos:line="128" pos:column="55">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="58">sc</name><op:operator pos:line="128" pos:column="60">.</op:operator><name pos:line="128" pos:column="61">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="129" pos:column="25">sc</name><op:operator pos:line="129" pos:column="27">.</op:operator><name pos:line="129" pos:column="28">ChangeState</name></name><argument_list pos:line="129" pos:column="39">(<argument><expr><name pos:line="129" pos:column="40">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 }</block></then> <else pos:line="130" pos:column="20">else <block pos:line="130" pos:column="25">{
			<expr_stmt><expr><call><name><name pos:line="131" pos:column="25">sc</name><op:operator pos:line="131" pos:column="27">.</op:operator><name pos:line="131" pos:column="28">Forward</name></name><argument_list pos:line="131" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		 }</block></else></if></else></if></else></if>
      }</block></then>
         <comment type="line" pos:line="134" pos:column="10">// Number</comment>
      <else pos:line="135" pos:column="7">else <if pos:line="135" pos:column="12">if <condition pos:line="135" pos:column="15">(<expr><name><name pos:line="135" pos:column="16">sc</name><op:operator pos:line="135" pos:column="18">.</op:operator><name pos:line="135" pos:column="19">state</name></name> <op:operator pos:line="135" pos:column="25">==</op:operator> <name pos:line="135" pos:column="28">SCE_HA_NUMBER</name></expr>)</condition><then pos:line="135" pos:column="42"> <block pos:line="135" pos:column="43">{
         <if pos:line="136" pos:column="10">if <condition pos:line="136" pos:column="13">(<expr><call><name pos:line="136" pos:column="14">IsADigit</name><argument_list pos:line="136" pos:column="22">(<argument><expr><name><name pos:line="136" pos:column="23">sc</name><op:operator pos:line="136" pos:column="25">.</op:operator><name pos:line="136" pos:column="26">ch</name></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="30">xmode</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="136" pos:column="37"> <block pos:line="136" pos:column="38">{
            <expr_stmt><expr><call><name><name pos:line="137" pos:column="13">sc</name><op:operator pos:line="137" pos:column="15">.</op:operator><name pos:line="137" pos:column="16">Forward</name></name><argument_list pos:line="137" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="138" pos:column="12">else <if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><op:operator pos:line="138" pos:column="21">(</op:operator><name pos:line="138" pos:column="22">xmode</name> <op:operator pos:line="138" pos:column="28">==</op:operator> <lit:literal type="number" pos:line="138" pos:column="31">10</lit:literal><op:operator pos:line="138" pos:column="33">)</op:operator> <op:operator pos:line="138" pos:column="35">&amp;&amp;</op:operator>
                    <op:operator pos:line="139" pos:column="21">(</op:operator><name><name pos:line="139" pos:column="22">sc</name><op:operator pos:line="139" pos:column="24">.</op:operator><name pos:line="139" pos:column="25">ch</name></name> <op:operator pos:line="139" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="31">'e'</lit:literal> <op:operator pos:line="139" pos:column="35">||</op:operator> <name><name pos:line="139" pos:column="38">sc</name><op:operator pos:line="139" pos:column="40">.</op:operator><name pos:line="139" pos:column="41">ch</name></name> <op:operator pos:line="139" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="139" pos:column="47">'E'</lit:literal><op:operator pos:line="139" pos:column="50">)</op:operator> <op:operator pos:line="139" pos:column="52">&amp;&amp;</op:operator>
                    <op:operator pos:line="140" pos:column="21">(</op:operator><call><name pos:line="140" pos:column="22">IsADigit</name><argument_list pos:line="140" pos:column="30">(<argument><expr><name><name pos:line="140" pos:column="31">sc</name><op:operator pos:line="140" pos:column="33">.</op:operator><name pos:line="140" pos:column="34">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="140" pos:column="42">||</op:operator> <name><name pos:line="140" pos:column="45">sc</name><op:operator pos:line="140" pos:column="47">.</op:operator><name pos:line="140" pos:column="48">chNext</name></name> <op:operator pos:line="140" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="58">'+'</lit:literal> <op:operator pos:line="140" pos:column="62">||</op:operator> <name><name pos:line="140" pos:column="65">sc</name><op:operator pos:line="140" pos:column="67">.</op:operator><name pos:line="140" pos:column="68">chNext</name></name> <op:operator pos:line="140" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="78">'-'</lit:literal><op:operator pos:line="140" pos:column="81">)</op:operator></expr>)</condition><then pos:line="140" pos:column="83"> <block pos:line="140" pos:column="84">{
			<expr_stmt><expr><call><name><name pos:line="141" pos:column="25">sc</name><op:operator pos:line="141" pos:column="27">.</op:operator><name pos:line="141" pos:column="28">Forward</name></name><argument_list pos:line="141" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="142" pos:column="25">if <condition pos:line="142" pos:column="28">(<expr><name><name pos:line="142" pos:column="29">sc</name><op:operator pos:line="142" pos:column="31">.</op:operator><name pos:line="142" pos:column="32">ch</name></name> <op:operator pos:line="142" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="142" pos:column="38">'+'</lit:literal> <op:operator pos:line="142" pos:column="42">||</op:operator> <name><name pos:line="142" pos:column="45">sc</name><op:operator pos:line="142" pos:column="47">.</op:operator><name pos:line="142" pos:column="48">ch</name></name> <op:operator pos:line="142" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="142" pos:column="54">'-'</lit:literal></expr>)</condition><then pos:line="142" pos:column="58">
				<expr_stmt><expr><call><name><name pos:line="143" pos:column="33">sc</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">Forward</name></name><argument_list pos:line="143" pos:column="43">()</argument_list></call></expr>;</expr_stmt></then></if>
         }</block></then> <else pos:line="144" pos:column="12">else <block pos:line="144" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">styler</name><op:operator pos:line="145" pos:column="19">.</op:operator><name pos:line="145" pos:column="20">ColourTo</name></name><argument_list pos:line="145" pos:column="28">(<argument><expr><name><name pos:line="145" pos:column="29">sc</name><op:operator pos:line="145" pos:column="31">.</op:operator><name pos:line="145" pos:column="32">currentPos</name></name> <op:operator pos:line="145" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="145" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="48">sc</name><op:operator pos:line="145" pos:column="50">.</op:operator><name pos:line="145" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">sc</name><op:operator pos:line="146" pos:column="15">.</op:operator><name pos:line="146" pos:column="16">ChangeState</name></name><argument_list pos:line="146" pos:column="27">(<argument><expr><name pos:line="146" pos:column="28">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></else></if></else></if>
      }</block></then>
         <comment type="line" pos:line="149" pos:column="10">// Identifier</comment>
      <else pos:line="150" pos:column="7">else <if pos:line="150" pos:column="12">if <condition pos:line="150" pos:column="15">(<expr><name><name pos:line="150" pos:column="16">sc</name><op:operator pos:line="150" pos:column="18">.</op:operator><name pos:line="150" pos:column="19">state</name></name> <op:operator pos:line="150" pos:column="25">==</op:operator> <name pos:line="150" pos:column="28">SCE_HA_IDENTIFIER</name></expr>)</condition><then pos:line="150" pos:column="46"> <block pos:line="150" pos:column="47">{
         <if pos:line="151" pos:column="10">if <condition pos:line="151" pos:column="13">(<expr><call><name pos:line="151" pos:column="14">IsAWordChar</name><argument_list pos:line="151" pos:column="25">(<argument><expr><name><name pos:line="151" pos:column="26">sc</name><op:operator pos:line="151" pos:column="28">.</op:operator><name pos:line="151" pos:column="29">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="151" pos:column="33"> <block pos:line="151" pos:column="34">{
            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">sc</name><op:operator pos:line="152" pos:column="15">.</op:operator><name pos:line="152" pos:column="16">Forward</name></name><argument_list pos:line="152" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="153" pos:column="12">else <block pos:line="153" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="154" pos:column="13">char</name></type> <name><name pos:line="154" pos:column="18">s</name><index pos:line="154" pos:column="19">[<expr><lit:literal type="number" pos:line="154" pos:column="20">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">sc</name><op:operator pos:line="155" pos:column="15">.</op:operator><name pos:line="155" pos:column="16">GetCurrent</name></name><argument_list pos:line="155" pos:column="26">(<argument><expr><name pos:line="155" pos:column="27">s</name></expr></argument>, <argument><expr><sizeof pos:line="155" pos:column="30">sizeof<argument_list pos:line="155" pos:column="36">(<argument><expr><name pos:line="155" pos:column="37">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="156" pos:column="13">int</name></type> <name pos:line="156" pos:column="17">style</name> <init pos:line="156" pos:column="23">= <expr><name><name pos:line="156" pos:column="25">sc</name><op:operator pos:line="156" pos:column="27">.</op:operator><name pos:line="156" pos:column="28">state</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="157" pos:column="13">int</name></type> <name pos:line="157" pos:column="17">new_mode</name> <init pos:line="157" pos:column="26">= <expr><lit:literal type="number" pos:line="157" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="158" pos:column="13">if <condition pos:line="158" pos:column="16">(<expr><call><name><name pos:line="158" pos:column="17">keywords</name><op:operator pos:line="158" pos:column="25">.</op:operator><name pos:line="158" pos:column="26">InList</name></name><argument_list pos:line="158" pos:column="32">(<argument><expr><name pos:line="158" pos:column="33">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="36"> <block pos:line="158" pos:column="37">{
               <expr_stmt><expr><name pos:line="159" pos:column="16">style</name> <op:operator pos:line="159" pos:column="22">=</op:operator> <name pos:line="159" pos:column="24">SCE_HA_KEYWORD</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="160" pos:column="15">else <if pos:line="160" pos:column="20">if <condition pos:line="160" pos:column="23">(<expr><call><name pos:line="160" pos:column="24">isupper</name><argument_list pos:line="160" pos:column="31">(<argument><expr><name><name pos:line="160" pos:column="32">s</name><index pos:line="160" pos:column="33">[<expr><lit:literal type="number" pos:line="160" pos:column="34">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="38"> <block pos:line="160" pos:column="39">{
               <if pos:line="161" pos:column="16">if <condition pos:line="161" pos:column="19">(<expr><name pos:line="161" pos:column="20">mode</name> <op:operator pos:line="161" pos:column="25">&gt;=</op:operator> <name pos:line="161" pos:column="28">HA_MODE_IMPORT1</name> <op:operator pos:line="161" pos:column="44">&amp;&amp;</op:operator> <name pos:line="161" pos:column="47">mode</name> <op:operator pos:line="161" pos:column="52">&lt;=</op:operator> <name pos:line="161" pos:column="55">HA_MODE_IMPORT3</name></expr>)</condition><then pos:line="161" pos:column="71"> <block pos:line="161" pos:column="72">{
                  <expr_stmt><expr><name pos:line="162" pos:column="19">style</name>    <op:operator pos:line="162" pos:column="28">=</op:operator> <name pos:line="162" pos:column="30">SCE_HA_MODULE</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name pos:line="163" pos:column="19">new_mode</name> <op:operator pos:line="163" pos:column="28">=</op:operator> <name pos:line="163" pos:column="30">HA_MODE_IMPORT2</name></expr>;</expr_stmt>
               }</block></then> <else pos:line="164" pos:column="18">else <if pos:line="164" pos:column="23">if <condition pos:line="164" pos:column="26">(<expr><name pos:line="164" pos:column="27">mode</name> <op:operator pos:line="164" pos:column="32">==</op:operator> <name pos:line="164" pos:column="35">HA_MODE_MODULE</name></expr>)</condition><then pos:line="164" pos:column="50">
                  <expr_stmt><expr><name pos:line="165" pos:column="19">style</name> <op:operator pos:line="165" pos:column="25">=</op:operator> <name pos:line="165" pos:column="27">SCE_HA_MODULE</name></expr>;</expr_stmt></then>
               <else pos:line="166" pos:column="16">else
                  <expr_stmt><expr><name pos:line="167" pos:column="19">style</name> <op:operator pos:line="167" pos:column="25">=</op:operator> <name pos:line="167" pos:column="27">SCE_HA_CAPITAL</name></expr>;</expr_stmt></else></if></else></if>
            }</block></then> <else pos:line="168" pos:column="15">else <if pos:line="168" pos:column="20">if <condition pos:line="168" pos:column="23">(<expr><name pos:line="168" pos:column="24">mode</name> <op:operator pos:line="168" pos:column="29">==</op:operator> <name pos:line="168" pos:column="32">HA_MODE_IMPORT1</name> <op:operator pos:line="168" pos:column="48">&amp;&amp;</op:operator>
                       <call><name pos:line="169" pos:column="24">strcmp</name><argument_list pos:line="169" pos:column="30">(<argument><expr><name pos:line="169" pos:column="31">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="169" pos:column="33">"qualified"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="169" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="169" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="169" pos:column="51"> <block pos:line="169" pos:column="52">{
                <expr_stmt><expr><name pos:line="170" pos:column="17">style</name>    <op:operator pos:line="170" pos:column="26">=</op:operator> <name pos:line="170" pos:column="28">SCE_HA_KEYWORD</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="171" pos:column="17">new_mode</name> <op:operator pos:line="171" pos:column="26">=</op:operator> <name pos:line="171" pos:column="28">HA_MODE_IMPORT1</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="172" pos:column="15">else <if pos:line="172" pos:column="20">if <condition pos:line="172" pos:column="23">(<expr><name pos:line="172" pos:column="24">mode</name> <op:operator pos:line="172" pos:column="29">==</op:operator> <name pos:line="172" pos:column="32">HA_MODE_IMPORT2</name></expr>)</condition><then pos:line="172" pos:column="48"> <block pos:line="172" pos:column="49">{
                <if pos:line="173" pos:column="17">if <condition pos:line="173" pos:column="20">(<expr><call><name pos:line="173" pos:column="21">strcmp</name><argument_list pos:line="173" pos:column="27">(<argument><expr><name pos:line="173" pos:column="28">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="173" pos:column="30">"as"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="173" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="173" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="173" pos:column="41"> <block pos:line="173" pos:column="42">{
                   <expr_stmt><expr><name pos:line="174" pos:column="20">style</name>    <op:operator pos:line="174" pos:column="29">=</op:operator> <name pos:line="174" pos:column="31">SCE_HA_KEYWORD</name></expr>;</expr_stmt>
                   <expr_stmt><expr><name pos:line="175" pos:column="20">new_mode</name> <op:operator pos:line="175" pos:column="29">=</op:operator> <name pos:line="175" pos:column="31">HA_MODE_IMPORT3</name></expr>;</expr_stmt>
               }</block></then> <else pos:line="176" pos:column="18">else <if pos:line="176" pos:column="23">if <condition pos:line="176" pos:column="26">(<expr><call><name pos:line="176" pos:column="27">strcmp</name><argument_list pos:line="176" pos:column="33">(<argument><expr><name pos:line="176" pos:column="34">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="176" pos:column="36">"hiding"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="176" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="176" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="176" pos:column="51"> <block pos:line="176" pos:column="52">{
                   <expr_stmt><expr><name pos:line="177" pos:column="20">style</name>     <op:operator pos:line="177" pos:column="30">=</op:operator> <name pos:line="177" pos:column="32">SCE_HA_KEYWORD</name></expr>;</expr_stmt>
               }</block></then></if></else></if>
            }</block></then> <else pos:line="179" pos:column="15">else <if pos:line="179" pos:column="20">if <condition pos:line="179" pos:column="23">(<expr><name pos:line="179" pos:column="24">mode</name> <op:operator pos:line="179" pos:column="29">==</op:operator> <name pos:line="179" pos:column="32">HA_MODE_FFI</name></expr>)</condition><then pos:line="179" pos:column="44"> <block pos:line="179" pos:column="45">{
			   <if pos:line="180" pos:column="28">if <condition pos:line="180" pos:column="31">(<expr><call><name><name pos:line="180" pos:column="32">ffi</name><op:operator pos:line="180" pos:column="35">.</op:operator><name pos:line="180" pos:column="36">InList</name></name><argument_list pos:line="180" pos:column="42">(<argument><expr><name pos:line="180" pos:column="43">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="180" pos:column="46"> <block pos:line="180" pos:column="47">{
                  <expr_stmt><expr><name pos:line="181" pos:column="19">style</name> <op:operator pos:line="181" pos:column="25">=</op:operator> <name pos:line="181" pos:column="27">SCE_HA_KEYWORD</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name pos:line="182" pos:column="19">new_mode</name> <op:operator pos:line="182" pos:column="28">=</op:operator> <name pos:line="182" pos:column="30">HA_MODE_FFI</name></expr>;</expr_stmt>
               }</block></then></if>
            }</block></then>
            <else pos:line="185" pos:column="13">else <if pos:line="185" pos:column="18">if <condition pos:line="185" pos:column="21">(<expr><name pos:line="185" pos:column="22">mode</name> <op:operator pos:line="185" pos:column="27">==</op:operator> <name pos:line="185" pos:column="30">HA_MODE_TYPE</name></expr>)</condition><then pos:line="185" pos:column="43"> <block pos:line="185" pos:column="44">{
               <if pos:line="186" pos:column="16">if <condition pos:line="186" pos:column="19">(<expr><call><name pos:line="186" pos:column="20">strcmp</name><argument_list pos:line="186" pos:column="26">(<argument><expr><name pos:line="186" pos:column="27">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="186" pos:column="29">"family"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="186" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="186" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="186" pos:column="44">
                  <expr_stmt><expr><name pos:line="187" pos:column="19">style</name>    <op:operator pos:line="187" pos:column="28">=</op:operator> <name pos:line="187" pos:column="30">SCE_HA_KEYWORD</name></expr>;</expr_stmt></then></if>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">styler</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">ColourTo</name></name><argument_list pos:line="189" pos:column="28">(<argument><expr><name><name pos:line="189" pos:column="29">sc</name><op:operator pos:line="189" pos:column="31">.</op:operator><name pos:line="189" pos:column="32">currentPos</name></name> <op:operator pos:line="189" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="189" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="189" pos:column="48">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="190" pos:column="13">if <condition pos:line="190" pos:column="16">(<expr><call><name pos:line="190" pos:column="17">strcmp</name><argument_list pos:line="190" pos:column="23">(<argument><expr><name pos:line="190" pos:column="24">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="190" pos:column="26">"import"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="190" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="190" pos:column="39">0</lit:literal> <op:operator pos:line="190" pos:column="41">&amp;&amp;</op:operator> <name pos:line="190" pos:column="44">mode</name> <op:operator pos:line="190" pos:column="49">!=</op:operator> <name pos:line="190" pos:column="52">HA_MODE_FFI</name></expr>)</condition><then pos:line="190" pos:column="64">
               <expr_stmt><expr><name pos:line="191" pos:column="16">new_mode</name> <op:operator pos:line="191" pos:column="25">=</op:operator> <name pos:line="191" pos:column="27">HA_MODE_IMPORT1</name></expr>;</expr_stmt></then>
            <else pos:line="192" pos:column="13">else <if pos:line="192" pos:column="18">if <condition pos:line="192" pos:column="21">(<expr><call><name pos:line="192" pos:column="22">strcmp</name><argument_list pos:line="192" pos:column="28">(<argument><expr><name pos:line="192" pos:column="29">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="192" pos:column="31">"module"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="192" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="192" pos:column="46">
               <expr_stmt><expr><name pos:line="193" pos:column="16">new_mode</name> <op:operator pos:line="193" pos:column="25">=</op:operator> <name pos:line="193" pos:column="27">HA_MODE_MODULE</name></expr>;</expr_stmt></then>
            <else pos:line="194" pos:column="13">else <if pos:line="194" pos:column="18">if <condition pos:line="194" pos:column="21">(<expr><call><name pos:line="194" pos:column="22">strcmp</name><argument_list pos:line="194" pos:column="28">(<argument><expr><name pos:line="194" pos:column="29">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="194" pos:column="31">"foreign"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="194" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="194" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="194" pos:column="47">
               <expr_stmt><expr><name pos:line="195" pos:column="16">new_mode</name> <op:operator pos:line="195" pos:column="25">=</op:operator> <name pos:line="195" pos:column="27">HA_MODE_FFI</name></expr>;</expr_stmt></then>
            <else pos:line="196" pos:column="13">else <if pos:line="196" pos:column="18">if <condition pos:line="196" pos:column="21">(<expr><call><name pos:line="196" pos:column="22">strcmp</name><argument_list pos:line="196" pos:column="28">(<argument><expr><name pos:line="196" pos:column="29">s</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="196" pos:column="31">"type"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="196" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="196" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="196" pos:column="44">
               <expr_stmt><expr><name pos:line="197" pos:column="16">new_mode</name> <op:operator pos:line="197" pos:column="25">=</op:operator> <name pos:line="197" pos:column="27">HA_MODE_TYPE</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">sc</name><op:operator pos:line="198" pos:column="15">.</op:operator><name pos:line="198" pos:column="16">ChangeState</name></name><argument_list pos:line="198" pos:column="27">(<argument><expr><name pos:line="198" pos:column="28">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="199" pos:column="13">mode</name> <op:operator pos:line="199" pos:column="18">=</op:operator> <name pos:line="199" pos:column="20">new_mode</name></expr>;</expr_stmt>
         }</block></else></if>
      }</block></then>

         <comment type="line" pos:line="203" pos:column="10">// Comments</comment>
            <comment type="line" pos:line="204" pos:column="13">// Oneliner</comment>
      <else pos:line="205" pos:column="7">else <if pos:line="205" pos:column="12">if <condition pos:line="205" pos:column="15">(<expr><name><name pos:line="205" pos:column="16">sc</name><op:operator pos:line="205" pos:column="18">.</op:operator><name pos:line="205" pos:column="19">state</name></name> <op:operator pos:line="205" pos:column="25">==</op:operator> <name pos:line="205" pos:column="28">SCE_HA_COMMENTLINE</name></expr>)</condition><then pos:line="205" pos:column="47"> <block pos:line="205" pos:column="48">{
         <if pos:line="206" pos:column="10">if <condition pos:line="206" pos:column="13">(<expr><name><name pos:line="206" pos:column="14">sc</name><op:operator pos:line="206" pos:column="16">.</op:operator><name pos:line="206" pos:column="17">atLineEnd</name></name></expr>)</condition><then pos:line="206" pos:column="27"> <block pos:line="206" pos:column="28">{
            <expr_stmt><expr><call><name><name pos:line="207" pos:column="13">styler</name><op:operator pos:line="207" pos:column="19">.</op:operator><name pos:line="207" pos:column="20">ColourTo</name></name><argument_list pos:line="207" pos:column="28">(<argument><expr><name><name pos:line="207" pos:column="29">sc</name><op:operator pos:line="207" pos:column="31">.</op:operator><name pos:line="207" pos:column="32">currentPos</name></name> <op:operator pos:line="207" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="207" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="207" pos:column="48">sc</name><op:operator pos:line="207" pos:column="50">.</op:operator><name pos:line="207" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">sc</name><op:operator pos:line="208" pos:column="15">.</op:operator><name pos:line="208" pos:column="16">ChangeState</name></name><argument_list pos:line="208" pos:column="27">(<argument><expr><name pos:line="208" pos:column="28">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="209" pos:column="12">else <block pos:line="209" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">sc</name><op:operator pos:line="210" pos:column="15">.</op:operator><name pos:line="210" pos:column="16">Forward</name></name><argument_list pos:line="210" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
         }</block></else></if>
      }</block></then>
            <comment type="line" pos:line="213" pos:column="13">// Nested</comment>
      <else pos:line="214" pos:column="7">else <if pos:line="214" pos:column="12">if <condition pos:line="214" pos:column="15">(<expr><name><name pos:line="214" pos:column="16">sc</name><op:operator pos:line="214" pos:column="18">.</op:operator><name pos:line="214" pos:column="19">state</name></name> <op:operator pos:line="214" pos:column="25">==</op:operator> <name pos:line="214" pos:column="28">SCE_HA_COMMENTBLOCK</name></expr>)</condition><then pos:line="214" pos:column="48"> <block pos:line="214" pos:column="49">{
         <if pos:line="215" pos:column="10">if <condition pos:line="215" pos:column="13">(<expr><call><name><name pos:line="215" pos:column="14">sc</name><op:operator pos:line="215" pos:column="16">.</op:operator><name pos:line="215" pos:column="17">Match</name></name><argument_list pos:line="215" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="23">"{-"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="215" pos:column="29"> <block pos:line="215" pos:column="30">{
            <expr_stmt><expr><call><name><name pos:line="216" pos:column="13">sc</name><op:operator pos:line="216" pos:column="15">.</op:operator><name pos:line="216" pos:column="16">Forward</name></name><argument_list pos:line="216" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="216" pos:column="24">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="217" pos:column="13">xmode</name><op:operator pos:line="217" pos:column="18">++</op:operator></expr>;</expr_stmt>
         }</block></then>
         <else pos:line="219" pos:column="10">else <if pos:line="219" pos:column="15">if <condition pos:line="219" pos:column="18">(<expr><call><name><name pos:line="219" pos:column="19">sc</name><op:operator pos:line="219" pos:column="21">.</op:operator><name pos:line="219" pos:column="22">Match</name></name><argument_list pos:line="219" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="28">"-}"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="219" pos:column="34"> <block pos:line="219" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">sc</name><op:operator pos:line="220" pos:column="15">.</op:operator><name pos:line="220" pos:column="16">Forward</name></name><argument_list pos:line="220" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="220" pos:column="24">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="221" pos:column="13">xmode</name><op:operator pos:line="221" pos:column="18">--</op:operator></expr>;</expr_stmt>
            <if pos:line="222" pos:column="13">if <condition pos:line="222" pos:column="16">(<expr><name pos:line="222" pos:column="17">xmode</name> <op:operator pos:line="222" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="222" pos:column="26">0</lit:literal></expr>)</condition><then pos:line="222" pos:column="28"> <block pos:line="222" pos:column="29">{
               <expr_stmt><expr><call><name><name pos:line="223" pos:column="16">styler</name><op:operator pos:line="223" pos:column="22">.</op:operator><name pos:line="223" pos:column="23">ColourTo</name></name><argument_list pos:line="223" pos:column="31">(<argument><expr><name><name pos:line="223" pos:column="32">sc</name><op:operator pos:line="223" pos:column="34">.</op:operator><name pos:line="223" pos:column="35">currentPos</name></name> <op:operator pos:line="223" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="223" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="223" pos:column="51">sc</name><op:operator pos:line="223" pos:column="53">.</op:operator><name pos:line="223" pos:column="54">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name pos:line="224" pos:column="16">sc</name><op:operator pos:line="224" pos:column="18">.</op:operator><name pos:line="224" pos:column="19">ChangeState</name></name><argument_list pos:line="224" pos:column="30">(<argument><expr><name pos:line="224" pos:column="31">SCE_HA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
         }</block></then> <else pos:line="226" pos:column="12">else <block pos:line="226" pos:column="17">{
            <if pos:line="227" pos:column="13">if <condition pos:line="227" pos:column="16">(<expr><name><name pos:line="227" pos:column="17">sc</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">atLineEnd</name></name></expr>)</condition><then pos:line="227" pos:column="30"> <block pos:line="227" pos:column="31">{
				<comment type="line" pos:line="228" pos:column="33">// Remember the line state for future incremental lexing</comment>
				<expr_stmt><expr><call><name><name pos:line="229" pos:column="33">styler</name><op:operator pos:line="229" pos:column="39">.</op:operator><name pos:line="229" pos:column="40">SetLineState</name></name><argument_list pos:line="229" pos:column="52">(<argument><expr><name pos:line="229" pos:column="53">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="229" pos:column="66">(</op:operator><name pos:line="229" pos:column="67">xmode</name> <op:operator pos:line="229" pos:column="73">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="229" pos:column="76">4</lit:literal><op:operator pos:line="229" pos:column="77">)</op:operator> <op:operator pos:line="229" pos:column="79">|</op:operator> <name pos:line="229" pos:column="81">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="230" pos:column="33">lineCurrent</name><op:operator pos:line="230" pos:column="44">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="232" pos:column="13">sc</name><op:operator pos:line="232" pos:column="15">.</op:operator><name pos:line="232" pos:column="16">Forward</name></name><argument_list pos:line="232" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
         }</block></else></if></else></if>
      }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
      <comment type="line" pos:line="235" pos:column="7">// New state?</comment>
      <if pos:line="236" pos:column="7">if <condition pos:line="236" pos:column="10">(<expr><name><name pos:line="236" pos:column="11">sc</name><op:operator pos:line="236" pos:column="13">.</op:operator><name pos:line="236" pos:column="14">state</name></name> <op:operator pos:line="236" pos:column="20">==</op:operator> <name pos:line="236" pos:column="23">SCE_HA_DEFAULT</name></expr>)</condition><then pos:line="236" pos:column="38"> <block pos:line="236" pos:column="39">{
         <comment type="line" pos:line="237" pos:column="10">// Digit</comment>
         <if pos:line="238" pos:column="10">if <condition pos:line="238" pos:column="13">(<expr><call><name pos:line="238" pos:column="14">IsADigit</name><argument_list pos:line="238" pos:column="22">(<argument><expr><name><name pos:line="238" pos:column="23">sc</name><op:operator pos:line="238" pos:column="25">.</op:operator><name pos:line="238" pos:column="26">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="238" pos:column="30">||</op:operator>
             <op:operator pos:line="239" pos:column="14">(</op:operator><name><name pos:line="239" pos:column="15">sc</name><op:operator pos:line="239" pos:column="17">.</op:operator><name pos:line="239" pos:column="18">ch</name></name> <op:operator pos:line="239" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="24">'.'</lit:literal> <op:operator pos:line="239" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="239" pos:column="31">IsADigit</name><argument_list pos:line="239" pos:column="39">(<argument><expr><name><name pos:line="239" pos:column="40">sc</name><op:operator pos:line="239" pos:column="42">.</op:operator><name pos:line="239" pos:column="43">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="239" pos:column="50">)</op:operator> <op:operator pos:line="239" pos:column="52">||</op:operator>
             <op:operator pos:line="240" pos:column="14">(</op:operator><name><name pos:line="240" pos:column="15">sc</name><op:operator pos:line="240" pos:column="17">.</op:operator><name pos:line="240" pos:column="18">ch</name></name> <op:operator pos:line="240" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="240" pos:column="24">'-'</lit:literal> <op:operator pos:line="240" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="240" pos:column="31">IsADigit</name><argument_list pos:line="240" pos:column="39">(<argument><expr><name><name pos:line="240" pos:column="40">sc</name><op:operator pos:line="240" pos:column="42">.</op:operator><name pos:line="240" pos:column="43">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="240" pos:column="50">)</op:operator></expr>)</condition><then pos:line="240" pos:column="52"> <block pos:line="240" pos:column="53">{
            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">styler</name><op:operator pos:line="241" pos:column="19">.</op:operator><name pos:line="241" pos:column="20">ColourTo</name></name><argument_list pos:line="241" pos:column="28">(<argument><expr><name><name pos:line="241" pos:column="29">sc</name><op:operator pos:line="241" pos:column="31">.</op:operator><name pos:line="241" pos:column="32">currentPos</name></name> <op:operator pos:line="241" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="241" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="241" pos:column="48">sc</name><op:operator pos:line="241" pos:column="50">.</op:operator><name pos:line="241" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="242" pos:column="13">sc</name><op:operator pos:line="242" pos:column="15">.</op:operator><name pos:line="242" pos:column="16">ChangeState</name></name><argument_list pos:line="242" pos:column="27">(<argument><expr><name pos:line="242" pos:column="28">SCE_HA_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="243" pos:column="13">if <condition pos:line="243" pos:column="16">(<expr><name><name pos:line="243" pos:column="17">sc</name><op:operator pos:line="243" pos:column="19">.</op:operator><name pos:line="243" pos:column="20">ch</name></name> <op:operator pos:line="243" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="243" pos:column="26">'0'</lit:literal> <op:operator pos:line="243" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="243" pos:column="33">(</op:operator><name><name pos:line="243" pos:column="34">sc</name><op:operator pos:line="243" pos:column="36">.</op:operator><name pos:line="243" pos:column="37">chNext</name></name> <op:operator pos:line="243" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="243" pos:column="47">'X'</lit:literal> <op:operator pos:line="243" pos:column="51">||</op:operator> <name><name pos:line="243" pos:column="54">sc</name><op:operator pos:line="243" pos:column="56">.</op:operator><name pos:line="243" pos:column="57">chNext</name></name> <op:operator pos:line="243" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="243" pos:column="67">'x'</lit:literal><op:operator pos:line="243" pos:column="70">)</op:operator></expr>)</condition><then pos:line="243" pos:column="72"> <block pos:line="243" pos:column="73">{
				<comment type="line" pos:line="244" pos:column="33">// Match anything starting with "0x" or "0X", too</comment>
				<expr_stmt><expr><call><name><name pos:line="245" pos:column="33">sc</name><op:operator pos:line="245" pos:column="35">.</op:operator><name pos:line="245" pos:column="36">Forward</name></name><argument_list pos:line="245" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="245" pos:column="44">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="246" pos:column="33">xmode</name> <op:operator pos:line="246" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="246" pos:column="41">16</lit:literal></expr>;</expr_stmt>
            }</block></then> <else pos:line="247" pos:column="15">else <if pos:line="247" pos:column="20">if <condition pos:line="247" pos:column="23">(<expr><name><name pos:line="247" pos:column="24">sc</name><op:operator pos:line="247" pos:column="26">.</op:operator><name pos:line="247" pos:column="27">ch</name></name> <op:operator pos:line="247" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="247" pos:column="33">'0'</lit:literal> <op:operator pos:line="247" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="247" pos:column="40">(</op:operator><name><name pos:line="247" pos:column="41">sc</name><op:operator pos:line="247" pos:column="43">.</op:operator><name pos:line="247" pos:column="44">chNext</name></name> <op:operator pos:line="247" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="247" pos:column="54">'O'</lit:literal> <op:operator pos:line="247" pos:column="58">||</op:operator> <name><name pos:line="247" pos:column="61">sc</name><op:operator pos:line="247" pos:column="63">.</op:operator><name pos:line="247" pos:column="64">chNext</name></name> <op:operator pos:line="247" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="247" pos:column="74">'o'</lit:literal><op:operator pos:line="247" pos:column="77">)</op:operator></expr>)</condition><then pos:line="247" pos:column="79"> <block pos:line="247" pos:column="80">{
				<comment type="line" pos:line="248" pos:column="33">// Match anything starting with "0x" or "0X", too</comment>
				<expr_stmt><expr><call><name><name pos:line="249" pos:column="33">sc</name><op:operator pos:line="249" pos:column="35">.</op:operator><name pos:line="249" pos:column="36">Forward</name></name><argument_list pos:line="249" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="249" pos:column="44">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="250" pos:column="33">xmode</name> <op:operator pos:line="250" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="250" pos:column="41">8</lit:literal></expr>;</expr_stmt>
            }</block></then> <else pos:line="251" pos:column="15">else <block pos:line="251" pos:column="20">{
				<expr_stmt><expr><call><name><name pos:line="252" pos:column="33">sc</name><op:operator pos:line="252" pos:column="35">.</op:operator><name pos:line="252" pos:column="36">Forward</name></name><argument_list pos:line="252" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="253" pos:column="33">xmode</name> <op:operator pos:line="253" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="253" pos:column="41">10</lit:literal></expr>;</expr_stmt>
			}</block></else></if></else></if>
            <expr_stmt><expr><name pos:line="255" pos:column="13">mode</name> <op:operator pos:line="255" pos:column="18">=</op:operator> <name pos:line="255" pos:column="20">HA_MODE_DEFAULT</name></expr>;</expr_stmt>
         }</block></then>
         <comment type="line" pos:line="257" pos:column="10">// Comment line</comment>
         <else pos:line="258" pos:column="10">else <if pos:line="258" pos:column="15">if <condition pos:line="258" pos:column="18">(<expr><call><name><name pos:line="258" pos:column="19">sc</name><op:operator pos:line="258" pos:column="21">.</op:operator><name pos:line="258" pos:column="22">Match</name></name><argument_list pos:line="258" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="258" pos:column="28">"--"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="258" pos:column="34"> <block pos:line="258" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="259" pos:column="13">styler</name><op:operator pos:line="259" pos:column="19">.</op:operator><name pos:line="259" pos:column="20">ColourTo</name></name><argument_list pos:line="259" pos:column="28">(<argument><expr><name><name pos:line="259" pos:column="29">sc</name><op:operator pos:line="259" pos:column="31">.</op:operator><name pos:line="259" pos:column="32">currentPos</name></name> <op:operator pos:line="259" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="259" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="259" pos:column="48">sc</name><op:operator pos:line="259" pos:column="50">.</op:operator><name pos:line="259" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="260" pos:column="13">sc</name><op:operator pos:line="260" pos:column="15">.</op:operator><name pos:line="260" pos:column="16">Forward</name></name><argument_list pos:line="260" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="260" pos:column="24">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="261" pos:column="13">sc</name><op:operator pos:line="261" pos:column="15">.</op:operator><name pos:line="261" pos:column="16">ChangeState</name></name><argument_list pos:line="261" pos:column="27">(<argument><expr><name pos:line="261" pos:column="28">SCE_HA_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <comment type="line" pos:line="262" pos:column="10">// Comment block</comment>
         }</block></then>
         <else pos:line="264" pos:column="10">else <if pos:line="264" pos:column="15">if <condition pos:line="264" pos:column="18">(<expr><call><name><name pos:line="264" pos:column="19">sc</name><op:operator pos:line="264" pos:column="21">.</op:operator><name pos:line="264" pos:column="22">Match</name></name><argument_list pos:line="264" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="264" pos:column="28">"{-"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="264" pos:column="34"> <block pos:line="264" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="265" pos:column="13">styler</name><op:operator pos:line="265" pos:column="19">.</op:operator><name pos:line="265" pos:column="20">ColourTo</name></name><argument_list pos:line="265" pos:column="28">(<argument><expr><name><name pos:line="265" pos:column="29">sc</name><op:operator pos:line="265" pos:column="31">.</op:operator><name pos:line="265" pos:column="32">currentPos</name></name> <op:operator pos:line="265" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="265" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="265" pos:column="48">sc</name><op:operator pos:line="265" pos:column="50">.</op:operator><name pos:line="265" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="266" pos:column="13">sc</name><op:operator pos:line="266" pos:column="15">.</op:operator><name pos:line="266" pos:column="16">Forward</name></name><argument_list pos:line="266" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="266" pos:column="24">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">sc</name><op:operator pos:line="267" pos:column="15">.</op:operator><name pos:line="267" pos:column="16">ChangeState</name></name><argument_list pos:line="267" pos:column="27">(<argument><expr><name pos:line="267" pos:column="28">SCE_HA_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="268" pos:column="13">xmode</name> <op:operator pos:line="268" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="268" pos:column="21">1</lit:literal></expr>;</expr_stmt>
         }</block></then>
         <comment type="line" pos:line="270" pos:column="10">// String</comment>
         <else pos:line="271" pos:column="10">else <if pos:line="271" pos:column="15">if <condition pos:line="271" pos:column="18">(<expr><call><name><name pos:line="271" pos:column="19">sc</name><op:operator pos:line="271" pos:column="21">.</op:operator><name pos:line="271" pos:column="22">Match</name></name><argument_list pos:line="271" pos:column="27">(<argument><expr><lit:literal type="char" pos:line="271" pos:column="28">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="271" pos:column="34"> <block pos:line="271" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="272" pos:column="13">styler</name><op:operator pos:line="272" pos:column="19">.</op:operator><name pos:line="272" pos:column="20">ColourTo</name></name><argument_list pos:line="272" pos:column="28">(<argument><expr><name><name pos:line="272" pos:column="29">sc</name><op:operator pos:line="272" pos:column="31">.</op:operator><name pos:line="272" pos:column="32">currentPos</name></name> <op:operator pos:line="272" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="272" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="272" pos:column="48">sc</name><op:operator pos:line="272" pos:column="50">.</op:operator><name pos:line="272" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="273" pos:column="13">sc</name><op:operator pos:line="273" pos:column="15">.</op:operator><name pos:line="273" pos:column="16">Forward</name></name><argument_list pos:line="273" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="274" pos:column="13">sc</name><op:operator pos:line="274" pos:column="15">.</op:operator><name pos:line="274" pos:column="16">ChangeState</name></name><argument_list pos:line="274" pos:column="27">(<argument><expr><name pos:line="274" pos:column="28">SCE_HA_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then>
         <comment type="line" pos:line="276" pos:column="10">// Character</comment>
         <else pos:line="277" pos:column="10">else <if pos:line="277" pos:column="15">if <condition pos:line="277" pos:column="18">(<expr><call><name><name pos:line="277" pos:column="19">sc</name><op:operator pos:line="277" pos:column="21">.</op:operator><name pos:line="277" pos:column="22">Match</name></name><argument_list pos:line="277" pos:column="27">(<argument><expr><lit:literal type="char" pos:line="277" pos:column="28">'\''</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="277" pos:column="34"> <block pos:line="277" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="278" pos:column="13">styler</name><op:operator pos:line="278" pos:column="19">.</op:operator><name pos:line="278" pos:column="20">ColourTo</name></name><argument_list pos:line="278" pos:column="28">(<argument><expr><name><name pos:line="278" pos:column="29">sc</name><op:operator pos:line="278" pos:column="31">.</op:operator><name pos:line="278" pos:column="32">currentPos</name></name> <op:operator pos:line="278" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="278" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="278" pos:column="48">sc</name><op:operator pos:line="278" pos:column="50">.</op:operator><name pos:line="278" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="279" pos:column="13">sc</name><op:operator pos:line="279" pos:column="15">.</op:operator><name pos:line="279" pos:column="16">Forward</name></name><argument_list pos:line="279" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="280" pos:column="13">sc</name><op:operator pos:line="280" pos:column="15">.</op:operator><name pos:line="280" pos:column="16">ChangeState</name></name><argument_list pos:line="280" pos:column="27">(<argument><expr><name pos:line="280" pos:column="28">SCE_HA_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then>
         <else pos:line="282" pos:column="10">else <if pos:line="282" pos:column="15">if <condition pos:line="282" pos:column="18">(<expr><name><name pos:line="282" pos:column="19">sc</name><op:operator pos:line="282" pos:column="21">.</op:operator><name pos:line="282" pos:column="22">ch</name></name> <op:operator pos:line="282" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="282" pos:column="28">'('</lit:literal> <op:operator pos:line="282" pos:column="32">||</op:operator> <name><name pos:line="282" pos:column="35">sc</name><op:operator pos:line="282" pos:column="37">.</op:operator><name pos:line="282" pos:column="38">ch</name></name> <op:operator pos:line="282" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="282" pos:column="44">')'</lit:literal> <op:operator pos:line="282" pos:column="48">||</op:operator>
                  <name><name pos:line="283" pos:column="19">sc</name><op:operator pos:line="283" pos:column="21">.</op:operator><name pos:line="283" pos:column="22">ch</name></name> <op:operator pos:line="283" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="283" pos:column="28">'{'</lit:literal> <op:operator pos:line="283" pos:column="32">||</op:operator> <name><name pos:line="283" pos:column="35">sc</name><op:operator pos:line="283" pos:column="37">.</op:operator><name pos:line="283" pos:column="38">ch</name></name> <op:operator pos:line="283" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="283" pos:column="44">'}'</lit:literal> <op:operator pos:line="283" pos:column="48">||</op:operator>
                  <name><name pos:line="284" pos:column="19">sc</name><op:operator pos:line="284" pos:column="21">.</op:operator><name pos:line="284" pos:column="22">ch</name></name> <op:operator pos:line="284" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="284" pos:column="28">'['</lit:literal> <op:operator pos:line="284" pos:column="32">||</op:operator> <name><name pos:line="284" pos:column="35">sc</name><op:operator pos:line="284" pos:column="37">.</op:operator><name pos:line="284" pos:column="38">ch</name></name> <op:operator pos:line="284" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="284" pos:column="44">']'</lit:literal></expr>)</condition><then pos:line="284" pos:column="48"> <block pos:line="284" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="285" pos:column="25">styler</name><op:operator pos:line="285" pos:column="31">.</op:operator><name pos:line="285" pos:column="32">ColourTo</name></name><argument_list pos:line="285" pos:column="40">(<argument><expr><name><name pos:line="285" pos:column="41">sc</name><op:operator pos:line="285" pos:column="43">.</op:operator><name pos:line="285" pos:column="44">currentPos</name></name> <op:operator pos:line="285" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="285" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="285" pos:column="60">sc</name><op:operator pos:line="285" pos:column="62">.</op:operator><name pos:line="285" pos:column="63">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="286" pos:column="25">sc</name><op:operator pos:line="286" pos:column="27">.</op:operator><name pos:line="286" pos:column="28">Forward</name></name><argument_list pos:line="286" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="287" pos:column="25">styler</name><op:operator pos:line="287" pos:column="31">.</op:operator><name pos:line="287" pos:column="32">ColourTo</name></name><argument_list pos:line="287" pos:column="40">(<argument><expr><name><name pos:line="287" pos:column="41">sc</name><op:operator pos:line="287" pos:column="43">.</op:operator><name pos:line="287" pos:column="44">currentPos</name></name> <op:operator pos:line="287" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="287" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="287" pos:column="60">SCE_HA_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="288" pos:column="25">mode</name> <op:operator pos:line="288" pos:column="30">=</op:operator> <name pos:line="288" pos:column="32">HA_MODE_DEFAULT</name></expr>;</expr_stmt>
		 }</block></then>
         <comment type="line" pos:line="290" pos:column="10">// Operator</comment>
         <else pos:line="291" pos:column="10">else <if pos:line="291" pos:column="15">if <condition pos:line="291" pos:column="18">(<expr><call><name pos:line="291" pos:column="19">isascii</name><argument_list pos:line="291" pos:column="26">(<argument><expr><name><name pos:line="291" pos:column="27">sc</name><op:operator pos:line="291" pos:column="29">.</op:operator><name pos:line="291" pos:column="30">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="291" pos:column="34">&amp;&amp;</op:operator> <call><name pos:line="291" pos:column="37">isoperator</name><argument_list pos:line="291" pos:column="47">(<argument><expr><call><name><name pos:line="291" pos:column="48">static_cast</name><argument_list pos:line="291" pos:column="59">&lt;<argument><expr><name pos:line="291" pos:column="60">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="291" pos:column="65">(<argument><expr><name><name pos:line="291" pos:column="66">sc</name><op:operator pos:line="291" pos:column="68">.</op:operator><name pos:line="291" pos:column="69">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="291" pos:column="74"> <block pos:line="291" pos:column="75">{
            <expr_stmt><expr><call><name><name pos:line="292" pos:column="13">styler</name><op:operator pos:line="292" pos:column="19">.</op:operator><name pos:line="292" pos:column="20">ColourTo</name></name><argument_list pos:line="292" pos:column="28">(<argument><expr><name><name pos:line="292" pos:column="29">sc</name><op:operator pos:line="292" pos:column="31">.</op:operator><name pos:line="292" pos:column="32">currentPos</name></name> <op:operator pos:line="292" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="292" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="292" pos:column="48">sc</name><op:operator pos:line="292" pos:column="50">.</op:operator><name pos:line="292" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="293" pos:column="13">sc</name><op:operator pos:line="293" pos:column="15">.</op:operator><name pos:line="293" pos:column="16">Forward</name></name><argument_list pos:line="293" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="294" pos:column="13">sc</name><op:operator pos:line="294" pos:column="15">.</op:operator><name pos:line="294" pos:column="16">ChangeState</name></name><argument_list pos:line="294" pos:column="27">(<argument><expr><name pos:line="294" pos:column="28">SCE_HA_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="295" pos:column="13">mode</name> <op:operator pos:line="295" pos:column="18">=</op:operator> <name pos:line="295" pos:column="20">HA_MODE_DEFAULT</name></expr>;</expr_stmt>
         }</block></then>
         <comment type="line" pos:line="297" pos:column="10">// Keyword</comment>
         <else pos:line="298" pos:column="10">else <if pos:line="298" pos:column="15">if <condition pos:line="298" pos:column="18">(<expr><call><name pos:line="298" pos:column="19">IsAWordStart</name><argument_list pos:line="298" pos:column="31">(<argument><expr><name><name pos:line="298" pos:column="32">sc</name><op:operator pos:line="298" pos:column="34">.</op:operator><name pos:line="298" pos:column="35">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="298" pos:column="39"> <block pos:line="298" pos:column="40">{
            <expr_stmt><expr><call><name><name pos:line="299" pos:column="13">styler</name><op:operator pos:line="299" pos:column="19">.</op:operator><name pos:line="299" pos:column="20">ColourTo</name></name><argument_list pos:line="299" pos:column="28">(<argument><expr><name><name pos:line="299" pos:column="29">sc</name><op:operator pos:line="299" pos:column="31">.</op:operator><name pos:line="299" pos:column="32">currentPos</name></name> <op:operator pos:line="299" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="299" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="299" pos:column="48">sc</name><op:operator pos:line="299" pos:column="50">.</op:operator><name pos:line="299" pos:column="51">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="300" pos:column="13">sc</name><op:operator pos:line="300" pos:column="15">.</op:operator><name pos:line="300" pos:column="16">Forward</name></name><argument_list pos:line="300" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="301" pos:column="13">sc</name><op:operator pos:line="301" pos:column="15">.</op:operator><name pos:line="301" pos:column="16">ChangeState</name></name><argument_list pos:line="301" pos:column="27">(<argument><expr><name pos:line="301" pos:column="28">SCE_HA_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else pos:line="302" pos:column="12">else <block pos:line="302" pos:column="17">{
            <if pos:line="303" pos:column="13">if <condition pos:line="303" pos:column="16">(<expr><name><name pos:line="303" pos:column="17">sc</name><op:operator pos:line="303" pos:column="19">.</op:operator><name pos:line="303" pos:column="20">atLineEnd</name></name></expr>)</condition><then pos:line="303" pos:column="30"> <block pos:line="303" pos:column="31">{
				<comment type="line" pos:line="304" pos:column="33">// Remember the line state for future incremental lexing</comment>
				<expr_stmt><expr><call><name><name pos:line="305" pos:column="33">styler</name><op:operator pos:line="305" pos:column="39">.</op:operator><name pos:line="305" pos:column="40">SetLineState</name></name><argument_list pos:line="305" pos:column="52">(<argument><expr><name pos:line="305" pos:column="53">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="305" pos:column="66">(</op:operator><name pos:line="305" pos:column="67">xmode</name> <op:operator pos:line="305" pos:column="73">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="305" pos:column="76">4</lit:literal><op:operator pos:line="305" pos:column="77">)</op:operator> <op:operator pos:line="305" pos:column="79">|</op:operator> <name pos:line="305" pos:column="81">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="306" pos:column="33">lineCurrent</name><op:operator pos:line="306" pos:column="44">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="308" pos:column="13">sc</name><op:operator pos:line="308" pos:column="15">.</op:operator><name pos:line="308" pos:column="16">Forward</name></name><argument_list pos:line="308" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
         }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
      }</block></then></if>
   }</block></while>
   <expr_stmt><expr><call><name><name pos:line="312" pos:column="4">sc</name><op:operator pos:line="312" pos:column="6">.</op:operator><name pos:line="312" pos:column="7">Complete</name></name><argument_list pos:line="312" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="315" pos:column="1">// External stuff - used for dynamic-loading, not implemented in wxStyledTextCtrl yet.</comment>
<comment type="line" pos:line="316" pos:column="1">// Inspired by the caml external lexer - Credits to Robert Roessler - http://www.rftp.com</comment>
<cpp:ifdef pos:line="317" pos:column="1">#<cpp:directive pos:line="317" pos:column="2">ifdef</cpp:directive> <name pos:line="317" pos:column="8">BUILD_EXTERNAL_LEXER</name></cpp:ifdef>
<decl_stmt><decl><type><specifier pos:line="318" pos:column="1">static</specifier> <specifier pos:line="318" pos:column="8">const</specifier> <name pos:line="318" pos:column="14">char</name><type:modifier pos:line="318" pos:column="18">*</type:modifier></type> <name pos:line="318" pos:column="20">LexerName</name> <init pos:line="318" pos:column="30">= <expr><lit:literal type="string" pos:line="318" pos:column="32">"haskell"</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="320" pos:column="1">void</name> <name pos:line="320" pos:column="6">EXT_LEXER_DECL</name></type> <name pos:line="320" pos:column="21">Lex</name><parameter_list pos:line="320" pos:column="24">(<param><decl><type><name pos:line="320" pos:column="25">unsigned</name> <name pos:line="320" pos:column="34">int</name></type> <name pos:line="320" pos:column="38">lexer</name></decl></param>, <param><decl><type><name pos:line="320" pos:column="45">unsigned</name> <name pos:line="320" pos:column="54">int</name></type> <name pos:line="320" pos:column="58">startPos</name></decl></param>, <param><decl><type><name pos:line="320" pos:column="68">int</name></type> <name pos:line="320" pos:column="72">length</name></decl></param>, <param><decl><type><name pos:line="320" pos:column="80">int</name></type> <name pos:line="320" pos:column="84">initStyle</name></decl></param>,
                        <param><decl><type><name pos:line="321" pos:column="25">char</name> <type:modifier pos:line="321" pos:column="30">*</type:modifier></type><name><name pos:line="321" pos:column="31">words</name><index pos:line="321" pos:column="36">[]</index></name></decl></param>, <param><decl><type><name pos:line="321" pos:column="40">WindowID</name></type> <name pos:line="321" pos:column="49">window</name></decl></param>, <param><decl><type><name pos:line="321" pos:column="57">char</name> <type:modifier pos:line="321" pos:column="62">*</type:modifier></type><name pos:line="321" pos:column="63">props</name></decl></param>)</parameter_list>
<block pos:line="322" pos:column="1">{
   <decl_stmt><decl><type><name pos:line="323" pos:column="4">PropSetSimple</name></type> <name pos:line="323" pos:column="18">ps</name></decl>;</decl_stmt>
   <expr_stmt><expr><call><name><name pos:line="324" pos:column="4">ps</name><op:operator pos:line="324" pos:column="6">.</op:operator><name pos:line="324" pos:column="7">SetMultiple</name></name><argument_list pos:line="324" pos:column="18">(<argument><expr><name pos:line="324" pos:column="19">props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <function_decl><type><name pos:line="325" pos:column="4">WindowAccessor</name></type> <name pos:line="325" pos:column="19">wa</name><parameter_list pos:line="325" pos:column="21">(<param><decl><type><name pos:line="325" pos:column="22">window</name></type></decl></param>, <param><decl><type><name pos:line="325" pos:column="30">ps</name></type></decl></param>)</parameter_list>;</function_decl>

   <decl_stmt><decl><type><name pos:line="327" pos:column="4">int</name></type> <name pos:line="327" pos:column="8">nWL</name> <init pos:line="327" pos:column="12">= <expr><lit:literal type="number" pos:line="327" pos:column="14">0</lit:literal></expr></init></decl>;</decl_stmt>
   <for pos:line="328" pos:column="4">for (<init pos:line="328" pos:column="9">;</init> <condition><expr><name><name pos:line="328" pos:column="11">words</name><index pos:line="328" pos:column="16">[<expr><name pos:line="328" pos:column="17">nWL</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="328" pos:column="23">nWL</name><op:operator pos:line="328" pos:column="26">++</op:operator></expr></incr>) <empty_stmt pos:line="328" pos:column="30">;</empty_stmt></for>
   <decl_stmt><decl><type><name pos:line="329" pos:column="4">WordList</name><type:modifier pos:line="329" pos:column="12">*</type:modifier><type:modifier pos:line="329" pos:column="13">*</type:modifier></type> <name pos:line="329" pos:column="15">wl</name> <init pos:line="329" pos:column="18">= <expr><op:operator pos:line="329" pos:column="20">new</op:operator> <name pos:line="329" pos:column="24">WordList</name><op:operator pos:line="329" pos:column="32">*</op:operator> <index pos:line="329" pos:column="34">[<expr><name pos:line="329" pos:column="35">nWL</name> <op:operator pos:line="329" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="329" pos:column="41">1</lit:literal></expr>]</index></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name pos:line="330" pos:column="4">int</name></type> <name pos:line="330" pos:column="8">i</name> <init pos:line="330" pos:column="10">= <expr><lit:literal type="number" pos:line="330" pos:column="12">0</lit:literal></expr></init></decl>;</decl_stmt>
   <for pos:line="331" pos:column="4">for (<init pos:line="331" pos:column="9">;</init> <condition><expr><name pos:line="331" pos:column="11">i</name><op:operator pos:line="331" pos:column="12">&lt;</op:operator><name pos:line="331" pos:column="13">nWL</name></expr>;</condition> <incr><expr><name pos:line="331" pos:column="18">i</name><op:operator pos:line="331" pos:column="19">++</op:operator></expr></incr>)
   <block pos:line="332" pos:column="4">{
      <expr_stmt><expr><name><name pos:line="333" pos:column="7">wl</name><index pos:line="333" pos:column="9">[<expr><name pos:line="333" pos:column="10">i</name></expr>]</index></name> <op:operator pos:line="333" pos:column="13">=</op:operator> <op:operator pos:line="333" pos:column="15">new</op:operator> <call><name pos:line="333" pos:column="19">WordList</name><argument_list pos:line="333" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name pos:line="334" pos:column="7">wl</name><index pos:line="334" pos:column="9">[<expr><name pos:line="334" pos:column="10">i</name></expr>]</index></name><op:operator pos:line="334" pos:column="12">-&gt;</op:operator><call><name pos:line="334" pos:column="14">Set</name><argument_list pos:line="334" pos:column="17">(<argument><expr><name><name pos:line="334" pos:column="18">words</name><index pos:line="334" pos:column="23">[<expr><name pos:line="334" pos:column="24">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></for>
   <expr_stmt><expr><name><name pos:line="336" pos:column="4">wl</name><index pos:line="336" pos:column="6">[<expr><name pos:line="336" pos:column="7">i</name></expr>]</index></name> <op:operator pos:line="336" pos:column="10">=</op:operator> <lit:literal type="number" pos:line="336" pos:column="12">0</lit:literal></expr>;</expr_stmt>

   <expr_stmt><expr><call><name pos:line="338" pos:column="4">ColorizeHaskellDoc</name><argument_list pos:line="338" pos:column="22">(<argument><expr><name pos:line="338" pos:column="23">startPos</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="33">length</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="41">initStyle</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="52">wl</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="56">wa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name><name pos:line="339" pos:column="4">wa</name><op:operator pos:line="339" pos:column="6">.</op:operator><name pos:line="339" pos:column="7">Flush</name></name><argument_list pos:line="339" pos:column="12">()</argument_list></call></expr>;</expr_stmt>
   <for pos:line="340" pos:column="4">for (<init><expr><name pos:line="340" pos:column="9">i</name><op:operator pos:line="340" pos:column="10">=</op:operator><name pos:line="340" pos:column="11">nWL</name><op:operator pos:line="340" pos:column="14">-</op:operator><lit:literal type="number" pos:line="340" pos:column="15">1</lit:literal></expr>;</init><condition><expr><name pos:line="340" pos:column="17">i</name><op:operator pos:line="340" pos:column="18">&gt;=</op:operator><lit:literal type="number" pos:line="340" pos:column="20">0</lit:literal></expr>;</condition><incr><expr><name pos:line="340" pos:column="22">i</name><op:operator pos:line="340" pos:column="23">--</op:operator></expr></incr>)
      <expr_stmt><expr><op:operator pos:line="341" pos:column="7">delete</op:operator> <name><name pos:line="341" pos:column="14">wl</name><index pos:line="341" pos:column="16">[<expr><name pos:line="341" pos:column="17">i</name></expr>]</index></name></expr>;</expr_stmt></for>
   <expr_stmt><expr><op:operator pos:line="342" pos:column="4">delete</op:operator> <index pos:line="342" pos:column="11">[]</index> <name pos:line="342" pos:column="14">wl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="345" pos:column="1">void</name> <name pos:line="345" pos:column="6">EXT_LEXER_DECL</name></type> <name pos:line="345" pos:column="21">Fold</name> <parameter_list pos:line="345" pos:column="26">(<param><decl><type><name pos:line="345" pos:column="27">unsigned</name> <name pos:line="345" pos:column="36">int</name></type> <name pos:line="345" pos:column="40">lexer</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="47">unsigned</name> <name pos:line="345" pos:column="56">int</name></type> <name pos:line="345" pos:column="60">startPos</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="70">int</name></type> <name pos:line="345" pos:column="74">length</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="82">int</name></type> <name pos:line="345" pos:column="86">initStyle</name></decl></param>,
                        <param><decl><type><name pos:line="346" pos:column="25">char</name> <type:modifier pos:line="346" pos:column="30">*</type:modifier></type><name><name pos:line="346" pos:column="31">words</name><index pos:line="346" pos:column="36">[]</index></name></decl></param>, <param><decl><type><name pos:line="346" pos:column="40">WindowID</name></type> <name pos:line="346" pos:column="49">window</name></decl></param>, <param><decl><type><name pos:line="346" pos:column="57">char</name> <type:modifier pos:line="346" pos:column="62">*</type:modifier></type><name pos:line="346" pos:column="63">props</name></decl></param>)</parameter_list>
<block pos:line="347" pos:column="1">{

}</block></function>

<function><type><name pos:line="351" pos:column="1">int</name> <name pos:line="351" pos:column="5">EXT_LEXER_DECL</name></type> <name pos:line="351" pos:column="20">GetLexerCount</name><parameter_list pos:line="351" pos:column="33">()</parameter_list>
<block pos:line="352" pos:column="1">{
   <return pos:line="353" pos:column="4">return <expr><lit:literal type="number" pos:line="353" pos:column="11">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="356" pos:column="1">void</name> <name pos:line="356" pos:column="6">EXT_LEXER_DECL</name></type> <name pos:line="356" pos:column="21">GetLexerName</name><parameter_list pos:line="356" pos:column="33">(<param><decl><type><name pos:line="356" pos:column="34">unsigned</name> <name pos:line="356" pos:column="43">int</name></type> <name pos:line="356" pos:column="47">Index</name></decl></param>, <param><decl><type><name pos:line="356" pos:column="54">char</name> <type:modifier pos:line="356" pos:column="59">*</type:modifier></type><name pos:line="356" pos:column="60">name</name></decl></param>, <param><decl><type><name pos:line="356" pos:column="66">int</name></type> <name pos:line="356" pos:column="70">buflength</name></decl></param>)</parameter_list>
<block pos:line="357" pos:column="1">{
   <if pos:line="358" pos:column="4">if <condition pos:line="358" pos:column="7">(<expr><name pos:line="358" pos:column="8">buflength</name> <op:operator pos:line="358" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="358" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="358" pos:column="22"> <block pos:line="358" pos:column="23">{
      <expr_stmt><expr><name pos:line="359" pos:column="7">buflength</name><op:operator pos:line="359" pos:column="16">--</op:operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name pos:line="360" pos:column="7">int</name></type> <name pos:line="360" pos:column="11">n</name> <init pos:line="360" pos:column="13">= <expr><call><name pos:line="360" pos:column="15">strlen</name><argument_list pos:line="360" pos:column="21">(<argument><expr><name pos:line="360" pos:column="22">LexerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if pos:line="361" pos:column="7">if <condition pos:line="361" pos:column="10">(<expr><name pos:line="361" pos:column="11">n</name> <op:operator pos:line="361" pos:column="13">&gt;</op:operator> <name pos:line="361" pos:column="15">buflength</name></expr>)</condition><then pos:line="361" pos:column="25">
         <expr_stmt><expr><name pos:line="362" pos:column="10">n</name> <op:operator pos:line="362" pos:column="12">=</op:operator> <name pos:line="362" pos:column="14">buflength</name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name pos:line="363" pos:column="7">memcpy</name><argument_list pos:line="363" pos:column="13">(<argument><expr><name pos:line="363" pos:column="14">name</name></expr></argument>, <argument><expr><name pos:line="363" pos:column="20">LexerName</name></expr></argument>, <argument><expr><name pos:line="363" pos:column="31">n</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="363" pos:column="33">,</op:operator> <expr><name><name pos:line="363" pos:column="35">name</name><index pos:line="363" pos:column="39">[<expr><name pos:line="363" pos:column="40">n</name></expr>]</index></name> <op:operator pos:line="363" pos:column="43">=</op:operator> <lit:literal type="char" pos:line="363" pos:column="45">'\0'</lit:literal></expr>;</expr_stmt>
   }</block></then></if>
}</block></function>
<cpp:endif pos:line="366" pos:column="1">#<cpp:directive pos:line="366" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name pos:line="368" pos:column="1">LexerModule</name></type> <name pos:line="368" pos:column="13">lmHaskell</name><argument_list pos:line="368" pos:column="22">(<argument><expr><name pos:line="368" pos:column="23">SCLEX_HASKELL</name></expr></argument>, <argument><expr><name pos:line="368" pos:column="38">ColorizeHaskellDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="368" pos:column="58">"haskell"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
