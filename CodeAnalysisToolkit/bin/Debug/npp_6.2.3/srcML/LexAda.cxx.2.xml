<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexAda.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexAda.cxx
 ** Lexer for Ada 95
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2002 by Sergey Koshcheyev &lt;sergey.k@seznam.cz&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="31" pos:column="1">/*
 * Interface
 */</comment>

<function_decl><type><specifier pos:line="35" pos:column="1">static</specifier> <name pos:line="35" pos:column="8">void</name></type> <name pos:line="35" pos:column="13">ColouriseDocument</name><parameter_list pos:line="35" pos:column="30">(
    <param><decl><type><name pos:line="36" pos:column="5">unsigned</name> <name pos:line="36" pos:column="14">int</name></type> <name pos:line="36" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="37" pos:column="5">int</name></type> <name pos:line="37" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="38" pos:column="5">int</name></type> <name pos:line="38" pos:column="9">initStyle</name></decl></param>,
    <param><decl><type><name pos:line="39" pos:column="5">WordList</name> <type:modifier pos:line="39" pos:column="14">*</type:modifier></type><name><name pos:line="39" pos:column="15">keywordlists</name><index pos:line="39" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="40" pos:column="5">Accessor</name> <type:modifier pos:line="40" pos:column="14">&amp;</type:modifier></type><name pos:line="40" pos:column="15">styler</name></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier pos:line="42" pos:column="1">static</specifier> <specifier pos:line="42" pos:column="8">const</specifier> <name pos:line="42" pos:column="14">char</name> <type:modifier pos:line="42" pos:column="19">*</type:modifier> <specifier pos:line="42" pos:column="21">const</specifier></type> <name><name pos:line="42" pos:column="27">adaWordListDesc</name><index pos:line="42" pos:column="42">[]</index></name> <init pos:line="42" pos:column="45">= <expr><block pos:line="42" pos:column="47">{
	<expr><lit:literal type="string" pos:line="43" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="44" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="47" pos:column="1">LexerModule</name></type> <name pos:line="47" pos:column="13">lmAda</name><argument_list pos:line="47" pos:column="18">(<argument><expr><name pos:line="47" pos:column="19">SCLEX_ADA</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="30">ColouriseDocument</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="47" pos:column="49">"ada"</lit:literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="56">NULL</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="62">adaWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" pos:line="49" pos:column="1">/*
 * Implementation
 */</comment>

<comment type="line" pos:line="53" pos:column="1">// Functions that have apostropheStartsAttribute as a parameter set it according to whether</comment>
<comment type="line" pos:line="54" pos:column="1">// an apostrophe encountered after processing the current token will start an attribute or</comment>
<comment type="line" pos:line="55" pos:column="1">// a character literal.</comment>
<function_decl><type><specifier pos:line="56" pos:column="1">static</specifier> <name pos:line="56" pos:column="8">void</name></type> <name pos:line="56" pos:column="13">ColouriseCharacter</name><parameter_list pos:line="56" pos:column="31">(<param><decl><type><name pos:line="56" pos:column="32">StyleContext</name><type:modifier pos:line="56" pos:column="44">&amp;</type:modifier></type> <name pos:line="56" pos:column="46">sc</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="50">bool</name><type:modifier pos:line="56" pos:column="54">&amp;</type:modifier></type> <name pos:line="56" pos:column="56">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="57" pos:column="1">static</specifier> <name pos:line="57" pos:column="8">void</name></type> <name pos:line="57" pos:column="13">ColouriseComment</name><parameter_list pos:line="57" pos:column="29">(<param><decl><type><name pos:line="57" pos:column="30">StyleContext</name><type:modifier pos:line="57" pos:column="42">&amp;</type:modifier></type> <name pos:line="57" pos:column="44">sc</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="48">bool</name><type:modifier pos:line="57" pos:column="52">&amp;</type:modifier></type> <name pos:line="57" pos:column="54">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="58" pos:column="1">static</specifier> <name pos:line="58" pos:column="8">void</name></type> <name pos:line="58" pos:column="13">ColouriseContext</name><parameter_list pos:line="58" pos:column="29">(<param><decl><type><name pos:line="58" pos:column="30">StyleContext</name><type:modifier pos:line="58" pos:column="42">&amp;</type:modifier></type> <name pos:line="58" pos:column="44">sc</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="48">char</name></type> <name pos:line="58" pos:column="53">chEnd</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="60">int</name></type> <name pos:line="58" pos:column="64">stateEOL</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="59" pos:column="1">static</specifier> <name pos:line="59" pos:column="8">void</name></type> <name pos:line="59" pos:column="13">ColouriseDelimiter</name><parameter_list pos:line="59" pos:column="31">(<param><decl><type><name pos:line="59" pos:column="32">StyleContext</name><type:modifier pos:line="59" pos:column="44">&amp;</type:modifier></type> <name pos:line="59" pos:column="46">sc</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="50">bool</name><type:modifier pos:line="59" pos:column="54">&amp;</type:modifier></type> <name pos:line="59" pos:column="56">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="60" pos:column="1">static</specifier> <name pos:line="60" pos:column="8">void</name></type> <name pos:line="60" pos:column="13">ColouriseLabel</name><parameter_list pos:line="60" pos:column="27">(<param><decl><type><name pos:line="60" pos:column="28">StyleContext</name><type:modifier pos:line="60" pos:column="40">&amp;</type:modifier></type> <name pos:line="60" pos:column="42">sc</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="46">WordList</name><type:modifier pos:line="60" pos:column="54">&amp;</type:modifier></type> <name pos:line="60" pos:column="56">keywords</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="66">bool</name><type:modifier pos:line="60" pos:column="70">&amp;</type:modifier></type> <name pos:line="60" pos:column="72">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="61" pos:column="1">static</specifier> <name pos:line="61" pos:column="8">void</name></type> <name pos:line="61" pos:column="13">ColouriseNumber</name><parameter_list pos:line="61" pos:column="28">(<param><decl><type><name pos:line="61" pos:column="29">StyleContext</name><type:modifier pos:line="61" pos:column="41">&amp;</type:modifier></type> <name pos:line="61" pos:column="43">sc</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="47">bool</name><type:modifier pos:line="61" pos:column="51">&amp;</type:modifier></type> <name pos:line="61" pos:column="53">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="62" pos:column="1">static</specifier> <name pos:line="62" pos:column="8">void</name></type> <name pos:line="62" pos:column="13">ColouriseString</name><parameter_list pos:line="62" pos:column="28">(<param><decl><type><name pos:line="62" pos:column="29">StyleContext</name><type:modifier pos:line="62" pos:column="41">&amp;</type:modifier></type> <name pos:line="62" pos:column="43">sc</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="47">bool</name><type:modifier pos:line="62" pos:column="51">&amp;</type:modifier></type> <name pos:line="62" pos:column="53">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="63" pos:column="1">static</specifier> <name pos:line="63" pos:column="8">void</name></type> <name pos:line="63" pos:column="13">ColouriseWhiteSpace</name><parameter_list pos:line="63" pos:column="32">(<param><decl><type><name pos:line="63" pos:column="33">StyleContext</name><type:modifier pos:line="63" pos:column="45">&amp;</type:modifier></type> <name pos:line="63" pos:column="47">sc</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="51">bool</name><type:modifier pos:line="63" pos:column="55">&amp;</type:modifier></type> <name pos:line="63" pos:column="57">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="64" pos:column="1">static</specifier> <name pos:line="64" pos:column="8">void</name></type> <name pos:line="64" pos:column="13">ColouriseWord</name><parameter_list pos:line="64" pos:column="26">(<param><decl><type><name pos:line="64" pos:column="27">StyleContext</name><type:modifier pos:line="64" pos:column="39">&amp;</type:modifier></type> <name pos:line="64" pos:column="41">sc</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="45">WordList</name><type:modifier pos:line="64" pos:column="53">&amp;</type:modifier></type> <name pos:line="64" pos:column="55">keywords</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="65">bool</name><type:modifier pos:line="64" pos:column="69">&amp;</type:modifier></type> <name pos:line="64" pos:column="71">apostropheStartsAttribute</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier pos:line="66" pos:column="1">static</specifier> <specifier pos:line="66" pos:column="8">inline</specifier> <name pos:line="66" pos:column="15">bool</name></type> <name pos:line="66" pos:column="20">IsDelimiterCharacter</name><parameter_list pos:line="66" pos:column="40">(<param><decl><type><name pos:line="66" pos:column="41">int</name></type> <name pos:line="66" pos:column="45">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="67" pos:column="1">static</specifier> <specifier pos:line="67" pos:column="8">inline</specifier> <name pos:line="67" pos:column="15">bool</name></type> <name pos:line="67" pos:column="20">IsNumberStartCharacter</name><parameter_list pos:line="67" pos:column="42">(<param><decl><type><name pos:line="67" pos:column="43">int</name></type> <name pos:line="67" pos:column="47">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="68" pos:column="1">static</specifier> <specifier pos:line="68" pos:column="8">inline</specifier> <name pos:line="68" pos:column="15">bool</name></type> <name pos:line="68" pos:column="20">IsNumberCharacter</name><parameter_list pos:line="68" pos:column="37">(<param><decl><type><name pos:line="68" pos:column="38">int</name></type> <name pos:line="68" pos:column="42">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="69" pos:column="1">static</specifier> <specifier pos:line="69" pos:column="8">inline</specifier> <name pos:line="69" pos:column="15">bool</name></type> <name pos:line="69" pos:column="20">IsSeparatorOrDelimiterCharacter</name><parameter_list pos:line="69" pos:column="51">(<param><decl><type><name pos:line="69" pos:column="52">int</name></type> <name pos:line="69" pos:column="56">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="70" pos:column="1">static</specifier> <name pos:line="70" pos:column="8">bool</name></type> <name pos:line="70" pos:column="13">IsValidIdentifier</name><parameter_list pos:line="70" pos:column="30">(<param><decl><type><specifier pos:line="70" pos:column="31">const</specifier> <name><name pos:line="70" pos:column="37">std</name><op:operator pos:line="70" pos:column="40">::</op:operator><name pos:line="70" pos:column="42">string</name></name><type:modifier pos:line="70" pos:column="48">&amp;</type:modifier></type> <name pos:line="70" pos:column="50">identifier</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="71" pos:column="1">static</specifier> <name pos:line="71" pos:column="8">bool</name></type> <name pos:line="71" pos:column="13">IsValidNumber</name><parameter_list pos:line="71" pos:column="26">(<param><decl><type><specifier pos:line="71" pos:column="27">const</specifier> <name><name pos:line="71" pos:column="33">std</name><op:operator pos:line="71" pos:column="36">::</op:operator><name pos:line="71" pos:column="38">string</name></name><type:modifier pos:line="71" pos:column="44">&amp;</type:modifier></type> <name pos:line="71" pos:column="46">number</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="72" pos:column="1">static</specifier> <specifier pos:line="72" pos:column="8">inline</specifier> <name pos:line="72" pos:column="15">bool</name></type> <name pos:line="72" pos:column="20">IsWordStartCharacter</name><parameter_list pos:line="72" pos:column="40">(<param><decl><type><name pos:line="72" pos:column="41">int</name></type> <name pos:line="72" pos:column="45">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="73" pos:column="1">static</specifier> <specifier pos:line="73" pos:column="8">inline</specifier> <name pos:line="73" pos:column="15">bool</name></type> <name pos:line="73" pos:column="20">IsWordCharacter</name><parameter_list pos:line="73" pos:column="35">(<param><decl><type><name pos:line="73" pos:column="36">int</name></type> <name pos:line="73" pos:column="40">ch</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier pos:line="75" pos:column="1">static</specifier> <name pos:line="75" pos:column="8">void</name></type> <name pos:line="75" pos:column="13">ColouriseCharacter</name><parameter_list pos:line="75" pos:column="31">(<param><decl><type><name pos:line="75" pos:column="32">StyleContext</name><type:modifier pos:line="75" pos:column="44">&amp;</type:modifier></type> <name pos:line="75" pos:column="46">sc</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="50">bool</name><type:modifier pos:line="75" pos:column="54">&amp;</type:modifier></type> <name pos:line="75" pos:column="56">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="75" pos:column="83">{
	<expr_stmt><expr><name pos:line="76" pos:column="9">apostropheStartsAttribute</name> <op:operator pos:line="76" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="76" pos:column="37">true</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="78" pos:column="9">sc</name><op:operator pos:line="78" pos:column="11">.</op:operator><name pos:line="78" pos:column="12">SetState</name></name><argument_list pos:line="78" pos:column="20">(<argument><expr><name pos:line="78" pos:column="21">SCE_ADA_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="80" pos:column="9">// Skip the apostrophe and one more character (so that '' is shown as non-terminated and '''</comment>
	<comment type="line" pos:line="81" pos:column="9">// is handled correctly)</comment>
	<expr_stmt><expr><call><name><name pos:line="82" pos:column="9">sc</name><op:operator pos:line="82" pos:column="11">.</op:operator><name pos:line="82" pos:column="12">Forward</name></name><argument_list pos:line="82" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="83" pos:column="9">sc</name><op:operator pos:line="83" pos:column="11">.</op:operator><name pos:line="83" pos:column="12">Forward</name></name><argument_list pos:line="83" pos:column="19">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="85" pos:column="9">ColouriseContext</name><argument_list pos:line="85" pos:column="25">(<argument><expr><name pos:line="85" pos:column="26">sc</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="85" pos:column="30">'\''</lit:literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="36">SCE_ADA_CHARACTEREOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="88" pos:column="1">static</specifier> <name pos:line="88" pos:column="8">void</name></type> <name pos:line="88" pos:column="13">ColouriseContext</name><parameter_list pos:line="88" pos:column="29">(<param><decl><type><name pos:line="88" pos:column="30">StyleContext</name><type:modifier pos:line="88" pos:column="42">&amp;</type:modifier></type> <name pos:line="88" pos:column="44">sc</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="48">char</name></type> <name pos:line="88" pos:column="53">chEnd</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="60">int</name></type> <name pos:line="88" pos:column="64">stateEOL</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="74">{
	<while pos:line="89" pos:column="9">while <condition pos:line="89" pos:column="15">(<expr><op:operator pos:line="89" pos:column="16">!</op:operator><name><name pos:line="89" pos:column="17">sc</name><op:operator pos:line="89" pos:column="19">.</op:operator><name pos:line="89" pos:column="20">atLineEnd</name></name> <op:operator pos:line="89" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="89" pos:column="33">!</op:operator><call><name><name pos:line="89" pos:column="34">sc</name><op:operator pos:line="89" pos:column="36">.</op:operator><name pos:line="89" pos:column="37">Match</name></name><argument_list pos:line="89" pos:column="42">(<argument><expr><name pos:line="89" pos:column="43">chEnd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="89" pos:column="51">{
		<expr_stmt><expr><call><name><name pos:line="90" pos:column="17">sc</name><op:operator pos:line="90" pos:column="19">.</op:operator><name pos:line="90" pos:column="20">Forward</name></name><argument_list pos:line="90" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><op:operator pos:line="93" pos:column="13">!</op:operator><name><name pos:line="93" pos:column="14">sc</name><op:operator pos:line="93" pos:column="16">.</op:operator><name pos:line="93" pos:column="17">atLineEnd</name></name></expr>)</condition><then pos:line="93" pos:column="27"> <block pos:line="93" pos:column="28">{
		<expr_stmt><expr><call><name><name pos:line="94" pos:column="17">sc</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">ForwardSetState</name></name><argument_list pos:line="94" pos:column="35">(<argument><expr><name pos:line="94" pos:column="36">SCE_ADA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="95" pos:column="11">else <block pos:line="95" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="96" pos:column="17">sc</name><op:operator pos:line="96" pos:column="19">.</op:operator><name pos:line="96" pos:column="20">ChangeState</name></name><argument_list pos:line="96" pos:column="31">(<argument><expr><name pos:line="96" pos:column="32">stateEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="100" pos:column="1">static</specifier> <name pos:line="100" pos:column="8">void</name></type> <name pos:line="100" pos:column="13">ColouriseComment</name><parameter_list pos:line="100" pos:column="29">(<param><decl><type><name pos:line="100" pos:column="30">StyleContext</name><type:modifier pos:line="100" pos:column="42">&amp;</type:modifier></type> <name pos:line="100" pos:column="44">sc</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="48">bool</name><type:modifier pos:line="100" pos:column="52">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="100" pos:column="54">/*apostropheStartsAttribute*/</comment>)</parameter_list> <block pos:line="100" pos:column="85">{
	<comment type="line" pos:line="101" pos:column="9">// Apostrophe meaning is not changed, but the parameter is present for uniformity</comment>

	<expr_stmt><expr><call><name><name pos:line="103" pos:column="9">sc</name><op:operator pos:line="103" pos:column="11">.</op:operator><name pos:line="103" pos:column="12">SetState</name></name><argument_list pos:line="103" pos:column="20">(<argument><expr><name pos:line="103" pos:column="21">SCE_ADA_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while pos:line="105" pos:column="9">while <condition pos:line="105" pos:column="15">(<expr><op:operator pos:line="105" pos:column="16">!</op:operator><name><name pos:line="105" pos:column="17">sc</name><op:operator pos:line="105" pos:column="19">.</op:operator><name pos:line="105" pos:column="20">atLineEnd</name></name></expr>)</condition> <block pos:line="105" pos:column="31">{
		<expr_stmt><expr><call><name><name pos:line="106" pos:column="17">sc</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">Forward</name></name><argument_list pos:line="106" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><specifier pos:line="110" pos:column="1">static</specifier> <name pos:line="110" pos:column="8">void</name></type> <name pos:line="110" pos:column="13">ColouriseDelimiter</name><parameter_list pos:line="110" pos:column="31">(<param><decl><type><name pos:line="110" pos:column="32">StyleContext</name><type:modifier pos:line="110" pos:column="44">&amp;</type:modifier></type> <name pos:line="110" pos:column="46">sc</name></decl></param>, <param><decl><type><name pos:line="110" pos:column="50">bool</name><type:modifier pos:line="110" pos:column="54">&amp;</type:modifier></type> <name pos:line="110" pos:column="56">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="110" pos:column="83">{
	<expr_stmt><expr><name pos:line="111" pos:column="9">apostropheStartsAttribute</name> <op:operator pos:line="111" pos:column="35">=</op:operator> <call><name><name pos:line="111" pos:column="37">sc</name><op:operator pos:line="111" pos:column="39">.</op:operator><name pos:line="111" pos:column="40">Match</name></name> <argument_list pos:line="111" pos:column="46">(<argument><expr><lit:literal type="char" pos:line="111" pos:column="47">')'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="112" pos:column="9">sc</name><op:operator pos:line="112" pos:column="11">.</op:operator><name pos:line="112" pos:column="12">SetState</name></name><argument_list pos:line="112" pos:column="20">(<argument><expr><name pos:line="112" pos:column="21">SCE_ADA_DELIMITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="113" pos:column="9">sc</name><op:operator pos:line="113" pos:column="11">.</op:operator><name pos:line="113" pos:column="12">ForwardSetState</name></name><argument_list pos:line="113" pos:column="27">(<argument><expr><name pos:line="113" pos:column="28">SCE_ADA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="116" pos:column="1">static</specifier> <name pos:line="116" pos:column="8">void</name></type> <name pos:line="116" pos:column="13">ColouriseLabel</name><parameter_list pos:line="116" pos:column="27">(<param><decl><type><name pos:line="116" pos:column="28">StyleContext</name><type:modifier pos:line="116" pos:column="40">&amp;</type:modifier></type> <name pos:line="116" pos:column="42">sc</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="46">WordList</name><type:modifier pos:line="116" pos:column="54">&amp;</type:modifier></type> <name pos:line="116" pos:column="56">keywords</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="66">bool</name><type:modifier pos:line="116" pos:column="70">&amp;</type:modifier></type> <name pos:line="116" pos:column="72">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="116" pos:column="99">{
	<expr_stmt><expr><name pos:line="117" pos:column="9">apostropheStartsAttribute</name> <op:operator pos:line="117" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="117" pos:column="37">false</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="119" pos:column="9">sc</name><op:operator pos:line="119" pos:column="11">.</op:operator><name pos:line="119" pos:column="12">SetState</name></name><argument_list pos:line="119" pos:column="20">(<argument><expr><name pos:line="119" pos:column="21">SCE_ADA_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="121" pos:column="9">// Skip "&lt;&lt;"</comment>
	<expr_stmt><expr><call><name><name pos:line="122" pos:column="9">sc</name><op:operator pos:line="122" pos:column="11">.</op:operator><name pos:line="122" pos:column="12">Forward</name></name><argument_list pos:line="122" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="123" pos:column="9">sc</name><op:operator pos:line="123" pos:column="11">.</op:operator><name pos:line="123" pos:column="12">Forward</name></name><argument_list pos:line="123" pos:column="19">()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name pos:line="125" pos:column="9">std</name><op:operator pos:line="125" pos:column="12">::</op:operator><name pos:line="125" pos:column="14">string</name></name></type> <name pos:line="125" pos:column="21">identifier</name></decl>;</decl_stmt>

	<while pos:line="127" pos:column="9">while <condition pos:line="127" pos:column="15">(<expr><op:operator pos:line="127" pos:column="16">!</op:operator><name><name pos:line="127" pos:column="17">sc</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">atLineEnd</name></name> <op:operator pos:line="127" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="127" pos:column="33">!</op:operator><call><name pos:line="127" pos:column="34">IsSeparatorOrDelimiterCharacter</name><argument_list pos:line="127" pos:column="65">(<argument><expr><name><name pos:line="127" pos:column="66">sc</name><op:operator pos:line="127" pos:column="68">.</op:operator><name pos:line="127" pos:column="69">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="127" pos:column="74">{
		<expr_stmt><expr><name pos:line="128" pos:column="17">identifier</name> <op:operator pos:line="128" pos:column="28">+=</op:operator> <call><name><name pos:line="128" pos:column="31">static_cast</name><argument_list pos:line="128" pos:column="42">&lt;<argument><expr><name pos:line="128" pos:column="43">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="128" pos:column="48">(<argument><expr><call><name pos:line="128" pos:column="49">tolower</name><argument_list pos:line="128" pos:column="56">(<argument><expr><name><name pos:line="128" pos:column="57">sc</name><op:operator pos:line="128" pos:column="59">.</op:operator><name pos:line="128" pos:column="60">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="129" pos:column="17">sc</name><op:operator pos:line="129" pos:column="19">.</op:operator><name pos:line="129" pos:column="20">Forward</name></name><argument_list pos:line="129" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<comment type="line" pos:line="132" pos:column="9">// Skip "&gt;&gt;"</comment>
	<if pos:line="133" pos:column="9">if <condition pos:line="133" pos:column="12">(<expr><call><name><name pos:line="133" pos:column="13">sc</name><op:operator pos:line="133" pos:column="15">.</op:operator><name pos:line="133" pos:column="16">Match</name></name><argument_list pos:line="133" pos:column="21">(<argument><expr><lit:literal type="char" pos:line="133" pos:column="22">'&gt;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="133" pos:column="27">'&gt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="133" pos:column="32"> <block pos:line="133" pos:column="33">{
		<expr_stmt><expr><call><name><name pos:line="134" pos:column="17">sc</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">Forward</name></name><argument_list pos:line="134" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="135" pos:column="17">sc</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">Forward</name></name><argument_list pos:line="135" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="136" pos:column="11">else <block pos:line="136" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="137" pos:column="17">sc</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">ChangeState</name></name><argument_list pos:line="137" pos:column="31">(<argument><expr><name pos:line="137" pos:column="32">SCE_ADA_ILLEGAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<comment type="line" pos:line="140" pos:column="9">// If the name is an invalid identifier or a keyword, then make it invalid label</comment>
	<if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><op:operator pos:line="141" pos:column="13">!</op:operator><call><name pos:line="141" pos:column="14">IsValidIdentifier</name><argument_list pos:line="141" pos:column="31">(<argument><expr><name pos:line="141" pos:column="32">identifier</name></expr></argument>)</argument_list></call> <op:operator pos:line="141" pos:column="44">||</op:operator> <call><name><name pos:line="141" pos:column="47">keywords</name><op:operator pos:line="141" pos:column="55">.</op:operator><name pos:line="141" pos:column="56">InList</name></name><argument_list pos:line="141" pos:column="62">(<argument><expr><call><name><name pos:line="141" pos:column="63">identifier</name><op:operator pos:line="141" pos:column="73">.</op:operator><name pos:line="141" pos:column="74">c_str</name></name><argument_list pos:line="141" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="141" pos:column="83"> <block pos:line="141" pos:column="84">{
		<expr_stmt><expr><call><name><name pos:line="142" pos:column="17">sc</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">ChangeState</name></name><argument_list pos:line="142" pos:column="31">(<argument><expr><name pos:line="142" pos:column="32">SCE_ADA_ILLEGAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="145" pos:column="9">sc</name><op:operator pos:line="145" pos:column="11">.</op:operator><name pos:line="145" pos:column="12">SetState</name></name><argument_list pos:line="145" pos:column="20">(<argument><expr><name pos:line="145" pos:column="21">SCE_ADA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><specifier pos:line="149" pos:column="1">static</specifier> <name pos:line="149" pos:column="8">void</name></type> <name pos:line="149" pos:column="13">ColouriseNumber</name><parameter_list pos:line="149" pos:column="28">(<param><decl><type><name pos:line="149" pos:column="29">StyleContext</name><type:modifier pos:line="149" pos:column="41">&amp;</type:modifier></type> <name pos:line="149" pos:column="43">sc</name></decl></param>, <param><decl><type><name pos:line="149" pos:column="47">bool</name><type:modifier pos:line="149" pos:column="51">&amp;</type:modifier></type> <name pos:line="149" pos:column="53">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="149" pos:column="80">{
	<expr_stmt><expr><name pos:line="150" pos:column="9">apostropheStartsAttribute</name> <op:operator pos:line="150" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="150" pos:column="37">true</lit:literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name pos:line="152" pos:column="9">std</name><op:operator pos:line="152" pos:column="12">::</op:operator><name pos:line="152" pos:column="14">string</name></name></type> <name pos:line="152" pos:column="21">number</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="153" pos:column="9">sc</name><op:operator pos:line="153" pos:column="11">.</op:operator><name pos:line="153" pos:column="12">SetState</name></name><argument_list pos:line="153" pos:column="20">(<argument><expr><name pos:line="153" pos:column="21">SCE_ADA_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="155" pos:column="9">// Get all characters up to a delimiter or a separator, including points, but excluding</comment>
	<comment type="line" pos:line="156" pos:column="9">// double points (ranges).</comment>
	<while pos:line="157" pos:column="9">while <condition pos:line="157" pos:column="15">(<expr><op:operator pos:line="157" pos:column="16">!</op:operator><call><name pos:line="157" pos:column="17">IsSeparatorOrDelimiterCharacter</name><argument_list pos:line="157" pos:column="48">(<argument><expr><name><name pos:line="157" pos:column="49">sc</name><op:operator pos:line="157" pos:column="51">.</op:operator><name pos:line="157" pos:column="52">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="157" pos:column="56">||</op:operator> <op:operator pos:line="157" pos:column="59">(</op:operator><name><name pos:line="157" pos:column="60">sc</name><op:operator pos:line="157" pos:column="62">.</op:operator><name pos:line="157" pos:column="63">ch</name></name> <op:operator pos:line="157" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="157" pos:column="69">'.'</lit:literal> <op:operator pos:line="157" pos:column="73">&amp;&amp;</op:operator> <name><name pos:line="157" pos:column="76">sc</name><op:operator pos:line="157" pos:column="78">.</op:operator><name pos:line="157" pos:column="79">chNext</name></name> <op:operator pos:line="157" pos:column="86">!=</op:operator> <lit:literal type="char" pos:line="157" pos:column="89">'.'</lit:literal><op:operator pos:line="157" pos:column="92">)</op:operator></expr>)</condition> <block pos:line="157" pos:column="95">{
		<expr_stmt><expr><name pos:line="158" pos:column="17">number</name> <op:operator pos:line="158" pos:column="24">+=</op:operator> <call><name><name pos:line="158" pos:column="27">static_cast</name><argument_list pos:line="158" pos:column="38">&lt;<argument><expr><name pos:line="158" pos:column="39">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="158" pos:column="44">(<argument><expr><name><name pos:line="158" pos:column="45">sc</name><op:operator pos:line="158" pos:column="47">.</op:operator><name pos:line="158" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="159" pos:column="17">sc</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">Forward</name></name><argument_list pos:line="159" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<comment type="line" pos:line="162" pos:column="9">// Special case: exponent with sign</comment>
	<if pos:line="163" pos:column="9">if <condition pos:line="163" pos:column="12">(<expr><op:operator pos:line="163" pos:column="13">(</op:operator><name><name pos:line="163" pos:column="14">sc</name><op:operator pos:line="163" pos:column="16">.</op:operator><name pos:line="163" pos:column="17">chPrev</name></name> <op:operator pos:line="163" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="163" pos:column="27">'e'</lit:literal> <op:operator pos:line="163" pos:column="31">||</op:operator> <name><name pos:line="163" pos:column="34">sc</name><op:operator pos:line="163" pos:column="36">.</op:operator><name pos:line="163" pos:column="37">chPrev</name></name> <op:operator pos:line="163" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="163" pos:column="47">'E'</lit:literal><op:operator pos:line="163" pos:column="50">)</op:operator> <op:operator pos:line="163" pos:column="52">&amp;&amp;</op:operator>
	        <op:operator pos:line="164" pos:column="17">(</op:operator><name><name pos:line="164" pos:column="18">sc</name><op:operator pos:line="164" pos:column="20">.</op:operator><name pos:line="164" pos:column="21">ch</name></name> <op:operator pos:line="164" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="164" pos:column="27">'+'</lit:literal> <op:operator pos:line="164" pos:column="31">||</op:operator> <name><name pos:line="164" pos:column="34">sc</name><op:operator pos:line="164" pos:column="36">.</op:operator><name pos:line="164" pos:column="37">ch</name></name> <op:operator pos:line="164" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="164" pos:column="43">'-'</lit:literal><op:operator pos:line="164" pos:column="46">)</op:operator></expr>)</condition><then pos:line="164" pos:column="48"> <block pos:line="164" pos:column="49">{
		<expr_stmt><expr><name pos:line="165" pos:column="17">number</name> <op:operator pos:line="165" pos:column="24">+=</op:operator> <call><name><name pos:line="165" pos:column="27">static_cast</name><argument_list pos:line="165" pos:column="38">&lt;<argument><expr><name pos:line="165" pos:column="39">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="165" pos:column="44">(<argument><expr><name><name pos:line="165" pos:column="45">sc</name><op:operator pos:line="165" pos:column="47">.</op:operator><name pos:line="165" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="166" pos:column="17">sc</name><op:operator pos:line="166" pos:column="19">.</op:operator><name pos:line="166" pos:column="20">Forward</name></name> <argument_list pos:line="166" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

		<while pos:line="168" pos:column="17">while <condition pos:line="168" pos:column="23">(<expr><op:operator pos:line="168" pos:column="24">!</op:operator><call><name pos:line="168" pos:column="25">IsSeparatorOrDelimiterCharacter</name><argument_list pos:line="168" pos:column="56">(<argument><expr><name><name pos:line="168" pos:column="57">sc</name><op:operator pos:line="168" pos:column="59">.</op:operator><name pos:line="168" pos:column="60">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="168" pos:column="65">{
			<expr_stmt><expr><name pos:line="169" pos:column="25">number</name> <op:operator pos:line="169" pos:column="32">+=</op:operator> <call><name><name pos:line="169" pos:column="35">static_cast</name><argument_list pos:line="169" pos:column="46">&lt;<argument><expr><name pos:line="169" pos:column="47">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="169" pos:column="52">(<argument><expr><name><name pos:line="169" pos:column="53">sc</name><op:operator pos:line="169" pos:column="55">.</op:operator><name pos:line="169" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="170" pos:column="25">sc</name><op:operator pos:line="170" pos:column="27">.</op:operator><name pos:line="170" pos:column="28">Forward</name></name><argument_list pos:line="170" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>

	<if pos:line="174" pos:column="9">if <condition pos:line="174" pos:column="12">(<expr><op:operator pos:line="174" pos:column="13">!</op:operator><call><name pos:line="174" pos:column="14">IsValidNumber</name><argument_list pos:line="174" pos:column="27">(<argument><expr><name pos:line="174" pos:column="28">number</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="174" pos:column="36"> <block pos:line="174" pos:column="37">{
		<expr_stmt><expr><call><name><name pos:line="175" pos:column="17">sc</name><op:operator pos:line="175" pos:column="19">.</op:operator><name pos:line="175" pos:column="20">ChangeState</name></name><argument_list pos:line="175" pos:column="31">(<argument><expr><name pos:line="175" pos:column="32">SCE_ADA_ILLEGAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="178" pos:column="9">sc</name><op:operator pos:line="178" pos:column="11">.</op:operator><name pos:line="178" pos:column="12">SetState</name></name><argument_list pos:line="178" pos:column="20">(<argument><expr><name pos:line="178" pos:column="21">SCE_ADA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="181" pos:column="1">static</specifier> <name pos:line="181" pos:column="8">void</name></type> <name pos:line="181" pos:column="13">ColouriseString</name><parameter_list pos:line="181" pos:column="28">(<param><decl><type><name pos:line="181" pos:column="29">StyleContext</name><type:modifier pos:line="181" pos:column="41">&amp;</type:modifier></type> <name pos:line="181" pos:column="43">sc</name></decl></param>, <param><decl><type><name pos:line="181" pos:column="47">bool</name><type:modifier pos:line="181" pos:column="51">&amp;</type:modifier></type> <name pos:line="181" pos:column="53">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="181" pos:column="80">{
	<expr_stmt><expr><name pos:line="182" pos:column="9">apostropheStartsAttribute</name> <op:operator pos:line="182" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="182" pos:column="37">true</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="184" pos:column="9">sc</name><op:operator pos:line="184" pos:column="11">.</op:operator><name pos:line="184" pos:column="12">SetState</name></name><argument_list pos:line="184" pos:column="20">(<argument><expr><name pos:line="184" pos:column="21">SCE_ADA_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="185" pos:column="9">sc</name><op:operator pos:line="185" pos:column="11">.</op:operator><name pos:line="185" pos:column="12">Forward</name></name><argument_list pos:line="185" pos:column="19">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="187" pos:column="9">ColouriseContext</name><argument_list pos:line="187" pos:column="25">(<argument><expr><name pos:line="187" pos:column="26">sc</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="187" pos:column="30">'"'</lit:literal></expr></argument>, <argument><expr><name pos:line="187" pos:column="35">SCE_ADA_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="190" pos:column="1">static</specifier> <name pos:line="190" pos:column="8">void</name></type> <name pos:line="190" pos:column="13">ColouriseWhiteSpace</name><parameter_list pos:line="190" pos:column="32">(<param><decl><type><name pos:line="190" pos:column="33">StyleContext</name><type:modifier pos:line="190" pos:column="45">&amp;</type:modifier></type> <name pos:line="190" pos:column="47">sc</name></decl></param>, <param><decl><type><name pos:line="190" pos:column="51">bool</name><type:modifier pos:line="190" pos:column="55">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="190" pos:column="57">/*apostropheStartsAttribute*/</comment>)</parameter_list> <block pos:line="190" pos:column="88">{
	<comment type="line" pos:line="191" pos:column="9">// Apostrophe meaning is not changed, but the parameter is present for uniformity</comment>
	<expr_stmt><expr><call><name><name pos:line="192" pos:column="9">sc</name><op:operator pos:line="192" pos:column="11">.</op:operator><name pos:line="192" pos:column="12">SetState</name></name><argument_list pos:line="192" pos:column="20">(<argument><expr><name pos:line="192" pos:column="21">SCE_ADA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="193" pos:column="9">sc</name><op:operator pos:line="193" pos:column="11">.</op:operator><name pos:line="193" pos:column="12">ForwardSetState</name></name><argument_list pos:line="193" pos:column="27">(<argument><expr><name pos:line="193" pos:column="28">SCE_ADA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="196" pos:column="1">static</specifier> <name pos:line="196" pos:column="8">void</name></type> <name pos:line="196" pos:column="13">ColouriseWord</name><parameter_list pos:line="196" pos:column="26">(<param><decl><type><name pos:line="196" pos:column="27">StyleContext</name><type:modifier pos:line="196" pos:column="39">&amp;</type:modifier></type> <name pos:line="196" pos:column="41">sc</name></decl></param>, <param><decl><type><name pos:line="196" pos:column="45">WordList</name><type:modifier pos:line="196" pos:column="53">&amp;</type:modifier></type> <name pos:line="196" pos:column="55">keywords</name></decl></param>, <param><decl><type><name pos:line="196" pos:column="65">bool</name><type:modifier pos:line="196" pos:column="69">&amp;</type:modifier></type> <name pos:line="196" pos:column="71">apostropheStartsAttribute</name></decl></param>)</parameter_list> <block pos:line="196" pos:column="98">{
	<expr_stmt><expr><name pos:line="197" pos:column="9">apostropheStartsAttribute</name> <op:operator pos:line="197" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="197" pos:column="37">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="198" pos:column="9">sc</name><op:operator pos:line="198" pos:column="11">.</op:operator><name pos:line="198" pos:column="12">SetState</name></name><argument_list pos:line="198" pos:column="20">(<argument><expr><name pos:line="198" pos:column="21">SCE_ADA_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name pos:line="200" pos:column="9">std</name><op:operator pos:line="200" pos:column="12">::</op:operator><name pos:line="200" pos:column="14">string</name></name></type> <name pos:line="200" pos:column="21">word</name></decl>;</decl_stmt>

	<while pos:line="202" pos:column="9">while <condition pos:line="202" pos:column="15">(<expr><op:operator pos:line="202" pos:column="16">!</op:operator><name><name pos:line="202" pos:column="17">sc</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">atLineEnd</name></name> <op:operator pos:line="202" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="202" pos:column="33">!</op:operator><call><name pos:line="202" pos:column="34">IsSeparatorOrDelimiterCharacter</name><argument_list pos:line="202" pos:column="65">(<argument><expr><name><name pos:line="202" pos:column="66">sc</name><op:operator pos:line="202" pos:column="68">.</op:operator><name pos:line="202" pos:column="69">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="202" pos:column="74">{
		<expr_stmt><expr><name pos:line="203" pos:column="17">word</name> <op:operator pos:line="203" pos:column="22">+=</op:operator> <call><name><name pos:line="203" pos:column="25">static_cast</name><argument_list pos:line="203" pos:column="36">&lt;<argument><expr><name pos:line="203" pos:column="37">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="203" pos:column="42">(<argument><expr><call><name pos:line="203" pos:column="43">tolower</name><argument_list pos:line="203" pos:column="50">(<argument><expr><name><name pos:line="203" pos:column="51">sc</name><op:operator pos:line="203" pos:column="53">.</op:operator><name pos:line="203" pos:column="54">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="204" pos:column="17">sc</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">Forward</name></name><argument_list pos:line="204" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<if pos:line="207" pos:column="9">if <condition pos:line="207" pos:column="12">(<expr><op:operator pos:line="207" pos:column="13">!</op:operator><call><name pos:line="207" pos:column="14">IsValidIdentifier</name><argument_list pos:line="207" pos:column="31">(<argument><expr><name pos:line="207" pos:column="32">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="207" pos:column="38"> <block pos:line="207" pos:column="39">{
		<expr_stmt><expr><call><name><name pos:line="208" pos:column="17">sc</name><op:operator pos:line="208" pos:column="19">.</op:operator><name pos:line="208" pos:column="20">ChangeState</name></name><argument_list pos:line="208" pos:column="31">(<argument><expr><name pos:line="208" pos:column="32">SCE_ADA_ILLEGAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></then> <else pos:line="210" pos:column="11">else <if pos:line="210" pos:column="16">if <condition pos:line="210" pos:column="19">(<expr><call><name><name pos:line="210" pos:column="20">keywords</name><op:operator pos:line="210" pos:column="28">.</op:operator><name pos:line="210" pos:column="29">InList</name></name><argument_list pos:line="210" pos:column="35">(<argument><expr><call><name><name pos:line="210" pos:column="36">word</name><op:operator pos:line="210" pos:column="40">.</op:operator><name pos:line="210" pos:column="41">c_str</name></name><argument_list pos:line="210" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="210" pos:column="50"> <block pos:line="210" pos:column="51">{
		<expr_stmt><expr><call><name><name pos:line="211" pos:column="17">sc</name><op:operator pos:line="211" pos:column="19">.</op:operator><name pos:line="211" pos:column="20">ChangeState</name></name><argument_list pos:line="211" pos:column="31">(<argument><expr><name pos:line="211" pos:column="32">SCE_ADA_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><name pos:line="213" pos:column="21">word</name> <op:operator pos:line="213" pos:column="26">!=</op:operator> <lit:literal type="string" pos:line="213" pos:column="29">"all"</lit:literal></expr>)</condition><then pos:line="213" pos:column="35"> <block pos:line="213" pos:column="36">{
			<expr_stmt><expr><name pos:line="214" pos:column="25">apostropheStartsAttribute</name> <op:operator pos:line="214" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="214" pos:column="53">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if></else></if>

	<expr_stmt><expr><call><name><name pos:line="218" pos:column="9">sc</name><op:operator pos:line="218" pos:column="11">.</op:operator><name pos:line="218" pos:column="12">SetState</name></name><argument_list pos:line="218" pos:column="20">(<argument><expr><name pos:line="218" pos:column="21">SCE_ADA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="221" pos:column="1">//</comment>
<comment type="line" pos:line="222" pos:column="1">// ColouriseDocument</comment>
<comment type="line" pos:line="223" pos:column="1">//</comment>

<function><type><specifier pos:line="225" pos:column="1">static</specifier> <name pos:line="225" pos:column="8">void</name></type> <name pos:line="225" pos:column="13">ColouriseDocument</name><parameter_list pos:line="225" pos:column="30">(
    <param><decl><type><name pos:line="226" pos:column="5">unsigned</name> <name pos:line="226" pos:column="14">int</name></type> <name pos:line="226" pos:column="18">startPos</name></decl></param>,
    <param><decl><type><name pos:line="227" pos:column="5">int</name></type> <name pos:line="227" pos:column="9">length</name></decl></param>,
    <param><decl><type><name pos:line="228" pos:column="5">int</name></type> <name pos:line="228" pos:column="9">initStyle</name></decl></param>,
    <param><decl><type><name pos:line="229" pos:column="5">WordList</name> <type:modifier pos:line="229" pos:column="14">*</type:modifier></type><name><name pos:line="229" pos:column="15">keywordlists</name><index pos:line="229" pos:column="27">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="230" pos:column="5">Accessor</name> <type:modifier pos:line="230" pos:column="14">&amp;</type:modifier></type><name pos:line="230" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="230" pos:column="23">{
	<decl_stmt><decl><type><name pos:line="231" pos:column="9">WordList</name> <type:modifier pos:line="231" pos:column="18">&amp;</type:modifier></type><name pos:line="231" pos:column="19">keywords</name> <init pos:line="231" pos:column="28">= <expr><op:operator pos:line="231" pos:column="30">*</op:operator><name><name pos:line="231" pos:column="31">keywordlists</name><index pos:line="231" pos:column="43">[<expr><lit:literal type="number" pos:line="231" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="233" pos:column="9">StyleContext</name></type> <name pos:line="233" pos:column="22">sc</name><parameter_list pos:line="233" pos:column="24">(<param><decl><type><name pos:line="233" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="233" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="233" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="233" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="235" pos:column="9">int</name></type> <name pos:line="235" pos:column="13">lineCurrent</name> <init pos:line="235" pos:column="25">= <expr><call><name><name pos:line="235" pos:column="27">styler</name><op:operator pos:line="235" pos:column="33">.</op:operator><name pos:line="235" pos:column="34">GetLine</name></name><argument_list pos:line="235" pos:column="41">(<argument><expr><name pos:line="235" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="236" pos:column="9">bool</name></type> <name pos:line="236" pos:column="14">apostropheStartsAttribute</name> <init pos:line="236" pos:column="40">= <expr><op:operator pos:line="236" pos:column="42">(</op:operator><call><name><name pos:line="236" pos:column="43">styler</name><op:operator pos:line="236" pos:column="49">.</op:operator><name pos:line="236" pos:column="50">GetLineState</name></name><argument_list pos:line="236" pos:column="62">(<argument><expr><name pos:line="236" pos:column="63">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="236" pos:column="76">&amp;</op:operator> <lit:literal type="number" pos:line="236" pos:column="78">1</lit:literal><op:operator pos:line="236" pos:column="79">)</op:operator> <op:operator pos:line="236" pos:column="81">!=</op:operator> <lit:literal type="number" pos:line="236" pos:column="84">0</lit:literal></expr></init></decl>;</decl_stmt>

	<while pos:line="238" pos:column="9">while <condition pos:line="238" pos:column="15">(<expr><call><name><name pos:line="238" pos:column="16">sc</name><op:operator pos:line="238" pos:column="18">.</op:operator><name pos:line="238" pos:column="19">More</name></name><argument_list pos:line="238" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="238" pos:column="27">{
		<if pos:line="239" pos:column="17">if <condition pos:line="239" pos:column="20">(<expr><name><name pos:line="239" pos:column="21">sc</name><op:operator pos:line="239" pos:column="23">.</op:operator><name pos:line="239" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="239" pos:column="34"> <block pos:line="239" pos:column="35">{
			<comment type="line" pos:line="240" pos:column="25">// Go to the next line</comment>
			<expr_stmt><expr><call><name><name pos:line="241" pos:column="25">sc</name><op:operator pos:line="241" pos:column="27">.</op:operator><name pos:line="241" pos:column="28">Forward</name></name><argument_list pos:line="241" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="242" pos:column="25">lineCurrent</name><op:operator pos:line="242" pos:column="36">++</op:operator></expr>;</expr_stmt>

			<comment type="line" pos:line="244" pos:column="25">// Remember the line state for future incremental lexing</comment>
			<expr_stmt><expr><call><name><name pos:line="245" pos:column="25">styler</name><op:operator pos:line="245" pos:column="31">.</op:operator><name pos:line="245" pos:column="32">SetLineState</name></name><argument_list pos:line="245" pos:column="44">(<argument><expr><name pos:line="245" pos:column="45">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="245" pos:column="58">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="247" pos:column="25">// Don't continue any styles on the next line</comment>
			<expr_stmt><expr><call><name><name pos:line="248" pos:column="25">sc</name><op:operator pos:line="248" pos:column="27">.</op:operator><name pos:line="248" pos:column="28">SetState</name></name><argument_list pos:line="248" pos:column="36">(<argument><expr><name pos:line="248" pos:column="37">SCE_ADA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="251" pos:column="17">// Comments</comment>
		<if pos:line="252" pos:column="17">if <condition pos:line="252" pos:column="20">(<expr><call><name><name pos:line="252" pos:column="21">sc</name><op:operator pos:line="252" pos:column="23">.</op:operator><name pos:line="252" pos:column="24">Match</name></name><argument_list pos:line="252" pos:column="29">(<argument><expr><lit:literal type="char" pos:line="252" pos:column="30">'-'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="252" pos:column="35">'-'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="40"> <block pos:line="252" pos:column="41">{
			<expr_stmt><expr><call><name pos:line="253" pos:column="25">ColouriseComment</name><argument_list pos:line="253" pos:column="41">(<argument><expr><name pos:line="253" pos:column="42">sc</name></expr></argument>, <argument><expr><name pos:line="253" pos:column="46">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="255" pos:column="17">// Strings</comment>
		}</block></then> <else pos:line="256" pos:column="19">else <if pos:line="256" pos:column="24">if <condition pos:line="256" pos:column="27">(<expr><call><name><name pos:line="256" pos:column="28">sc</name><op:operator pos:line="256" pos:column="30">.</op:operator><name pos:line="256" pos:column="31">Match</name></name><argument_list pos:line="256" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="256" pos:column="37">'"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="256" pos:column="42"> <block pos:line="256" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="257" pos:column="25">ColouriseString</name><argument_list pos:line="257" pos:column="40">(<argument><expr><name pos:line="257" pos:column="41">sc</name></expr></argument>, <argument><expr><name pos:line="257" pos:column="45">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="259" pos:column="17">// Characters</comment>
		}</block></then> <else pos:line="260" pos:column="19">else <if pos:line="260" pos:column="24">if <condition pos:line="260" pos:column="27">(<expr><call><name><name pos:line="260" pos:column="28">sc</name><op:operator pos:line="260" pos:column="30">.</op:operator><name pos:line="260" pos:column="31">Match</name></name><argument_list pos:line="260" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="260" pos:column="37">'\''</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="260" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="260" pos:column="46">!</op:operator><name pos:line="260" pos:column="47">apostropheStartsAttribute</name></expr>)</condition><then pos:line="260" pos:column="73"> <block pos:line="260" pos:column="74">{
			<expr_stmt><expr><call><name pos:line="261" pos:column="25">ColouriseCharacter</name><argument_list pos:line="261" pos:column="43">(<argument><expr><name pos:line="261" pos:column="44">sc</name></expr></argument>, <argument><expr><name pos:line="261" pos:column="48">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="263" pos:column="17">// Labels</comment>
		}</block></then> <else pos:line="264" pos:column="19">else <if pos:line="264" pos:column="24">if <condition pos:line="264" pos:column="27">(<expr><call><name><name pos:line="264" pos:column="28">sc</name><op:operator pos:line="264" pos:column="30">.</op:operator><name pos:line="264" pos:column="31">Match</name></name><argument_list pos:line="264" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="264" pos:column="37">'&lt;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="264" pos:column="42">'&lt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="264" pos:column="47"> <block pos:line="264" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="265" pos:column="25">ColouriseLabel</name><argument_list pos:line="265" pos:column="39">(<argument><expr><name pos:line="265" pos:column="40">sc</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="44">keywords</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="54">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="267" pos:column="17">// Whitespace</comment>
		}</block></then> <else pos:line="268" pos:column="19">else <if pos:line="268" pos:column="24">if <condition pos:line="268" pos:column="27">(<expr><call><name pos:line="268" pos:column="28">IsASpace</name><argument_list pos:line="268" pos:column="36">(<argument><expr><name><name pos:line="268" pos:column="37">sc</name><op:operator pos:line="268" pos:column="39">.</op:operator><name pos:line="268" pos:column="40">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="268" pos:column="44"> <block pos:line="268" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="269" pos:column="25">ColouriseWhiteSpace</name><argument_list pos:line="269" pos:column="44">(<argument><expr><name pos:line="269" pos:column="45">sc</name></expr></argument>, <argument><expr><name pos:line="269" pos:column="49">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="271" pos:column="17">// Delimiters</comment>
		}</block></then> <else pos:line="272" pos:column="19">else <if pos:line="272" pos:column="24">if <condition pos:line="272" pos:column="27">(<expr><call><name pos:line="272" pos:column="28">IsDelimiterCharacter</name><argument_list pos:line="272" pos:column="48">(<argument><expr><name><name pos:line="272" pos:column="49">sc</name><op:operator pos:line="272" pos:column="51">.</op:operator><name pos:line="272" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="272" pos:column="56"> <block pos:line="272" pos:column="57">{
			<expr_stmt><expr><call><name pos:line="273" pos:column="25">ColouriseDelimiter</name><argument_list pos:line="273" pos:column="43">(<argument><expr><name pos:line="273" pos:column="44">sc</name></expr></argument>, <argument><expr><name pos:line="273" pos:column="48">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="275" pos:column="17">// Numbers</comment>
		}</block></then> <else pos:line="276" pos:column="19">else <if pos:line="276" pos:column="24">if <condition pos:line="276" pos:column="27">(<expr><call><name pos:line="276" pos:column="28">IsADigit</name><argument_list pos:line="276" pos:column="36">(<argument><expr><name><name pos:line="276" pos:column="37">sc</name><op:operator pos:line="276" pos:column="39">.</op:operator><name pos:line="276" pos:column="40">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="276" pos:column="44">||</op:operator> <name><name pos:line="276" pos:column="47">sc</name><op:operator pos:line="276" pos:column="49">.</op:operator><name pos:line="276" pos:column="50">ch</name></name> <op:operator pos:line="276" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="276" pos:column="56">'#'</lit:literal></expr>)</condition><then pos:line="276" pos:column="60"> <block pos:line="276" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="277" pos:column="25">ColouriseNumber</name><argument_list pos:line="277" pos:column="40">(<argument><expr><name pos:line="277" pos:column="41">sc</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="45">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="279" pos:column="17">// Keywords or identifiers</comment>
		}</block></then> <else pos:line="280" pos:column="19">else <block pos:line="280" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="281" pos:column="25">ColouriseWord</name><argument_list pos:line="281" pos:column="38">(<argument><expr><name pos:line="281" pos:column="39">sc</name></expr></argument>, <argument><expr><name pos:line="281" pos:column="43">keywords</name></expr></argument>, <argument><expr><name pos:line="281" pos:column="53">apostropheStartsAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
	}</block></while>

	<expr_stmt><expr><call><name><name pos:line="285" pos:column="9">sc</name><op:operator pos:line="285" pos:column="11">.</op:operator><name pos:line="285" pos:column="12">Complete</name></name><argument_list pos:line="285" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="288" pos:column="1">static</specifier> <specifier pos:line="288" pos:column="8">inline</specifier> <name pos:line="288" pos:column="15">bool</name></type> <name pos:line="288" pos:column="20">IsDelimiterCharacter</name><parameter_list pos:line="288" pos:column="40">(<param><decl><type><name pos:line="288" pos:column="41">int</name></type> <name pos:line="288" pos:column="45">ch</name></decl></param>)</parameter_list> <block pos:line="288" pos:column="49">{
	<switch pos:line="289" pos:column="9">switch <condition pos:line="289" pos:column="16">(<expr><name pos:line="289" pos:column="17">ch</name></expr>)</condition> <block pos:line="289" pos:column="21">{
	<case pos:line="290" pos:column="9">case <expr><lit:literal type="char" pos:line="290" pos:column="14">'&amp;'</lit:literal></expr>:
	</case><case pos:line="291" pos:column="9">case <expr><lit:literal type="char" pos:line="291" pos:column="14">'\''</lit:literal></expr>:
	</case><case pos:line="292" pos:column="9">case <expr><lit:literal type="char" pos:line="292" pos:column="14">'('</lit:literal></expr>:
	</case><case pos:line="293" pos:column="9">case <expr><lit:literal type="char" pos:line="293" pos:column="14">')'</lit:literal></expr>:
	</case><case pos:line="294" pos:column="9">case <expr><lit:literal type="char" pos:line="294" pos:column="14">'*'</lit:literal></expr>:
	</case><case pos:line="295" pos:column="9">case <expr><lit:literal type="char" pos:line="295" pos:column="14">'+'</lit:literal></expr>:
	</case><case pos:line="296" pos:column="9">case <expr><lit:literal type="char" pos:line="296" pos:column="14">','</lit:literal></expr>:
	</case><case pos:line="297" pos:column="9">case <expr><lit:literal type="char" pos:line="297" pos:column="14">'-'</lit:literal></expr>:
	</case><case pos:line="298" pos:column="9">case <expr><lit:literal type="char" pos:line="298" pos:column="14">'.'</lit:literal></expr>:
	</case><case pos:line="299" pos:column="9">case <expr><lit:literal type="char" pos:line="299" pos:column="14">'/'</lit:literal></expr>:
	</case><case pos:line="300" pos:column="9">case <expr><lit:literal type="char" pos:line="300" pos:column="14">':'</lit:literal></expr>:
	</case><case pos:line="301" pos:column="9">case <expr><lit:literal type="char" pos:line="301" pos:column="14">';'</lit:literal></expr>:
	</case><case pos:line="302" pos:column="9">case <expr><lit:literal type="char" pos:line="302" pos:column="14">'&lt;'</lit:literal></expr>:
	</case><case pos:line="303" pos:column="9">case <expr><lit:literal type="char" pos:line="303" pos:column="14">'='</lit:literal></expr>:
	</case><case pos:line="304" pos:column="9">case <expr><lit:literal type="char" pos:line="304" pos:column="14">'&gt;'</lit:literal></expr>:
	</case><case pos:line="305" pos:column="9">case <expr><lit:literal type="char" pos:line="305" pos:column="14">'|'</lit:literal></expr>:
		<return pos:line="306" pos:column="17">return <expr><lit:literal type="boolean" pos:line="306" pos:column="24">true</lit:literal></expr>;</return>
	</case><default pos:line="307" pos:column="9">default:
		<return pos:line="308" pos:column="17">return <expr><lit:literal type="boolean" pos:line="308" pos:column="24">false</lit:literal></expr>;</return>
	</default>}</block></switch>
}</block></function>

<function><type><specifier pos:line="312" pos:column="1">static</specifier> <specifier pos:line="312" pos:column="8">inline</specifier> <name pos:line="312" pos:column="15">bool</name></type> <name pos:line="312" pos:column="20">IsNumberCharacter</name><parameter_list pos:line="312" pos:column="37">(<param><decl><type><name pos:line="312" pos:column="38">int</name></type> <name pos:line="312" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="312" pos:column="46">{
	<return pos:line="313" pos:column="9">return <expr><call><name pos:line="313" pos:column="16">IsNumberStartCharacter</name><argument_list pos:line="313" pos:column="38">(<argument><expr><name pos:line="313" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="313" pos:column="43">||</op:operator>
	       <name pos:line="314" pos:column="16">ch</name> <op:operator pos:line="314" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="314" pos:column="22">'_'</lit:literal> <op:operator pos:line="314" pos:column="26">||</op:operator>
	       <name pos:line="315" pos:column="16">ch</name> <op:operator pos:line="315" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="315" pos:column="22">'.'</lit:literal> <op:operator pos:line="315" pos:column="26">||</op:operator>
	       <name pos:line="316" pos:column="16">ch</name> <op:operator pos:line="316" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="22">'#'</lit:literal> <op:operator pos:line="316" pos:column="26">||</op:operator>
	       <op:operator pos:line="317" pos:column="16">(</op:operator><name pos:line="317" pos:column="17">ch</name> <op:operator pos:line="317" pos:column="20">&gt;=</op:operator> <lit:literal type="char" pos:line="317" pos:column="23">'a'</lit:literal> <op:operator pos:line="317" pos:column="27">&amp;&amp;</op:operator> <name pos:line="317" pos:column="30">ch</name> <op:operator pos:line="317" pos:column="33">&lt;=</op:operator> <lit:literal type="char" pos:line="317" pos:column="36">'f'</lit:literal><op:operator pos:line="317" pos:column="39">)</op:operator> <op:operator pos:line="317" pos:column="41">||</op:operator>
	       <op:operator pos:line="318" pos:column="16">(</op:operator><name pos:line="318" pos:column="17">ch</name> <op:operator pos:line="318" pos:column="20">&gt;=</op:operator> <lit:literal type="char" pos:line="318" pos:column="23">'A'</lit:literal> <op:operator pos:line="318" pos:column="27">&amp;&amp;</op:operator> <name pos:line="318" pos:column="30">ch</name> <op:operator pos:line="318" pos:column="33">&lt;=</op:operator> <lit:literal type="char" pos:line="318" pos:column="36">'F'</lit:literal><op:operator pos:line="318" pos:column="39">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="321" pos:column="1">static</specifier> <specifier pos:line="321" pos:column="8">inline</specifier> <name pos:line="321" pos:column="15">bool</name></type> <name pos:line="321" pos:column="20">IsNumberStartCharacter</name><parameter_list pos:line="321" pos:column="42">(<param><decl><type><name pos:line="321" pos:column="43">int</name></type> <name pos:line="321" pos:column="47">ch</name></decl></param>)</parameter_list> <block pos:line="321" pos:column="51">{
	<return pos:line="322" pos:column="9">return <expr><call><name pos:line="322" pos:column="16">IsADigit</name><argument_list pos:line="322" pos:column="24">(<argument><expr><name pos:line="322" pos:column="25">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="325" pos:column="1">static</specifier> <specifier pos:line="325" pos:column="8">inline</specifier> <name pos:line="325" pos:column="15">bool</name></type> <name pos:line="325" pos:column="20">IsSeparatorOrDelimiterCharacter</name><parameter_list pos:line="325" pos:column="51">(<param><decl><type><name pos:line="325" pos:column="52">int</name></type> <name pos:line="325" pos:column="56">ch</name></decl></param>)</parameter_list> <block pos:line="325" pos:column="60">{
	<return pos:line="326" pos:column="9">return <expr><call><name pos:line="326" pos:column="16">IsASpace</name><argument_list pos:line="326" pos:column="24">(<argument><expr><name pos:line="326" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="326" pos:column="29">||</op:operator> <call><name pos:line="326" pos:column="32">IsDelimiterCharacter</name><argument_list pos:line="326" pos:column="52">(<argument><expr><name pos:line="326" pos:column="53">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="329" pos:column="1">static</specifier> <name pos:line="329" pos:column="8">bool</name></type> <name pos:line="329" pos:column="13">IsValidIdentifier</name><parameter_list pos:line="329" pos:column="30">(<param><decl><type><specifier pos:line="329" pos:column="31">const</specifier> <name><name pos:line="329" pos:column="37">std</name><op:operator pos:line="329" pos:column="40">::</op:operator><name pos:line="329" pos:column="42">string</name></name><type:modifier pos:line="329" pos:column="48">&amp;</type:modifier></type> <name pos:line="329" pos:column="50">identifier</name></decl></param>)</parameter_list> <block pos:line="329" pos:column="62">{
	<comment type="line" pos:line="330" pos:column="9">// First character can't be '_', so initialize the flag to true</comment>
	<decl_stmt><decl><type><name pos:line="331" pos:column="9">bool</name></type> <name pos:line="331" pos:column="14">lastWasUnderscore</name> <init pos:line="331" pos:column="32">= <expr><lit:literal type="boolean" pos:line="331" pos:column="34">true</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="333" pos:column="9">size_t</name></type> <name pos:line="333" pos:column="16">length</name> <init pos:line="333" pos:column="23">= <expr><call><name><name pos:line="333" pos:column="25">identifier</name><op:operator pos:line="333" pos:column="35">.</op:operator><name pos:line="333" pos:column="36">length</name></name><argument_list pos:line="333" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="335" pos:column="9">// Zero-length identifiers are not valid (these can occur inside labels)</comment>
	<if pos:line="336" pos:column="9">if <condition pos:line="336" pos:column="12">(<expr><name pos:line="336" pos:column="13">length</name> <op:operator pos:line="336" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="336" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="336" pos:column="25"> <block pos:line="336" pos:column="26">{
		<return pos:line="337" pos:column="17">return <expr><lit:literal type="boolean" pos:line="337" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="340" pos:column="9">// Check for valid character at the start</comment>
	<if pos:line="341" pos:column="9">if <condition pos:line="341" pos:column="12">(<expr><op:operator pos:line="341" pos:column="13">!</op:operator><call><name pos:line="341" pos:column="14">IsWordStartCharacter</name><argument_list pos:line="341" pos:column="34">(<argument><expr><name><name pos:line="341" pos:column="35">identifier</name><index pos:line="341" pos:column="45">[<expr><lit:literal type="number" pos:line="341" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="341" pos:column="50"> <block pos:line="341" pos:column="51">{
		<return pos:line="342" pos:column="17">return <expr><lit:literal type="boolean" pos:line="342" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="345" pos:column="9">// Check for only valid characters and no double underscores</comment>
	<for pos:line="346" pos:column="9">for (<init><decl><type><name pos:line="346" pos:column="14">size_t</name></type> <name pos:line="346" pos:column="21">i</name> <init pos:line="346" pos:column="23">= <expr><lit:literal type="number" pos:line="346" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="346" pos:column="28">i</name> <op:operator pos:line="346" pos:column="30">&lt;</op:operator> <name pos:line="346" pos:column="32">length</name></expr>;</condition> <incr><expr><name pos:line="346" pos:column="40">i</name><op:operator pos:line="346" pos:column="41">++</op:operator></expr></incr>) <block pos:line="346" pos:column="45">{
		<if pos:line="347" pos:column="17">if <condition pos:line="347" pos:column="20">(<expr><op:operator pos:line="347" pos:column="21">!</op:operator><call><name pos:line="347" pos:column="22">IsWordCharacter</name><argument_list pos:line="347" pos:column="37">(<argument><expr><name><name pos:line="347" pos:column="38">identifier</name><index pos:line="347" pos:column="48">[<expr><name pos:line="347" pos:column="49">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="347" pos:column="53">||</op:operator>
		        <op:operator pos:line="348" pos:column="25">(</op:operator><name><name pos:line="348" pos:column="26">identifier</name><index pos:line="348" pos:column="36">[<expr><name pos:line="348" pos:column="37">i</name></expr>]</index></name> <op:operator pos:line="348" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="43">'_'</lit:literal> <op:operator pos:line="348" pos:column="47">&amp;&amp;</op:operator> <name pos:line="348" pos:column="50">lastWasUnderscore</name><op:operator pos:line="348" pos:column="67">)</op:operator></expr>)</condition><then pos:line="348" pos:column="69"> <block pos:line="348" pos:column="70">{
			<return pos:line="349" pos:column="25">return <expr><lit:literal type="boolean" pos:line="349" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="351" pos:column="17">lastWasUnderscore</name> <op:operator pos:line="351" pos:column="35">=</op:operator> <name><name pos:line="351" pos:column="37">identifier</name><index pos:line="351" pos:column="47">[<expr><name pos:line="351" pos:column="48">i</name></expr>]</index></name> <op:operator pos:line="351" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="351" pos:column="54">'_'</lit:literal></expr>;</expr_stmt>
	}</block></for>

	<comment type="line" pos:line="354" pos:column="9">// Check for underscore at the end</comment>
	<if pos:line="355" pos:column="9">if <condition pos:line="355" pos:column="12">(<expr><name pos:line="355" pos:column="13">lastWasUnderscore</name> <op:operator pos:line="355" pos:column="31">==</op:operator> <lit:literal type="boolean" pos:line="355" pos:column="34">true</lit:literal></expr>)</condition><then pos:line="355" pos:column="39"> <block pos:line="355" pos:column="40">{
		<return pos:line="356" pos:column="17">return <expr><lit:literal type="boolean" pos:line="356" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="359" pos:column="9">// All checks passed</comment>
	<return pos:line="360" pos:column="9">return <expr><lit:literal type="boolean" pos:line="360" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="363" pos:column="1">static</specifier> <name pos:line="363" pos:column="8">bool</name></type> <name pos:line="363" pos:column="13">IsValidNumber</name><parameter_list pos:line="363" pos:column="26">(<param><decl><type><specifier pos:line="363" pos:column="27">const</specifier> <name><name pos:line="363" pos:column="33">std</name><op:operator pos:line="363" pos:column="36">::</op:operator><name pos:line="363" pos:column="38">string</name></name><type:modifier pos:line="363" pos:column="44">&amp;</type:modifier></type> <name pos:line="363" pos:column="46">number</name></decl></param>)</parameter_list> <block pos:line="363" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="364" pos:column="9">size_t</name></type> <name pos:line="364" pos:column="16">hashPos</name> <init pos:line="364" pos:column="24">= <expr><call><name><name pos:line="364" pos:column="26">number</name><op:operator pos:line="364" pos:column="32">.</op:operator><name pos:line="364" pos:column="33">find</name></name><argument_list pos:line="364" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="364" pos:column="38">"#"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="365" pos:column="9">bool</name></type> <name pos:line="365" pos:column="14">seenDot</name> <init pos:line="365" pos:column="22">= <expr><lit:literal type="boolean" pos:line="365" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="367" pos:column="9">size_t</name></type> <name pos:line="367" pos:column="16">i</name> <init pos:line="367" pos:column="18">= <expr><lit:literal type="number" pos:line="367" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="368" pos:column="9">size_t</name></type> <name pos:line="368" pos:column="16">length</name> <init pos:line="368" pos:column="23">= <expr><call><name><name pos:line="368" pos:column="25">number</name><op:operator pos:line="368" pos:column="31">.</op:operator><name pos:line="368" pos:column="32">length</name></name><argument_list pos:line="368" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="370" pos:column="9">if <condition pos:line="370" pos:column="12">(<expr><name pos:line="370" pos:column="13">length</name> <op:operator pos:line="370" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="370" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="370" pos:column="25">
		<return pos:line="371" pos:column="17">return <expr><lit:literal type="boolean" pos:line="371" pos:column="24">false</lit:literal></expr>;</return></then></if> <comment type="line" pos:line="371" pos:column="31">// Just in case</comment>

	<comment type="line" pos:line="373" pos:column="9">// Decimal number</comment>
	<if pos:line="374" pos:column="9">if <condition pos:line="374" pos:column="12">(<expr><name pos:line="374" pos:column="13">hashPos</name> <op:operator pos:line="374" pos:column="21">==</op:operator> <name><name pos:line="374" pos:column="24">std</name><op:operator pos:line="374" pos:column="27">::</op:operator><name pos:line="374" pos:column="29">string</name><op:operator pos:line="374" pos:column="35">::</op:operator><name pos:line="374" pos:column="37">npos</name></name></expr>)</condition><then pos:line="374" pos:column="42"> <block pos:line="374" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="375" pos:column="17">bool</name></type> <name pos:line="375" pos:column="22">canBeSpecial</name> <init pos:line="375" pos:column="35">= <expr><lit:literal type="boolean" pos:line="375" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<for pos:line="377" pos:column="17">for (<init pos:line="377" pos:column="22">;</init> <condition><expr><name pos:line="377" pos:column="24">i</name> <op:operator pos:line="377" pos:column="26">&lt;</op:operator> <name pos:line="377" pos:column="28">length</name></expr>;</condition> <incr><expr><name pos:line="377" pos:column="36">i</name><op:operator pos:line="377" pos:column="37">++</op:operator></expr></incr>) <block pos:line="377" pos:column="41">{
			<if pos:line="378" pos:column="25">if <condition pos:line="378" pos:column="28">(<expr><name><name pos:line="378" pos:column="29">number</name><index pos:line="378" pos:column="35">[<expr><name pos:line="378" pos:column="36">i</name></expr>]</index></name> <op:operator pos:line="378" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="378" pos:column="42">'_'</lit:literal></expr>)</condition><then pos:line="378" pos:column="46"> <block pos:line="378" pos:column="47">{
				<if pos:line="379" pos:column="33">if <condition pos:line="379" pos:column="36">(<expr><op:operator pos:line="379" pos:column="37">!</op:operator><name pos:line="379" pos:column="38">canBeSpecial</name></expr>)</condition><then pos:line="379" pos:column="51"> <block pos:line="379" pos:column="52">{
					<return pos:line="380" pos:column="41">return <expr><lit:literal type="boolean" pos:line="380" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="382" pos:column="33">canBeSpecial</name> <op:operator pos:line="382" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="382" pos:column="48">false</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="383" pos:column="27">else <if pos:line="383" pos:column="32">if <condition pos:line="383" pos:column="35">(<expr><name><name pos:line="383" pos:column="36">number</name><index pos:line="383" pos:column="42">[<expr><name pos:line="383" pos:column="43">i</name></expr>]</index></name> <op:operator pos:line="383" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="383" pos:column="49">'.'</lit:literal></expr>)</condition><then pos:line="383" pos:column="53"> <block pos:line="383" pos:column="54">{
				<if pos:line="384" pos:column="33">if <condition pos:line="384" pos:column="36">(<expr><op:operator pos:line="384" pos:column="37">!</op:operator><name pos:line="384" pos:column="38">canBeSpecial</name> <op:operator pos:line="384" pos:column="51">||</op:operator> <name pos:line="384" pos:column="54">seenDot</name></expr>)</condition><then pos:line="384" pos:column="62"> <block pos:line="384" pos:column="63">{
					<return pos:line="385" pos:column="41">return <expr><lit:literal type="boolean" pos:line="385" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="387" pos:column="33">canBeSpecial</name> <op:operator pos:line="387" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="387" pos:column="48">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="388" pos:column="33">seenDot</name> <op:operator pos:line="388" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="388" pos:column="43">true</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="389" pos:column="27">else <if pos:line="389" pos:column="32">if <condition pos:line="389" pos:column="35">(<expr><call><name pos:line="389" pos:column="36">IsADigit</name><argument_list pos:line="389" pos:column="44">(<argument><expr><name><name pos:line="389" pos:column="45">number</name><index pos:line="389" pos:column="51">[<expr><name pos:line="389" pos:column="52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="389" pos:column="56"> <block pos:line="389" pos:column="57">{
				<expr_stmt><expr><name pos:line="390" pos:column="33">canBeSpecial</name> <op:operator pos:line="390" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="390" pos:column="48">true</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="391" pos:column="27">else <block pos:line="391" pos:column="32">{
				<break pos:line="392" pos:column="33">break;</break>
			}</block></else></if></else></if></else></if>
		}</block></for>

		<if pos:line="396" pos:column="17">if <condition pos:line="396" pos:column="20">(<expr><op:operator pos:line="396" pos:column="21">!</op:operator><name pos:line="396" pos:column="22">canBeSpecial</name></expr>)</condition><then pos:line="396" pos:column="35">
			<return pos:line="397" pos:column="25">return <expr><lit:literal type="boolean" pos:line="397" pos:column="32">false</lit:literal></expr>;</return></then></if>
	}</block></then> <else pos:line="398" pos:column="11">else <block pos:line="398" pos:column="16">{
		<comment type="line" pos:line="399" pos:column="17">// Based number</comment>
		<decl_stmt><decl><type><name pos:line="400" pos:column="17">bool</name></type> <name pos:line="400" pos:column="22">canBeSpecial</name> <init pos:line="400" pos:column="35">= <expr><lit:literal type="boolean" pos:line="400" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="401" pos:column="17">int</name></type> <name pos:line="401" pos:column="21">base</name> <init pos:line="401" pos:column="26">= <expr><lit:literal type="number" pos:line="401" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="403" pos:column="17">// Parse base</comment>
		<for pos:line="404" pos:column="17">for (<init pos:line="404" pos:column="22">;</init> <condition><expr><name pos:line="404" pos:column="24">i</name> <op:operator pos:line="404" pos:column="26">&lt;</op:operator> <name pos:line="404" pos:column="28">length</name></expr>;</condition> <incr><expr><name pos:line="404" pos:column="36">i</name><op:operator pos:line="404" pos:column="37">++</op:operator></expr></incr>) <block pos:line="404" pos:column="41">{
			<decl_stmt><decl><type><name pos:line="405" pos:column="25">int</name></type> <name pos:line="405" pos:column="29">ch</name> <init pos:line="405" pos:column="32">= <expr><name><name pos:line="405" pos:column="34">number</name><index pos:line="405" pos:column="40">[<expr><name pos:line="405" pos:column="41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if pos:line="406" pos:column="25">if <condition pos:line="406" pos:column="28">(<expr><name pos:line="406" pos:column="29">ch</name> <op:operator pos:line="406" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="406" pos:column="35">'_'</lit:literal></expr>)</condition><then pos:line="406" pos:column="39"> <block pos:line="406" pos:column="40">{
				<if pos:line="407" pos:column="33">if <condition pos:line="407" pos:column="36">(<expr><op:operator pos:line="407" pos:column="37">!</op:operator><name pos:line="407" pos:column="38">canBeSpecial</name></expr>)</condition><then pos:line="407" pos:column="51">
					<return pos:line="408" pos:column="41">return <expr><lit:literal type="boolean" pos:line="408" pos:column="48">false</lit:literal></expr>;</return></then></if>
				<expr_stmt><expr><name pos:line="409" pos:column="33">canBeSpecial</name> <op:operator pos:line="409" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="409" pos:column="48">false</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="410" pos:column="27">else <if pos:line="410" pos:column="32">if <condition pos:line="410" pos:column="35">(<expr><call><name pos:line="410" pos:column="36">IsADigit</name><argument_list pos:line="410" pos:column="44">(<argument><expr><name pos:line="410" pos:column="45">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="410" pos:column="49"> <block pos:line="410" pos:column="50">{
				<expr_stmt><expr><name pos:line="411" pos:column="33">base</name> <op:operator pos:line="411" pos:column="38">=</op:operator> <name pos:line="411" pos:column="40">base</name> <op:operator pos:line="411" pos:column="45">*</op:operator> <lit:literal type="number" pos:line="411" pos:column="47">10</lit:literal> <op:operator pos:line="411" pos:column="50">+</op:operator> <op:operator pos:line="411" pos:column="52">(</op:operator><name pos:line="411" pos:column="53">ch</name> <op:operator pos:line="411" pos:column="56">-</op:operator> <lit:literal type="char" pos:line="411" pos:column="58">'0'</lit:literal><op:operator pos:line="411" pos:column="61">)</op:operator></expr>;</expr_stmt>
				<if pos:line="412" pos:column="33">if <condition pos:line="412" pos:column="36">(<expr><name pos:line="412" pos:column="37">base</name> <op:operator pos:line="412" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="412" pos:column="44">16</lit:literal></expr>)</condition><then pos:line="412" pos:column="47">
					<return pos:line="413" pos:column="41">return <expr><lit:literal type="boolean" pos:line="413" pos:column="48">false</lit:literal></expr>;</return></then></if>
				<expr_stmt><expr><name pos:line="414" pos:column="33">canBeSpecial</name> <op:operator pos:line="414" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="414" pos:column="48">true</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="415" pos:column="27">else <if pos:line="415" pos:column="32">if <condition pos:line="415" pos:column="35">(<expr><name pos:line="415" pos:column="36">ch</name> <op:operator pos:line="415" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="415" pos:column="42">'#'</lit:literal> <op:operator pos:line="415" pos:column="46">&amp;&amp;</op:operator> <name pos:line="415" pos:column="49">canBeSpecial</name></expr>)</condition><then pos:line="415" pos:column="62"> <block pos:line="415" pos:column="63">{
				<break pos:line="416" pos:column="33">break;</break>
			}</block></then> <else pos:line="417" pos:column="27">else <block pos:line="417" pos:column="32">{
				<return pos:line="418" pos:column="33">return <expr><lit:literal type="boolean" pos:line="418" pos:column="40">false</lit:literal></expr>;</return>
			}</block></else></if></else></if></else></if>
		}</block></for>

		<if pos:line="422" pos:column="17">if <condition pos:line="422" pos:column="20">(<expr><name pos:line="422" pos:column="21">base</name> <op:operator pos:line="422" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="422" pos:column="28">2</lit:literal></expr>)</condition><then pos:line="422" pos:column="30">
			<return pos:line="423" pos:column="25">return <expr><lit:literal type="boolean" pos:line="423" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<if pos:line="424" pos:column="17">if <condition pos:line="424" pos:column="20">(<expr><name pos:line="424" pos:column="21">i</name> <op:operator pos:line="424" pos:column="23">==</op:operator> <name pos:line="424" pos:column="26">length</name></expr>)</condition><then pos:line="424" pos:column="33">
			<return pos:line="425" pos:column="25">return <expr><lit:literal type="boolean" pos:line="425" pos:column="32">false</lit:literal></expr>;</return></then></if>

		<expr_stmt><expr><name pos:line="427" pos:column="17">i</name><op:operator pos:line="427" pos:column="18">++</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="427" pos:column="22">// Skip over '#'</comment>

		<comment type="line" pos:line="429" pos:column="17">// Parse number</comment>
		<expr_stmt><expr><name pos:line="430" pos:column="17">canBeSpecial</name> <op:operator pos:line="430" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="430" pos:column="32">false</lit:literal></expr>;</expr_stmt>

		<for pos:line="432" pos:column="17">for (<init pos:line="432" pos:column="22">;</init> <condition><expr><name pos:line="432" pos:column="24">i</name> <op:operator pos:line="432" pos:column="26">&lt;</op:operator> <name pos:line="432" pos:column="28">length</name></expr>;</condition> <incr><expr><name pos:line="432" pos:column="36">i</name><op:operator pos:line="432" pos:column="37">++</op:operator></expr></incr>) <block pos:line="432" pos:column="41">{
			<decl_stmt><decl><type><name pos:line="433" pos:column="25">int</name></type> <name pos:line="433" pos:column="29">ch</name> <init pos:line="433" pos:column="32">= <expr><call><name pos:line="433" pos:column="34">tolower</name><argument_list pos:line="433" pos:column="41">(<argument><expr><name><name pos:line="433" pos:column="42">number</name><index pos:line="433" pos:column="48">[<expr><name pos:line="433" pos:column="49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="435" pos:column="25">if <condition pos:line="435" pos:column="28">(<expr><name pos:line="435" pos:column="29">ch</name> <op:operator pos:line="435" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="435" pos:column="35">'_'</lit:literal></expr>)</condition><then pos:line="435" pos:column="39"> <block pos:line="435" pos:column="40">{
				<if pos:line="436" pos:column="33">if <condition pos:line="436" pos:column="36">(<expr><op:operator pos:line="436" pos:column="37">!</op:operator><name pos:line="436" pos:column="38">canBeSpecial</name></expr>)</condition><then pos:line="436" pos:column="51"> <block pos:line="436" pos:column="52">{
					<return pos:line="437" pos:column="41">return <expr><lit:literal type="boolean" pos:line="437" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="439" pos:column="33">canBeSpecial</name> <op:operator pos:line="439" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="439" pos:column="48">false</lit:literal></expr>;</expr_stmt>

			}</block></then> <else pos:line="441" pos:column="27">else <if pos:line="441" pos:column="32">if <condition pos:line="441" pos:column="35">(<expr><name pos:line="441" pos:column="36">ch</name> <op:operator pos:line="441" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="441" pos:column="42">'.'</lit:literal></expr>)</condition><then pos:line="441" pos:column="46"> <block pos:line="441" pos:column="47">{
				<if pos:line="442" pos:column="33">if <condition pos:line="442" pos:column="36">(<expr><op:operator pos:line="442" pos:column="37">!</op:operator><name pos:line="442" pos:column="38">canBeSpecial</name> <op:operator pos:line="442" pos:column="51">||</op:operator> <name pos:line="442" pos:column="54">seenDot</name></expr>)</condition><then pos:line="442" pos:column="62"> <block pos:line="442" pos:column="63">{
					<return pos:line="443" pos:column="41">return <expr><lit:literal type="boolean" pos:line="443" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="445" pos:column="33">canBeSpecial</name> <op:operator pos:line="445" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="445" pos:column="48">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="446" pos:column="33">seenDot</name> <op:operator pos:line="446" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="446" pos:column="43">true</lit:literal></expr>;</expr_stmt>

			}</block></then> <else pos:line="448" pos:column="27">else <if pos:line="448" pos:column="32">if <condition pos:line="448" pos:column="35">(<expr><call><name pos:line="448" pos:column="36">IsADigit</name><argument_list pos:line="448" pos:column="44">(<argument><expr><name pos:line="448" pos:column="45">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="448" pos:column="49"> <block pos:line="448" pos:column="50">{
				<if pos:line="449" pos:column="33">if <condition pos:line="449" pos:column="36">(<expr><name pos:line="449" pos:column="37">ch</name> <op:operator pos:line="449" pos:column="40">-</op:operator> <lit:literal type="char" pos:line="449" pos:column="42">'0'</lit:literal> <op:operator pos:line="449" pos:column="46">&gt;=</op:operator> <name pos:line="449" pos:column="49">base</name></expr>)</condition><then pos:line="449" pos:column="54"> <block pos:line="449" pos:column="55">{
					<return pos:line="450" pos:column="41">return <expr><lit:literal type="boolean" pos:line="450" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="452" pos:column="33">canBeSpecial</name> <op:operator pos:line="452" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="452" pos:column="48">true</lit:literal></expr>;</expr_stmt>

			}</block></then> <else pos:line="454" pos:column="27">else <if pos:line="454" pos:column="32">if <condition pos:line="454" pos:column="35">(<expr><name pos:line="454" pos:column="36">ch</name> <op:operator pos:line="454" pos:column="39">&gt;=</op:operator> <lit:literal type="char" pos:line="454" pos:column="42">'a'</lit:literal> <op:operator pos:line="454" pos:column="46">&amp;&amp;</op:operator> <name pos:line="454" pos:column="49">ch</name> <op:operator pos:line="454" pos:column="52">&lt;=</op:operator> <lit:literal type="char" pos:line="454" pos:column="55">'f'</lit:literal></expr>)</condition><then pos:line="454" pos:column="59"> <block pos:line="454" pos:column="60">{
				<if pos:line="455" pos:column="33">if <condition pos:line="455" pos:column="36">(<expr><name pos:line="455" pos:column="37">ch</name> <op:operator pos:line="455" pos:column="40">-</op:operator> <lit:literal type="char" pos:line="455" pos:column="42">'a'</lit:literal> <op:operator pos:line="455" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="455" pos:column="48">10</lit:literal> <op:operator pos:line="455" pos:column="51">&gt;=</op:operator> <name pos:line="455" pos:column="54">base</name></expr>)</condition><then pos:line="455" pos:column="59"> <block pos:line="455" pos:column="60">{
					<return pos:line="456" pos:column="41">return <expr><lit:literal type="boolean" pos:line="456" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="458" pos:column="33">canBeSpecial</name> <op:operator pos:line="458" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="458" pos:column="48">true</lit:literal></expr>;</expr_stmt>

			}</block></then> <else pos:line="460" pos:column="27">else <if pos:line="460" pos:column="32">if <condition pos:line="460" pos:column="35">(<expr><name pos:line="460" pos:column="36">ch</name> <op:operator pos:line="460" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="460" pos:column="42">'#'</lit:literal> <op:operator pos:line="460" pos:column="46">&amp;&amp;</op:operator> <name pos:line="460" pos:column="49">canBeSpecial</name></expr>)</condition><then pos:line="460" pos:column="62"> <block pos:line="460" pos:column="63">{
				<break pos:line="461" pos:column="33">break;</break>

			}</block></then> <else pos:line="463" pos:column="27">else <block pos:line="463" pos:column="32">{
				<return pos:line="464" pos:column="33">return <expr><lit:literal type="boolean" pos:line="464" pos:column="40">false</lit:literal></expr>;</return>
			}</block></else></if></else></if></else></if></else></if></else></if>
		}</block></for>

		<if pos:line="468" pos:column="17">if <condition pos:line="468" pos:column="20">(<expr><name pos:line="468" pos:column="21">i</name> <op:operator pos:line="468" pos:column="23">==</op:operator> <name pos:line="468" pos:column="26">length</name></expr>)</condition><then pos:line="468" pos:column="33"> <block pos:line="468" pos:column="34">{
			<return pos:line="469" pos:column="25">return <expr><lit:literal type="boolean" pos:line="469" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="472" pos:column="17">i</name><op:operator pos:line="472" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></else></if>

	<comment type="line" pos:line="475" pos:column="9">// Exponent (optional)</comment>
	<if pos:line="476" pos:column="9">if <condition pos:line="476" pos:column="12">(<expr><name pos:line="476" pos:column="13">i</name> <op:operator pos:line="476" pos:column="15">&lt;</op:operator> <name pos:line="476" pos:column="17">length</name></expr>)</condition><then pos:line="476" pos:column="24"> <block pos:line="476" pos:column="25">{
		<if pos:line="477" pos:column="17">if <condition pos:line="477" pos:column="20">(<expr><name><name pos:line="477" pos:column="21">number</name><index pos:line="477" pos:column="27">[<expr><name pos:line="477" pos:column="28">i</name></expr>]</index></name> <op:operator pos:line="477" pos:column="31">!=</op:operator> <lit:literal type="char" pos:line="477" pos:column="34">'e'</lit:literal> <op:operator pos:line="477" pos:column="38">&amp;&amp;</op:operator> <name><name pos:line="477" pos:column="41">number</name><index pos:line="477" pos:column="47">[<expr><name pos:line="477" pos:column="48">i</name></expr>]</index></name> <op:operator pos:line="477" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="477" pos:column="54">'E'</lit:literal></expr>)</condition><then pos:line="477" pos:column="58">
			<return pos:line="478" pos:column="25">return <expr><lit:literal type="boolean" pos:line="478" pos:column="32">false</lit:literal></expr>;</return></then></if>

		<expr_stmt><expr><name pos:line="480" pos:column="17">i</name><op:operator pos:line="480" pos:column="18">++</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="480" pos:column="22">// Move past 'E'</comment>

		<if pos:line="482" pos:column="17">if <condition pos:line="482" pos:column="20">(<expr><name pos:line="482" pos:column="21">i</name> <op:operator pos:line="482" pos:column="23">==</op:operator> <name pos:line="482" pos:column="26">length</name></expr>)</condition><then pos:line="482" pos:column="33"> <block pos:line="482" pos:column="34">{
			<return pos:line="483" pos:column="25">return <expr><lit:literal type="boolean" pos:line="483" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<if pos:line="486" pos:column="17">if <condition pos:line="486" pos:column="20">(<expr><name><name pos:line="486" pos:column="21">number</name><index pos:line="486" pos:column="27">[<expr><name pos:line="486" pos:column="28">i</name></expr>]</index></name> <op:operator pos:line="486" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="486" pos:column="34">'+'</lit:literal></expr>)</condition><then pos:line="486" pos:column="38">
			<expr_stmt><expr><name pos:line="487" pos:column="25">i</name><op:operator pos:line="487" pos:column="26">++</op:operator></expr>;</expr_stmt></then>
		<else pos:line="488" pos:column="17">else <if pos:line="488" pos:column="22">if <condition pos:line="488" pos:column="25">(<expr><name><name pos:line="488" pos:column="26">number</name><index pos:line="488" pos:column="32">[<expr><name pos:line="488" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="488" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="488" pos:column="39">'-'</lit:literal></expr>)</condition><then pos:line="488" pos:column="43"> <block pos:line="488" pos:column="44">{
			<if pos:line="489" pos:column="25">if <condition pos:line="489" pos:column="28">(<expr><name pos:line="489" pos:column="29">seenDot</name></expr>)</condition><then pos:line="489" pos:column="37"> <block pos:line="489" pos:column="38">{
				<expr_stmt><expr><name pos:line="490" pos:column="33">i</name><op:operator pos:line="490" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="491" pos:column="27">else <block pos:line="491" pos:column="32">{
				<return pos:line="492" pos:column="33">return <expr><lit:literal type="boolean" pos:line="492" pos:column="40">false</lit:literal></expr>;</return> <comment type="line" pos:line="492" pos:column="47">// Integer literals should not have negative exponents</comment>
			}</block></else></if>
		}</block></then></if></else></if>

		<if pos:line="496" pos:column="17">if <condition pos:line="496" pos:column="20">(<expr><name pos:line="496" pos:column="21">i</name> <op:operator pos:line="496" pos:column="23">==</op:operator> <name pos:line="496" pos:column="26">length</name></expr>)</condition><then pos:line="496" pos:column="33"> <block pos:line="496" pos:column="34">{
			<return pos:line="497" pos:column="25">return <expr><lit:literal type="boolean" pos:line="497" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="500" pos:column="17">bool</name></type> <name pos:line="500" pos:column="22">canBeSpecial</name> <init pos:line="500" pos:column="35">= <expr><lit:literal type="boolean" pos:line="500" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<for pos:line="502" pos:column="17">for (<init pos:line="502" pos:column="22">;</init> <condition><expr><name pos:line="502" pos:column="24">i</name> <op:operator pos:line="502" pos:column="26">&lt;</op:operator> <name pos:line="502" pos:column="28">length</name></expr>;</condition> <incr><expr><name pos:line="502" pos:column="36">i</name><op:operator pos:line="502" pos:column="37">++</op:operator></expr></incr>) <block pos:line="502" pos:column="41">{
			<if pos:line="503" pos:column="25">if <condition pos:line="503" pos:column="28">(<expr><name><name pos:line="503" pos:column="29">number</name><index pos:line="503" pos:column="35">[<expr><name pos:line="503" pos:column="36">i</name></expr>]</index></name> <op:operator pos:line="503" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="503" pos:column="42">'_'</lit:literal></expr>)</condition><then pos:line="503" pos:column="46"> <block pos:line="503" pos:column="47">{
				<if pos:line="504" pos:column="33">if <condition pos:line="504" pos:column="36">(<expr><op:operator pos:line="504" pos:column="37">!</op:operator><name pos:line="504" pos:column="38">canBeSpecial</name></expr>)</condition><then pos:line="504" pos:column="51"> <block pos:line="504" pos:column="52">{
					<return pos:line="505" pos:column="41">return <expr><lit:literal type="boolean" pos:line="505" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="507" pos:column="33">canBeSpecial</name> <op:operator pos:line="507" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="507" pos:column="48">false</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="508" pos:column="27">else <if pos:line="508" pos:column="32">if <condition pos:line="508" pos:column="35">(<expr><call><name pos:line="508" pos:column="36">IsADigit</name><argument_list pos:line="508" pos:column="44">(<argument><expr><name><name pos:line="508" pos:column="45">number</name><index pos:line="508" pos:column="51">[<expr><name pos:line="508" pos:column="52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="508" pos:column="56"> <block pos:line="508" pos:column="57">{
				<expr_stmt><expr><name pos:line="509" pos:column="33">canBeSpecial</name> <op:operator pos:line="509" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="509" pos:column="48">true</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="510" pos:column="27">else <block pos:line="510" pos:column="32">{
				<return pos:line="511" pos:column="33">return <expr><lit:literal type="boolean" pos:line="511" pos:column="40">false</lit:literal></expr>;</return>
			}</block></else></if></else></if>
		}</block></for>

		<if pos:line="515" pos:column="17">if <condition pos:line="515" pos:column="20">(<expr><op:operator pos:line="515" pos:column="21">!</op:operator><name pos:line="515" pos:column="22">canBeSpecial</name></expr>)</condition><then pos:line="515" pos:column="35">
			<return pos:line="516" pos:column="25">return <expr><lit:literal type="boolean" pos:line="516" pos:column="32">false</lit:literal></expr>;</return></then></if>
	}</block></then></if>

	<comment type="line" pos:line="519" pos:column="9">// if i == length, number was parsed successfully.</comment>
	<return pos:line="520" pos:column="9">return <expr><name pos:line="520" pos:column="16">i</name> <op:operator pos:line="520" pos:column="18">==</op:operator> <name pos:line="520" pos:column="21">length</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="523" pos:column="1">static</specifier> <specifier pos:line="523" pos:column="8">inline</specifier> <name pos:line="523" pos:column="15">bool</name></type> <name pos:line="523" pos:column="20">IsWordCharacter</name><parameter_list pos:line="523" pos:column="35">(<param><decl><type><name pos:line="523" pos:column="36">int</name></type> <name pos:line="523" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="523" pos:column="44">{
	<return pos:line="524" pos:column="9">return <expr><call><name pos:line="524" pos:column="16">IsWordStartCharacter</name><argument_list pos:line="524" pos:column="36">(<argument><expr><name pos:line="524" pos:column="37">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="524" pos:column="41">||</op:operator> <call><name pos:line="524" pos:column="44">IsADigit</name><argument_list pos:line="524" pos:column="52">(<argument><expr><name pos:line="524" pos:column="53">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="527" pos:column="1">static</specifier> <specifier pos:line="527" pos:column="8">inline</specifier> <name pos:line="527" pos:column="15">bool</name></type> <name pos:line="527" pos:column="20">IsWordStartCharacter</name><parameter_list pos:line="527" pos:column="40">(<param><decl><type><name pos:line="527" pos:column="41">int</name></type> <name pos:line="527" pos:column="45">ch</name></decl></param>)</parameter_list> <block pos:line="527" pos:column="49">{
	<return pos:line="528" pos:column="9">return <expr><op:operator pos:line="528" pos:column="16">(</op:operator><call><name pos:line="528" pos:column="17">isascii</name><argument_list pos:line="528" pos:column="24">(<argument><expr><name pos:line="528" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="528" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="528" pos:column="32">isalpha</name><argument_list pos:line="528" pos:column="39">(<argument><expr><name pos:line="528" pos:column="40">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="528" pos:column="43">)</op:operator> <op:operator pos:line="528" pos:column="45">||</op:operator> <name pos:line="528" pos:column="48">ch</name> <op:operator pos:line="528" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="528" pos:column="54">'_'</lit:literal></expr>;</return>
}</block></function>
</unit>
