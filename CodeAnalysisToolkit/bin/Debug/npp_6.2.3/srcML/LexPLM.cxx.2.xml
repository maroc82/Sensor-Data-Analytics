<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexPLM.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Copyright (c) 1990-2007, Scientific Toolworks, Inc.</comment>
<comment type="line" pos:line="2" pos:column="1">// Author: Jason Haslam</comment>
<comment type="line" pos:line="3" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">include</cpp:directive> <cpp:file pos:line="5" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">include</cpp:directive> <cpp:file pos:line="6" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef</cpp:directive> <name pos:line="23" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="24" pos:column="1">using namespace <name pos:line="24" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="27" pos:column="1">static</specifier> <name pos:line="27" pos:column="8">void</name></type> <name pos:line="27" pos:column="13">GetRange</name><parameter_list pos:line="27" pos:column="21">(<param><decl><type><name pos:line="27" pos:column="22">unsigned</name> <name pos:line="27" pos:column="31">int</name></type> <name pos:line="27" pos:column="35">start</name></decl></param>,
                     <param><decl><type><name pos:line="28" pos:column="22">unsigned</name> <name pos:line="28" pos:column="31">int</name></type> <name pos:line="28" pos:column="35">end</name></decl></param>,
                     <param><decl><type><name pos:line="29" pos:column="22">Accessor</name> <type:modifier pos:line="29" pos:column="31">&amp;</type:modifier></type><name pos:line="29" pos:column="32">styler</name></decl></param>,
                     <param><decl><type><name pos:line="30" pos:column="22">char</name> <type:modifier pos:line="30" pos:column="27">*</type:modifier></type><name pos:line="30" pos:column="28">s</name></decl></param>,
                     <param><decl><type><name pos:line="31" pos:column="22">unsigned</name> <name pos:line="31" pos:column="31">int</name></type> <name pos:line="31" pos:column="35">len</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="40">{
	<decl_stmt><decl><type><name pos:line="32" pos:column="9">unsigned</name> <name pos:line="32" pos:column="18">int</name></type> <name pos:line="32" pos:column="22">i</name> <init pos:line="32" pos:column="24">= <expr><lit:literal type="number" pos:line="32" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="33" pos:column="9">while <condition pos:line="33" pos:column="15">(<expr><op:operator pos:line="33" pos:column="16">(</op:operator><name pos:line="33" pos:column="17">i</name> <op:operator pos:line="33" pos:column="19">&lt;</op:operator> <name pos:line="33" pos:column="21">end</name> <op:operator pos:line="33" pos:column="25">-</op:operator> <name pos:line="33" pos:column="27">start</name> <op:operator pos:line="33" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="33" pos:column="35">1</lit:literal><op:operator pos:line="33" pos:column="36">)</op:operator> <op:operator pos:line="33" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="33" pos:column="41">(</op:operator><name pos:line="33" pos:column="42">i</name> <op:operator pos:line="33" pos:column="44">&lt;</op:operator> <name pos:line="33" pos:column="46">len</name><op:operator pos:line="33" pos:column="49">-</op:operator><lit:literal type="number" pos:line="33" pos:column="50">1</lit:literal><op:operator pos:line="33" pos:column="51">)</op:operator></expr>)</condition> <block pos:line="33" pos:column="54">{
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">s</name><index pos:line="34" pos:column="18">[<expr><name pos:line="34" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="34" pos:column="22">=</op:operator> <call><name><name pos:line="34" pos:column="24">static_cast</name><argument_list pos:line="34" pos:column="35">&lt;<argument><expr><name pos:line="34" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="41">(<argument><expr><call><name pos:line="34" pos:column="42">tolower</name><argument_list pos:line="34" pos:column="49">(<argument><expr><name><name pos:line="34" pos:column="50">styler</name><index pos:line="34" pos:column="56">[<expr><name pos:line="34" pos:column="57">start</name> <op:operator pos:line="34" pos:column="63">+</op:operator> <name pos:line="34" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">i</name><op:operator pos:line="35" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">s</name><index pos:line="37" pos:column="10">[<expr><name pos:line="37" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="37" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="37" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="40" pos:column="1">static</specifier> <name pos:line="40" pos:column="8">void</name></type> <name pos:line="40" pos:column="13">ColourisePlmDoc</name><parameter_list pos:line="40" pos:column="28">(<param><decl><type><name pos:line="40" pos:column="29">unsigned</name> <name pos:line="40" pos:column="38">int</name></type> <name pos:line="40" pos:column="42">startPos</name></decl></param>,
                            <param><decl><type><name pos:line="41" pos:column="29">int</name></type> <name pos:line="41" pos:column="33">length</name></decl></param>,
                            <param><decl><type><name pos:line="42" pos:column="29">int</name></type> <name pos:line="42" pos:column="33">initStyle</name></decl></param>,
                            <param><decl><type><name pos:line="43" pos:column="29">WordList</name> <type:modifier pos:line="43" pos:column="38">*</type:modifier></type><name><name pos:line="43" pos:column="39">keywordlists</name><index pos:line="43" pos:column="51">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="44" pos:column="29">Accessor</name> <type:modifier pos:line="44" pos:column="38">&amp;</type:modifier></type><name pos:line="44" pos:column="39">styler</name></decl></param>)</parameter_list>
<block pos:line="45" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">unsigned</name> <name pos:line="46" pos:column="18">int</name></type> <name pos:line="46" pos:column="22">endPos</name> <init pos:line="46" pos:column="29">= <expr><name pos:line="46" pos:column="31">startPos</name> <op:operator pos:line="46" pos:column="40">+</op:operator> <name pos:line="46" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">int</name></type> <name pos:line="47" pos:column="13">state</name> <init pos:line="47" pos:column="19">= <expr><name pos:line="47" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="49" pos:column="9">styler</name><op:operator pos:line="49" pos:column="15">.</op:operator><name pos:line="49" pos:column="16">StartAt</name></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="50" pos:column="9">styler</name><op:operator pos:line="50" pos:column="15">.</op:operator><name pos:line="50" pos:column="16">StartSegment</name></name><argument_list pos:line="50" pos:column="28">(<argument><expr><name pos:line="50" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:line="52" pos:column="9">for (<init><decl><type><name pos:line="52" pos:column="14">unsigned</name> <name pos:line="52" pos:column="23">int</name></type> <name pos:line="52" pos:column="27">i</name> <init pos:line="52" pos:column="29">= <expr><name pos:line="52" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="52" pos:column="41">i</name> <op:operator pos:line="52" pos:column="43">&lt;</op:operator> <name pos:line="52" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="52" pos:column="53">i</name><op:operator pos:line="52" pos:column="54">++</op:operator></expr></incr>) <block pos:line="52" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="53" pos:column="17">char</name></type> <name pos:line="53" pos:column="22">ch</name> <init pos:line="53" pos:column="25">= <expr><call><name><name pos:line="53" pos:column="27">styler</name><op:operator pos:line="53" pos:column="33">.</op:operator><name pos:line="53" pos:column="34">SafeGetCharAt</name></name><argument_list pos:line="53" pos:column="47">(<argument><expr><name pos:line="53" pos:column="48">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="54" pos:column="17">char</name></type> <name pos:line="54" pos:column="22">chNext</name> <init pos:line="54" pos:column="29">= <expr><call><name><name pos:line="54" pos:column="31">styler</name><op:operator pos:line="54" pos:column="37">.</op:operator><name pos:line="54" pos:column="38">SafeGetCharAt</name></name><argument_list pos:line="54" pos:column="51">(<argument><expr><name pos:line="54" pos:column="52">i</name> <op:operator pos:line="54" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="54" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">state</name> <op:operator pos:line="56" pos:column="27">==</op:operator> <name pos:line="56" pos:column="30">SCE_PLM_DEFAULT</name></expr>)</condition><then pos:line="56" pos:column="46"> <block pos:line="56" pos:column="47">{
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">ch</name> <op:operator pos:line="57" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="35">'/'</lit:literal> <op:operator pos:line="57" pos:column="39">&amp;&amp;</op:operator> <name pos:line="57" pos:column="42">chNext</name> <op:operator pos:line="57" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="52">'*'</lit:literal></expr>)</condition><then pos:line="57" pos:column="56"> <block pos:line="57" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="58" pos:column="33">styler</name><op:operator pos:line="58" pos:column="39">.</op:operator><name pos:line="58" pos:column="40">ColourTo</name></name><argument_list pos:line="58" pos:column="48">(<argument><expr><name pos:line="58" pos:column="49">i</name> <op:operator pos:line="58" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="58" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="59" pos:column="33">state</name> <op:operator pos:line="59" pos:column="39">=</op:operator> <name pos:line="59" pos:column="41">SCE_PLM_COMMENT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="60" pos:column="27">else <if pos:line="60" pos:column="32">if <condition pos:line="60" pos:column="35">(<expr><name pos:line="60" pos:column="36">ch</name> <op:operator pos:line="60" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="60" pos:column="47"> <block pos:line="60" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="61" pos:column="33">styler</name><op:operator pos:line="61" pos:column="39">.</op:operator><name pos:line="61" pos:column="40">ColourTo</name></name><argument_list pos:line="61" pos:column="48">(<argument><expr><name pos:line="61" pos:column="49">i</name> <op:operator pos:line="61" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="61" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="62" pos:column="33">state</name> <op:operator pos:line="62" pos:column="39">=</op:operator> <name pos:line="62" pos:column="41">SCE_PLM_STRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="63" pos:column="27">else <if pos:line="63" pos:column="32">if <condition pos:line="63" pos:column="35">(<expr><call><name pos:line="63" pos:column="36">isdigit</name><argument_list pos:line="63" pos:column="43">(<argument><expr><name pos:line="63" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="63" pos:column="48"> <block pos:line="63" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="64" pos:column="33">styler</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">ColourTo</name></name><argument_list pos:line="64" pos:column="48">(<argument><expr><name pos:line="64" pos:column="49">i</name> <op:operator pos:line="64" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="64" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="65" pos:column="33">state</name> <op:operator pos:line="65" pos:column="39">=</op:operator> <name pos:line="65" pos:column="41">SCE_PLM_NUMBER</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="66" pos:column="27">else <if pos:line="66" pos:column="32">if <condition pos:line="66" pos:column="35">(<expr><call><name pos:line="66" pos:column="36">isalpha</name><argument_list pos:line="66" pos:column="43">(<argument><expr><name pos:line="66" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="66" pos:column="48"> <block pos:line="66" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="67" pos:column="33">styler</name><op:operator pos:line="67" pos:column="39">.</op:operator><name pos:line="67" pos:column="40">ColourTo</name></name><argument_list pos:line="67" pos:column="48">(<argument><expr><name pos:line="67" pos:column="49">i</name> <op:operator pos:line="67" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="67" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="68" pos:column="33">state</name> <op:operator pos:line="68" pos:column="39">=</op:operator> <name pos:line="68" pos:column="41">SCE_PLM_IDENTIFIER</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="69" pos:column="27">else <if pos:line="69" pos:column="32">if <condition pos:line="69" pos:column="35">(<expr><name pos:line="69" pos:column="36">ch</name> <op:operator pos:line="69" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="69" pos:column="42">'+'</lit:literal> <op:operator pos:line="69" pos:column="46">||</op:operator> <name pos:line="69" pos:column="49">ch</name> <op:operator pos:line="69" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="69" pos:column="55">'-'</lit:literal> <op:operator pos:line="69" pos:column="59">||</op:operator> <name pos:line="69" pos:column="62">ch</name> <op:operator pos:line="69" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="69" pos:column="68">'*'</lit:literal> <op:operator pos:line="69" pos:column="72">||</op:operator> <name pos:line="69" pos:column="75">ch</name> <op:operator pos:line="69" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="69" pos:column="81">'/'</lit:literal> <op:operator pos:line="69" pos:column="85">||</op:operator>
			           <name pos:line="70" pos:column="36">ch</name> <op:operator pos:line="70" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="42">'='</lit:literal> <op:operator pos:line="70" pos:column="46">||</op:operator> <name pos:line="70" pos:column="49">ch</name> <op:operator pos:line="70" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="55">'&lt;'</lit:literal> <op:operator pos:line="70" pos:column="59">||</op:operator> <name pos:line="70" pos:column="62">ch</name> <op:operator pos:line="70" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="68">'&gt;'</lit:literal> <op:operator pos:line="70" pos:column="72">||</op:operator> <name pos:line="70" pos:column="75">ch</name> <op:operator pos:line="70" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="81">':'</lit:literal></expr>)</condition><then pos:line="70" pos:column="85"> <block pos:line="70" pos:column="86">{
				<expr_stmt><expr><call><name><name pos:line="71" pos:column="33">styler</name><op:operator pos:line="71" pos:column="39">.</op:operator><name pos:line="71" pos:column="40">ColourTo</name></name><argument_list pos:line="71" pos:column="48">(<argument><expr><name pos:line="71" pos:column="49">i</name> <op:operator pos:line="71" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="71" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="72" pos:column="33">state</name> <op:operator pos:line="72" pos:column="39">=</op:operator> <name pos:line="72" pos:column="41">SCE_PLM_OPERATOR</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="73" pos:column="27">else <if pos:line="73" pos:column="32">if <condition pos:line="73" pos:column="35">(<expr><name pos:line="73" pos:column="36">ch</name> <op:operator pos:line="73" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="73" pos:column="42">'$'</lit:literal></expr>)</condition><then pos:line="73" pos:column="46"> <block pos:line="73" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="74" pos:column="33">styler</name><op:operator pos:line="74" pos:column="39">.</op:operator><name pos:line="74" pos:column="40">ColourTo</name></name><argument_list pos:line="74" pos:column="48">(<argument><expr><name pos:line="74" pos:column="49">i</name> <op:operator pos:line="74" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="74" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="75" pos:column="33">state</name> <op:operator pos:line="75" pos:column="39">=</op:operator> <name pos:line="75" pos:column="41">SCE_PLM_CONTROL</name></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then> <else pos:line="77" pos:column="19">else <if pos:line="77" pos:column="24">if <condition pos:line="77" pos:column="27">(<expr><name pos:line="77" pos:column="28">state</name> <op:operator pos:line="77" pos:column="34">==</op:operator> <name pos:line="77" pos:column="37">SCE_PLM_COMMENT</name></expr>)</condition><then pos:line="77" pos:column="53"> <block pos:line="77" pos:column="54">{
			<if pos:line="78" pos:column="25">if <condition pos:line="78" pos:column="28">(<expr><name pos:line="78" pos:column="29">ch</name> <op:operator pos:line="78" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="35">'*'</lit:literal> <op:operator pos:line="78" pos:column="39">&amp;&amp;</op:operator> <name pos:line="78" pos:column="42">chNext</name> <op:operator pos:line="78" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="52">'/'</lit:literal></expr>)</condition><then pos:line="78" pos:column="56"> <block pos:line="78" pos:column="57">{
				<expr_stmt><expr><name pos:line="79" pos:column="33">i</name><op:operator pos:line="79" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="80" pos:column="33">styler</name><op:operator pos:line="80" pos:column="39">.</op:operator><name pos:line="80" pos:column="40">ColourTo</name></name><argument_list pos:line="80" pos:column="48">(<argument><expr><name pos:line="80" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="81" pos:column="33">state</name> <op:operator pos:line="81" pos:column="39">=</op:operator> <name pos:line="81" pos:column="41">SCE_PLM_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="83" pos:column="19">else <if pos:line="83" pos:column="24">if <condition pos:line="83" pos:column="27">(<expr><name pos:line="83" pos:column="28">state</name> <op:operator pos:line="83" pos:column="34">==</op:operator> <name pos:line="83" pos:column="37">SCE_PLM_STRING</name></expr>)</condition><then pos:line="83" pos:column="52"> <block pos:line="83" pos:column="53">{
			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name pos:line="84" pos:column="29">ch</name> <op:operator pos:line="84" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="35">'\''</lit:literal></expr>)</condition><then pos:line="84" pos:column="40"> <block pos:line="84" pos:column="41">{
				<if pos:line="85" pos:column="33">if <condition pos:line="85" pos:column="36">(<expr><name pos:line="85" pos:column="37">chNext</name> <op:operator pos:line="85" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="47">'\''</lit:literal></expr>)</condition><then pos:line="85" pos:column="52"> <block pos:line="85" pos:column="53">{
					<expr_stmt><expr><name pos:line="86" pos:column="41">i</name><op:operator pos:line="86" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="87" pos:column="35">else <block pos:line="87" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="88" pos:column="41">styler</name><op:operator pos:line="88" pos:column="47">.</op:operator><name pos:line="88" pos:column="48">ColourTo</name></name><argument_list pos:line="88" pos:column="56">(<argument><expr><name pos:line="88" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="60">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="89" pos:column="41">state</name> <op:operator pos:line="89" pos:column="47">=</op:operator> <name pos:line="89" pos:column="49">SCE_PLM_DEFAULT</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="92" pos:column="19">else <if pos:line="92" pos:column="24">if <condition pos:line="92" pos:column="27">(<expr><name pos:line="92" pos:column="28">state</name> <op:operator pos:line="92" pos:column="34">==</op:operator> <name pos:line="92" pos:column="37">SCE_PLM_NUMBER</name></expr>)</condition><then pos:line="92" pos:column="52"> <block pos:line="92" pos:column="53">{
			<if pos:line="93" pos:column="25">if <condition pos:line="93" pos:column="28">(<expr><op:operator pos:line="93" pos:column="29">!</op:operator><call><name pos:line="93" pos:column="30">isdigit</name><argument_list pos:line="93" pos:column="37">(<argument><expr><name pos:line="93" pos:column="38">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="93" pos:column="45">!</op:operator><call><name pos:line="93" pos:column="46">isalpha</name><argument_list pos:line="93" pos:column="53">(<argument><expr><name pos:line="93" pos:column="54">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="58">&amp;&amp;</op:operator> <name pos:line="93" pos:column="61">ch</name> <op:operator pos:line="93" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="93" pos:column="67">'$'</lit:literal></expr>)</condition><then pos:line="93" pos:column="71"> <block pos:line="93" pos:column="72">{
				<expr_stmt><expr><name pos:line="94" pos:column="33">i</name><op:operator pos:line="94" pos:column="34">--</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">styler</name><op:operator pos:line="95" pos:column="39">.</op:operator><name pos:line="95" pos:column="40">ColourTo</name></name><argument_list pos:line="95" pos:column="48">(<argument><expr><name pos:line="95" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="96" pos:column="33">state</name> <op:operator pos:line="96" pos:column="39">=</op:operator> <name pos:line="96" pos:column="41">SCE_PLM_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="98" pos:column="19">else <if pos:line="98" pos:column="24">if <condition pos:line="98" pos:column="27">(<expr><name pos:line="98" pos:column="28">state</name> <op:operator pos:line="98" pos:column="34">==</op:operator> <name pos:line="98" pos:column="37">SCE_PLM_IDENTIFIER</name></expr>)</condition><then pos:line="98" pos:column="56"> <block pos:line="98" pos:column="57">{
			<if pos:line="99" pos:column="25">if <condition pos:line="99" pos:column="28">(<expr><op:operator pos:line="99" pos:column="29">!</op:operator><call><name pos:line="99" pos:column="30">isdigit</name><argument_list pos:line="99" pos:column="37">(<argument><expr><name pos:line="99" pos:column="38">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="99" pos:column="45">!</op:operator><call><name pos:line="99" pos:column="46">isalpha</name><argument_list pos:line="99" pos:column="53">(<argument><expr><name pos:line="99" pos:column="54">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="58">&amp;&amp;</op:operator> <name pos:line="99" pos:column="61">ch</name> <op:operator pos:line="99" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="99" pos:column="67">'$'</lit:literal></expr>)</condition><then pos:line="99" pos:column="71"> <block pos:line="99" pos:column="72">{
				<comment type="line" pos:line="100" pos:column="33">// Get the entire identifier.</comment>
				<decl_stmt><decl><type><name pos:line="101" pos:column="33">char</name></type> <name><name pos:line="101" pos:column="38">word</name><index pos:line="101" pos:column="42">[<expr><lit:literal type="number" pos:line="101" pos:column="43">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="102" pos:column="33">int</name></type> <name pos:line="102" pos:column="37">segmentStart</name> <init pos:line="102" pos:column="50">= <expr><call><name><name pos:line="102" pos:column="52">styler</name><op:operator pos:line="102" pos:column="58">.</op:operator><name pos:line="102" pos:column="59">GetStartSegment</name></name><argument_list pos:line="102" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="103" pos:column="33">GetRange</name><argument_list pos:line="103" pos:column="41">(<argument><expr><name pos:line="103" pos:column="42">segmentStart</name></expr></argument>, <argument><expr><name pos:line="103" pos:column="56">i</name> <op:operator pos:line="103" pos:column="58">-</op:operator> <lit:literal type="number" pos:line="103" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="63">styler</name></expr></argument>, <argument><expr><name pos:line="103" pos:column="71">word</name></expr></argument>, <argument><expr><sizeof pos:line="103" pos:column="77">sizeof<argument_list pos:line="103" pos:column="83">(<argument><expr><name pos:line="103" pos:column="84">word</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name pos:line="105" pos:column="33">i</name><op:operator pos:line="105" pos:column="34">--</op:operator></expr>;</expr_stmt>
				<if pos:line="106" pos:column="33">if <condition pos:line="106" pos:column="36">(<expr><name><name pos:line="106" pos:column="37">keywordlists</name><index pos:line="106" pos:column="49">[<expr><lit:literal type="number" pos:line="106" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="106" pos:column="52">-&gt;</op:operator><call><name pos:line="106" pos:column="54">InList</name><argument_list pos:line="106" pos:column="60">(<argument><expr><name pos:line="106" pos:column="61">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="67">
					<expr_stmt><expr><call><name><name pos:line="107" pos:column="41">styler</name><op:operator pos:line="107" pos:column="47">.</op:operator><name pos:line="107" pos:column="48">ColourTo</name></name><argument_list pos:line="107" pos:column="56">(<argument><expr><name pos:line="107" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="60">SCE_PLM_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="108" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="109" pos:column="41">styler</name><op:operator pos:line="109" pos:column="47">.</op:operator><name pos:line="109" pos:column="48">ColourTo</name></name><argument_list pos:line="109" pos:column="56">(<argument><expr><name pos:line="109" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="60">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><name pos:line="110" pos:column="33">state</name> <op:operator pos:line="110" pos:column="39">=</op:operator> <name pos:line="110" pos:column="41">SCE_PLM_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="112" pos:column="19">else <if pos:line="112" pos:column="24">if <condition pos:line="112" pos:column="27">(<expr><name pos:line="112" pos:column="28">state</name> <op:operator pos:line="112" pos:column="34">==</op:operator> <name pos:line="112" pos:column="37">SCE_PLM_OPERATOR</name></expr>)</condition><then pos:line="112" pos:column="54"> <block pos:line="112" pos:column="55">{
			<if pos:line="113" pos:column="25">if <condition pos:line="113" pos:column="28">(<expr><name pos:line="113" pos:column="29">ch</name> <op:operator pos:line="113" pos:column="32">!=</op:operator> <lit:literal type="char" pos:line="113" pos:column="35">'='</lit:literal> <op:operator pos:line="113" pos:column="39">&amp;&amp;</op:operator> <name pos:line="113" pos:column="42">ch</name> <op:operator pos:line="113" pos:column="45">!=</op:operator> <lit:literal type="char" pos:line="113" pos:column="48">'&gt;'</lit:literal></expr>)</condition><then pos:line="113" pos:column="52"> <block pos:line="113" pos:column="53">{
				<expr_stmt><expr><name pos:line="114" pos:column="33">i</name><op:operator pos:line="114" pos:column="34">--</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="115" pos:column="33">styler</name><op:operator pos:line="115" pos:column="39">.</op:operator><name pos:line="115" pos:column="40">ColourTo</name></name><argument_list pos:line="115" pos:column="48">(<argument><expr><name pos:line="115" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="116" pos:column="33">state</name> <op:operator pos:line="116" pos:column="39">=</op:operator> <name pos:line="116" pos:column="41">SCE_PLM_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="118" pos:column="19">else <if pos:line="118" pos:column="24">if <condition pos:line="118" pos:column="27">(<expr><name pos:line="118" pos:column="28">state</name> <op:operator pos:line="118" pos:column="34">==</op:operator> <name pos:line="118" pos:column="37">SCE_PLM_CONTROL</name></expr>)</condition><then pos:line="118" pos:column="53"> <block pos:line="118" pos:column="54">{
			<if pos:line="119" pos:column="25">if <condition pos:line="119" pos:column="28">(<expr><name pos:line="119" pos:column="29">ch</name> <op:operator pos:line="119" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="35">'\r'</lit:literal> <op:operator pos:line="119" pos:column="40">||</op:operator> <name pos:line="119" pos:column="43">ch</name> <op:operator pos:line="119" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="119" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="119" pos:column="54"> <block pos:line="119" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="120" pos:column="33">styler</name><op:operator pos:line="120" pos:column="39">.</op:operator><name pos:line="120" pos:column="40">ColourTo</name></name><argument_list pos:line="120" pos:column="48">(<argument><expr><name pos:line="120" pos:column="49">i</name> <op:operator pos:line="120" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="120" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="120" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="121" pos:column="33">state</name> <op:operator pos:line="121" pos:column="39">=</op:operator> <name pos:line="121" pos:column="41">SCE_PLM_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="125" pos:column="9">styler</name><op:operator pos:line="125" pos:column="15">.</op:operator><name pos:line="125" pos:column="16">ColourTo</name></name><argument_list pos:line="125" pos:column="24">(<argument><expr><name pos:line="125" pos:column="25">endPos</name> <op:operator pos:line="125" pos:column="32">-</op:operator> <lit:literal type="number" pos:line="125" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="37">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="128" pos:column="1">static</specifier> <name pos:line="128" pos:column="8">void</name></type> <name pos:line="128" pos:column="13">FoldPlmDoc</name><parameter_list pos:line="128" pos:column="23">(<param><decl><type><name pos:line="128" pos:column="24">unsigned</name> <name pos:line="128" pos:column="33">int</name></type> <name pos:line="128" pos:column="37">startPos</name></decl></param>,
                       <param><decl><type><name pos:line="129" pos:column="24">int</name></type> <name pos:line="129" pos:column="28">length</name></decl></param>,
                       <param><decl><type><name pos:line="130" pos:column="24">int</name></type> <name pos:line="130" pos:column="28">initStyle</name></decl></param>,
                       <param><decl><type><name><name pos:line="131" pos:column="24">WordList</name> <type:modifier pos:line="131" pos:column="33">*</type:modifier><index pos:line="131" pos:column="34">[]</index></name></type></decl></param>,
                       <param><decl><type><name pos:line="132" pos:column="24">Accessor</name> <type:modifier pos:line="132" pos:column="33">&amp;</type:modifier></type><name pos:line="132" pos:column="34">styler</name></decl></param>)</parameter_list>
<block pos:line="133" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">bool</name></type> <name pos:line="134" pos:column="14">foldComment</name> <init pos:line="134" pos:column="26">= <expr><call><name><name pos:line="134" pos:column="28">styler</name><op:operator pos:line="134" pos:column="34">.</op:operator><name pos:line="134" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="134" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="134" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="134" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">bool</name></type> <name pos:line="135" pos:column="14">foldCompact</name> <init pos:line="135" pos:column="26">= <expr><call><name><name pos:line="135" pos:column="28">styler</name><op:operator pos:line="135" pos:column="34">.</op:operator><name pos:line="135" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="135" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="135" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="135" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="135" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">unsigned</name> <name pos:line="136" pos:column="18">int</name></type> <name pos:line="136" pos:column="22">endPos</name> <init pos:line="136" pos:column="29">= <expr><name pos:line="136" pos:column="31">startPos</name> <op:operator pos:line="136" pos:column="40">+</op:operator> <name pos:line="136" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">int</name></type> <name pos:line="137" pos:column="13">visibleChars</name> <init pos:line="137" pos:column="26">= <expr><lit:literal type="number" pos:line="137" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="138" pos:column="9">int</name></type> <name pos:line="138" pos:column="13">lineCurrent</name> <init pos:line="138" pos:column="25">= <expr><call><name><name pos:line="138" pos:column="27">styler</name><op:operator pos:line="138" pos:column="33">.</op:operator><name pos:line="138" pos:column="34">GetLine</name></name><argument_list pos:line="138" pos:column="41">(<argument><expr><name pos:line="138" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">int</name></type> <name pos:line="139" pos:column="13">levelPrev</name> <init pos:line="139" pos:column="23">= <expr><call><name><name pos:line="139" pos:column="25">styler</name><op:operator pos:line="139" pos:column="31">.</op:operator><name pos:line="139" pos:column="32">LevelAt</name></name><argument_list pos:line="139" pos:column="39">(<argument><expr><name pos:line="139" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="139" pos:column="53">&amp;</op:operator> <name pos:line="139" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="140" pos:column="9">int</name></type> <name pos:line="140" pos:column="13">levelCurrent</name> <init pos:line="140" pos:column="26">= <expr><name pos:line="140" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="141" pos:column="9">char</name></type> <name pos:line="141" pos:column="14">chNext</name> <init pos:line="141" pos:column="21">= <expr><name><name pos:line="141" pos:column="23">styler</name><index pos:line="141" pos:column="29">[<expr><name pos:line="141" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">int</name></type> <name pos:line="142" pos:column="13">styleNext</name> <init pos:line="142" pos:column="23">= <expr><call><name><name pos:line="142" pos:column="25">styler</name><op:operator pos:line="142" pos:column="31">.</op:operator><name pos:line="142" pos:column="32">StyleAt</name></name><argument_list pos:line="142" pos:column="39">(<argument><expr><name pos:line="142" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="143" pos:column="9">int</name></type> <name pos:line="143" pos:column="13">style</name> <init pos:line="143" pos:column="19">= <expr><name pos:line="143" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="144" pos:column="9">int</name></type> <name pos:line="144" pos:column="13">startKeyword</name> <init pos:line="144" pos:column="26">= <expr><lit:literal type="number" pos:line="144" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="146" pos:column="9">for (<init><decl><type><name pos:line="146" pos:column="14">unsigned</name> <name pos:line="146" pos:column="23">int</name></type> <name pos:line="146" pos:column="27">i</name> <init pos:line="146" pos:column="29">= <expr><name pos:line="146" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="146" pos:column="41">i</name> <op:operator pos:line="146" pos:column="43">&lt;</op:operator> <name pos:line="146" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="146" pos:column="53">i</name><op:operator pos:line="146" pos:column="54">++</op:operator></expr></incr>) <block pos:line="146" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="147" pos:column="17">char</name></type> <name pos:line="147" pos:column="22">ch</name> <init pos:line="147" pos:column="25">= <expr><name pos:line="147" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="148" pos:column="17">chNext</name> <op:operator pos:line="148" pos:column="24">=</op:operator> <call><name><name pos:line="148" pos:column="26">styler</name><op:operator pos:line="148" pos:column="32">.</op:operator><name pos:line="148" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="148" pos:column="46">(<argument><expr><name pos:line="148" pos:column="47">i</name> <op:operator pos:line="148" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="148" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="149" pos:column="17">int</name></type> <name pos:line="149" pos:column="21">stylePrev</name> <init pos:line="149" pos:column="31">= <expr><name pos:line="149" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="150" pos:column="17">style</name> <op:operator pos:line="150" pos:column="23">=</op:operator> <name pos:line="150" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="151" pos:column="17">styleNext</name> <op:operator pos:line="151" pos:column="27">=</op:operator> <call><name><name pos:line="151" pos:column="29">styler</name><op:operator pos:line="151" pos:column="35">.</op:operator><name pos:line="151" pos:column="36">StyleAt</name></name><argument_list pos:line="151" pos:column="43">(<argument><expr><name pos:line="151" pos:column="44">i</name> <op:operator pos:line="151" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="151" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">bool</name></type> <name pos:line="152" pos:column="22">atEOL</name> <init pos:line="152" pos:column="28">= <expr><op:operator pos:line="152" pos:column="30">(</op:operator><name pos:line="152" pos:column="31">ch</name> <op:operator pos:line="152" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="152" pos:column="37">'\r'</lit:literal> <op:operator pos:line="152" pos:column="42">&amp;&amp;</op:operator> <name pos:line="152" pos:column="45">chNext</name> <op:operator pos:line="152" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="152" pos:column="55">'\n'</lit:literal><op:operator pos:line="152" pos:column="59">)</op:operator> <op:operator pos:line="152" pos:column="61">||</op:operator> <op:operator pos:line="152" pos:column="64">(</op:operator><name pos:line="152" pos:column="65">ch</name> <op:operator pos:line="152" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="152" pos:column="71">'\n'</lit:literal><op:operator pos:line="152" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><name pos:line="154" pos:column="21">stylePrev</name> <op:operator pos:line="154" pos:column="31">!=</op:operator> <name pos:line="154" pos:column="34">SCE_PLM_KEYWORD</name> <op:operator pos:line="154" pos:column="50">&amp;&amp;</op:operator> <name pos:line="154" pos:column="53">style</name> <op:operator pos:line="154" pos:column="59">==</op:operator> <name pos:line="154" pos:column="62">SCE_PLM_KEYWORD</name></expr>)</condition><then pos:line="154" pos:column="78">
			<expr_stmt><expr><name pos:line="155" pos:column="25">startKeyword</name> <op:operator pos:line="155" pos:column="38">=</op:operator> <name pos:line="155" pos:column="40">i</name></expr>;</expr_stmt></then></if>

		<if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><name pos:line="157" pos:column="21">style</name> <op:operator pos:line="157" pos:column="27">==</op:operator> <name pos:line="157" pos:column="30">SCE_PLM_KEYWORD</name> <op:operator pos:line="157" pos:column="46">&amp;&amp;</op:operator> <name pos:line="157" pos:column="49">styleNext</name> <op:operator pos:line="157" pos:column="59">!=</op:operator> <name pos:line="157" pos:column="62">SCE_PLM_KEYWORD</name></expr>)</condition><then pos:line="157" pos:column="78"> <block pos:line="157" pos:column="79">{
			<decl_stmt><decl><type><name pos:line="158" pos:column="25">char</name></type> <name><name pos:line="158" pos:column="30">word</name><index pos:line="158" pos:column="34">[<expr><lit:literal type="number" pos:line="158" pos:column="35">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="159" pos:column="25">GetRange</name><argument_list pos:line="159" pos:column="33">(<argument><expr><name pos:line="159" pos:column="34">startKeyword</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="48">i</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="51">styler</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="59">word</name></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="65">sizeof<argument_list pos:line="159" pos:column="71">(<argument><expr><name pos:line="159" pos:column="72">word</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="161" pos:column="25">if <condition pos:line="161" pos:column="28">(<expr><call><name pos:line="161" pos:column="29">strcmp</name><argument_list pos:line="161" pos:column="35">(<argument><expr><name pos:line="161" pos:column="36">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="42">"procedure"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="161" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="161" pos:column="58">0</lit:literal> <op:operator pos:line="161" pos:column="60">||</op:operator> <call><name pos:line="161" pos:column="63">strcmp</name><argument_list pos:line="161" pos:column="69">(<argument><expr><name pos:line="161" pos:column="70">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="76">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="161" pos:column="82">==</op:operator> <lit:literal type="number" pos:line="161" pos:column="85">0</lit:literal></expr>)</condition><then pos:line="161" pos:column="87">
				<expr_stmt><expr><name pos:line="162" pos:column="33">levelCurrent</name><op:operator pos:line="162" pos:column="45">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="163" pos:column="25">else <if pos:line="163" pos:column="30">if <condition pos:line="163" pos:column="33">(<expr><call><name pos:line="163" pos:column="34">strcmp</name><argument_list pos:line="163" pos:column="40">(<argument><expr><name pos:line="163" pos:column="41">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="163" pos:column="47">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="163" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="163" pos:column="59">
				<expr_stmt><expr><name pos:line="164" pos:column="33">levelCurrent</name><op:operator pos:line="164" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if></else></if>
		}</block></then></if>

		<if pos:line="167" pos:column="17">if <condition pos:line="167" pos:column="20">(<expr><name pos:line="167" pos:column="21">foldComment</name></expr>)</condition><then pos:line="167" pos:column="33"> <block pos:line="167" pos:column="34">{
			<if pos:line="168" pos:column="25">if <condition pos:line="168" pos:column="28">(<expr><name pos:line="168" pos:column="29">stylePrev</name> <op:operator pos:line="168" pos:column="39">!=</op:operator> <name pos:line="168" pos:column="42">SCE_PLM_COMMENT</name> <op:operator pos:line="168" pos:column="58">&amp;&amp;</op:operator> <name pos:line="168" pos:column="61">style</name> <op:operator pos:line="168" pos:column="67">==</op:operator> <name pos:line="168" pos:column="70">SCE_PLM_COMMENT</name></expr>)</condition><then pos:line="168" pos:column="86">
				<expr_stmt><expr><name pos:line="169" pos:column="33">levelCurrent</name><op:operator pos:line="169" pos:column="45">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="170" pos:column="25">else <if pos:line="170" pos:column="30">if <condition pos:line="170" pos:column="33">(<expr><name pos:line="170" pos:column="34">stylePrev</name> <op:operator pos:line="170" pos:column="44">==</op:operator> <name pos:line="170" pos:column="47">SCE_PLM_COMMENT</name> <op:operator pos:line="170" pos:column="63">&amp;&amp;</op:operator> <name pos:line="170" pos:column="66">style</name> <op:operator pos:line="170" pos:column="72">!=</op:operator> <name pos:line="170" pos:column="75">SCE_PLM_COMMENT</name></expr>)</condition><then pos:line="170" pos:column="91">
				<expr_stmt><expr><name pos:line="171" pos:column="33">levelCurrent</name><op:operator pos:line="171" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if></else></if>
		}</block></then></if>

		<if pos:line="174" pos:column="17">if <condition pos:line="174" pos:column="20">(<expr><name pos:line="174" pos:column="21">atEOL</name></expr>)</condition><then pos:line="174" pos:column="27"> <block pos:line="174" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="175" pos:column="25">int</name></type> <name pos:line="175" pos:column="29">lev</name> <init pos:line="175" pos:column="33">= <expr><name pos:line="175" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="176" pos:column="25">if <condition pos:line="176" pos:column="28">(<expr><name pos:line="176" pos:column="29">visibleChars</name> <op:operator pos:line="176" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="176" pos:column="45">0</lit:literal> <op:operator pos:line="176" pos:column="47">&amp;&amp;</op:operator> <name pos:line="176" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="176" pos:column="62">
				<expr_stmt><expr><name pos:line="177" pos:column="33">lev</name> <op:operator pos:line="177" pos:column="37">|=</op:operator> <name pos:line="177" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="178" pos:column="25">if <condition pos:line="178" pos:column="28">(<expr><op:operator pos:line="178" pos:column="29">(</op:operator><name pos:line="178" pos:column="30">levelCurrent</name> <op:operator pos:line="178" pos:column="43">&gt;</op:operator> <name pos:line="178" pos:column="45">levelPrev</name><op:operator pos:line="178" pos:column="54">)</op:operator> <op:operator pos:line="178" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="178" pos:column="59">(</op:operator><name pos:line="178" pos:column="60">visibleChars</name> <op:operator pos:line="178" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="178" pos:column="75">0</lit:literal><op:operator pos:line="178" pos:column="76">)</op:operator></expr>)</condition><then pos:line="178" pos:column="78">
				<expr_stmt><expr><name pos:line="179" pos:column="33">lev</name> <op:operator pos:line="179" pos:column="37">|=</op:operator> <name pos:line="179" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="180" pos:column="25">if <condition pos:line="180" pos:column="28">(<expr><name pos:line="180" pos:column="29">lev</name> <op:operator pos:line="180" pos:column="33">!=</op:operator> <call><name><name pos:line="180" pos:column="36">styler</name><op:operator pos:line="180" pos:column="42">.</op:operator><name pos:line="180" pos:column="43">LevelAt</name></name><argument_list pos:line="180" pos:column="50">(<argument><expr><name pos:line="180" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="180" pos:column="64"> <block pos:line="180" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="181" pos:column="33">styler</name><op:operator pos:line="181" pos:column="39">.</op:operator><name pos:line="181" pos:column="40">SetLevel</name></name><argument_list pos:line="181" pos:column="48">(<argument><expr><name pos:line="181" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="181" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="183" pos:column="25">lineCurrent</name><op:operator pos:line="183" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="184" pos:column="25">levelPrev</name> <op:operator pos:line="184" pos:column="35">=</op:operator> <name pos:line="184" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="185" pos:column="25">visibleChars</name> <op:operator pos:line="185" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="185" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="188" pos:column="17">if <condition pos:line="188" pos:column="20">(<expr><op:operator pos:line="188" pos:column="21">!</op:operator><call><name pos:line="188" pos:column="22">isspacechar</name><argument_list pos:line="188" pos:column="33">(<argument><expr><name pos:line="188" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="188" pos:column="38">
			<expr_stmt><expr><name pos:line="189" pos:column="25">visibleChars</name><op:operator pos:line="189" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="192" pos:column="9">int</name></type> <name pos:line="192" pos:column="13">flagsNext</name> <init pos:line="192" pos:column="23">= <expr><call><name><name pos:line="192" pos:column="25">styler</name><op:operator pos:line="192" pos:column="31">.</op:operator><name pos:line="192" pos:column="32">LevelAt</name></name><argument_list pos:line="192" pos:column="39">(<argument><expr><name pos:line="192" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="53">&amp;</op:operator> <op:operator pos:line="192" pos:column="55">~</op:operator><name pos:line="192" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="193" pos:column="9">styler</name><op:operator pos:line="193" pos:column="15">.</op:operator><name pos:line="193" pos:column="16">SetLevel</name></name><argument_list pos:line="193" pos:column="24">(<argument><expr><name pos:line="193" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="38">levelPrev</name> <op:operator pos:line="193" pos:column="48">|</op:operator> <name pos:line="193" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="196" pos:column="1">static</specifier> <specifier pos:line="196" pos:column="8">const</specifier> <name pos:line="196" pos:column="14">char</name> <type:modifier pos:line="196" pos:column="19">*</type:modifier><specifier pos:line="196" pos:column="20">const</specifier></type> <name><name pos:line="196" pos:column="26">plmWordListDesc</name><index pos:line="196" pos:column="41">[]</index></name> <init pos:line="196" pos:column="44">= <expr><block pos:line="196" pos:column="46">{
	<expr><lit:literal type="string" pos:line="197" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="198" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="201" pos:column="1">LexerModule</name></type> <name pos:line="201" pos:column="13">lmPLM</name><argument_list pos:line="201" pos:column="18">(<argument><expr><name pos:line="201" pos:column="19">SCLEX_PLM</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="30">ColourisePlmDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="201" pos:column="47">"PL/M"</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="55">FoldPlmDoc</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="67">plmWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
