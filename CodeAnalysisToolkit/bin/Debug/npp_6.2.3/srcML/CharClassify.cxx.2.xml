<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\CharClassify.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file CharClassify.cxx
 ** Character classifications used by Document and RESearch.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2006 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="11" pos:column="10">"CharClassify.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef</cpp:directive> <name pos:line="13" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="14" pos:column="1">using namespace <name pos:line="14" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="17" pos:column="1">// Shut up annoying Visual C++ warnings:</comment>
<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef</cpp:directive> <name pos:line="18" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">pragma</cpp:directive> warning(disable: 4514)</cpp:pragma>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="22" pos:column="1">CharClassify</name><op:operator pos:line="22" pos:column="13">::</op:operator><name pos:line="22" pos:column="15">CharClassify</name></name><parameter_list pos:line="22" pos:column="27">()</parameter_list> <block pos:line="22" pos:column="30">{
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">SetDefaultCharClasses</name><argument_list pos:line="23" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="23" pos:column="31">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="26" pos:column="1">void</name></type> <name><name pos:line="26" pos:column="6">CharClassify</name><op:operator pos:line="26" pos:column="18">::</op:operator><name pos:line="26" pos:column="20">SetDefaultCharClasses</name></name><parameter_list pos:line="26" pos:column="41">(<param><decl><type><name pos:line="26" pos:column="42">bool</name></type> <name pos:line="26" pos:column="47">includeWordClass</name></decl></param>)</parameter_list> <block pos:line="26" pos:column="65">{
	<comment type="line" pos:line="27" pos:column="9">// Initialize all char classes to default values</comment>
	<for pos:line="28" pos:column="9">for (<init><decl><type><name pos:line="28" pos:column="14">int</name></type> <name pos:line="28" pos:column="18">ch</name> <init pos:line="28" pos:column="21">= <expr><lit:literal type="number" pos:line="28" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="28" pos:column="26">ch</name> <op:operator pos:line="28" pos:column="29">&lt;</op:operator> <lit:literal type="number" pos:line="28" pos:column="31">256</lit:literal></expr>;</condition> <incr><expr><name pos:line="28" pos:column="36">ch</name><op:operator pos:line="28" pos:column="38">++</op:operator></expr></incr>) <block pos:line="28" pos:column="42">{
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">ch</name> <op:operator pos:line="29" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="29" pos:column="27">'\r'</lit:literal> <op:operator pos:line="29" pos:column="32">||</op:operator> <name pos:line="29" pos:column="35">ch</name> <op:operator pos:line="29" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="29" pos:column="41">'\n'</lit:literal></expr>)</condition><then pos:line="29" pos:column="46">
			<expr_stmt><expr><name><name pos:line="30" pos:column="25">charClass</name><index pos:line="30" pos:column="34">[<expr><name pos:line="30" pos:column="35">ch</name></expr>]</index></name> <op:operator pos:line="30" pos:column="39">=</op:operator> <name pos:line="30" pos:column="41">ccNewLine</name></expr>;</expr_stmt></then>
		<else pos:line="31" pos:column="17">else <if pos:line="31" pos:column="22">if <condition pos:line="31" pos:column="25">(<expr><name pos:line="31" pos:column="26">ch</name> <op:operator pos:line="31" pos:column="29">&lt;</op:operator> <lit:literal type="number" pos:line="31" pos:column="31">0x20</lit:literal> <op:operator pos:line="31" pos:column="36">||</op:operator> <name pos:line="31" pos:column="39">ch</name> <op:operator pos:line="31" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="31" pos:column="45">' '</lit:literal></expr>)</condition><then pos:line="31" pos:column="49">
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">charClass</name><index pos:line="32" pos:column="34">[<expr><name pos:line="32" pos:column="35">ch</name></expr>]</index></name> <op:operator pos:line="32" pos:column="39">=</op:operator> <name pos:line="32" pos:column="41">ccSpace</name></expr>;</expr_stmt></then>
		<else pos:line="33" pos:column="17">else <if pos:line="33" pos:column="22">if <condition pos:line="33" pos:column="25">(<expr><name pos:line="33" pos:column="26">includeWordClass</name> <op:operator pos:line="33" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="33" pos:column="46">(</op:operator><name pos:line="33" pos:column="47">ch</name> <op:operator pos:line="33" pos:column="50">&gt;=</op:operator> <lit:literal type="number" pos:line="33" pos:column="53">0x80</lit:literal> <op:operator pos:line="33" pos:column="58">||</op:operator> <call><name pos:line="33" pos:column="61">isalnum</name><argument_list pos:line="33" pos:column="68">(<argument><expr><name pos:line="33" pos:column="69">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="33" pos:column="73">||</op:operator> <name pos:line="33" pos:column="76">ch</name> <op:operator pos:line="33" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="33" pos:column="82">'_'</lit:literal><op:operator pos:line="33" pos:column="85">)</op:operator></expr>)</condition><then pos:line="33" pos:column="87">
			<expr_stmt><expr><name><name pos:line="34" pos:column="25">charClass</name><index pos:line="34" pos:column="34">[<expr><name pos:line="34" pos:column="35">ch</name></expr>]</index></name> <op:operator pos:line="34" pos:column="39">=</op:operator> <name pos:line="34" pos:column="41">ccWord</name></expr>;</expr_stmt></then>
		<else pos:line="35" pos:column="17">else
			<expr_stmt><expr><name><name pos:line="36" pos:column="25">charClass</name><index pos:line="36" pos:column="34">[<expr><name pos:line="36" pos:column="35">ch</name></expr>]</index></name> <op:operator pos:line="36" pos:column="39">=</op:operator> <name pos:line="36" pos:column="41">ccPunctuation</name></expr>;</expr_stmt></else></if></else></if></else></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="40" pos:column="1">void</name></type> <name><name pos:line="40" pos:column="6">CharClassify</name><op:operator pos:line="40" pos:column="18">::</op:operator><name pos:line="40" pos:column="20">SetCharClasses</name></name><parameter_list pos:line="40" pos:column="34">(<param><decl><type><specifier pos:line="40" pos:column="35">const</specifier> <name pos:line="40" pos:column="41">unsigned</name> <name pos:line="40" pos:column="50">char</name> <type:modifier pos:line="40" pos:column="55">*</type:modifier></type><name pos:line="40" pos:column="56">chars</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="63">cc</name></type> <name pos:line="40" pos:column="66">newCharClass</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="80">{
	<comment type="line" pos:line="41" pos:column="9">// Apply the newCharClass to the specifed chars</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">chars</name></expr>)</condition><then pos:line="42" pos:column="19"> <block pos:line="42" pos:column="20">{
		<while pos:line="43" pos:column="17">while <condition pos:line="43" pos:column="23">(<expr><op:operator pos:line="43" pos:column="24">*</op:operator><name pos:line="43" pos:column="25">chars</name></expr>)</condition> <block pos:line="43" pos:column="32">{
			<expr_stmt><expr><name><name pos:line="44" pos:column="25">charClass</name><index pos:line="44" pos:column="34">[<expr><op:operator pos:line="44" pos:column="35">*</op:operator><name pos:line="44" pos:column="36">chars</name></expr>]</index></name> <op:operator pos:line="44" pos:column="43">=</op:operator> <call><name><name pos:line="44" pos:column="45">static_cast</name><argument_list pos:line="44" pos:column="56">&lt;<argument><expr><name pos:line="44" pos:column="57">unsigned</name> <name pos:line="44" pos:column="66">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="71">(<argument><expr><name pos:line="44" pos:column="72">newCharClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="45" pos:column="25">chars</name><op:operator pos:line="45" pos:column="30">++</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
}</block></function>
</unit>
