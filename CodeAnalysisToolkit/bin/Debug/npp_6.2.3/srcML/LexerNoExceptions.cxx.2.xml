<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\LexerNoExceptions.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexerNoExceptions.cxx
 ** A simple lexer with no state which does not throw exceptions so can be used in an external lexer.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerBase.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerNoExceptions.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="31" pos:column="1">int</name> <name pos:line="31" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="31" pos:column="16">LexerNoExceptions</name><op:operator pos:line="31" pos:column="33">::</op:operator><name pos:line="31" pos:column="35">PropertySet</name></name><parameter_list pos:line="31" pos:column="46">(<param><decl><type><specifier pos:line="31" pos:column="47">const</specifier> <name pos:line="31" pos:column="53">char</name> <type:modifier pos:line="31" pos:column="58">*</type:modifier></type><name pos:line="31" pos:column="59">key</name></decl></param>, <param><decl><type><specifier pos:line="31" pos:column="64">const</specifier> <name pos:line="31" pos:column="70">char</name> <type:modifier pos:line="31" pos:column="75">*</type:modifier></type><name pos:line="31" pos:column="76">val</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="81">{
	<try pos:line="32" pos:column="9">try <block pos:line="32" pos:column="13">{
		<return pos:line="33" pos:column="17">return <expr><call><name><name pos:line="33" pos:column="24">LexerBase</name><op:operator pos:line="33" pos:column="33">::</op:operator><name pos:line="33" pos:column="35">PropertySet</name></name><argument_list pos:line="33" pos:column="46">(<argument><expr><name pos:line="33" pos:column="47">key</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">val</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block> <catch pos:line="34" pos:column="11">catch <parameter_list pos:line="34" pos:column="17">(<param><decl><type><type:modifier pos:line="34" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="34" pos:column="23">{
		<comment type="line" pos:line="35" pos:column="17">// Should not throw into caller as may be compiled with different compiler or options</comment>
	}</block></catch></try>
	<return pos:line="37" pos:column="9">return <expr><op:operator pos:line="37" pos:column="16">-</op:operator><lit:literal type="number" pos:line="37" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="40" pos:column="1">int</name> <name pos:line="40" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="40" pos:column="16">LexerNoExceptions</name><op:operator pos:line="40" pos:column="33">::</op:operator><name pos:line="40" pos:column="35">WordListSet</name></name><parameter_list pos:line="40" pos:column="46">(<param><decl><type><name pos:line="40" pos:column="47">int</name></type> <name pos:line="40" pos:column="51">n</name></decl></param>, <param><decl><type><specifier pos:line="40" pos:column="54">const</specifier> <name pos:line="40" pos:column="60">char</name> <type:modifier pos:line="40" pos:column="65">*</type:modifier></type><name pos:line="40" pos:column="66">wl</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="70">{
	<try pos:line="41" pos:column="9">try <block pos:line="41" pos:column="13">{
		<return pos:line="42" pos:column="17">return <expr><call><name><name pos:line="42" pos:column="24">LexerBase</name><op:operator pos:line="42" pos:column="33">::</op:operator><name pos:line="42" pos:column="35">WordListSet</name></name><argument_list pos:line="42" pos:column="46">(<argument><expr><name pos:line="42" pos:column="47">n</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="50">wl</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block> <catch pos:line="43" pos:column="11">catch <parameter_list pos:line="43" pos:column="17">(<param><decl><type><type:modifier pos:line="43" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="43" pos:column="23">{
		<comment type="line" pos:line="44" pos:column="17">// Should not throw into caller as may be compiled with different compiler or options</comment>
	}</block></catch></try>
	<return pos:line="46" pos:column="9">return <expr><op:operator pos:line="46" pos:column="16">-</op:operator><lit:literal type="number" pos:line="46" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="49" pos:column="1">void</name> <name pos:line="49" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="49" pos:column="17">LexerNoExceptions</name><op:operator pos:line="49" pos:column="34">::</op:operator><name pos:line="49" pos:column="36">Lex</name></name><parameter_list pos:line="49" pos:column="39">(<param><decl><type><name pos:line="49" pos:column="40">unsigned</name> <name pos:line="49" pos:column="49">int</name></type> <name pos:line="49" pos:column="53">startPos</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="63">int</name></type> <name pos:line="49" pos:column="67">length</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="75">int</name></type> <name pos:line="49" pos:column="79">initStyle</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="90">IDocument</name> <type:modifier pos:line="49" pos:column="100">*</type:modifier></type><name pos:line="49" pos:column="101">pAccess</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="110">{
	<try pos:line="50" pos:column="9">try <block pos:line="50" pos:column="13">{
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">Accessor</name></type> <name pos:line="51" pos:column="26">astyler</name><argument_list pos:line="51" pos:column="33">(<argument><expr><name pos:line="51" pos:column="34">pAccess</name></expr></argument>, <argument><expr><op:operator pos:line="51" pos:column="43">&amp;</op:operator><name pos:line="51" pos:column="44">props</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">Lexer</name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">startPos</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="33">length</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="41">initStyle</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="52">pAccess</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="61">astyler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="53" pos:column="17">astyler</name><op:operator pos:line="53" pos:column="24">.</op:operator><name pos:line="53" pos:column="25">Flush</name></name><argument_list pos:line="53" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block> <catch pos:line="54" pos:column="11">catch <parameter_list pos:line="54" pos:column="17">(<param><decl><type><type:modifier pos:line="54" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="54" pos:column="23">{
		<comment type="line" pos:line="55" pos:column="17">// Should not throw into caller as may be compiled with different compiler or options</comment>
		<expr_stmt><expr><call><name><name pos:line="56" pos:column="17">pAccess</name><op:operator pos:line="56" pos:column="24">-&gt;</op:operator><name pos:line="56" pos:column="26">SetErrorStatus</name></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name pos:line="56" pos:column="41">SC_STATUS_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch></try>
}</block></function>
<function><type><name pos:line="59" pos:column="1">void</name> <name pos:line="59" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="59" pos:column="17">LexerNoExceptions</name><op:operator pos:line="59" pos:column="34">::</op:operator><name pos:line="59" pos:column="36">Fold</name></name><parameter_list pos:line="59" pos:column="40">(<param><decl><type><name pos:line="59" pos:column="41">unsigned</name> <name pos:line="59" pos:column="50">int</name></type> <name pos:line="59" pos:column="54">startPos</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="64">int</name></type> <name pos:line="59" pos:column="68">length</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="76">int</name></type> <name pos:line="59" pos:column="80">initStyle</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="91">IDocument</name> <type:modifier pos:line="59" pos:column="101">*</type:modifier></type><name pos:line="59" pos:column="102">pAccess</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="111">{
	<try pos:line="60" pos:column="9">try <block pos:line="60" pos:column="13">{
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">Accessor</name></type> <name pos:line="61" pos:column="26">astyler</name><argument_list pos:line="61" pos:column="33">(<argument><expr><name pos:line="61" pos:column="34">pAccess</name></expr></argument>, <argument><expr><op:operator pos:line="61" pos:column="43">&amp;</op:operator><name pos:line="61" pos:column="44">props</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">Folder</name><argument_list pos:line="62" pos:column="23">(<argument><expr><name pos:line="62" pos:column="24">startPos</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="34">length</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="42">initStyle</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="53">pAccess</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="62">astyler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="63" pos:column="17">astyler</name><op:operator pos:line="63" pos:column="24">.</op:operator><name pos:line="63" pos:column="25">Flush</name></name><argument_list pos:line="63" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block> <catch pos:line="64" pos:column="11">catch <parameter_list pos:line="64" pos:column="17">(<param><decl><type><type:modifier pos:line="64" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="64" pos:column="23">{
		<comment type="line" pos:line="65" pos:column="17">// Should not throw into caller as may be compiled with different compiler or options</comment>
		<expr_stmt><expr><call><name><name pos:line="66" pos:column="17">pAccess</name><op:operator pos:line="66" pos:column="24">-&gt;</op:operator><name pos:line="66" pos:column="26">SetErrorStatus</name></name><argument_list pos:line="66" pos:column="40">(<argument><expr><name pos:line="66" pos:column="41">SC_STATUS_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch></try>
}</block></function>
</unit>
