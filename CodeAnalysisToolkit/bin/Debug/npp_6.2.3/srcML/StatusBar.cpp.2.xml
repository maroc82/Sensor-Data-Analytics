<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\StatusBar\StatusBar.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"StatusBar.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="32" pos:column="1">//#define IDC_STATUSBAR 789</comment>

<decl_stmt><decl><type><specifier pos:line="34" pos:column="1">const</specifier> <name pos:line="34" pos:column="7">int</name></type> <name pos:line="34" pos:column="11">defaultPartWidth</name> <init pos:line="34" pos:column="28">= <expr><lit:literal type="number" pos:line="34" pos:column="30">5</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="36" pos:column="1">void</name></type> <name><name pos:line="36" pos:column="6">StatusBar</name><op:operator pos:line="36" pos:column="15">::</op:operator><name pos:line="36" pos:column="17">init</name></name><parameter_list pos:line="36" pos:column="21">(<param><decl><type><name pos:line="36" pos:column="22">HINSTANCE</name></type> <name pos:line="36" pos:column="32">hInst</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="39">HWND</name></type> <name pos:line="36" pos:column="44">hPere</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="51">int</name></type> <name pos:line="36" pos:column="55">nbParts</name></decl></param>)</parameter_list>
<block pos:line="37" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="38" pos:column="9">Window</name><op:operator pos:line="38" pos:column="15">::</op:operator><name pos:line="38" pos:column="17">init</name></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">hInst</name></expr></argument>, <argument><expr><name pos:line="38" pos:column="29">hPere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">InitCommonControls</name><argument_list pos:line="39" pos:column="23">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="41" pos:column="9">_hSelf</name> <op:operator pos:line="41" pos:column="16">=</op:operator> <comment type="line" pos:line="41" pos:column="18">//CreateStatusWindow(WS_CHILD | WS_CLIPSIBLINGS, NULL, _hParent, IDC_STATUSBAR);</comment>
	<call><name><op:operator pos:line="42" pos:column="9">::</op:operator><name pos:line="42" pos:column="11">CreateWindowEx</name></name><argument_list pos:line="42" pos:column="25">(
	               <argument><expr><lit:literal type="number" pos:line="43" pos:column="24">0</lit:literal></expr></argument>,
	               <argument><expr><name pos:line="44" pos:column="24">STATUSCLASSNAME</name></expr></argument>,
	               <argument><expr><call><name pos:line="45" pos:column="24">TEXT</name><argument_list pos:line="45" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
	               <argument><expr><name pos:line="46" pos:column="24">WS_CHILD</name> <op:operator pos:line="46" pos:column="33">|</op:operator> <name pos:line="46" pos:column="35">SBARS_SIZEGRIP</name></expr></argument> ,
	               <argument><expr><lit:literal type="number" pos:line="47" pos:column="24">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="27">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="33">0</lit:literal></expr></argument>,
	               <argument><expr><name pos:line="48" pos:column="24">_hParent</name></expr></argument>,
				   <argument><expr><name pos:line="49" pos:column="36">NULL</name></expr></argument>,
	               <argument><expr><name pos:line="50" pos:column="24">_hInst</name></expr></argument>,
	               <argument><expr><lit:literal type="number" pos:line="51" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><op:operator pos:line="53" pos:column="13">!</op:operator><name pos:line="53" pos:column="14">_hSelf</name></expr>)</condition><then pos:line="53" pos:column="21">
	<block pos:line="54" pos:column="9">{
		<throw pos:line="55" pos:column="17">throw <expr><call><name><name pos:line="55" pos:column="23">std</name><op:operator pos:line="55" pos:column="26">::</op:operator><name pos:line="55" pos:column="28">runtime_error</name></name><argument_list pos:line="55" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="42">"StatusBar::init : CreateWindowEx() function return null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>

    <expr_stmt><expr><name pos:line="58" pos:column="5">_nbParts</name> <op:operator pos:line="58" pos:column="14">=</op:operator> <name pos:line="58" pos:column="16">nbParts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">_partWidthArray</name> <op:operator pos:line="59" pos:column="21">=</op:operator> <op:operator pos:line="59" pos:column="23">new</op:operator> <name><name pos:line="59" pos:column="27">int</name><index pos:line="59" pos:column="30">[<expr><name pos:line="59" pos:column="31">_nbParts</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="line" pos:line="61" pos:column="9">// Set the default width</comment>
	<for pos:line="62" pos:column="9">for (<init><decl><type><name pos:line="62" pos:column="14">int</name></type> <name pos:line="62" pos:column="18">i</name> <init pos:line="62" pos:column="20">= <expr><lit:literal type="number" pos:line="62" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="62" pos:column="26">i</name> <op:operator pos:line="62" pos:column="28">&lt;</op:operator> <name pos:line="62" pos:column="30">_nbParts</name></expr> ;</condition> <incr><expr><name pos:line="62" pos:column="41">i</name><op:operator pos:line="62" pos:column="42">++</op:operator></expr></incr>)
		<expr_stmt><expr><name><name pos:line="63" pos:column="17">_partWidthArray</name><index pos:line="63" pos:column="32">[<expr><name pos:line="63" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="63" pos:column="36">=</op:operator> <name pos:line="63" pos:column="38">defaultPartWidth</name></expr>;</expr_stmt></for>

    <comment type="line" pos:line="65" pos:column="5">// Allocate an array for holding the right edge coordinates.</comment>
    <expr_stmt><expr><name pos:line="66" pos:column="5">_hloc</name> <op:operator pos:line="66" pos:column="11">=</op:operator> <call><name><op:operator pos:line="66" pos:column="13">::</op:operator><name pos:line="66" pos:column="15">LocalAlloc</name></name><argument_list pos:line="66" pos:column="25">(<argument><expr><name pos:line="66" pos:column="26">LHND</name></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="32">sizeof<argument_list pos:line="66" pos:column="38">(<argument><expr><name pos:line="66" pos:column="39">int</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="66" pos:column="44">*</op:operator> <name pos:line="66" pos:column="46">_nbParts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="67" pos:column="5">_lpParts</name> <op:operator pos:line="67" pos:column="14">=</op:operator> <op:operator pos:line="67" pos:column="16">(</op:operator><name pos:line="67" pos:column="17">LPINT</name><op:operator pos:line="67" pos:column="22">)</op:operator><call><name><op:operator pos:line="67" pos:column="23">::</op:operator><name pos:line="67" pos:column="25">LocalLock</name></name><argument_list pos:line="67" pos:column="34">(<argument><expr><name pos:line="67" pos:column="35">_hloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="69" pos:column="9">RECT</name></type> <name pos:line="69" pos:column="14">rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="70" pos:column="9">::</op:operator><name pos:line="70" pos:column="11">GetClientRect</name></name><argument_list pos:line="70" pos:column="24">(<argument><expr><name pos:line="70" pos:column="25">_hParent</name></expr></argument>, <argument><expr><op:operator pos:line="70" pos:column="35">&amp;</op:operator><name pos:line="70" pos:column="36">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">adjustParts</name><argument_list pos:line="71" pos:column="20">(<argument><expr><name><name pos:line="71" pos:column="21">rc</name><op:operator pos:line="71" pos:column="23">.</op:operator><name pos:line="71" pos:column="24">right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="74" pos:column="1">void</name></type> <name><name pos:line="74" pos:column="6">StatusBar</name><op:operator pos:line="74" pos:column="15">::</op:operator><name pos:line="74" pos:column="17">adjustParts</name></name><parameter_list pos:line="74" pos:column="28">(<param><decl><type><name pos:line="74" pos:column="29">int</name></type> <name pos:line="74" pos:column="33">clientWidth</name></decl></param>)</parameter_list>
<block pos:line="75" pos:column="1">{
    <comment type="line" pos:line="76" pos:column="5">// Calculate the right edge coordinate for each part, and</comment>
    <comment type="line" pos:line="77" pos:column="5">// copy the coordinates to the array.</comment>
    <decl_stmt><decl><type><name pos:line="78" pos:column="5">int</name></type> <name pos:line="78" pos:column="9">nWidth</name> <init pos:line="78" pos:column="16">= <expr><name pos:line="78" pos:column="18">clientWidth</name> <op:operator pos:line="78" pos:column="30">-</op:operator> <lit:literal type="number" pos:line="78" pos:column="32">20</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="79" pos:column="5">for (<init><decl><type><name pos:line="79" pos:column="10">int</name></type> <name pos:line="79" pos:column="14">i</name> <init pos:line="79" pos:column="16">= <expr><name pos:line="79" pos:column="18">_nbParts</name> <op:operator pos:line="79" pos:column="27">-</op:operator> <lit:literal type="number" pos:line="79" pos:column="29">1</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="79" pos:column="33">i</name> <op:operator pos:line="79" pos:column="35">&gt;=</op:operator> <lit:literal type="number" pos:line="79" pos:column="38">0</lit:literal></expr> ;</condition> <incr><expr><name pos:line="79" pos:column="42">i</name><op:operator pos:line="79" pos:column="43">--</op:operator></expr></incr>) 
    <block pos:line="80" pos:column="5">{ 
       <expr_stmt><expr><name><name pos:line="81" pos:column="8">_lpParts</name><index pos:line="81" pos:column="16">[<expr><name pos:line="81" pos:column="17">i</name></expr>]</index></name> <op:operator pos:line="81" pos:column="20">=</op:operator> <name pos:line="81" pos:column="22">nWidth</name></expr>;</expr_stmt>
       <expr_stmt><expr><name pos:line="82" pos:column="8">nWidth</name> <op:operator pos:line="82" pos:column="15">-=</op:operator> <name><name pos:line="82" pos:column="18">_partWidthArray</name><index pos:line="82" pos:column="33">[<expr><name pos:line="82" pos:column="34">i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <comment type="line" pos:line="85" pos:column="5">// Tell the status bar to create the window parts.</comment>
    <expr_stmt><expr><call><name><op:operator pos:line="86" pos:column="5">::</op:operator><name pos:line="86" pos:column="7">SendMessage</name></name><argument_list pos:line="86" pos:column="18">(<argument><expr><name pos:line="86" pos:column="19">_hSelf</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="27">SB_SETPARTS</name></expr></argument>, <argument><expr><op:operator pos:line="86" pos:column="40">(</op:operator><name pos:line="86" pos:column="41">WPARAM</name><op:operator pos:line="86" pos:column="47">)</op:operator><name pos:line="86" pos:column="48">_nbParts</name></expr></argument>, <argument><expr><op:operator pos:line="86" pos:column="58">(</op:operator><name pos:line="86" pos:column="59">LPARAM</name><op:operator pos:line="86" pos:column="65">)</op:operator><name pos:line="86" pos:column="66">_lpParts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
