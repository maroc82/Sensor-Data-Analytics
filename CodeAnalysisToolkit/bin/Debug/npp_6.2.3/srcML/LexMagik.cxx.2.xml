<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexMagik.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/**
 * @file LexMagik.cxx
 * Lexer for GE(r) Smallworld(tm) MagikSF
 */</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2005 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:line="31" pos:column="1">/**
 * Is it a core character (C isalpha(), exclamation and question mark)
 *
 * \param  ch The character
 * \return True if ch is a character, False otherwise
 */</comment>
<function><type><specifier pos:line="37" pos:column="1">static</specifier> <specifier pos:line="37" pos:column="8">inline</specifier> <name pos:line="37" pos:column="15">bool</name></type> <name pos:line="37" pos:column="20">IsAlphaCore</name><parameter_list pos:line="37" pos:column="31">(<param><decl><type><name pos:line="37" pos:column="32">int</name></type> <name pos:line="37" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="40">{
    <return pos:line="38" pos:column="5">return <expr><op:operator pos:line="38" pos:column="12">(</op:operator><call><name pos:line="38" pos:column="13">isalpha</name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="38" pos:column="25">||</op:operator> <name pos:line="38" pos:column="28">ch</name> <op:operator pos:line="38" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="34">'!'</lit:literal> <op:operator pos:line="38" pos:column="38">||</op:operator> <name pos:line="38" pos:column="41">ch</name> <op:operator pos:line="38" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="47">'?'</lit:literal><op:operator pos:line="38" pos:column="50">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="41" pos:column="1">/**
 * Is it a character (IsAlphaCore() and underscore)
 *
 * \param  ch The character
 * \return True if ch is a character, False otherwise
 */</comment>
<function><type><specifier pos:line="47" pos:column="1">static</specifier> <specifier pos:line="47" pos:column="8">inline</specifier> <name pos:line="47" pos:column="15">bool</name></type> <name pos:line="47" pos:column="20">IsAlpha</name><parameter_list pos:line="47" pos:column="27">(<param><decl><type><name pos:line="47" pos:column="28">int</name></type> <name pos:line="47" pos:column="32">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="36">{
    <return pos:line="48" pos:column="5">return <expr><op:operator pos:line="48" pos:column="12">(</op:operator><call><name pos:line="48" pos:column="13">IsAlphaCore</name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="29">||</op:operator> <name pos:line="48" pos:column="32">ch</name> <op:operator pos:line="48" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="38">'_'</lit:literal><op:operator pos:line="48" pos:column="41">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="51" pos:column="1">/**
 * Is it a symbolic character (IsAlpha() and colon)
 *
 * \param  ch The character
 * \return True if ch is a character, False otherwise
 */</comment>
<function><type><specifier pos:line="57" pos:column="1">static</specifier> <specifier pos:line="57" pos:column="8">inline</specifier> <name pos:line="57" pos:column="15">bool</name></type> <name pos:line="57" pos:column="20">IsAlphaSym</name><parameter_list pos:line="57" pos:column="30">(<param><decl><type><name pos:line="57" pos:column="31">int</name></type> <name pos:line="57" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="57" pos:column="39">{
    <return pos:line="58" pos:column="5">return <expr><op:operator pos:line="58" pos:column="12">(</op:operator><call><name pos:line="58" pos:column="13">IsAlpha</name><argument_list pos:line="58" pos:column="20">(<argument><expr><name pos:line="58" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="58" pos:column="25">||</op:operator> <name pos:line="58" pos:column="28">ch</name> <op:operator pos:line="58" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="34">':'</lit:literal><op:operator pos:line="58" pos:column="37">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="61" pos:column="1">/**
 * Is it a numerical character (IsAlpha() and 0 - 9)
 *
 * \param  ch The character
 * \return True if ch is a character, False otherwise
 */</comment>
<function><type><specifier pos:line="67" pos:column="1">static</specifier> <specifier pos:line="67" pos:column="8">inline</specifier> <name pos:line="67" pos:column="15">bool</name></type> <name pos:line="67" pos:column="20">IsAlNum</name><parameter_list pos:line="67" pos:column="27">(<param><decl><type><name pos:line="67" pos:column="28">int</name></type> <name pos:line="67" pos:column="32">ch</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="36">{
    <return pos:line="68" pos:column="5">return <expr><op:operator pos:line="68" pos:column="12">(</op:operator><op:operator pos:line="68" pos:column="13">(</op:operator><name pos:line="68" pos:column="14">ch</name> <op:operator pos:line="68" pos:column="17">&gt;=</op:operator> <lit:literal type="char" pos:line="68" pos:column="20">'0'</lit:literal> <op:operator pos:line="68" pos:column="24">&amp;&amp;</op:operator> <name pos:line="68" pos:column="27">ch</name> <op:operator pos:line="68" pos:column="30">&lt;=</op:operator> <lit:literal type="char" pos:line="68" pos:column="33">'9'</lit:literal><op:operator pos:line="68" pos:column="36">)</op:operator> <op:operator pos:line="68" pos:column="38">||</op:operator> <call><name pos:line="68" pos:column="41">IsAlpha</name><argument_list pos:line="68" pos:column="48">(<argument><expr><name pos:line="68" pos:column="49">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="68" pos:column="52">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="71" pos:column="1">/**
 * Is it a symbolic numerical character (IsAlNum() and colon)
 *
 * \param  ch The character
 * \return True if ch is a character, False otherwise
 */</comment>
<function><type><specifier pos:line="77" pos:column="1">static</specifier> <specifier pos:line="77" pos:column="8">inline</specifier> <name pos:line="77" pos:column="15">bool</name></type> <name pos:line="77" pos:column="20">IsAlNumSym</name><parameter_list pos:line="77" pos:column="30">(<param><decl><type><name pos:line="77" pos:column="31">int</name></type> <name pos:line="77" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="39">{
    <return pos:line="78" pos:column="5">return <expr><op:operator pos:line="78" pos:column="12">(</op:operator><call><name pos:line="78" pos:column="13">IsAlNum</name><argument_list pos:line="78" pos:column="20">(<argument><expr><name pos:line="78" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="78" pos:column="25">||</op:operator> <name pos:line="78" pos:column="28">ch</name> <op:operator pos:line="78" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="34">':'</lit:literal><op:operator pos:line="78" pos:column="37">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="81" pos:column="1">/**
 * The lexer function
 *
 * \param  startPos Where to start scanning
 * \param  length Where to scan to
 * \param  initStyle The style at the initial point, not used in this folder
 * \param  keywordslists The keywordslists, currently, number 5 is used
 * \param  styler The styler
 */</comment>
<function><type><specifier pos:line="90" pos:column="1">static</specifier> <name pos:line="90" pos:column="8">void</name></type> <name pos:line="90" pos:column="13">ColouriseMagikDoc</name><parameter_list pos:line="90" pos:column="30">(<param><decl><type><name pos:line="90" pos:column="31">unsigned</name> <name pos:line="90" pos:column="40">int</name></type> <name pos:line="90" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="54">int</name></type> <name pos:line="90" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="66">int</name></type> <name pos:line="90" pos:column="70">initStyle</name></decl></param>,
                           <param><decl><type><name pos:line="91" pos:column="28">WordList</name> <type:modifier pos:line="91" pos:column="37">*</type:modifier></type><name><name pos:line="91" pos:column="38">keywordlists</name><index pos:line="91" pos:column="50">[]</index></name></decl></param>, <param><decl><type><name pos:line="91" pos:column="54">Accessor</name> <type:modifier pos:line="91" pos:column="63">&amp;</type:modifier></type><name pos:line="91" pos:column="64">styler</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="72">{
    <expr_stmt><expr><call><name><name pos:line="92" pos:column="5">styler</name><op:operator pos:line="92" pos:column="11">.</op:operator><name pos:line="92" pos:column="12">StartAt</name></name><argument_list pos:line="92" pos:column="19">(<argument><expr><name pos:line="92" pos:column="20">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="94" pos:column="5">WordList</name> <type:modifier pos:line="94" pos:column="14">&amp;</type:modifier></type><name pos:line="94" pos:column="15">keywords</name> <init pos:line="94" pos:column="24">= <expr><op:operator pos:line="94" pos:column="26">*</op:operator><name><name pos:line="94" pos:column="27">keywordlists</name><index pos:line="94" pos:column="39">[<expr><lit:literal type="number" pos:line="94" pos:column="40">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="95" pos:column="5">WordList</name> <type:modifier pos:line="95" pos:column="14">&amp;</type:modifier></type><name pos:line="95" pos:column="15">pragmatics</name> <init pos:line="95" pos:column="26">= <expr><op:operator pos:line="95" pos:column="28">*</op:operator><name><name pos:line="95" pos:column="29">keywordlists</name><index pos:line="95" pos:column="41">[<expr><lit:literal type="number" pos:line="95" pos:column="42">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="96" pos:column="5">WordList</name> <type:modifier pos:line="96" pos:column="14">&amp;</type:modifier></type><name pos:line="96" pos:column="15">containers</name> <init pos:line="96" pos:column="26">= <expr><op:operator pos:line="96" pos:column="28">*</op:operator><name><name pos:line="96" pos:column="29">keywordlists</name><index pos:line="96" pos:column="41">[<expr><lit:literal type="number" pos:line="96" pos:column="42">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="97" pos:column="5">WordList</name> <type:modifier pos:line="97" pos:column="14">&amp;</type:modifier></type><name pos:line="97" pos:column="15">flow</name> <init pos:line="97" pos:column="20">= <expr><op:operator pos:line="97" pos:column="22">*</op:operator><name><name pos:line="97" pos:column="23">keywordlists</name><index pos:line="97" pos:column="35">[<expr><lit:literal type="number" pos:line="97" pos:column="36">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="98" pos:column="5">WordList</name> <type:modifier pos:line="98" pos:column="14">&amp;</type:modifier></type><name pos:line="98" pos:column="15">characters</name> <init pos:line="98" pos:column="26">= <expr><op:operator pos:line="98" pos:column="28">*</op:operator><name><name pos:line="98" pos:column="29">keywordlists</name><index pos:line="98" pos:column="41">[<expr><lit:literal type="number" pos:line="98" pos:column="42">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="100" pos:column="9">StyleContext</name></type> <name pos:line="100" pos:column="22">sc</name><parameter_list pos:line="100" pos:column="24">(<param><decl><type><name pos:line="100" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="100" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="100" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="100" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>


	<for pos:line="103" pos:column="9">for (<init pos:line="103" pos:column="14">;</init> <condition><expr><call><name><name pos:line="103" pos:column="16">sc</name><op:operator pos:line="103" pos:column="18">.</op:operator><name pos:line="103" pos:column="19">More</name></name><argument_list pos:line="103" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="103" pos:column="27">sc</name><op:operator pos:line="103" pos:column="29">.</op:operator><name pos:line="103" pos:column="30">Forward</name></name><argument_list pos:line="103" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="103" pos:column="41">{

    <label><name pos:line="105" pos:column="5">repeat</name>:</label>

        <if pos:line="107" pos:column="9">if<condition pos:line="107" pos:column="11">(<expr><name><name pos:line="107" pos:column="12">sc</name><op:operator pos:line="107" pos:column="14">.</op:operator><name pos:line="107" pos:column="15">ch</name></name> <op:operator pos:line="107" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="21">'#'</lit:literal></expr>)</condition><then pos:line="107" pos:column="25"> <block pos:line="107" pos:column="26">{
            <if pos:line="108" pos:column="13">if <condition pos:line="108" pos:column="16">(<expr><name><name pos:line="108" pos:column="17">sc</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">chNext</name></name> <op:operator pos:line="108" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="30">'#'</lit:literal></expr>)</condition><then pos:line="108" pos:column="34"> <expr_stmt><expr><call><name><name pos:line="108" pos:column="35">sc</name><op:operator pos:line="108" pos:column="37">.</op:operator><name pos:line="108" pos:column="38">SetState</name></name><argument_list pos:line="108" pos:column="46">(<argument><expr><name pos:line="108" pos:column="47">SCE_MAGIK_HYPER_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="109" pos:column="13">else <expr_stmt><expr><call><name><name pos:line="109" pos:column="18">sc</name><op:operator pos:line="109" pos:column="20">.</op:operator><name pos:line="109" pos:column="21">SetState</name></name><argument_list pos:line="109" pos:column="29">(<argument><expr><name pos:line="109" pos:column="30">SCE_MAGIK_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            <for pos:line="110" pos:column="13">for(<init pos:line="110" pos:column="17">;</init> <condition><expr><call><name><name pos:line="110" pos:column="19">sc</name><op:operator pos:line="110" pos:column="21">.</op:operator><name pos:line="110" pos:column="22">More</name></name><argument_list pos:line="110" pos:column="26">()</argument_list></call> <op:operator pos:line="110" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="110" pos:column="32">!</op:operator><op:operator pos:line="110" pos:column="33">(</op:operator><name><name pos:line="110" pos:column="34">sc</name><op:operator pos:line="110" pos:column="36">.</op:operator><name pos:line="110" pos:column="37">atLineEnd</name></name><op:operator pos:line="110" pos:column="46">)</op:operator></expr>;</condition> <incr><expr><call><name><name pos:line="110" pos:column="49">sc</name><op:operator pos:line="110" pos:column="51">.</op:operator><name pos:line="110" pos:column="52">Forward</name></name><argument_list pos:line="110" pos:column="59">()</argument_list></call></expr></incr>)<empty_stmt pos:line="110" pos:column="62">;</empty_stmt></for>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">sc</name><op:operator pos:line="111" pos:column="15">.</op:operator><name pos:line="111" pos:column="16">SetState</name></name><argument_list pos:line="111" pos:column="24">(<argument><expr><name pos:line="111" pos:column="25">SCE_MAGIK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:line="112" pos:column="13">goto <name pos:line="112" pos:column="18">repeat</name>;</goto>
        }</block></then></if>

        <if pos:line="115" pos:column="9">if<condition pos:line="115" pos:column="11">(<expr><name><name pos:line="115" pos:column="12">sc</name><op:operator pos:line="115" pos:column="14">.</op:operator><name pos:line="115" pos:column="15">ch</name></name> <op:operator pos:line="115" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="21">'"'</lit:literal></expr>)</condition><then pos:line="115" pos:column="25"> <block pos:line="115" pos:column="26">{
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">sc</name><op:operator pos:line="116" pos:column="15">.</op:operator><name pos:line="116" pos:column="16">SetState</name></name><argument_list pos:line="116" pos:column="24">(<argument><expr><name pos:line="116" pos:column="25">SCE_MAGIK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="118" pos:column="13">if<condition pos:line="118" pos:column="15">(<expr><call><name><name pos:line="118" pos:column="16">sc</name><op:operator pos:line="118" pos:column="18">.</op:operator><name pos:line="118" pos:column="19">More</name></name><argument_list pos:line="118" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="118" pos:column="26">
            <block pos:line="119" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="120" pos:column="17">sc</name><op:operator pos:line="120" pos:column="19">.</op:operator><name pos:line="120" pos:column="20">Forward</name></name><argument_list pos:line="120" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
                <for pos:line="121" pos:column="17">for(<init pos:line="121" pos:column="21">;</init> <condition><expr><call><name><name pos:line="121" pos:column="23">sc</name><op:operator pos:line="121" pos:column="25">.</op:operator><name pos:line="121" pos:column="26">More</name></name><argument_list pos:line="121" pos:column="30">()</argument_list></call> <op:operator pos:line="121" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="121" pos:column="36">sc</name><op:operator pos:line="121" pos:column="38">.</op:operator><name pos:line="121" pos:column="39">ch</name></name> <op:operator pos:line="121" pos:column="42">!=</op:operator> <lit:literal type="char" pos:line="121" pos:column="45">'"'</lit:literal></expr>;</condition> <incr><expr><call><name><name pos:line="121" pos:column="50">sc</name><op:operator pos:line="121" pos:column="52">.</op:operator><name pos:line="121" pos:column="53">Forward</name></name><argument_list pos:line="121" pos:column="60">()</argument_list></call></expr></incr>)<empty_stmt pos:line="121" pos:column="63">;</empty_stmt></for>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">sc</name><op:operator pos:line="124" pos:column="15">.</op:operator><name pos:line="124" pos:column="16">ForwardSetState</name></name><argument_list pos:line="124" pos:column="31">(<argument><expr><name pos:line="124" pos:column="32">SCE_MAGIK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:line="125" pos:column="13">goto <name pos:line="125" pos:column="18">repeat</name>;</goto>
        }</block></then></if>

	    <comment type="line" pos:line="128" pos:column="13">// The default state</comment>
	    <if pos:line="129" pos:column="13">if<condition pos:line="129" pos:column="15">(<expr><name><name pos:line="129" pos:column="16">sc</name><op:operator pos:line="129" pos:column="18">.</op:operator><name pos:line="129" pos:column="19">state</name></name> <op:operator pos:line="129" pos:column="25">==</op:operator> <name pos:line="129" pos:column="28">SCE_MAGIK_DEFAULT</name></expr>)</condition><then pos:line="129" pos:column="46"> <block pos:line="129" pos:column="47">{

	        <comment type="line" pos:line="131" pos:column="17">// A certain keyword has been detected</comment>
	        <if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><name><name pos:line="132" pos:column="21">sc</name><op:operator pos:line="132" pos:column="23">.</op:operator><name pos:line="132" pos:column="24">ch</name></name> <op:operator pos:line="132" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="132" pos:column="30">'_'</lit:literal> <op:operator pos:line="132" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="132" pos:column="37">(</op:operator>
                    <name><name pos:line="133" pos:column="21">sc</name><op:operator pos:line="133" pos:column="23">.</op:operator><name pos:line="133" pos:column="24">currentPos</name></name> <op:operator pos:line="133" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="133" pos:column="38">0</lit:literal> <op:operator pos:line="133" pos:column="40">||</op:operator> <op:operator pos:line="133" pos:column="43">!</op:operator><call><name pos:line="133" pos:column="44">IsAlNum</name><argument_list pos:line="133" pos:column="51">(<argument><expr><name><name pos:line="133" pos:column="52">sc</name><op:operator pos:line="133" pos:column="54">.</op:operator><name pos:line="133" pos:column="55">chPrev</name></name></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="62">)</op:operator></expr>)</condition><then pos:line="133" pos:column="64"> <block pos:line="133" pos:column="65">{
	            <decl_stmt><decl><type><name pos:line="134" pos:column="21">char</name></type> <name><name pos:line="134" pos:column="26">keyword</name><index pos:line="134" pos:column="33">[<expr><lit:literal type="number" pos:line="134" pos:column="34">50</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	            <expr_stmt><expr><call><name pos:line="135" pos:column="21">memset</name><argument_list pos:line="135" pos:column="27">(<argument><expr><name pos:line="135" pos:column="28">keyword</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="135" pos:column="37">'\0'</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="135" pos:column="43">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	            <for pos:line="137" pos:column="21">for(
                    <init><decl><type><name pos:line="138" pos:column="21">int</name></type> <name pos:line="138" pos:column="25">scanPosition</name> <init pos:line="138" pos:column="38">= <expr><lit:literal type="number" pos:line="138" pos:column="40">0</lit:literal></expr></init></decl>;</init>
                    <condition><expr><name pos:line="139" pos:column="21">scanPosition</name> <op:operator pos:line="139" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="139" pos:column="36">50</lit:literal></expr>;</condition>
                    <incr><expr><name pos:line="140" pos:column="21">scanPosition</name><op:operator pos:line="140" pos:column="33">++</op:operator></expr></incr>) <block pos:line="140" pos:column="37">{
	                <decl_stmt><decl><type><name pos:line="141" pos:column="25">char</name></type> <name pos:line="141" pos:column="30">keywordChar</name> <init pos:line="141" pos:column="42">= <expr><call><name><name pos:line="141" pos:column="44">static_cast</name><argument_list pos:line="141" pos:column="55">&lt;<argument><expr><name pos:line="141" pos:column="56">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="141" pos:column="61">(
                        <argument><expr><call><name pos:line="142" pos:column="25">tolower</name><argument_list pos:line="142" pos:column="32">(<argument><expr><call><name><name pos:line="142" pos:column="33">styler</name><op:operator pos:line="142" pos:column="39">.</op:operator><name pos:line="142" pos:column="40">SafeGetCharAt</name></name><argument_list pos:line="142" pos:column="53">(
                            <argument><expr><name pos:line="143" pos:column="29">scanPosition</name> <op:operator pos:line="143" pos:column="42">+</op:operator>
                                <call><name><name pos:line="144" pos:column="33">static_cast</name><argument_list pos:line="144" pos:column="44">&lt;<argument><expr><name pos:line="144" pos:column="45">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="144" pos:column="49">(<argument><expr><name><name pos:line="144" pos:column="50">sc</name><op:operator pos:line="144" pos:column="52">.</op:operator><name pos:line="144" pos:column="53">currentPos</name></name><op:operator pos:line="144" pos:column="63">+</op:operator><lit:literal type="number" pos:line="144" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="char" pos:line="144" pos:column="68">' '</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="145" pos:column="21">if<condition pos:line="145" pos:column="23">(<expr><call><name pos:line="145" pos:column="24">IsAlpha</name><argument_list pos:line="145" pos:column="31">(<argument><expr><name pos:line="145" pos:column="32">keywordChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="145" pos:column="45"> <block pos:line="145" pos:column="46">{
                        <expr_stmt><expr><name><name pos:line="146" pos:column="25">keyword</name><index pos:line="146" pos:column="32">[<expr><name pos:line="146" pos:column="33">scanPosition</name></expr>]</index></name> <op:operator pos:line="146" pos:column="47">=</op:operator> <name pos:line="146" pos:column="49">keywordChar</name></expr>;</expr_stmt>
                    }</block></then> <else pos:line="147" pos:column="23">else <block pos:line="147" pos:column="28">{
                        <break pos:line="148" pos:column="25">break;</break>
                    }</block></else></if>
	            }</block></for>

                <comment type="line" pos:line="152" pos:column="17">// It is a pragma</comment>
	            <if pos:line="153" pos:column="21">if<condition pos:line="153" pos:column="23">(<expr><call><name><name pos:line="153" pos:column="24">pragmatics</name><op:operator pos:line="153" pos:column="34">.</op:operator><name pos:line="153" pos:column="35">InList</name></name><argument_list pos:line="153" pos:column="41">(<argument><expr><name pos:line="153" pos:column="42">keyword</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="153" pos:column="51"> <block pos:line="153" pos:column="52">{
	                <expr_stmt><expr><call><name><name pos:line="154" pos:column="25">sc</name><op:operator pos:line="154" pos:column="27">.</op:operator><name pos:line="154" pos:column="28">SetState</name></name><argument_list pos:line="154" pos:column="36">(<argument><expr><name pos:line="154" pos:column="37">SCE_MAGIK_PRAGMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then>

	            <comment type="line" pos:line="157" pos:column="21">// it is a normal keyword like _local, _self, etc.</comment>
	            <else pos:line="158" pos:column="21">else <if pos:line="158" pos:column="26">if<condition pos:line="158" pos:column="28">(<expr><call><name><name pos:line="158" pos:column="29">keywords</name><op:operator pos:line="158" pos:column="37">.</op:operator><name pos:line="158" pos:column="38">InList</name></name><argument_list pos:line="158" pos:column="44">(<argument><expr><name pos:line="158" pos:column="45">keyword</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="54"> <block pos:line="158" pos:column="55">{
	                <expr_stmt><expr><call><name><name pos:line="159" pos:column="25">sc</name><op:operator pos:line="159" pos:column="27">.</op:operator><name pos:line="159" pos:column="28">SetState</name></name><argument_list pos:line="159" pos:column="36">(<argument><expr><name pos:line="159" pos:column="37">SCE_MAGIK_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then>

                <comment type="line" pos:line="162" pos:column="17">// It is a container keyword, such as _method, _proc, etc.</comment>
	            <else pos:line="163" pos:column="21">else <if pos:line="163" pos:column="26">if<condition pos:line="163" pos:column="28">(<expr><call><name><name pos:line="163" pos:column="29">containers</name><op:operator pos:line="163" pos:column="39">.</op:operator><name pos:line="163" pos:column="40">InList</name></name><argument_list pos:line="163" pos:column="46">(<argument><expr><name pos:line="163" pos:column="47">keyword</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="56"> <block pos:line="163" pos:column="57">{
	                <expr_stmt><expr><call><name><name pos:line="164" pos:column="25">sc</name><op:operator pos:line="164" pos:column="27">.</op:operator><name pos:line="164" pos:column="28">SetState</name></name><argument_list pos:line="164" pos:column="36">(<argument><expr><name pos:line="164" pos:column="37">SCE_MAGIK_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then>

	            <comment type="line" pos:line="167" pos:column="21">// It is a flow keyword, such as _for, _if, _try, etc.</comment>
	            <else pos:line="168" pos:column="21">else <if pos:line="168" pos:column="26">if<condition pos:line="168" pos:column="28">(<expr><call><name><name pos:line="168" pos:column="29">flow</name><op:operator pos:line="168" pos:column="33">.</op:operator><name pos:line="168" pos:column="34">InList</name></name><argument_list pos:line="168" pos:column="40">(<argument><expr><name pos:line="168" pos:column="41">keyword</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="168" pos:column="50"> <block pos:line="168" pos:column="51">{
	                <expr_stmt><expr><call><name><name pos:line="169" pos:column="25">sc</name><op:operator pos:line="169" pos:column="27">.</op:operator><name pos:line="169" pos:column="28">SetState</name></name><argument_list pos:line="169" pos:column="36">(<argument><expr><name pos:line="169" pos:column="37">SCE_MAGIK_FLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then>

	            <comment type="line" pos:line="172" pos:column="21">// Interpret as unknown keyword</comment>
	            <else pos:line="173" pos:column="21">else <block pos:line="173" pos:column="26">{
	                <expr_stmt><expr><call><name><name pos:line="174" pos:column="25">sc</name><op:operator pos:line="174" pos:column="27">.</op:operator><name pos:line="174" pos:column="28">SetState</name></name><argument_list pos:line="174" pos:column="36">(<argument><expr><name pos:line="174" pos:column="37">SCE_MAGIK_UNKNOWN_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></else></if></else></if></else></if></else></if>
	        }</block></then>

            <comment type="line" pos:line="178" pos:column="13">// Symbolic expression</comment>
	        <else pos:line="179" pos:column="17">else <if pos:line="179" pos:column="22">if<condition pos:line="179" pos:column="24">(<expr><name><name pos:line="179" pos:column="25">sc</name><op:operator pos:line="179" pos:column="27">.</op:operator><name pos:line="179" pos:column="28">ch</name></name> <op:operator pos:line="179" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="34">':'</lit:literal> <op:operator pos:line="179" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="179" pos:column="41">!</op:operator><call><name pos:line="179" pos:column="42">IsAlNum</name><argument_list pos:line="179" pos:column="49">(<argument><expr><name><name pos:line="179" pos:column="50">sc</name><op:operator pos:line="179" pos:column="52">.</op:operator><name pos:line="179" pos:column="53">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="179" pos:column="61"> <block pos:line="179" pos:column="62">{
	            <expr_stmt><expr><call><name><name pos:line="180" pos:column="21">sc</name><op:operator pos:line="180" pos:column="23">.</op:operator><name pos:line="180" pos:column="24">SetState</name></name><argument_list pos:line="180" pos:column="32">(<argument><expr><name pos:line="180" pos:column="33">SCE_MAGIK_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <decl_stmt><decl><type><name pos:line="181" pos:column="21">bool</name></type> <name pos:line="181" pos:column="26">firstTrip</name> <init pos:line="181" pos:column="36">= <expr><lit:literal type="boolean" pos:line="181" pos:column="38">true</lit:literal></expr></init></decl>;</decl_stmt>
	            <for pos:line="182" pos:column="21">for(<init><expr><call><name><name pos:line="182" pos:column="25">sc</name><op:operator pos:line="182" pos:column="27">.</op:operator><name pos:line="182" pos:column="28">Forward</name></name><argument_list pos:line="182" pos:column="35">()</argument_list></call></expr>;</init> <condition><expr><call><name><name pos:line="182" pos:column="39">sc</name><op:operator pos:line="182" pos:column="41">.</op:operator><name pos:line="182" pos:column="42">More</name></name><argument_list pos:line="182" pos:column="46">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="182" pos:column="50">sc</name><op:operator pos:line="182" pos:column="52">.</op:operator><name pos:line="182" pos:column="53">Forward</name></name><argument_list pos:line="182" pos:column="60">()</argument_list></call></expr></incr>) <block pos:line="182" pos:column="64">{
	                <if pos:line="183" pos:column="25">if<condition pos:line="183" pos:column="27">(<expr><name pos:line="183" pos:column="28">firstTrip</name> <op:operator pos:line="183" pos:column="38">&amp;&amp;</op:operator> <call><name pos:line="183" pos:column="41">IsAlphaSym</name><argument_list pos:line="183" pos:column="51">(<argument><expr><name><name pos:line="183" pos:column="52">sc</name><op:operator pos:line="183" pos:column="54">.</op:operator><name pos:line="183" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><empty_stmt pos:line="183" pos:column="59">;</empty_stmt></then>
	                <else pos:line="184" pos:column="25">else <if pos:line="184" pos:column="30">if<condition pos:line="184" pos:column="32">(<expr><op:operator pos:line="184" pos:column="33">!</op:operator><name pos:line="184" pos:column="34">firstTrip</name> <op:operator pos:line="184" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="184" pos:column="47">IsAlNumSym</name><argument_list pos:line="184" pos:column="57">(<argument><expr><name><name pos:line="184" pos:column="58">sc</name><op:operator pos:line="184" pos:column="60">.</op:operator><name pos:line="184" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><empty_stmt pos:line="184" pos:column="65">;</empty_stmt></then>
	                <else pos:line="185" pos:column="25">else <if pos:line="185" pos:column="30">if<condition pos:line="185" pos:column="32">(<expr><name><name pos:line="185" pos:column="33">sc</name><op:operator pos:line="185" pos:column="35">.</op:operator><name pos:line="185" pos:column="36">ch</name></name> <op:operator pos:line="185" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="42">'|'</lit:literal></expr>)</condition><then pos:line="185" pos:column="46"> <block pos:line="185" pos:column="47">{
	                    <for pos:line="186" pos:column="29">for(<init><expr><call><name><name pos:line="186" pos:column="33">sc</name><op:operator pos:line="186" pos:column="35">.</op:operator><name pos:line="186" pos:column="36">Forward</name></name><argument_list pos:line="186" pos:column="43">()</argument_list></call></expr>;</init>
                            <condition><expr><call><name><name pos:line="187" pos:column="29">sc</name><op:operator pos:line="187" pos:column="31">.</op:operator><name pos:line="187" pos:column="32">More</name></name><argument_list pos:line="187" pos:column="36">()</argument_list></call> <op:operator pos:line="187" pos:column="39">&amp;&amp;</op:operator> <name><name pos:line="187" pos:column="42">sc</name><op:operator pos:line="187" pos:column="44">.</op:operator><name pos:line="187" pos:column="45">ch</name></name> <op:operator pos:line="187" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="187" pos:column="51">'|'</lit:literal></expr>;</condition>
                            <incr><expr><call><name><name pos:line="188" pos:column="29">sc</name><op:operator pos:line="188" pos:column="31">.</op:operator><name pos:line="188" pos:column="32">Forward</name></name><argument_list pos:line="188" pos:column="39">()</argument_list></call></expr></incr>)<empty_stmt pos:line="188" pos:column="42">;</empty_stmt></for>
	                }</block></then>
	                <else pos:line="190" pos:column="25">else <break pos:line="190" pos:column="30">break;</break></else></if></else></if></else></if>

	                <expr_stmt><expr><name pos:line="192" pos:column="25">firstTrip</name> <op:operator pos:line="192" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="192" pos:column="37">false</lit:literal></expr>;</expr_stmt>
	            }</block></for>
	            <expr_stmt><expr><call><name><name pos:line="194" pos:column="21">sc</name><op:operator pos:line="194" pos:column="23">.</op:operator><name pos:line="194" pos:column="24">SetState</name></name><argument_list pos:line="194" pos:column="32">(<argument><expr><name pos:line="194" pos:column="33">SCE_MAGIK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <goto pos:line="195" pos:column="21">goto <name pos:line="195" pos:column="26">repeat</name>;</goto>
	        }</block></then>

            <comment type="line" pos:line="198" pos:column="13">// Identifier (label) expression</comment>
	        <else pos:line="199" pos:column="17">else <if pos:line="199" pos:column="22">if<condition pos:line="199" pos:column="24">(<expr><name><name pos:line="199" pos:column="25">sc</name><op:operator pos:line="199" pos:column="27">.</op:operator><name pos:line="199" pos:column="28">ch</name></name> <op:operator pos:line="199" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="199" pos:column="34">'@'</lit:literal></expr>)</condition><then pos:line="199" pos:column="38"> <block pos:line="199" pos:column="39">{
	            <expr_stmt><expr><call><name><name pos:line="200" pos:column="21">sc</name><op:operator pos:line="200" pos:column="23">.</op:operator><name pos:line="200" pos:column="24">SetState</name></name><argument_list pos:line="200" pos:column="32">(<argument><expr><name pos:line="200" pos:column="33">SCE_MAGIK_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <decl_stmt><decl><type><name pos:line="201" pos:column="21">bool</name></type> <name pos:line="201" pos:column="26">firstTrip</name> <init pos:line="201" pos:column="36">= <expr><lit:literal type="boolean" pos:line="201" pos:column="38">true</lit:literal></expr></init></decl>;</decl_stmt>
	            <for pos:line="202" pos:column="21">for(<init><expr><call><name><name pos:line="202" pos:column="25">sc</name><op:operator pos:line="202" pos:column="27">.</op:operator><name pos:line="202" pos:column="28">Forward</name></name><argument_list pos:line="202" pos:column="35">()</argument_list></call></expr>;</init> <condition><expr><call><name><name pos:line="202" pos:column="39">sc</name><op:operator pos:line="202" pos:column="41">.</op:operator><name pos:line="202" pos:column="42">More</name></name><argument_list pos:line="202" pos:column="46">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="202" pos:column="50">sc</name><op:operator pos:line="202" pos:column="52">.</op:operator><name pos:line="202" pos:column="53">Forward</name></name><argument_list pos:line="202" pos:column="60">()</argument_list></call></expr></incr>) <block pos:line="202" pos:column="64">{
	                <if pos:line="203" pos:column="25">if<condition pos:line="203" pos:column="27">(<expr><name pos:line="203" pos:column="28">firstTrip</name> <op:operator pos:line="203" pos:column="38">&amp;&amp;</op:operator> <call><name pos:line="203" pos:column="41">IsAlphaCore</name><argument_list pos:line="203" pos:column="52">(<argument><expr><name><name pos:line="203" pos:column="53">sc</name><op:operator pos:line="203" pos:column="55">.</op:operator><name pos:line="203" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="203" pos:column="60"> <block pos:line="203" pos:column="61">{
	                    <expr_stmt><expr><name pos:line="204" pos:column="29">firstTrip</name> <op:operator pos:line="204" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="204" pos:column="41">false</lit:literal></expr>;</expr_stmt>
	                }</block></then>
	                <else pos:line="206" pos:column="25">else <if pos:line="206" pos:column="30">if<condition pos:line="206" pos:column="32">(<expr><op:operator pos:line="206" pos:column="33">!</op:operator><name pos:line="206" pos:column="34">firstTrip</name> <op:operator pos:line="206" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="206" pos:column="47">IsAlpha</name><argument_list pos:line="206" pos:column="54">(<argument><expr><name><name pos:line="206" pos:column="55">sc</name><op:operator pos:line="206" pos:column="57">.</op:operator><name pos:line="206" pos:column="58">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><empty_stmt pos:line="206" pos:column="62">;</empty_stmt></then>
	                <else pos:line="207" pos:column="25">else <break pos:line="207" pos:column="30">break;</break></else></if></else></if>
	            }</block></for>
	            <expr_stmt><expr><call><name><name pos:line="209" pos:column="21">sc</name><op:operator pos:line="209" pos:column="23">.</op:operator><name pos:line="209" pos:column="24">SetState</name></name><argument_list pos:line="209" pos:column="32">(<argument><expr><name pos:line="209" pos:column="33">SCE_MAGIK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <goto pos:line="210" pos:column="21">goto <name pos:line="210" pos:column="26">repeat</name>;</goto>
	        }</block></then>

	        <comment type="line" pos:line="213" pos:column="17">// Start of a character</comment>
            <else pos:line="214" pos:column="13">else <if pos:line="214" pos:column="18">if<condition pos:line="214" pos:column="20">(<expr><name><name pos:line="214" pos:column="21">sc</name><op:operator pos:line="214" pos:column="23">.</op:operator><name pos:line="214" pos:column="24">ch</name></name> <op:operator pos:line="214" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="214" pos:column="30">'%'</lit:literal></expr>)</condition><then pos:line="214" pos:column="34"> <block pos:line="214" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">sc</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">SetState</name></name><argument_list pos:line="215" pos:column="28">(<argument><expr><name pos:line="215" pos:column="29">SCE_MAGIK_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="216" pos:column="17">sc</name><op:operator pos:line="216" pos:column="19">.</op:operator><name pos:line="216" pos:column="20">Forward</name></name><argument_list pos:line="216" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="217" pos:column="17">char</name></type> <name><name pos:line="217" pos:column="22">keyword</name><index pos:line="217" pos:column="29">[<expr><lit:literal type="number" pos:line="217" pos:column="30">50</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	            <expr_stmt><expr><call><name pos:line="218" pos:column="21">memset</name><argument_list pos:line="218" pos:column="27">(<argument><expr><name pos:line="218" pos:column="28">keyword</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="218" pos:column="37">'\0'</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="218" pos:column="43">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	            <for pos:line="220" pos:column="21">for(
                    <init><decl><type><name pos:line="221" pos:column="21">int</name></type> <name pos:line="221" pos:column="25">scanPosition</name> <init pos:line="221" pos:column="38">= <expr><lit:literal type="number" pos:line="221" pos:column="40">0</lit:literal></expr></init></decl>;</init>
                    <condition><expr><name pos:line="222" pos:column="21">scanPosition</name> <op:operator pos:line="222" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="222" pos:column="36">50</lit:literal></expr>;</condition>
                    <incr><expr><name pos:line="223" pos:column="21">scanPosition</name><op:operator pos:line="223" pos:column="33">++</op:operator></expr></incr>) <block pos:line="223" pos:column="37">{
	                <decl_stmt><decl><type><name pos:line="224" pos:column="25">char</name></type> <name pos:line="224" pos:column="30">keywordChar</name> <init pos:line="224" pos:column="42">= <expr><call><name><name pos:line="224" pos:column="44">static_cast</name><argument_list pos:line="224" pos:column="55">&lt;<argument><expr><name pos:line="224" pos:column="56">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="224" pos:column="61">(
                        <argument><expr><call><name pos:line="225" pos:column="25">tolower</name><argument_list pos:line="225" pos:column="32">(<argument><expr><call><name><name pos:line="225" pos:column="33">styler</name><op:operator pos:line="225" pos:column="39">.</op:operator><name pos:line="225" pos:column="40">SafeGetCharAt</name></name><argument_list pos:line="225" pos:column="53">(
                            <argument><expr><name pos:line="226" pos:column="29">scanPosition</name> <op:operator pos:line="226" pos:column="42">+</op:operator>
                                <call><name><name pos:line="227" pos:column="33">static_cast</name><argument_list pos:line="227" pos:column="44">&lt;<argument><expr><name pos:line="227" pos:column="45">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="227" pos:column="49">(<argument><expr><name><name pos:line="227" pos:column="50">sc</name><op:operator pos:line="227" pos:column="52">.</op:operator><name pos:line="227" pos:column="53">currentPos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="char" pos:line="227" pos:column="66">' '</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="228" pos:column="21">if<condition pos:line="228" pos:column="23">(<expr><call><name pos:line="228" pos:column="24">IsAlpha</name><argument_list pos:line="228" pos:column="31">(<argument><expr><name pos:line="228" pos:column="32">keywordChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="228" pos:column="45"> <block pos:line="228" pos:column="46">{
                        <expr_stmt><expr><name><name pos:line="229" pos:column="25">keyword</name><index pos:line="229" pos:column="32">[<expr><name pos:line="229" pos:column="33">scanPosition</name></expr>]</index></name> <op:operator pos:line="229" pos:column="47">=</op:operator> <name pos:line="229" pos:column="49">keywordChar</name></expr>;</expr_stmt>
                    }</block></then> <else pos:line="230" pos:column="23">else <block pos:line="230" pos:column="28">{
                        <break pos:line="231" pos:column="25">break;</break>
                    }</block></else></if>
	            }</block></for>

	            <if pos:line="235" pos:column="21">if<condition pos:line="235" pos:column="23">(<expr><call><name><name pos:line="235" pos:column="24">characters</name><op:operator pos:line="235" pos:column="34">.</op:operator><name pos:line="235" pos:column="35">InList</name></name><argument_list pos:line="235" pos:column="41">(<argument><expr><name pos:line="235" pos:column="42">keyword</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="235" pos:column="51"> <block pos:line="235" pos:column="52">{
	                <expr_stmt><expr><call><name><name pos:line="236" pos:column="25">sc</name><op:operator pos:line="236" pos:column="27">.</op:operator><name pos:line="236" pos:column="28">Forward</name></name><argument_list pos:line="236" pos:column="35">(<argument><expr><call><name pos:line="236" pos:column="36">strlen</name><argument_list pos:line="236" pos:column="42">(<argument><expr><name pos:line="236" pos:column="43">keyword</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then> <else pos:line="237" pos:column="23">else <block pos:line="237" pos:column="28">{
	                <expr_stmt><expr><call><name><name pos:line="238" pos:column="25">sc</name><op:operator pos:line="238" pos:column="27">.</op:operator><name pos:line="238" pos:column="28">Forward</name></name><argument_list pos:line="238" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	            }</block></else></if>

                <expr_stmt><expr><call><name><name pos:line="241" pos:column="17">sc</name><op:operator pos:line="241" pos:column="19">.</op:operator><name pos:line="241" pos:column="20">SetState</name></name><argument_list pos:line="241" pos:column="28">(<argument><expr><name pos:line="241" pos:column="29">SCE_MAGIK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:line="242" pos:column="17">goto <name pos:line="242" pos:column="22">repeat</name>;</goto>
            }</block></then>

            <comment type="line" pos:line="245" pos:column="13">// Operators</comment>
	        <else pos:line="246" pos:column="17">else <if pos:line="246" pos:column="22">if<condition pos:line="246" pos:column="24">(
                <expr><name><name pos:line="247" pos:column="17">sc</name><op:operator pos:line="247" pos:column="19">.</op:operator><name pos:line="247" pos:column="20">ch</name></name> <op:operator pos:line="247" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="247" pos:column="26">'&gt;'</lit:literal> <op:operator pos:line="247" pos:column="30">||</op:operator>
                <name><name pos:line="248" pos:column="17">sc</name><op:operator pos:line="248" pos:column="19">.</op:operator><name pos:line="248" pos:column="20">ch</name></name> <op:operator pos:line="248" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="26">'&lt;'</lit:literal> <op:operator pos:line="248" pos:column="30">||</op:operator>
                <name><name pos:line="249" pos:column="17">sc</name><op:operator pos:line="249" pos:column="19">.</op:operator><name pos:line="249" pos:column="20">ch</name></name> <op:operator pos:line="249" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="249" pos:column="26">'.'</lit:literal> <op:operator pos:line="249" pos:column="30">||</op:operator>
                <name><name pos:line="250" pos:column="17">sc</name><op:operator pos:line="250" pos:column="19">.</op:operator><name pos:line="250" pos:column="20">ch</name></name> <op:operator pos:line="250" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="250" pos:column="26">','</lit:literal> <op:operator pos:line="250" pos:column="30">||</op:operator>
                <name><name pos:line="251" pos:column="17">sc</name><op:operator pos:line="251" pos:column="19">.</op:operator><name pos:line="251" pos:column="20">ch</name></name> <op:operator pos:line="251" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="251" pos:column="26">'+'</lit:literal> <op:operator pos:line="251" pos:column="30">||</op:operator>
                <name><name pos:line="252" pos:column="17">sc</name><op:operator pos:line="252" pos:column="19">.</op:operator><name pos:line="252" pos:column="20">ch</name></name> <op:operator pos:line="252" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="252" pos:column="26">'-'</lit:literal> <op:operator pos:line="252" pos:column="30">||</op:operator>
                <name><name pos:line="253" pos:column="17">sc</name><op:operator pos:line="253" pos:column="19">.</op:operator><name pos:line="253" pos:column="20">ch</name></name> <op:operator pos:line="253" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="253" pos:column="26">'/'</lit:literal> <op:operator pos:line="253" pos:column="30">||</op:operator>
                <name><name pos:line="254" pos:column="17">sc</name><op:operator pos:line="254" pos:column="19">.</op:operator><name pos:line="254" pos:column="20">ch</name></name> <op:operator pos:line="254" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="254" pos:column="26">'*'</lit:literal> <op:operator pos:line="254" pos:column="30">||</op:operator>
                <name><name pos:line="255" pos:column="17">sc</name><op:operator pos:line="255" pos:column="19">.</op:operator><name pos:line="255" pos:column="20">ch</name></name> <op:operator pos:line="255" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="255" pos:column="26">'~'</lit:literal> <op:operator pos:line="255" pos:column="30">||</op:operator>
                <name><name pos:line="256" pos:column="17">sc</name><op:operator pos:line="256" pos:column="19">.</op:operator><name pos:line="256" pos:column="20">ch</name></name> <op:operator pos:line="256" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="256" pos:column="26">'$'</lit:literal> <op:operator pos:line="256" pos:column="30">||</op:operator>
                <name><name pos:line="257" pos:column="17">sc</name><op:operator pos:line="257" pos:column="19">.</op:operator><name pos:line="257" pos:column="20">ch</name></name> <op:operator pos:line="257" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="257" pos:column="26">'='</lit:literal></expr>)</condition><then pos:line="257" pos:column="30"> <block pos:line="257" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="258" pos:column="17">sc</name><op:operator pos:line="258" pos:column="19">.</op:operator><name pos:line="258" pos:column="20">SetState</name></name><argument_list pos:line="258" pos:column="28">(<argument><expr><name pos:line="258" pos:column="29">SCE_MAGIK_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>

            <comment type="line" pos:line="261" pos:column="13">// Braces</comment>
            <else pos:line="262" pos:column="13">else <if pos:line="262" pos:column="18">if<condition pos:line="262" pos:column="20">(<expr><name><name pos:line="262" pos:column="21">sc</name><op:operator pos:line="262" pos:column="23">.</op:operator><name pos:line="262" pos:column="24">ch</name></name> <op:operator pos:line="262" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="30">'('</lit:literal> <op:operator pos:line="262" pos:column="34">||</op:operator> <name><name pos:line="262" pos:column="37">sc</name><op:operator pos:line="262" pos:column="39">.</op:operator><name pos:line="262" pos:column="40">ch</name></name> <op:operator pos:line="262" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="46">')'</lit:literal></expr>)</condition><then pos:line="262" pos:column="50"> <block pos:line="262" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="263" pos:column="17">sc</name><op:operator pos:line="263" pos:column="19">.</op:operator><name pos:line="263" pos:column="20">SetState</name></name><argument_list pos:line="263" pos:column="28">(<argument><expr><name pos:line="263" pos:column="29">SCE_MAGIK_BRACE_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>

            <comment type="line" pos:line="266" pos:column="13">// Brackets</comment>
            <else pos:line="267" pos:column="13">else <if pos:line="267" pos:column="18">if<condition pos:line="267" pos:column="20">(<expr><name><name pos:line="267" pos:column="21">sc</name><op:operator pos:line="267" pos:column="23">.</op:operator><name pos:line="267" pos:column="24">ch</name></name> <op:operator pos:line="267" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="267" pos:column="30">'{'</lit:literal> <op:operator pos:line="267" pos:column="34">||</op:operator> <name><name pos:line="267" pos:column="37">sc</name><op:operator pos:line="267" pos:column="39">.</op:operator><name pos:line="267" pos:column="40">ch</name></name> <op:operator pos:line="267" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="267" pos:column="46">'}'</lit:literal></expr>)</condition><then pos:line="267" pos:column="50"> <block pos:line="267" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="268" pos:column="17">sc</name><op:operator pos:line="268" pos:column="19">.</op:operator><name pos:line="268" pos:column="20">SetState</name></name><argument_list pos:line="268" pos:column="28">(<argument><expr><name pos:line="268" pos:column="29">SCE_MAGIK_BRACKET_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>

            <comment type="line" pos:line="271" pos:column="13">// Square Brackets</comment>
            <else pos:line="272" pos:column="13">else <if pos:line="272" pos:column="18">if<condition pos:line="272" pos:column="20">(<expr><name><name pos:line="272" pos:column="21">sc</name><op:operator pos:line="272" pos:column="23">.</op:operator><name pos:line="272" pos:column="24">ch</name></name> <op:operator pos:line="272" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="30">'['</lit:literal> <op:operator pos:line="272" pos:column="34">||</op:operator> <name><name pos:line="272" pos:column="37">sc</name><op:operator pos:line="272" pos:column="39">.</op:operator><name pos:line="272" pos:column="40">ch</name></name> <op:operator pos:line="272" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="46">']'</lit:literal></expr>)</condition><then pos:line="272" pos:column="50"> <block pos:line="272" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="273" pos:column="17">sc</name><op:operator pos:line="273" pos:column="19">.</op:operator><name pos:line="273" pos:column="20">SetState</name></name><argument_list pos:line="273" pos:column="28">(<argument><expr><name pos:line="273" pos:column="29">SCE_MAGIK_SQBRACKET_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>


	    }</block></then>

	    <comment type="line" pos:line="279" pos:column="13">// It is an operator</comment>
	    <else pos:line="280" pos:column="13">else <if pos:line="280" pos:column="18">if<condition pos:line="280" pos:column="20">(
            <expr><name><name pos:line="281" pos:column="13">sc</name><op:operator pos:line="281" pos:column="15">.</op:operator><name pos:line="281" pos:column="16">state</name></name> <op:operator pos:line="281" pos:column="22">==</op:operator> <name pos:line="281" pos:column="25">SCE_MAGIK_OPERATOR</name> <op:operator pos:line="281" pos:column="44">||</op:operator>
            <name><name pos:line="282" pos:column="13">sc</name><op:operator pos:line="282" pos:column="15">.</op:operator><name pos:line="282" pos:column="16">state</name></name> <op:operator pos:line="282" pos:column="22">==</op:operator> <name pos:line="282" pos:column="25">SCE_MAGIK_BRACE_BLOCK</name> <op:operator pos:line="282" pos:column="47">||</op:operator>
            <name><name pos:line="283" pos:column="13">sc</name><op:operator pos:line="283" pos:column="15">.</op:operator><name pos:line="283" pos:column="16">state</name></name> <op:operator pos:line="283" pos:column="22">==</op:operator> <name pos:line="283" pos:column="25">SCE_MAGIK_BRACKET_BLOCK</name> <op:operator pos:line="283" pos:column="49">||</op:operator>
            <name><name pos:line="284" pos:column="13">sc</name><op:operator pos:line="284" pos:column="15">.</op:operator><name pos:line="284" pos:column="16">state</name></name> <op:operator pos:line="284" pos:column="22">==</op:operator> <name pos:line="284" pos:column="25">SCE_MAGIK_SQBRACKET_BLOCK</name></expr>)</condition><then pos:line="284" pos:column="51"> <block pos:line="284" pos:column="52">{
	        <expr_stmt><expr><call><name><name pos:line="285" pos:column="17">sc</name><op:operator pos:line="285" pos:column="19">.</op:operator><name pos:line="285" pos:column="20">SetState</name></name><argument_list pos:line="285" pos:column="28">(<argument><expr><name pos:line="285" pos:column="29">SCE_MAGIK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <goto pos:line="286" pos:column="17">goto <name pos:line="286" pos:column="22">repeat</name>;</goto>
	    }</block></then>

	    <comment type="line" pos:line="289" pos:column="13">// It is the pragma state</comment>
	    <else pos:line="290" pos:column="13">else <if pos:line="290" pos:column="18">if<condition pos:line="290" pos:column="20">(<expr><name><name pos:line="290" pos:column="21">sc</name><op:operator pos:line="290" pos:column="23">.</op:operator><name pos:line="290" pos:column="24">state</name></name> <op:operator pos:line="290" pos:column="30">==</op:operator> <name pos:line="290" pos:column="33">SCE_MAGIK_PRAGMA</name></expr>)</condition><then pos:line="290" pos:column="50"> <block pos:line="290" pos:column="51">{
	        <if pos:line="291" pos:column="17">if<condition pos:line="291" pos:column="19">(<expr><op:operator pos:line="291" pos:column="20">!</op:operator><call><name pos:line="291" pos:column="21">IsAlpha</name><argument_list pos:line="291" pos:column="28">(<argument><expr><name><name pos:line="291" pos:column="29">sc</name><op:operator pos:line="291" pos:column="31">.</op:operator><name pos:line="291" pos:column="32">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="291" pos:column="36"> <block pos:line="291" pos:column="37">{
	            <expr_stmt><expr><call><name><name pos:line="292" pos:column="21">sc</name><op:operator pos:line="292" pos:column="23">.</op:operator><name pos:line="292" pos:column="24">SetState</name></name><argument_list pos:line="292" pos:column="32">(<argument><expr><name pos:line="292" pos:column="33">SCE_MAGIK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:line="293" pos:column="17">goto <name pos:line="293" pos:column="22">repeat</name>;</goto>
	        }</block></then></if>
	    }</block></then>

	    <comment type="line" pos:line="297" pos:column="13">// It is the keyword state</comment>
	    <else pos:line="298" pos:column="13">else <if pos:line="298" pos:column="18">if<condition pos:line="298" pos:column="20">(
            <expr><name><name pos:line="299" pos:column="13">sc</name><op:operator pos:line="299" pos:column="15">.</op:operator><name pos:line="299" pos:column="16">state</name></name> <op:operator pos:line="299" pos:column="22">==</op:operator> <name pos:line="299" pos:column="25">SCE_MAGIK_KEYWORD</name> <op:operator pos:line="299" pos:column="43">||</op:operator>
            <name><name pos:line="300" pos:column="13">sc</name><op:operator pos:line="300" pos:column="15">.</op:operator><name pos:line="300" pos:column="16">state</name></name> <op:operator pos:line="300" pos:column="22">==</op:operator> <name pos:line="300" pos:column="25">SCE_MAGIK_CONTAINER</name> <op:operator pos:line="300" pos:column="45">||</op:operator>
            <name><name pos:line="301" pos:column="13">sc</name><op:operator pos:line="301" pos:column="15">.</op:operator><name pos:line="301" pos:column="16">state</name></name> <op:operator pos:line="301" pos:column="22">==</op:operator> <name pos:line="301" pos:column="25">SCE_MAGIK_FLOW</name> <op:operator pos:line="301" pos:column="40">||</op:operator>
            <name><name pos:line="302" pos:column="13">sc</name><op:operator pos:line="302" pos:column="15">.</op:operator><name pos:line="302" pos:column="16">state</name></name> <op:operator pos:line="302" pos:column="22">==</op:operator> <name pos:line="302" pos:column="25">SCE_MAGIK_UNKNOWN_KEYWORD</name></expr>)</condition><then pos:line="302" pos:column="51"> <block pos:line="302" pos:column="52">{
	        <if pos:line="303" pos:column="17">if<condition pos:line="303" pos:column="19">(<expr><op:operator pos:line="303" pos:column="20">!</op:operator><call><name pos:line="303" pos:column="21">IsAlpha</name><argument_list pos:line="303" pos:column="28">(<argument><expr><name><name pos:line="303" pos:column="29">sc</name><op:operator pos:line="303" pos:column="31">.</op:operator><name pos:line="303" pos:column="32">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="303" pos:column="36"> <block pos:line="303" pos:column="37">{
	            <expr_stmt><expr><call><name><name pos:line="304" pos:column="21">sc</name><op:operator pos:line="304" pos:column="23">.</op:operator><name pos:line="304" pos:column="24">SetState</name></name><argument_list pos:line="304" pos:column="32">(<argument><expr><name pos:line="304" pos:column="33">SCE_MAGIK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <goto pos:line="305" pos:column="21">goto <name pos:line="305" pos:column="26">repeat</name>;</goto>
	        }</block></then></if>
	    }</block></then></if></else></if></else></if></else></if>
	}</block></for>

	<expr_stmt><expr><call><name><name pos:line="310" pos:column="9">sc</name><op:operator pos:line="310" pos:column="11">.</op:operator><name pos:line="310" pos:column="12">Complete</name></name><argument_list pos:line="310" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" pos:line="313" pos:column="1">/**
 * The word list description
 */</comment>
<decl_stmt><decl><type><specifier pos:line="316" pos:column="1">static</specifier> <specifier pos:line="316" pos:column="8">const</specifier> <name pos:line="316" pos:column="14">char</name> <type:modifier pos:line="316" pos:column="19">*</type:modifier> <specifier pos:line="316" pos:column="21">const</specifier></type> <name><name pos:line="316" pos:column="27">magikWordListDesc</name><index pos:line="316" pos:column="44">[]</index></name> <init pos:line="316" pos:column="47">= <expr><block pos:line="316" pos:column="49">{
    <expr><lit:literal type="string" pos:line="317" pos:column="5">"Accessors (local, global, self, super, thisthread)"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="318" pos:column="5">"Pragmatic (pragma, private)"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="319" pos:column="5">"Containers (method, block, proc)"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="320" pos:column="5">"Flow (if, then, elif, else)"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="321" pos:column="5">"Characters (space, tab, newline, return)"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="322" pos:column="5">"Fold Containers (method, proc, block, if, loop)"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="323" pos:column="5">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen" pos:line="325" pos:column="1">/**
 * This function detects keywords which are able to have a body. Note that it
 * uses the Fold Containers word description, not the containers description. It
 * only works when the style at that particular position is set on Containers
 * or Flow (number 3 or 4).
 *
 * \param  keywordslist The list of keywords that are scanned, they should only
 *         contain the start keywords, not the end keywords
 * \param  The actual keyword
 * \return 1 if it is a folding start-keyword, -1 if it is a folding end-keyword
 *         0 otherwise
 */</comment>
<function><type><specifier pos:line="337" pos:column="1">static</specifier> <specifier pos:line="337" pos:column="8">inline</specifier> <name pos:line="337" pos:column="15">int</name></type> <name pos:line="337" pos:column="19">IsFoldingContainer</name><parameter_list pos:line="337" pos:column="37">(<param><decl><type><name pos:line="337" pos:column="38">WordList</name> <type:modifier pos:line="337" pos:column="47">&amp;</type:modifier></type><name pos:line="337" pos:column="48">keywordslist</name></decl></param>, <param><decl><type><name pos:line="337" pos:column="62">char</name> <type:modifier pos:line="337" pos:column="67">*</type:modifier></type> <name pos:line="337" pos:column="69">keyword</name></decl></param>)</parameter_list> <block pos:line="337" pos:column="78">{
    <if pos:line="338" pos:column="5">if<condition pos:line="338" pos:column="7">(
        <expr><call><name pos:line="339" pos:column="9">strlen</name><argument_list pos:line="339" pos:column="15">(<argument><expr><name pos:line="339" pos:column="16">keyword</name></expr></argument>)</argument_list></call> <op:operator pos:line="339" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="339" pos:column="27">3</lit:literal> <op:operator pos:line="339" pos:column="29">&amp;&amp;</op:operator>
        <name><name pos:line="340" pos:column="9">keyword</name><index pos:line="340" pos:column="16">[<expr><lit:literal type="number" pos:line="340" pos:column="17">0</lit:literal></expr>]</index></name> <op:operator pos:line="340" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="340" pos:column="23">'e'</lit:literal> <op:operator pos:line="340" pos:column="27">&amp;&amp;</op:operator> <name><name pos:line="340" pos:column="30">keyword</name><index pos:line="340" pos:column="37">[<expr><lit:literal type="number" pos:line="340" pos:column="38">1</lit:literal></expr>]</index></name> <op:operator pos:line="340" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="340" pos:column="44">'n'</lit:literal> <op:operator pos:line="340" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="340" pos:column="51">keyword</name><index pos:line="340" pos:column="58">[<expr><lit:literal type="number" pos:line="340" pos:column="59">2</lit:literal></expr>]</index></name> <op:operator pos:line="340" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="340" pos:column="65">'d'</lit:literal></expr>)</condition><then pos:line="340" pos:column="69"> <block pos:line="340" pos:column="70">{
        <if pos:line="341" pos:column="9">if <condition pos:line="341" pos:column="12">(<expr><call><name><name pos:line="341" pos:column="13">keywordslist</name><op:operator pos:line="341" pos:column="25">.</op:operator><name pos:line="341" pos:column="26">InList</name></name><argument_list pos:line="341" pos:column="32">(<argument><expr><name pos:line="341" pos:column="33">keyword</name> <op:operator pos:line="341" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="341" pos:column="43">3</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="341" pos:column="46"> <block pos:line="341" pos:column="47">{
            <return pos:line="342" pos:column="13">return <expr><op:operator pos:line="342" pos:column="20">-</op:operator><lit:literal type="number" pos:line="342" pos:column="21">1</lit:literal></expr>;</return>
        }</block></then></if>

    }</block></then> <else pos:line="345" pos:column="7">else <block pos:line="345" pos:column="12">{
        <if pos:line="346" pos:column="9">if<condition pos:line="346" pos:column="11">(<expr><call><name><name pos:line="346" pos:column="12">keywordslist</name><op:operator pos:line="346" pos:column="24">.</op:operator><name pos:line="346" pos:column="25">InList</name></name><argument_list pos:line="346" pos:column="31">(<argument><expr><name pos:line="346" pos:column="32">keyword</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="346" pos:column="41"> <block pos:line="346" pos:column="42">{
            <return pos:line="347" pos:column="13">return <expr><lit:literal type="number" pos:line="347" pos:column="20">1</lit:literal></expr>;</return>
        }</block></then></if>
    }</block></else></if>

    <return pos:line="351" pos:column="5">return <expr><lit:literal type="number" pos:line="351" pos:column="12">0</lit:literal></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="354" pos:column="1">/**
 * The folding function
 *
 * \param  startPos Where to start scanning
 * \param  length Where to scan to
 * \param  keywordslists The keywordslists, currently, number 5 is used
 * \param  styler The styler
 */</comment>
<function><type><specifier pos:line="362" pos:column="1">static</specifier> <name pos:line="362" pos:column="8">void</name></type> <name pos:line="362" pos:column="13">FoldMagikDoc</name><parameter_list pos:line="362" pos:column="25">(<param><decl><type><name pos:line="362" pos:column="26">unsigned</name> <name pos:line="362" pos:column="35">int</name></type> <name pos:line="362" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="362" pos:column="49">int</name></type> <name pos:line="362" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="362" pos:column="61">int</name></type></decl></param>,
    <param><decl><type><name pos:line="363" pos:column="5">WordList</name> <type:modifier pos:line="363" pos:column="14">*</type:modifier></type><name><name pos:line="363" pos:column="15">keywordslists</name><index pos:line="363" pos:column="28">[]</index></name></decl></param>, <param><decl><type><name pos:line="363" pos:column="32">Accessor</name> <type:modifier pos:line="363" pos:column="41">&amp;</type:modifier></type><name pos:line="363" pos:column="42">styler</name></decl></param>)</parameter_list> <block pos:line="363" pos:column="50">{

    <decl_stmt><decl><type><name pos:line="365" pos:column="5">bool</name></type> <name pos:line="365" pos:column="10">compact</name> <init pos:line="365" pos:column="18">= <expr><call><name><name pos:line="365" pos:column="20">styler</name><op:operator pos:line="365" pos:column="26">.</op:operator><name pos:line="365" pos:column="27">GetPropertyInt</name></name><argument_list pos:line="365" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="365" pos:column="42">"fold.compact"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="365" pos:column="58">!=</op:operator> <lit:literal type="number" pos:line="365" pos:column="61">0</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="367" pos:column="5">WordList</name> <type:modifier pos:line="367" pos:column="14">&amp;</type:modifier></type><name pos:line="367" pos:column="15">foldingElements</name> <init pos:line="367" pos:column="31">= <expr><op:operator pos:line="367" pos:column="33">*</op:operator><name><name pos:line="367" pos:column="34">keywordslists</name><index pos:line="367" pos:column="47">[<expr><lit:literal type="number" pos:line="367" pos:column="48">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="368" pos:column="5">int</name></type> <name pos:line="368" pos:column="9">endPos</name> <init pos:line="368" pos:column="16">= <expr><name pos:line="368" pos:column="18">startPos</name> <op:operator pos:line="368" pos:column="27">+</op:operator> <name pos:line="368" pos:column="29">length</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="369" pos:column="5">int</name></type> <name pos:line="369" pos:column="9">line</name> <init pos:line="369" pos:column="14">= <expr><call><name><name pos:line="369" pos:column="16">styler</name><op:operator pos:line="369" pos:column="22">.</op:operator><name pos:line="369" pos:column="23">GetLine</name></name><argument_list pos:line="369" pos:column="30">(<argument><expr><name pos:line="369" pos:column="31">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="370" pos:column="5">int</name></type> <name pos:line="370" pos:column="9">level</name> <init pos:line="370" pos:column="15">= <expr><call><name><name pos:line="370" pos:column="17">styler</name><op:operator pos:line="370" pos:column="23">.</op:operator><name pos:line="370" pos:column="24">LevelAt</name></name><argument_list pos:line="370" pos:column="31">(<argument><expr><name pos:line="370" pos:column="32">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="370" pos:column="38">&amp;</op:operator> <name pos:line="370" pos:column="40">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="371" pos:column="5">int</name></type> <name pos:line="371" pos:column="9">flags</name> <init pos:line="371" pos:column="15">= <expr><call><name><name pos:line="371" pos:column="17">styler</name><op:operator pos:line="371" pos:column="23">.</op:operator><name pos:line="371" pos:column="24">LevelAt</name></name><argument_list pos:line="371" pos:column="31">(<argument><expr><name pos:line="371" pos:column="32">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="371" pos:column="38">&amp;</op:operator> <op:operator pos:line="371" pos:column="40">~</op:operator><name pos:line="371" pos:column="41">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>

    <for pos:line="373" pos:column="5">for(
        <init><decl><type><name pos:line="374" pos:column="9">int</name></type> <name pos:line="374" pos:column="13">currentPos</name> <init pos:line="374" pos:column="24">= <expr><name pos:line="374" pos:column="26">startPos</name></expr></init></decl>;</init>
        <condition><expr><name pos:line="375" pos:column="9">currentPos</name> <op:operator pos:line="375" pos:column="20">&lt;</op:operator> <name pos:line="375" pos:column="22">endPos</name></expr>;</condition>
        <incr><expr><name pos:line="376" pos:column="9">currentPos</name><op:operator pos:line="376" pos:column="19">++</op:operator></expr></incr>) <block pos:line="376" pos:column="23">{
            <decl_stmt><decl><type><name pos:line="377" pos:column="13">char</name></type> <name pos:line="377" pos:column="18">currentState</name> <init pos:line="377" pos:column="31">= <expr><call><name><name pos:line="377" pos:column="33">styler</name><op:operator pos:line="377" pos:column="39">.</op:operator><name pos:line="377" pos:column="40">StyleAt</name></name><argument_list pos:line="377" pos:column="47">(<argument><expr><name pos:line="377" pos:column="48">currentPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="378" pos:column="13">char</name></type> <name pos:line="378" pos:column="18">c</name> <init pos:line="378" pos:column="20">= <expr><call><name><name pos:line="378" pos:column="22">styler</name><op:operator pos:line="378" pos:column="28">.</op:operator><name pos:line="378" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="378" pos:column="42">(<argument><expr><name pos:line="378" pos:column="43">currentPos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="378" pos:column="55">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="379" pos:column="13">int</name></type> <name pos:line="379" pos:column="17">prevLine</name> <init pos:line="379" pos:column="26">= <expr><call><name><name pos:line="379" pos:column="28">styler</name><op:operator pos:line="379" pos:column="34">.</op:operator><name pos:line="379" pos:column="35">GetLine</name></name><argument_list pos:line="379" pos:column="42">(<argument><expr><name pos:line="379" pos:column="43">currentPos</name> <op:operator pos:line="379" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="379" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="380" pos:column="13">line</name> <op:operator pos:line="380" pos:column="18">=</op:operator> <call><name><name pos:line="380" pos:column="20">styler</name><op:operator pos:line="380" pos:column="26">.</op:operator><name pos:line="380" pos:column="27">GetLine</name></name><argument_list pos:line="380" pos:column="34">(<argument><expr><name pos:line="380" pos:column="35">currentPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="382" pos:column="13">// Default situation</comment>
            <if pos:line="383" pos:column="13">if<condition pos:line="383" pos:column="15">(<expr><name pos:line="383" pos:column="16">prevLine</name> <op:operator pos:line="383" pos:column="25">&lt;</op:operator> <name pos:line="383" pos:column="27">line</name></expr>)</condition><then pos:line="383" pos:column="32"> <block pos:line="383" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="384" pos:column="17">styler</name><op:operator pos:line="384" pos:column="23">.</op:operator><name pos:line="384" pos:column="24">SetLevel</name></name><argument_list pos:line="384" pos:column="32">(<argument><expr><name pos:line="384" pos:column="33">line</name></expr></argument>, <argument><expr><op:operator pos:line="384" pos:column="39">(</op:operator><name pos:line="384" pos:column="40">level</name><op:operator pos:line="384" pos:column="45">|</op:operator><name pos:line="384" pos:column="46">flags</name><op:operator pos:line="384" pos:column="51">)</op:operator> <op:operator pos:line="384" pos:column="53">&amp;</op:operator> <op:operator pos:line="384" pos:column="55">~</op:operator><name pos:line="384" pos:column="56">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="385" pos:column="17">flags</name> <op:operator pos:line="385" pos:column="23">=</op:operator> <call><name><name pos:line="385" pos:column="25">styler</name><op:operator pos:line="385" pos:column="31">.</op:operator><name pos:line="385" pos:column="32">LevelAt</name></name><argument_list pos:line="385" pos:column="39">(<argument><expr><name pos:line="385" pos:column="40">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="385" pos:column="46">&amp;</op:operator> <op:operator pos:line="385" pos:column="48">~</op:operator><name pos:line="385" pos:column="49">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="388" pos:column="13">if<condition pos:line="388" pos:column="15">(
                <expr><op:operator pos:line="389" pos:column="17">(</op:operator>
                    <name pos:line="390" pos:column="21">currentState</name> <op:operator pos:line="390" pos:column="34">==</op:operator> <name pos:line="390" pos:column="37">SCE_MAGIK_CONTAINER</name> <op:operator pos:line="390" pos:column="57">||</op:operator>
                    <name pos:line="391" pos:column="21">currentState</name> <op:operator pos:line="391" pos:column="34">==</op:operator> <name pos:line="391" pos:column="37">SCE_MAGIK_FLOW</name>
                <op:operator pos:line="392" pos:column="17">)</op:operator> <op:operator pos:line="392" pos:column="19">&amp;&amp;</op:operator>
                <name pos:line="393" pos:column="17">c</name> <op:operator pos:line="393" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="393" pos:column="22">'_'</lit:literal></expr>)</condition><then pos:line="393" pos:column="26"> <block pos:line="393" pos:column="27">{

                <decl_stmt><decl><type><name pos:line="395" pos:column="17">char</name></type> <name><name pos:line="395" pos:column="22">keyword</name><index pos:line="395" pos:column="29">[<expr><lit:literal type="number" pos:line="395" pos:column="30">50</lit:literal></expr>]</index></name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="396" pos:column="17">memset</name><argument_list pos:line="396" pos:column="23">(<argument><expr><name pos:line="396" pos:column="24">keyword</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="396" pos:column="33">'\0'</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="396" pos:column="39">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:line="398" pos:column="17">for(
                    <init><decl><type><name pos:line="399" pos:column="21">int</name></type> <name pos:line="399" pos:column="25">scanPosition</name> <init pos:line="399" pos:column="38">= <expr><lit:literal type="number" pos:line="399" pos:column="40">0</lit:literal></expr></init></decl>;</init>
                    <condition><expr><name pos:line="400" pos:column="21">scanPosition</name> <op:operator pos:line="400" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="400" pos:column="36">50</lit:literal></expr>;</condition>
                    <incr><expr><name pos:line="401" pos:column="21">scanPosition</name><op:operator pos:line="401" pos:column="33">++</op:operator></expr></incr>) <block pos:line="401" pos:column="37">{
                    <decl_stmt><decl><type><name pos:line="402" pos:column="21">char</name></type> <name pos:line="402" pos:column="26">keywordChar</name> <init pos:line="402" pos:column="38">= <expr><call><name><name pos:line="402" pos:column="40">static_cast</name><argument_list pos:line="402" pos:column="51">&lt;<argument><expr><name pos:line="402" pos:column="52">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="402" pos:column="57">(
                        <argument><expr><call><name pos:line="403" pos:column="25">tolower</name><argument_list pos:line="403" pos:column="32">(<argument><expr><call><name><name pos:line="403" pos:column="33">styler</name><op:operator pos:line="403" pos:column="39">.</op:operator><name pos:line="403" pos:column="40">SafeGetCharAt</name></name><argument_list pos:line="403" pos:column="53">(
                            <argument><expr><name pos:line="404" pos:column="29">scanPosition</name> <op:operator pos:line="404" pos:column="42">+</op:operator>
                                <name pos:line="405" pos:column="33">currentPos</name> <op:operator pos:line="405" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="405" pos:column="46">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="405" pos:column="49">' '</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="406" pos:column="21">if<condition pos:line="406" pos:column="23">(<expr><call><name pos:line="406" pos:column="24">IsAlpha</name><argument_list pos:line="406" pos:column="31">(<argument><expr><name pos:line="406" pos:column="32">keywordChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="406" pos:column="45"> <block pos:line="406" pos:column="46">{
                        <expr_stmt><expr><name><name pos:line="407" pos:column="25">keyword</name><index pos:line="407" pos:column="32">[<expr><name pos:line="407" pos:column="33">scanPosition</name></expr>]</index></name> <op:operator pos:line="407" pos:column="47">=</op:operator> <name pos:line="407" pos:column="49">keywordChar</name></expr>;</expr_stmt>
                    }</block></then> <else pos:line="408" pos:column="23">else <block pos:line="408" pos:column="28">{
                        <break pos:line="409" pos:column="25">break;</break>
                    }</block></else></if>
                }</block></for>

                <if pos:line="413" pos:column="17">if<condition pos:line="413" pos:column="19">(<expr><call><name pos:line="413" pos:column="20">IsFoldingContainer</name><argument_list pos:line="413" pos:column="38">(<argument><expr><name pos:line="413" pos:column="39">foldingElements</name></expr></argument>, <argument><expr><name pos:line="413" pos:column="56">keyword</name></expr></argument>)</argument_list></call> <op:operator pos:line="413" pos:column="65">&gt;</op:operator> <lit:literal type="number" pos:line="413" pos:column="67">0</lit:literal></expr>)</condition><then pos:line="413" pos:column="69"> <block pos:line="413" pos:column="70">{
                    <expr_stmt><expr><call><name><name pos:line="414" pos:column="21">styler</name><op:operator pos:line="414" pos:column="27">.</op:operator><name pos:line="414" pos:column="28">SetLevel</name></name><argument_list pos:line="414" pos:column="36">(
                        <argument><expr><name pos:line="415" pos:column="25">line</name></expr></argument>,
                        <argument><expr><call><name><name pos:line="416" pos:column="25">styler</name><op:operator pos:line="416" pos:column="31">.</op:operator><name pos:line="416" pos:column="32">LevelAt</name></name><argument_list pos:line="416" pos:column="39">(<argument><expr><name pos:line="416" pos:column="40">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="416" pos:column="46">|</op:operator> <name pos:line="416" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="417" pos:column="21">level</name><op:operator pos:line="417" pos:column="26">++</op:operator></expr>;</expr_stmt>
                }</block></then> <else pos:line="418" pos:column="19">else <if pos:line="418" pos:column="24">if<condition pos:line="418" pos:column="26">(<expr><call><name pos:line="418" pos:column="27">IsFoldingContainer</name><argument_list pos:line="418" pos:column="45">(<argument><expr><name pos:line="418" pos:column="46">foldingElements</name></expr></argument>, <argument><expr><name pos:line="418" pos:column="63">keyword</name></expr></argument>)</argument_list></call> <op:operator pos:line="418" pos:column="72">&lt;</op:operator> <lit:literal type="number" pos:line="418" pos:column="74">0</lit:literal></expr>)</condition><then pos:line="418" pos:column="76"> <block pos:line="418" pos:column="77">{
                    <expr_stmt><expr><call><name><name pos:line="419" pos:column="21">styler</name><op:operator pos:line="419" pos:column="27">.</op:operator><name pos:line="419" pos:column="28">SetLevel</name></name><argument_list pos:line="419" pos:column="36">(<argument><expr><name pos:line="419" pos:column="37">line</name></expr></argument>, <argument><expr><call><name><name pos:line="419" pos:column="43">styler</name><op:operator pos:line="419" pos:column="49">.</op:operator><name pos:line="419" pos:column="50">LevelAt</name></name><argument_list pos:line="419" pos:column="57">(<argument><expr><name pos:line="419" pos:column="58">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="420" pos:column="21">level</name><op:operator pos:line="420" pos:column="26">--</op:operator></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></then></if>

            <if pos:line="424" pos:column="13">if<condition pos:line="424" pos:column="15">(
                <expr><name pos:line="425" pos:column="17">compact</name> <op:operator pos:line="425" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="425" pos:column="28">(</op:operator>
                    <name pos:line="426" pos:column="21">currentState</name> <op:operator pos:line="426" pos:column="34">==</op:operator> <name pos:line="426" pos:column="37">SCE_MAGIK_BRACE_BLOCK</name> <op:operator pos:line="426" pos:column="59">||</op:operator>
                    <name pos:line="427" pos:column="21">currentState</name> <op:operator pos:line="427" pos:column="34">==</op:operator> <name pos:line="427" pos:column="37">SCE_MAGIK_BRACKET_BLOCK</name> <op:operator pos:line="427" pos:column="61">||</op:operator>
                    <name pos:line="428" pos:column="21">currentState</name> <op:operator pos:line="428" pos:column="34">==</op:operator> <name pos:line="428" pos:column="37">SCE_MAGIK_SQBRACKET_BLOCK</name><op:operator pos:line="428" pos:column="62">)</op:operator></expr>)</condition><then pos:line="428" pos:column="64"> <block pos:line="428" pos:column="65">{
                <if pos:line="429" pos:column="17">if<condition pos:line="429" pos:column="19">(<expr><name pos:line="429" pos:column="20">c</name> <op:operator pos:line="429" pos:column="22">==</op:operator> <lit:literal type="char" pos:line="429" pos:column="25">'{'</lit:literal> <op:operator pos:line="429" pos:column="29">||</op:operator> <name pos:line="429" pos:column="32">c</name> <op:operator pos:line="429" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="429" pos:column="37">'['</lit:literal> <op:operator pos:line="429" pos:column="41">||</op:operator> <name pos:line="429" pos:column="44">c</name> <op:operator pos:line="429" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="429" pos:column="49">'('</lit:literal></expr>)</condition><then pos:line="429" pos:column="53"> <block pos:line="429" pos:column="54">{
                    <expr_stmt><expr><call><name><name pos:line="430" pos:column="21">styler</name><op:operator pos:line="430" pos:column="27">.</op:operator><name pos:line="430" pos:column="28">SetLevel</name></name><argument_list pos:line="430" pos:column="36">(
                        <argument><expr><name pos:line="431" pos:column="25">line</name></expr></argument>,
                        <argument><expr><call><name><name pos:line="432" pos:column="25">styler</name><op:operator pos:line="432" pos:column="31">.</op:operator><name pos:line="432" pos:column="32">LevelAt</name></name><argument_list pos:line="432" pos:column="39">(<argument><expr><name pos:line="432" pos:column="40">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="432" pos:column="46">|</op:operator> <name pos:line="432" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="433" pos:column="21">level</name><op:operator pos:line="433" pos:column="26">++</op:operator></expr>;</expr_stmt>
                }</block></then> <else pos:line="434" pos:column="19">else <if pos:line="434" pos:column="24">if<condition pos:line="434" pos:column="26">(<expr><name pos:line="434" pos:column="27">c</name> <op:operator pos:line="434" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="434" pos:column="32">'}'</lit:literal> <op:operator pos:line="434" pos:column="36">||</op:operator> <name pos:line="434" pos:column="39">c</name> <op:operator pos:line="434" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="434" pos:column="44">']'</lit:literal> <op:operator pos:line="434" pos:column="48">||</op:operator> <name pos:line="434" pos:column="51">c</name> <op:operator pos:line="434" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="434" pos:column="56">')'</lit:literal></expr>)</condition><then pos:line="434" pos:column="60"> <block pos:line="434" pos:column="61">{
                    <expr_stmt><expr><call><name><name pos:line="435" pos:column="21">styler</name><op:operator pos:line="435" pos:column="27">.</op:operator><name pos:line="435" pos:column="28">SetLevel</name></name><argument_list pos:line="435" pos:column="36">(<argument><expr><name pos:line="435" pos:column="37">line</name></expr></argument>, <argument><expr><call><name><name pos:line="435" pos:column="43">styler</name><op:operator pos:line="435" pos:column="49">.</op:operator><name pos:line="435" pos:column="50">LevelAt</name></name><argument_list pos:line="435" pos:column="57">(<argument><expr><name pos:line="435" pos:column="58">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="436" pos:column="21">level</name><op:operator pos:line="436" pos:column="26">--</op:operator></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></then></if>
        }</block></for>

}</block></function>

<comment type="block" format="doxygen" pos:line="443" pos:column="1">/**
 * Injecting the module
 */</comment>
<decl_stmt><decl><type><name pos:line="446" pos:column="1">LexerModule</name></type> <name pos:line="446" pos:column="13">lmMagikSF</name><argument_list pos:line="446" pos:column="22">(
    <argument><expr><name pos:line="447" pos:column="5">SCLEX_MAGIK</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="18">ColouriseMagikDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="447" pos:column="37">"magiksf"</lit:literal></expr></argument>, <argument><expr><name pos:line="447" pos:column="48">FoldMagikDoc</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="62">magikWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
