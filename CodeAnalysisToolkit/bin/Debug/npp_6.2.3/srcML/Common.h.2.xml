<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\Common\Common.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">M30_IDE_COMMUN_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">M30_IDE_COMMUN_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier pos:line="32" pos:column="1">const</specifier> <name pos:line="32" pos:column="7">bool</name></type> <name pos:line="32" pos:column="12">dirUp</name> <init pos:line="32" pos:column="18">= <expr><lit:literal type="boolean" pos:line="32" pos:column="20">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="33" pos:column="1">const</specifier> <name pos:line="33" pos:column="7">bool</name></type> <name pos:line="33" pos:column="12">dirDown</name> <init pos:line="33" pos:column="20">= <expr><lit:literal type="boolean" pos:line="33" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">NPP_CP_WIN_1252</name></cpp:macro>           <cpp:value pos:line="35" pos:column="35">1252</cpp:value></cpp:define>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">NPP_CP_DOS_437</name></cpp:macro>            <cpp:value pos:line="36" pos:column="35">437</cpp:value></cpp:define>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">NPP_CP_BIG5</name></cpp:macro>               <cpp:value pos:line="37" pos:column="35">950</cpp:value></cpp:define>

<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">LINKTRIGGERED</name></cpp:macro> <cpp:value pos:line="39" pos:column="23">WM_USER+555</cpp:value></cpp:define>

<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef</cpp:directive> <name pos:line="41" pos:column="8">UNICODE</name></cpp:ifdef>
	<cpp:define pos:line="42" pos:column="9">#<cpp:directive pos:line="42" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="42" pos:column="17">NppMainEntry</name></cpp:macro> <cpp:value pos:line="42" pos:column="30">wWinMain</cpp:value></cpp:define>
	<cpp:define pos:line="43" pos:column="9">#<cpp:directive pos:line="43" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="43" pos:column="17">generic_strtol</name></cpp:macro> <cpp:value pos:line="43" pos:column="32">wcstol</cpp:value></cpp:define>
	<cpp:define pos:line="44" pos:column="9">#<cpp:directive pos:line="44" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="44" pos:column="17">generic_strncpy</name></cpp:macro> <cpp:value pos:line="44" pos:column="33">wcsncpy</cpp:value></cpp:define>
	<cpp:define pos:line="45" pos:column="9">#<cpp:directive pos:line="45" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="45" pos:column="17">generic_stricmp</name></cpp:macro> <cpp:value pos:line="45" pos:column="33">wcsicmp</cpp:value></cpp:define>
	<cpp:define pos:line="46" pos:column="9">#<cpp:directive pos:line="46" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="46" pos:column="17">generic_strncmp</name></cpp:macro> <cpp:value pos:line="46" pos:column="33">wcsncmp</cpp:value></cpp:define>
	<cpp:define pos:line="47" pos:column="9">#<cpp:directive pos:line="47" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="47" pos:column="17">generic_strnicmp</name></cpp:macro> <cpp:value pos:line="47" pos:column="34">wcsnicmp</cpp:value></cpp:define>
	<cpp:define pos:line="48" pos:column="9">#<cpp:directive pos:line="48" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="48" pos:column="17">generic_strncat</name></cpp:macro> <cpp:value pos:line="48" pos:column="33">wcsncat</cpp:value></cpp:define>
	<cpp:define pos:line="49" pos:column="9">#<cpp:directive pos:line="49" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="49" pos:column="17">generic_strchr</name></cpp:macro> <cpp:value pos:line="49" pos:column="32">wcschr</cpp:value></cpp:define>
	<cpp:define pos:line="50" pos:column="9">#<cpp:directive pos:line="50" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="50" pos:column="17">generic_atoi</name></cpp:macro> <cpp:value pos:line="50" pos:column="30">_wtoi</cpp:value></cpp:define>
	<cpp:define pos:line="51" pos:column="9">#<cpp:directive pos:line="51" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="51" pos:column="17">generic_itoa</name></cpp:macro> <cpp:value pos:line="51" pos:column="30">_itow</cpp:value></cpp:define>
	<cpp:define pos:line="52" pos:column="9">#<cpp:directive pos:line="52" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="52" pos:column="17">generic_atof</name></cpp:macro> <cpp:value pos:line="52" pos:column="30">_wtof</cpp:value></cpp:define>
	<cpp:define pos:line="53" pos:column="9">#<cpp:directive pos:line="53" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="53" pos:column="17">generic_strtok</name></cpp:macro> <cpp:value pos:line="53" pos:column="32">wcstok</cpp:value></cpp:define>
	<cpp:define pos:line="54" pos:column="9">#<cpp:directive pos:line="54" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="54" pos:column="17">generic_strftime</name></cpp:macro> <cpp:value pos:line="54" pos:column="34">wcsftime</cpp:value></cpp:define>
	<cpp:define pos:line="55" pos:column="9">#<cpp:directive pos:line="55" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="55" pos:column="17">generic_fprintf</name></cpp:macro> <cpp:value pos:line="55" pos:column="33">fwprintf</cpp:value></cpp:define>
	<cpp:define pos:line="56" pos:column="9">#<cpp:directive pos:line="56" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="17">generic_sprintf</name></cpp:macro> <cpp:value pos:line="56" pos:column="33">swprintf</cpp:value></cpp:define>
	<cpp:define pos:line="57" pos:column="9">#<cpp:directive pos:line="57" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="57" pos:column="17">generic_sscanf</name></cpp:macro> <cpp:value pos:line="57" pos:column="32">swscanf</cpp:value></cpp:define>
	<cpp:define pos:line="58" pos:column="9">#<cpp:directive pos:line="58" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="58" pos:column="17">generic_fopen</name></cpp:macro> <cpp:value pos:line="58" pos:column="31">_wfopen</cpp:value></cpp:define>
	<cpp:define pos:line="59" pos:column="9">#<cpp:directive pos:line="59" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="59" pos:column="17">generic_fgets</name></cpp:macro> <cpp:value pos:line="59" pos:column="31">fgetws</cpp:value></cpp:define>
	<cpp:define pos:line="60" pos:column="9">#<cpp:directive pos:line="60" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="60" pos:column="17">generic_stat</name></cpp:macro> <cpp:value pos:line="60" pos:column="30">_wstat</cpp:value></cpp:define>
	<cpp:define pos:line="61" pos:column="9">#<cpp:directive pos:line="61" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="61" pos:column="17">generic_sprintf</name></cpp:macro> <cpp:value pos:line="61" pos:column="33">swprintf</cpp:value></cpp:define>
	<cpp:define pos:line="62" pos:column="9">#<cpp:directive pos:line="62" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="62" pos:column="17">COPYDATA_FILENAMES</name></cpp:macro> <cpp:value pos:line="62" pos:column="36">COPYDATA_FILENAMESW</cpp:value></cpp:define>
<cpp:else pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">else</cpp:directive></cpp:else>
	<cpp:define pos:line="64" pos:column="9">#<cpp:directive pos:line="64" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="64" pos:column="17">NppMainEntry</name></cpp:macro> <cpp:value pos:line="64" pos:column="30">WinMain</cpp:value></cpp:define>
	<cpp:define pos:line="65" pos:column="9">#<cpp:directive pos:line="65" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="65" pos:column="17">generic_strtol</name></cpp:macro> <cpp:value pos:line="65" pos:column="32">strtol</cpp:value></cpp:define>
	<cpp:define pos:line="66" pos:column="9">#<cpp:directive pos:line="66" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="66" pos:column="17">generic_strncpy</name></cpp:macro> <cpp:value pos:line="66" pos:column="33">strncpy</cpp:value></cpp:define>
	<cpp:define pos:line="67" pos:column="9">#<cpp:directive pos:line="67" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="67" pos:column="17">generic_stricmp</name></cpp:macro> <cpp:value pos:line="67" pos:column="33">stricmp</cpp:value></cpp:define>
	<cpp:define pos:line="68" pos:column="9">#<cpp:directive pos:line="68" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="68" pos:column="17">generic_strncmp</name></cpp:macro> <cpp:value pos:line="68" pos:column="33">strncmp</cpp:value></cpp:define>
	<cpp:define pos:line="69" pos:column="9">#<cpp:directive pos:line="69" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="69" pos:column="17">generic_strnicmp</name></cpp:macro> <cpp:value pos:line="69" pos:column="34">strnicmp</cpp:value></cpp:define>
	<cpp:define pos:line="70" pos:column="9">#<cpp:directive pos:line="70" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="70" pos:column="17">generic_strncat</name></cpp:macro> <cpp:value pos:line="70" pos:column="33">strncat</cpp:value></cpp:define>
	<cpp:define pos:line="71" pos:column="9">#<cpp:directive pos:line="71" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="71" pos:column="17">generic_strchr</name></cpp:macro> <cpp:value pos:line="71" pos:column="32">strchr</cpp:value></cpp:define>
	<cpp:define pos:line="72" pos:column="9">#<cpp:directive pos:line="72" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="72" pos:column="17">generic_atoi</name></cpp:macro> <cpp:value pos:line="72" pos:column="30">atoi</cpp:value></cpp:define>
	<cpp:define pos:line="73" pos:column="9">#<cpp:directive pos:line="73" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="73" pos:column="17">generic_itoa</name></cpp:macro> <cpp:value pos:line="73" pos:column="30">itoa</cpp:value></cpp:define>
	<cpp:define pos:line="74" pos:column="9">#<cpp:directive pos:line="74" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="74" pos:column="17">generic_atof</name></cpp:macro> <cpp:value pos:line="74" pos:column="30">atof</cpp:value></cpp:define>
	<cpp:define pos:line="75" pos:column="9">#<cpp:directive pos:line="75" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="75" pos:column="17">generic_strtok</name></cpp:macro> <cpp:value pos:line="75" pos:column="32">strtok</cpp:value></cpp:define>
	<cpp:define pos:line="76" pos:column="9">#<cpp:directive pos:line="76" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="76" pos:column="17">generic_strftime</name></cpp:macro> <cpp:value pos:line="76" pos:column="34">strftime</cpp:value></cpp:define>
	<cpp:define pos:line="77" pos:column="9">#<cpp:directive pos:line="77" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="77" pos:column="17">generic_fprintf</name></cpp:macro> <cpp:value pos:line="77" pos:column="33">fprintf</cpp:value></cpp:define>
	<cpp:define pos:line="78" pos:column="9">#<cpp:directive pos:line="78" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="78" pos:column="17">generic_sprintf</name></cpp:macro> <cpp:value pos:line="78" pos:column="33">sprintf</cpp:value></cpp:define>
	<cpp:define pos:line="79" pos:column="9">#<cpp:directive pos:line="79" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="79" pos:column="17">generic_sscanf</name></cpp:macro> <cpp:value pos:line="79" pos:column="32">sscanf</cpp:value></cpp:define>
	<cpp:define pos:line="80" pos:column="9">#<cpp:directive pos:line="80" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="80" pos:column="17">generic_fopen</name></cpp:macro> <cpp:value pos:line="80" pos:column="31">fopen</cpp:value></cpp:define>
	<cpp:define pos:line="81" pos:column="9">#<cpp:directive pos:line="81" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="81" pos:column="17">generic_fgets</name></cpp:macro> <cpp:value pos:line="81" pos:column="31">fgets</cpp:value></cpp:define>
	<cpp:define pos:line="82" pos:column="9">#<cpp:directive pos:line="82" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="82" pos:column="17">generic_stat</name></cpp:macro> <cpp:value pos:line="82" pos:column="30">_stat</cpp:value></cpp:define>
	<cpp:define pos:line="83" pos:column="9">#<cpp:directive pos:line="83" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="83" pos:column="17">generic_sprintf</name></cpp:macro> <cpp:value pos:line="83" pos:column="33">sprintf</cpp:value></cpp:define>
	<cpp:define pos:line="84" pos:column="9">#<cpp:directive pos:line="84" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="84" pos:column="17">COPYDATA_FILENAMES</name></cpp:macro> <cpp:value pos:line="84" pos:column="36">COPYDATA_FILENAMESA</cpp:value></cpp:define>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif</cpp:directive></cpp:endif>

<typedef pos:line="87" pos:column="1">typedef <type><name><name pos:line="87" pos:column="9">std</name><op:operator pos:line="87" pos:column="12">::</op:operator><name><name pos:line="87" pos:column="14">basic_string</name><argument_list pos:line="87" pos:column="26">&lt;<argument><expr><name pos:line="87" pos:column="27">TCHAR</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="87" pos:column="34">generic_string</name>;</typedef>

<function_decl><type><name pos:line="89" pos:column="1">void</name></type> <name pos:line="89" pos:column="6">folderBrowser</name><parameter_list pos:line="89" pos:column="19">(<param><decl><type><name pos:line="89" pos:column="20">HWND</name></type> <name pos:line="89" pos:column="25">parent</name></decl></param>, <param><decl><type><name pos:line="89" pos:column="33">int</name></type> <name pos:line="89" pos:column="37">outputCtrlID</name></decl></param>, <param><decl><type><specifier pos:line="89" pos:column="51">const</specifier> <name pos:line="89" pos:column="57">TCHAR</name> <type:modifier pos:line="89" pos:column="63">*</type:modifier></type><name pos:line="89" pos:column="64">defaultStr</name> <init pos:line="89" pos:column="75">= <expr><name pos:line="89" pos:column="77">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="90" pos:column="1">generic_string</name></type> <name pos:line="90" pos:column="16">getFolderName</name><parameter_list pos:line="90" pos:column="29">(<param><decl><type><name pos:line="90" pos:column="30">HWND</name></type> <name pos:line="90" pos:column="35">parent</name></decl></param>, <param><decl><type><specifier pos:line="90" pos:column="43">const</specifier> <name pos:line="90" pos:column="49">TCHAR</name> <type:modifier pos:line="90" pos:column="55">*</type:modifier></type><name pos:line="90" pos:column="56">defaultDir</name> <init pos:line="90" pos:column="67">= <expr><name pos:line="90" pos:column="69">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name pos:line="92" pos:column="1">void</name></type> <name pos:line="92" pos:column="6">printInt</name><parameter_list pos:line="92" pos:column="14">(<param><decl><type><name pos:line="92" pos:column="15">int</name></type> <name pos:line="92" pos:column="19">int2print</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="93" pos:column="1">void</name></type> <name pos:line="93" pos:column="6">printStr</name><parameter_list pos:line="93" pos:column="14">(<param><decl><type><specifier pos:line="93" pos:column="15">const</specifier> <name pos:line="93" pos:column="21">TCHAR</name> <type:modifier pos:line="93" pos:column="27">*</type:modifier></type><name pos:line="93" pos:column="28">str2print</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name pos:line="95" pos:column="1">void</name></type> <name pos:line="95" pos:column="6">writeLog</name><parameter_list pos:line="95" pos:column="14">(<param><decl><type><specifier pos:line="95" pos:column="15">const</specifier> <name pos:line="95" pos:column="21">TCHAR</name> <type:modifier pos:line="95" pos:column="27">*</type:modifier></type><name pos:line="95" pos:column="28">logFileName</name></decl></param>, <param><decl><type><specifier pos:line="95" pos:column="41">const</specifier> <name pos:line="95" pos:column="47">char</name> <type:modifier pos:line="95" pos:column="52">*</type:modifier></type><name pos:line="95" pos:column="53">log2write</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="96" pos:column="1">int</name></type> <name pos:line="96" pos:column="5">filter</name><parameter_list pos:line="96" pos:column="11">(<param><decl><type><name pos:line="96" pos:column="12">unsigned</name> <name pos:line="96" pos:column="21">int</name></type> <name pos:line="96" pos:column="25">code</name></decl></param>, <param><decl><type pos:line="96" pos:column="31">struct <name pos:line="96" pos:column="38">_EXCEPTION_POINTERS</name> <type:modifier pos:line="96" pos:column="58">*</type:modifier></type><name pos:line="96" pos:column="59">ep</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="97" pos:column="1">generic_string</name></type> <name pos:line="97" pos:column="16">purgeMenuItemString</name><parameter_list pos:line="97" pos:column="35">(<param><decl><type><specifier pos:line="97" pos:column="36">const</specifier> <name pos:line="97" pos:column="42">TCHAR</name> <type:modifier pos:line="97" pos:column="48">*</type:modifier></type> <name pos:line="97" pos:column="50">menuItemStr</name></decl></param>, <param><decl><type><name pos:line="97" pos:column="63">bool</name></type> <name pos:line="97" pos:column="68">keepAmpersand</name> <init pos:line="97" pos:column="82">= <expr><lit:literal type="boolean" pos:line="97" pos:column="84">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name><name pos:line="98" pos:column="1">std</name><op:operator pos:line="98" pos:column="4">::</op:operator><name><name pos:line="98" pos:column="6">vector</name><argument_list pos:line="98" pos:column="12">&lt;<argument><expr><name pos:line="98" pos:column="13">generic_string</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="98" pos:column="29">tokenizeString</name><parameter_list pos:line="98" pos:column="43">(<param><decl><type><specifier pos:line="98" pos:column="44">const</specifier> <name pos:line="98" pos:column="50">generic_string</name> <type:modifier pos:line="98" pos:column="65">&amp;</type:modifier></type> <name pos:line="98" pos:column="67">tokenString</name></decl></param>, <param><decl><type><specifier pos:line="98" pos:column="80">const</specifier> <name pos:line="98" pos:column="86">char</name></type> <name pos:line="98" pos:column="91">delim</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name pos:line="100" pos:column="1">void</name></type> <name pos:line="100" pos:column="6">ClientRectToScreenRect</name><parameter_list pos:line="100" pos:column="28">(<param><decl><type><name pos:line="100" pos:column="29">HWND</name></type> <name pos:line="100" pos:column="34">hWnd</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="40">RECT</name><type:modifier pos:line="100" pos:column="44">*</type:modifier></type> <name pos:line="100" pos:column="46">rect</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="101" pos:column="1">void</name></type> <name pos:line="101" pos:column="6">ScreenRectToClientRect</name><parameter_list pos:line="101" pos:column="28">(<param><decl><type><name pos:line="101" pos:column="29">HWND</name></type> <name pos:line="101" pos:column="34">hWnd</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="40">RECT</name><type:modifier pos:line="101" pos:column="44">*</type:modifier></type> <name pos:line="101" pos:column="46">rect</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name><name pos:line="103" pos:column="1">std</name><op:operator pos:line="103" pos:column="4">::</op:operator><name pos:line="103" pos:column="6">wstring</name></name></type> <name pos:line="103" pos:column="14">string2wstring</name><parameter_list pos:line="103" pos:column="28">(<param><decl><type><specifier pos:line="103" pos:column="29">const</specifier> <name><name pos:line="103" pos:column="35">std</name><op:operator pos:line="103" pos:column="38">::</op:operator><name pos:line="103" pos:column="40">string</name></name> <type:modifier pos:line="103" pos:column="47">&amp;</type:modifier></type> <name pos:line="103" pos:column="49">rString</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="58">UINT</name></type> <name pos:line="103" pos:column="63">codepage</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name><name pos:line="104" pos:column="1">std</name><op:operator pos:line="104" pos:column="4">::</op:operator><name pos:line="104" pos:column="6">string</name></name></type> <name pos:line="104" pos:column="13">wstring2string</name><parameter_list pos:line="104" pos:column="27">(<param><decl><type><specifier pos:line="104" pos:column="28">const</specifier> <name><name pos:line="104" pos:column="34">std</name><op:operator pos:line="104" pos:column="37">::</op:operator><name pos:line="104" pos:column="39">wstring</name></name> <type:modifier pos:line="104" pos:column="47">&amp;</type:modifier></type> <name pos:line="104" pos:column="49">rwString</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="59">UINT</name></type> <name pos:line="104" pos:column="64">codepage</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="105" pos:column="1">bool</name></type> <name pos:line="105" pos:column="6">isInList</name><parameter_list pos:line="105" pos:column="14">(<param><decl><type><specifier pos:line="105" pos:column="15">const</specifier> <name pos:line="105" pos:column="21">TCHAR</name> <type:modifier pos:line="105" pos:column="27">*</type:modifier></type><name pos:line="105" pos:column="28">token</name></decl></param>, <param><decl><type><specifier pos:line="105" pos:column="35">const</specifier> <name pos:line="105" pos:column="41">TCHAR</name> <type:modifier pos:line="105" pos:column="47">*</type:modifier></type><name pos:line="105" pos:column="48">list</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="106" pos:column="1">generic_string</name></type> <name pos:line="106" pos:column="16">BuildMenuFileName</name><parameter_list pos:line="106" pos:column="33">(<param><decl><type><name pos:line="106" pos:column="34">int</name></type> <name pos:line="106" pos:column="38">filenameLen</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="51">unsigned</name> <name pos:line="106" pos:column="60">int</name></type> <name pos:line="106" pos:column="64">pos</name></decl></param>, <param><decl><type><specifier pos:line="106" pos:column="69">const</specifier> <name pos:line="106" pos:column="75">generic_string</name> <type:modifier pos:line="106" pos:column="90">&amp;</type:modifier></type><name pos:line="106" pos:column="91">filename</name></decl></param>)</parameter_list>;</function_decl>

<class pos:line="108" pos:column="1">class <name pos:line="108" pos:column="7">WcharMbcsConvertor</name> <block pos:line="108" pos:column="26">{<private type="default" pos:line="108" pos:column="27">
</private><public pos:line="109" pos:column="1">public:
	<function><type><specifier pos:line="110" pos:column="9">static</specifier> <name pos:line="110" pos:column="16">WcharMbcsConvertor</name> <type:modifier pos:line="110" pos:column="35">*</type:modifier></type> <name pos:line="110" pos:column="37">getInstance</name><parameter_list pos:line="110" pos:column="48">()</parameter_list> <block pos:line="110" pos:column="51">{<return pos:line="110" pos:column="52">return <expr><name pos:line="110" pos:column="59">_pSelf</name></expr>;</return>}</block></function><empty_stmt pos:line="110" pos:column="67">;</empty_stmt>
	<function><type><specifier pos:line="111" pos:column="9">static</specifier> <name pos:line="111" pos:column="16">void</name></type> <name pos:line="111" pos:column="21">destroyInstance</name><parameter_list pos:line="111" pos:column="36">()</parameter_list> <block pos:line="111" pos:column="39">{<expr_stmt><expr><op:operator pos:line="111" pos:column="40">delete</op:operator> <name pos:line="111" pos:column="47">_pSelf</name></expr>;</expr_stmt>}</block></function><empty_stmt pos:line="111" pos:column="55">;</empty_stmt>

	<function_decl><type><specifier pos:line="113" pos:column="9">const</specifier> <name pos:line="113" pos:column="15">wchar_t</name> <type:modifier pos:line="113" pos:column="23">*</type:modifier></type> <name pos:line="113" pos:column="25">char2wchar</name><parameter_list pos:line="113" pos:column="35">(<param><decl><type><specifier pos:line="113" pos:column="36">const</specifier> <name pos:line="113" pos:column="42">char</name> <type:modifier pos:line="113" pos:column="47">*</type:modifier></type><name pos:line="113" pos:column="48">mbStr</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="55">UINT</name></type> <name pos:line="113" pos:column="60">codepage</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="70">int</name></type> <name pos:line="113" pos:column="74">lenIn</name><init pos:line="113" pos:column="79">=<expr><op:operator pos:line="113" pos:column="80">-</op:operator><lit:literal type="number" pos:line="113" pos:column="81">1</lit:literal></expr></init></decl></param>, <name pos:line="113" pos:column="84">int</name> <type:modifier pos:line="113" pos:column="88">*</type:modifier><name pos:line="113" pos:column="89">pLenOut</name><op:operator pos:line="113" pos:column="96">=</op:operator><name pos:line="113" pos:column="97">NULL</name>, <name pos:line="113" pos:column="103">int</name> <type:modifier pos:line="113" pos:column="107">*</type:modifier><name pos:line="113" pos:column="108">pBytesNotProcessed</name><op:operator pos:line="113" pos:column="126">=</op:operator><name pos:line="113" pos:column="127">NULL</name>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="114" pos:column="9">const</specifier> <name pos:line="114" pos:column="15">wchar_t</name> <type:modifier pos:line="114" pos:column="23">*</type:modifier></type> <name pos:line="114" pos:column="25">char2wchar</name><parameter_list pos:line="114" pos:column="35">(<param><decl><type><specifier pos:line="114" pos:column="36">const</specifier> <name pos:line="114" pos:column="42">char</name> <type:modifier pos:line="114" pos:column="47">*</type:modifier></type><name pos:line="114" pos:column="48">mbcs2Convert</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="62">UINT</name></type> <name pos:line="114" pos:column="67">codepage</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="77">int</name> <type:modifier pos:line="114" pos:column="81">*</type:modifier></type><name pos:line="114" pos:column="82">mstart</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="90">int</name> <type:modifier pos:line="114" pos:column="94">*</type:modifier></type><name pos:line="114" pos:column="95">mend</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="115" pos:column="9">const</specifier> <name pos:line="115" pos:column="15">char</name> <type:modifier pos:line="115" pos:column="20">*</type:modifier></type> <name pos:line="115" pos:column="22">wchar2char</name><parameter_list pos:line="115" pos:column="32">(<param><decl><type><specifier pos:line="115" pos:column="33">const</specifier> <name pos:line="115" pos:column="39">wchar_t</name> <type:modifier pos:line="115" pos:column="47">*</type:modifier></type><name pos:line="115" pos:column="48">wcStr</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="55">UINT</name></type> <name pos:line="115" pos:column="60">codepage</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="70">int</name></type> <name pos:line="115" pos:column="74">lenIn</name><init pos:line="115" pos:column="79">=<expr><op:operator pos:line="115" pos:column="80">-</op:operator><lit:literal type="number" pos:line="115" pos:column="81">1</lit:literal></expr></init></decl></param>, <name pos:line="115" pos:column="84">int</name> <type:modifier pos:line="115" pos:column="88">*</type:modifier><name pos:line="115" pos:column="89">pLenOut</name><op:operator pos:line="115" pos:column="96">=</op:operator><name pos:line="115" pos:column="97">NULL</name>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="116" pos:column="9">const</specifier> <name pos:line="116" pos:column="15">char</name> <type:modifier pos:line="116" pos:column="20">*</type:modifier></type> <name pos:line="116" pos:column="22">wchar2char</name><parameter_list pos:line="116" pos:column="32">(<param><decl><type><specifier pos:line="116" pos:column="33">const</specifier> <name pos:line="116" pos:column="39">wchar_t</name> <type:modifier pos:line="116" pos:column="47">*</type:modifier></type><name pos:line="116" pos:column="48">wcStr</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="55">UINT</name></type> <name pos:line="116" pos:column="60">codepage</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="70">long</name> <type:modifier pos:line="116" pos:column="75">*</type:modifier></type><name pos:line="116" pos:column="76">mstart</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="84">long</name> <type:modifier pos:line="116" pos:column="89">*</type:modifier></type><name pos:line="116" pos:column="90">mend</name></decl></param>)</parameter_list>;</function_decl>
	
	<function><type><specifier pos:line="118" pos:column="9">const</specifier> <name pos:line="118" pos:column="15">char</name> <type:modifier pos:line="118" pos:column="20">*</type:modifier></type> <name pos:line="118" pos:column="22">encode</name><parameter_list pos:line="118" pos:column="28">(<param><decl><type><name pos:line="118" pos:column="29">UINT</name></type> <name pos:line="118" pos:column="34">fromCodepage</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="48">UINT</name></type> <name pos:line="118" pos:column="53">toCodepage</name></decl></param>, <param><decl><type><specifier pos:line="118" pos:column="65">const</specifier> <name pos:line="118" pos:column="71">char</name> <type:modifier pos:line="118" pos:column="76">*</type:modifier></type><name pos:line="118" pos:column="77">txt2Encode</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="89">int</name></type> <name pos:line="118" pos:column="93">lenIn</name><init pos:line="118" pos:column="98">=<expr><op:operator pos:line="118" pos:column="99">-</op:operator><lit:literal type="number" pos:line="118" pos:column="100">1</lit:literal></expr></init></decl></param>, <name pos:line="118" pos:column="103">int</name> <type:modifier pos:line="118" pos:column="107">*</type:modifier><name pos:line="118" pos:column="108">pLenOut</name><op:operator pos:line="118" pos:column="115">=</op:operator><name pos:line="118" pos:column="116">NULL</name>, <name pos:line="118" pos:column="122">int</name> <type:modifier pos:line="118" pos:column="126">*</type:modifier><name pos:line="118" pos:column="127">pBytesNotProcessed</name><op:operator pos:line="118" pos:column="145">=</op:operator><name pos:line="118" pos:column="146">NULL</name>)</parameter_list> <block pos:line="118" pos:column="152">{
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">int</name></type> <name pos:line="119" pos:column="21">lenWc</name> <init pos:line="119" pos:column="27">= <expr><lit:literal type="number" pos:line="119" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="120" pos:column="9">const</specifier> <name pos:line="120" pos:column="15">wchar_t</name> <type:modifier pos:line="120" pos:column="23">*</type:modifier></type> <name pos:line="120" pos:column="25">strW</name> <init pos:line="120" pos:column="30">= <expr><call><name pos:line="120" pos:column="32">char2wchar</name><argument_list pos:line="120" pos:column="42">(<argument><expr><name pos:line="120" pos:column="43">txt2Encode</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="55">fromCodepage</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="69">lenIn</name></expr></argument>, <argument><expr><op:operator pos:line="120" pos:column="76">&amp;</op:operator><name pos:line="120" pos:column="77">lenWc</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="84">pBytesNotProcessed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return pos:line="121" pos:column="9">return <expr><call><name pos:line="121" pos:column="16">wchar2char</name><argument_list pos:line="121" pos:column="26">(<argument><expr><name pos:line="121" pos:column="27">strW</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="33">toCodepage</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="45">lenWc</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="52">pLenOut</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function><empty_stmt pos:line="122" pos:column="6">;</empty_stmt>

</public><protected pos:line="124" pos:column="1">protected:
	<constructor><name pos:line="125" pos:column="9">WcharMbcsConvertor</name><parameter_list pos:line="125" pos:column="27">()</parameter_list> <block pos:line="125" pos:column="30">{
	}</block></constructor><empty_stmt pos:line="126" pos:column="10">;</empty_stmt>
	<destructor><name pos:line="127" pos:column="9">~<name pos:line="127" pos:column="10">WcharMbcsConvertor</name></name><parameter_list pos:line="127" pos:column="28">()</parameter_list> <block pos:line="127" pos:column="31">{
	}</block></destructor><empty_stmt pos:line="128" pos:column="10">;</empty_stmt>
	<decl_stmt><decl><type><specifier pos:line="129" pos:column="9">static</specifier> <name pos:line="129" pos:column="16">WcharMbcsConvertor</name> <type:modifier pos:line="129" pos:column="35">*</type:modifier></type> <name pos:line="129" pos:column="37">_pSelf</name></decl>;</decl_stmt>

	<template pos:line="131" pos:column="9">template <parameter_list pos:line="131" pos:column="18">&lt;<param><type><name pos:line="131" pos:column="19">class</name></type> <name pos:line="131" pos:column="25">T</name></param>&gt;</parameter_list>
	<class pos:line="132" pos:column="9">class <name pos:line="132" pos:column="15">StringBuffer</name> <block pos:line="132" pos:column="28">{<private type="default" pos:line="132" pos:column="29">
	</private><public pos:line="133" pos:column="9">public:
		<constructor><name pos:line="134" pos:column="17">StringBuffer</name><parameter_list pos:line="134" pos:column="29">()</parameter_list> <member_list pos:line="134" pos:column="32">: <call><name pos:line="134" pos:column="34">_str</name><argument_list pos:line="134" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="134" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="134" pos:column="41">,</op:operator> <call><name pos:line="134" pos:column="43">_allocLen</name><argument_list pos:line="134" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="134" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="134" pos:column="56">{ }</block></constructor>
		<destructor><name pos:line="135" pos:column="17">~<name pos:line="135" pos:column="18">StringBuffer</name></name><parameter_list pos:line="135" pos:column="30">()</parameter_list> <block pos:line="135" pos:column="33">{ <if pos:line="135" pos:column="35">if<condition pos:line="135" pos:column="37">(<expr><name pos:line="135" pos:column="38">_allocLen</name></expr>)</condition><then pos:line="135" pos:column="48"> <expr_stmt><expr><op:operator pos:line="135" pos:column="49">delete</op:operator> <index pos:line="135" pos:column="56">[]</index> <name pos:line="135" pos:column="59">_str</name></expr>;</expr_stmt></then></if> }</block></destructor>

		<function><type><name pos:line="137" pos:column="17">void</name></type> <name pos:line="137" pos:column="22">sizeTo</name><parameter_list pos:line="137" pos:column="28">(<param><decl><type><name pos:line="137" pos:column="29">size_t</name></type> <name pos:line="137" pos:column="36">size</name></decl></param>)</parameter_list> <block pos:line="137" pos:column="42">{
			<if pos:line="138" pos:column="25">if<condition pos:line="138" pos:column="27">(<expr><name pos:line="138" pos:column="28">_allocLen</name> <op:operator pos:line="138" pos:column="38">&lt;</op:operator> <name pos:line="138" pos:column="40">size</name></expr>)</condition><then pos:line="138" pos:column="45">
			<block pos:line="139" pos:column="25">{
				<if pos:line="140" pos:column="33">if<condition pos:line="140" pos:column="35">(<expr><name pos:line="140" pos:column="36">_allocLen</name></expr>)</condition><then pos:line="140" pos:column="46"> <expr_stmt><expr><op:operator pos:line="140" pos:column="47">delete</op:operator><index pos:line="140" pos:column="53">[]</index> <name pos:line="140" pos:column="56">_str</name></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="141" pos:column="33">_allocLen</name> <op:operator pos:line="141" pos:column="43">=</op:operator> <call><name pos:line="141" pos:column="45">max</name><argument_list pos:line="141" pos:column="48">(<argument><expr><name pos:line="141" pos:column="49">size</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="55">initSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="142" pos:column="33">_str</name> <op:operator pos:line="142" pos:column="38">=</op:operator> <op:operator pos:line="142" pos:column="40">new</op:operator> <name><name pos:line="142" pos:column="44">T</name><index pos:line="142" pos:column="45">[<expr><name pos:line="142" pos:column="46">_allocLen</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></function>
		<function><type><name pos:line="145" pos:column="17">void</name></type> <name pos:line="145" pos:column="22">empty</name><parameter_list pos:line="145" pos:column="27">()</parameter_list> <block pos:line="145" pos:column="30">{
			<decl_stmt><decl><type><specifier pos:line="146" pos:column="25">static</specifier> <name pos:line="146" pos:column="32">T</name></type> <name pos:line="146" pos:column="34">nullStr</name> <init pos:line="146" pos:column="42">= <expr><lit:literal type="number" pos:line="146" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="146" pos:column="47">// routines may return an empty string, with null terminator, without allocating memory; a pointer to this null character will be returned in that case</comment>
			<if pos:line="147" pos:column="25">if<condition pos:line="147" pos:column="27">(<expr><name pos:line="147" pos:column="28">_allocLen</name> <op:operator pos:line="147" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="147" pos:column="41">0</lit:literal></expr>)</condition><then pos:line="147" pos:column="43">
				<expr_stmt><expr><name pos:line="148" pos:column="33">_str</name> <op:operator pos:line="148" pos:column="38">=</op:operator> <op:operator pos:line="148" pos:column="40">&amp;</op:operator><name pos:line="148" pos:column="41">nullStr</name></expr>;</expr_stmt></then>
			<else pos:line="149" pos:column="25">else
				<expr_stmt><expr><name><name pos:line="150" pos:column="33">_str</name><index pos:line="150" pos:column="37">[<expr><lit:literal type="number" pos:line="150" pos:column="38">0</lit:literal></expr>]</index></name> <op:operator pos:line="150" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="150" pos:column="43">0</lit:literal></expr>;</expr_stmt></else></if>
		}</block></function>

		<function><name pos:line="153" pos:column="17">operator T*</name><parameter_list pos:line="153" pos:column="28">()</parameter_list> <block pos:line="153" pos:column="31">{ <return pos:line="153" pos:column="33">return <expr><name pos:line="153" pos:column="40">_str</name></expr>;</return> }</block></function>

	</public><protected pos:line="155" pos:column="9">protected:
		<decl_stmt><decl><type><specifier pos:line="156" pos:column="17">static</specifier> <specifier pos:line="156" pos:column="24">const</specifier> <name pos:line="156" pos:column="30">int</name></type> <name pos:line="156" pos:column="34">initSize</name> <init pos:line="156" pos:column="43">= <expr><lit:literal type="number" pos:line="156" pos:column="45">1024</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="157" pos:column="17">size_t</name></type> <name pos:line="157" pos:column="24">_allocLen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="158" pos:column="17">T</name><type:modifier pos:line="158" pos:column="18">*</type:modifier></type> <name pos:line="158" pos:column="20">_str</name></decl>;</decl_stmt>
	</protected>}</block>;</class></template>

	<decl_stmt><decl><type><name><name pos:line="161" pos:column="9">StringBuffer</name><argument_list pos:line="161" pos:column="21">&lt;<argument><expr><name pos:line="161" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="28">_multiByteStr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="162" pos:column="9">StringBuffer</name><argument_list pos:line="162" pos:column="21">&lt;<argument><expr><name pos:line="162" pos:column="22">wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="162" pos:column="31">_wideCharStr</name></decl>;</decl_stmt>

</protected><private pos:line="164" pos:column="1">private:
	<comment type="line" pos:line="165" pos:column="9">// Since there's no public ctor, we need to void the default assignment operator.</comment>
	<function_decl><type><name pos:line="166" pos:column="9">WcharMbcsConvertor</name><type:modifier pos:line="166" pos:column="27">&amp;</type:modifier></type> <name pos:line="166" pos:column="29">operator=</name> <parameter_list pos:line="166" pos:column="39">(<param><decl><type><specifier pos:line="166" pos:column="40">const</specifier></type> <name pos:line="166" pos:column="46">WcharMbcsConvertor</name><type:modifier pos:line="166" pos:column="64">&amp;</type:modifier></decl></param>)</parameter_list>;</function_decl>

</private>}</block>;</class>

<cpp:define pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="170" pos:column="9">MACRO_RECORDING_IN_PROGRESS</name></cpp:macro> <cpp:value pos:line="170" pos:column="37">1</cpp:value></cpp:define>
<cpp:define pos:line="171" pos:column="1">#<cpp:directive pos:line="171" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="171" pos:column="9">MACRO_RECORDING_HAS_STOPPED</name></cpp:macro> <cpp:value pos:line="171" pos:column="37">2</cpp:value></cpp:define>

<cpp:if pos:line="173" pos:column="1">#<cpp:directive pos:line="173" pos:column="2">if</cpp:directive> <expr><name pos:line="173" pos:column="5">_MSC_VER</name> <op:operator pos:line="173" pos:column="14">&gt;</op:operator> <lit:literal type="number" pos:line="173" pos:column="16">1400</lit:literal></expr></cpp:if> <comment type="line" pos:line="173" pos:column="21">// MS Compiler &gt; VS 2005</comment>
<cpp:define pos:line="174" pos:column="1">#<cpp:directive pos:line="174" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="174" pos:column="9">REBARBAND_SIZE</name></cpp:macro> <cpp:value pos:line="174" pos:column="24">REBARBANDINFO_V3_SIZE</cpp:value></cpp:define>
<cpp:else pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="176" pos:column="1">#<cpp:directive pos:line="176" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="176" pos:column="9">REBARBAND_SIZE</name></cpp:macro> <cpp:value pos:line="176" pos:column="24">sizeof(REBARBANDINFO)</cpp:value></cpp:define>
<cpp:endif pos:line="177" pos:column="1">#<cpp:directive pos:line="177" pos:column="2">endif</cpp:directive></cpp:endif>

<function_decl><type><name pos:line="179" pos:column="1">generic_string</name></type> <name pos:line="179" pos:column="16">PathRemoveFileSpec</name><parameter_list pos:line="179" pos:column="34">(<param><decl><type><name pos:line="179" pos:column="35">generic_string</name> <type:modifier pos:line="179" pos:column="50">&amp;</type:modifier></type> <name pos:line="179" pos:column="52">path</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="180" pos:column="1">generic_string</name></type> <name pos:line="180" pos:column="16">PathAppend</name><parameter_list pos:line="180" pos:column="26">(<param><decl><type><name pos:line="180" pos:column="27">generic_string</name> <type:modifier pos:line="180" pos:column="42">&amp;</type:modifier></type><name pos:line="180" pos:column="43">strDest</name></decl></param>, <param><decl><type><specifier pos:line="180" pos:column="52">const</specifier> <name pos:line="180" pos:column="58">generic_string</name></type> <name pos:line="180" pos:column="73">str2append</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif pos:line="182" pos:column="1">#<cpp:directive pos:line="182" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="182" pos:column="8">//M30_IDE_COMMUN_H</comment>
</unit>
