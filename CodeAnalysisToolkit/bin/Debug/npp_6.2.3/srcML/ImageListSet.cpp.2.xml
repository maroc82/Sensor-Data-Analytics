<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\ImageListSet\ImageListSet.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"ImageListSet.h"</lit:literal></cpp:file></cpp:include>

<function><type><name pos:line="32" pos:column="1">void</name></type> <name><name pos:line="32" pos:column="6">IconList</name><op:operator pos:line="32" pos:column="14">::</op:operator><name pos:line="32" pos:column="16">create</name></name><parameter_list pos:line="32" pos:column="22">(<param><decl><type><name pos:line="32" pos:column="23">HINSTANCE</name></type> <name pos:line="32" pos:column="33">hInst</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="40">int</name></type> <name pos:line="32" pos:column="44">iconSize</name></decl></param>)</parameter_list> 
<block pos:line="33" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">InitCommonControls</name><argument_list pos:line="34" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">_hInst</name> <op:operator pos:line="35" pos:column="16">=</op:operator> <name pos:line="35" pos:column="18">hInst</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="36" pos:column="9">_iconSize</name> <op:operator pos:line="36" pos:column="19">=</op:operator> <name pos:line="36" pos:column="21">iconSize</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name pos:line="37" pos:column="9">_hImglst</name> <op:operator pos:line="37" pos:column="18">=</op:operator> <call><name pos:line="37" pos:column="20">ImageList_Create</name><argument_list pos:line="37" pos:column="36">(<argument><expr><name pos:line="37" pos:column="37">iconSize</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">iconSize</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="57">ILC_COLOR32</name> <op:operator pos:line="37" pos:column="69">|</op:operator> <name pos:line="37" pos:column="71">ILC_MASK</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="37" pos:column="81">0</lit:literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="84">nbMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><op:operator pos:line="38" pos:column="13">!</op:operator><name pos:line="38" pos:column="14">_hImglst</name></expr>)</condition><then pos:line="38" pos:column="23">
		<throw pos:line="39" pos:column="17">throw <expr><call><name><name pos:line="39" pos:column="23">std</name><op:operator pos:line="39" pos:column="26">::</op:operator><name pos:line="39" pos:column="28">runtime_error</name></name><argument_list pos:line="39" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="42">"IconList::create : ImageList_Create() function return null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
}</block></function><empty_stmt pos:line="40" pos:column="2">;</empty_stmt>

<function><type><name pos:line="42" pos:column="1">void</name></type> <name><name pos:line="42" pos:column="6">IconList</name><op:operator pos:line="42" pos:column="14">::</op:operator><name pos:line="42" pos:column="16">create</name></name><parameter_list pos:line="42" pos:column="22">(<param><decl><type><name pos:line="42" pos:column="23">int</name></type> <name pos:line="42" pos:column="27">iconSize</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="37">HINSTANCE</name></type> <name pos:line="42" pos:column="47">hInst</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="54">int</name> <type:modifier pos:line="42" pos:column="58">*</type:modifier></type><name pos:line="42" pos:column="59">iconIDArray</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="72">int</name></type> <name pos:line="42" pos:column="76">iconIDArraySize</name></decl></param>)</parameter_list>
<block pos:line="43" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">create</name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">hInst</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="23">iconSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="45" pos:column="9">_pIconIDArray</name> <op:operator pos:line="45" pos:column="23">=</op:operator> <name pos:line="45" pos:column="25">iconIDArray</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="46" pos:column="9">_iconIDArraySize</name> <op:operator pos:line="46" pos:column="26">=</op:operator> <name pos:line="46" pos:column="28">iconIDArraySize</name></expr>;</expr_stmt>

	<for pos:line="48" pos:column="9">for (<init><decl><type><name pos:line="48" pos:column="14">int</name></type> <name pos:line="48" pos:column="18">i</name> <init pos:line="48" pos:column="20">= <expr><lit:literal type="number" pos:line="48" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="48" pos:column="26">i</name> <op:operator pos:line="48" pos:column="28">&lt;</op:operator> <name pos:line="48" pos:column="30">iconIDArraySize</name></expr> ;</condition> <incr><expr><name pos:line="48" pos:column="48">i</name><op:operator pos:line="48" pos:column="49">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">addIcon</name><argument_list pos:line="49" pos:column="24">(<argument><expr><name><name pos:line="49" pos:column="25">iconIDArray</name><index pos:line="49" pos:column="36">[<expr><name pos:line="49" pos:column="37">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function><empty_stmt pos:line="50" pos:column="2">;</empty_stmt>

<function><type><name pos:line="52" pos:column="1">void</name></type> <name><name pos:line="52" pos:column="6">IconList</name><op:operator pos:line="52" pos:column="14">::</op:operator><name pos:line="52" pos:column="16">addIcon</name></name><parameter_list pos:line="52" pos:column="23">(<param><decl><type><name pos:line="52" pos:column="24">int</name></type> <name pos:line="52" pos:column="28">iconID</name></decl></param>)</parameter_list> <specifier pos:line="52" pos:column="36">const</specifier> 
<block pos:line="53" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">HICON</name></type> <name pos:line="54" pos:column="15">hIcon</name> <init pos:line="54" pos:column="21">= <expr><call><name><op:operator pos:line="54" pos:column="23">::</op:operator><name pos:line="54" pos:column="25">LoadIcon</name></name><argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">_hInst</name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="42">MAKEINTRESOURCE</name><argument_list pos:line="54" pos:column="57">(<argument><expr><name pos:line="54" pos:column="58">iconID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><op:operator pos:line="55" pos:column="13">!</op:operator><name pos:line="55" pos:column="14">hIcon</name></expr>)</condition><then pos:line="55" pos:column="20">
		<throw pos:line="56" pos:column="17">throw <expr><call><name><name pos:line="56" pos:column="23">std</name><op:operator pos:line="56" pos:column="26">::</op:operator><name pos:line="56" pos:column="28">runtime_error</name></name><argument_list pos:line="56" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="42">"IconList::addIcon : LoadIcon() function return null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">ImageList_AddIcon</name><argument_list pos:line="58" pos:column="26">(<argument><expr><name pos:line="58" pos:column="27">_hImglst</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="37">hIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="59" pos:column="9">::</op:operator><name pos:line="59" pos:column="11">DestroyIcon</name></name><argument_list pos:line="59" pos:column="22">(<argument><expr><name pos:line="59" pos:column="23">hIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function><empty_stmt pos:line="60" pos:column="2">;</empty_stmt>

<function><type><name pos:line="62" pos:column="1">bool</name></type> <name><name pos:line="62" pos:column="6">IconList</name><op:operator pos:line="62" pos:column="14">::</op:operator><name pos:line="62" pos:column="16">changeIcon</name></name><parameter_list pos:line="62" pos:column="26">(<param><decl><type><name pos:line="62" pos:column="27">int</name></type> <name pos:line="62" pos:column="31">index</name></decl></param>, <param><decl><type><specifier pos:line="62" pos:column="38">const</specifier> <name pos:line="62" pos:column="44">TCHAR</name> <type:modifier pos:line="62" pos:column="50">*</type:modifier></type><name pos:line="62" pos:column="51">iconLocation</name></decl></param>)</parameter_list> <specifier pos:line="62" pos:column="65">const</specifier>
<block pos:line="63" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">HBITMAP</name></type> <name pos:line="64" pos:column="17">hBmp</name> <init pos:line="64" pos:column="22">= <expr><op:operator pos:line="64" pos:column="24">(</op:operator><name pos:line="64" pos:column="25">HBITMAP</name><op:operator pos:line="64" pos:column="32">)</op:operator><call><name><op:operator pos:line="64" pos:column="33">::</op:operator><name pos:line="64" pos:column="35">LoadImage</name></name><argument_list pos:line="64" pos:column="44">(<argument><expr><name pos:line="64" pos:column="45">_hInst</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="53">iconLocation</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="67">IMAGE_ICON</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="79">_iconSize</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="90">_iconSize</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="101">LR_LOADFROMFILE</name> <op:operator pos:line="64" pos:column="117">|</op:operator> <name pos:line="64" pos:column="119">LR_LOADMAP3DCOLORS</name> <op:operator pos:line="64" pos:column="138">|</op:operator> <name pos:line="64" pos:column="140">LR_LOADTRANSPARENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><op:operator pos:line="65" pos:column="13">!</op:operator><name pos:line="65" pos:column="14">hBmp</name></expr>)</condition><then pos:line="65" pos:column="19">
		<return pos:line="66" pos:column="17">return <expr><lit:literal type="boolean" pos:line="66" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">int</name></type> <name pos:line="67" pos:column="13">i</name> <init pos:line="67" pos:column="15">= <expr><call><name pos:line="67" pos:column="17">ImageList_ReplaceIcon</name><argument_list pos:line="67" pos:column="38">(<argument><expr><name pos:line="67" pos:column="39">_hImglst</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="49">index</name></expr></argument>, <argument><expr><op:operator pos:line="67" pos:column="56">(</op:operator><name pos:line="67" pos:column="57">HICON</name><op:operator pos:line="67" pos:column="62">)</op:operator><name pos:line="67" pos:column="63">hBmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">ImageList_AddMasked</name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">_hImglst</name></expr></argument>, <argument><expr><op:operator pos:line="68" pos:column="39">(</op:operator><name pos:line="68" pos:column="40">HBITMAP</name><op:operator pos:line="68" pos:column="47">)</op:operator><name pos:line="68" pos:column="48">hBmp</name></expr></argument>, <argument><expr><call><name pos:line="68" pos:column="54">RGB</name><argument_list pos:line="68" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="68" pos:column="58">255</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="68" pos:column="62">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="68" pos:column="64">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="69" pos:column="9">::</op:operator><name pos:line="69" pos:column="11">DeleteObject</name></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">hBmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="70" pos:column="9">return <expr><op:operator pos:line="70" pos:column="16">(</op:operator><name pos:line="70" pos:column="17">i</name> <op:operator pos:line="70" pos:column="19">==</op:operator> <name pos:line="70" pos:column="22">index</name><op:operator pos:line="70" pos:column="27">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="73" pos:column="1">void</name></type> <name><name pos:line="73" pos:column="6">IconList</name><op:operator pos:line="73" pos:column="14">::</op:operator><name pos:line="73" pos:column="16">setIconSize</name></name><parameter_list pos:line="73" pos:column="27">(<param><decl><type><name pos:line="73" pos:column="28">int</name></type> <name pos:line="73" pos:column="32">size</name></decl></param>)</parameter_list> <specifier pos:line="73" pos:column="38">const</specifier>
<block pos:line="74" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">ImageList_SetIconSize</name><argument_list pos:line="75" pos:column="30">(<argument><expr><name pos:line="75" pos:column="31">_hImglst</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="41">size</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="47">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="76" pos:column="9">for (<init><decl><type><name pos:line="76" pos:column="14">int</name></type> <name pos:line="76" pos:column="18">i</name> <init pos:line="76" pos:column="20">= <expr><lit:literal type="number" pos:line="76" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="76" pos:column="26">i</name> <op:operator pos:line="76" pos:column="28">&lt;</op:operator> <name pos:line="76" pos:column="30">_iconIDArraySize</name></expr> ;</condition> <incr><expr><name pos:line="76" pos:column="49">i</name><op:operator pos:line="76" pos:column="50">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">addIcon</name><argument_list pos:line="77" pos:column="24">(<argument><expr><name><name pos:line="77" pos:column="25">_pIconIDArray</name><index pos:line="77" pos:column="38">[<expr><name pos:line="77" pos:column="39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>

<function><type><name pos:line="80" pos:column="1">void</name></type> <name><name pos:line="80" pos:column="6">ToolBarIcons</name><op:operator pos:line="80" pos:column="18">::</op:operator><name pos:line="80" pos:column="20">init</name></name><parameter_list pos:line="80" pos:column="24">(<param><decl><type><name pos:line="80" pos:column="25">ToolBarButtonUnit</name> <type:modifier pos:line="80" pos:column="43">*</type:modifier></type><name pos:line="80" pos:column="44">buttonUnitArray</name></decl></param>, <param><decl><type><name pos:line="80" pos:column="61">int</name></type> <name pos:line="80" pos:column="65">arraySize</name></decl></param>)</parameter_list>
<block pos:line="81" pos:column="1">{
	<for pos:line="82" pos:column="9">for (<init><decl><type><name pos:line="82" pos:column="14">int</name></type> <name pos:line="82" pos:column="18">i</name> <init pos:line="82" pos:column="20">= <expr><lit:literal type="number" pos:line="82" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="82" pos:column="26">i</name> <op:operator pos:line="82" pos:column="28">&lt;</op:operator> <name pos:line="82" pos:column="30">arraySize</name></expr> ;</condition> <incr><expr><name pos:line="82" pos:column="42">i</name><op:operator pos:line="82" pos:column="43">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name><name pos:line="83" pos:column="17">_tbiis</name><op:operator pos:line="83" pos:column="23">.</op:operator><name pos:line="83" pos:column="24">push_back</name></name><argument_list pos:line="83" pos:column="33">(<argument><expr><name><name pos:line="83" pos:column="34">buttonUnitArray</name><index pos:line="83" pos:column="49">[<expr><name pos:line="83" pos:column="50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
	<expr_stmt><expr><name pos:line="84" pos:column="9">_nbCmd</name> <op:operator pos:line="84" pos:column="16">=</op:operator> <name pos:line="84" pos:column="18">arraySize</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="87" pos:column="1">void</name></type> <name><name pos:line="87" pos:column="6">ToolBarIcons</name><op:operator pos:line="87" pos:column="18">::</op:operator><name pos:line="87" pos:column="20">reInit</name></name><parameter_list pos:line="87" pos:column="26">(<param><decl><type><name pos:line="87" pos:column="27">int</name></type> <name pos:line="87" pos:column="31">size</name></decl></param>)</parameter_list>
<block pos:line="88" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="89" pos:column="9">ImageList_SetIconSize</name><argument_list pos:line="89" pos:column="30">(<argument><expr><call><name pos:line="89" pos:column="31">getDefaultLst</name><argument_list pos:line="89" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="89" pos:column="48">size</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="90" pos:column="9">ImageList_SetIconSize</name><argument_list pos:line="90" pos:column="30">(<argument><expr><call><name pos:line="90" pos:column="31">getHotLst</name><argument_list pos:line="90" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="90" pos:column="44">size</name></expr></argument>, <argument><expr><name pos:line="90" pos:column="50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="91" pos:column="9">ImageList_SetIconSize</name><argument_list pos:line="91" pos:column="30">(<argument><expr><call><name pos:line="91" pos:column="31">getDisableLst</name><argument_list pos:line="91" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="91" pos:column="48">size</name></expr></argument>, <argument><expr><name pos:line="91" pos:column="54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:line="93" pos:column="9">for (<init><decl><type><name pos:line="93" pos:column="14">int</name></type> <name pos:line="93" pos:column="18">i</name> <init pos:line="93" pos:column="20">= <expr><lit:literal type="number" pos:line="93" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="93" pos:column="26">i</name> <op:operator pos:line="93" pos:column="28">&lt;</op:operator> <call><name pos:line="93" pos:column="30">int</name><argument_list pos:line="93" pos:column="33">(<argument><expr><call><name><name pos:line="93" pos:column="34">_tbiis</name><op:operator pos:line="93" pos:column="40">.</op:operator><name pos:line="93" pos:column="41">size</name></name><argument_list pos:line="93" pos:column="45">()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="93" pos:column="51">i</name><op:operator pos:line="93" pos:column="52">++</op:operator></expr></incr>)
	<block pos:line="94" pos:column="9">{
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name><name pos:line="95" pos:column="21">_tbiis</name><index pos:line="95" pos:column="27">[<expr><name pos:line="95" pos:column="28">i</name></expr>]</index></name><op:operator pos:line="95" pos:column="30">.</op:operator><name pos:line="95" pos:column="31">_defaultIcon</name> <op:operator pos:line="95" pos:column="44">!=</op:operator> <op:operator pos:line="95" pos:column="47">-</op:operator><lit:literal type="number" pos:line="95" pos:column="48">1</lit:literal></expr>)</condition><then pos:line="95" pos:column="50">
		<block pos:line="96" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="97" pos:column="25">_iconListVector</name><index pos:line="97" pos:column="40">[<expr><name pos:line="97" pos:column="41">HLIST_DEFAULT</name></expr>]</index></name><op:operator pos:line="97" pos:column="55">.</op:operator><call><name pos:line="97" pos:column="56">addIcon</name><argument_list pos:line="97" pos:column="63">(<argument><expr><name><name pos:line="97" pos:column="64">_tbiis</name><index pos:line="97" pos:column="70">[<expr><name pos:line="97" pos:column="71">i</name></expr>]</index></name><op:operator pos:line="97" pos:column="73">.</op:operator><name pos:line="97" pos:column="74">_defaultIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="98" pos:column="25">_iconListVector</name><index pos:line="98" pos:column="40">[<expr><name pos:line="98" pos:column="41">HLIST_HOT</name></expr>]</index></name><op:operator pos:line="98" pos:column="51">.</op:operator><call><name pos:line="98" pos:column="52">addIcon</name><argument_list pos:line="98" pos:column="59">(<argument><expr><name><name pos:line="98" pos:column="60">_tbiis</name><index pos:line="98" pos:column="66">[<expr><name pos:line="98" pos:column="67">i</name></expr>]</index></name><op:operator pos:line="98" pos:column="69">.</op:operator><name pos:line="98" pos:column="70">_hotIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="99" pos:column="25">_iconListVector</name><index pos:line="99" pos:column="40">[<expr><name pos:line="99" pos:column="41">HLIST_DISABLE</name></expr>]</index></name><op:operator pos:line="99" pos:column="55">.</op:operator><call><name pos:line="99" pos:column="56">addIcon</name><argument_list pos:line="99" pos:column="63">(<argument><expr><name><name pos:line="99" pos:column="64">_tbiis</name><index pos:line="99" pos:column="70">[<expr><name pos:line="99" pos:column="71">i</name></expr>]</index></name><op:operator pos:line="99" pos:column="73">.</op:operator><name pos:line="99" pos:column="74">_grayIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="104" pos:column="1">void</name></type> <name><name pos:line="104" pos:column="6">ToolBarIcons</name><op:operator pos:line="104" pos:column="18">::</op:operator><name pos:line="104" pos:column="20">create</name></name><parameter_list pos:line="104" pos:column="26">(<param><decl><type><name pos:line="104" pos:column="27">HINSTANCE</name></type> <name pos:line="104" pos:column="37">hInst</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="44">int</name></type> <name pos:line="104" pos:column="48">iconSize</name></decl></param>)</parameter_list>
<block pos:line="105" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="106" pos:column="9">_iconListVector</name><op:operator pos:line="106" pos:column="24">.</op:operator><name pos:line="106" pos:column="25">push_back</name></name><argument_list pos:line="106" pos:column="34">(<argument><expr><call><name pos:line="106" pos:column="35">IconList</name><argument_list pos:line="106" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="107" pos:column="9">_iconListVector</name><op:operator pos:line="107" pos:column="24">.</op:operator><name pos:line="107" pos:column="25">push_back</name></name><argument_list pos:line="107" pos:column="34">(<argument><expr><call><name pos:line="107" pos:column="35">IconList</name><argument_list pos:line="107" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="108" pos:column="9">_iconListVector</name><op:operator pos:line="108" pos:column="24">.</op:operator><name pos:line="108" pos:column="25">push_back</name></name><argument_list pos:line="108" pos:column="34">(<argument><expr><call><name pos:line="108" pos:column="35">IconList</name><argument_list pos:line="108" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="110" pos:column="9">_iconListVector</name><index pos:line="110" pos:column="24">[<expr><name pos:line="110" pos:column="25">HLIST_DEFAULT</name></expr>]</index></name><op:operator pos:line="110" pos:column="39">.</op:operator><call><name pos:line="110" pos:column="40">create</name><argument_list pos:line="110" pos:column="46">(<argument><expr><name pos:line="110" pos:column="47">hInst</name></expr></argument>, <argument><expr><name pos:line="110" pos:column="54">iconSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="111" pos:column="9">_iconListVector</name><index pos:line="111" pos:column="24">[<expr><name pos:line="111" pos:column="25">HLIST_HOT</name></expr>]</index></name><op:operator pos:line="111" pos:column="35">.</op:operator><call><name pos:line="111" pos:column="36">create</name><argument_list pos:line="111" pos:column="42">(<argument><expr><name pos:line="111" pos:column="43">hInst</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="50">iconSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="112" pos:column="9">_iconListVector</name><index pos:line="112" pos:column="24">[<expr><name pos:line="112" pos:column="25">HLIST_DISABLE</name></expr>]</index></name><op:operator pos:line="112" pos:column="39">.</op:operator><call><name pos:line="112" pos:column="40">create</name><argument_list pos:line="112" pos:column="46">(<argument><expr><name pos:line="112" pos:column="47">hInst</name></expr></argument>, <argument><expr><name pos:line="112" pos:column="54">iconSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="114" pos:column="9">reInit</name><argument_list pos:line="114" pos:column="15">(<argument><expr><name pos:line="114" pos:column="16">iconSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="117" pos:column="1">void</name></type> <name><name pos:line="117" pos:column="6">ToolBarIcons</name><op:operator pos:line="117" pos:column="18">::</op:operator><name pos:line="117" pos:column="20">destroy</name></name><parameter_list pos:line="117" pos:column="27">()</parameter_list>
<block pos:line="118" pos:column="1">{
	<expr_stmt><expr><name><name pos:line="119" pos:column="9">_iconListVector</name><index pos:line="119" pos:column="24">[<expr><name pos:line="119" pos:column="25">HLIST_DEFAULT</name></expr>]</index></name><op:operator pos:line="119" pos:column="39">.</op:operator><call><name pos:line="119" pos:column="40">destroy</name><argument_list pos:line="119" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="120" pos:column="9">_iconListVector</name><index pos:line="120" pos:column="24">[<expr><name pos:line="120" pos:column="25">HLIST_HOT</name></expr>]</index></name><op:operator pos:line="120" pos:column="35">.</op:operator><call><name pos:line="120" pos:column="36">destroy</name><argument_list pos:line="120" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="121" pos:column="9">_iconListVector</name><index pos:line="121" pos:column="24">[<expr><name pos:line="121" pos:column="25">HLIST_DISABLE</name></expr>]</index></name><op:operator pos:line="121" pos:column="39">.</op:operator><call><name pos:line="121" pos:column="40">destroy</name><argument_list pos:line="121" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="122" pos:column="9">//_iconListVector[HLIST_UGLY].destroy();</comment>
}</block></function>




</unit>
