<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\TinyXml\tinyxml.cpp" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
www.sourceforge.net/projects/tinyxml
Original code (2.0 and earlier )copyright (c) 2000-2002 Lee Thomason (www.grinninglizard.com)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any
damages arising from the use of this software.

Permission is granted to anyone to use this software for any
purpose, including commercial applications, and to alter it and
redistribute it freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must
not claim that you wrote the original software. If you use this
software in a product, an acknowledgment in the product documentation
would be appreciated but is not required.

2. Altered source versions must be plainly marked as such, and
must not be misrepresented as being the original software.

3. This notice may not be removed or altered from any source
distribution.
*/</comment>

<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"tinyxml.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><name pos:line="28" pos:column="1">bool</name></type> <name><name pos:line="28" pos:column="6">TiXmlBase</name><op:operator pos:line="28" pos:column="15">::</op:operator><name pos:line="28" pos:column="17">condenseWhiteSpace</name></name> <init pos:line="28" pos:column="36">= <expr><lit:literal type="boolean" pos:line="28" pos:column="38">true</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="30" pos:column="1">void</name></type> <name><name pos:line="30" pos:column="6">TiXmlBase</name><op:operator pos:line="30" pos:column="15">::</op:operator><name pos:line="30" pos:column="17">PutString</name></name><parameter_list pos:line="30" pos:column="26">( <param><decl><type><specifier pos:line="30" pos:column="28">const</specifier> <name pos:line="30" pos:column="34">TIXML_STRING</name><type:modifier pos:line="30" pos:column="46">&amp;</type:modifier></type> <name pos:line="30" pos:column="48">str</name></decl></param>, <param><decl><type><name pos:line="30" pos:column="53">TIXML_OSTREAM</name><type:modifier pos:line="30" pos:column="66">*</type:modifier></type> <name pos:line="30" pos:column="68">stream</name></decl></param> )</parameter_list>
<block pos:line="31" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="32" pos:column="9">TIXML_STRING</name></type> <name pos:line="32" pos:column="22">buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">PutString</name><argument_list pos:line="33" pos:column="18">( <argument><expr><name pos:line="33" pos:column="20">str</name></expr></argument>, <argument><expr><op:operator pos:line="33" pos:column="25">&amp;</op:operator><name pos:line="33" pos:column="26">buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="34" pos:column="9">(</op:operator><op:operator pos:line="34" pos:column="10">*</op:operator><name pos:line="34" pos:column="11">stream</name><op:operator pos:line="34" pos:column="17">)</op:operator> <op:operator pos:line="34" pos:column="19">&lt;&lt;</op:operator> <name pos:line="34" pos:column="22">buffer</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="37" pos:column="1">void</name></type> <name><name pos:line="37" pos:column="6">TiXmlBase</name><op:operator pos:line="37" pos:column="15">::</op:operator><name pos:line="37" pos:column="17">PutString</name></name><parameter_list pos:line="37" pos:column="26">( <param><decl><type><specifier pos:line="37" pos:column="28">const</specifier> <name pos:line="37" pos:column="34">TIXML_STRING</name><type:modifier pos:line="37" pos:column="46">&amp;</type:modifier></type> <name pos:line="37" pos:column="48">str</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="53">TIXML_STRING</name><type:modifier pos:line="37" pos:column="65">*</type:modifier></type> <name pos:line="37" pos:column="67">outString</name></decl></param> )</parameter_list>
<block pos:line="38" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">int</name></type> <name pos:line="39" pos:column="13">i</name><init pos:line="39" pos:column="14">=<expr><lit:literal type="number" pos:line="39" pos:column="15">0</lit:literal></expr></init></decl>;</decl_stmt>

	<while pos:line="41" pos:column="9">while<condition pos:line="41" pos:column="14">( <expr><name pos:line="41" pos:column="16">i</name><op:operator pos:line="41" pos:column="17">&lt;</op:operator><op:operator pos:line="41" pos:column="18">(</op:operator><name pos:line="41" pos:column="19">int</name><op:operator pos:line="41" pos:column="22">)</op:operator><call><name><name pos:line="41" pos:column="23">str</name><op:operator pos:line="41" pos:column="26">.</op:operator><name pos:line="41" pos:column="27">length</name></name><argument_list pos:line="41" pos:column="33">()</argument_list></call></expr> )</condition>
	<block pos:line="42" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">int</name></type> <name pos:line="43" pos:column="21">c</name> <init pos:line="43" pos:column="23">= <expr><name><name pos:line="43" pos:column="25">str</name><index pos:line="43" pos:column="28">[<expr><name pos:line="43" pos:column="29">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(    <expr><name pos:line="45" pos:column="25">c</name> <op:operator pos:line="45" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="30">'&amp;'</lit:literal> 
		     <op:operator pos:line="46" pos:column="22">&amp;&amp;</op:operator> <name pos:line="46" pos:column="25">i</name> <op:operator pos:line="46" pos:column="27">&lt;</op:operator> <op:operator pos:line="46" pos:column="29">(</op:operator> <op:operator pos:line="46" pos:column="31">(</op:operator><name pos:line="46" pos:column="32">int</name><op:operator pos:line="46" pos:column="35">)</op:operator><call><name><name pos:line="46" pos:column="36">str</name><op:operator pos:line="46" pos:column="39">.</op:operator><name pos:line="46" pos:column="40">length</name></name><argument_list pos:line="46" pos:column="46">()</argument_list></call> <op:operator pos:line="46" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="46" pos:column="51">2</lit:literal> <op:operator pos:line="46" pos:column="53">)</op:operator>
			 <op:operator pos:line="47" pos:column="26">&amp;&amp;</op:operator> <name><name pos:line="47" pos:column="29">str</name><index pos:line="47" pos:column="32">[<expr><name pos:line="47" pos:column="33">i</name><op:operator pos:line="47" pos:column="34">+</op:operator><lit:literal type="number" pos:line="47" pos:column="35">1</lit:literal></expr>]</index></name> <op:operator pos:line="47" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="47" pos:column="41">'#'</lit:literal>
			 <op:operator pos:line="48" pos:column="26">&amp;&amp;</op:operator> <name><name pos:line="48" pos:column="29">str</name><index pos:line="48" pos:column="32">[<expr><name pos:line="48" pos:column="33">i</name><op:operator pos:line="48" pos:column="34">+</op:operator><lit:literal type="number" pos:line="48" pos:column="35">2</lit:literal></expr>]</index></name> <op:operator pos:line="48" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="41">'x'</lit:literal></expr> )</condition><then pos:line="48" pos:column="46">
		<block pos:line="49" pos:column="17">{
			<comment type="line" pos:line="50" pos:column="25">// Hexadecimal character reference.</comment>
			<comment type="line" pos:line="51" pos:column="25">// Pass through unchanged.</comment>
			<comment type="line" pos:line="52" pos:column="25">// &amp;#xA9;	-- copyright symbol, for example.</comment>
			<while pos:line="53" pos:column="25">while <condition pos:line="53" pos:column="31">( <expr><name pos:line="53" pos:column="33">i</name><op:operator pos:line="53" pos:column="34">&lt;</op:operator><op:operator pos:line="53" pos:column="35">(</op:operator><name pos:line="53" pos:column="36">int</name><op:operator pos:line="53" pos:column="39">)</op:operator><call><name><name pos:line="53" pos:column="40">str</name><op:operator pos:line="53" pos:column="43">.</op:operator><name pos:line="53" pos:column="44">length</name></name><argument_list pos:line="53" pos:column="50">()</argument_list></call></expr> )</condition>
			<block pos:line="54" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="55" pos:column="33">outString</name><op:operator pos:line="55" pos:column="42">-&gt;</op:operator><name pos:line="55" pos:column="44">append</name></name><argument_list pos:line="55" pos:column="50">( <argument><expr><call><name><name pos:line="55" pos:column="52">str</name><op:operator pos:line="55" pos:column="55">.</op:operator><name pos:line="55" pos:column="56">c_str</name></name><argument_list pos:line="55" pos:column="61">()</argument_list></call> <op:operator pos:line="55" pos:column="64">+</op:operator> <name pos:line="55" pos:column="66">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="55" pos:column="69">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="56" pos:column="33">++</op:operator><name pos:line="56" pos:column="35">i</name></expr>;</expr_stmt>
				<if pos:line="57" pos:column="33">if <condition pos:line="57" pos:column="36">( <expr><name><name pos:line="57" pos:column="38">str</name><index pos:line="57" pos:column="41">[<expr><name pos:line="57" pos:column="42">i</name></expr>]</index></name> <op:operator pos:line="57" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="48">';'</lit:literal></expr> )</condition><then pos:line="57" pos:column="53">
					<break pos:line="58" pos:column="41">break;</break></then></if>
			}</block></while>
		}</block></then>
		<else pos:line="61" pos:column="17">else <if pos:line="61" pos:column="22">if <condition pos:line="61" pos:column="25">( <expr><name pos:line="61" pos:column="27">c</name> <op:operator pos:line="61" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="32">'&amp;'</lit:literal></expr> )</condition><then pos:line="61" pos:column="37">
		<block pos:line="62" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="63" pos:column="25">outString</name><op:operator pos:line="63" pos:column="34">-&gt;</op:operator><name pos:line="63" pos:column="36">append</name></name><argument_list pos:line="63" pos:column="42">( <argument><expr><name><name pos:line="63" pos:column="44">entity</name><index pos:line="63" pos:column="50">[<expr><lit:literal type="number" pos:line="63" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="63" pos:column="53">.</op:operator><name pos:line="63" pos:column="54">str</name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="59">entity</name><index pos:line="63" pos:column="65">[<expr><lit:literal type="number" pos:line="63" pos:column="66">0</lit:literal></expr>]</index></name><op:operator pos:line="63" pos:column="68">.</op:operator><name pos:line="63" pos:column="69">strLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="64" pos:column="25">++</op:operator><name pos:line="64" pos:column="27">i</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="66" pos:column="17">else <if pos:line="66" pos:column="22">if <condition pos:line="66" pos:column="25">( <expr><name pos:line="66" pos:column="27">c</name> <op:operator pos:line="66" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="32">'&lt;'</lit:literal></expr> )</condition><then pos:line="66" pos:column="37">
		<block pos:line="67" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="68" pos:column="25">outString</name><op:operator pos:line="68" pos:column="34">-&gt;</op:operator><name pos:line="68" pos:column="36">append</name></name><argument_list pos:line="68" pos:column="42">( <argument><expr><name><name pos:line="68" pos:column="44">entity</name><index pos:line="68" pos:column="50">[<expr><lit:literal type="number" pos:line="68" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="68" pos:column="53">.</op:operator><name pos:line="68" pos:column="54">str</name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="59">entity</name><index pos:line="68" pos:column="65">[<expr><lit:literal type="number" pos:line="68" pos:column="66">1</lit:literal></expr>]</index></name><op:operator pos:line="68" pos:column="68">.</op:operator><name pos:line="68" pos:column="69">strLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="69" pos:column="25">++</op:operator><name pos:line="69" pos:column="27">i</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="71" pos:column="17">else <if pos:line="71" pos:column="22">if <condition pos:line="71" pos:column="25">( <expr><name pos:line="71" pos:column="27">c</name> <op:operator pos:line="71" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="71" pos:column="32">'&gt;'</lit:literal></expr> )</condition><then pos:line="71" pos:column="37">
		<block pos:line="72" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="73" pos:column="25">outString</name><op:operator pos:line="73" pos:column="34">-&gt;</op:operator><name pos:line="73" pos:column="36">append</name></name><argument_list pos:line="73" pos:column="42">( <argument><expr><name><name pos:line="73" pos:column="44">entity</name><index pos:line="73" pos:column="50">[<expr><lit:literal type="number" pos:line="73" pos:column="51">2</lit:literal></expr>]</index></name><op:operator pos:line="73" pos:column="53">.</op:operator><name pos:line="73" pos:column="54">str</name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="59">entity</name><index pos:line="73" pos:column="65">[<expr><lit:literal type="number" pos:line="73" pos:column="66">2</lit:literal></expr>]</index></name><op:operator pos:line="73" pos:column="68">.</op:operator><name pos:line="73" pos:column="69">strLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="74" pos:column="25">++</op:operator><name pos:line="74" pos:column="27">i</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="76" pos:column="17">else <if pos:line="76" pos:column="22">if <condition pos:line="76" pos:column="25">( <expr><name pos:line="76" pos:column="27">c</name> <op:operator pos:line="76" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="76" pos:column="32">'\"'</lit:literal></expr> )</condition><then pos:line="76" pos:column="38">
		<block pos:line="77" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="78" pos:column="25">outString</name><op:operator pos:line="78" pos:column="34">-&gt;</op:operator><name pos:line="78" pos:column="36">append</name></name><argument_list pos:line="78" pos:column="42">( <argument><expr><name><name pos:line="78" pos:column="44">entity</name><index pos:line="78" pos:column="50">[<expr><lit:literal type="number" pos:line="78" pos:column="51">3</lit:literal></expr>]</index></name><op:operator pos:line="78" pos:column="53">.</op:operator><name pos:line="78" pos:column="54">str</name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="59">entity</name><index pos:line="78" pos:column="65">[<expr><lit:literal type="number" pos:line="78" pos:column="66">3</lit:literal></expr>]</index></name><op:operator pos:line="78" pos:column="68">.</op:operator><name pos:line="78" pos:column="69">strLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="79" pos:column="25">++</op:operator><name pos:line="79" pos:column="27">i</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="81" pos:column="17">else <if pos:line="81" pos:column="22">if <condition pos:line="81" pos:column="25">( <expr><name pos:line="81" pos:column="27">c</name> <op:operator pos:line="81" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="32">'\''</lit:literal></expr> )</condition><then pos:line="81" pos:column="38">
		<block pos:line="82" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="83" pos:column="25">outString</name><op:operator pos:line="83" pos:column="34">-&gt;</op:operator><name pos:line="83" pos:column="36">append</name></name><argument_list pos:line="83" pos:column="42">( <argument><expr><name><name pos:line="83" pos:column="44">entity</name><index pos:line="83" pos:column="50">[<expr><lit:literal type="number" pos:line="83" pos:column="51">4</lit:literal></expr>]</index></name><op:operator pos:line="83" pos:column="53">.</op:operator><name pos:line="83" pos:column="54">str</name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="59">entity</name><index pos:line="83" pos:column="65">[<expr><lit:literal type="number" pos:line="83" pos:column="66">4</lit:literal></expr>]</index></name><op:operator pos:line="83" pos:column="68">.</op:operator><name pos:line="83" pos:column="69">strLength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="84" pos:column="25">++</op:operator><name pos:line="84" pos:column="27">i</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="86" pos:column="17">else <if pos:line="86" pos:column="22">if <condition pos:line="86" pos:column="25">( <expr><name><name pos:line="86" pos:column="27">c</name> <argument_list pos:line="86" pos:column="29">&lt; <argument><expr><lit:literal type="number" pos:line="86" pos:column="31">32</lit:literal> <op:operator pos:line="86" pos:column="34">||</op:operator> <name pos:line="86" pos:column="37">c</name></expr></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="86" pos:column="41">126</lit:literal></expr> )</condition><then pos:line="86" pos:column="46">
		<block pos:line="87" pos:column="17">{
			<comment type="line" pos:line="88" pos:column="25">// Easy pass at non-alpha/numeric/symbol</comment>
			<comment type="line" pos:line="89" pos:column="25">// 127 is the delete key. Below 32 is symbolic.</comment>
			<decl_stmt><decl><type><name pos:line="90" pos:column="25">TCHAR</name></type> <name><name pos:line="90" pos:column="31">buf</name><index pos:line="90" pos:column="34">[ <expr><lit:literal type="number" pos:line="90" pos:column="36">32</lit:literal></expr> ]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="91" pos:column="25">wsprintf</name><argument_list pos:line="91" pos:column="33">( <argument><expr><name pos:line="91" pos:column="35">buf</name></expr></argument>, <argument><expr><call><name pos:line="91" pos:column="40">TEXT</name><argument_list pos:line="91" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="45">"&amp;#x%04X;"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call pos:line="91" pos:column="58">(<name pos:line="91" pos:column="59">unsigned</name>) <argument_list pos:line="91" pos:column="69">( <argument><expr><name pos:line="91" pos:column="71">c</name> <op:operator pos:line="91" pos:column="73">&amp;</op:operator> <lit:literal type="number" pos:line="91" pos:column="75">0xffff</lit:literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="92" pos:column="25">outString</name><op:operator pos:line="92" pos:column="34">-&gt;</op:operator><name pos:line="92" pos:column="36">append</name></name><argument_list pos:line="92" pos:column="42">( <argument><expr><name pos:line="92" pos:column="44">buf</name></expr></argument>, <argument><expr><call><name pos:line="92" pos:column="49">lstrlen</name><argument_list pos:line="92" pos:column="56">( <argument><expr><name pos:line="92" pos:column="58">buf</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="93" pos:column="25">++</op:operator><name pos:line="93" pos:column="27">i</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="95" pos:column="17">else
		<block pos:line="96" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="97" pos:column="25">TCHAR</name></type> <name pos:line="97" pos:column="31">realc</name> <init pos:line="97" pos:column="37">= <expr><op:operator pos:line="97" pos:column="39">(</op:operator><name pos:line="97" pos:column="40">TCHAR</name><op:operator pos:line="97" pos:column="45">)</op:operator> <name pos:line="97" pos:column="47">c</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="98" pos:column="25">outString</name><op:operator pos:line="98" pos:column="34">-&gt;</op:operator><name pos:line="98" pos:column="36">append</name></name><argument_list pos:line="98" pos:column="42">( <argument><expr><op:operator pos:line="98" pos:column="44">&amp;</op:operator><name pos:line="98" pos:column="45">realc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="98" pos:column="52">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="99" pos:column="25">++</op:operator><name pos:line="99" pos:column="27">i</name></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
	}</block></while>
}</block></function>


<comment type="line" pos:line="105" pos:column="1">// &lt;-- Strange class for a bug fix. Search for STL_STRING_BUG</comment>
<constructor><name><name pos:line="106" pos:column="1">TiXmlBase</name><op:operator pos:line="106" pos:column="10">::</op:operator><name pos:line="106" pos:column="12">StringToBuffer</name><op:operator pos:line="106" pos:column="26">::</op:operator><name pos:line="106" pos:column="28">StringToBuffer</name></name><parameter_list pos:line="106" pos:column="42">( <param><decl><type><specifier pos:line="106" pos:column="44">const</specifier> <name pos:line="106" pos:column="50">TIXML_STRING</name><type:modifier pos:line="106" pos:column="62">&amp;</type:modifier></type> <name pos:line="106" pos:column="64">str</name></decl></param> )</parameter_list>
<block pos:line="107" pos:column="1">{
	<expr_stmt><expr><name pos:line="108" pos:column="9">buffer</name> <op:operator pos:line="108" pos:column="16">=</op:operator> <op:operator pos:line="108" pos:column="18">new</op:operator> <name><name pos:line="108" pos:column="22">TCHAR</name><index pos:line="108" pos:column="27">[ <expr><call><name><name pos:line="108" pos:column="29">str</name><op:operator pos:line="108" pos:column="32">.</op:operator><name pos:line="108" pos:column="33">length</name></name><argument_list pos:line="108" pos:column="39">()</argument_list></call><op:operator pos:line="108" pos:column="41">+</op:operator><lit:literal type="number" pos:line="108" pos:column="42">1</lit:literal></expr> ]</index></name></expr>;</expr_stmt>
	<if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">( <expr><name pos:line="109" pos:column="14">buffer</name></expr> )</condition><then pos:line="109" pos:column="22">
	<block pos:line="110" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="111" pos:column="17">lstrcpy</name><argument_list pos:line="111" pos:column="24">( <argument><expr><name pos:line="111" pos:column="26">buffer</name></expr></argument>, <argument><expr><call><name><name pos:line="111" pos:column="34">str</name><op:operator pos:line="111" pos:column="37">.</op:operator><name pos:line="111" pos:column="38">c_str</name></name><argument_list pos:line="111" pos:column="43">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></constructor>


<destructor><name><name pos:line="116" pos:column="1">TiXmlBase</name><op:operator pos:line="116" pos:column="10">::</op:operator><name pos:line="116" pos:column="12">StringToBuffer</name><op:operator pos:line="116" pos:column="26">::</op:operator>~<name pos:line="116" pos:column="29">StringToBuffer</name></name><parameter_list pos:line="116" pos:column="43">()</parameter_list>
<block pos:line="117" pos:column="1">{
	<expr_stmt><expr><op:operator pos:line="118" pos:column="9">delete</op:operator> <index pos:line="118" pos:column="16">[]</index> <name pos:line="118" pos:column="19">buffer</name></expr>;</expr_stmt>
}</block></destructor>
<comment type="line" pos:line="120" pos:column="1">// End strange bug fix. --&gt;</comment>


<constructor><name><name pos:line="123" pos:column="1">TiXmlNode</name><op:operator pos:line="123" pos:column="10">::</op:operator><name pos:line="123" pos:column="12">TiXmlNode</name></name><parameter_list pos:line="123" pos:column="21">( <param><decl><type><name pos:line="123" pos:column="23">NodeType</name></type> <name pos:line="123" pos:column="32">_type</name></decl></param> )</parameter_list>
<block pos:line="124" pos:column="1">{
	<expr_stmt><expr><name pos:line="125" pos:column="9">parent</name> <op:operator pos:line="125" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="125" pos:column="18">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="126" pos:column="9">type</name> <op:operator pos:line="126" pos:column="14">=</op:operator> <name pos:line="126" pos:column="16">_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="127" pos:column="9">firstChild</name> <op:operator pos:line="127" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="127" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="128" pos:column="9">lastChild</name> <op:operator pos:line="128" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="128" pos:column="21">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="129" pos:column="9">prev</name> <op:operator pos:line="129" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="129" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="130" pos:column="9">next</name> <op:operator pos:line="130" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="130" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="131" pos:column="9">userData</name> <op:operator pos:line="131" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="131" pos:column="20">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>


<destructor><name><name pos:line="135" pos:column="1">TiXmlNode</name><op:operator pos:line="135" pos:column="10">::</op:operator>~<name pos:line="135" pos:column="13">TiXmlNode</name></name><parameter_list pos:line="135" pos:column="22">()</parameter_list>
<block pos:line="136" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">TiXmlNode</name><type:modifier pos:line="137" pos:column="18">*</type:modifier></type> <name pos:line="137" pos:column="20">node</name> <init pos:line="137" pos:column="25">= <expr><name pos:line="137" pos:column="27">firstChild</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="138" pos:column="9">TiXmlNode</name><type:modifier pos:line="138" pos:column="18">*</type:modifier></type> <name pos:line="138" pos:column="20">temp</name> <init pos:line="138" pos:column="25">= <expr><lit:literal type="number" pos:line="138" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>

	<while pos:line="140" pos:column="9">while <condition pos:line="140" pos:column="15">( <expr><name pos:line="140" pos:column="17">node</name></expr> )</condition>
	<block pos:line="141" pos:column="9">{
		<expr_stmt><expr><name pos:line="142" pos:column="17">temp</name> <op:operator pos:line="142" pos:column="22">=</op:operator> <name pos:line="142" pos:column="24">node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="143" pos:column="17">node</name> <op:operator pos:line="143" pos:column="22">=</op:operator> <name><name pos:line="143" pos:column="24">node</name><op:operator pos:line="143" pos:column="28">-&gt;</op:operator><name pos:line="143" pos:column="30">next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="144" pos:column="17">delete</op:operator> <name pos:line="144" pos:column="24">temp</name></expr>;</expr_stmt>
	}</block></while>	
}</block></destructor>


<function><type><name pos:line="149" pos:column="1">void</name></type> <name><name pos:line="149" pos:column="6">TiXmlNode</name><op:operator pos:line="149" pos:column="15">::</op:operator><name pos:line="149" pos:column="17">Clear</name></name><parameter_list pos:line="149" pos:column="22">()</parameter_list>
<block pos:line="150" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="151" pos:column="9">TiXmlNode</name><type:modifier pos:line="151" pos:column="18">*</type:modifier></type> <name pos:line="151" pos:column="20">node</name> <init pos:line="151" pos:column="25">= <expr><name pos:line="151" pos:column="27">firstChild</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="152" pos:column="9">TiXmlNode</name><type:modifier pos:line="152" pos:column="18">*</type:modifier></type> <name pos:line="152" pos:column="20">temp</name> <init pos:line="152" pos:column="25">= <expr><lit:literal type="number" pos:line="152" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>

	<while pos:line="154" pos:column="9">while <condition pos:line="154" pos:column="15">( <expr><name pos:line="154" pos:column="17">node</name></expr> )</condition>
	<block pos:line="155" pos:column="9">{
		<expr_stmt><expr><name pos:line="156" pos:column="17">temp</name> <op:operator pos:line="156" pos:column="22">=</op:operator> <name pos:line="156" pos:column="24">node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="157" pos:column="17">node</name> <op:operator pos:line="157" pos:column="22">=</op:operator> <name><name pos:line="157" pos:column="24">node</name><op:operator pos:line="157" pos:column="28">-&gt;</op:operator><name pos:line="157" pos:column="30">next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="158" pos:column="17">delete</op:operator> <name pos:line="158" pos:column="24">temp</name></expr>;</expr_stmt>
	}</block></while>	

	<expr_stmt><expr><name pos:line="161" pos:column="9">firstChild</name> <op:operator pos:line="161" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="161" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="162" pos:column="9">lastChild</name> <op:operator pos:line="162" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="162" pos:column="21">0</lit:literal></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="166" pos:column="1">TiXmlNode</name><type:modifier pos:line="166" pos:column="10">*</type:modifier></type> <name><name pos:line="166" pos:column="12">TiXmlNode</name><op:operator pos:line="166" pos:column="21">::</op:operator><name pos:line="166" pos:column="23">LinkEndChild</name></name><parameter_list pos:line="166" pos:column="35">( <param><decl><type><name pos:line="166" pos:column="37">TiXmlNode</name><type:modifier pos:line="166" pos:column="46">*</type:modifier></type> <name pos:line="166" pos:column="48">node</name></decl></param> )</parameter_list>
<block pos:line="167" pos:column="1">{
	<expr_stmt><expr><name><name pos:line="168" pos:column="9">node</name><op:operator pos:line="168" pos:column="13">-&gt;</op:operator><name pos:line="168" pos:column="15">parent</name></name> <op:operator pos:line="168" pos:column="22">=</op:operator> <name pos:line="168" pos:column="24">this</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="170" pos:column="9">node</name><op:operator pos:line="170" pos:column="13">-&gt;</op:operator><name pos:line="170" pos:column="15">prev</name></name> <op:operator pos:line="170" pos:column="20">=</op:operator> <name pos:line="170" pos:column="22">lastChild</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="171" pos:column="9">node</name><op:operator pos:line="171" pos:column="13">-&gt;</op:operator><name pos:line="171" pos:column="15">next</name></name> <op:operator pos:line="171" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="171" pos:column="22">0</lit:literal></expr>;</expr_stmt>

	<if pos:line="173" pos:column="9">if <condition pos:line="173" pos:column="12">( <expr><name pos:line="173" pos:column="14">lastChild</name></expr> )</condition><then pos:line="173" pos:column="25">
		<expr_stmt><expr><name><name pos:line="174" pos:column="17">lastChild</name><op:operator pos:line="174" pos:column="26">-&gt;</op:operator><name pos:line="174" pos:column="28">next</name></name> <op:operator pos:line="174" pos:column="33">=</op:operator> <name pos:line="174" pos:column="35">node</name></expr>;</expr_stmt></then>
	<else pos:line="175" pos:column="9">else
		<expr_stmt><expr><name pos:line="176" pos:column="17">firstChild</name> <op:operator pos:line="176" pos:column="28">=</op:operator> <name pos:line="176" pos:column="30">node</name></expr>;</expr_stmt></else></if>			<comment type="line" pos:line="176" pos:column="57">// it was an empty list.</comment>

	<expr_stmt><expr><name pos:line="178" pos:column="9">lastChild</name> <op:operator pos:line="178" pos:column="19">=</op:operator> <name pos:line="178" pos:column="21">node</name></expr>;</expr_stmt>
	<return pos:line="179" pos:column="9">return <expr><name pos:line="179" pos:column="16">node</name></expr>;</return>
}</block></function>


<function><type><name pos:line="183" pos:column="1">TiXmlNode</name><type:modifier pos:line="183" pos:column="10">*</type:modifier></type> <name><name pos:line="183" pos:column="12">TiXmlNode</name><op:operator pos:line="183" pos:column="21">::</op:operator><name pos:line="183" pos:column="23">InsertEndChild</name></name><parameter_list pos:line="183" pos:column="37">( <param><decl><type><specifier pos:line="183" pos:column="39">const</specifier> <name pos:line="183" pos:column="45">TiXmlNode</name><type:modifier pos:line="183" pos:column="54">&amp;</type:modifier></type> <name pos:line="183" pos:column="56">addThis</name></decl></param> )</parameter_list>
<block pos:line="184" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="185" pos:column="9">TiXmlNode</name><type:modifier pos:line="185" pos:column="18">*</type:modifier></type> <name pos:line="185" pos:column="20">node</name> <init pos:line="185" pos:column="25">= <expr><call><name><name pos:line="185" pos:column="27">addThis</name><op:operator pos:line="185" pos:column="34">.</op:operator><name pos:line="185" pos:column="35">Clone</name></name><argument_list pos:line="185" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="186" pos:column="9">if <condition pos:line="186" pos:column="12">( <expr><op:operator pos:line="186" pos:column="14">!</op:operator><name pos:line="186" pos:column="15">node</name></expr> )</condition><then pos:line="186" pos:column="21">
		<return pos:line="187" pos:column="17">return <expr><lit:literal type="number" pos:line="187" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<return pos:line="189" pos:column="9">return <expr><call><name pos:line="189" pos:column="16">LinkEndChild</name><argument_list pos:line="189" pos:column="28">( <argument><expr><name pos:line="189" pos:column="30">node</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="193" pos:column="1">TiXmlNode</name><type:modifier pos:line="193" pos:column="10">*</type:modifier></type> <name><name pos:line="193" pos:column="12">TiXmlNode</name><op:operator pos:line="193" pos:column="21">::</op:operator><name pos:line="193" pos:column="23">InsertBeforeChild</name></name><parameter_list pos:line="193" pos:column="40">( <param><decl><type><name pos:line="193" pos:column="42">TiXmlNode</name><type:modifier pos:line="193" pos:column="51">*</type:modifier></type> <name pos:line="193" pos:column="53">beforeThis</name></decl></param>, <param><decl><type><specifier pos:line="193" pos:column="65">const</specifier> <name pos:line="193" pos:column="71">TiXmlNode</name><type:modifier pos:line="193" pos:column="80">&amp;</type:modifier></type> <name pos:line="193" pos:column="82">addThis</name></decl></param> )</parameter_list>
<block pos:line="194" pos:column="1">{	
	<if pos:line="195" pos:column="9">if <condition pos:line="195" pos:column="12">( <expr><op:operator pos:line="195" pos:column="14">!</op:operator><name pos:line="195" pos:column="15">beforeThis</name> <op:operator pos:line="195" pos:column="26">||</op:operator> <name><name pos:line="195" pos:column="29">beforeThis</name><op:operator pos:line="195" pos:column="39">-&gt;</op:operator><name pos:line="195" pos:column="41">parent</name></name> <op:operator pos:line="195" pos:column="48">!=</op:operator> <name pos:line="195" pos:column="51">this</name></expr> )</condition><then pos:line="195" pos:column="57">
		<return pos:line="196" pos:column="17">return <expr><lit:literal type="number" pos:line="196" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="198" pos:column="9">TiXmlNode</name><type:modifier pos:line="198" pos:column="18">*</type:modifier></type> <name pos:line="198" pos:column="20">node</name> <init pos:line="198" pos:column="25">= <expr><call><name><name pos:line="198" pos:column="27">addThis</name><op:operator pos:line="198" pos:column="34">.</op:operator><name pos:line="198" pos:column="35">Clone</name></name><argument_list pos:line="198" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="199" pos:column="9">if <condition pos:line="199" pos:column="12">( <expr><op:operator pos:line="199" pos:column="14">!</op:operator><name pos:line="199" pos:column="15">node</name></expr> )</condition><then pos:line="199" pos:column="21">
		<return pos:line="200" pos:column="17">return <expr><lit:literal type="number" pos:line="200" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name><name pos:line="201" pos:column="9">node</name><op:operator pos:line="201" pos:column="13">-&gt;</op:operator><name pos:line="201" pos:column="15">parent</name></name> <op:operator pos:line="201" pos:column="22">=</op:operator> <name pos:line="201" pos:column="24">this</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="203" pos:column="9">node</name><op:operator pos:line="203" pos:column="13">-&gt;</op:operator><name pos:line="203" pos:column="15">next</name></name> <op:operator pos:line="203" pos:column="20">=</op:operator> <name pos:line="203" pos:column="22">beforeThis</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="204" pos:column="9">node</name><op:operator pos:line="204" pos:column="13">-&gt;</op:operator><name pos:line="204" pos:column="15">prev</name></name> <op:operator pos:line="204" pos:column="20">=</op:operator> <name><name pos:line="204" pos:column="22">beforeThis</name><op:operator pos:line="204" pos:column="32">-&gt;</op:operator><name pos:line="204" pos:column="34">prev</name></name></expr>;</expr_stmt>
	<if pos:line="205" pos:column="9">if <condition pos:line="205" pos:column="12">( <expr><name><name pos:line="205" pos:column="14">beforeThis</name><op:operator pos:line="205" pos:column="24">-&gt;</op:operator><name pos:line="205" pos:column="26">prev</name></name></expr> )</condition><then pos:line="205" pos:column="32">
	<block pos:line="206" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="207" pos:column="17">beforeThis</name><op:operator pos:line="207" pos:column="27">-&gt;</op:operator><name pos:line="207" pos:column="29">prev</name><op:operator pos:line="207" pos:column="33">-&gt;</op:operator><name pos:line="207" pos:column="35">next</name></name> <op:operator pos:line="207" pos:column="40">=</op:operator> <name pos:line="207" pos:column="42">node</name></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="209" pos:column="9">else
	<block pos:line="210" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="211" pos:column="17">assert</name><argument_list pos:line="211" pos:column="23">( <argument><expr><name pos:line="211" pos:column="25">firstChild</name> <op:operator pos:line="211" pos:column="36">==</op:operator> <name pos:line="211" pos:column="39">beforeThis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="212" pos:column="17">firstChild</name> <op:operator pos:line="212" pos:column="28">=</op:operator> <name pos:line="212" pos:column="30">node</name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name><name pos:line="214" pos:column="9">beforeThis</name><op:operator pos:line="214" pos:column="19">-&gt;</op:operator><name pos:line="214" pos:column="21">prev</name></name> <op:operator pos:line="214" pos:column="26">=</op:operator> <name pos:line="214" pos:column="28">node</name></expr>;</expr_stmt>
	<return pos:line="215" pos:column="9">return <expr><name pos:line="215" pos:column="16">node</name></expr>;</return>
}</block></function>


<function><type><name pos:line="219" pos:column="1">TiXmlNode</name><type:modifier pos:line="219" pos:column="10">*</type:modifier></type> <name><name pos:line="219" pos:column="12">TiXmlNode</name><op:operator pos:line="219" pos:column="21">::</op:operator><name pos:line="219" pos:column="23">InsertAfterChild</name></name><parameter_list pos:line="219" pos:column="39">( <param><decl><type><name pos:line="219" pos:column="41">TiXmlNode</name><type:modifier pos:line="219" pos:column="50">*</type:modifier></type> <name pos:line="219" pos:column="52">afterThis</name></decl></param>, <param><decl><type><specifier pos:line="219" pos:column="63">const</specifier> <name pos:line="219" pos:column="69">TiXmlNode</name><type:modifier pos:line="219" pos:column="78">&amp;</type:modifier></type> <name pos:line="219" pos:column="80">addThis</name></decl></param> )</parameter_list>
<block pos:line="220" pos:column="1">{
	<if pos:line="221" pos:column="9">if <condition pos:line="221" pos:column="12">( <expr><op:operator pos:line="221" pos:column="14">!</op:operator><name pos:line="221" pos:column="15">afterThis</name> <op:operator pos:line="221" pos:column="25">||</op:operator> <name><name pos:line="221" pos:column="28">afterThis</name><op:operator pos:line="221" pos:column="37">-&gt;</op:operator><name pos:line="221" pos:column="39">parent</name></name> <op:operator pos:line="221" pos:column="46">!=</op:operator> <name pos:line="221" pos:column="49">this</name></expr> )</condition><then pos:line="221" pos:column="55">
		<return pos:line="222" pos:column="17">return <expr><lit:literal type="number" pos:line="222" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="224" pos:column="9">TiXmlNode</name><type:modifier pos:line="224" pos:column="18">*</type:modifier></type> <name pos:line="224" pos:column="20">node</name> <init pos:line="224" pos:column="25">= <expr><call><name><name pos:line="224" pos:column="27">addThis</name><op:operator pos:line="224" pos:column="34">.</op:operator><name pos:line="224" pos:column="35">Clone</name></name><argument_list pos:line="224" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="225" pos:column="9">if <condition pos:line="225" pos:column="12">( <expr><op:operator pos:line="225" pos:column="14">!</op:operator><name pos:line="225" pos:column="15">node</name></expr> )</condition><then pos:line="225" pos:column="21">
		<return pos:line="226" pos:column="17">return <expr><lit:literal type="number" pos:line="226" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name><name pos:line="227" pos:column="9">node</name><op:operator pos:line="227" pos:column="13">-&gt;</op:operator><name pos:line="227" pos:column="15">parent</name></name> <op:operator pos:line="227" pos:column="22">=</op:operator> <name pos:line="227" pos:column="24">this</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="229" pos:column="9">node</name><op:operator pos:line="229" pos:column="13">-&gt;</op:operator><name pos:line="229" pos:column="15">prev</name></name> <op:operator pos:line="229" pos:column="20">=</op:operator> <name pos:line="229" pos:column="22">afterThis</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="230" pos:column="9">node</name><op:operator pos:line="230" pos:column="13">-&gt;</op:operator><name pos:line="230" pos:column="15">next</name></name> <op:operator pos:line="230" pos:column="20">=</op:operator> <name><name pos:line="230" pos:column="22">afterThis</name><op:operator pos:line="230" pos:column="31">-&gt;</op:operator><name pos:line="230" pos:column="33">next</name></name></expr>;</expr_stmt>
	<if pos:line="231" pos:column="9">if <condition pos:line="231" pos:column="12">( <expr><name><name pos:line="231" pos:column="14">afterThis</name><op:operator pos:line="231" pos:column="23">-&gt;</op:operator><name pos:line="231" pos:column="25">next</name></name></expr> )</condition><then pos:line="231" pos:column="31">
	<block pos:line="232" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="233" pos:column="17">afterThis</name><op:operator pos:line="233" pos:column="26">-&gt;</op:operator><name pos:line="233" pos:column="28">next</name><op:operator pos:line="233" pos:column="32">-&gt;</op:operator><name pos:line="233" pos:column="34">prev</name></name> <op:operator pos:line="233" pos:column="39">=</op:operator> <name pos:line="233" pos:column="41">node</name></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="235" pos:column="9">else
	<block pos:line="236" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="237" pos:column="17">assert</name><argument_list pos:line="237" pos:column="23">( <argument><expr><name pos:line="237" pos:column="25">lastChild</name> <op:operator pos:line="237" pos:column="35">==</op:operator> <name pos:line="237" pos:column="38">afterThis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="238" pos:column="17">lastChild</name> <op:operator pos:line="238" pos:column="27">=</op:operator> <name pos:line="238" pos:column="29">node</name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name><name pos:line="240" pos:column="9">afterThis</name><op:operator pos:line="240" pos:column="18">-&gt;</op:operator><name pos:line="240" pos:column="20">next</name></name> <op:operator pos:line="240" pos:column="25">=</op:operator> <name pos:line="240" pos:column="27">node</name></expr>;</expr_stmt>
	<return pos:line="241" pos:column="9">return <expr><name pos:line="241" pos:column="16">node</name></expr>;</return>
}</block></function>


<function><type><name pos:line="245" pos:column="1">TiXmlNode</name><type:modifier pos:line="245" pos:column="10">*</type:modifier></type> <name><name pos:line="245" pos:column="12">TiXmlNode</name><op:operator pos:line="245" pos:column="21">::</op:operator><name pos:line="245" pos:column="23">ReplaceChild</name></name><parameter_list pos:line="245" pos:column="35">( <param><decl><type><name pos:line="245" pos:column="37">TiXmlNode</name><type:modifier pos:line="245" pos:column="46">*</type:modifier></type> <name pos:line="245" pos:column="48">replaceThis</name></decl></param>, <param><decl><type><specifier pos:line="245" pos:column="61">const</specifier> <name pos:line="245" pos:column="67">TiXmlNode</name><type:modifier pos:line="245" pos:column="76">&amp;</type:modifier></type> <name pos:line="245" pos:column="78">withThis</name></decl></param> )</parameter_list>
<block pos:line="246" pos:column="1">{
	<if pos:line="247" pos:column="9">if <condition pos:line="247" pos:column="12">( <expr><name><name pos:line="247" pos:column="14">replaceThis</name><op:operator pos:line="247" pos:column="25">-&gt;</op:operator><name pos:line="247" pos:column="27">parent</name></name> <op:operator pos:line="247" pos:column="34">!=</op:operator> <name pos:line="247" pos:column="37">this</name></expr> )</condition><then pos:line="247" pos:column="43">
		<return pos:line="248" pos:column="17">return <expr><lit:literal type="number" pos:line="248" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="250" pos:column="9">TiXmlNode</name><type:modifier pos:line="250" pos:column="18">*</type:modifier></type> <name pos:line="250" pos:column="20">node</name> <init pos:line="250" pos:column="25">= <expr><call><name><name pos:line="250" pos:column="27">withThis</name><op:operator pos:line="250" pos:column="35">.</op:operator><name pos:line="250" pos:column="36">Clone</name></name><argument_list pos:line="250" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="251" pos:column="9">if <condition pos:line="251" pos:column="12">( <expr><op:operator pos:line="251" pos:column="14">!</op:operator><name pos:line="251" pos:column="15">node</name></expr> )</condition><then pos:line="251" pos:column="21">
		<return pos:line="252" pos:column="17">return <expr><lit:literal type="number" pos:line="252" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><name><name pos:line="254" pos:column="9">node</name><op:operator pos:line="254" pos:column="13">-&gt;</op:operator><name pos:line="254" pos:column="15">next</name></name> <op:operator pos:line="254" pos:column="20">=</op:operator> <name><name pos:line="254" pos:column="22">replaceThis</name><op:operator pos:line="254" pos:column="33">-&gt;</op:operator><name pos:line="254" pos:column="35">next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="255" pos:column="9">node</name><op:operator pos:line="255" pos:column="13">-&gt;</op:operator><name pos:line="255" pos:column="15">prev</name></name> <op:operator pos:line="255" pos:column="20">=</op:operator> <name><name pos:line="255" pos:column="22">replaceThis</name><op:operator pos:line="255" pos:column="33">-&gt;</op:operator><name pos:line="255" pos:column="35">prev</name></name></expr>;</expr_stmt>

	<if pos:line="257" pos:column="9">if <condition pos:line="257" pos:column="12">( <expr><name><name pos:line="257" pos:column="14">replaceThis</name><op:operator pos:line="257" pos:column="25">-&gt;</op:operator><name pos:line="257" pos:column="27">next</name></name></expr> )</condition><then pos:line="257" pos:column="33">
		<expr_stmt><expr><name><name pos:line="258" pos:column="17">replaceThis</name><op:operator pos:line="258" pos:column="28">-&gt;</op:operator><name pos:line="258" pos:column="30">next</name><op:operator pos:line="258" pos:column="34">-&gt;</op:operator><name pos:line="258" pos:column="36">prev</name></name> <op:operator pos:line="258" pos:column="41">=</op:operator> <name pos:line="258" pos:column="43">node</name></expr>;</expr_stmt></then>
	<else pos:line="259" pos:column="9">else
		<expr_stmt><expr><name pos:line="260" pos:column="17">lastChild</name> <op:operator pos:line="260" pos:column="27">=</op:operator> <name pos:line="260" pos:column="29">node</name></expr>;</expr_stmt></else></if>

	<if pos:line="262" pos:column="9">if <condition pos:line="262" pos:column="12">( <expr><name><name pos:line="262" pos:column="14">replaceThis</name><op:operator pos:line="262" pos:column="25">-&gt;</op:operator><name pos:line="262" pos:column="27">prev</name></name></expr> )</condition><then pos:line="262" pos:column="33">
		<expr_stmt><expr><name><name pos:line="263" pos:column="17">replaceThis</name><op:operator pos:line="263" pos:column="28">-&gt;</op:operator><name pos:line="263" pos:column="30">prev</name><op:operator pos:line="263" pos:column="34">-&gt;</op:operator><name pos:line="263" pos:column="36">next</name></name> <op:operator pos:line="263" pos:column="41">=</op:operator> <name pos:line="263" pos:column="43">node</name></expr>;</expr_stmt></then>
	<else pos:line="264" pos:column="9">else
		<expr_stmt><expr><name pos:line="265" pos:column="17">firstChild</name> <op:operator pos:line="265" pos:column="28">=</op:operator> <name pos:line="265" pos:column="30">node</name></expr>;</expr_stmt></else></if>

	<expr_stmt><expr><op:operator pos:line="267" pos:column="9">delete</op:operator> <name pos:line="267" pos:column="16">replaceThis</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="268" pos:column="9">node</name><op:operator pos:line="268" pos:column="13">-&gt;</op:operator><name pos:line="268" pos:column="15">parent</name></name> <op:operator pos:line="268" pos:column="22">=</op:operator> <name pos:line="268" pos:column="24">this</name></expr>;</expr_stmt>
	<return pos:line="269" pos:column="9">return <expr><name pos:line="269" pos:column="16">node</name></expr>;</return>
}</block></function>


<function><type><name pos:line="273" pos:column="1">bool</name></type> <name><name pos:line="273" pos:column="6">TiXmlNode</name><op:operator pos:line="273" pos:column="15">::</op:operator><name pos:line="273" pos:column="17">RemoveChild</name></name><parameter_list pos:line="273" pos:column="28">( <param><decl><type><name pos:line="273" pos:column="30">TiXmlNode</name><type:modifier pos:line="273" pos:column="39">*</type:modifier></type> <name pos:line="273" pos:column="41">removeThis</name></decl></param> )</parameter_list>
<block pos:line="274" pos:column="1">{
	<if pos:line="275" pos:column="9">if <condition pos:line="275" pos:column="12">( <expr><name><name pos:line="275" pos:column="14">removeThis</name><op:operator pos:line="275" pos:column="24">-&gt;</op:operator><name pos:line="275" pos:column="26">parent</name></name> <op:operator pos:line="275" pos:column="33">!=</op:operator> <name pos:line="275" pos:column="36">this</name></expr> )</condition><then pos:line="275" pos:column="42">
	<block pos:line="276" pos:column="9">{	
		<expr_stmt><expr><call><name pos:line="277" pos:column="17">assert</name><argument_list pos:line="277" pos:column="23">( <argument><expr><lit:literal type="number" pos:line="277" pos:column="25">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="278" pos:column="17">return <expr><lit:literal type="boolean" pos:line="278" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>

	<if pos:line="281" pos:column="9">if <condition pos:line="281" pos:column="12">( <expr><name><name pos:line="281" pos:column="14">removeThis</name><op:operator pos:line="281" pos:column="24">-&gt;</op:operator><name pos:line="281" pos:column="26">next</name></name></expr> )</condition><then pos:line="281" pos:column="32">
		<expr_stmt><expr><name><name pos:line="282" pos:column="17">removeThis</name><op:operator pos:line="282" pos:column="27">-&gt;</op:operator><name pos:line="282" pos:column="29">next</name><op:operator pos:line="282" pos:column="33">-&gt;</op:operator><name pos:line="282" pos:column="35">prev</name></name> <op:operator pos:line="282" pos:column="40">=</op:operator> <name><name pos:line="282" pos:column="42">removeThis</name><op:operator pos:line="282" pos:column="52">-&gt;</op:operator><name pos:line="282" pos:column="54">prev</name></name></expr>;</expr_stmt></then>
	<else pos:line="283" pos:column="9">else
		<expr_stmt><expr><name pos:line="284" pos:column="17">lastChild</name> <op:operator pos:line="284" pos:column="27">=</op:operator> <name><name pos:line="284" pos:column="29">removeThis</name><op:operator pos:line="284" pos:column="39">-&gt;</op:operator><name pos:line="284" pos:column="41">prev</name></name></expr>;</expr_stmt></else></if>

	<if pos:line="286" pos:column="9">if <condition pos:line="286" pos:column="12">( <expr><name><name pos:line="286" pos:column="14">removeThis</name><op:operator pos:line="286" pos:column="24">-&gt;</op:operator><name pos:line="286" pos:column="26">prev</name></name></expr> )</condition><then pos:line="286" pos:column="32">
		<expr_stmt><expr><name><name pos:line="287" pos:column="17">removeThis</name><op:operator pos:line="287" pos:column="27">-&gt;</op:operator><name pos:line="287" pos:column="29">prev</name><op:operator pos:line="287" pos:column="33">-&gt;</op:operator><name pos:line="287" pos:column="35">next</name></name> <op:operator pos:line="287" pos:column="40">=</op:operator> <name><name pos:line="287" pos:column="42">removeThis</name><op:operator pos:line="287" pos:column="52">-&gt;</op:operator><name pos:line="287" pos:column="54">next</name></name></expr>;</expr_stmt></then>
	<else pos:line="288" pos:column="9">else
		<expr_stmt><expr><name pos:line="289" pos:column="17">firstChild</name> <op:operator pos:line="289" pos:column="28">=</op:operator> <name><name pos:line="289" pos:column="30">removeThis</name><op:operator pos:line="289" pos:column="40">-&gt;</op:operator><name pos:line="289" pos:column="42">next</name></name></expr>;</expr_stmt></else></if>

	<expr_stmt><expr><op:operator pos:line="291" pos:column="9">delete</op:operator> <name pos:line="291" pos:column="16">removeThis</name></expr>;</expr_stmt>
	<return pos:line="292" pos:column="9">return <expr><lit:literal type="boolean" pos:line="292" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="295" pos:column="1">TiXmlNode</name><type:modifier pos:line="295" pos:column="10">*</type:modifier></type> <name><name pos:line="295" pos:column="12">TiXmlNode</name><op:operator pos:line="295" pos:column="21">::</op:operator><name pos:line="295" pos:column="23">FirstChild</name></name><parameter_list pos:line="295" pos:column="33">( <param><decl><type><specifier pos:line="295" pos:column="35">const</specifier> <name pos:line="295" pos:column="41">TCHAR</name> <type:modifier pos:line="295" pos:column="47">*</type:modifier></type> <name pos:line="295" pos:column="49">_value</name></decl></param> )</parameter_list> <specifier pos:line="295" pos:column="58">const</specifier>
<block pos:line="296" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="297" pos:column="9">TiXmlNode</name><type:modifier pos:line="297" pos:column="18">*</type:modifier></type> <name pos:line="297" pos:column="20">node</name></decl>;</decl_stmt>
	<for pos:line="298" pos:column="9">for ( <init><expr><name pos:line="298" pos:column="15">node</name> <op:operator pos:line="298" pos:column="20">=</op:operator> <name pos:line="298" pos:column="22">firstChild</name></expr>;</init> <condition><expr><name pos:line="298" pos:column="34">node</name></expr>;</condition> <incr><expr><name pos:line="298" pos:column="40">node</name> <op:operator pos:line="298" pos:column="45">=</op:operator> <name><name pos:line="298" pos:column="47">node</name><op:operator pos:line="298" pos:column="51">-&gt;</op:operator><name pos:line="298" pos:column="53">next</name></name></expr></incr> )
	<block pos:line="299" pos:column="9">{
		<if pos:line="300" pos:column="17">if <condition pos:line="300" pos:column="20">( <expr><call><name><name pos:line="300" pos:column="22">node</name><op:operator pos:line="300" pos:column="26">-&gt;</op:operator><name pos:line="300" pos:column="28">SValue</name></name><argument_list pos:line="300" pos:column="34">()</argument_list></call> <op:operator pos:line="300" pos:column="37">==</op:operator> <call><name pos:line="300" pos:column="40">TIXML_STRING</name><argument_list pos:line="300" pos:column="52">( <argument><expr><name pos:line="300" pos:column="54">_value</name></expr></argument> )</argument_list></call></expr>)</condition><then pos:line="300" pos:column="63">
			<return pos:line="301" pos:column="25">return <expr><name pos:line="301" pos:column="32">node</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="303" pos:column="9">return <expr><lit:literal type="number" pos:line="303" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="306" pos:column="1">TiXmlNode</name><type:modifier pos:line="306" pos:column="10">*</type:modifier></type> <name><name pos:line="306" pos:column="12">TiXmlNode</name><op:operator pos:line="306" pos:column="21">::</op:operator><name pos:line="306" pos:column="23">LastChild</name></name><parameter_list pos:line="306" pos:column="32">( <param><decl><type><specifier pos:line="306" pos:column="34">const</specifier> <name pos:line="306" pos:column="40">TCHAR</name> <type:modifier pos:line="306" pos:column="46">*</type:modifier></type> <name pos:line="306" pos:column="48">_value</name></decl></param> )</parameter_list> <specifier pos:line="306" pos:column="57">const</specifier>
<block pos:line="307" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="308" pos:column="9">TiXmlNode</name><type:modifier pos:line="308" pos:column="18">*</type:modifier></type> <name pos:line="308" pos:column="20">node</name></decl>;</decl_stmt>
	<for pos:line="309" pos:column="9">for ( <init><expr><name pos:line="309" pos:column="15">node</name> <op:operator pos:line="309" pos:column="20">=</op:operator> <name pos:line="309" pos:column="22">lastChild</name></expr>;</init> <condition><expr><name pos:line="309" pos:column="33">node</name></expr>;</condition> <incr><expr><name pos:line="309" pos:column="39">node</name> <op:operator pos:line="309" pos:column="44">=</op:operator> <name><name pos:line="309" pos:column="46">node</name><op:operator pos:line="309" pos:column="50">-&gt;</op:operator><name pos:line="309" pos:column="52">prev</name></name></expr></incr> )
	<block pos:line="310" pos:column="9">{
		<if pos:line="311" pos:column="17">if <condition pos:line="311" pos:column="20">( <expr><call><name><name pos:line="311" pos:column="22">node</name><op:operator pos:line="311" pos:column="26">-&gt;</op:operator><name pos:line="311" pos:column="28">SValue</name></name><argument_list pos:line="311" pos:column="34">()</argument_list></call> <op:operator pos:line="311" pos:column="37">==</op:operator> <call><name pos:line="311" pos:column="40">TIXML_STRING</name> <argument_list pos:line="311" pos:column="53">(<argument><expr><name pos:line="311" pos:column="54">_value</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="311" pos:column="62">
			<return pos:line="312" pos:column="25">return <expr><name pos:line="312" pos:column="32">node</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="314" pos:column="9">return <expr><lit:literal type="number" pos:line="314" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="317" pos:column="1">TiXmlNode</name><type:modifier pos:line="317" pos:column="10">*</type:modifier></type> <name><name pos:line="317" pos:column="12">TiXmlNode</name><op:operator pos:line="317" pos:column="21">::</op:operator><name pos:line="317" pos:column="23">IterateChildren</name></name><parameter_list pos:line="317" pos:column="38">( <param><decl><type><name pos:line="317" pos:column="40">TiXmlNode</name><type:modifier pos:line="317" pos:column="49">*</type:modifier></type> <name pos:line="317" pos:column="51">previous</name></decl></param> )</parameter_list> <specifier pos:line="317" pos:column="62">const</specifier>
<block pos:line="318" pos:column="1">{
	<if pos:line="319" pos:column="9">if <condition pos:line="319" pos:column="12">( <expr><op:operator pos:line="319" pos:column="14">!</op:operator><name pos:line="319" pos:column="15">previous</name></expr> )</condition><then pos:line="319" pos:column="25">
	<block pos:line="320" pos:column="9">{
		<return pos:line="321" pos:column="17">return <expr><call><name pos:line="321" pos:column="24">FirstChild</name><argument_list pos:line="321" pos:column="34">()</argument_list></call></expr>;</return>
	}</block></then>
	<else pos:line="323" pos:column="9">else
	<block pos:line="324" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="325" pos:column="17">assert</name><argument_list pos:line="325" pos:column="23">( <argument><expr><name><name pos:line="325" pos:column="25">previous</name><op:operator pos:line="325" pos:column="33">-&gt;</op:operator><name pos:line="325" pos:column="35">parent</name></name> <op:operator pos:line="325" pos:column="42">==</op:operator> <name pos:line="325" pos:column="45">this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="326" pos:column="17">return <expr><call><name><name pos:line="326" pos:column="24">previous</name><op:operator pos:line="326" pos:column="32">-&gt;</op:operator><name pos:line="326" pos:column="34">NextSibling</name></name><argument_list pos:line="326" pos:column="45">()</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="330" pos:column="1">TiXmlNode</name><type:modifier pos:line="330" pos:column="10">*</type:modifier></type> <name><name pos:line="330" pos:column="12">TiXmlNode</name><op:operator pos:line="330" pos:column="21">::</op:operator><name pos:line="330" pos:column="23">IterateChildren</name></name><parameter_list pos:line="330" pos:column="38">( <param><decl><type><specifier pos:line="330" pos:column="40">const</specifier> <name pos:line="330" pos:column="46">TCHAR</name> <type:modifier pos:line="330" pos:column="52">*</type:modifier></type> <name pos:line="330" pos:column="54">val</name></decl></param>, <param><decl><type><name pos:line="330" pos:column="59">TiXmlNode</name><type:modifier pos:line="330" pos:column="68">*</type:modifier></type> <name pos:line="330" pos:column="70">previous</name></decl></param> )</parameter_list> <specifier pos:line="330" pos:column="81">const</specifier>
<block pos:line="331" pos:column="1">{
	<if pos:line="332" pos:column="9">if <condition pos:line="332" pos:column="12">( <expr><op:operator pos:line="332" pos:column="14">!</op:operator><name pos:line="332" pos:column="15">previous</name></expr> )</condition><then pos:line="332" pos:column="25">
	<block pos:line="333" pos:column="9">{
		<return pos:line="334" pos:column="17">return <expr><call><name pos:line="334" pos:column="24">FirstChild</name><argument_list pos:line="334" pos:column="34">( <argument><expr><name pos:line="334" pos:column="36">val</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></then>
	<else pos:line="336" pos:column="9">else
	<block pos:line="337" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="338" pos:column="17">assert</name><argument_list pos:line="338" pos:column="23">( <argument><expr><name><name pos:line="338" pos:column="25">previous</name><op:operator pos:line="338" pos:column="33">-&gt;</op:operator><name pos:line="338" pos:column="35">parent</name></name> <op:operator pos:line="338" pos:column="42">==</op:operator> <name pos:line="338" pos:column="45">this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="339" pos:column="17">return <expr><call><name><name pos:line="339" pos:column="24">previous</name><op:operator pos:line="339" pos:column="32">-&gt;</op:operator><name pos:line="339" pos:column="34">NextSibling</name></name><argument_list pos:line="339" pos:column="45">( <argument><expr><name pos:line="339" pos:column="47">val</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="343" pos:column="1">TiXmlNode</name><type:modifier pos:line="343" pos:column="10">*</type:modifier></type> <name><name pos:line="343" pos:column="12">TiXmlNode</name><op:operator pos:line="343" pos:column="21">::</op:operator><name pos:line="343" pos:column="23">NextSibling</name></name><parameter_list pos:line="343" pos:column="34">( <param><decl><type><specifier pos:line="343" pos:column="36">const</specifier> <name pos:line="343" pos:column="42">TCHAR</name> <type:modifier pos:line="343" pos:column="48">*</type:modifier></type> <name pos:line="343" pos:column="50">_value</name></decl></param> )</parameter_list> <specifier pos:line="343" pos:column="59">const</specifier>
<block pos:line="344" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="345" pos:column="9">TiXmlNode</name><type:modifier pos:line="345" pos:column="18">*</type:modifier></type> <name pos:line="345" pos:column="20">node</name></decl>;</decl_stmt>
	<for pos:line="346" pos:column="9">for ( <init><expr><name pos:line="346" pos:column="15">node</name> <op:operator pos:line="346" pos:column="20">=</op:operator> <name pos:line="346" pos:column="22">next</name></expr>;</init> <condition><expr><name pos:line="346" pos:column="28">node</name></expr>;</condition> <incr><expr><name pos:line="346" pos:column="34">node</name> <op:operator pos:line="346" pos:column="39">=</op:operator> <name><name pos:line="346" pos:column="41">node</name><op:operator pos:line="346" pos:column="45">-&gt;</op:operator><name pos:line="346" pos:column="47">next</name></name></expr></incr> )
	<block pos:line="347" pos:column="9">{
		<if pos:line="348" pos:column="17">if <condition pos:line="348" pos:column="20">( <expr><call><name><name pos:line="348" pos:column="22">node</name><op:operator pos:line="348" pos:column="26">-&gt;</op:operator><name pos:line="348" pos:column="28">SValue</name></name><argument_list pos:line="348" pos:column="34">()</argument_list></call> <op:operator pos:line="348" pos:column="37">==</op:operator> <call><name pos:line="348" pos:column="40">TIXML_STRING</name> <argument_list pos:line="348" pos:column="53">(<argument><expr><name pos:line="348" pos:column="54">_value</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="348" pos:column="62">
			<return pos:line="349" pos:column="25">return <expr><name pos:line="349" pos:column="32">node</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="351" pos:column="9">return <expr><lit:literal type="number" pos:line="351" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>


<function><type><name pos:line="355" pos:column="1">TiXmlNode</name><type:modifier pos:line="355" pos:column="10">*</type:modifier></type> <name><name pos:line="355" pos:column="12">TiXmlNode</name><op:operator pos:line="355" pos:column="21">::</op:operator><name pos:line="355" pos:column="23">PreviousSibling</name></name><parameter_list pos:line="355" pos:column="38">( <param><decl><type><specifier pos:line="355" pos:column="40">const</specifier> <name pos:line="355" pos:column="46">TCHAR</name> <type:modifier pos:line="355" pos:column="52">*</type:modifier></type> <name pos:line="355" pos:column="54">_value</name></decl></param> )</parameter_list> <specifier pos:line="355" pos:column="63">const</specifier>
<block pos:line="356" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="357" pos:column="9">TiXmlNode</name><type:modifier pos:line="357" pos:column="18">*</type:modifier></type> <name pos:line="357" pos:column="20">node</name></decl>;</decl_stmt>
	<for pos:line="358" pos:column="9">for ( <init><expr><name pos:line="358" pos:column="15">node</name> <op:operator pos:line="358" pos:column="20">=</op:operator> <name pos:line="358" pos:column="22">prev</name></expr>;</init> <condition><expr><name pos:line="358" pos:column="28">node</name></expr>;</condition> <incr><expr><name pos:line="358" pos:column="34">node</name> <op:operator pos:line="358" pos:column="39">=</op:operator> <name><name pos:line="358" pos:column="41">node</name><op:operator pos:line="358" pos:column="45">-&gt;</op:operator><name pos:line="358" pos:column="47">prev</name></name></expr></incr> )
	<block pos:line="359" pos:column="9">{
		<if pos:line="360" pos:column="17">if <condition pos:line="360" pos:column="20">( <expr><call><name><name pos:line="360" pos:column="22">node</name><op:operator pos:line="360" pos:column="26">-&gt;</op:operator><name pos:line="360" pos:column="28">SValue</name></name><argument_list pos:line="360" pos:column="34">()</argument_list></call> <op:operator pos:line="360" pos:column="37">==</op:operator> <call><name pos:line="360" pos:column="40">TIXML_STRING</name> <argument_list pos:line="360" pos:column="53">(<argument><expr><name pos:line="360" pos:column="54">_value</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="360" pos:column="62">
			<return pos:line="361" pos:column="25">return <expr><name pos:line="361" pos:column="32">node</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="363" pos:column="9">return <expr><lit:literal type="number" pos:line="363" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="366" pos:column="1">void</name></type> <name><name pos:line="366" pos:column="6">TiXmlElement</name><op:operator pos:line="366" pos:column="18">::</op:operator><name pos:line="366" pos:column="20">RemoveAttribute</name></name><parameter_list pos:line="366" pos:column="35">( <param><decl><type><specifier pos:line="366" pos:column="37">const</specifier> <name pos:line="366" pos:column="43">TCHAR</name> <type:modifier pos:line="366" pos:column="49">*</type:modifier></type> <name pos:line="366" pos:column="51">name</name></decl></param> )</parameter_list>
<block pos:line="367" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="368" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="368" pos:column="23">*</type:modifier></type> <name pos:line="368" pos:column="25">node</name> <init pos:line="368" pos:column="30">= <expr><call><name><name pos:line="368" pos:column="32">attributeSet</name><op:operator pos:line="368" pos:column="44">.</op:operator><name pos:line="368" pos:column="45">Find</name></name><argument_list pos:line="368" pos:column="49">( <argument><expr><name pos:line="368" pos:column="51">name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="369" pos:column="9">if <condition pos:line="369" pos:column="12">( <expr><name pos:line="369" pos:column="14">node</name></expr> )</condition><then pos:line="369" pos:column="20">
	<block pos:line="370" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="371" pos:column="17">attributeSet</name><op:operator pos:line="371" pos:column="29">.</op:operator><name pos:line="371" pos:column="30">Remove</name></name><argument_list pos:line="371" pos:column="36">( <argument><expr><name pos:line="371" pos:column="38">node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="372" pos:column="17">delete</op:operator> <name pos:line="372" pos:column="24">node</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="376" pos:column="1">TiXmlElement</name><type:modifier pos:line="376" pos:column="13">*</type:modifier></type> <name><name pos:line="376" pos:column="15">TiXmlNode</name><op:operator pos:line="376" pos:column="24">::</op:operator><name pos:line="376" pos:column="26">FirstChildElement</name></name><parameter_list pos:line="376" pos:column="43">()</parameter_list> <specifier pos:line="376" pos:column="46">const</specifier>
<block pos:line="377" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="378" pos:column="9">TiXmlNode</name><type:modifier pos:line="378" pos:column="18">*</type:modifier></type> <name pos:line="378" pos:column="20">node</name></decl>;</decl_stmt>

	<for pos:line="380" pos:column="9">for (	<init><expr><name pos:line="380" pos:column="17">node</name> <op:operator pos:line="380" pos:column="22">=</op:operator> <call><name pos:line="380" pos:column="24">FirstChild</name><argument_list pos:line="380" pos:column="34">()</argument_list></call></expr>;</init>
	<condition><expr><name pos:line="381" pos:column="9">node</name></expr>;</condition>
	<incr><expr><name pos:line="382" pos:column="9">node</name> <op:operator pos:line="382" pos:column="14">=</op:operator> <call><name><name pos:line="382" pos:column="16">node</name><op:operator pos:line="382" pos:column="20">-&gt;</op:operator><name pos:line="382" pos:column="22">NextSibling</name></name><argument_list pos:line="382" pos:column="33">()</argument_list></call></expr></incr> )
	<block pos:line="383" pos:column="9">{
		<if pos:line="384" pos:column="17">if <condition pos:line="384" pos:column="20">( <expr><call><name><name pos:line="384" pos:column="22">node</name><op:operator pos:line="384" pos:column="26">-&gt;</op:operator><name pos:line="384" pos:column="28">ToElement</name></name><argument_list pos:line="384" pos:column="37">()</argument_list></call></expr> )</condition><then pos:line="384" pos:column="41">
			<return pos:line="385" pos:column="25">return <expr><call><name><name pos:line="385" pos:column="32">node</name><op:operator pos:line="385" pos:column="36">-&gt;</op:operator><name pos:line="385" pos:column="38">ToElement</name></name><argument_list pos:line="385" pos:column="47">()</argument_list></call></expr>;</return></then></if>
	}</block></for>
	<return pos:line="387" pos:column="9">return <expr><lit:literal type="number" pos:line="387" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="390" pos:column="1">TiXmlElement</name><type:modifier pos:line="390" pos:column="13">*</type:modifier></type> <name><name pos:line="390" pos:column="15">TiXmlNode</name><op:operator pos:line="390" pos:column="24">::</op:operator><name pos:line="390" pos:column="26">FirstChildElement</name></name><parameter_list pos:line="390" pos:column="43">( <param><decl><type><specifier pos:line="390" pos:column="45">const</specifier> <name pos:line="390" pos:column="51">TCHAR</name> <type:modifier pos:line="390" pos:column="57">*</type:modifier></type> <name pos:line="390" pos:column="59">_value</name></decl></param> )</parameter_list> <specifier pos:line="390" pos:column="68">const</specifier>
<block pos:line="391" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="392" pos:column="9">TiXmlNode</name><type:modifier pos:line="392" pos:column="18">*</type:modifier></type> <name pos:line="392" pos:column="20">node</name></decl>;</decl_stmt>

	<for pos:line="394" pos:column="9">for (	<init><expr><name pos:line="394" pos:column="17">node</name> <op:operator pos:line="394" pos:column="22">=</op:operator> <call><name pos:line="394" pos:column="24">FirstChild</name><argument_list pos:line="394" pos:column="34">( <argument><expr><name pos:line="394" pos:column="36">_value</name></expr></argument> )</argument_list></call></expr>;</init>
	<condition><expr><name pos:line="395" pos:column="9">node</name></expr>;</condition>
	<incr><expr><name pos:line="396" pos:column="9">node</name> <op:operator pos:line="396" pos:column="14">=</op:operator> <call><name><name pos:line="396" pos:column="16">node</name><op:operator pos:line="396" pos:column="20">-&gt;</op:operator><name pos:line="396" pos:column="22">NextSibling</name></name><argument_list pos:line="396" pos:column="33">( <argument><expr><name pos:line="396" pos:column="35">_value</name></expr></argument> )</argument_list></call></expr></incr> )
	<block pos:line="397" pos:column="9">{
		<if pos:line="398" pos:column="17">if <condition pos:line="398" pos:column="20">( <expr><call><name><name pos:line="398" pos:column="22">node</name><op:operator pos:line="398" pos:column="26">-&gt;</op:operator><name pos:line="398" pos:column="28">ToElement</name></name><argument_list pos:line="398" pos:column="37">()</argument_list></call></expr> )</condition><then pos:line="398" pos:column="41">
			<return pos:line="399" pos:column="25">return <expr><call><name><name pos:line="399" pos:column="32">node</name><op:operator pos:line="399" pos:column="36">-&gt;</op:operator><name pos:line="399" pos:column="38">ToElement</name></name><argument_list pos:line="399" pos:column="47">()</argument_list></call></expr>;</return></then></if>
	}</block></for>
	<return pos:line="401" pos:column="9">return <expr><lit:literal type="number" pos:line="401" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>


<function><type><name pos:line="405" pos:column="1">TiXmlElement</name><type:modifier pos:line="405" pos:column="13">*</type:modifier></type> <name><name pos:line="405" pos:column="15">TiXmlNode</name><op:operator pos:line="405" pos:column="24">::</op:operator><name pos:line="405" pos:column="26">NextSiblingElement</name></name><parameter_list pos:line="405" pos:column="44">()</parameter_list> <specifier pos:line="405" pos:column="47">const</specifier>
<block pos:line="406" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="407" pos:column="9">TiXmlNode</name><type:modifier pos:line="407" pos:column="18">*</type:modifier></type> <name pos:line="407" pos:column="20">node</name></decl>;</decl_stmt>

	<for pos:line="409" pos:column="9">for (	<init><expr><name pos:line="409" pos:column="17">node</name> <op:operator pos:line="409" pos:column="22">=</op:operator> <call><name pos:line="409" pos:column="24">NextSibling</name><argument_list pos:line="409" pos:column="35">()</argument_list></call></expr>;</init>
	<condition><expr><name pos:line="410" pos:column="9">node</name></expr>;</condition>
	<incr><expr><name pos:line="411" pos:column="9">node</name> <op:operator pos:line="411" pos:column="14">=</op:operator> <call><name><name pos:line="411" pos:column="16">node</name><op:operator pos:line="411" pos:column="20">-&gt;</op:operator><name pos:line="411" pos:column="22">NextSibling</name></name><argument_list pos:line="411" pos:column="33">()</argument_list></call></expr></incr> )
	<block pos:line="412" pos:column="9">{
		<if pos:line="413" pos:column="17">if <condition pos:line="413" pos:column="20">( <expr><call><name><name pos:line="413" pos:column="22">node</name><op:operator pos:line="413" pos:column="26">-&gt;</op:operator><name pos:line="413" pos:column="28">ToElement</name></name><argument_list pos:line="413" pos:column="37">()</argument_list></call></expr> )</condition><then pos:line="413" pos:column="41">
			<return pos:line="414" pos:column="25">return <expr><call><name><name pos:line="414" pos:column="32">node</name><op:operator pos:line="414" pos:column="36">-&gt;</op:operator><name pos:line="414" pos:column="38">ToElement</name></name><argument_list pos:line="414" pos:column="47">()</argument_list></call></expr>;</return></then></if>
	}</block></for>
	<return pos:line="416" pos:column="9">return <expr><lit:literal type="number" pos:line="416" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="419" pos:column="1">TiXmlElement</name><type:modifier pos:line="419" pos:column="13">*</type:modifier></type> <name><name pos:line="419" pos:column="15">TiXmlNode</name><op:operator pos:line="419" pos:column="24">::</op:operator><name pos:line="419" pos:column="26">NextSiblingElement</name></name><parameter_list pos:line="419" pos:column="44">( <param><decl><type><specifier pos:line="419" pos:column="46">const</specifier> <name pos:line="419" pos:column="52">TCHAR</name> <type:modifier pos:line="419" pos:column="58">*</type:modifier></type> <name pos:line="419" pos:column="60">_value</name></decl></param> )</parameter_list> <specifier pos:line="419" pos:column="69">const</specifier>
<block pos:line="420" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="421" pos:column="9">TiXmlNode</name><type:modifier pos:line="421" pos:column="18">*</type:modifier></type> <name pos:line="421" pos:column="20">node</name></decl>;</decl_stmt>

	<for pos:line="423" pos:column="9">for (	<init><expr><name pos:line="423" pos:column="17">node</name> <op:operator pos:line="423" pos:column="22">=</op:operator> <call><name pos:line="423" pos:column="24">NextSibling</name><argument_list pos:line="423" pos:column="35">( <argument><expr><name pos:line="423" pos:column="37">_value</name></expr></argument> )</argument_list></call></expr>;</init>
	<condition><expr><name pos:line="424" pos:column="9">node</name></expr>;</condition>
	<incr><expr><name pos:line="425" pos:column="9">node</name> <op:operator pos:line="425" pos:column="14">=</op:operator> <call><name><name pos:line="425" pos:column="16">node</name><op:operator pos:line="425" pos:column="20">-&gt;</op:operator><name pos:line="425" pos:column="22">NextSibling</name></name><argument_list pos:line="425" pos:column="33">( <argument><expr><name pos:line="425" pos:column="35">_value</name></expr></argument> )</argument_list></call></expr></incr> )
	<block pos:line="426" pos:column="9">{
		<if pos:line="427" pos:column="17">if <condition pos:line="427" pos:column="20">( <expr><call><name><name pos:line="427" pos:column="22">node</name><op:operator pos:line="427" pos:column="26">-&gt;</op:operator><name pos:line="427" pos:column="28">ToElement</name></name><argument_list pos:line="427" pos:column="37">()</argument_list></call></expr> )</condition><then pos:line="427" pos:column="41">
			<return pos:line="428" pos:column="25">return <expr><call><name><name pos:line="428" pos:column="32">node</name><op:operator pos:line="428" pos:column="36">-&gt;</op:operator><name pos:line="428" pos:column="38">ToElement</name></name><argument_list pos:line="428" pos:column="47">()</argument_list></call></expr>;</return></then></if>
	}</block></for>
	<return pos:line="430" pos:column="9">return <expr><lit:literal type="number" pos:line="430" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>



<function><type><name pos:line="435" pos:column="1">TiXmlDocument</name><type:modifier pos:line="435" pos:column="14">*</type:modifier></type> <name><name pos:line="435" pos:column="16">TiXmlNode</name><op:operator pos:line="435" pos:column="25">::</op:operator><name pos:line="435" pos:column="27">GetDocument</name></name><parameter_list pos:line="435" pos:column="38">()</parameter_list> <specifier pos:line="435" pos:column="41">const</specifier>
<block pos:line="436" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="437" pos:column="9">const</specifier> <name pos:line="437" pos:column="15">TiXmlNode</name><type:modifier pos:line="437" pos:column="24">*</type:modifier></type> <name pos:line="437" pos:column="26">node</name></decl>;</decl_stmt>

	<for pos:line="439" pos:column="9">for( <init><expr><name pos:line="439" pos:column="14">node</name> <op:operator pos:line="439" pos:column="19">=</op:operator> <name pos:line="439" pos:column="21">this</name></expr>;</init> <condition><expr><name pos:line="439" pos:column="27">node</name></expr>;</condition> <incr><expr><name pos:line="439" pos:column="33">node</name> <op:operator pos:line="439" pos:column="38">=</op:operator> <name><name pos:line="439" pos:column="40">node</name><op:operator pos:line="439" pos:column="44">-&gt;</op:operator><name pos:line="439" pos:column="46">parent</name></name></expr></incr> )
	<block pos:line="440" pos:column="9">{
		<if pos:line="441" pos:column="17">if <condition pos:line="441" pos:column="20">( <expr><call><name><name pos:line="441" pos:column="22">node</name><op:operator pos:line="441" pos:column="26">-&gt;</op:operator><name pos:line="441" pos:column="28">ToDocument</name></name><argument_list pos:line="441" pos:column="38">()</argument_list></call></expr> )</condition><then pos:line="441" pos:column="42">
			<return pos:line="442" pos:column="25">return <expr><call><name><name pos:line="442" pos:column="32">node</name><op:operator pos:line="442" pos:column="36">-&gt;</op:operator><name pos:line="442" pos:column="38">ToDocument</name></name><argument_list pos:line="442" pos:column="48">()</argument_list></call></expr>;</return></then></if>
	}</block></for>
	<return pos:line="444" pos:column="9">return <expr><lit:literal type="number" pos:line="444" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>


<constructor><name><name pos:line="448" pos:column="1">TiXmlElement</name><op:operator pos:line="448" pos:column="13">::</op:operator><name pos:line="448" pos:column="15">TiXmlElement</name></name> <parameter_list pos:line="448" pos:column="28">(<param><decl><type><specifier pos:line="448" pos:column="29">const</specifier> <name pos:line="448" pos:column="35">TCHAR</name> <type:modifier pos:line="448" pos:column="41">*</type:modifier></type> <name pos:line="448" pos:column="43">_value</name></decl></param>)</parameter_list>
<member_list pos:line="449" pos:column="1">: <call><name pos:line="449" pos:column="3">TiXmlNode</name><argument_list pos:line="449" pos:column="12">( <argument><expr><name><name pos:line="449" pos:column="14">TiXmlNode</name><op:operator pos:line="449" pos:column="23">::</op:operator><name pos:line="449" pos:column="25">ELEMENT</name></name></expr></argument> )</argument_list></call>
</member_list><block pos:line="450" pos:column="1">{
	<expr_stmt><expr><name pos:line="451" pos:column="9">firstChild</name> <op:operator pos:line="451" pos:column="20">=</op:operator> <name pos:line="451" pos:column="22">lastChild</name> <op:operator pos:line="451" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="451" pos:column="34">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="452" pos:column="9">value</name> <op:operator pos:line="452" pos:column="15">=</op:operator> <name pos:line="452" pos:column="17">_value</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="455" pos:column="1">TiXmlElement</name><op:operator pos:line="455" pos:column="13">::</op:operator>~<name pos:line="455" pos:column="16">TiXmlElement</name></name><parameter_list pos:line="455" pos:column="28">()</parameter_list>
<block pos:line="456" pos:column="1">{
	<while pos:line="457" pos:column="9">while<condition pos:line="457" pos:column="14">( <expr><call><name><name pos:line="457" pos:column="16">attributeSet</name><op:operator pos:line="457" pos:column="28">.</op:operator><name pos:line="457" pos:column="29">First</name></name><argument_list pos:line="457" pos:column="34">()</argument_list></call></expr> )</condition>
	<block pos:line="458" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="459" pos:column="17">TiXmlAttribute</name><type:modifier pos:line="459" pos:column="31">*</type:modifier></type> <name pos:line="459" pos:column="33">node</name> <init pos:line="459" pos:column="38">= <expr><call><name><name pos:line="459" pos:column="40">attributeSet</name><op:operator pos:line="459" pos:column="52">.</op:operator><name pos:line="459" pos:column="53">First</name></name><argument_list pos:line="459" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="460" pos:column="17">attributeSet</name><op:operator pos:line="460" pos:column="29">.</op:operator><name pos:line="460" pos:column="30">Remove</name></name><argument_list pos:line="460" pos:column="36">( <argument><expr><name pos:line="460" pos:column="38">node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="461" pos:column="17">delete</op:operator> <name pos:line="461" pos:column="24">node</name></expr>;</expr_stmt>
	}</block></while>
}</block></destructor>

<function><type><specifier pos:line="465" pos:column="1">const</specifier> <name pos:line="465" pos:column="7">TCHAR</name> <type:modifier pos:line="465" pos:column="13">*</type:modifier></type> <name><name pos:line="465" pos:column="15">TiXmlElement</name><op:operator pos:line="465" pos:column="27">::</op:operator><name pos:line="465" pos:column="29">Attribute</name></name><parameter_list pos:line="465" pos:column="38">( <param><decl><type><specifier pos:line="465" pos:column="40">const</specifier> <name pos:line="465" pos:column="46">TCHAR</name> <type:modifier pos:line="465" pos:column="52">*</type:modifier></type> <name pos:line="465" pos:column="54">name</name></decl></param> )</parameter_list> <specifier pos:line="465" pos:column="61">const</specifier>
<block pos:line="466" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="467" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="467" pos:column="23">*</type:modifier></type> <name pos:line="467" pos:column="25">node</name> <init pos:line="467" pos:column="30">= <expr><call><name><name pos:line="467" pos:column="32">attributeSet</name><op:operator pos:line="467" pos:column="44">.</op:operator><name pos:line="467" pos:column="45">Find</name></name><argument_list pos:line="467" pos:column="49">( <argument><expr><name pos:line="467" pos:column="51">name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="469" pos:column="9">if <condition pos:line="469" pos:column="12">( <expr><name pos:line="469" pos:column="14">node</name></expr> )</condition><then pos:line="469" pos:column="20">
		<return pos:line="470" pos:column="17">return <expr><call><name><name pos:line="470" pos:column="24">node</name><op:operator pos:line="470" pos:column="28">-&gt;</op:operator><name pos:line="470" pos:column="30">Value</name></name><argument_list pos:line="470" pos:column="35">()</argument_list></call></expr>;</return></then></if>

	<return pos:line="472" pos:column="9">return <expr><lit:literal type="number" pos:line="472" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>


<function><type><specifier pos:line="476" pos:column="1">const</specifier> <name pos:line="476" pos:column="7">TCHAR</name> <type:modifier pos:line="476" pos:column="13">*</type:modifier></type> <name><name pos:line="476" pos:column="15">TiXmlElement</name><op:operator pos:line="476" pos:column="27">::</op:operator><name pos:line="476" pos:column="29">Attribute</name></name><parameter_list pos:line="476" pos:column="38">( <param><decl><type><specifier pos:line="476" pos:column="40">const</specifier> <name pos:line="476" pos:column="46">TCHAR</name> <type:modifier pos:line="476" pos:column="52">*</type:modifier></type> <name pos:line="476" pos:column="54">name</name></decl></param>, <param><decl><type><name pos:line="476" pos:column="60">int</name><type:modifier pos:line="476" pos:column="63">*</type:modifier></type> <name pos:line="476" pos:column="65">i</name></decl></param> )</parameter_list> <specifier pos:line="476" pos:column="69">const</specifier>
<block pos:line="477" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="478" pos:column="9">const</specifier> <name pos:line="478" pos:column="15">TCHAR</name> <type:modifier pos:line="478" pos:column="21">*</type:modifier></type> <name pos:line="478" pos:column="23">s</name> <init pos:line="478" pos:column="25">= <expr><call><name pos:line="478" pos:column="27">Attribute</name><argument_list pos:line="478" pos:column="36">( <argument><expr><name pos:line="478" pos:column="38">name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="479" pos:column="9">if <condition pos:line="479" pos:column="12">( <expr><name pos:line="479" pos:column="14">i</name></expr> )</condition><then pos:line="479" pos:column="17">
	<block pos:line="480" pos:column="9">{
		<if pos:line="481" pos:column="17">if <condition pos:line="481" pos:column="20">( <expr><name pos:line="481" pos:column="22">s</name></expr> )</condition><then pos:line="481" pos:column="25">
			<expr_stmt><expr><op:operator pos:line="482" pos:column="25">*</op:operator><name pos:line="482" pos:column="26">i</name> <op:operator pos:line="482" pos:column="28">=</op:operator> <call><name pos:line="482" pos:column="30">generic_atoi</name><argument_list pos:line="482" pos:column="42">( <argument><expr><name pos:line="482" pos:column="44">s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="483" pos:column="17">else
			<expr_stmt><expr><op:operator pos:line="484" pos:column="25">*</op:operator><name pos:line="484" pos:column="26">i</name> <op:operator pos:line="484" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="484" pos:column="30">0</lit:literal></expr>;</expr_stmt></else></if>
	}</block></then></if>
	<return pos:line="486" pos:column="9">return <expr><name pos:line="486" pos:column="16">s</name></expr>;</return>
}</block></function>


<function><type><specifier pos:line="490" pos:column="1">const</specifier> <name pos:line="490" pos:column="7">TCHAR</name> <type:modifier pos:line="490" pos:column="13">*</type:modifier></type> <name><name pos:line="490" pos:column="15">TiXmlElement</name><op:operator pos:line="490" pos:column="27">::</op:operator><name pos:line="490" pos:column="29">Attribute</name></name><parameter_list pos:line="490" pos:column="38">( <param><decl><type><specifier pos:line="490" pos:column="40">const</specifier> <name pos:line="490" pos:column="46">TCHAR</name> <type:modifier pos:line="490" pos:column="52">*</type:modifier></type> <name pos:line="490" pos:column="54">name</name></decl></param>, <param><decl><type><name pos:line="490" pos:column="60">double</name><type:modifier pos:line="490" pos:column="66">*</type:modifier></type> <name pos:line="490" pos:column="68">d</name></decl></param> )</parameter_list> <specifier pos:line="490" pos:column="72">const</specifier>
<block pos:line="491" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="492" pos:column="9">const</specifier> <name pos:line="492" pos:column="15">TCHAR</name> <type:modifier pos:line="492" pos:column="21">*</type:modifier></type> <name pos:line="492" pos:column="23">s</name> <init pos:line="492" pos:column="25">= <expr><call><name pos:line="492" pos:column="27">Attribute</name><argument_list pos:line="492" pos:column="36">( <argument><expr><name pos:line="492" pos:column="38">name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="493" pos:column="9">if <condition pos:line="493" pos:column="12">( <expr><name pos:line="493" pos:column="14">d</name></expr> )</condition><then pos:line="493" pos:column="17">
	<block pos:line="494" pos:column="9">{
		<if pos:line="495" pos:column="17">if <condition pos:line="495" pos:column="20">( <expr><name pos:line="495" pos:column="22">s</name></expr> )</condition><then pos:line="495" pos:column="25">
			<expr_stmt><expr><op:operator pos:line="496" pos:column="25">*</op:operator><name pos:line="496" pos:column="26">d</name> <op:operator pos:line="496" pos:column="28">=</op:operator> <call><name pos:line="496" pos:column="30">generic_atof</name><argument_list pos:line="496" pos:column="42">( <argument><expr><name pos:line="496" pos:column="44">s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="497" pos:column="17">else
			<expr_stmt><expr><op:operator pos:line="498" pos:column="25">*</op:operator><name pos:line="498" pos:column="26">d</name> <op:operator pos:line="498" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="498" pos:column="30">0</lit:literal></expr>;</expr_stmt></else></if>
	}</block></then></if>
	<return pos:line="500" pos:column="9">return <expr><name pos:line="500" pos:column="16">s</name></expr>;</return>
}</block></function>


<function><type><name pos:line="504" pos:column="1">int</name></type> <name><name pos:line="504" pos:column="5">TiXmlElement</name><op:operator pos:line="504" pos:column="17">::</op:operator><name pos:line="504" pos:column="19">QueryIntAttribute</name></name><parameter_list pos:line="504" pos:column="36">( <param><decl><type><specifier pos:line="504" pos:column="38">const</specifier> <name pos:line="504" pos:column="44">TCHAR</name><type:modifier pos:line="504" pos:column="49">*</type:modifier></type> <name pos:line="504" pos:column="51">name</name></decl></param>, <param><decl><type><name pos:line="504" pos:column="57">int</name><type:modifier pos:line="504" pos:column="60">*</type:modifier></type> <name pos:line="504" pos:column="62">ival</name></decl></param> )</parameter_list> <specifier pos:line="504" pos:column="69">const</specifier>
<block pos:line="505" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="506" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="506" pos:column="23">*</type:modifier></type> <name pos:line="506" pos:column="25">node</name> <init pos:line="506" pos:column="30">= <expr><call><name><name pos:line="506" pos:column="32">attributeSet</name><op:operator pos:line="506" pos:column="44">.</op:operator><name pos:line="506" pos:column="45">Find</name></name><argument_list pos:line="506" pos:column="49">( <argument><expr><name pos:line="506" pos:column="51">name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="507" pos:column="9">if <condition pos:line="507" pos:column="12">( <expr><op:operator pos:line="507" pos:column="14">!</op:operator><name pos:line="507" pos:column="15">node</name></expr> )</condition><then pos:line="507" pos:column="21">
		<return pos:line="508" pos:column="17">return <expr><name pos:line="508" pos:column="24">TIXML_NO_ATTRIBUTE</name></expr>;</return></then></if>

	<return pos:line="510" pos:column="9">return <expr><call><name><name pos:line="510" pos:column="16">node</name><op:operator pos:line="510" pos:column="20">-&gt;</op:operator><name pos:line="510" pos:column="22">QueryIntValue</name></name><argument_list pos:line="510" pos:column="35">( <argument><expr><name pos:line="510" pos:column="37">ival</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="514" pos:column="1">int</name></type> <name><name pos:line="514" pos:column="5">TiXmlElement</name><op:operator pos:line="514" pos:column="17">::</op:operator><name pos:line="514" pos:column="19">QueryDoubleAttribute</name></name><parameter_list pos:line="514" pos:column="39">( <param><decl><type><specifier pos:line="514" pos:column="41">const</specifier> <name pos:line="514" pos:column="47">TCHAR</name><type:modifier pos:line="514" pos:column="52">*</type:modifier></type> <name pos:line="514" pos:column="54">name</name></decl></param>, <param><decl><type><name pos:line="514" pos:column="60">double</name><type:modifier pos:line="514" pos:column="66">*</type:modifier></type> <name pos:line="514" pos:column="68">dval</name></decl></param> )</parameter_list> <specifier pos:line="514" pos:column="75">const</specifier>
<block pos:line="515" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="516" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="516" pos:column="23">*</type:modifier></type> <name pos:line="516" pos:column="25">node</name> <init pos:line="516" pos:column="30">= <expr><call><name><name pos:line="516" pos:column="32">attributeSet</name><op:operator pos:line="516" pos:column="44">.</op:operator><name pos:line="516" pos:column="45">Find</name></name><argument_list pos:line="516" pos:column="49">( <argument><expr><name pos:line="516" pos:column="51">name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="517" pos:column="9">if <condition pos:line="517" pos:column="12">( <expr><op:operator pos:line="517" pos:column="14">!</op:operator><name pos:line="517" pos:column="15">node</name></expr> )</condition><then pos:line="517" pos:column="21">
		<return pos:line="518" pos:column="17">return <expr><name pos:line="518" pos:column="24">TIXML_NO_ATTRIBUTE</name></expr>;</return></then></if>

	<return pos:line="520" pos:column="9">return <expr><call><name><name pos:line="520" pos:column="16">node</name><op:operator pos:line="520" pos:column="20">-&gt;</op:operator><name pos:line="520" pos:column="22">QueryDoubleValue</name></name><argument_list pos:line="520" pos:column="38">( <argument><expr><name pos:line="520" pos:column="40">dval</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="524" pos:column="1">void</name></type> <name><name pos:line="524" pos:column="6">TiXmlElement</name><op:operator pos:line="524" pos:column="18">::</op:operator><name pos:line="524" pos:column="20">SetAttribute</name></name><parameter_list pos:line="524" pos:column="32">( <param><decl><type><specifier pos:line="524" pos:column="34">const</specifier> <name pos:line="524" pos:column="40">TCHAR</name> <type:modifier pos:line="524" pos:column="46">*</type:modifier></type> <name pos:line="524" pos:column="48">name</name></decl></param>, <param><decl><type><name pos:line="524" pos:column="54">int</name></type> <name pos:line="524" pos:column="58">val</name></decl></param> )</parameter_list>
<block pos:line="525" pos:column="1">{	
	<decl_stmt><decl><type><name pos:line="526" pos:column="9">TCHAR</name></type> <name><name pos:line="526" pos:column="15">buf</name><index pos:line="526" pos:column="18">[<expr><lit:literal type="number" pos:line="526" pos:column="19">64</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="527" pos:column="9">wsprintf</name><argument_list pos:line="527" pos:column="17">( <argument><expr><name pos:line="527" pos:column="19">buf</name></expr></argument>, <argument><expr><call><name pos:line="527" pos:column="24">TEXT</name><argument_list pos:line="527" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="527" pos:column="29">"%d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="527" pos:column="36">val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="528" pos:column="9">SetAttribute</name><argument_list pos:line="528" pos:column="21">( <argument><expr><name pos:line="528" pos:column="23">name</name></expr></argument>, <argument><expr><name pos:line="528" pos:column="29">buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="532" pos:column="1">void</name></type> <name><name pos:line="532" pos:column="6">TiXmlElement</name><op:operator pos:line="532" pos:column="18">::</op:operator><name pos:line="532" pos:column="20">SetAttribute</name></name><parameter_list pos:line="532" pos:column="32">( <param><decl><type><specifier pos:line="532" pos:column="34">const</specifier> <name pos:line="532" pos:column="40">TCHAR</name> <type:modifier pos:line="532" pos:column="46">*</type:modifier></type> <name pos:line="532" pos:column="48">name</name></decl></param>, <param><decl><type><specifier pos:line="532" pos:column="54">const</specifier> <name pos:line="532" pos:column="60">TCHAR</name> <type:modifier pos:line="532" pos:column="66">*</type:modifier></type> <name pos:line="532" pos:column="68">_value</name></decl></param> )</parameter_list>
<block pos:line="533" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="534" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="534" pos:column="23">*</type:modifier></type> <name pos:line="534" pos:column="25">node</name> <init pos:line="534" pos:column="30">= <expr><call><name><name pos:line="534" pos:column="32">attributeSet</name><op:operator pos:line="534" pos:column="44">.</op:operator><name pos:line="534" pos:column="45">Find</name></name><argument_list pos:line="534" pos:column="49">( <argument><expr><name pos:line="534" pos:column="51">name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="535" pos:column="9">if <condition pos:line="535" pos:column="12">( <expr><name pos:line="535" pos:column="14">node</name></expr> )</condition><then pos:line="535" pos:column="20">
	<block pos:line="536" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="537" pos:column="17">node</name><op:operator pos:line="537" pos:column="21">-&gt;</op:operator><name pos:line="537" pos:column="23">SetValue</name></name><argument_list pos:line="537" pos:column="31">( <argument><expr><name pos:line="537" pos:column="33">_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="538" pos:column="17">return;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="541" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="541" pos:column="23">*</type:modifier></type> <name pos:line="541" pos:column="25">attrib</name> <init pos:line="541" pos:column="32">= <expr><op:operator pos:line="541" pos:column="34">new</op:operator> <call><name pos:line="541" pos:column="38">TiXmlAttribute</name><argument_list pos:line="541" pos:column="52">( <argument><expr><name pos:line="541" pos:column="54">name</name></expr></argument>, <argument><expr><name pos:line="541" pos:column="60">_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="542" pos:column="9">if <condition pos:line="542" pos:column="12">( <expr><name pos:line="542" pos:column="14">attrib</name></expr> )</condition><then pos:line="542" pos:column="22">
	<block pos:line="543" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="544" pos:column="17">attributeSet</name><op:operator pos:line="544" pos:column="29">.</op:operator><name pos:line="544" pos:column="30">Add</name></name><argument_list pos:line="544" pos:column="33">( <argument><expr><name pos:line="544" pos:column="35">attrib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="546" pos:column="9">else
	<block pos:line="547" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="548" pos:column="17">TiXmlDocument</name><type:modifier pos:line="548" pos:column="30">*</type:modifier></type> <name pos:line="548" pos:column="32">document</name> <init pos:line="548" pos:column="41">= <expr><call><name pos:line="548" pos:column="43">GetDocument</name><argument_list pos:line="548" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="549" pos:column="17">if <condition pos:line="549" pos:column="20">( <expr><name pos:line="549" pos:column="22">document</name></expr> )</condition><then pos:line="549" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="549" pos:column="33">document</name><op:operator pos:line="549" pos:column="41">-&gt;</op:operator><name pos:line="549" pos:column="43">SetError</name></name><argument_list pos:line="549" pos:column="51">( <argument><expr><name pos:line="549" pos:column="53">TIXML_ERROR_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="549" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="549" pos:column="83">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="553" pos:column="1">void</name></type> <name><name pos:line="553" pos:column="6">TiXmlElement</name><op:operator pos:line="553" pos:column="18">::</op:operator><name pos:line="553" pos:column="20">Print</name></name><parameter_list pos:line="553" pos:column="25">( <param><decl><type><name pos:line="553" pos:column="27">FILE</name><type:modifier pos:line="553" pos:column="31">*</type:modifier></type> <name pos:line="553" pos:column="33">cfile</name></decl></param>, <param><decl><type><name pos:line="553" pos:column="40">int</name></type> <name pos:line="553" pos:column="44">depth</name></decl></param> )</parameter_list> <specifier pos:line="553" pos:column="52">const</specifier>
<block pos:line="554" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="555" pos:column="9">int</name></type> <name pos:line="555" pos:column="13">i</name></decl>;</decl_stmt>
	<for pos:line="556" pos:column="9">for ( <init><expr><name pos:line="556" pos:column="15">i</name><op:operator pos:line="556" pos:column="16">=</op:operator><lit:literal type="number" pos:line="556" pos:column="17">0</lit:literal></expr>;</init> <condition><expr><name pos:line="556" pos:column="20">i</name><op:operator pos:line="556" pos:column="21">&lt;</op:operator><name pos:line="556" pos:column="22">depth</name></expr>;</condition> <incr><expr><name pos:line="556" pos:column="29">i</name><op:operator pos:line="556" pos:column="30">++</op:operator></expr></incr> )
	<block pos:line="557" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="558" pos:column="17">generic_fprintf</name><argument_list pos:line="558" pos:column="32">( <argument><expr><name pos:line="558" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="558" pos:column="41">TEXT</name><argument_list pos:line="558" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="558" pos:column="46">"    "</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name pos:line="561" pos:column="9">generic_fprintf</name><argument_list pos:line="561" pos:column="24">( <argument><expr><name pos:line="561" pos:column="26">cfile</name></expr></argument>, <argument><expr><call><name pos:line="561" pos:column="33">TEXT</name><argument_list pos:line="561" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="561" pos:column="38">"&lt;%s"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="561" pos:column="46">value</name><op:operator pos:line="561" pos:column="51">.</op:operator><name pos:line="561" pos:column="52">c_str</name></name><argument_list pos:line="561" pos:column="57">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="563" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="563" pos:column="23">*</type:modifier></type> <name pos:line="563" pos:column="25">attrib</name></decl>;</decl_stmt>
	<for pos:line="564" pos:column="9">for ( <init><expr><name pos:line="564" pos:column="15">attrib</name> <op:operator pos:line="564" pos:column="22">=</op:operator> <call><name><name pos:line="564" pos:column="24">attributeSet</name><op:operator pos:line="564" pos:column="36">.</op:operator><name pos:line="564" pos:column="37">First</name></name><argument_list pos:line="564" pos:column="42">()</argument_list></call></expr>;</init> <condition><expr><name pos:line="564" pos:column="46">attrib</name></expr>;</condition> <incr><expr><name pos:line="564" pos:column="54">attrib</name> <op:operator pos:line="564" pos:column="61">=</op:operator> <call><name><name pos:line="564" pos:column="63">attrib</name><op:operator pos:line="564" pos:column="69">-&gt;</op:operator><name pos:line="564" pos:column="71">Next</name></name><argument_list pos:line="564" pos:column="75">()</argument_list></call></expr></incr> )
	<block pos:line="565" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="566" pos:column="17">generic_fprintf</name><argument_list pos:line="566" pos:column="32">( <argument><expr><name pos:line="566" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="566" pos:column="41">TEXT</name><argument_list pos:line="566" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="566" pos:column="46">" "</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="567" pos:column="17">attrib</name><op:operator pos:line="567" pos:column="23">-&gt;</op:operator><name pos:line="567" pos:column="25">Print</name></name><argument_list pos:line="567" pos:column="30">( <argument><expr><name pos:line="567" pos:column="32">cfile</name></expr></argument>, <argument><expr><name pos:line="567" pos:column="39">depth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<comment type="line" pos:line="570" pos:column="9">// There are 3 different formatting approaches:</comment>
	<comment type="line" pos:line="571" pos:column="9">// 1) An element without children is printed as a &lt;foo /&gt; node</comment>
	<comment type="line" pos:line="572" pos:column="9">// 2) An element with only a text child is printed as &lt;foo&gt; text &lt;/foo&gt;</comment>
	<comment type="line" pos:line="573" pos:column="9">// 3) An element with children is printed on multiple lines.</comment>
	<decl_stmt><decl><type><name pos:line="574" pos:column="9">TiXmlNode</name><type:modifier pos:line="574" pos:column="18">*</type:modifier></type> <name pos:line="574" pos:column="20">node</name></decl>;</decl_stmt>
	<if pos:line="575" pos:column="9">if <condition pos:line="575" pos:column="12">( <expr><op:operator pos:line="575" pos:column="14">!</op:operator><name pos:line="575" pos:column="15">firstChild</name></expr> )</condition><then pos:line="575" pos:column="27">
	<block pos:line="576" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="577" pos:column="17">generic_fprintf</name><argument_list pos:line="577" pos:column="32">( <argument><expr><name pos:line="577" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="577" pos:column="41">TEXT</name><argument_list pos:line="577" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="577" pos:column="46">" /&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="579" pos:column="9">else <if pos:line="579" pos:column="14">if <condition pos:line="579" pos:column="17">( <expr><name pos:line="579" pos:column="19">firstChild</name> <op:operator pos:line="579" pos:column="30">==</op:operator> <name pos:line="579" pos:column="33">lastChild</name> <op:operator pos:line="579" pos:column="43">&amp;&amp;</op:operator> <call><name><name pos:line="579" pos:column="46">firstChild</name><op:operator pos:line="579" pos:column="56">-&gt;</op:operator><name pos:line="579" pos:column="58">ToText</name></name><argument_list pos:line="579" pos:column="64">()</argument_list></call></expr> )</condition><then pos:line="579" pos:column="68">
	<block pos:line="580" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="581" pos:column="17">generic_fprintf</name><argument_list pos:line="581" pos:column="32">( <argument><expr><name pos:line="581" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="581" pos:column="41">TEXT</name><argument_list pos:line="581" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="581" pos:column="46">"&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="582" pos:column="17">firstChild</name><op:operator pos:line="582" pos:column="27">-&gt;</op:operator><name pos:line="582" pos:column="29">Print</name></name><argument_list pos:line="582" pos:column="34">( <argument><expr><name pos:line="582" pos:column="36">cfile</name></expr></argument>, <argument><expr><name pos:line="582" pos:column="43">depth</name> <op:operator pos:line="582" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="582" pos:column="51">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="583" pos:column="17">generic_fprintf</name><argument_list pos:line="583" pos:column="32">( <argument><expr><name pos:line="583" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="583" pos:column="41">TEXT</name><argument_list pos:line="583" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="583" pos:column="46">"&lt;/%s&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="583" pos:column="56">value</name><op:operator pos:line="583" pos:column="61">.</op:operator><name pos:line="583" pos:column="62">c_str</name></name><argument_list pos:line="583" pos:column="67">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="585" pos:column="9">else
	<block pos:line="586" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="587" pos:column="17">generic_fprintf</name><argument_list pos:line="587" pos:column="32">( <argument><expr><name pos:line="587" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="587" pos:column="41">TEXT</name><argument_list pos:line="587" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="587" pos:column="46">"&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<for pos:line="589" pos:column="17">for ( <init><expr><name pos:line="589" pos:column="23">node</name> <op:operator pos:line="589" pos:column="28">=</op:operator> <name pos:line="589" pos:column="30">firstChild</name></expr>;</init> <condition><expr><name pos:line="589" pos:column="42">node</name></expr>;</condition> <incr><expr><name pos:line="589" pos:column="48">node</name><op:operator pos:line="589" pos:column="52">=</op:operator><call><name><name pos:line="589" pos:column="53">node</name><op:operator pos:line="589" pos:column="57">-&gt;</op:operator><name pos:line="589" pos:column="59">NextSibling</name></name><argument_list pos:line="589" pos:column="70">()</argument_list></call></expr></incr> )
		<block pos:line="590" pos:column="17">{
			<if pos:line="591" pos:column="25">if <condition pos:line="591" pos:column="28">( <expr><op:operator pos:line="591" pos:column="30">!</op:operator><call><name><name pos:line="591" pos:column="31">node</name><op:operator pos:line="591" pos:column="35">-&gt;</op:operator><name pos:line="591" pos:column="37">ToText</name></name><argument_list pos:line="591" pos:column="43">()</argument_list></call></expr> )</condition><then pos:line="591" pos:column="47">
			<block pos:line="592" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="593" pos:column="33">generic_fprintf</name><argument_list pos:line="593" pos:column="48">( <argument><expr><name pos:line="593" pos:column="50">cfile</name></expr></argument>, <argument><expr><call><name pos:line="593" pos:column="57">TEXT</name><argument_list pos:line="593" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="593" pos:column="62">"\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="595" pos:column="25">node</name><op:operator pos:line="595" pos:column="29">-&gt;</op:operator><name pos:line="595" pos:column="31">Print</name></name><argument_list pos:line="595" pos:column="36">( <argument><expr><name pos:line="595" pos:column="38">cfile</name></expr></argument>, <argument><expr><name pos:line="595" pos:column="45">depth</name><op:operator pos:line="595" pos:column="50">+</op:operator><lit:literal type="number" pos:line="595" pos:column="51">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="597" pos:column="17">generic_fprintf</name><argument_list pos:line="597" pos:column="32">( <argument><expr><name pos:line="597" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="597" pos:column="41">TEXT</name><argument_list pos:line="597" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="597" pos:column="46">"\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<for pos:line="598" pos:column="17">for( <init><expr><name pos:line="598" pos:column="22">i</name><op:operator pos:line="598" pos:column="23">=</op:operator><lit:literal type="number" pos:line="598" pos:column="24">0</lit:literal></expr>;</init> <condition><expr><name pos:line="598" pos:column="27">i</name><op:operator pos:line="598" pos:column="28">&lt;</op:operator><name pos:line="598" pos:column="29">depth</name></expr>;</condition> <incr><expr><op:operator pos:line="598" pos:column="36">++</op:operator><name pos:line="598" pos:column="38">i</name></expr></incr> )
		<expr_stmt><expr><call><name pos:line="599" pos:column="17">generic_fprintf</name><argument_list pos:line="599" pos:column="32">( <argument><expr><name pos:line="599" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="599" pos:column="41">TEXT</name><argument_list pos:line="599" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="599" pos:column="46">"    "</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></for>
		<expr_stmt><expr><call><name pos:line="600" pos:column="17">generic_fprintf</name><argument_list pos:line="600" pos:column="32">( <argument><expr><name pos:line="600" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="600" pos:column="41">TEXT</name><argument_list pos:line="600" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="600" pos:column="46">"&lt;/%s&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="600" pos:column="56">value</name><op:operator pos:line="600" pos:column="61">.</op:operator><name pos:line="600" pos:column="62">c_str</name></name><argument_list pos:line="600" pos:column="67">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>
}</block></function>

<function><type><name pos:line="604" pos:column="1">void</name></type> <name><name pos:line="604" pos:column="6">TiXmlElement</name><op:operator pos:line="604" pos:column="18">::</op:operator><name pos:line="604" pos:column="20">StreamOut</name></name><parameter_list pos:line="604" pos:column="29">( <param><decl><type><name pos:line="604" pos:column="31">TIXML_OSTREAM</name> <type:modifier pos:line="604" pos:column="45">*</type:modifier></type> <name pos:line="604" pos:column="47">stream</name></decl></param> )</parameter_list> <specifier pos:line="604" pos:column="56">const</specifier>
<block pos:line="605" pos:column="1">{
	<expr_stmt><expr><op:operator pos:line="606" pos:column="9">(</op:operator><op:operator pos:line="606" pos:column="10">*</op:operator><name pos:line="606" pos:column="11">stream</name><op:operator pos:line="606" pos:column="17">)</op:operator> <op:operator pos:line="606" pos:column="19">&lt;&lt;</op:operator> <call><name pos:line="606" pos:column="22">TEXT</name><argument_list pos:line="606" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="606" pos:column="27">"&lt;"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="606" pos:column="32">&lt;&lt;</op:operator> <name pos:line="606" pos:column="35">value</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="608" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="608" pos:column="23">*</type:modifier></type> <name pos:line="608" pos:column="25">attrib</name></decl>;</decl_stmt>
	<for pos:line="609" pos:column="9">for ( <init><expr><name pos:line="609" pos:column="15">attrib</name> <op:operator pos:line="609" pos:column="22">=</op:operator> <call><name><name pos:line="609" pos:column="24">attributeSet</name><op:operator pos:line="609" pos:column="36">.</op:operator><name pos:line="609" pos:column="37">First</name></name><argument_list pos:line="609" pos:column="42">()</argument_list></call></expr>;</init> <condition><expr><name pos:line="609" pos:column="46">attrib</name></expr>;</condition> <incr><expr><name pos:line="609" pos:column="54">attrib</name> <op:operator pos:line="609" pos:column="61">=</op:operator> <call><name><name pos:line="609" pos:column="63">attrib</name><op:operator pos:line="609" pos:column="69">-&gt;</op:operator><name pos:line="609" pos:column="71">Next</name></name><argument_list pos:line="609" pos:column="75">()</argument_list></call></expr></incr> )
	<block pos:line="610" pos:column="9">{	
		<expr_stmt><expr><op:operator pos:line="611" pos:column="17">(</op:operator><op:operator pos:line="611" pos:column="18">*</op:operator><name pos:line="611" pos:column="19">stream</name><op:operator pos:line="611" pos:column="25">)</op:operator> <op:operator pos:line="611" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="611" pos:column="30">TEXT</name><argument_list pos:line="611" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="611" pos:column="35">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="612" pos:column="17">attrib</name><op:operator pos:line="612" pos:column="23">-&gt;</op:operator><name pos:line="612" pos:column="25">StreamOut</name></name><argument_list pos:line="612" pos:column="34">( <argument><expr><name pos:line="612" pos:column="36">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<comment type="line" pos:line="615" pos:column="9">// If this node has children, give it a closing tag. Else</comment>
	<comment type="line" pos:line="616" pos:column="9">// make it an empty tag.</comment>
	<decl_stmt><decl><type><name pos:line="617" pos:column="9">TiXmlNode</name><type:modifier pos:line="617" pos:column="18">*</type:modifier></type> <name pos:line="617" pos:column="20">node</name></decl>;</decl_stmt>
	<if pos:line="618" pos:column="9">if <condition pos:line="618" pos:column="12">( <expr><name pos:line="618" pos:column="14">firstChild</name></expr> )</condition><then pos:line="618" pos:column="26">
	<block pos:line="619" pos:column="9">{ 		
		<expr_stmt><expr><op:operator pos:line="620" pos:column="17">(</op:operator><op:operator pos:line="620" pos:column="18">*</op:operator><name pos:line="620" pos:column="19">stream</name><op:operator pos:line="620" pos:column="25">)</op:operator> <op:operator pos:line="620" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="620" pos:column="30">TEXT</name><argument_list pos:line="620" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="620" pos:column="35">"&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for pos:line="622" pos:column="17">for ( <init><expr><name pos:line="622" pos:column="23">node</name> <op:operator pos:line="622" pos:column="28">=</op:operator> <name pos:line="622" pos:column="30">firstChild</name></expr>;</init> <condition><expr><name pos:line="622" pos:column="42">node</name></expr>;</condition> <incr><expr><name pos:line="622" pos:column="48">node</name><op:operator pos:line="622" pos:column="52">=</op:operator><call><name><name pos:line="622" pos:column="53">node</name><op:operator pos:line="622" pos:column="57">-&gt;</op:operator><name pos:line="622" pos:column="59">NextSibling</name></name><argument_list pos:line="622" pos:column="70">()</argument_list></call></expr></incr> )
		<block pos:line="623" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="624" pos:column="25">node</name><op:operator pos:line="624" pos:column="29">-&gt;</op:operator><name pos:line="624" pos:column="31">StreamOut</name></name><argument_list pos:line="624" pos:column="40">( <argument><expr><name pos:line="624" pos:column="42">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><op:operator pos:line="626" pos:column="17">(</op:operator><op:operator pos:line="626" pos:column="18">*</op:operator><name pos:line="626" pos:column="19">stream</name><op:operator pos:line="626" pos:column="25">)</op:operator> <op:operator pos:line="626" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="626" pos:column="30">TEXT</name><argument_list pos:line="626" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="626" pos:column="35">"&lt;/"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="626" pos:column="41">&lt;&lt;</op:operator> <name pos:line="626" pos:column="44">value</name> <op:operator pos:line="626" pos:column="50">&lt;&lt;</op:operator> <call><name pos:line="626" pos:column="53">TEXT</name><argument_list pos:line="626" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="626" pos:column="58">"&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="628" pos:column="9">else
	<block pos:line="629" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="630" pos:column="17">(</op:operator><op:operator pos:line="630" pos:column="18">*</op:operator><name pos:line="630" pos:column="19">stream</name><op:operator pos:line="630" pos:column="25">)</op:operator> <op:operator pos:line="630" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="630" pos:column="30">TEXT</name><argument_list pos:line="630" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="630" pos:column="35">" /&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="634" pos:column="1">TiXmlNode</name><type:modifier pos:line="634" pos:column="10">*</type:modifier></type> <name><name pos:line="634" pos:column="12">TiXmlElement</name><op:operator pos:line="634" pos:column="24">::</op:operator><name pos:line="634" pos:column="26">Clone</name></name><parameter_list pos:line="634" pos:column="31">()</parameter_list> <specifier pos:line="634" pos:column="34">const</specifier>
<block pos:line="635" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="636" pos:column="9">TiXmlElement</name><type:modifier pos:line="636" pos:column="21">*</type:modifier></type> <name pos:line="636" pos:column="23">clone</name> <init pos:line="636" pos:column="29">= <expr><op:operator pos:line="636" pos:column="31">new</op:operator> <call><name pos:line="636" pos:column="35">TiXmlElement</name><argument_list pos:line="636" pos:column="47">( <argument><expr><call><name pos:line="636" pos:column="49">Value</name><argument_list pos:line="636" pos:column="54">()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="637" pos:column="9">if <condition pos:line="637" pos:column="12">( <expr><op:operator pos:line="637" pos:column="14">!</op:operator><name pos:line="637" pos:column="15">clone</name></expr> )</condition><then pos:line="637" pos:column="22">
		<return pos:line="638" pos:column="17">return <expr><lit:literal type="number" pos:line="638" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name pos:line="640" pos:column="9">CopyToClone</name><argument_list pos:line="640" pos:column="20">( <argument><expr><name pos:line="640" pos:column="22">clone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="642" pos:column="9">// Clone the attributes, then clone the children.</comment>
	<decl_stmt><decl><type><name pos:line="643" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="643" pos:column="23">*</type:modifier></type> <name pos:line="643" pos:column="25">attribute</name> <init pos:line="643" pos:column="35">= <expr><lit:literal type="number" pos:line="643" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="644" pos:column="9">for(	<init><expr><name pos:line="644" pos:column="17">attribute</name> <op:operator pos:line="644" pos:column="27">=</op:operator> <call><name><name pos:line="644" pos:column="29">attributeSet</name><op:operator pos:line="644" pos:column="41">.</op:operator><name pos:line="644" pos:column="42">First</name></name><argument_list pos:line="644" pos:column="47">()</argument_list></call></expr>;</init>
	<condition><expr><name pos:line="645" pos:column="9">attribute</name></expr>;</condition>
	<incr><expr><name pos:line="646" pos:column="9">attribute</name> <op:operator pos:line="646" pos:column="19">=</op:operator> <call><name><name pos:line="646" pos:column="21">attribute</name><op:operator pos:line="646" pos:column="30">-&gt;</op:operator><name pos:line="646" pos:column="32">Next</name></name><argument_list pos:line="646" pos:column="36">()</argument_list></call></expr></incr> )
	<block pos:line="647" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="648" pos:column="17">clone</name><op:operator pos:line="648" pos:column="22">-&gt;</op:operator><name pos:line="648" pos:column="24">SetAttribute</name></name><argument_list pos:line="648" pos:column="36">( <argument><expr><call><name><name pos:line="648" pos:column="38">attribute</name><op:operator pos:line="648" pos:column="47">-&gt;</op:operator><name pos:line="648" pos:column="49">Name</name></name><argument_list pos:line="648" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="648" pos:column="57">attribute</name><op:operator pos:line="648" pos:column="66">-&gt;</op:operator><name pos:line="648" pos:column="68">Value</name></name><argument_list pos:line="648" pos:column="73">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="651" pos:column="9">TiXmlNode</name><type:modifier pos:line="651" pos:column="18">*</type:modifier></type> <name pos:line="651" pos:column="20">node</name> <init pos:line="651" pos:column="25">= <expr><lit:literal type="number" pos:line="651" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="652" pos:column="9">for ( <init><expr><name pos:line="652" pos:column="15">node</name> <op:operator pos:line="652" pos:column="20">=</op:operator> <name pos:line="652" pos:column="22">firstChild</name></expr>;</init> <condition><expr><name pos:line="652" pos:column="34">node</name></expr>;</condition> <incr><expr><name pos:line="652" pos:column="40">node</name> <op:operator pos:line="652" pos:column="45">=</op:operator> <call><name><name pos:line="652" pos:column="47">node</name><op:operator pos:line="652" pos:column="51">-&gt;</op:operator><name pos:line="652" pos:column="53">NextSibling</name></name><argument_list pos:line="652" pos:column="64">()</argument_list></call></expr></incr> )
	<block pos:line="653" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="654" pos:column="17">clone</name><op:operator pos:line="654" pos:column="22">-&gt;</op:operator><name pos:line="654" pos:column="24">LinkEndChild</name></name><argument_list pos:line="654" pos:column="36">( <argument><expr><call><name><name pos:line="654" pos:column="38">node</name><op:operator pos:line="654" pos:column="42">-&gt;</op:operator><name pos:line="654" pos:column="44">Clone</name></name><argument_list pos:line="654" pos:column="49">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return pos:line="656" pos:column="9">return <expr><name pos:line="656" pos:column="16">clone</name></expr>;</return>
}</block></function>


<constructor><name><name pos:line="660" pos:column="1">TiXmlDocument</name><op:operator pos:line="660" pos:column="14">::</op:operator><name pos:line="660" pos:column="16">TiXmlDocument</name></name><parameter_list pos:line="660" pos:column="29">()</parameter_list> <member_list pos:line="660" pos:column="32">: <call><name pos:line="660" pos:column="34">TiXmlNode</name><argument_list pos:line="660" pos:column="43">( <argument><expr><name><name pos:line="660" pos:column="45">TiXmlNode</name><op:operator pos:line="660" pos:column="54">::</op:operator><name pos:line="660" pos:column="56">DOCUMENT</name></name></expr></argument> )</argument_list></call>
</member_list><block pos:line="661" pos:column="1">{
	<expr_stmt><expr><name pos:line="662" pos:column="9">tabsize</name> <op:operator pos:line="662" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="662" pos:column="19">4</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="663" pos:column="9">ClearError</name><argument_list pos:line="663" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name pos:line="666" pos:column="1">TiXmlDocument</name><op:operator pos:line="666" pos:column="14">::</op:operator><name pos:line="666" pos:column="16">TiXmlDocument</name></name><parameter_list pos:line="666" pos:column="29">( <param><decl><type><specifier pos:line="666" pos:column="31">const</specifier> <name pos:line="666" pos:column="37">TCHAR</name> <type:modifier pos:line="666" pos:column="43">*</type:modifier></type> <name pos:line="666" pos:column="45">documentName</name></decl></param> )</parameter_list> <member_list pos:line="666" pos:column="60">: <call><name pos:line="666" pos:column="62">TiXmlNode</name><argument_list pos:line="666" pos:column="71">( <argument><expr><name><name pos:line="666" pos:column="73">TiXmlNode</name><op:operator pos:line="666" pos:column="82">::</op:operator><name pos:line="666" pos:column="84">DOCUMENT</name></name></expr></argument> )</argument_list></call>
</member_list><block pos:line="667" pos:column="1">{
	<expr_stmt><expr><name pos:line="668" pos:column="9">tabsize</name> <op:operator pos:line="668" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="668" pos:column="19">4</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="669" pos:column="9">value</name> <op:operator pos:line="669" pos:column="15">=</op:operator> <name pos:line="669" pos:column="17">documentName</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="670" pos:column="9">ClearError</name><argument_list pos:line="670" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="673" pos:column="1">bool</name></type> <name><name pos:line="673" pos:column="6">TiXmlDocument</name><op:operator pos:line="673" pos:column="19">::</op:operator><name pos:line="673" pos:column="21">LoadFile</name></name><parameter_list pos:line="673" pos:column="29">()</parameter_list>
<block pos:line="674" pos:column="1">{
	<comment type="line" pos:line="675" pos:column="9">// See STL_STRING_BUG below.</comment>
	<function_decl><type><name pos:line="676" pos:column="9">StringToBuffer</name></type> <name pos:line="676" pos:column="24">buf</name><parameter_list pos:line="676" pos:column="27">( <param><decl><type><name pos:line="676" pos:column="29">value</name></type></decl></param> )</parameter_list>;</function_decl>

	<if pos:line="678" pos:column="9">if <condition pos:line="678" pos:column="12">( <expr><name><name pos:line="678" pos:column="14">buf</name><op:operator pos:line="678" pos:column="17">.</op:operator><name pos:line="678" pos:column="18">buffer</name></name> <op:operator pos:line="678" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="678" pos:column="28">LoadFile</name><argument_list pos:line="678" pos:column="36">( <argument><expr><name><name pos:line="678" pos:column="38">buf</name><op:operator pos:line="678" pos:column="41">.</op:operator><name pos:line="678" pos:column="42">buffer</name></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="678" pos:column="52">
		<return pos:line="679" pos:column="17">return <expr><lit:literal type="boolean" pos:line="679" pos:column="24">true</lit:literal></expr>;</return></then></if>

	<return pos:line="681" pos:column="9">return <expr><lit:literal type="boolean" pos:line="681" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>


<function><type><name pos:line="685" pos:column="1">bool</name></type> <name><name pos:line="685" pos:column="6">TiXmlDocument</name><op:operator pos:line="685" pos:column="19">::</op:operator><name pos:line="685" pos:column="21">SaveFile</name></name><parameter_list pos:line="685" pos:column="29">()</parameter_list> <specifier pos:line="685" pos:column="32">const</specifier>
<block pos:line="686" pos:column="1">{
	<comment type="line" pos:line="687" pos:column="9">// See STL_STRING_BUG below.</comment>
	<function_decl><type><name pos:line="688" pos:column="9">StringToBuffer</name></type> <name pos:line="688" pos:column="24">buf</name><parameter_list pos:line="688" pos:column="27">( <param><decl><type><name pos:line="688" pos:column="29">value</name></type></decl></param> )</parameter_list>;</function_decl>

	<if pos:line="690" pos:column="9">if <condition pos:line="690" pos:column="12">( <expr><name><name pos:line="690" pos:column="14">buf</name><op:operator pos:line="690" pos:column="17">.</op:operator><name pos:line="690" pos:column="18">buffer</name></name> <op:operator pos:line="690" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="690" pos:column="28">SaveFile</name><argument_list pos:line="690" pos:column="36">( <argument><expr><name><name pos:line="690" pos:column="38">buf</name><op:operator pos:line="690" pos:column="41">.</op:operator><name pos:line="690" pos:column="42">buffer</name></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="690" pos:column="52">
		<return pos:line="691" pos:column="17">return <expr><lit:literal type="boolean" pos:line="691" pos:column="24">true</lit:literal></expr>;</return></then></if>

	<return pos:line="693" pos:column="9">return <expr><lit:literal type="boolean" pos:line="693" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="696" pos:column="1">bool</name></type> <name><name pos:line="696" pos:column="6">TiXmlDocument</name><op:operator pos:line="696" pos:column="19">::</op:operator><name pos:line="696" pos:column="21">LoadFile</name></name><parameter_list pos:line="696" pos:column="29">( <param><decl><type><specifier pos:line="696" pos:column="31">const</specifier> <name pos:line="696" pos:column="37">TCHAR</name><type:modifier pos:line="696" pos:column="42">*</type:modifier></type> <name pos:line="696" pos:column="44">filename</name></decl></param> )</parameter_list>
<block pos:line="697" pos:column="1">{
	<comment type="line" pos:line="698" pos:column="9">// Delete the existing data:</comment>
	<expr_stmt><expr><call><name pos:line="699" pos:column="9">Clear</name><argument_list pos:line="699" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="700" pos:column="9">location</name><op:operator pos:line="700" pos:column="17">.</op:operator><name pos:line="700" pos:column="18">Clear</name></name><argument_list pos:line="700" pos:column="23">()</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="702" pos:column="9">// There was a really terrifying little bug here. The code:</comment>
	<comment type="line" pos:line="703" pos:column="9">//		value = filename</comment>
	<comment type="line" pos:line="704" pos:column="9">// in the STL case, cause the assignment method of the string to</comment>
	<comment type="line" pos:line="705" pos:column="9">// be called. What is strange, is that the string had the same</comment>
	<comment type="line" pos:line="706" pos:column="9">// address as it's c_str() method, and so bad things happen. Looks</comment>
	<comment type="line" pos:line="707" pos:column="9">// like a bug in the Microsoft STL implementation.</comment>
	<comment type="line" pos:line="708" pos:column="9">// See STL_STRING_BUG above.</comment>
	<comment type="line" pos:line="709" pos:column="9">// Fixed with the StringToBuffer class.</comment>
	<expr_stmt><expr><name pos:line="710" pos:column="9">value</name> <op:operator pos:line="710" pos:column="15">=</op:operator> <name pos:line="710" pos:column="17">filename</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="712" pos:column="9">FILE</name><type:modifier pos:line="712" pos:column="13">*</type:modifier></type> <name pos:line="712" pos:column="15">file</name> <init pos:line="712" pos:column="20">= <expr><call><name pos:line="712" pos:column="22">generic_fopen</name><argument_list pos:line="712" pos:column="35">( <argument><expr><call><name><name pos:line="712" pos:column="37">value</name><op:operator pos:line="712" pos:column="42">.</op:operator><name pos:line="712" pos:column="43">c_str</name></name> <argument_list pos:line="712" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="712" pos:column="53">TEXT</name><argument_list pos:line="712" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="712" pos:column="58">"r"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="714" pos:column="9">if <condition pos:line="714" pos:column="12">( <expr><name pos:line="714" pos:column="14">file</name></expr> )</condition><then pos:line="714" pos:column="20">
	<block pos:line="715" pos:column="9">{
		<comment type="line" pos:line="716" pos:column="17">// Get the file size, so we can pre-allocate the generic_string. HUGE speed impact.</comment>
		<decl_stmt><decl><type><name pos:line="717" pos:column="17">long</name></type> <name pos:line="717" pos:column="22">length</name> <init pos:line="717" pos:column="29">= <expr><lit:literal type="number" pos:line="717" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="718" pos:column="17">fseek</name><argument_list pos:line="718" pos:column="22">( <argument><expr><name pos:line="718" pos:column="24">file</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="718" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><name pos:line="718" pos:column="33">SEEK_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="719" pos:column="17">length</name> <op:operator pos:line="719" pos:column="24">=</op:operator> <call><name pos:line="719" pos:column="26">ftell</name><argument_list pos:line="719" pos:column="31">( <argument><expr><name pos:line="719" pos:column="33">file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="720" pos:column="17">fseek</name><argument_list pos:line="720" pos:column="22">( <argument><expr><name pos:line="720" pos:column="24">file</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="720" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><name pos:line="720" pos:column="33">SEEK_SET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="722" pos:column="17">// Strange case, but good to handle up front.</comment>
		<if pos:line="723" pos:column="17">if <condition pos:line="723" pos:column="20">( <expr><name pos:line="723" pos:column="22">length</name> <op:operator pos:line="723" pos:column="29">==</op:operator> <lit:literal type="number" pos:line="723" pos:column="32">0</lit:literal></expr> )</condition><then pos:line="723" pos:column="35">
		<block pos:line="724" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="725" pos:column="25">fclose</name><argument_list pos:line="725" pos:column="31">( <argument><expr><name pos:line="725" pos:column="33">file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="726" pos:column="25">return <expr><lit:literal type="boolean" pos:line="726" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<comment type="line" pos:line="729" pos:column="17">// If we have a file, assume it is all one big XML file, and read it in.</comment>
		<comment type="line" pos:line="730" pos:column="17">// The document parser may decide the document ends sooner than the entire file, however.</comment>
		<decl_stmt><decl><type><name pos:line="731" pos:column="17">TIXML_STRING</name></type> <name pos:line="731" pos:column="30">data</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="732" pos:column="17">data</name><op:operator pos:line="732" pos:column="21">.</op:operator><name pos:line="732" pos:column="22">reserve</name></name><argument_list pos:line="732" pos:column="29">( <argument><expr><name pos:line="732" pos:column="31">length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier pos:line="734" pos:column="17">const</specifier> <name pos:line="734" pos:column="23">int</name></type> <name pos:line="734" pos:column="27">BUF_SIZE</name> <init pos:line="734" pos:column="36">= <expr><lit:literal type="number" pos:line="734" pos:column="38">2048</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="735" pos:column="17">TCHAR</name></type> <name><name pos:line="735" pos:column="23">buf</name><index pos:line="735" pos:column="26">[<expr><name pos:line="735" pos:column="27">BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

		<while pos:line="737" pos:column="17">while<condition pos:line="737" pos:column="22">( <expr><call><name pos:line="737" pos:column="24">generic_fgets</name><argument_list pos:line="737" pos:column="37">( <argument><expr><name pos:line="737" pos:column="39">buf</name></expr></argument>, <argument><expr><name pos:line="737" pos:column="44">BUF_SIZE</name></expr></argument>, <argument><expr><name pos:line="737" pos:column="54">file</name></expr></argument> )</argument_list></call></expr> )</condition>
		<block pos:line="738" pos:column="17">{
			<expr_stmt><expr><name pos:line="739" pos:column="25">data</name> <op:operator pos:line="739" pos:column="30">+=</op:operator> <name pos:line="739" pos:column="33">buf</name></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name pos:line="741" pos:column="17">fclose</name><argument_list pos:line="741" pos:column="23">( <argument><expr><name pos:line="741" pos:column="25">file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="743" pos:column="17">Parse</name><argument_list pos:line="743" pos:column="22">( <argument><expr><call><name><name pos:line="743" pos:column="24">data</name><op:operator pos:line="743" pos:column="28">.</op:operator><name pos:line="743" pos:column="29">c_str</name></name><argument_list pos:line="743" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="743" pos:column="38">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<if pos:line="745" pos:column="17">if <condition pos:line="745" pos:column="20">(  <expr><call><name pos:line="745" pos:column="23">Error</name><argument_list pos:line="745" pos:column="28">()</argument_list></call></expr> )</condition><then pos:line="745" pos:column="32">
            <return pos:line="746" pos:column="13">return <expr><lit:literal type="boolean" pos:line="746" pos:column="20">false</lit:literal></expr>;</return></then>
        <else pos:line="747" pos:column="9">else
			<return pos:line="748" pos:column="25">return <expr><lit:literal type="boolean" pos:line="748" pos:column="32">true</lit:literal></expr>;</return></else></if>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="750" pos:column="9">SetError</name><argument_list pos:line="750" pos:column="17">( <argument><expr><name pos:line="750" pos:column="19">TIXML_ERROR_OPENING_FILE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="750" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="750" pos:column="48">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return pos:line="751" pos:column="9">return <expr><lit:literal type="boolean" pos:line="751" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="754" pos:column="1">bool</name></type> <name><name pos:line="754" pos:column="6">TiXmlDocument</name><op:operator pos:line="754" pos:column="19">::</op:operator><name pos:line="754" pos:column="21">SaveFile</name></name><parameter_list pos:line="754" pos:column="29">( <param><decl><type><specifier pos:line="754" pos:column="31">const</specifier> <name pos:line="754" pos:column="37">TCHAR</name> <type:modifier pos:line="754" pos:column="43">*</type:modifier></type> <name pos:line="754" pos:column="45">filename</name></decl></param> )</parameter_list> <specifier pos:line="754" pos:column="56">const</specifier>
<block pos:line="755" pos:column="1">{
	<comment type="line" pos:line="756" pos:column="9">// The old c stuff lives on...</comment>
	<decl_stmt><decl><type><name pos:line="757" pos:column="9">FILE</name><type:modifier pos:line="757" pos:column="13">*</type:modifier></type> <name pos:line="757" pos:column="15">fp</name> <init pos:line="757" pos:column="18">= <expr><call><name pos:line="757" pos:column="20">generic_fopen</name><argument_list pos:line="757" pos:column="33">( <argument><expr><name pos:line="757" pos:column="35">filename</name></expr></argument>, <argument><expr><call><name pos:line="757" pos:column="45">TEXT</name><argument_list pos:line="757" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="757" pos:column="50">"w"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="758" pos:column="9">if <condition pos:line="758" pos:column="12">( <expr><name pos:line="758" pos:column="14">fp</name></expr> )</condition><then pos:line="758" pos:column="18">
	<block pos:line="759" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="760" pos:column="17">Print</name><argument_list pos:line="760" pos:column="22">( <argument><expr><name pos:line="760" pos:column="24">fp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="760" pos:column="28">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="761" pos:column="17">fclose</name><argument_list pos:line="761" pos:column="23">( <argument><expr><name pos:line="761" pos:column="25">fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="762" pos:column="17">return <expr><lit:literal type="boolean" pos:line="762" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="764" pos:column="9">return <expr><lit:literal type="boolean" pos:line="764" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>


<function><type><name pos:line="768" pos:column="1">TiXmlNode</name><type:modifier pos:line="768" pos:column="10">*</type:modifier></type> <name><name pos:line="768" pos:column="12">TiXmlDocument</name><op:operator pos:line="768" pos:column="25">::</op:operator><name pos:line="768" pos:column="27">Clone</name></name><parameter_list pos:line="768" pos:column="32">()</parameter_list> <specifier pos:line="768" pos:column="35">const</specifier>
<block pos:line="769" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="770" pos:column="9">TiXmlDocument</name><type:modifier pos:line="770" pos:column="22">*</type:modifier></type> <name pos:line="770" pos:column="24">clone</name> <init pos:line="770" pos:column="30">= <expr><op:operator pos:line="770" pos:column="32">new</op:operator> <call><name pos:line="770" pos:column="36">TiXmlDocument</name><argument_list pos:line="770" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="771" pos:column="9">if <condition pos:line="771" pos:column="12">( <expr><op:operator pos:line="771" pos:column="14">!</op:operator><name pos:line="771" pos:column="15">clone</name></expr> )</condition><then pos:line="771" pos:column="22">
		<return pos:line="772" pos:column="17">return <expr><lit:literal type="number" pos:line="772" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name pos:line="774" pos:column="9">CopyToClone</name><argument_list pos:line="774" pos:column="20">( <argument><expr><name pos:line="774" pos:column="22">clone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="775" pos:column="9">clone</name><op:operator pos:line="775" pos:column="14">-&gt;</op:operator><name pos:line="775" pos:column="16">error</name></name> <op:operator pos:line="775" pos:column="22">=</op:operator> <name pos:line="775" pos:column="24">error</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="776" pos:column="9">clone</name><op:operator pos:line="776" pos:column="14">-&gt;</op:operator><name pos:line="776" pos:column="16">errorDesc</name></name> <op:operator pos:line="776" pos:column="26">=</op:operator> <call><name><name pos:line="776" pos:column="28">errorDesc</name><op:operator pos:line="776" pos:column="37">.</op:operator><name pos:line="776" pos:column="38">c_str</name></name> <argument_list pos:line="776" pos:column="44">()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="778" pos:column="9">TiXmlNode</name><type:modifier pos:line="778" pos:column="18">*</type:modifier></type> <name pos:line="778" pos:column="20">node</name> <init pos:line="778" pos:column="25">= <expr><lit:literal type="number" pos:line="778" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="779" pos:column="9">for ( <init><expr><name pos:line="779" pos:column="15">node</name> <op:operator pos:line="779" pos:column="20">=</op:operator> <name pos:line="779" pos:column="22">firstChild</name></expr>;</init> <condition><expr><name pos:line="779" pos:column="34">node</name></expr>;</condition> <incr><expr><name pos:line="779" pos:column="40">node</name> <op:operator pos:line="779" pos:column="45">=</op:operator> <call><name><name pos:line="779" pos:column="47">node</name><op:operator pos:line="779" pos:column="51">-&gt;</op:operator><name pos:line="779" pos:column="53">NextSibling</name></name><argument_list pos:line="779" pos:column="64">()</argument_list></call></expr></incr> )
	<block pos:line="780" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="781" pos:column="17">clone</name><op:operator pos:line="781" pos:column="22">-&gt;</op:operator><name pos:line="781" pos:column="24">LinkEndChild</name></name><argument_list pos:line="781" pos:column="36">( <argument><expr><call><name><name pos:line="781" pos:column="38">node</name><op:operator pos:line="781" pos:column="42">-&gt;</op:operator><name pos:line="781" pos:column="44">Clone</name></name><argument_list pos:line="781" pos:column="49">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return pos:line="783" pos:column="9">return <expr><name pos:line="783" pos:column="16">clone</name></expr>;</return>
}</block></function>


<function><type><name pos:line="787" pos:column="1">void</name></type> <name><name pos:line="787" pos:column="6">TiXmlDocument</name><op:operator pos:line="787" pos:column="19">::</op:operator><name pos:line="787" pos:column="21">Print</name></name><parameter_list pos:line="787" pos:column="26">( <param><decl><type><name pos:line="787" pos:column="28">FILE</name><type:modifier pos:line="787" pos:column="32">*</type:modifier></type> <name pos:line="787" pos:column="34">cfile</name></decl></param>, <param><decl><type><name pos:line="787" pos:column="41">int</name></type> <name pos:line="787" pos:column="45">depth</name></decl></param> )</parameter_list> <specifier pos:line="787" pos:column="53">const</specifier>
<block pos:line="788" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="789" pos:column="9">TiXmlNode</name><type:modifier pos:line="789" pos:column="18">*</type:modifier></type> <name pos:line="789" pos:column="20">node</name></decl>;</decl_stmt>
	<for pos:line="790" pos:column="9">for ( <init><expr><name pos:line="790" pos:column="15">node</name><op:operator pos:line="790" pos:column="19">=</op:operator><call><name pos:line="790" pos:column="20">FirstChild</name><argument_list pos:line="790" pos:column="30">()</argument_list></call></expr>;</init> <condition><expr><name pos:line="790" pos:column="34">node</name></expr>;</condition> <incr><expr><name pos:line="790" pos:column="40">node</name><op:operator pos:line="790" pos:column="44">=</op:operator><call><name><name pos:line="790" pos:column="45">node</name><op:operator pos:line="790" pos:column="49">-&gt;</op:operator><name pos:line="790" pos:column="51">NextSibling</name></name><argument_list pos:line="790" pos:column="62">()</argument_list></call></expr></incr> )
	<block pos:line="791" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="792" pos:column="17">node</name><op:operator pos:line="792" pos:column="21">-&gt;</op:operator><name pos:line="792" pos:column="23">Print</name></name><argument_list pos:line="792" pos:column="28">( <argument><expr><name pos:line="792" pos:column="30">cfile</name></expr></argument>, <argument><expr><name pos:line="792" pos:column="37">depth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="793" pos:column="17">generic_fprintf</name><argument_list pos:line="793" pos:column="32">( <argument><expr><name pos:line="793" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="793" pos:column="41">TEXT</name><argument_list pos:line="793" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="793" pos:column="46">"\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="797" pos:column="1">void</name></type> <name><name pos:line="797" pos:column="6">TiXmlDocument</name><op:operator pos:line="797" pos:column="19">::</op:operator><name pos:line="797" pos:column="21">StreamOut</name></name><parameter_list pos:line="797" pos:column="30">( <param><decl><type><name pos:line="797" pos:column="32">TIXML_OSTREAM</name> <type:modifier pos:line="797" pos:column="46">*</type:modifier></type> <name pos:line="797" pos:column="48">out</name></decl></param> )</parameter_list> <specifier pos:line="797" pos:column="54">const</specifier>
<block pos:line="798" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="799" pos:column="9">TiXmlNode</name><type:modifier pos:line="799" pos:column="18">*</type:modifier></type> <name pos:line="799" pos:column="20">node</name></decl>;</decl_stmt>
	<for pos:line="800" pos:column="9">for ( <init><expr><name pos:line="800" pos:column="15">node</name><op:operator pos:line="800" pos:column="19">=</op:operator><call><name pos:line="800" pos:column="20">FirstChild</name><argument_list pos:line="800" pos:column="30">()</argument_list></call></expr>;</init> <condition><expr><name pos:line="800" pos:column="34">node</name></expr>;</condition> <incr><expr><name pos:line="800" pos:column="40">node</name><op:operator pos:line="800" pos:column="44">=</op:operator><call><name><name pos:line="800" pos:column="45">node</name><op:operator pos:line="800" pos:column="49">-&gt;</op:operator><name pos:line="800" pos:column="51">NextSibling</name></name><argument_list pos:line="800" pos:column="62">()</argument_list></call></expr></incr> )
	<block pos:line="801" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="802" pos:column="17">node</name><op:operator pos:line="802" pos:column="21">-&gt;</op:operator><name pos:line="802" pos:column="23">StreamOut</name></name><argument_list pos:line="802" pos:column="32">( <argument><expr><name pos:line="802" pos:column="34">out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="804" pos:column="17">// Special rule for streams: stop after the root element.</comment>
		<comment type="line" pos:line="805" pos:column="17">// The stream in code will only read one element, so don't</comment>
		<comment type="line" pos:line="806" pos:column="17">// write more than one.</comment>
		<if pos:line="807" pos:column="17">if <condition pos:line="807" pos:column="20">( <expr><call><name><name pos:line="807" pos:column="22">node</name><op:operator pos:line="807" pos:column="26">-&gt;</op:operator><name pos:line="807" pos:column="28">ToElement</name></name><argument_list pos:line="807" pos:column="37">()</argument_list></call></expr> )</condition><then pos:line="807" pos:column="41">
			<break pos:line="808" pos:column="25">break;</break></then></if>
	}</block></for>
}</block></function>


<function><type><name pos:line="813" pos:column="1">TiXmlAttribute</name><type:modifier pos:line="813" pos:column="15">*</type:modifier></type> <name><name pos:line="813" pos:column="17">TiXmlAttribute</name><op:operator pos:line="813" pos:column="31">::</op:operator><name pos:line="813" pos:column="33">Next</name></name><parameter_list pos:line="813" pos:column="37">()</parameter_list> <specifier pos:line="813" pos:column="40">const</specifier>
<block pos:line="814" pos:column="1">{
	<comment type="line" pos:line="815" pos:column="9">// We are using knowledge of the sentinel. The sentinel</comment>
	<comment type="line" pos:line="816" pos:column="9">// have a value or name.</comment>
	<if pos:line="817" pos:column="9">if <condition pos:line="817" pos:column="12">( <expr><call><name><name pos:line="817" pos:column="14">next</name><op:operator pos:line="817" pos:column="18">-&gt;</op:operator><name pos:line="817" pos:column="20">value</name><op:operator pos:line="817" pos:column="25">.</op:operator><name pos:line="817" pos:column="26">empty</name></name><argument_list pos:line="817" pos:column="31">()</argument_list></call> <op:operator pos:line="817" pos:column="34">&amp;&amp;</op:operator> <call><name><name pos:line="817" pos:column="37">next</name><op:operator pos:line="817" pos:column="41">-&gt;</op:operator><name pos:line="817" pos:column="43">name</name><op:operator pos:line="817" pos:column="47">.</op:operator><name pos:line="817" pos:column="48">empty</name></name><argument_list pos:line="817" pos:column="53">()</argument_list></call></expr> )</condition><then pos:line="817" pos:column="57">
		<return pos:line="818" pos:column="17">return <expr><lit:literal type="number" pos:line="818" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<return pos:line="819" pos:column="9">return <expr><name pos:line="819" pos:column="16">next</name></expr>;</return>
}</block></function>


<function><type><name pos:line="823" pos:column="1">TiXmlAttribute</name><type:modifier pos:line="823" pos:column="15">*</type:modifier></type> <name><name pos:line="823" pos:column="17">TiXmlAttribute</name><op:operator pos:line="823" pos:column="31">::</op:operator><name pos:line="823" pos:column="33">Previous</name></name><parameter_list pos:line="823" pos:column="41">()</parameter_list> <specifier pos:line="823" pos:column="44">const</specifier>
<block pos:line="824" pos:column="1">{
	<comment type="line" pos:line="825" pos:column="9">// We are using knowledge of the sentinel. The sentinel</comment>
	<comment type="line" pos:line="826" pos:column="9">// have a value or name.</comment>
	<if pos:line="827" pos:column="9">if <condition pos:line="827" pos:column="12">( <expr><call><name><name pos:line="827" pos:column="14">prev</name><op:operator pos:line="827" pos:column="18">-&gt;</op:operator><name pos:line="827" pos:column="20">value</name><op:operator pos:line="827" pos:column="25">.</op:operator><name pos:line="827" pos:column="26">empty</name></name><argument_list pos:line="827" pos:column="31">()</argument_list></call> <op:operator pos:line="827" pos:column="34">&amp;&amp;</op:operator> <call><name><name pos:line="827" pos:column="37">prev</name><op:operator pos:line="827" pos:column="41">-&gt;</op:operator><name pos:line="827" pos:column="43">name</name><op:operator pos:line="827" pos:column="47">.</op:operator><name pos:line="827" pos:column="48">empty</name></name><argument_list pos:line="827" pos:column="53">()</argument_list></call></expr> )</condition><then pos:line="827" pos:column="57">
		<return pos:line="828" pos:column="17">return <expr><lit:literal type="number" pos:line="828" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<return pos:line="829" pos:column="9">return <expr><name pos:line="829" pos:column="16">prev</name></expr>;</return>
}</block></function>


<function><type><name pos:line="833" pos:column="1">void</name></type> <name><name pos:line="833" pos:column="6">TiXmlAttribute</name><op:operator pos:line="833" pos:column="20">::</op:operator><name pos:line="833" pos:column="22">Print</name></name><parameter_list pos:line="833" pos:column="27">( <param><decl><type><name pos:line="833" pos:column="29">FILE</name><type:modifier pos:line="833" pos:column="33">*</type:modifier></type> <name pos:line="833" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="833" pos:column="42">int</name></type></decl></param> <comment type="block" pos:line="833" pos:column="46">/*depth*/</comment> )</parameter_list> <specifier pos:line="833" pos:column="58">const</specifier>
<block pos:line="834" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="835" pos:column="9">TIXML_STRING</name></type> <name pos:line="835" pos:column="22">n</name></decl><op:operator pos:line="835" pos:column="23">,</op:operator> <decl><type ref="prev"/><name pos:line="835" pos:column="25">v</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="837" pos:column="9">PutString</name><argument_list pos:line="837" pos:column="18">( <argument><expr><call><name pos:line="837" pos:column="20">Name</name><argument_list pos:line="837" pos:column="24">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="837" pos:column="28">&amp;</op:operator><name pos:line="837" pos:column="29">n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="838" pos:column="9">PutString</name><argument_list pos:line="838" pos:column="18">( <argument><expr><call><name pos:line="838" pos:column="20">Value</name><argument_list pos:line="838" pos:column="25">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="838" pos:column="29">&amp;</op:operator><name pos:line="838" pos:column="30">v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<if pos:line="840" pos:column="9">if <condition pos:line="840" pos:column="12">(<expr><call><name><name pos:line="840" pos:column="13">value</name><op:operator pos:line="840" pos:column="18">.</op:operator><name pos:line="840" pos:column="19">find</name></name> <argument_list pos:line="840" pos:column="24">(<argument><expr><lit:literal type="char" pos:line="840" pos:column="25">'\"'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="840" pos:column="31">==</op:operator> <name><name pos:line="840" pos:column="34">TIXML_STRING</name><op:operator pos:line="840" pos:column="46">::</op:operator><name pos:line="840" pos:column="48">npos</name></name></expr>)</condition><then pos:line="840" pos:column="53">
		<expr_stmt><expr><call><name pos:line="841" pos:column="17">generic_fprintf</name> <argument_list pos:line="841" pos:column="33">(<argument><expr><name pos:line="841" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="841" pos:column="41">TEXT</name><argument_list pos:line="841" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="841" pos:column="46">"%s=\"%s\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="841" pos:column="60">n</name><op:operator pos:line="841" pos:column="61">.</op:operator><name pos:line="841" pos:column="62">c_str</name></name><argument_list pos:line="841" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="841" pos:column="71">v</name><op:operator pos:line="841" pos:column="72">.</op:operator><name pos:line="841" pos:column="73">c_str</name></name><argument_list pos:line="841" pos:column="78">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="842" pos:column="9">else
		<expr_stmt><expr><call><name pos:line="843" pos:column="17">generic_fprintf</name> <argument_list pos:line="843" pos:column="33">(<argument><expr><name pos:line="843" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="843" pos:column="41">TEXT</name><argument_list pos:line="843" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="843" pos:column="46">"%s='%s'"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="843" pos:column="58">n</name><op:operator pos:line="843" pos:column="59">.</op:operator><name pos:line="843" pos:column="60">c_str</name></name><argument_list pos:line="843" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="843" pos:column="69">v</name><op:operator pos:line="843" pos:column="70">.</op:operator><name pos:line="843" pos:column="71">c_str</name></name><argument_list pos:line="843" pos:column="76">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>


<function><type><name pos:line="847" pos:column="1">void</name></type> <name><name pos:line="847" pos:column="6">TiXmlAttribute</name><op:operator pos:line="847" pos:column="20">::</op:operator><name pos:line="847" pos:column="22">StreamOut</name></name><parameter_list pos:line="847" pos:column="31">( <param><decl><type><name pos:line="847" pos:column="33">TIXML_OSTREAM</name> <type:modifier pos:line="847" pos:column="47">*</type:modifier></type> <name pos:line="847" pos:column="49">stream</name></decl></param> )</parameter_list> <specifier pos:line="847" pos:column="58">const</specifier>
<block pos:line="848" pos:column="1">{
	<if pos:line="849" pos:column="9">if <condition pos:line="849" pos:column="12">(<expr><call><name><name pos:line="849" pos:column="13">value</name><op:operator pos:line="849" pos:column="18">.</op:operator><name pos:line="849" pos:column="19">find</name></name><argument_list pos:line="849" pos:column="23">( <argument><expr><lit:literal type="char" pos:line="849" pos:column="25">'\"'</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="849" pos:column="32">!=</op:operator> <name><name pos:line="849" pos:column="35">TIXML_STRING</name><op:operator pos:line="849" pos:column="47">::</op:operator><name pos:line="849" pos:column="49">npos</name></name></expr>)</condition><then pos:line="849" pos:column="54">
	<block pos:line="850" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="851" pos:column="17">PutString</name><argument_list pos:line="851" pos:column="26">( <argument><expr><name pos:line="851" pos:column="28">name</name></expr></argument>, <argument><expr><name pos:line="851" pos:column="34">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="852" pos:column="17">(</op:operator><op:operator pos:line="852" pos:column="18">*</op:operator><name pos:line="852" pos:column="19">stream</name><op:operator pos:line="852" pos:column="25">)</op:operator> <op:operator pos:line="852" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="852" pos:column="30">TEXT</name><argument_list pos:line="852" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="852" pos:column="35">"="</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="852" pos:column="40">&lt;&lt;</op:operator> <call><name pos:line="852" pos:column="43">TEXT</name><argument_list pos:line="852" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="852" pos:column="48">"'"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="853" pos:column="17">PutString</name><argument_list pos:line="853" pos:column="26">( <argument><expr><name pos:line="853" pos:column="28">value</name></expr></argument>, <argument><expr><name pos:line="853" pos:column="35">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="854" pos:column="17">(</op:operator><op:operator pos:line="854" pos:column="18">*</op:operator><name pos:line="854" pos:column="19">stream</name><op:operator pos:line="854" pos:column="25">)</op:operator> <op:operator pos:line="854" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="854" pos:column="30">TEXT</name><argument_list pos:line="854" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="854" pos:column="35">"'"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="856" pos:column="9">else
	<block pos:line="857" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="858" pos:column="17">PutString</name><argument_list pos:line="858" pos:column="26">( <argument><expr><name pos:line="858" pos:column="28">name</name></expr></argument>, <argument><expr><name pos:line="858" pos:column="34">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="859" pos:column="17">(</op:operator><op:operator pos:line="859" pos:column="18">*</op:operator><name pos:line="859" pos:column="19">stream</name><op:operator pos:line="859" pos:column="25">)</op:operator> <op:operator pos:line="859" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="859" pos:column="30">TEXT</name><argument_list pos:line="859" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="859" pos:column="35">"="</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="859" pos:column="40">&lt;&lt;</op:operator> <call><name pos:line="859" pos:column="43">TEXT</name><argument_list pos:line="859" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="859" pos:column="48">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="860" pos:column="17">PutString</name><argument_list pos:line="860" pos:column="26">( <argument><expr><name pos:line="860" pos:column="28">value</name></expr></argument>, <argument><expr><name pos:line="860" pos:column="35">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="861" pos:column="17">(</op:operator><op:operator pos:line="861" pos:column="18">*</op:operator><name pos:line="861" pos:column="19">stream</name><op:operator pos:line="861" pos:column="25">)</op:operator> <op:operator pos:line="861" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="861" pos:column="30">TEXT</name><argument_list pos:line="861" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="861" pos:column="35">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="865" pos:column="1">int</name></type> <name><name pos:line="865" pos:column="5">TiXmlAttribute</name><op:operator pos:line="865" pos:column="19">::</op:operator><name pos:line="865" pos:column="21">QueryIntValue</name></name><parameter_list pos:line="865" pos:column="34">( <param><decl><type><name pos:line="865" pos:column="36">int</name><type:modifier pos:line="865" pos:column="39">*</type:modifier></type> <name pos:line="865" pos:column="41">ival</name></decl></param> )</parameter_list> <specifier pos:line="865" pos:column="48">const</specifier>
<block pos:line="866" pos:column="1">{
	<if pos:line="867" pos:column="9">if <condition pos:line="867" pos:column="12">( <expr><call><name pos:line="867" pos:column="14">generic_sscanf</name><argument_list pos:line="867" pos:column="28">( <argument><expr><call><name><name pos:line="867" pos:column="30">value</name><op:operator pos:line="867" pos:column="35">.</op:operator><name pos:line="867" pos:column="36">c_str</name></name><argument_list pos:line="867" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="867" pos:column="45">TEXT</name><argument_list pos:line="867" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="867" pos:column="50">"%d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="867" pos:column="57">ival</name></expr></argument> )</argument_list></call> <op:operator pos:line="867" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="867" pos:column="67">1</lit:literal></expr> )</condition><then pos:line="867" pos:column="70">
		<return pos:line="868" pos:column="17">return <expr><name pos:line="868" pos:column="24">TIXML_SUCCESS</name></expr>;</return></then></if>
	<return pos:line="869" pos:column="9">return <expr><name pos:line="869" pos:column="16">TIXML_WRONG_TYPE</name></expr>;</return>
}</block></function>

<function><type><name pos:line="872" pos:column="1">int</name></type> <name><name pos:line="872" pos:column="5">TiXmlAttribute</name><op:operator pos:line="872" pos:column="19">::</op:operator><name pos:line="872" pos:column="21">QueryDoubleValue</name></name><parameter_list pos:line="872" pos:column="37">( <param><decl><type><name pos:line="872" pos:column="39">double</name><type:modifier pos:line="872" pos:column="45">*</type:modifier></type> <name pos:line="872" pos:column="47">dval</name></decl></param> )</parameter_list> <specifier pos:line="872" pos:column="54">const</specifier>
<block pos:line="873" pos:column="1">{
	<if pos:line="874" pos:column="9">if <condition pos:line="874" pos:column="12">( <expr><call><name pos:line="874" pos:column="14">generic_sscanf</name><argument_list pos:line="874" pos:column="28">( <argument><expr><call><name><name pos:line="874" pos:column="30">value</name><op:operator pos:line="874" pos:column="35">.</op:operator><name pos:line="874" pos:column="36">c_str</name></name><argument_list pos:line="874" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="874" pos:column="45">TEXT</name><argument_list pos:line="874" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="874" pos:column="50">"%lf"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="874" pos:column="58">dval</name></expr></argument> )</argument_list></call> <op:operator pos:line="874" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="874" pos:column="68">1</lit:literal></expr> )</condition><then pos:line="874" pos:column="71">
		<return pos:line="875" pos:column="17">return <expr><name pos:line="875" pos:column="24">TIXML_SUCCESS</name></expr>;</return></then></if>
	<return pos:line="876" pos:column="9">return <expr><name pos:line="876" pos:column="16">TIXML_WRONG_TYPE</name></expr>;</return>
}</block></function>

<function><type><name pos:line="879" pos:column="1">void</name></type> <name><name pos:line="879" pos:column="6">TiXmlAttribute</name><op:operator pos:line="879" pos:column="20">::</op:operator><name pos:line="879" pos:column="22">SetIntValue</name></name><parameter_list pos:line="879" pos:column="33">( <param><decl><type><name pos:line="879" pos:column="35">int</name></type> <name pos:line="879" pos:column="39">_value</name></decl></param> )</parameter_list>
<block pos:line="880" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="881" pos:column="9">TCHAR</name></type> <name><name pos:line="881" pos:column="15">buf</name> <index pos:line="881" pos:column="19">[<expr><lit:literal type="number" pos:line="881" pos:column="20">64</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="882" pos:column="9">wsprintf</name> <argument_list pos:line="882" pos:column="18">(<argument><expr><name pos:line="882" pos:column="19">buf</name></expr></argument>, <argument><expr><call><name pos:line="882" pos:column="24">TEXT</name><argument_list pos:line="882" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="882" pos:column="29">"%d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="882" pos:column="36">_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="883" pos:column="9">SetValue</name> <argument_list pos:line="883" pos:column="18">(<argument><expr><name pos:line="883" pos:column="19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="886" pos:column="1">void</name></type> <name><name pos:line="886" pos:column="6">TiXmlAttribute</name><op:operator pos:line="886" pos:column="20">::</op:operator><name pos:line="886" pos:column="22">SetDoubleValue</name></name><parameter_list pos:line="886" pos:column="36">( <param><decl><type><name pos:line="886" pos:column="38">double</name></type> <name pos:line="886" pos:column="45">_value</name></decl></param> )</parameter_list>
<block pos:line="887" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="888" pos:column="9">TCHAR</name></type> <name><name pos:line="888" pos:column="15">buf</name> <index pos:line="888" pos:column="19">[<expr><lit:literal type="number" pos:line="888" pos:column="20">64</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="889" pos:column="9">wsprintf</name> <argument_list pos:line="889" pos:column="18">(<argument><expr><name pos:line="889" pos:column="19">buf</name></expr></argument>, <argument><expr><call><name pos:line="889" pos:column="24">TEXT</name><argument_list pos:line="889" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="889" pos:column="29">"%lf"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="889" pos:column="37">_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="890" pos:column="9">SetValue</name> <argument_list pos:line="890" pos:column="18">(<argument><expr><name pos:line="890" pos:column="19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="893" pos:column="1">const</specifier> <name pos:line="893" pos:column="7">int</name></type> <name><name pos:line="893" pos:column="11">TiXmlAttribute</name><op:operator pos:line="893" pos:column="25">::</op:operator><name pos:line="893" pos:column="27">IntValue</name></name><parameter_list pos:line="893" pos:column="35">()</parameter_list> <specifier pos:line="893" pos:column="38">const</specifier>
<block pos:line="894" pos:column="1">{
	<return pos:line="895" pos:column="9">return <expr><call><name pos:line="895" pos:column="16">generic_atoi</name> <argument_list pos:line="895" pos:column="29">(<argument><expr><call><name><name pos:line="895" pos:column="30">value</name><op:operator pos:line="895" pos:column="35">.</op:operator><name pos:line="895" pos:column="36">c_str</name></name> <argument_list pos:line="895" pos:column="42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="898" pos:column="1">const</specifier> <name pos:line="898" pos:column="7">double</name></type>  <name><name pos:line="898" pos:column="15">TiXmlAttribute</name><op:operator pos:line="898" pos:column="29">::</op:operator><name pos:line="898" pos:column="31">DoubleValue</name></name><parameter_list pos:line="898" pos:column="42">()</parameter_list> <specifier pos:line="898" pos:column="45">const</specifier>
<block pos:line="899" pos:column="1">{
	<return pos:line="900" pos:column="9">return <expr><call><name pos:line="900" pos:column="16">generic_atof</name> <argument_list pos:line="900" pos:column="29">(<argument><expr><call><name><name pos:line="900" pos:column="30">value</name><op:operator pos:line="900" pos:column="35">.</op:operator><name pos:line="900" pos:column="36">c_str</name></name> <argument_list pos:line="900" pos:column="42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="903" pos:column="1">void</name></type> <name><name pos:line="903" pos:column="6">TiXmlComment</name><op:operator pos:line="903" pos:column="18">::</op:operator><name pos:line="903" pos:column="20">Print</name></name><parameter_list pos:line="903" pos:column="25">( <param><decl><type><name pos:line="903" pos:column="27">FILE</name><type:modifier pos:line="903" pos:column="31">*</type:modifier></type> <name pos:line="903" pos:column="33">cfile</name></decl></param>, <param><decl><type><name pos:line="903" pos:column="40">int</name></type> <name pos:line="903" pos:column="44">depth</name></decl></param> )</parameter_list> <specifier pos:line="903" pos:column="52">const</specifier>
<block pos:line="904" pos:column="1">{
	<for pos:line="905" pos:column="9">for ( <init><decl><type><name pos:line="905" pos:column="15">int</name></type> <name pos:line="905" pos:column="19">i</name><init pos:line="905" pos:column="20">=<expr><lit:literal type="number" pos:line="905" pos:column="21">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="905" pos:column="24">i</name><op:operator pos:line="905" pos:column="25">&lt;</op:operator><name pos:line="905" pos:column="26">depth</name></expr>;</condition> <incr><expr><name pos:line="905" pos:column="33">i</name><op:operator pos:line="905" pos:column="34">++</op:operator></expr></incr> )
	<block pos:line="906" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="907" pos:column="17">fputs</name><argument_list pos:line="907" pos:column="22">( <argument><expr><lit:literal type="string" pos:line="907" pos:column="24">"    "</lit:literal></expr></argument>, <argument><expr><name pos:line="907" pos:column="32">cfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="909" pos:column="9">generic_fprintf</name><argument_list pos:line="909" pos:column="24">( <argument><expr><name pos:line="909" pos:column="26">cfile</name></expr></argument>, <argument><expr><call><name pos:line="909" pos:column="33">TEXT</name><argument_list pos:line="909" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="909" pos:column="38">"&lt;!--%s--&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="909" pos:column="52">value</name><op:operator pos:line="909" pos:column="57">.</op:operator><name pos:line="909" pos:column="58">c_str</name></name><argument_list pos:line="909" pos:column="63">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="912" pos:column="1">void</name></type> <name><name pos:line="912" pos:column="6">TiXmlComment</name><op:operator pos:line="912" pos:column="18">::</op:operator><name pos:line="912" pos:column="20">StreamOut</name></name><parameter_list pos:line="912" pos:column="29">( <param><decl><type><name pos:line="912" pos:column="31">TIXML_OSTREAM</name> <type:modifier pos:line="912" pos:column="45">*</type:modifier></type> <name pos:line="912" pos:column="47">stream</name></decl></param> )</parameter_list> <specifier pos:line="912" pos:column="56">const</specifier>
<block pos:line="913" pos:column="1">{
	<expr_stmt><expr><op:operator pos:line="914" pos:column="9">(</op:operator><op:operator pos:line="914" pos:column="10">*</op:operator><name pos:line="914" pos:column="11">stream</name><op:operator pos:line="914" pos:column="17">)</op:operator> <op:operator pos:line="914" pos:column="19">&lt;&lt;</op:operator> <call><name pos:line="914" pos:column="22">TEXT</name><argument_list pos:line="914" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="914" pos:column="27">"&lt;!--"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="915" pos:column="9">PutString</name><argument_list pos:line="915" pos:column="18">( <argument><expr><name pos:line="915" pos:column="20">value</name></expr></argument>, <argument><expr><name pos:line="915" pos:column="27">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="916" pos:column="9">(</op:operator><op:operator pos:line="916" pos:column="10">*</op:operator><name pos:line="916" pos:column="11">stream</name><op:operator pos:line="916" pos:column="17">)</op:operator> <op:operator pos:line="916" pos:column="19">&lt;&lt;</op:operator> <call><name pos:line="916" pos:column="22">TEXT</name><argument_list pos:line="916" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="916" pos:column="27">"--&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="919" pos:column="1">TiXmlNode</name><type:modifier pos:line="919" pos:column="10">*</type:modifier></type> <name><name pos:line="919" pos:column="12">TiXmlComment</name><op:operator pos:line="919" pos:column="24">::</op:operator><name pos:line="919" pos:column="26">Clone</name></name><parameter_list pos:line="919" pos:column="31">()</parameter_list> <specifier pos:line="919" pos:column="34">const</specifier>
<block pos:line="920" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="921" pos:column="9">TiXmlComment</name><type:modifier pos:line="921" pos:column="21">*</type:modifier></type> <name pos:line="921" pos:column="23">clone</name> <init pos:line="921" pos:column="29">= <expr><op:operator pos:line="921" pos:column="31">new</op:operator> <call><name pos:line="921" pos:column="35">TiXmlComment</name><argument_list pos:line="921" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="923" pos:column="9">if <condition pos:line="923" pos:column="12">( <expr><op:operator pos:line="923" pos:column="14">!</op:operator><name pos:line="923" pos:column="15">clone</name></expr> )</condition><then pos:line="923" pos:column="22">
		<return pos:line="924" pos:column="17">return <expr><lit:literal type="number" pos:line="924" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name pos:line="926" pos:column="9">CopyToClone</name><argument_list pos:line="926" pos:column="20">( <argument><expr><name pos:line="926" pos:column="22">clone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return pos:line="927" pos:column="9">return <expr><name pos:line="927" pos:column="16">clone</name></expr>;</return>
}</block></function>


<function><type><name pos:line="931" pos:column="1">void</name></type> <name><name pos:line="931" pos:column="6">TiXmlText</name><op:operator pos:line="931" pos:column="15">::</op:operator><name pos:line="931" pos:column="17">Print</name></name><parameter_list pos:line="931" pos:column="22">( <param><decl><type><name pos:line="931" pos:column="24">FILE</name><type:modifier pos:line="931" pos:column="28">*</type:modifier></type> <name pos:line="931" pos:column="30">cfile</name></decl></param>, <param><decl><type><name pos:line="931" pos:column="37">int</name></type></decl></param> <comment type="block" pos:line="931" pos:column="41">/*depth*/</comment> )</parameter_list> <specifier pos:line="931" pos:column="53">const</specifier>
<block pos:line="932" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="933" pos:column="9">TIXML_STRING</name></type> <name pos:line="933" pos:column="22">buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="934" pos:column="9">PutString</name><argument_list pos:line="934" pos:column="18">( <argument><expr><name pos:line="934" pos:column="20">value</name></expr></argument>, <argument><expr><op:operator pos:line="934" pos:column="27">&amp;</op:operator><name pos:line="934" pos:column="28">buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="935" pos:column="9">generic_fprintf</name><argument_list pos:line="935" pos:column="24">( <argument><expr><name pos:line="935" pos:column="26">cfile</name></expr></argument>, <argument><expr><call><name pos:line="935" pos:column="33">TEXT</name><argument_list pos:line="935" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="935" pos:column="38">"%s"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="935" pos:column="45">buffer</name><op:operator pos:line="935" pos:column="51">.</op:operator><name pos:line="935" pos:column="52">c_str</name></name><argument_list pos:line="935" pos:column="57">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="939" pos:column="1">void</name></type> <name><name pos:line="939" pos:column="6">TiXmlText</name><op:operator pos:line="939" pos:column="15">::</op:operator><name pos:line="939" pos:column="17">StreamOut</name></name><parameter_list pos:line="939" pos:column="26">( <param><decl><type><name pos:line="939" pos:column="28">TIXML_OSTREAM</name> <type:modifier pos:line="939" pos:column="42">*</type:modifier></type> <name pos:line="939" pos:column="44">stream</name></decl></param> )</parameter_list> <specifier pos:line="939" pos:column="53">const</specifier>
<block pos:line="940" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="941" pos:column="9">PutString</name><argument_list pos:line="941" pos:column="18">( <argument><expr><name pos:line="941" pos:column="20">value</name></expr></argument>, <argument><expr><name pos:line="941" pos:column="27">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="945" pos:column="1">TiXmlNode</name><type:modifier pos:line="945" pos:column="10">*</type:modifier></type> <name><name pos:line="945" pos:column="12">TiXmlText</name><op:operator pos:line="945" pos:column="21">::</op:operator><name pos:line="945" pos:column="23">Clone</name></name><parameter_list pos:line="945" pos:column="28">()</parameter_list> <specifier pos:line="945" pos:column="31">const</specifier>
<block pos:line="946" pos:column="1">{	
	<decl_stmt><decl><type><name pos:line="947" pos:column="9">TiXmlText</name><type:modifier pos:line="947" pos:column="18">*</type:modifier></type> <name pos:line="947" pos:column="20">clone</name> <init pos:line="947" pos:column="26">= <expr><lit:literal type="number" pos:line="947" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="948" pos:column="9">clone</name> <op:operator pos:line="948" pos:column="15">=</op:operator> <op:operator pos:line="948" pos:column="17">new</op:operator> <call><name pos:line="948" pos:column="21">TiXmlText</name><argument_list pos:line="948" pos:column="30">( <argument><expr><call><name pos:line="948" pos:column="32">TEXT</name><argument_list pos:line="948" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="948" pos:column="37">""</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<if pos:line="950" pos:column="9">if <condition pos:line="950" pos:column="12">( <expr><op:operator pos:line="950" pos:column="14">!</op:operator><name pos:line="950" pos:column="15">clone</name></expr> )</condition><then pos:line="950" pos:column="22">
		<return pos:line="951" pos:column="17">return <expr><lit:literal type="number" pos:line="951" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name pos:line="953" pos:column="9">CopyToClone</name><argument_list pos:line="953" pos:column="20">( <argument><expr><name pos:line="953" pos:column="22">clone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return pos:line="954" pos:column="9">return <expr><name pos:line="954" pos:column="16">clone</name></expr>;</return>
}</block></function>


<constructor><name><name pos:line="958" pos:column="1">TiXmlDeclaration</name><op:operator pos:line="958" pos:column="17">::</op:operator><name pos:line="958" pos:column="19">TiXmlDeclaration</name></name><parameter_list pos:line="958" pos:column="35">( <param><decl><type><specifier pos:line="958" pos:column="37">const</specifier> <name pos:line="958" pos:column="43">TCHAR</name> <type:modifier pos:line="958" pos:column="49">*</type:modifier></type> <name pos:line="958" pos:column="51">_version</name></decl></param>,
	<param><decl><type><specifier pos:line="959" pos:column="9">const</specifier> <name pos:line="959" pos:column="15">TCHAR</name> <type:modifier pos:line="959" pos:column="21">*</type:modifier></type> <name pos:line="959" pos:column="23">_encoding</name></decl></param>,
	<param><decl><type><specifier pos:line="960" pos:column="9">const</specifier> <name pos:line="960" pos:column="15">TCHAR</name> <type:modifier pos:line="960" pos:column="21">*</type:modifier></type> <name pos:line="960" pos:column="23">_standalone</name></decl></param> )</parameter_list>
<member_list pos:line="961" pos:column="1">: <call><name pos:line="961" pos:column="3">TiXmlNode</name><argument_list pos:line="961" pos:column="12">( <argument><expr><name><name pos:line="961" pos:column="14">TiXmlNode</name><op:operator pos:line="961" pos:column="23">::</op:operator><name pos:line="961" pos:column="25">DECLARATION</name></name></expr></argument> )</argument_list></call>
</member_list><block pos:line="962" pos:column="1">{
	<expr_stmt><expr><name pos:line="963" pos:column="9">version</name> <op:operator pos:line="963" pos:column="17">=</op:operator> <name pos:line="963" pos:column="19">_version</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="964" pos:column="9">encoding</name> <op:operator pos:line="964" pos:column="18">=</op:operator> <name pos:line="964" pos:column="20">_encoding</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="965" pos:column="9">standalone</name> <op:operator pos:line="965" pos:column="20">=</op:operator> <name pos:line="965" pos:column="22">_standalone</name></expr>;</expr_stmt>
}</block></constructor>


<function><type><name pos:line="969" pos:column="1">void</name></type> <name><name pos:line="969" pos:column="6">TiXmlDeclaration</name><op:operator pos:line="969" pos:column="22">::</op:operator><name pos:line="969" pos:column="24">Print</name></name><parameter_list pos:line="969" pos:column="29">( <param><decl><type><name pos:line="969" pos:column="31">FILE</name><type:modifier pos:line="969" pos:column="35">*</type:modifier></type> <name pos:line="969" pos:column="37">cfile</name></decl></param>, <param><decl><type><name pos:line="969" pos:column="44">int</name></type></decl></param> <comment type="block" pos:line="969" pos:column="48">/*depth*/</comment> )</parameter_list> <specifier pos:line="969" pos:column="60">const</specifier>
<block pos:line="970" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="971" pos:column="9">generic_fprintf</name> <argument_list pos:line="971" pos:column="25">(<argument><expr><name pos:line="971" pos:column="26">cfile</name></expr></argument>, <argument><expr><call><name pos:line="971" pos:column="33">TEXT</name><argument_list pos:line="971" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="971" pos:column="38">"&lt;?xml "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="973" pos:column="9">if <condition pos:line="973" pos:column="12">( <expr><op:operator pos:line="973" pos:column="14">!</op:operator><call><name><name pos:line="973" pos:column="15">version</name><op:operator pos:line="973" pos:column="22">.</op:operator><name pos:line="973" pos:column="23">empty</name></name><argument_list pos:line="973" pos:column="28">()</argument_list></call></expr> )</condition><then pos:line="973" pos:column="32">
		<expr_stmt><expr><call><name pos:line="974" pos:column="17">generic_fprintf</name> <argument_list pos:line="974" pos:column="33">(<argument><expr><name pos:line="974" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="974" pos:column="41">TEXT</name><argument_list pos:line="974" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="974" pos:column="46">"version=\"%s\" "</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="974" pos:column="66">version</name><op:operator pos:line="974" pos:column="73">.</op:operator><name pos:line="974" pos:column="74">c_str</name></name> <argument_list pos:line="974" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="975" pos:column="9">if <condition pos:line="975" pos:column="12">( <expr><op:operator pos:line="975" pos:column="14">!</op:operator><call><name><name pos:line="975" pos:column="15">encoding</name><op:operator pos:line="975" pos:column="23">.</op:operator><name pos:line="975" pos:column="24">empty</name></name><argument_list pos:line="975" pos:column="29">()</argument_list></call></expr> )</condition><then pos:line="975" pos:column="33">
		<expr_stmt><expr><call><name pos:line="976" pos:column="17">generic_fprintf</name> <argument_list pos:line="976" pos:column="33">(<argument><expr><name pos:line="976" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="976" pos:column="41">TEXT</name><argument_list pos:line="976" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="976" pos:column="46">"encoding=\"%s\" "</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="976" pos:column="67">encoding</name><op:operator pos:line="976" pos:column="75">.</op:operator><name pos:line="976" pos:column="76">c_str</name></name> <argument_list pos:line="976" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="977" pos:column="9">if <condition pos:line="977" pos:column="12">( <expr><op:operator pos:line="977" pos:column="14">!</op:operator><call><name><name pos:line="977" pos:column="15">standalone</name><op:operator pos:line="977" pos:column="25">.</op:operator><name pos:line="977" pos:column="26">empty</name></name><argument_list pos:line="977" pos:column="31">()</argument_list></call></expr> )</condition><then pos:line="977" pos:column="35">
		<expr_stmt><expr><call><name pos:line="978" pos:column="17">generic_fprintf</name> <argument_list pos:line="978" pos:column="33">(<argument><expr><name pos:line="978" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="978" pos:column="41">TEXT</name><argument_list pos:line="978" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="978" pos:column="46">"standalone=\"%s\" "</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="978" pos:column="69">standalone</name><op:operator pos:line="978" pos:column="79">.</op:operator><name pos:line="978" pos:column="80">c_str</name></name> <argument_list pos:line="978" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name pos:line="979" pos:column="9">generic_fprintf</name> <argument_list pos:line="979" pos:column="25">(<argument><expr><name pos:line="979" pos:column="26">cfile</name></expr></argument>, <argument><expr><call><name pos:line="979" pos:column="33">TEXT</name><argument_list pos:line="979" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="979" pos:column="38">"?&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="982" pos:column="1">void</name></type> <name><name pos:line="982" pos:column="6">TiXmlDeclaration</name><op:operator pos:line="982" pos:column="22">::</op:operator><name pos:line="982" pos:column="24">StreamOut</name></name><parameter_list pos:line="982" pos:column="33">( <param><decl><type><name pos:line="982" pos:column="35">TIXML_OSTREAM</name> <type:modifier pos:line="982" pos:column="49">*</type:modifier></type> <name pos:line="982" pos:column="51">stream</name></decl></param> )</parameter_list> <specifier pos:line="982" pos:column="60">const</specifier>
<block pos:line="983" pos:column="1">{
	<expr_stmt><expr><op:operator pos:line="984" pos:column="9">(</op:operator><op:operator pos:line="984" pos:column="10">*</op:operator><name pos:line="984" pos:column="11">stream</name><op:operator pos:line="984" pos:column="17">)</op:operator> <op:operator pos:line="984" pos:column="19">&lt;&lt;</op:operator> <call><name pos:line="984" pos:column="22">TEXT</name><argument_list pos:line="984" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="984" pos:column="27">"&lt;?xml "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="986" pos:column="9">if <condition pos:line="986" pos:column="12">( <expr><op:operator pos:line="986" pos:column="14">!</op:operator><call><name><name pos:line="986" pos:column="15">version</name><op:operator pos:line="986" pos:column="22">.</op:operator><name pos:line="986" pos:column="23">empty</name></name><argument_list pos:line="986" pos:column="28">()</argument_list></call></expr> )</condition><then pos:line="986" pos:column="32">
	<block pos:line="987" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="988" pos:column="17">(</op:operator><op:operator pos:line="988" pos:column="18">*</op:operator><name pos:line="988" pos:column="19">stream</name><op:operator pos:line="988" pos:column="25">)</op:operator> <op:operator pos:line="988" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="988" pos:column="30">TEXT</name><argument_list pos:line="988" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="988" pos:column="35">"version=\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="989" pos:column="17">PutString</name><argument_list pos:line="989" pos:column="26">( <argument><expr><name pos:line="989" pos:column="28">version</name></expr></argument>, <argument><expr><name pos:line="989" pos:column="37">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="990" pos:column="17">(</op:operator><op:operator pos:line="990" pos:column="18">*</op:operator><name pos:line="990" pos:column="19">stream</name><op:operator pos:line="990" pos:column="25">)</op:operator> <op:operator pos:line="990" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="990" pos:column="30">TEXT</name><argument_list pos:line="990" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="990" pos:column="35">"\" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="992" pos:column="9">if <condition pos:line="992" pos:column="12">( <expr><op:operator pos:line="992" pos:column="14">!</op:operator><call><name><name pos:line="992" pos:column="15">encoding</name><op:operator pos:line="992" pos:column="23">.</op:operator><name pos:line="992" pos:column="24">empty</name></name><argument_list pos:line="992" pos:column="29">()</argument_list></call></expr> )</condition><then pos:line="992" pos:column="33">
	<block pos:line="993" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="994" pos:column="17">(</op:operator><op:operator pos:line="994" pos:column="18">*</op:operator><name pos:line="994" pos:column="19">stream</name><op:operator pos:line="994" pos:column="25">)</op:operator> <op:operator pos:line="994" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="994" pos:column="30">TEXT</name><argument_list pos:line="994" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="994" pos:column="35">"encoding=\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="995" pos:column="17">PutString</name><argument_list pos:line="995" pos:column="26">( <argument><expr><name pos:line="995" pos:column="28">encoding</name></expr></argument>, <argument><expr><name pos:line="995" pos:column="38">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="996" pos:column="17">(</op:operator><op:operator pos:line="996" pos:column="18">*</op:operator><name pos:line="996" pos:column="19">stream</name> <op:operator pos:line="996" pos:column="26">)</op:operator> <op:operator pos:line="996" pos:column="28">&lt;&lt;</op:operator> <call><name pos:line="996" pos:column="31">TEXT</name><argument_list pos:line="996" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="996" pos:column="36">"\" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="998" pos:column="9">if <condition pos:line="998" pos:column="12">( <expr><op:operator pos:line="998" pos:column="14">!</op:operator><call><name><name pos:line="998" pos:column="15">standalone</name><op:operator pos:line="998" pos:column="25">.</op:operator><name pos:line="998" pos:column="26">empty</name></name><argument_list pos:line="998" pos:column="31">()</argument_list></call></expr> )</condition><then pos:line="998" pos:column="35">
	<block pos:line="999" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="1000" pos:column="17">(</op:operator><op:operator pos:line="1000" pos:column="18">*</op:operator><name pos:line="1000" pos:column="19">stream</name><op:operator pos:line="1000" pos:column="25">)</op:operator> <op:operator pos:line="1000" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="1000" pos:column="30">TEXT</name><argument_list pos:line="1000" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="1000" pos:column="35">"standalone=\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1001" pos:column="17">PutString</name><argument_list pos:line="1001" pos:column="26">( <argument><expr><name pos:line="1001" pos:column="28">standalone</name></expr></argument>, <argument><expr><name pos:line="1001" pos:column="40">stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="1002" pos:column="17">(</op:operator><op:operator pos:line="1002" pos:column="18">*</op:operator><name pos:line="1002" pos:column="19">stream</name><op:operator pos:line="1002" pos:column="25">)</op:operator> <op:operator pos:line="1002" pos:column="27">&lt;&lt;</op:operator> <call><name pos:line="1002" pos:column="30">TEXT</name><argument_list pos:line="1002" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="1002" pos:column="35">"\" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><op:operator pos:line="1004" pos:column="9">(</op:operator><op:operator pos:line="1004" pos:column="10">*</op:operator><name pos:line="1004" pos:column="11">stream</name><op:operator pos:line="1004" pos:column="17">)</op:operator> <op:operator pos:line="1004" pos:column="19">&lt;&lt;</op:operator> <call><name pos:line="1004" pos:column="22">TEXT</name><argument_list pos:line="1004" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="1004" pos:column="27">"?&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1007" pos:column="1">TiXmlNode</name><type:modifier pos:line="1007" pos:column="10">*</type:modifier></type> <name><name pos:line="1007" pos:column="12">TiXmlDeclaration</name><op:operator pos:line="1007" pos:column="28">::</op:operator><name pos:line="1007" pos:column="30">Clone</name></name><parameter_list pos:line="1007" pos:column="35">()</parameter_list> <specifier pos:line="1007" pos:column="38">const</specifier>
<block pos:line="1008" pos:column="1">{	
	<decl_stmt><decl><type><name pos:line="1009" pos:column="9">TiXmlDeclaration</name><type:modifier pos:line="1009" pos:column="25">*</type:modifier></type> <name pos:line="1009" pos:column="27">clone</name> <init pos:line="1009" pos:column="33">= <expr><op:operator pos:line="1009" pos:column="35">new</op:operator> <call><name pos:line="1009" pos:column="39">TiXmlDeclaration</name><argument_list pos:line="1009" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="1011" pos:column="9">if <condition pos:line="1011" pos:column="12">( <expr><op:operator pos:line="1011" pos:column="14">!</op:operator><name pos:line="1011" pos:column="15">clone</name></expr> )</condition><then pos:line="1011" pos:column="22">
		<return pos:line="1012" pos:column="17">return <expr><lit:literal type="number" pos:line="1012" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name pos:line="1014" pos:column="9">CopyToClone</name><argument_list pos:line="1014" pos:column="20">( <argument><expr><name pos:line="1014" pos:column="22">clone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1015" pos:column="9">clone</name><op:operator pos:line="1015" pos:column="14">-&gt;</op:operator><name pos:line="1015" pos:column="16">version</name></name> <op:operator pos:line="1015" pos:column="24">=</op:operator> <name pos:line="1015" pos:column="26">version</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1016" pos:column="9">clone</name><op:operator pos:line="1016" pos:column="14">-&gt;</op:operator><name pos:line="1016" pos:column="16">encoding</name></name> <op:operator pos:line="1016" pos:column="25">=</op:operator> <name pos:line="1016" pos:column="27">encoding</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1017" pos:column="9">clone</name><op:operator pos:line="1017" pos:column="14">-&gt;</op:operator><name pos:line="1017" pos:column="16">standalone</name></name> <op:operator pos:line="1017" pos:column="27">=</op:operator> <name pos:line="1017" pos:column="29">standalone</name></expr>;</expr_stmt>
	<return pos:line="1018" pos:column="9">return <expr><name pos:line="1018" pos:column="16">clone</name></expr>;</return>
}</block></function>


<function><type><name pos:line="1022" pos:column="1">void</name></type> <name><name pos:line="1022" pos:column="6">TiXmlUnknown</name><op:operator pos:line="1022" pos:column="18">::</op:operator><name pos:line="1022" pos:column="20">Print</name></name><parameter_list pos:line="1022" pos:column="25">( <param><decl><type><name pos:line="1022" pos:column="27">FILE</name><type:modifier pos:line="1022" pos:column="31">*</type:modifier></type> <name pos:line="1022" pos:column="33">cfile</name></decl></param>, <param><decl><type><name pos:line="1022" pos:column="40">int</name></type> <name pos:line="1022" pos:column="44">depth</name></decl></param> )</parameter_list> <specifier pos:line="1022" pos:column="52">const</specifier>
<block pos:line="1023" pos:column="1">{
	<for pos:line="1024" pos:column="9">for ( <init><decl><type><name pos:line="1024" pos:column="15">int</name></type> <name pos:line="1024" pos:column="19">i</name><init pos:line="1024" pos:column="20">=<expr><lit:literal type="number" pos:line="1024" pos:column="21">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1024" pos:column="24">i</name><op:operator pos:line="1024" pos:column="25">&lt;</op:operator><name pos:line="1024" pos:column="26">depth</name></expr>;</condition> <incr><expr><name pos:line="1024" pos:column="33">i</name><op:operator pos:line="1024" pos:column="34">++</op:operator></expr></incr> )
		<expr_stmt><expr><call><name pos:line="1025" pos:column="17">generic_fprintf</name><argument_list pos:line="1025" pos:column="32">( <argument><expr><name pos:line="1025" pos:column="34">cfile</name></expr></argument>, <argument><expr><call><name pos:line="1025" pos:column="41">TEXT</name><argument_list pos:line="1025" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="1025" pos:column="46">"    "</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></for>
	<expr_stmt><expr><call><name pos:line="1026" pos:column="9">generic_fprintf</name><argument_list pos:line="1026" pos:column="24">( <argument><expr><name pos:line="1026" pos:column="26">cfile</name></expr></argument>, <argument><expr><call><name pos:line="1026" pos:column="33">TEXT</name><argument_list pos:line="1026" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="1026" pos:column="38">"%s"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1026" pos:column="45">value</name><op:operator pos:line="1026" pos:column="50">.</op:operator><name pos:line="1026" pos:column="51">c_str</name></name><argument_list pos:line="1026" pos:column="56">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1029" pos:column="1">void</name></type> <name><name pos:line="1029" pos:column="6">TiXmlUnknown</name><op:operator pos:line="1029" pos:column="18">::</op:operator><name pos:line="1029" pos:column="20">StreamOut</name></name><parameter_list pos:line="1029" pos:column="29">( <param><decl><type><name pos:line="1029" pos:column="31">TIXML_OSTREAM</name> <type:modifier pos:line="1029" pos:column="45">*</type:modifier></type> <name pos:line="1029" pos:column="47">stream</name></decl></param> )</parameter_list> <specifier pos:line="1029" pos:column="56">const</specifier>
<block pos:line="1030" pos:column="1">{
	<expr_stmt><expr><op:operator pos:line="1031" pos:column="9">(</op:operator><op:operator pos:line="1031" pos:column="10">*</op:operator><name pos:line="1031" pos:column="11">stream</name><op:operator pos:line="1031" pos:column="17">)</op:operator> <op:operator pos:line="1031" pos:column="19">&lt;&lt;</op:operator> <call><name pos:line="1031" pos:column="22">TEXT</name><argument_list pos:line="1031" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="1031" pos:column="27">"&lt;"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1031" pos:column="32">&lt;&lt;</op:operator> <name pos:line="1031" pos:column="35">value</name> <op:operator pos:line="1031" pos:column="41">&lt;&lt;</op:operator> <call><name pos:line="1031" pos:column="44">TEXT</name><argument_list pos:line="1031" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1031" pos:column="49">"&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="line" pos:line="1031" pos:column="65">// Don't use entities hear! It is unknown.</comment>
}</block></function>

<function><type><name pos:line="1034" pos:column="1">TiXmlNode</name><type:modifier pos:line="1034" pos:column="10">*</type:modifier></type> <name><name pos:line="1034" pos:column="12">TiXmlUnknown</name><op:operator pos:line="1034" pos:column="24">::</op:operator><name pos:line="1034" pos:column="26">Clone</name></name><parameter_list pos:line="1034" pos:column="31">()</parameter_list> <specifier pos:line="1034" pos:column="34">const</specifier>
<block pos:line="1035" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1036" pos:column="9">TiXmlUnknown</name><type:modifier pos:line="1036" pos:column="21">*</type:modifier></type> <name pos:line="1036" pos:column="23">clone</name> <init pos:line="1036" pos:column="29">= <expr><op:operator pos:line="1036" pos:column="31">new</op:operator> <call><name pos:line="1036" pos:column="35">TiXmlUnknown</name><argument_list pos:line="1036" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="1038" pos:column="9">if <condition pos:line="1038" pos:column="12">( <expr><op:operator pos:line="1038" pos:column="14">!</op:operator><name pos:line="1038" pos:column="15">clone</name></expr> )</condition><then pos:line="1038" pos:column="22">
		<return pos:line="1039" pos:column="17">return <expr><lit:literal type="number" pos:line="1039" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name pos:line="1041" pos:column="9">CopyToClone</name><argument_list pos:line="1041" pos:column="20">( <argument><expr><name pos:line="1041" pos:column="22">clone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1042" pos:column="9">return <expr><name pos:line="1042" pos:column="16">clone</name></expr>;</return>
}</block></function>


<constructor><name><name pos:line="1046" pos:column="1">TiXmlAttributeSet</name><op:operator pos:line="1046" pos:column="18">::</op:operator><name pos:line="1046" pos:column="20">TiXmlAttributeSet</name></name><parameter_list pos:line="1046" pos:column="37">()</parameter_list>
<block pos:line="1047" pos:column="1">{
	<expr_stmt><expr><name><name pos:line="1048" pos:column="9">sentinel</name><op:operator pos:line="1048" pos:column="17">.</op:operator><name pos:line="1048" pos:column="18">next</name></name> <op:operator pos:line="1048" pos:column="23">=</op:operator> <op:operator pos:line="1048" pos:column="25">&amp;</op:operator><name pos:line="1048" pos:column="26">sentinel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1049" pos:column="9">sentinel</name><op:operator pos:line="1049" pos:column="17">.</op:operator><name pos:line="1049" pos:column="18">prev</name></name> <op:operator pos:line="1049" pos:column="23">=</op:operator> <op:operator pos:line="1049" pos:column="25">&amp;</op:operator><name pos:line="1049" pos:column="26">sentinel</name></expr>;</expr_stmt>
}</block></constructor>


<destructor><name><name pos:line="1053" pos:column="1">TiXmlAttributeSet</name><op:operator pos:line="1053" pos:column="18">::</op:operator>~<name pos:line="1053" pos:column="21">TiXmlAttributeSet</name></name><parameter_list pos:line="1053" pos:column="38">()</parameter_list>
<block pos:line="1054" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1055" pos:column="9">assert</name><argument_list pos:line="1055" pos:column="15">( <argument><expr><name><name pos:line="1055" pos:column="17">sentinel</name><op:operator pos:line="1055" pos:column="25">.</op:operator><name pos:line="1055" pos:column="26">next</name></name> <op:operator pos:line="1055" pos:column="31">==</op:operator> <op:operator pos:line="1055" pos:column="34">&amp;</op:operator><name pos:line="1055" pos:column="35">sentinel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1056" pos:column="9">assert</name><argument_list pos:line="1056" pos:column="15">( <argument><expr><name><name pos:line="1056" pos:column="17">sentinel</name><op:operator pos:line="1056" pos:column="25">.</op:operator><name pos:line="1056" pos:column="26">prev</name></name> <op:operator pos:line="1056" pos:column="31">==</op:operator> <op:operator pos:line="1056" pos:column="34">&amp;</op:operator><name pos:line="1056" pos:column="35">sentinel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></destructor>


<function><type><name pos:line="1060" pos:column="1">void</name></type> <name><name pos:line="1060" pos:column="6">TiXmlAttributeSet</name><op:operator pos:line="1060" pos:column="23">::</op:operator><name pos:line="1060" pos:column="25">Add</name></name><parameter_list pos:line="1060" pos:column="28">( <param><decl><type><name pos:line="1060" pos:column="30">TiXmlAttribute</name><type:modifier pos:line="1060" pos:column="44">*</type:modifier></type> <name pos:line="1060" pos:column="46">addMe</name></decl></param> )</parameter_list>
<block pos:line="1061" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1062" pos:column="9">assert</name><argument_list pos:line="1062" pos:column="15">( <argument><expr><op:operator pos:line="1062" pos:column="17">!</op:operator><call><name pos:line="1062" pos:column="18">Find</name><argument_list pos:line="1062" pos:column="22">( <argument><expr><call><name><name pos:line="1062" pos:column="24">addMe</name><op:operator pos:line="1062" pos:column="29">-&gt;</op:operator><name pos:line="1062" pos:column="31">Name</name></name><argument_list pos:line="1062" pos:column="35">()</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="1062" pos:column="49">// Shouldn't be multiply adding to the set.</comment>

	<expr_stmt><expr><name><name pos:line="1064" pos:column="9">addMe</name><op:operator pos:line="1064" pos:column="14">-&gt;</op:operator><name pos:line="1064" pos:column="16">next</name></name> <op:operator pos:line="1064" pos:column="21">=</op:operator> <op:operator pos:line="1064" pos:column="23">&amp;</op:operator><name pos:line="1064" pos:column="24">sentinel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1065" pos:column="9">addMe</name><op:operator pos:line="1065" pos:column="14">-&gt;</op:operator><name pos:line="1065" pos:column="16">prev</name></name> <op:operator pos:line="1065" pos:column="21">=</op:operator> <name><name pos:line="1065" pos:column="23">sentinel</name><op:operator pos:line="1065" pos:column="31">.</op:operator><name pos:line="1065" pos:column="32">prev</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1067" pos:column="9">sentinel</name><op:operator pos:line="1067" pos:column="17">.</op:operator><name pos:line="1067" pos:column="18">prev</name><op:operator pos:line="1067" pos:column="22">-&gt;</op:operator><name pos:line="1067" pos:column="24">next</name></name> <op:operator pos:line="1067" pos:column="29">=</op:operator> <name pos:line="1067" pos:column="31">addMe</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1068" pos:column="9">sentinel</name><op:operator pos:line="1068" pos:column="17">.</op:operator><name pos:line="1068" pos:column="18">prev</name></name>      <op:operator pos:line="1068" pos:column="28">=</op:operator> <name pos:line="1068" pos:column="30">addMe</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1071" pos:column="1">void</name></type> <name><name pos:line="1071" pos:column="6">TiXmlAttributeSet</name><op:operator pos:line="1071" pos:column="23">::</op:operator><name pos:line="1071" pos:column="25">Remove</name></name><parameter_list pos:line="1071" pos:column="31">( <param><decl><type><name pos:line="1071" pos:column="33">TiXmlAttribute</name><type:modifier pos:line="1071" pos:column="47">*</type:modifier></type> <name pos:line="1071" pos:column="49">removeMe</name></decl></param> )</parameter_list>
<block pos:line="1072" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1073" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="1073" pos:column="23">*</type:modifier></type> <name pos:line="1073" pos:column="25">node</name></decl>;</decl_stmt>

	<for pos:line="1075" pos:column="9">for( <init><expr><name pos:line="1075" pos:column="14">node</name> <op:operator pos:line="1075" pos:column="19">=</op:operator> <name><name pos:line="1075" pos:column="21">sentinel</name><op:operator pos:line="1075" pos:column="29">.</op:operator><name pos:line="1075" pos:column="30">next</name></name></expr>;</init> <condition><expr><name pos:line="1075" pos:column="36">node</name> <op:operator pos:line="1075" pos:column="41">!=</op:operator> <op:operator pos:line="1075" pos:column="44">&amp;</op:operator><name pos:line="1075" pos:column="45">sentinel</name></expr>;</condition> <incr><expr><name pos:line="1075" pos:column="55">node</name> <op:operator pos:line="1075" pos:column="60">=</op:operator> <name><name pos:line="1075" pos:column="62">node</name><op:operator pos:line="1075" pos:column="66">-&gt;</op:operator><name pos:line="1075" pos:column="68">next</name></name></expr></incr> )
	<block pos:line="1076" pos:column="9">{
		<if pos:line="1077" pos:column="17">if <condition pos:line="1077" pos:column="20">( <expr><name pos:line="1077" pos:column="22">node</name> <op:operator pos:line="1077" pos:column="27">==</op:operator> <name pos:line="1077" pos:column="30">removeMe</name></expr> )</condition><then pos:line="1077" pos:column="40">
		<block pos:line="1078" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="1079" pos:column="25">node</name><op:operator pos:line="1079" pos:column="29">-&gt;</op:operator><name pos:line="1079" pos:column="31">prev</name><op:operator pos:line="1079" pos:column="35">-&gt;</op:operator><name pos:line="1079" pos:column="37">next</name></name> <op:operator pos:line="1079" pos:column="42">=</op:operator> <name><name pos:line="1079" pos:column="44">node</name><op:operator pos:line="1079" pos:column="48">-&gt;</op:operator><name pos:line="1079" pos:column="50">next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1080" pos:column="25">node</name><op:operator pos:line="1080" pos:column="29">-&gt;</op:operator><name pos:line="1080" pos:column="31">next</name><op:operator pos:line="1080" pos:column="35">-&gt;</op:operator><name pos:line="1080" pos:column="37">prev</name></name> <op:operator pos:line="1080" pos:column="42">=</op:operator> <name><name pos:line="1080" pos:column="44">node</name><op:operator pos:line="1080" pos:column="48">-&gt;</op:operator><name pos:line="1080" pos:column="50">prev</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1081" pos:column="25">node</name><op:operator pos:line="1081" pos:column="29">-&gt;</op:operator><name pos:line="1081" pos:column="31">next</name></name> <op:operator pos:line="1081" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="1081" pos:column="38">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1082" pos:column="25">node</name><op:operator pos:line="1082" pos:column="29">-&gt;</op:operator><name pos:line="1082" pos:column="31">prev</name></name> <op:operator pos:line="1082" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="1082" pos:column="38">0</lit:literal></expr>;</expr_stmt>
			<return pos:line="1083" pos:column="25">return;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="1086" pos:column="9">assert</name><argument_list pos:line="1086" pos:column="15">( <argument><expr><lit:literal type="number" pos:line="1086" pos:column="17">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>		<comment type="line" pos:line="1086" pos:column="33">// we tried to remove a non-linked attribute.</comment>
}</block></function>

<function><type><name pos:line="1089" pos:column="1">TiXmlAttribute</name><type:modifier pos:line="1089" pos:column="15">*</type:modifier></type>	<name><name pos:line="1089" pos:column="17">TiXmlAttributeSet</name><op:operator pos:line="1089" pos:column="34">::</op:operator><name pos:line="1089" pos:column="36">Find</name></name><parameter_list pos:line="1089" pos:column="40">( <param><decl><type><specifier pos:line="1089" pos:column="42">const</specifier> <name pos:line="1089" pos:column="48">TCHAR</name> <type:modifier pos:line="1089" pos:column="54">*</type:modifier></type> <name pos:line="1089" pos:column="56">name</name></decl></param> )</parameter_list> <specifier pos:line="1089" pos:column="63">const</specifier>
<block pos:line="1090" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1091" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="1091" pos:column="23">*</type:modifier></type> <name pos:line="1091" pos:column="25">node</name></decl>;</decl_stmt>

	<for pos:line="1093" pos:column="9">for( <init><expr><name pos:line="1093" pos:column="14">node</name> <op:operator pos:line="1093" pos:column="19">=</op:operator> <name><name pos:line="1093" pos:column="21">sentinel</name><op:operator pos:line="1093" pos:column="29">.</op:operator><name pos:line="1093" pos:column="30">next</name></name></expr>;</init> <condition><expr><name pos:line="1093" pos:column="36">node</name> <op:operator pos:line="1093" pos:column="41">!=</op:operator> <op:operator pos:line="1093" pos:column="44">&amp;</op:operator><name pos:line="1093" pos:column="45">sentinel</name></expr>;</condition> <incr><expr><name pos:line="1093" pos:column="55">node</name> <op:operator pos:line="1093" pos:column="60">=</op:operator> <name><name pos:line="1093" pos:column="62">node</name><op:operator pos:line="1093" pos:column="66">-&gt;</op:operator><name pos:line="1093" pos:column="68">next</name></name></expr></incr> )
	<block pos:line="1094" pos:column="9">{
		<if pos:line="1095" pos:column="17">if <condition pos:line="1095" pos:column="20">( <expr><name><name pos:line="1095" pos:column="22">node</name><op:operator pos:line="1095" pos:column="26">-&gt;</op:operator><name pos:line="1095" pos:column="28">name</name></name> <op:operator pos:line="1095" pos:column="33">==</op:operator> <name pos:line="1095" pos:column="36">name</name></expr> )</condition><then pos:line="1095" pos:column="42">
			<return pos:line="1096" pos:column="25">return <expr><name pos:line="1096" pos:column="32">node</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="1098" pos:column="9">return <expr><lit:literal type="number" pos:line="1098" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>


<cpp:ifdef pos:line="1102" pos:column="1">#<cpp:directive pos:line="1102" pos:column="2">ifdef</cpp:directive> <name pos:line="1102" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>	
<function><type><name pos:line="1103" pos:column="1">TIXML_ISTREAM</name> <type:modifier pos:line="1103" pos:column="15">&amp;</type:modifier></type> <name pos:line="1103" pos:column="17">operator &gt;&gt;</name> <parameter_list pos:line="1103" pos:column="29">(<param><decl><type><name pos:line="1103" pos:column="30">TIXML_ISTREAM</name> <type:modifier pos:line="1103" pos:column="44">&amp;</type:modifier></type> <name pos:line="1103" pos:column="46">in</name></decl></param>, <param><decl><type><name pos:line="1103" pos:column="50">TiXmlNode</name> <type:modifier pos:line="1103" pos:column="60">&amp;</type:modifier></type> <name pos:line="1103" pos:column="62">base</name></decl></param>)</parameter_list>
<block pos:line="1104" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1105" pos:column="9">TIXML_STRING</name></type> <name pos:line="1105" pos:column="22">tag</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="1106" pos:column="9">tag</name><op:operator pos:line="1106" pos:column="12">.</op:operator><name pos:line="1106" pos:column="13">reserve</name></name><argument_list pos:line="1106" pos:column="20">( <argument><expr><lit:literal type="number" pos:line="1106" pos:column="22">8</lit:literal> <op:operator pos:line="1106" pos:column="24">*</op:operator> <lit:literal type="number" pos:line="1106" pos:column="26">1000</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="1107" pos:column="9">base</name><op:operator pos:line="1107" pos:column="13">.</op:operator><name pos:line="1107" pos:column="14">StreamIn</name></name><argument_list pos:line="1107" pos:column="22">( <argument><expr><op:operator pos:line="1107" pos:column="24">&amp;</op:operator><name pos:line="1107" pos:column="25">in</name></expr></argument>, <argument><expr><op:operator pos:line="1107" pos:column="29">&amp;</op:operator><name pos:line="1107" pos:column="30">tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="1109" pos:column="9">base</name><op:operator pos:line="1109" pos:column="13">.</op:operator><name pos:line="1109" pos:column="14">Parse</name></name><argument_list pos:line="1109" pos:column="19">( <argument><expr><call><name><name pos:line="1109" pos:column="21">tag</name><op:operator pos:line="1109" pos:column="24">.</op:operator><name pos:line="1109" pos:column="25">c_str</name></name><argument_list pos:line="1109" pos:column="30">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1109" pos:column="34">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1110" pos:column="9">return <expr><name pos:line="1110" pos:column="16">in</name></expr>;</return>
}</block></function>
<cpp:endif pos:line="1112" pos:column="1">#<cpp:directive pos:line="1112" pos:column="2">endif</cpp:directive></cpp:endif>


<function><type><name pos:line="1115" pos:column="1">TIXML_OSTREAM</name> <type:modifier pos:line="1115" pos:column="15">&amp;</type:modifier></type> <name pos:line="1115" pos:column="17">operator&lt;&lt;</name> <parameter_list pos:line="1115" pos:column="28">(<param><decl><type><name pos:line="1115" pos:column="29">TIXML_OSTREAM</name> <type:modifier pos:line="1115" pos:column="43">&amp;</type:modifier></type> <name pos:line="1115" pos:column="45">out</name></decl></param>, <param><decl><type><specifier pos:line="1115" pos:column="50">const</specifier> <name pos:line="1115" pos:column="56">TiXmlNode</name> <type:modifier pos:line="1115" pos:column="66">&amp;</type:modifier></type> <name pos:line="1115" pos:column="68">base</name></decl></param>)</parameter_list>
<block pos:line="1116" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="1117" pos:column="9">base</name><op:operator pos:line="1117" pos:column="13">.</op:operator><name pos:line="1117" pos:column="14">StreamOut</name></name> <argument_list pos:line="1117" pos:column="24">(<argument><expr><op:operator pos:line="1117" pos:column="25">&amp;</op:operator> <name pos:line="1117" pos:column="27">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1118" pos:column="9">return <expr><name pos:line="1118" pos:column="16">out</name></expr>;</return>
}</block></function>


<cpp:ifdef pos:line="1122" pos:column="1">#<cpp:directive pos:line="1122" pos:column="2">ifdef</cpp:directive> <name pos:line="1122" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>	
<function><type><name pos:line="1123" pos:column="1">generic_string</name> <type:modifier pos:line="1123" pos:column="16">&amp;</type:modifier></type> <name pos:line="1123" pos:column="18">operator&lt;&lt;</name> <parameter_list pos:line="1123" pos:column="29">(<param><decl><type><name pos:line="1123" pos:column="30">generic_string</name><type:modifier pos:line="1123" pos:column="44">&amp;</type:modifier></type> <name pos:line="1123" pos:column="46">out</name></decl></param>, <param><decl><type><specifier pos:line="1123" pos:column="51">const</specifier> <name pos:line="1123" pos:column="57">TiXmlNode</name><type:modifier pos:line="1123" pos:column="66">&amp;</type:modifier></type> <name pos:line="1123" pos:column="68">base</name></decl></param> )</parameter_list>
<block pos:line="1124" pos:column="1">{
	
   <comment type="line" pos:line="1126" pos:column="4">//std::ostringstream os_stream( std::ostringstream::out );</comment>
	<function_decl><type><name><name pos:line="1127" pos:column="9">std</name><op:operator pos:line="1127" pos:column="12">::</op:operator><name><name pos:line="1127" pos:column="14">basic_ostringstream</name><argument_list pos:line="1127" pos:column="33">&lt;<argument><expr><name pos:line="1127" pos:column="34">TCHAR</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1127" pos:column="41">os_stream</name><parameter_list pos:line="1127" pos:column="50">( <param><decl><type><name><name pos:line="1127" pos:column="52">std</name><op:operator pos:line="1127" pos:column="55">::</op:operator><name pos:line="1127" pos:column="57">ostringstream</name><op:operator pos:line="1127" pos:column="70">::</op:operator><name pos:line="1127" pos:column="72">out</name></name></type></decl></param> )</parameter_list>;</function_decl>
   <expr_stmt><expr><call><name><name pos:line="1128" pos:column="4">base</name><op:operator pos:line="1128" pos:column="8">.</op:operator><name pos:line="1128" pos:column="9">StreamOut</name></name><argument_list pos:line="1128" pos:column="18">( <argument><expr><op:operator pos:line="1128" pos:column="20">&amp;</op:operator><name pos:line="1128" pos:column="21">os_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
   
   <expr_stmt><expr><call><name><name pos:line="1130" pos:column="4">out</name><op:operator pos:line="1130" pos:column="7">.</op:operator><name pos:line="1130" pos:column="8">append</name></name><argument_list pos:line="1130" pos:column="14">( <argument><expr><call><name><name pos:line="1130" pos:column="16">os_stream</name><op:operator pos:line="1130" pos:column="25">.</op:operator><name pos:line="1130" pos:column="26">str</name></name><argument_list pos:line="1130" pos:column="29">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
   <return pos:line="1131" pos:column="4">return <expr><name pos:line="1131" pos:column="11">out</name></expr>;</return>
}</block></function>
<cpp:endif pos:line="1133" pos:column="1">#<cpp:directive pos:line="1133" pos:column="2">endif</cpp:directive></cpp:endif>


<function><type><name pos:line="1136" pos:column="1">TiXmlHandle</name></type> <name><name pos:line="1136" pos:column="13">TiXmlHandle</name><op:operator pos:line="1136" pos:column="24">::</op:operator><name pos:line="1136" pos:column="26">FirstChild</name></name><parameter_list pos:line="1136" pos:column="36">()</parameter_list> <specifier pos:line="1136" pos:column="39">const</specifier>
<block pos:line="1137" pos:column="1">{
	<if pos:line="1138" pos:column="9">if <condition pos:line="1138" pos:column="12">( <expr><name pos:line="1138" pos:column="14">node</name></expr> )</condition><then pos:line="1138" pos:column="20">
	<block pos:line="1139" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1140" pos:column="17">TiXmlNode</name><type:modifier pos:line="1140" pos:column="26">*</type:modifier></type> <name pos:line="1140" pos:column="28">child</name> <init pos:line="1140" pos:column="34">= <expr><call><name><name pos:line="1140" pos:column="36">node</name><op:operator pos:line="1140" pos:column="40">-&gt;</op:operator><name pos:line="1140" pos:column="42">FirstChild</name></name><argument_list pos:line="1140" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1141" pos:column="17">if <condition pos:line="1141" pos:column="20">( <expr><name pos:line="1141" pos:column="22">child</name></expr> )</condition><then pos:line="1141" pos:column="29">
			<return pos:line="1142" pos:column="25">return <expr><call><name pos:line="1142" pos:column="32">TiXmlHandle</name><argument_list pos:line="1142" pos:column="43">( <argument><expr><name pos:line="1142" pos:column="45">child</name></expr></argument> )</argument_list></call></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="1144" pos:column="9">return <expr><call><name pos:line="1144" pos:column="16">TiXmlHandle</name><argument_list pos:line="1144" pos:column="27">( <argument><expr><lit:literal type="number" pos:line="1144" pos:column="29">0</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="1148" pos:column="1">TiXmlHandle</name></type> <name><name pos:line="1148" pos:column="13">TiXmlHandle</name><op:operator pos:line="1148" pos:column="24">::</op:operator><name pos:line="1148" pos:column="26">FirstChild</name></name><parameter_list pos:line="1148" pos:column="36">( <param><decl><type><specifier pos:line="1148" pos:column="38">const</specifier> <name pos:line="1148" pos:column="44">TCHAR</name> <type:modifier pos:line="1148" pos:column="50">*</type:modifier></type> <name pos:line="1148" pos:column="52">value</name></decl></param> )</parameter_list> <specifier pos:line="1148" pos:column="60">const</specifier>
<block pos:line="1149" pos:column="1">{
	<if pos:line="1150" pos:column="9">if <condition pos:line="1150" pos:column="12">( <expr><name pos:line="1150" pos:column="14">node</name></expr> )</condition><then pos:line="1150" pos:column="20">
	<block pos:line="1151" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1152" pos:column="17">TiXmlNode</name><type:modifier pos:line="1152" pos:column="26">*</type:modifier></type> <name pos:line="1152" pos:column="28">child</name> <init pos:line="1152" pos:column="34">= <expr><call><name><name pos:line="1152" pos:column="36">node</name><op:operator pos:line="1152" pos:column="40">-&gt;</op:operator><name pos:line="1152" pos:column="42">FirstChild</name></name><argument_list pos:line="1152" pos:column="52">( <argument><expr><name pos:line="1152" pos:column="54">value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1153" pos:column="17">if <condition pos:line="1153" pos:column="20">( <expr><name pos:line="1153" pos:column="22">child</name></expr> )</condition><then pos:line="1153" pos:column="29">
			<return pos:line="1154" pos:column="25">return <expr><call><name pos:line="1154" pos:column="32">TiXmlHandle</name><argument_list pos:line="1154" pos:column="43">( <argument><expr><name pos:line="1154" pos:column="45">child</name></expr></argument> )</argument_list></call></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="1156" pos:column="9">return <expr><call><name pos:line="1156" pos:column="16">TiXmlHandle</name><argument_list pos:line="1156" pos:column="27">( <argument><expr><lit:literal type="number" pos:line="1156" pos:column="29">0</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="1160" pos:column="1">TiXmlHandle</name></type> <name><name pos:line="1160" pos:column="13">TiXmlHandle</name><op:operator pos:line="1160" pos:column="24">::</op:operator><name pos:line="1160" pos:column="26">FirstChildElement</name></name><parameter_list pos:line="1160" pos:column="43">()</parameter_list> <specifier pos:line="1160" pos:column="46">const</specifier>
<block pos:line="1161" pos:column="1">{
	<if pos:line="1162" pos:column="9">if <condition pos:line="1162" pos:column="12">( <expr><name pos:line="1162" pos:column="14">node</name></expr> )</condition><then pos:line="1162" pos:column="20">
	<block pos:line="1163" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1164" pos:column="17">TiXmlElement</name><type:modifier pos:line="1164" pos:column="29">*</type:modifier></type> <name pos:line="1164" pos:column="31">child</name> <init pos:line="1164" pos:column="37">= <expr><call><name><name pos:line="1164" pos:column="39">node</name><op:operator pos:line="1164" pos:column="43">-&gt;</op:operator><name pos:line="1164" pos:column="45">FirstChildElement</name></name><argument_list pos:line="1164" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1165" pos:column="17">if <condition pos:line="1165" pos:column="20">( <expr><name pos:line="1165" pos:column="22">child</name></expr> )</condition><then pos:line="1165" pos:column="29">
			<return pos:line="1166" pos:column="25">return <expr><call><name pos:line="1166" pos:column="32">TiXmlHandle</name><argument_list pos:line="1166" pos:column="43">( <argument><expr><name pos:line="1166" pos:column="45">child</name></expr></argument> )</argument_list></call></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="1168" pos:column="9">return <expr><call><name pos:line="1168" pos:column="16">TiXmlHandle</name><argument_list pos:line="1168" pos:column="27">( <argument><expr><lit:literal type="number" pos:line="1168" pos:column="29">0</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="1172" pos:column="1">TiXmlHandle</name></type> <name><name pos:line="1172" pos:column="13">TiXmlHandle</name><op:operator pos:line="1172" pos:column="24">::</op:operator><name pos:line="1172" pos:column="26">FirstChildElement</name></name><parameter_list pos:line="1172" pos:column="43">( <param><decl><type><specifier pos:line="1172" pos:column="45">const</specifier> <name pos:line="1172" pos:column="51">TCHAR</name> <type:modifier pos:line="1172" pos:column="57">*</type:modifier></type> <name pos:line="1172" pos:column="59">value</name></decl></param> )</parameter_list> <specifier pos:line="1172" pos:column="67">const</specifier>
<block pos:line="1173" pos:column="1">{
	<if pos:line="1174" pos:column="9">if <condition pos:line="1174" pos:column="12">( <expr><name pos:line="1174" pos:column="14">node</name></expr> )</condition><then pos:line="1174" pos:column="20">
	<block pos:line="1175" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1176" pos:column="17">TiXmlElement</name><type:modifier pos:line="1176" pos:column="29">*</type:modifier></type> <name pos:line="1176" pos:column="31">child</name> <init pos:line="1176" pos:column="37">= <expr><call><name><name pos:line="1176" pos:column="39">node</name><op:operator pos:line="1176" pos:column="43">-&gt;</op:operator><name pos:line="1176" pos:column="45">FirstChildElement</name></name><argument_list pos:line="1176" pos:column="62">( <argument><expr><name pos:line="1176" pos:column="64">value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1177" pos:column="17">if <condition pos:line="1177" pos:column="20">( <expr><name pos:line="1177" pos:column="22">child</name></expr> )</condition><then pos:line="1177" pos:column="29">
			<return pos:line="1178" pos:column="25">return <expr><call><name pos:line="1178" pos:column="32">TiXmlHandle</name><argument_list pos:line="1178" pos:column="43">( <argument><expr><name pos:line="1178" pos:column="45">child</name></expr></argument> )</argument_list></call></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="1180" pos:column="9">return <expr><call><name pos:line="1180" pos:column="16">TiXmlHandle</name><argument_list pos:line="1180" pos:column="27">( <argument><expr><lit:literal type="number" pos:line="1180" pos:column="29">0</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1183" pos:column="1">TiXmlHandle</name></type> <name><name pos:line="1183" pos:column="13">TiXmlHandle</name><op:operator pos:line="1183" pos:column="24">::</op:operator><name pos:line="1183" pos:column="26">Child</name></name><parameter_list pos:line="1183" pos:column="31">( <param><decl><type><name pos:line="1183" pos:column="33">int</name></type> <name pos:line="1183" pos:column="37">count</name></decl></param> )</parameter_list> <specifier pos:line="1183" pos:column="45">const</specifier>
<block pos:line="1184" pos:column="1">{
	<if pos:line="1185" pos:column="9">if <condition pos:line="1185" pos:column="12">( <expr><name pos:line="1185" pos:column="14">node</name></expr> )</condition><then pos:line="1185" pos:column="20">
	<block pos:line="1186" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1187" pos:column="17">int</name></type> <name pos:line="1187" pos:column="21">i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1188" pos:column="17">TiXmlNode</name><type:modifier pos:line="1188" pos:column="26">*</type:modifier></type> <name pos:line="1188" pos:column="28">child</name> <init pos:line="1188" pos:column="34">= <expr><call><name><name pos:line="1188" pos:column="36">node</name><op:operator pos:line="1188" pos:column="40">-&gt;</op:operator><name pos:line="1188" pos:column="42">FirstChild</name></name><argument_list pos:line="1188" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="1189" pos:column="17">for (	<init><expr><name pos:line="1189" pos:column="25">i</name><op:operator pos:line="1189" pos:column="26">=</op:operator><lit:literal type="number" pos:line="1189" pos:column="27">0</lit:literal></expr>;</init>
				<condition><expr><name pos:line="1190" pos:column="33">child</name> <op:operator pos:line="1190" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1190" pos:column="42">i</name><op:operator pos:line="1190" pos:column="43">&lt;</op:operator><name pos:line="1190" pos:column="44">count</name></expr>;</condition>
				<incr><expr><name pos:line="1191" pos:column="33">child</name> <op:operator pos:line="1191" pos:column="39">=</op:operator> <call><name><name pos:line="1191" pos:column="41">child</name><op:operator pos:line="1191" pos:column="46">-&gt;</op:operator><name pos:line="1191" pos:column="48">NextSibling</name></name><argument_list pos:line="1191" pos:column="59">()</argument_list></call></expr><op:operator pos:line="1191" pos:column="61">,</op:operator> <expr><op:operator pos:line="1191" pos:column="63">++</op:operator><name pos:line="1191" pos:column="65">i</name></expr></incr> )
		<block pos:line="1192" pos:column="17">{
			<comment type="line" pos:line="1193" pos:column="25">// nothing</comment>
		}</block></for>
		<if pos:line="1195" pos:column="17">if <condition pos:line="1195" pos:column="20">( <expr><name pos:line="1195" pos:column="22">child</name></expr> )</condition><then pos:line="1195" pos:column="29">
			<return pos:line="1196" pos:column="25">return <expr><call><name pos:line="1196" pos:column="32">TiXmlHandle</name><argument_list pos:line="1196" pos:column="43">( <argument><expr><name pos:line="1196" pos:column="45">child</name></expr></argument> )</argument_list></call></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="1198" pos:column="9">return <expr><call><name pos:line="1198" pos:column="16">TiXmlHandle</name><argument_list pos:line="1198" pos:column="27">( <argument><expr><lit:literal type="number" pos:line="1198" pos:column="29">0</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="1202" pos:column="1">TiXmlHandle</name></type> <name><name pos:line="1202" pos:column="13">TiXmlHandle</name><op:operator pos:line="1202" pos:column="24">::</op:operator><name pos:line="1202" pos:column="26">Child</name></name><parameter_list pos:line="1202" pos:column="31">( <param><decl><type><specifier pos:line="1202" pos:column="33">const</specifier> <name pos:line="1202" pos:column="39">TCHAR</name><type:modifier pos:line="1202" pos:column="44">*</type:modifier></type> <name pos:line="1202" pos:column="46">value</name></decl></param>, <param><decl><type><name pos:line="1202" pos:column="53">int</name></type> <name pos:line="1202" pos:column="57">count</name></decl></param> )</parameter_list> <specifier pos:line="1202" pos:column="65">const</specifier>
<block pos:line="1203" pos:column="1">{
	<if pos:line="1204" pos:column="9">if <condition pos:line="1204" pos:column="12">( <expr><name pos:line="1204" pos:column="14">node</name></expr> )</condition><then pos:line="1204" pos:column="20">
	<block pos:line="1205" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1206" pos:column="17">int</name></type> <name pos:line="1206" pos:column="21">i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1207" pos:column="17">TiXmlNode</name><type:modifier pos:line="1207" pos:column="26">*</type:modifier></type> <name pos:line="1207" pos:column="28">child</name> <init pos:line="1207" pos:column="34">= <expr><call><name><name pos:line="1207" pos:column="36">node</name><op:operator pos:line="1207" pos:column="40">-&gt;</op:operator><name pos:line="1207" pos:column="42">FirstChild</name></name><argument_list pos:line="1207" pos:column="52">( <argument><expr><name pos:line="1207" pos:column="54">value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="1208" pos:column="17">for (	<init><expr><name pos:line="1208" pos:column="25">i</name><op:operator pos:line="1208" pos:column="26">=</op:operator><lit:literal type="number" pos:line="1208" pos:column="27">0</lit:literal></expr>;</init>
				<condition><expr><name pos:line="1209" pos:column="33">child</name> <op:operator pos:line="1209" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1209" pos:column="42">i</name><op:operator pos:line="1209" pos:column="43">&lt;</op:operator><name pos:line="1209" pos:column="44">count</name></expr>;</condition>
				<incr><expr><name pos:line="1210" pos:column="33">child</name> <op:operator pos:line="1210" pos:column="39">=</op:operator> <call><name><name pos:line="1210" pos:column="41">child</name><op:operator pos:line="1210" pos:column="46">-&gt;</op:operator><name pos:line="1210" pos:column="48">NextSibling</name></name><argument_list pos:line="1210" pos:column="59">( <argument><expr><name pos:line="1210" pos:column="61">value</name></expr></argument> )</argument_list></call></expr><op:operator pos:line="1210" pos:column="68">,</op:operator> <expr><op:operator pos:line="1210" pos:column="70">++</op:operator><name pos:line="1210" pos:column="72">i</name></expr></incr> )
		<block pos:line="1211" pos:column="17">{
			<comment type="line" pos:line="1212" pos:column="25">// nothing</comment>
		}</block></for>
		<if pos:line="1214" pos:column="17">if <condition pos:line="1214" pos:column="20">( <expr><name pos:line="1214" pos:column="22">child</name></expr> )</condition><then pos:line="1214" pos:column="29">
			<return pos:line="1215" pos:column="25">return <expr><call><name pos:line="1215" pos:column="32">TiXmlHandle</name><argument_list pos:line="1215" pos:column="43">( <argument><expr><name pos:line="1215" pos:column="45">child</name></expr></argument> )</argument_list></call></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="1217" pos:column="9">return <expr><call><name pos:line="1217" pos:column="16">TiXmlHandle</name><argument_list pos:line="1217" pos:column="27">( <argument><expr><lit:literal type="number" pos:line="1217" pos:column="29">0</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="1221" pos:column="1">TiXmlHandle</name></type> <name><name pos:line="1221" pos:column="13">TiXmlHandle</name><op:operator pos:line="1221" pos:column="24">::</op:operator><name pos:line="1221" pos:column="26">ChildElement</name></name><parameter_list pos:line="1221" pos:column="38">( <param><decl><type><name pos:line="1221" pos:column="40">int</name></type> <name pos:line="1221" pos:column="44">count</name></decl></param> )</parameter_list> <specifier pos:line="1221" pos:column="52">const</specifier>
<block pos:line="1222" pos:column="1">{
	<if pos:line="1223" pos:column="9">if <condition pos:line="1223" pos:column="12">( <expr><name pos:line="1223" pos:column="14">node</name></expr> )</condition><then pos:line="1223" pos:column="20">
	<block pos:line="1224" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1225" pos:column="17">int</name></type> <name pos:line="1225" pos:column="21">i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1226" pos:column="17">TiXmlElement</name><type:modifier pos:line="1226" pos:column="29">*</type:modifier></type> <name pos:line="1226" pos:column="31">child</name> <init pos:line="1226" pos:column="37">= <expr><call><name><name pos:line="1226" pos:column="39">node</name><op:operator pos:line="1226" pos:column="43">-&gt;</op:operator><name pos:line="1226" pos:column="45">FirstChildElement</name></name><argument_list pos:line="1226" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="1227" pos:column="17">for (	<init><expr><name pos:line="1227" pos:column="25">i</name><op:operator pos:line="1227" pos:column="26">=</op:operator><lit:literal type="number" pos:line="1227" pos:column="27">0</lit:literal></expr>;</init>
				<condition><expr><name pos:line="1228" pos:column="33">child</name> <op:operator pos:line="1228" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1228" pos:column="42">i</name><op:operator pos:line="1228" pos:column="43">&lt;</op:operator><name pos:line="1228" pos:column="44">count</name></expr>;</condition>
				<incr><expr><name pos:line="1229" pos:column="33">child</name> <op:operator pos:line="1229" pos:column="39">=</op:operator> <call><name><name pos:line="1229" pos:column="41">child</name><op:operator pos:line="1229" pos:column="46">-&gt;</op:operator><name pos:line="1229" pos:column="48">NextSiblingElement</name></name><argument_list pos:line="1229" pos:column="66">()</argument_list></call></expr><op:operator pos:line="1229" pos:column="68">,</op:operator> <expr><op:operator pos:line="1229" pos:column="70">++</op:operator><name pos:line="1229" pos:column="72">i</name></expr></incr> )
		<block pos:line="1230" pos:column="17">{
			<comment type="line" pos:line="1231" pos:column="25">// nothing</comment>
		}</block></for>
		<if pos:line="1233" pos:column="17">if <condition pos:line="1233" pos:column="20">( <expr><name pos:line="1233" pos:column="22">child</name></expr> )</condition><then pos:line="1233" pos:column="29">
			<return pos:line="1234" pos:column="25">return <expr><call><name pos:line="1234" pos:column="32">TiXmlHandle</name><argument_list pos:line="1234" pos:column="43">( <argument><expr><name pos:line="1234" pos:column="45">child</name></expr></argument> )</argument_list></call></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="1236" pos:column="9">return <expr><call><name pos:line="1236" pos:column="16">TiXmlHandle</name><argument_list pos:line="1236" pos:column="27">( <argument><expr><lit:literal type="number" pos:line="1236" pos:column="29">0</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="1240" pos:column="1">TiXmlHandle</name></type> <name><name pos:line="1240" pos:column="13">TiXmlHandle</name><op:operator pos:line="1240" pos:column="24">::</op:operator><name pos:line="1240" pos:column="26">ChildElement</name></name><parameter_list pos:line="1240" pos:column="38">( <param><decl><type><specifier pos:line="1240" pos:column="40">const</specifier> <name pos:line="1240" pos:column="46">TCHAR</name><type:modifier pos:line="1240" pos:column="51">*</type:modifier></type> <name pos:line="1240" pos:column="53">value</name></decl></param>, <param><decl><type><name pos:line="1240" pos:column="60">int</name></type> <name pos:line="1240" pos:column="64">count</name></decl></param> )</parameter_list> <specifier pos:line="1240" pos:column="72">const</specifier>
<block pos:line="1241" pos:column="1">{
	<if pos:line="1242" pos:column="9">if <condition pos:line="1242" pos:column="12">( <expr><name pos:line="1242" pos:column="14">node</name></expr> )</condition><then pos:line="1242" pos:column="20">
	<block pos:line="1243" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1244" pos:column="17">int</name></type> <name pos:line="1244" pos:column="21">i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1245" pos:column="17">TiXmlElement</name><type:modifier pos:line="1245" pos:column="29">*</type:modifier></type> <name pos:line="1245" pos:column="31">child</name> <init pos:line="1245" pos:column="37">= <expr><call><name><name pos:line="1245" pos:column="39">node</name><op:operator pos:line="1245" pos:column="43">-&gt;</op:operator><name pos:line="1245" pos:column="45">FirstChildElement</name></name><argument_list pos:line="1245" pos:column="62">( <argument><expr><name pos:line="1245" pos:column="64">value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="1246" pos:column="17">for (	<init><expr><name pos:line="1246" pos:column="25">i</name><op:operator pos:line="1246" pos:column="26">=</op:operator><lit:literal type="number" pos:line="1246" pos:column="27">0</lit:literal></expr>;</init>
				<condition><expr><name pos:line="1247" pos:column="33">child</name> <op:operator pos:line="1247" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1247" pos:column="42">i</name><op:operator pos:line="1247" pos:column="43">&lt;</op:operator><name pos:line="1247" pos:column="44">count</name></expr>;</condition>
				<incr><expr><name pos:line="1248" pos:column="33">child</name> <op:operator pos:line="1248" pos:column="39">=</op:operator> <call><name><name pos:line="1248" pos:column="41">child</name><op:operator pos:line="1248" pos:column="46">-&gt;</op:operator><name pos:line="1248" pos:column="48">NextSiblingElement</name></name><argument_list pos:line="1248" pos:column="66">( <argument><expr><name pos:line="1248" pos:column="68">value</name></expr></argument> )</argument_list></call></expr><op:operator pos:line="1248" pos:column="75">,</op:operator> <expr><op:operator pos:line="1248" pos:column="77">++</op:operator><name pos:line="1248" pos:column="79">i</name></expr></incr> )
		<block pos:line="1249" pos:column="17">{
			<comment type="line" pos:line="1250" pos:column="25">// nothing</comment>
		}</block></for>
		<if pos:line="1252" pos:column="17">if <condition pos:line="1252" pos:column="20">( <expr><name pos:line="1252" pos:column="22">child</name></expr> )</condition><then pos:line="1252" pos:column="29">
			<return pos:line="1253" pos:column="25">return <expr><call><name pos:line="1253" pos:column="32">TiXmlHandle</name><argument_list pos:line="1253" pos:column="43">( <argument><expr><name pos:line="1253" pos:column="45">child</name></expr></argument> )</argument_list></call></expr>;</return></then></if>
	}</block></then></if>
	<return pos:line="1255" pos:column="9">return <expr><call><name pos:line="1255" pos:column="16">TiXmlHandle</name><argument_list pos:line="1255" pos:column="27">( <argument><expr><lit:literal type="number" pos:line="1255" pos:column="29">0</lit:literal></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>
</unit>
