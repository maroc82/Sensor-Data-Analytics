<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\win32\ScintillaWin.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file ScintillaWin.cxx
 ** Windows specific subclass of ScintillaBase.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;new&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>

<cpp:undef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">undef</cpp:directive> <name pos:line="19" pos:column="8">_WIN32_WINNT</name></cpp:undef>
<cpp:define pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="20" pos:column="9">_WIN32_WINNT</name></cpp:macro>  <cpp:value pos:line="20" pos:column="23">0x0500</cpp:value></cpp:define>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;commctrl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;richedit.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file pos:line="24" pos:column="10">&lt;windowsx.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef</cpp:directive> <name pos:line="31" pos:column="8">SCI_LEXER</name></cpp:ifdef>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="38" pos:column="10">"ContractionState.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="39" pos:column="10">"CellBuffer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="40" pos:column="10">"CallTip.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="41" pos:column="10">"KeyMap.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="42" pos:column="10">"Indicator.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="43" pos:column="10">"XPM.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="44" pos:column="10">"LineMarker.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"Style.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="46" pos:column="10">"AutoComplete.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="47" pos:column="10">"ViewStyle.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="48" pos:column="10">"CharClassify.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="49" pos:column="10">"Decoration.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="50" pos:column="10">"Document.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="51" pos:column="10">"Selection.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="52" pos:column="10">"PositionCache.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="53" pos:column="10">"Editor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="54" pos:column="10">"ScintillaBase.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="55" pos:column="10">"UniConversion.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef</cpp:directive> <name pos:line="57" pos:column="8">SCI_LEXER</name></cpp:ifdef>
<cpp:include pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="58" pos:column="10">"ExternalLexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">ifndef</cpp:directive> <name pos:line="61" pos:column="9">SPI_GETWHEELSCROLLLINES</name></cpp:ifndef>
<cpp:define pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="62" pos:column="9">SPI_GETWHEELSCROLLLINES</name></cpp:macro>   <cpp:value pos:line="62" pos:column="35">104</cpp:value></cpp:define>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">ifndef</cpp:directive> <name pos:line="65" pos:column="9">WM_UNICHAR</name></cpp:ifndef>
<cpp:define pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="66" pos:column="9">WM_UNICHAR</name></cpp:macro>                      <cpp:value pos:line="66" pos:column="41">0x0109</cpp:value></cpp:define>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">ifndef</cpp:directive> <name pos:line="69" pos:column="9">UNICODE_NOCHAR</name></cpp:ifndef>
<cpp:define pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="70" pos:column="9">UNICODE_NOCHAR</name></cpp:macro>                  <cpp:value pos:line="70" pos:column="41">0xFFFF</cpp:value></cpp:define>
<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">ifndef</cpp:directive> <name pos:line="73" pos:column="9">WM_IME_STARTCOMPOSITION</name></cpp:ifndef>
<cpp:include pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">include</cpp:directive> <cpp:file pos:line="74" pos:column="10">&lt;imm.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">include</cpp:directive> <cpp:file pos:line="77" pos:column="10">&lt;commctrl.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifndef</cpp:directive> <name pos:line="78" pos:column="9">__DMC__</name></cpp:ifndef>
<cpp:include pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">include</cpp:directive> <cpp:file pos:line="79" pos:column="10">&lt;zmouse.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:include pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">include</cpp:directive> <cpp:file pos:line="81" pos:column="10">&lt;ole2.h&gt;</cpp:file></cpp:include>

<cpp:ifndef pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">ifndef</cpp:directive> <name pos:line="83" pos:column="9">MK_ALT</name></cpp:ifndef>
<cpp:define pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="84" pos:column="9">MK_ALT</name></cpp:macro> <cpp:value pos:line="84" pos:column="16">32</cpp:value></cpp:define>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="87" pos:column="9">SC_WIN_IDLE</name></cpp:macro> <cpp:value pos:line="87" pos:column="21">5001</cpp:value></cpp:define>

<comment type="line" pos:line="89" pos:column="1">// Functions imported from PlatWin</comment>
<function_decl><type><specifier pos:line="90" pos:column="1">extern</specifier> <name pos:line="90" pos:column="8">bool</name></type> <name pos:line="90" pos:column="13">IsNT</name><parameter_list pos:line="90" pos:column="17">()</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="91" pos:column="1">extern</specifier> <name pos:line="91" pos:column="8">void</name></type> <name pos:line="91" pos:column="13">Platform_Initialise</name><parameter_list pos:line="91" pos:column="32">(<param><decl><type><name pos:line="91" pos:column="33">void</name> <type:modifier pos:line="91" pos:column="38">*</type:modifier></type><name pos:line="91" pos:column="39">hInstance</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier pos:line="92" pos:column="1">extern</specifier> <name pos:line="92" pos:column="8">void</name></type> <name pos:line="92" pos:column="13">Platform_Finalise</name><parameter_list pos:line="92" pos:column="30">()</parameter_list>;</function_decl>

<typedef pos:line="94" pos:column="1">typedef <function_decl><type><name pos:line="94" pos:column="9">BOOL</name></type> (<name pos:line="94" pos:column="15">WINAPI</name> <type:modifier pos:line="94" pos:column="22">*</type:modifier><name pos:line="94" pos:column="23">TrackMouseEventSig</name>)<parameter_list pos:line="94" pos:column="42">(<param><decl><type><name pos:line="94" pos:column="43">LPTRACKMOUSEEVENT</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="line" pos:line="96" pos:column="1">// GCC has trouble with the standard COM ABI so do it the old C way with explicit vtables.</comment>

<decl_stmt><decl><type><specifier pos:line="98" pos:column="1">const</specifier> <name pos:line="98" pos:column="7">TCHAR</name></type> <name><name pos:line="98" pos:column="13">scintillaClassName</name><index pos:line="98" pos:column="31">[]</index></name> <init pos:line="98" pos:column="34">= <expr><call><name pos:line="98" pos:column="36">TEXT</name><argument_list pos:line="98" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="41">"Scintilla"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="99" pos:column="1">const</specifier> <name pos:line="99" pos:column="7">TCHAR</name></type> <name><name pos:line="99" pos:column="13">callClassName</name><index pos:line="99" pos:column="26">[]</index></name> <init pos:line="99" pos:column="29">= <expr><call><name pos:line="99" pos:column="31">TEXT</name><argument_list pos:line="99" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="36">"CallTip"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">ifdef</cpp:directive> <name pos:line="101" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="102" pos:column="1">using namespace <name pos:line="102" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="105" pos:column="1">// Take care of 32/64 bit pointers</comment>
<cpp:ifdef pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">ifdef</cpp:directive> <name pos:line="106" pos:column="8">GetWindowLongPtr</name></cpp:ifdef>
<function><type><specifier pos:line="107" pos:column="1">static</specifier> <name pos:line="107" pos:column="8">void</name> <type:modifier pos:line="107" pos:column="13">*</type:modifier></type><name pos:line="107" pos:column="14">PointerFromWindow</name><parameter_list pos:line="107" pos:column="31">(<param><decl><type><name pos:line="107" pos:column="32">HWND</name></type> <name pos:line="107" pos:column="37">hWnd</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="43">{
	<return pos:line="108" pos:column="9">return <expr><call><name><name pos:line="108" pos:column="16">reinterpret_cast</name><argument_list pos:line="108" pos:column="32">&lt;<argument><expr><name pos:line="108" pos:column="33">void</name> <op:operator pos:line="108" pos:column="38">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="108" pos:column="40">(<argument><expr><call><name><op:operator pos:line="108" pos:column="41">::</op:operator><name pos:line="108" pos:column="43">GetWindowLongPtr</name></name><argument_list pos:line="108" pos:column="59">(<argument><expr><name pos:line="108" pos:column="60">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="108" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier pos:line="110" pos:column="1">static</specifier> <name pos:line="110" pos:column="8">void</name></type> <name pos:line="110" pos:column="13">SetWindowPointer</name><parameter_list pos:line="110" pos:column="29">(<param><decl><type><name pos:line="110" pos:column="30">HWND</name></type> <name pos:line="110" pos:column="35">hWnd</name></decl></param>, <param><decl><type><name pos:line="110" pos:column="41">void</name> <type:modifier pos:line="110" pos:column="46">*</type:modifier></type><name pos:line="110" pos:column="47">ptr</name></decl></param>)</parameter_list> <block pos:line="110" pos:column="52">{
	<expr_stmt><expr><call><name><op:operator pos:line="111" pos:column="9">::</op:operator><name pos:line="111" pos:column="11">SetWindowLongPtr</name></name><argument_list pos:line="111" pos:column="27">(<argument><expr><name pos:line="111" pos:column="28">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="111" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="111" pos:column="37">reinterpret_cast</name><argument_list pos:line="111" pos:column="53">&lt;<argument><expr><name pos:line="111" pos:column="54">LONG_PTR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="111" pos:column="63">(<argument><expr><name pos:line="111" pos:column="64">ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier pos:line="113" pos:column="1">static</specifier> <name pos:line="113" pos:column="8">void</name></type> <name pos:line="113" pos:column="13">SetWindowID</name><parameter_list pos:line="113" pos:column="24">(<param><decl><type><name pos:line="113" pos:column="25">HWND</name></type> <name pos:line="113" pos:column="30">hWnd</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="36">int</name></type> <name pos:line="113" pos:column="40">identifier</name></decl></param>)</parameter_list> <block pos:line="113" pos:column="52">{
	<expr_stmt><expr><call><name><op:operator pos:line="114" pos:column="9">::</op:operator><name pos:line="114" pos:column="11">SetWindowLongPtr</name></name><argument_list pos:line="114" pos:column="27">(<argument><expr><name pos:line="114" pos:column="28">hWnd</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="34">GWLP_ID</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="43">identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">else</cpp:directive></cpp:else>
<function><type><specifier pos:line="117" pos:column="1">static</specifier> <name pos:line="117" pos:column="8">void</name> <type:modifier pos:line="117" pos:column="13">*</type:modifier></type><name pos:line="117" pos:column="14">PointerFromWindow</name><parameter_list pos:line="117" pos:column="31">(<param><decl><type><name pos:line="117" pos:column="32">HWND</name></type> <name pos:line="117" pos:column="37">hWnd</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="43">{
	<return pos:line="118" pos:column="9">return <expr><call><name><name pos:line="118" pos:column="16">reinterpret_cast</name><argument_list pos:line="118" pos:column="32">&lt;<argument><expr><name pos:line="118" pos:column="33">void</name> <op:operator pos:line="118" pos:column="38">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="118" pos:column="40">(<argument><expr><call><name><op:operator pos:line="118" pos:column="41">::</op:operator><name pos:line="118" pos:column="43">GetWindowLong</name></name><argument_list pos:line="118" pos:column="56">(<argument><expr><name pos:line="118" pos:column="57">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="118" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier pos:line="120" pos:column="1">static</specifier> <name pos:line="120" pos:column="8">void</name></type> <name pos:line="120" pos:column="13">SetWindowPointer</name><parameter_list pos:line="120" pos:column="29">(<param><decl><type><name pos:line="120" pos:column="30">HWND</name></type> <name pos:line="120" pos:column="35">hWnd</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="41">void</name> <type:modifier pos:line="120" pos:column="46">*</type:modifier></type><name pos:line="120" pos:column="47">ptr</name></decl></param>)</parameter_list> <block pos:line="120" pos:column="52">{
	<expr_stmt><expr><call><name><op:operator pos:line="121" pos:column="9">::</op:operator><name pos:line="121" pos:column="11">SetWindowLong</name></name><argument_list pos:line="121" pos:column="24">(<argument><expr><name pos:line="121" pos:column="25">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="121" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="121" pos:column="34">reinterpret_cast</name><argument_list pos:line="121" pos:column="50">&lt;<argument><expr><name pos:line="121" pos:column="51">LONG</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="121" pos:column="56">(<argument><expr><name pos:line="121" pos:column="57">ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier pos:line="123" pos:column="1">static</specifier> <name pos:line="123" pos:column="8">void</name></type> <name pos:line="123" pos:column="13">SetWindowID</name><parameter_list pos:line="123" pos:column="24">(<param><decl><type><name pos:line="123" pos:column="25">HWND</name></type> <name pos:line="123" pos:column="30">hWnd</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="36">int</name></type> <name pos:line="123" pos:column="40">identifier</name></decl></param>)</parameter_list> <block pos:line="123" pos:column="52">{
	<expr_stmt><expr><call><name><op:operator pos:line="124" pos:column="9">::</op:operator><name pos:line="124" pos:column="11">SetWindowLong</name></name><argument_list pos:line="124" pos:column="24">(<argument><expr><name pos:line="124" pos:column="25">hWnd</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="31">GWL_ID</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="39">identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">endif</cpp:directive></cpp:endif>

<class_decl pos:line="128" pos:column="1">class <name pos:line="128" pos:column="7">ScintillaWin</name>;</class_decl> 	<comment type="line" pos:line="128" pos:column="25">// Forward declaration for COM interface subobjects</comment>

<typedef pos:line="130" pos:column="1">typedef <function_decl><type><name pos:line="130" pos:column="9">void</name></type> <name pos:line="130" pos:column="14">VFunction</name><parameter_list pos:line="130" pos:column="23">(<param><decl><type><name pos:line="130" pos:column="24">void</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block" format="doxygen" pos:line="132" pos:column="1">/**
 */</comment>
<class pos:line="134" pos:column="1">class <name pos:line="134" pos:column="7">FormatEnumerator</name> <block pos:line="134" pos:column="24">{<private type="default" pos:line="134" pos:column="25">
</private><public pos:line="135" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">VFunction</name> <type:modifier pos:line="136" pos:column="19">*</type:modifier><type:modifier pos:line="136" pos:column="20">*</type:modifier></type><name pos:line="136" pos:column="21">vtbl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">int</name></type> <name pos:line="137" pos:column="13">ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="138" pos:column="9">int</name></type> <name pos:line="138" pos:column="13">pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">CLIPFORMAT</name></type> <name><name pos:line="139" pos:column="20">formats</name><index pos:line="139" pos:column="27">[<expr><lit:literal type="number" pos:line="139" pos:column="28">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="140" pos:column="9">int</name></type> <name pos:line="140" pos:column="13">formatsLen</name></decl>;</decl_stmt>
	<constructor_decl><name pos:line="141" pos:column="9">FormatEnumerator</name><parameter_list pos:line="141" pos:column="25">(<param><decl><type><name pos:line="141" pos:column="26">int</name></type> <name pos:line="141" pos:column="30">pos_</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="36">CLIPFORMAT</name></type> <name><name pos:line="141" pos:column="47">formats_</name><index pos:line="141" pos:column="55">[]</index></name></decl></param>, <param><decl><type><name pos:line="141" pos:column="59">int</name></type> <name pos:line="141" pos:column="63">formatsLen_</name></decl></param>)</parameter_list>;</constructor_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="144" pos:column="1">/**
 */</comment>
<class pos:line="146" pos:column="1">class <name pos:line="146" pos:column="7">DropSource</name> <block pos:line="146" pos:column="18">{<private type="default" pos:line="146" pos:column="19">
</private><public pos:line="147" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="148" pos:column="9">VFunction</name> <type:modifier pos:line="148" pos:column="19">*</type:modifier><type:modifier pos:line="148" pos:column="20">*</type:modifier></type><name pos:line="148" pos:column="21">vtbl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="149" pos:column="9">ScintillaWin</name> <type:modifier pos:line="149" pos:column="22">*</type:modifier></type><name pos:line="149" pos:column="23">sci</name></decl>;</decl_stmt>
	<constructor_decl><name pos:line="150" pos:column="9">DropSource</name><parameter_list pos:line="150" pos:column="19">()</parameter_list>;</constructor_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="153" pos:column="1">/**
 */</comment>
<class pos:line="155" pos:column="1">class <name pos:line="155" pos:column="7">DataObject</name> <block pos:line="155" pos:column="18">{<private type="default" pos:line="155" pos:column="19">
</private><public pos:line="156" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">VFunction</name> <type:modifier pos:line="157" pos:column="19">*</type:modifier><type:modifier pos:line="157" pos:column="20">*</type:modifier></type><name pos:line="157" pos:column="21">vtbl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">ScintillaWin</name> <type:modifier pos:line="158" pos:column="22">*</type:modifier></type><name pos:line="158" pos:column="23">sci</name></decl>;</decl_stmt>
	<constructor_decl><name pos:line="159" pos:column="9">DataObject</name><parameter_list pos:line="159" pos:column="19">()</parameter_list>;</constructor_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="162" pos:column="1">/**
 */</comment>
<class pos:line="164" pos:column="1">class <name pos:line="164" pos:column="7">DropTarget</name> <block pos:line="164" pos:column="18">{<private type="default" pos:line="164" pos:column="19">
</private><public pos:line="165" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="166" pos:column="9">VFunction</name> <type:modifier pos:line="166" pos:column="19">*</type:modifier><type:modifier pos:line="166" pos:column="20">*</type:modifier></type><name pos:line="166" pos:column="21">vtbl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="167" pos:column="9">ScintillaWin</name> <type:modifier pos:line="167" pos:column="22">*</type:modifier></type><name pos:line="167" pos:column="23">sci</name></decl>;</decl_stmt>
	<constructor_decl><name pos:line="168" pos:column="9">DropTarget</name><parameter_list pos:line="168" pos:column="19">()</parameter_list>;</constructor_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen" pos:line="171" pos:column="1">/**
 */</comment>
<class pos:line="173" pos:column="1">class <name pos:line="173" pos:column="7">ScintillaWin</name> <super pos:line="173" pos:column="20">:
	<specifier pos:line="174" pos:column="9">public</specifier> <name pos:line="174" pos:column="16">ScintillaBase</name></super> <block pos:line="174" pos:column="30">{<private type="default" pos:line="174" pos:column="31">

	<decl_stmt><decl><type><name pos:line="176" pos:column="9">bool</name></type> <name pos:line="176" pos:column="14">lastKeyDownConsumed</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="178" pos:column="9">bool</name></type> <name pos:line="178" pos:column="14">capturedMouse</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="179" pos:column="9">bool</name></type> <name pos:line="179" pos:column="14">trackedMouseLeave</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="180" pos:column="9">TrackMouseEventSig</name></type> <name pos:line="180" pos:column="28">TrackMouseEventFn</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="182" pos:column="9">unsigned</name> <name pos:line="182" pos:column="18">int</name></type> <name pos:line="182" pos:column="22">linesPerScroll</name></decl>;</decl_stmt>	<comment type="line" format="doxygen" pos:line="182" pos:column="41">///&lt; Intellimouse support</comment>
	<decl_stmt><decl><type><name pos:line="183" pos:column="9">int</name></type> <name pos:line="183" pos:column="13">wheelDelta</name></decl>;</decl_stmt> <comment type="line" format="doxygen" pos:line="183" pos:column="25">///&lt; Wheel delta from roll</comment>

	<decl_stmt><decl><type><name pos:line="185" pos:column="9">HRGN</name></type> <name pos:line="185" pos:column="14">hRgnUpdate</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="187" pos:column="9">bool</name></type> <name pos:line="187" pos:column="14">hasOKText</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="189" pos:column="9">CLIPFORMAT</name></type> <name pos:line="189" pos:column="20">cfColumnSelect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="190" pos:column="9">CLIPFORMAT</name></type> <name pos:line="190" pos:column="20">cfLineSelect</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="192" pos:column="9">HRESULT</name></type> <name pos:line="192" pos:column="17">hrOle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="193" pos:column="9">DropSource</name></type> <name pos:line="193" pos:column="20">ds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="194" pos:column="9">DataObject</name></type> <name pos:line="194" pos:column="20">dob</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="195" pos:column="9">DropTarget</name></type> <name pos:line="195" pos:column="20">dt</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="197" pos:column="9">static</specifier> <name pos:line="197" pos:column="16">HINSTANCE</name></type> <name pos:line="197" pos:column="26">hInstance</name></decl>;</decl_stmt>

	<constructor_decl><name pos:line="199" pos:column="9">ScintillaWin</name><parameter_list pos:line="199" pos:column="21">(<param><decl><type><name pos:line="199" pos:column="22">HWND</name></type> <name pos:line="199" pos:column="27">hwnd</name></decl></param>)</parameter_list>;</constructor_decl>
	<constructor_decl><name pos:line="200" pos:column="9">ScintillaWin</name><parameter_list pos:line="200" pos:column="21">(<param><decl><type><specifier pos:line="200" pos:column="22">const</specifier></type> <name pos:line="200" pos:column="28">ScintillaWin</name> <type:modifier pos:line="200" pos:column="41">&amp;</type:modifier></decl></param>)</parameter_list>;</constructor_decl>
	<destructor_decl><specifier pos:line="201" pos:column="9">virtual</specifier> <name pos:line="201" pos:column="17">~<name pos:line="201" pos:column="18">ScintillaWin</name></name><parameter_list pos:line="201" pos:column="30">()</parameter_list>;</destructor_decl>
	<function_decl><type><name pos:line="202" pos:column="9">ScintillaWin</name> <type:modifier pos:line="202" pos:column="22">&amp;</type:modifier></type><name pos:line="202" pos:column="23">operator=</name><parameter_list pos:line="202" pos:column="32">(<param><decl><type><specifier pos:line="202" pos:column="33">const</specifier></type> <name pos:line="202" pos:column="39">ScintillaWin</name> <type:modifier pos:line="202" pos:column="52">&amp;</type:modifier></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="204" pos:column="9">virtual</specifier> <name pos:line="204" pos:column="17">void</name></type> <name pos:line="204" pos:column="22">Initialise</name><parameter_list pos:line="204" pos:column="32">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="205" pos:column="9">virtual</specifier> <name pos:line="205" pos:column="17">void</name></type> <name pos:line="205" pos:column="22">Finalise</name><parameter_list pos:line="205" pos:column="30">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="206" pos:column="9">HWND</name></type> <name pos:line="206" pos:column="14">MainHWND</name><parameter_list pos:line="206" pos:column="22">()</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="208" pos:column="9">static</specifier> <name pos:line="208" pos:column="16">sptr_t</name></type> <name pos:line="208" pos:column="23">DirectFunction</name><parameter_list pos:line="208" pos:column="37">(
		    <param><decl><type><name pos:line="209" pos:column="21">ScintillaWin</name> <type:modifier pos:line="209" pos:column="34">*</type:modifier></type><name pos:line="209" pos:column="35">sci</name></decl></param>, <param><decl><type><name pos:line="209" pos:column="40">UINT</name></type> <name pos:line="209" pos:column="45">iMessage</name></decl></param>, <param><decl><type><name pos:line="209" pos:column="55">uptr_t</name></type> <name pos:line="209" pos:column="62">wParam</name></decl></param>, <param><decl><type><name pos:line="209" pos:column="70">sptr_t</name></type> <name pos:line="209" pos:column="77">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="210" pos:column="9">static</specifier> <name pos:line="210" pos:column="16">sptr_t</name> <name pos:line="210" pos:column="23">PASCAL</name></type> <name pos:line="210" pos:column="30">SWndProc</name><parameter_list pos:line="210" pos:column="38">(
		    <param><decl><type><name pos:line="211" pos:column="21">HWND</name></type> <name pos:line="211" pos:column="26">hWnd</name></decl></param>, <param><decl><type><name pos:line="211" pos:column="32">UINT</name></type> <name pos:line="211" pos:column="37">iMessage</name></decl></param>, <param><decl><type><name pos:line="211" pos:column="47">WPARAM</name></type> <name pos:line="211" pos:column="54">wParam</name></decl></param>, <param><decl><type><name pos:line="211" pos:column="62">sptr_t</name></type> <name pos:line="211" pos:column="69">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="212" pos:column="9">static</specifier> <name pos:line="212" pos:column="16">sptr_t</name> <name pos:line="212" pos:column="23">PASCAL</name></type> <name pos:line="212" pos:column="30">CTWndProc</name><parameter_list pos:line="212" pos:column="39">(
		    <param><decl><type><name pos:line="213" pos:column="21">HWND</name></type> <name pos:line="213" pos:column="26">hWnd</name></decl></param>, <param><decl><type><name pos:line="213" pos:column="32">UINT</name></type> <name pos:line="213" pos:column="37">iMessage</name></decl></param>, <param><decl><type><name pos:line="213" pos:column="47">WPARAM</name></type> <name pos:line="213" pos:column="54">wParam</name></decl></param>, <param><decl><type><name pos:line="213" pos:column="62">sptr_t</name></type> <name pos:line="213" pos:column="69">lParam</name></decl></param>)</parameter_list>;</function_decl>

	<enum pos:line="215" pos:column="9">enum <block pos:line="215" pos:column="14">{ <decl><name pos:line="215" pos:column="16">invalidTimerID</name></decl><op:operator pos:line="215" pos:column="30">,</op:operator> <decl><name pos:line="215" pos:column="32">standardTimerID</name></decl><op:operator pos:line="215" pos:column="47">,</op:operator> <decl><name pos:line="215" pos:column="49">idleTimerID</name></decl> }</block>;</enum>

	<function_decl><type><specifier pos:line="217" pos:column="9">virtual</specifier> <name pos:line="217" pos:column="17">bool</name></type> <name pos:line="217" pos:column="22">DragThreshold</name><parameter_list pos:line="217" pos:column="35">(<param><decl><type><name pos:line="217" pos:column="36">Point</name></type> <name pos:line="217" pos:column="42">ptStart</name></decl></param>, <param><decl><type><name pos:line="217" pos:column="51">Point</name></type> <name pos:line="217" pos:column="57">ptNow</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="218" pos:column="9">virtual</specifier> <name pos:line="218" pos:column="17">void</name></type> <name pos:line="218" pos:column="22">StartDrag</name><parameter_list pos:line="218" pos:column="31">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="219" pos:column="9">sptr_t</name></type> <name pos:line="219" pos:column="16">WndPaint</name><parameter_list pos:line="219" pos:column="24">(<param><decl><type><name pos:line="219" pos:column="25">uptr_t</name></type> <name pos:line="219" pos:column="32">wParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="220" pos:column="9">sptr_t</name></type> <name pos:line="220" pos:column="16">HandleComposition</name><parameter_list pos:line="220" pos:column="33">(<param><decl><type><name pos:line="220" pos:column="34">uptr_t</name></type> <name pos:line="220" pos:column="41">wParam</name></decl></param>, <param><decl><type><name pos:line="220" pos:column="49">sptr_t</name></type> <name pos:line="220" pos:column="56">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="221" pos:column="9">UINT</name></type> <name pos:line="221" pos:column="14">CodePageOfDocument</name><parameter_list pos:line="221" pos:column="32">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="222" pos:column="9">virtual</specifier> <name pos:line="222" pos:column="17">bool</name></type> <name pos:line="222" pos:column="22">ValidCodePage</name><parameter_list pos:line="222" pos:column="35">(<param><decl><type><name pos:line="222" pos:column="36">int</name></type> <name pos:line="222" pos:column="40">codePage</name></decl></param>)</parameter_list> <specifier pos:line="222" pos:column="50">const</specifier>;</function_decl>
	<function_decl><type><specifier pos:line="223" pos:column="9">virtual</specifier> <name pos:line="223" pos:column="17">sptr_t</name></type> <name pos:line="223" pos:column="24">DefWndProc</name><parameter_list pos:line="223" pos:column="34">(<param><decl><type><name pos:line="223" pos:column="35">unsigned</name> <name pos:line="223" pos:column="44">int</name></type> <name pos:line="223" pos:column="48">iMessage</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="58">uptr_t</name></type> <name pos:line="223" pos:column="65">wParam</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="73">sptr_t</name></type> <name pos:line="223" pos:column="80">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="224" pos:column="9">virtual</specifier> <name pos:line="224" pos:column="17">bool</name></type> <name pos:line="224" pos:column="22">SetIdle</name><parameter_list pos:line="224" pos:column="29">(<param><decl><type><name pos:line="224" pos:column="30">bool</name></type> <name pos:line="224" pos:column="35">on</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="225" pos:column="9">virtual</specifier> <name pos:line="225" pos:column="17">void</name></type> <name pos:line="225" pos:column="22">SetTicking</name><parameter_list pos:line="225" pos:column="32">(<param><decl><type><name pos:line="225" pos:column="33">bool</name></type> <name pos:line="225" pos:column="38">on</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="226" pos:column="9">virtual</specifier> <name pos:line="226" pos:column="17">void</name></type> <name pos:line="226" pos:column="22">SetMouseCapture</name><parameter_list pos:line="226" pos:column="37">(<param><decl><type><name pos:line="226" pos:column="38">bool</name></type> <name pos:line="226" pos:column="43">on</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="227" pos:column="9">virtual</specifier> <name pos:line="227" pos:column="17">bool</name></type> <name pos:line="227" pos:column="22">HaveMouseCapture</name><parameter_list pos:line="227" pos:column="38">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="228" pos:column="9">virtual</specifier> <name pos:line="228" pos:column="17">void</name></type> <name pos:line="228" pos:column="22">SetTrackMouseLeaveEvent</name><parameter_list pos:line="228" pos:column="45">(<param><decl><type><name pos:line="228" pos:column="46">bool</name></type> <name pos:line="228" pos:column="51">on</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="229" pos:column="9">virtual</specifier> <name pos:line="229" pos:column="17">bool</name></type> <name pos:line="229" pos:column="22">PaintContains</name><parameter_list pos:line="229" pos:column="35">(<param><decl><type><name pos:line="229" pos:column="36">PRectangle</name></type> <name pos:line="229" pos:column="47">rc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="230" pos:column="9">virtual</specifier> <name pos:line="230" pos:column="17">void</name></type> <name pos:line="230" pos:column="22">ScrollText</name><parameter_list pos:line="230" pos:column="32">(<param><decl><type><name pos:line="230" pos:column="33">int</name></type> <name pos:line="230" pos:column="37">linesToMove</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="231" pos:column="9">virtual</specifier> <name pos:line="231" pos:column="17">void</name></type> <name pos:line="231" pos:column="22">UpdateSystemCaret</name><parameter_list pos:line="231" pos:column="39">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="232" pos:column="9">virtual</specifier> <name pos:line="232" pos:column="17">void</name></type> <name pos:line="232" pos:column="22">SetVerticalScrollPos</name><parameter_list pos:line="232" pos:column="42">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="233" pos:column="9">virtual</specifier> <name pos:line="233" pos:column="17">void</name></type> <name pos:line="233" pos:column="22">SetHorizontalScrollPos</name><parameter_list pos:line="233" pos:column="44">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="234" pos:column="9">virtual</specifier> <name pos:line="234" pos:column="17">bool</name></type> <name pos:line="234" pos:column="22">ModifyScrollBars</name><parameter_list pos:line="234" pos:column="38">(<param><decl><type><name pos:line="234" pos:column="39">int</name></type> <name pos:line="234" pos:column="43">nMax</name></decl></param>, <param><decl><type><name pos:line="234" pos:column="49">int</name></type> <name pos:line="234" pos:column="53">nPage</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="235" pos:column="9">virtual</specifier> <name pos:line="235" pos:column="17">void</name></type> <name pos:line="235" pos:column="22">NotifyChange</name><parameter_list pos:line="235" pos:column="34">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="236" pos:column="9">virtual</specifier> <name pos:line="236" pos:column="17">void</name></type> <name pos:line="236" pos:column="22">NotifyFocus</name><parameter_list pos:line="236" pos:column="33">(<param><decl><type><name pos:line="236" pos:column="34">bool</name></type> <name pos:line="236" pos:column="39">focus</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="237" pos:column="9">virtual</specifier> <name pos:line="237" pos:column="17">void</name></type> <name pos:line="237" pos:column="22">SetCtrlID</name><parameter_list pos:line="237" pos:column="31">(<param><decl><type><name pos:line="237" pos:column="32">int</name></type> <name pos:line="237" pos:column="36">identifier</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="238" pos:column="9">virtual</specifier> <name pos:line="238" pos:column="17">int</name></type> <name pos:line="238" pos:column="21">GetCtrlID</name><parameter_list pos:line="238" pos:column="30">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="239" pos:column="9">virtual</specifier> <name pos:line="239" pos:column="17">void</name></type> <name pos:line="239" pos:column="22">NotifyParent</name><parameter_list pos:line="239" pos:column="34">(<param><decl><type><name pos:line="239" pos:column="35">SCNotification</name></type> <name pos:line="239" pos:column="50">scn</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="240" pos:column="9">virtual</specifier> <name pos:line="240" pos:column="17">void</name></type> <name pos:line="240" pos:column="22">NotifyDoubleClick</name><parameter_list pos:line="240" pos:column="39">(<param><decl><type><name pos:line="240" pos:column="40">Point</name></type> <name pos:line="240" pos:column="46">pt</name></decl></param>, <param><decl><type><name pos:line="240" pos:column="50">bool</name></type> <name pos:line="240" pos:column="55">shift</name></decl></param>, <param><decl><type><name pos:line="240" pos:column="62">bool</name></type> <name pos:line="240" pos:column="67">ctrl</name></decl></param>, <param><decl><type><name pos:line="240" pos:column="73">bool</name></type> <name pos:line="240" pos:column="78">alt</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="241" pos:column="9">virtual</specifier> <name pos:line="241" pos:column="17">CaseFolder</name> <type:modifier pos:line="241" pos:column="28">*</type:modifier></type><name pos:line="241" pos:column="29">CaseFolderForEncoding</name><parameter_list pos:line="241" pos:column="50">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="242" pos:column="9">virtual</specifier> <name><name pos:line="242" pos:column="17">std</name><op:operator pos:line="242" pos:column="20">::</op:operator><name pos:line="242" pos:column="22">string</name></name></type> <name pos:line="242" pos:column="29">CaseMapString</name><parameter_list pos:line="242" pos:column="42">(<param><decl><type><specifier pos:line="242" pos:column="43">const</specifier> <name><name pos:line="242" pos:column="49">std</name><op:operator pos:line="242" pos:column="52">::</op:operator><name pos:line="242" pos:column="54">string</name></name> <type:modifier pos:line="242" pos:column="61">&amp;</type:modifier></type><name pos:line="242" pos:column="62">s</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="65">int</name></type> <name pos:line="242" pos:column="69">caseMapping</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="243" pos:column="9">virtual</specifier> <name pos:line="243" pos:column="17">void</name></type> <name pos:line="243" pos:column="22">Copy</name><parameter_list pos:line="243" pos:column="26">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="244" pos:column="9">virtual</specifier> <name pos:line="244" pos:column="17">void</name></type> <name pos:line="244" pos:column="22">CopyAllowLine</name><parameter_list pos:line="244" pos:column="35">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="245" pos:column="9">virtual</specifier> <name pos:line="245" pos:column="17">bool</name></type> <name pos:line="245" pos:column="22">CanPaste</name><parameter_list pos:line="245" pos:column="30">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="246" pos:column="9">virtual</specifier> <name pos:line="246" pos:column="17">void</name></type> <name pos:line="246" pos:column="22">Paste</name><parameter_list pos:line="246" pos:column="27">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="247" pos:column="9">virtual</specifier> <name pos:line="247" pos:column="17">void</name></type> <name pos:line="247" pos:column="22">CreateCallTipWindow</name><parameter_list pos:line="247" pos:column="41">(<param><decl><type><name pos:line="247" pos:column="42">PRectangle</name></type> <name pos:line="247" pos:column="53">rc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="248" pos:column="9">virtual</specifier> <name pos:line="248" pos:column="17">void</name></type> <name pos:line="248" pos:column="22">AddToPopUp</name><parameter_list pos:line="248" pos:column="32">(<param><decl><type><specifier pos:line="248" pos:column="33">const</specifier> <name pos:line="248" pos:column="39">char</name> <type:modifier pos:line="248" pos:column="44">*</type:modifier></type><name pos:line="248" pos:column="45">label</name></decl></param>, <param><decl><type><name pos:line="248" pos:column="52">int</name></type> <name pos:line="248" pos:column="56">cmd</name> <init pos:line="248" pos:column="60">= <expr><lit:literal type="number" pos:line="248" pos:column="62">0</lit:literal></expr></init></decl></param>, <name pos:line="248" pos:column="65">bool</name> <name pos:line="248" pos:column="70">enabled</name> <op:operator pos:line="248" pos:column="78">=</op:operator> <lit:literal type="boolean" pos:line="248" pos:column="80">true</lit:literal>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="249" pos:column="9">virtual</specifier> <name pos:line="249" pos:column="17">void</name></type> <name pos:line="249" pos:column="22">ClaimSelection</name><parameter_list pos:line="249" pos:column="36">()</parameter_list>;</function_decl>

	<comment type="line" pos:line="251" pos:column="9">// DBCS</comment>
	<function_decl><type><name pos:line="252" pos:column="9">void</name></type> <name pos:line="252" pos:column="14">ImeStartComposition</name><parameter_list pos:line="252" pos:column="33">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="253" pos:column="9">void</name></type> <name pos:line="253" pos:column="14">ImeEndComposition</name><parameter_list pos:line="253" pos:column="31">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="255" pos:column="9">void</name></type> <name pos:line="255" pos:column="14">AddCharBytes</name><parameter_list pos:line="255" pos:column="26">(<param><decl><type><name pos:line="255" pos:column="27">char</name></type> <name pos:line="255" pos:column="32">b0</name></decl></param>, <param><decl><type><name pos:line="255" pos:column="36">char</name></type> <name pos:line="255" pos:column="41">b1</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="257" pos:column="9">void</name></type> <name pos:line="257" pos:column="14">GetIntelliMouseParameters</name><parameter_list pos:line="257" pos:column="39">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="258" pos:column="9">virtual</specifier> <name pos:line="258" pos:column="17">void</name></type> <name pos:line="258" pos:column="22">CopyToClipboard</name><parameter_list pos:line="258" pos:column="37">(<param><decl><type><specifier pos:line="258" pos:column="38">const</specifier> <name pos:line="258" pos:column="44">SelectionText</name> <type:modifier pos:line="258" pos:column="58">&amp;</type:modifier></type><name pos:line="258" pos:column="59">selectedText</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="259" pos:column="9">void</name></type> <name pos:line="259" pos:column="14">ScrollMessage</name><parameter_list pos:line="259" pos:column="27">(<param><decl><type><name pos:line="259" pos:column="28">WPARAM</name></type> <name pos:line="259" pos:column="35">wParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="260" pos:column="9">void</name></type> <name pos:line="260" pos:column="14">HorizontalScrollMessage</name><parameter_list pos:line="260" pos:column="37">(<param><decl><type><name pos:line="260" pos:column="38">WPARAM</name></type> <name pos:line="260" pos:column="45">wParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="261" pos:column="9">void</name></type> <name pos:line="261" pos:column="14">RealizeWindowPalette</name><parameter_list pos:line="261" pos:column="34">(<param><decl><type><name pos:line="261" pos:column="35">bool</name></type> <name pos:line="261" pos:column="40">inBackGround</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="262" pos:column="9">void</name></type> <name pos:line="262" pos:column="14">FullPaint</name><parameter_list pos:line="262" pos:column="23">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="263" pos:column="9">void</name></type> <name pos:line="263" pos:column="14">FullPaintDC</name><parameter_list pos:line="263" pos:column="25">(<param><decl><type><name pos:line="263" pos:column="26">HDC</name></type> <name pos:line="263" pos:column="30">dc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="264" pos:column="9">bool</name></type> <name pos:line="264" pos:column="14">IsCompatibleDC</name><parameter_list pos:line="264" pos:column="28">(<param><decl><type><name pos:line="264" pos:column="29">HDC</name></type> <name pos:line="264" pos:column="33">dc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="265" pos:column="9">DWORD</name></type> <name pos:line="265" pos:column="15">EffectFromState</name><parameter_list pos:line="265" pos:column="30">(<param><decl><type><name pos:line="265" pos:column="31">DWORD</name></type> <name pos:line="265" pos:column="37">grfKeyState</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="267" pos:column="9">virtual</specifier> <name pos:line="267" pos:column="17">int</name></type> <name pos:line="267" pos:column="21">SetScrollInfo</name><parameter_list pos:line="267" pos:column="34">(<param><decl><type><name pos:line="267" pos:column="35">int</name></type> <name pos:line="267" pos:column="39">nBar</name></decl></param>, <param><decl><type><name pos:line="267" pos:column="45">LPCSCROLLINFO</name></type> <name pos:line="267" pos:column="59">lpsi</name></decl></param>, <param><decl><type><name pos:line="267" pos:column="65">BOOL</name></type> <name pos:line="267" pos:column="70">bRedraw</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="268" pos:column="9">virtual</specifier> <name pos:line="268" pos:column="17">bool</name></type> <name pos:line="268" pos:column="22">GetScrollInfo</name><parameter_list pos:line="268" pos:column="35">(<param><decl><type><name pos:line="268" pos:column="36">int</name></type> <name pos:line="268" pos:column="40">nBar</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="46">LPSCROLLINFO</name></type> <name pos:line="268" pos:column="59">lpsi</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="269" pos:column="9">void</name></type> <name pos:line="269" pos:column="14">ChangeScrollPos</name><parameter_list pos:line="269" pos:column="29">(<param><decl><type><name pos:line="269" pos:column="30">int</name></type> <name pos:line="269" pos:column="34">barType</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="43">int</name></type> <name pos:line="269" pos:column="47">pos</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="271" pos:column="9">void</name></type> <name pos:line="271" pos:column="14">InsertPasteText</name><parameter_list pos:line="271" pos:column="29">(<param><decl><type><specifier pos:line="271" pos:column="30">const</specifier> <name pos:line="271" pos:column="36">char</name> <type:modifier pos:line="271" pos:column="41">*</type:modifier></type><name pos:line="271" pos:column="42">text</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="48">int</name></type> <name pos:line="271" pos:column="52">len</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="57">SelectionPosition</name></type> <name pos:line="271" pos:column="75">selStart</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="85">bool</name></type> <name pos:line="271" pos:column="90">isRectangular</name></decl></param>, <param><decl><type><name pos:line="271" pos:column="105">bool</name></type> <name pos:line="271" pos:column="110">isLine</name></decl></param>)</parameter_list>;</function_decl>

</private><public pos:line="273" pos:column="1">public:
	<comment type="line" pos:line="274" pos:column="9">// Public for benefit of Scintilla_DirectFunction</comment>
	<function_decl><type><specifier pos:line="275" pos:column="9">virtual</specifier> <name pos:line="275" pos:column="17">sptr_t</name></type> <name pos:line="275" pos:column="24">WndProc</name><parameter_list pos:line="275" pos:column="31">(<param><decl><type><name pos:line="275" pos:column="32">unsigned</name> <name pos:line="275" pos:column="41">int</name></type> <name pos:line="275" pos:column="45">iMessage</name></decl></param>, <param><decl><type><name pos:line="275" pos:column="55">uptr_t</name></type> <name pos:line="275" pos:column="62">wParam</name></decl></param>, <param><decl><type><name pos:line="275" pos:column="70">sptr_t</name></type> <name pos:line="275" pos:column="77">lParam</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" format="doxygen" pos:line="277" pos:column="9">/// Implement IUnknown</comment>
	<function_decl><type><name pos:line="278" pos:column="9">STDMETHODIMP</name></type> <name pos:line="278" pos:column="22">QueryInterface</name><parameter_list pos:line="278" pos:column="36">(<param><decl><type><name pos:line="278" pos:column="37">REFIID</name></type> <name pos:line="278" pos:column="44">riid</name></decl></param>, <param><decl><type><name pos:line="278" pos:column="50">PVOID</name> <type:modifier pos:line="278" pos:column="56">*</type:modifier></type><name pos:line="278" pos:column="57">ppv</name></decl></param>)</parameter_list>;</function_decl>
	<macro><name pos:line="279" pos:column="9">STDMETHODIMP_</name><argument_list pos:line="279" pos:column="22">(<argument pos:line="279" pos:column="23">ULONG</argument>)</argument_list></macro><constructor_decl><name pos:line="279" pos:column="29">AddRef</name><parameter_list pos:line="279" pos:column="35">()</parameter_list>;</constructor_decl>
	<macro><name pos:line="280" pos:column="9">STDMETHODIMP_</name><argument_list pos:line="280" pos:column="22">(<argument pos:line="280" pos:column="23">ULONG</argument>)</argument_list></macro><constructor_decl><name pos:line="280" pos:column="29">Release</name><parameter_list pos:line="280" pos:column="36">()</parameter_list>;</constructor_decl>

	<comment type="line" format="doxygen" pos:line="282" pos:column="9">/// Implement IDropTarget</comment>
	<function_decl><type><name pos:line="283" pos:column="9">STDMETHODIMP</name></type> <name pos:line="283" pos:column="22">DragEnter</name><parameter_list pos:line="283" pos:column="31">(<param><decl><type><name pos:line="283" pos:column="32">LPDATAOBJECT</name></type> <name pos:line="283" pos:column="45">pIDataSource</name></decl></param>, <param><decl><type><name pos:line="283" pos:column="59">DWORD</name></type> <name pos:line="283" pos:column="65">grfKeyState</name></decl></param>,
	                       <param><decl><type><name pos:line="284" pos:column="32">POINTL</name></type> <name pos:line="284" pos:column="39">pt</name></decl></param>, <param><decl><type><name pos:line="284" pos:column="43">PDWORD</name></type> <name pos:line="284" pos:column="50">pdwEffect</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="285" pos:column="9">STDMETHODIMP</name></type> <name pos:line="285" pos:column="22">DragOver</name><parameter_list pos:line="285" pos:column="30">(<param><decl><type><name pos:line="285" pos:column="31">DWORD</name></type> <name pos:line="285" pos:column="37">grfKeyState</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="50">POINTL</name></type> <name pos:line="285" pos:column="57">pt</name></decl></param>, <param><decl><type><name pos:line="285" pos:column="61">PDWORD</name></type> <name pos:line="285" pos:column="68">pdwEffect</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="286" pos:column="9">STDMETHODIMP</name></type> <name pos:line="286" pos:column="22">DragLeave</name><parameter_list pos:line="286" pos:column="31">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="287" pos:column="9">STDMETHODIMP</name></type> <name pos:line="287" pos:column="22">Drop</name><parameter_list pos:line="287" pos:column="26">(<param><decl><type><name pos:line="287" pos:column="27">LPDATAOBJECT</name></type> <name pos:line="287" pos:column="40">pIDataSource</name></decl></param>, <param><decl><type><name pos:line="287" pos:column="54">DWORD</name></type> <name pos:line="287" pos:column="60">grfKeyState</name></decl></param>,
	                  <param><decl><type><name pos:line="288" pos:column="27">POINTL</name></type> <name pos:line="288" pos:column="34">pt</name></decl></param>, <param><decl><type><name pos:line="288" pos:column="38">PDWORD</name></type> <name pos:line="288" pos:column="45">pdwEffect</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" format="doxygen" pos:line="290" pos:column="9">/// Implement important part of IDataObject</comment>
	<function_decl><type><name pos:line="291" pos:column="9">STDMETHODIMP</name></type> <name pos:line="291" pos:column="22">GetData</name><parameter_list pos:line="291" pos:column="29">(<param><decl><type><name pos:line="291" pos:column="30">FORMATETC</name> <type:modifier pos:line="291" pos:column="40">*</type:modifier></type><name pos:line="291" pos:column="41">pFEIn</name></decl></param>, <param><decl><type><name pos:line="291" pos:column="48">STGMEDIUM</name> <type:modifier pos:line="291" pos:column="58">*</type:modifier></type><name pos:line="291" pos:column="59">pSTM</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="293" pos:column="9">static</specifier> <name pos:line="293" pos:column="16">bool</name></type> <name pos:line="293" pos:column="21">Register</name><parameter_list pos:line="293" pos:column="29">(<param><decl><type><name pos:line="293" pos:column="30">HINSTANCE</name></type> <name pos:line="293" pos:column="40">hInstance_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="294" pos:column="9">static</specifier> <name pos:line="294" pos:column="16">bool</name></type> <name pos:line="294" pos:column="21">Unregister</name><parameter_list pos:line="294" pos:column="31">()</parameter_list>;</function_decl>

	<class_decl><specifier pos:line="296" pos:column="9">friend</specifier> class <name pos:line="296" pos:column="22">DropSource</name>;</class_decl>
	<class_decl><specifier pos:line="297" pos:column="9">friend</specifier> class <name pos:line="297" pos:column="22">DataObject</name>;</class_decl>
	<class_decl><specifier pos:line="298" pos:column="9">friend</specifier> class <name pos:line="298" pos:column="22">DropTarget</name>;</class_decl>
	<function><type><name pos:line="299" pos:column="9">bool</name></type> <name pos:line="299" pos:column="14">DragIsRectangularOK</name><parameter_list pos:line="299" pos:column="33">(<param><decl><type><name pos:line="299" pos:column="34">CLIPFORMAT</name></type> <name pos:line="299" pos:column="45">fmt</name></decl></param>)</parameter_list> <block pos:line="299" pos:column="50">{
		<return pos:line="300" pos:column="17">return <expr><name><name pos:line="300" pos:column="24">drag</name><op:operator pos:line="300" pos:column="28">.</op:operator><name pos:line="300" pos:column="29">rectangular</name></name> <op:operator pos:line="300" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="300" pos:column="44">(</op:operator><name pos:line="300" pos:column="45">fmt</name> <op:operator pos:line="300" pos:column="49">==</op:operator> <name pos:line="300" pos:column="52">cfColumnSelect</name><op:operator pos:line="300" pos:column="66">)</op:operator></expr>;</return>
	}</block></function>

</public><private pos:line="303" pos:column="1">private:
	<comment type="line" pos:line="304" pos:column="9">// For use in creating a system caret</comment>
	<function_decl><type><name pos:line="305" pos:column="9">bool</name></type> <name pos:line="305" pos:column="14">HasCaretSizeChanged</name><parameter_list pos:line="305" pos:column="33">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="306" pos:column="9">BOOL</name></type> <name pos:line="306" pos:column="14">CreateSystemCaret</name><parameter_list pos:line="306" pos:column="31">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="307" pos:column="9">BOOL</name></type> <name pos:line="307" pos:column="14">DestroySystemCaret</name><parameter_list pos:line="307" pos:column="32">()</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="308" pos:column="9">HBITMAP</name></type> <name pos:line="308" pos:column="17">sysCaretBitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="309" pos:column="9">int</name></type> <name pos:line="309" pos:column="13">sysCaretWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="310" pos:column="9">int</name></type> <name pos:line="310" pos:column="13">sysCaretHeight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="311" pos:column="9">bool</name></type> <name pos:line="311" pos:column="14">keysAlwaysUnicode</name></decl>;</decl_stmt>
</private>}</block>;</class>

<decl_stmt><decl><type><name pos:line="314" pos:column="1">HINSTANCE</name></type> <name><name pos:line="314" pos:column="11">ScintillaWin</name><op:operator pos:line="314" pos:column="23">::</op:operator><name pos:line="314" pos:column="25">hInstance</name></name> <init pos:line="314" pos:column="35">= <expr><lit:literal type="number" pos:line="314" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="316" pos:column="1">ScintillaWin</name><op:operator pos:line="316" pos:column="13">::</op:operator><name pos:line="316" pos:column="15">ScintillaWin</name></name><parameter_list pos:line="316" pos:column="27">(<param><decl><type><name pos:line="316" pos:column="28">HWND</name></type> <name pos:line="316" pos:column="33">hwnd</name></decl></param>)</parameter_list> <block pos:line="316" pos:column="39">{

	<expr_stmt><expr><name pos:line="318" pos:column="9">lastKeyDownConsumed</name> <op:operator pos:line="318" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="318" pos:column="31">false</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="320" pos:column="9">capturedMouse</name> <op:operator pos:line="320" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="320" pos:column="25">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="321" pos:column="9">trackedMouseLeave</name> <op:operator pos:line="321" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="321" pos:column="29">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="322" pos:column="9">TrackMouseEventFn</name> <op:operator pos:line="322" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="322" pos:column="29">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="324" pos:column="9">linesPerScroll</name> <op:operator pos:line="324" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="324" pos:column="26">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="325" pos:column="9">wheelDelta</name> <op:operator pos:line="325" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="325" pos:column="22">0</lit:literal></expr>;</expr_stmt>   <comment type="line" pos:line="325" pos:column="27">// Wheel delta from roll</comment>

	<expr_stmt><expr><name pos:line="327" pos:column="9">hRgnUpdate</name> <op:operator pos:line="327" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="327" pos:column="22">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="329" pos:column="9">hasOKText</name> <op:operator pos:line="329" pos:column="19">=</op:operator> <lit:literal type="boolean" pos:line="329" pos:column="21">false</lit:literal></expr>;</expr_stmt>

	<comment type="line" pos:line="331" pos:column="9">// There does not seem to be a real standard for indicating that the clipboard</comment>
	<comment type="line" pos:line="332" pos:column="9">// contains a rectangular selection, so copy Developer Studio.</comment>
	<expr_stmt><expr><name pos:line="333" pos:column="9">cfColumnSelect</name> <op:operator pos:line="333" pos:column="24">=</op:operator> <call><name><name pos:line="333" pos:column="26">static_cast</name><argument_list pos:line="333" pos:column="37">&lt;<argument><expr><name pos:line="333" pos:column="38">CLIPFORMAT</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="333" pos:column="49">(
		<argument><expr><call><name><op:operator pos:line="334" pos:column="17">::</op:operator><name pos:line="334" pos:column="19">RegisterClipboardFormat</name></name><argument_list pos:line="334" pos:column="42">(<argument><expr><call><name pos:line="334" pos:column="43">TEXT</name><argument_list pos:line="334" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="334" pos:column="48">"MSDEVColumnSelect"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="336" pos:column="9">// Likewise for line-copy (copies a full line when no text is selected)</comment>
	<expr_stmt><expr><name pos:line="337" pos:column="9">cfLineSelect</name> <op:operator pos:line="337" pos:column="22">=</op:operator> <call><name><name pos:line="337" pos:column="24">static_cast</name><argument_list pos:line="337" pos:column="35">&lt;<argument><expr><name pos:line="337" pos:column="36">CLIPFORMAT</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="337" pos:column="47">(
		<argument><expr><call><name><op:operator pos:line="338" pos:column="17">::</op:operator><name pos:line="338" pos:column="19">RegisterClipboardFormat</name></name><argument_list pos:line="338" pos:column="42">(<argument><expr><call><name pos:line="338" pos:column="43">TEXT</name><argument_list pos:line="338" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="338" pos:column="48">"MSDEVLineSelect"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="340" pos:column="9">hrOle</name> <op:operator pos:line="340" pos:column="15">=</op:operator> <name pos:line="340" pos:column="17">E_FAIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="342" pos:column="9">wMain</name> <op:operator pos:line="342" pos:column="15">=</op:operator> <name pos:line="342" pos:column="17">hwnd</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="344" pos:column="9">dob</name><op:operator pos:line="344" pos:column="12">.</op:operator><name pos:line="344" pos:column="13">sci</name></name> <op:operator pos:line="344" pos:column="17">=</op:operator> <name pos:line="344" pos:column="19">this</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="345" pos:column="9">ds</name><op:operator pos:line="345" pos:column="11">.</op:operator><name pos:line="345" pos:column="12">sci</name></name> <op:operator pos:line="345" pos:column="16">=</op:operator> <name pos:line="345" pos:column="18">this</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="346" pos:column="9">dt</name><op:operator pos:line="346" pos:column="11">.</op:operator><name pos:line="346" pos:column="12">sci</name></name> <op:operator pos:line="346" pos:column="16">=</op:operator> <name pos:line="346" pos:column="18">this</name></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="348" pos:column="9">sysCaretBitmap</name> <op:operator pos:line="348" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="348" pos:column="26">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="349" pos:column="9">sysCaretWidth</name> <op:operator pos:line="349" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="349" pos:column="25">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="350" pos:column="9">sysCaretHeight</name> <op:operator pos:line="350" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="350" pos:column="26">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="352" pos:column="9">keysAlwaysUnicode</name> <op:operator pos:line="352" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="352" pos:column="29">false</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="354" pos:column="9">caret</name><op:operator pos:line="354" pos:column="14">.</op:operator><name pos:line="354" pos:column="15">period</name></name> <op:operator pos:line="354" pos:column="22">=</op:operator> <call><name><op:operator pos:line="354" pos:column="24">::</op:operator><name pos:line="354" pos:column="26">GetCaretBlinkTime</name></name><argument_list pos:line="354" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="355" pos:column="9">if <condition pos:line="355" pos:column="12">(<expr><name><name pos:line="355" pos:column="13">caret</name><op:operator pos:line="355" pos:column="18">.</op:operator><name pos:line="355" pos:column="19">period</name></name> <op:operator pos:line="355" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="355" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="355" pos:column="30">
		<expr_stmt><expr><name><name pos:line="356" pos:column="17">caret</name><op:operator pos:line="356" pos:column="22">.</op:operator><name pos:line="356" pos:column="23">period</name></name> <op:operator pos:line="356" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="356" pos:column="32">0</lit:literal></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><call><name pos:line="358" pos:column="9">Initialise</name><argument_list pos:line="358" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="361" pos:column="1">ScintillaWin</name><op:operator pos:line="361" pos:column="13">::</op:operator>~<name pos:line="361" pos:column="16">ScintillaWin</name></name><parameter_list pos:line="361" pos:column="28">()</parameter_list> <block pos:line="361" pos:column="31">{}</block></destructor>

<function><type><name pos:line="363" pos:column="1">void</name></type> <name><name pos:line="363" pos:column="6">ScintillaWin</name><op:operator pos:line="363" pos:column="18">::</op:operator><name pos:line="363" pos:column="20">Initialise</name></name><parameter_list pos:line="363" pos:column="30">()</parameter_list> <block pos:line="363" pos:column="33">{
	<comment type="line" pos:line="364" pos:column="9">// Initialize COM.  If the app has already done this it will have</comment>
	<comment type="line" pos:line="365" pos:column="9">// no effect.  If the app hasnt, we really shouldnt ask them to call</comment>
	<comment type="line" pos:line="366" pos:column="9">// it just so this internal feature works.</comment>
	<expr_stmt><expr><name pos:line="367" pos:column="9">hrOle</name> <op:operator pos:line="367" pos:column="15">=</op:operator> <call><name><op:operator pos:line="367" pos:column="17">::</op:operator><name pos:line="367" pos:column="19">OleInitialize</name></name><argument_list pos:line="367" pos:column="32">(<argument><expr><name pos:line="367" pos:column="33">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="369" pos:column="9">// Find TrackMouseEvent which is available on Windows &gt; 95</comment>
	<decl_stmt><decl><type><name pos:line="370" pos:column="9">HMODULE</name></type> <name pos:line="370" pos:column="17">user32</name> <init pos:line="370" pos:column="24">= <expr><call><name><op:operator pos:line="370" pos:column="26">::</op:operator><name pos:line="370" pos:column="28">GetModuleHandle</name></name><argument_list pos:line="370" pos:column="43">(<argument><expr><call><name pos:line="370" pos:column="44">TEXT</name><argument_list pos:line="370" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="370" pos:column="49">"user32.dll"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="371" pos:column="9">TrackMouseEventFn</name> <op:operator pos:line="371" pos:column="27">=</op:operator> <op:operator pos:line="371" pos:column="29">(</op:operator><name pos:line="371" pos:column="30">TrackMouseEventSig</name><op:operator pos:line="371" pos:column="48">)</op:operator><call><name><op:operator pos:line="371" pos:column="49">::</op:operator><name pos:line="371" pos:column="51">GetProcAddress</name></name><argument_list pos:line="371" pos:column="65">(<argument><expr><name pos:line="371" pos:column="66">user32</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="371" pos:column="74">"TrackMouseEvent"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="372" pos:column="9">if <condition pos:line="372" pos:column="12">(<expr><name pos:line="372" pos:column="13">TrackMouseEventFn</name> <op:operator pos:line="372" pos:column="31">==</op:operator> <name pos:line="372" pos:column="34">NULL</name></expr>)</condition><then pos:line="372" pos:column="39"> <block pos:line="372" pos:column="40">{
		<comment type="line" pos:line="373" pos:column="17">// Windows 95 has an emulation in comctl32.dll:_TrackMouseEvent</comment>
		<decl_stmt><decl><type><name pos:line="374" pos:column="17">HMODULE</name></type> <name pos:line="374" pos:column="25">commctrl32</name> <init pos:line="374" pos:column="36">= <expr><call><name><op:operator pos:line="374" pos:column="38">::</op:operator><name pos:line="374" pos:column="40">LoadLibrary</name></name><argument_list pos:line="374" pos:column="51">(<argument><expr><call><name pos:line="374" pos:column="52">TEXT</name><argument_list pos:line="374" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="374" pos:column="57">"comctl32.dll"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="375" pos:column="17">if <condition pos:line="375" pos:column="20">(<expr><name pos:line="375" pos:column="21">commctrl32</name> <op:operator pos:line="375" pos:column="32">!=</op:operator> <name pos:line="375" pos:column="35">NULL</name></expr>)</condition><then pos:line="375" pos:column="40"> <block pos:line="375" pos:column="41">{
			<expr_stmt><expr><name pos:line="376" pos:column="25">TrackMouseEventFn</name> <op:operator pos:line="376" pos:column="43">=</op:operator> <op:operator pos:line="376" pos:column="45">(</op:operator><name pos:line="376" pos:column="46">TrackMouseEventSig</name><op:operator pos:line="376" pos:column="64">)</op:operator>
				<call><name><op:operator pos:line="377" pos:column="33">::</op:operator><name pos:line="377" pos:column="35">GetProcAddress</name></name><argument_list pos:line="377" pos:column="49">(<argument><expr><name pos:line="377" pos:column="50">commctrl32</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="377" pos:column="62">"_TrackMouseEvent"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="382" pos:column="1">void</name></type> <name><name pos:line="382" pos:column="6">ScintillaWin</name><op:operator pos:line="382" pos:column="18">::</op:operator><name pos:line="382" pos:column="20">Finalise</name></name><parameter_list pos:line="382" pos:column="28">()</parameter_list> <block pos:line="382" pos:column="31">{
	<expr_stmt><expr><call><name><name pos:line="383" pos:column="9">ScintillaBase</name><op:operator pos:line="383" pos:column="22">::</op:operator><name pos:line="383" pos:column="24">Finalise</name></name><argument_list pos:line="383" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="384" pos:column="9">SetTicking</name><argument_list pos:line="384" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="384" pos:column="20">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="385" pos:column="9">SetIdle</name><argument_list pos:line="385" pos:column="16">(<argument><expr><lit:literal type="boolean" pos:line="385" pos:column="17">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="386" pos:column="9">::</op:operator><name pos:line="386" pos:column="11">RevokeDragDrop</name></name><argument_list pos:line="386" pos:column="25">(<argument><expr><call><name pos:line="386" pos:column="26">MainHWND</name><argument_list pos:line="386" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="387" pos:column="9">if <condition pos:line="387" pos:column="12">(<expr><call><name pos:line="387" pos:column="13">SUCCEEDED</name><argument_list pos:line="387" pos:column="22">(<argument><expr><name pos:line="387" pos:column="23">hrOle</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="387" pos:column="30"> <block pos:line="387" pos:column="31">{
		<expr_stmt><expr><call><name><op:operator pos:line="388" pos:column="17">::</op:operator><name pos:line="388" pos:column="19">OleUninitialize</name></name><argument_list pos:line="388" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="392" pos:column="1">HWND</name></type> <name><name pos:line="392" pos:column="6">ScintillaWin</name><op:operator pos:line="392" pos:column="18">::</op:operator><name pos:line="392" pos:column="20">MainHWND</name></name><parameter_list pos:line="392" pos:column="28">()</parameter_list> <block pos:line="392" pos:column="31">{
	<return pos:line="393" pos:column="9">return <expr><call><name><name pos:line="393" pos:column="16">reinterpret_cast</name><argument_list pos:line="393" pos:column="32">&lt;<argument><expr><name pos:line="393" pos:column="33">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="393" pos:column="38">(<argument><expr><call><name><name pos:line="393" pos:column="39">wMain</name><op:operator pos:line="393" pos:column="44">.</op:operator><name pos:line="393" pos:column="45">GetID</name></name><argument_list pos:line="393" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="396" pos:column="1">bool</name></type> <name><name pos:line="396" pos:column="6">ScintillaWin</name><op:operator pos:line="396" pos:column="18">::</op:operator><name pos:line="396" pos:column="20">DragThreshold</name></name><parameter_list pos:line="396" pos:column="33">(<param><decl><type><name pos:line="396" pos:column="34">Point</name></type> <name pos:line="396" pos:column="40">ptStart</name></decl></param>, <param><decl><type><name pos:line="396" pos:column="49">Point</name></type> <name pos:line="396" pos:column="55">ptNow</name></decl></param>)</parameter_list> <block pos:line="396" pos:column="62">{
	<decl_stmt><decl><type><name pos:line="397" pos:column="9">int</name></type> <name pos:line="397" pos:column="13">xMove</name> <init pos:line="397" pos:column="19">= <expr><call><name pos:line="397" pos:column="21">abs</name><argument_list pos:line="397" pos:column="24">(<argument><expr><name><name pos:line="397" pos:column="25">ptStart</name><op:operator pos:line="397" pos:column="32">.</op:operator><name pos:line="397" pos:column="33">x</name></name> <op:operator pos:line="397" pos:column="35">-</op:operator> <name><name pos:line="397" pos:column="37">ptNow</name><op:operator pos:line="397" pos:column="42">.</op:operator><name pos:line="397" pos:column="43">x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="398" pos:column="9">int</name></type> <name pos:line="398" pos:column="13">yMove</name> <init pos:line="398" pos:column="19">= <expr><call><name pos:line="398" pos:column="21">abs</name><argument_list pos:line="398" pos:column="24">(<argument><expr><name><name pos:line="398" pos:column="25">ptStart</name><op:operator pos:line="398" pos:column="32">.</op:operator><name pos:line="398" pos:column="33">y</name></name> <op:operator pos:line="398" pos:column="35">-</op:operator> <name><name pos:line="398" pos:column="37">ptNow</name><op:operator pos:line="398" pos:column="42">.</op:operator><name pos:line="398" pos:column="43">y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="399" pos:column="9">return <expr><op:operator pos:line="399" pos:column="16">(</op:operator><name pos:line="399" pos:column="17">xMove</name> <op:operator pos:line="399" pos:column="23">&gt;</op:operator> <call><name><op:operator pos:line="399" pos:column="25">::</op:operator><name pos:line="399" pos:column="27">GetSystemMetrics</name></name><argument_list pos:line="399" pos:column="43">(<argument><expr><name pos:line="399" pos:column="44">SM_CXDRAG</name></expr></argument>)</argument_list></call><op:operator pos:line="399" pos:column="54">)</op:operator> <op:operator pos:line="399" pos:column="56">||</op:operator>
		<op:operator pos:line="400" pos:column="17">(</op:operator><name pos:line="400" pos:column="18">yMove</name> <op:operator pos:line="400" pos:column="24">&gt;</op:operator> <call><name><op:operator pos:line="400" pos:column="26">::</op:operator><name pos:line="400" pos:column="28">GetSystemMetrics</name></name><argument_list pos:line="400" pos:column="44">(<argument><expr><name pos:line="400" pos:column="45">SM_CYDRAG</name></expr></argument>)</argument_list></call><op:operator pos:line="400" pos:column="55">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="403" pos:column="1">void</name></type> <name><name pos:line="403" pos:column="6">ScintillaWin</name><op:operator pos:line="403" pos:column="18">::</op:operator><name pos:line="403" pos:column="20">StartDrag</name></name><parameter_list pos:line="403" pos:column="29">()</parameter_list> <block pos:line="403" pos:column="32">{
	<expr_stmt><expr><name pos:line="404" pos:column="9">inDragDrop</name> <op:operator pos:line="404" pos:column="20">=</op:operator> <name pos:line="404" pos:column="22">ddDragging</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="405" pos:column="9">DWORD</name></type> <name pos:line="405" pos:column="15">dwEffect</name> <init pos:line="405" pos:column="24">= <expr><lit:literal type="number" pos:line="405" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="406" pos:column="9">dropWentOutside</name> <op:operator pos:line="406" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="406" pos:column="27">true</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="407" pos:column="9">IDataObject</name> <type:modifier pos:line="407" pos:column="21">*</type:modifier></type><name pos:line="407" pos:column="22">pDataObject</name> <init pos:line="407" pos:column="34">= <expr><call><name><name pos:line="407" pos:column="36">reinterpret_cast</name><argument_list pos:line="407" pos:column="52">&lt;<argument><expr><name pos:line="407" pos:column="53">IDataObject</name> <op:operator pos:line="407" pos:column="65">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="407" pos:column="67">(<argument><expr><op:operator pos:line="407" pos:column="68">&amp;</op:operator><name pos:line="407" pos:column="69">dob</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="408" pos:column="9">IDropSource</name> <type:modifier pos:line="408" pos:column="21">*</type:modifier></type><name pos:line="408" pos:column="22">pDropSource</name> <init pos:line="408" pos:column="34">= <expr><call><name><name pos:line="408" pos:column="36">reinterpret_cast</name><argument_list pos:line="408" pos:column="52">&lt;<argument><expr><name pos:line="408" pos:column="53">IDropSource</name> <op:operator pos:line="408" pos:column="65">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="408" pos:column="67">(<argument><expr><op:operator pos:line="408" pos:column="68">&amp;</op:operator><name pos:line="408" pos:column="69">ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="409" pos:column="9">//Platform::DebugPrintf("About to DoDragDrop %x %x\n", pDataObject, pDropSource);</comment>
	<decl_stmt><decl><type><name pos:line="410" pos:column="9">HRESULT</name></type> <name pos:line="410" pos:column="17">hr</name> <init pos:line="410" pos:column="20">= <expr><call><name><op:operator pos:line="410" pos:column="22">::</op:operator><name pos:line="410" pos:column="24">DoDragDrop</name></name><argument_list pos:line="410" pos:column="34">(
	                 <argument><expr><name pos:line="411" pos:column="26">pDataObject</name></expr></argument>,
	                 <argument><expr><name pos:line="412" pos:column="26">pDropSource</name></expr></argument>,
	                 <argument><expr><name pos:line="413" pos:column="26">DROPEFFECT_COPY</name> <op:operator pos:line="413" pos:column="42">|</op:operator> <name pos:line="413" pos:column="44">DROPEFFECT_MOVE</name></expr></argument>, <argument><expr><op:operator pos:line="413" pos:column="61">&amp;</op:operator><name pos:line="413" pos:column="62">dwEffect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="414" pos:column="9">//Platform::DebugPrintf("DoDragDrop = %x\n", hr);</comment>
	<if pos:line="415" pos:column="9">if <condition pos:line="415" pos:column="12">(<expr><call><name pos:line="415" pos:column="13">SUCCEEDED</name><argument_list pos:line="415" pos:column="22">(<argument><expr><name pos:line="415" pos:column="23">hr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="415" pos:column="27"> <block pos:line="415" pos:column="28">{
		<if pos:line="416" pos:column="17">if <condition pos:line="416" pos:column="20">(<expr><op:operator pos:line="416" pos:column="21">(</op:operator><name pos:line="416" pos:column="22">hr</name> <op:operator pos:line="416" pos:column="25">==</op:operator> <name pos:line="416" pos:column="28">DRAGDROP_S_DROP</name><op:operator pos:line="416" pos:column="43">)</op:operator> <op:operator pos:line="416" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="416" pos:column="48">(</op:operator><name pos:line="416" pos:column="49">dwEffect</name> <op:operator pos:line="416" pos:column="58">==</op:operator> <name pos:line="416" pos:column="61">DROPEFFECT_MOVE</name><op:operator pos:line="416" pos:column="76">)</op:operator> <op:operator pos:line="416" pos:column="78">&amp;&amp;</op:operator> <name pos:line="416" pos:column="81">dropWentOutside</name></expr>)</condition><then pos:line="416" pos:column="97"> <block pos:line="416" pos:column="98">{
			<comment type="line" pos:line="417" pos:column="25">// Remove dragged out text</comment>
			<expr_stmt><expr><call><name pos:line="418" pos:column="25">ClearSelection</name><argument_list pos:line="418" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="421" pos:column="9">inDragDrop</name> <op:operator pos:line="421" pos:column="20">=</op:operator> <name pos:line="421" pos:column="22">ddNone</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="422" pos:column="9">SetDragPosition</name><argument_list pos:line="422" pos:column="24">(<argument><expr><call><name pos:line="422" pos:column="25">SelectionPosition</name><argument_list pos:line="422" pos:column="42">(<argument><expr><name pos:line="422" pos:column="43">invalidPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="425" pos:column="1">// Avoid warnings everywhere for old style casts by concentrating them here</comment>
<function><type><specifier pos:line="426" pos:column="1">static</specifier> <name pos:line="426" pos:column="8">WORD</name></type> <name pos:line="426" pos:column="13">LoWord</name><parameter_list pos:line="426" pos:column="19">(<param><decl><type><name pos:line="426" pos:column="20">DWORD</name></type> <name pos:line="426" pos:column="26">l</name></decl></param>)</parameter_list> <block pos:line="426" pos:column="29">{
	<return pos:line="427" pos:column="9">return <expr><call><name pos:line="427" pos:column="16">LOWORD</name><argument_list pos:line="427" pos:column="22">(<argument><expr><name pos:line="427" pos:column="23">l</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="430" pos:column="1">static</specifier> <name pos:line="430" pos:column="8">WORD</name></type> <name pos:line="430" pos:column="13">HiWord</name><parameter_list pos:line="430" pos:column="19">(<param><decl><type><name pos:line="430" pos:column="20">DWORD</name></type> <name pos:line="430" pos:column="26">l</name></decl></param>)</parameter_list> <block pos:line="430" pos:column="29">{
	<return pos:line="431" pos:column="9">return <expr><call><name pos:line="431" pos:column="16">HIWORD</name><argument_list pos:line="431" pos:column="22">(<argument><expr><name pos:line="431" pos:column="23">l</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="434" pos:column="1">static</specifier> <name pos:line="434" pos:column="8">int</name></type> <name pos:line="434" pos:column="12">InputCodePage</name><parameter_list pos:line="434" pos:column="25">()</parameter_list> <block pos:line="434" pos:column="28">{
	<decl_stmt><decl><type><name pos:line="435" pos:column="9">HKL</name></type> <name pos:line="435" pos:column="13">inputLocale</name> <init pos:line="435" pos:column="25">= <expr><call><name><op:operator pos:line="435" pos:column="27">::</op:operator><name pos:line="435" pos:column="29">GetKeyboardLayout</name></name><argument_list pos:line="435" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="435" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="436" pos:column="9">LANGID</name></type> <name pos:line="436" pos:column="16">inputLang</name> <init pos:line="436" pos:column="26">= <expr><call><name pos:line="436" pos:column="28">LOWORD</name><argument_list pos:line="436" pos:column="34">(<argument><expr><name pos:line="436" pos:column="35">inputLocale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="437" pos:column="9">char</name></type> <name><name pos:line="437" pos:column="14">sCodePage</name><index pos:line="437" pos:column="23">[<expr><lit:literal type="number" pos:line="437" pos:column="24">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="438" pos:column="9">int</name></type> <name pos:line="438" pos:column="13">res</name> <init pos:line="438" pos:column="17">= <expr><call><name><op:operator pos:line="438" pos:column="19">::</op:operator><name pos:line="438" pos:column="21">GetLocaleInfoA</name></name><argument_list pos:line="438" pos:column="35">(<argument><expr><call><name pos:line="438" pos:column="36">MAKELCID</name><argument_list pos:line="438" pos:column="44">(<argument><expr><name pos:line="438" pos:column="45">inputLang</name></expr></argument>, <argument><expr><name pos:line="438" pos:column="56">SORT_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
	  <argument><expr><name pos:line="439" pos:column="11">LOCALE_IDEFAULTANSICODEPAGE</name></expr></argument>, <argument><expr><name pos:line="439" pos:column="40">sCodePage</name></expr></argument>, <argument><expr><sizeof pos:line="439" pos:column="51">sizeof<argument_list pos:line="439" pos:column="57">(<argument><expr><name pos:line="439" pos:column="58">sCodePage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="440" pos:column="9">if <condition pos:line="440" pos:column="12">(<expr><op:operator pos:line="440" pos:column="13">!</op:operator><name pos:line="440" pos:column="14">res</name></expr>)</condition><then pos:line="440" pos:column="18">
		<return pos:line="441" pos:column="17">return <expr><lit:literal type="number" pos:line="441" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<return pos:line="442" pos:column="9">return <expr><call><name pos:line="442" pos:column="16">atoi</name><argument_list pos:line="442" pos:column="20">(<argument><expr><name pos:line="442" pos:column="21">sCodePage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifndef pos:line="445" pos:column="1">#<cpp:directive pos:line="445" pos:column="2">ifndef</cpp:directive> <name pos:line="445" pos:column="9">VK_OEM_2</name></cpp:ifndef>
<decl_stmt><decl><type><specifier pos:line="446" pos:column="1">static</specifier> <specifier pos:line="446" pos:column="8">const</specifier> <name pos:line="446" pos:column="14">int</name></type> <name pos:line="446" pos:column="18">VK_OEM_2</name><init pos:line="446" pos:column="26">=<expr><lit:literal type="number" pos:line="446" pos:column="27">0xbf</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="447" pos:column="1">static</specifier> <specifier pos:line="447" pos:column="8">const</specifier> <name pos:line="447" pos:column="14">int</name></type> <name pos:line="447" pos:column="18">VK_OEM_3</name><init pos:line="447" pos:column="26">=<expr><lit:literal type="number" pos:line="447" pos:column="27">0xc0</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="448" pos:column="1">static</specifier> <specifier pos:line="448" pos:column="8">const</specifier> <name pos:line="448" pos:column="14">int</name></type> <name pos:line="448" pos:column="18">VK_OEM_4</name><init pos:line="448" pos:column="26">=<expr><lit:literal type="number" pos:line="448" pos:column="27">0xdb</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="449" pos:column="1">static</specifier> <specifier pos:line="449" pos:column="8">const</specifier> <name pos:line="449" pos:column="14">int</name></type> <name pos:line="449" pos:column="18">VK_OEM_5</name><init pos:line="449" pos:column="26">=<expr><lit:literal type="number" pos:line="449" pos:column="27">0xdc</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="450" pos:column="1">static</specifier> <specifier pos:line="450" pos:column="8">const</specifier> <name pos:line="450" pos:column="14">int</name></type> <name pos:line="450" pos:column="18">VK_OEM_6</name><init pos:line="450" pos:column="26">=<expr><lit:literal type="number" pos:line="450" pos:column="27">0xdd</lit:literal></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="451" pos:column="1">#<cpp:directive pos:line="451" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:line="453" pos:column="1">/** Map the key codes to their equivalent SCK_ form. */</comment>
<function><type><specifier pos:line="454" pos:column="1">static</specifier> <name pos:line="454" pos:column="8">int</name></type> <name pos:line="454" pos:column="12">KeyTranslate</name><parameter_list pos:line="454" pos:column="24">(<param><decl><type><name pos:line="454" pos:column="25">int</name></type> <name pos:line="454" pos:column="29">keyIn</name></decl></param>)</parameter_list> <block pos:line="454" pos:column="36">{
<comment type="line" pos:line="455" pos:column="1">//PLATFORM_ASSERT(!keyIn);</comment>
	<switch pos:line="456" pos:column="9">switch <condition pos:line="456" pos:column="16">(<expr><name pos:line="456" pos:column="17">keyIn</name></expr>)</condition> <block pos:line="456" pos:column="24">{
		<case pos:line="457" pos:column="17">case <expr><name pos:line="457" pos:column="22">VK_DOWN</name></expr>:		<return pos:line="457" pos:column="41">return <expr><name pos:line="457" pos:column="48">SCK_DOWN</name></expr>;</return>
		</case><case pos:line="458" pos:column="17">case <expr><name pos:line="458" pos:column="22">VK_UP</name></expr>:		<return pos:line="458" pos:column="41">return <expr><name pos:line="458" pos:column="48">SCK_UP</name></expr>;</return>
		</case><case pos:line="459" pos:column="17">case <expr><name pos:line="459" pos:column="22">VK_LEFT</name></expr>:		<return pos:line="459" pos:column="41">return <expr><name pos:line="459" pos:column="48">SCK_LEFT</name></expr>;</return>
		</case><case pos:line="460" pos:column="17">case <expr><name pos:line="460" pos:column="22">VK_RIGHT</name></expr>:		<return pos:line="460" pos:column="41">return <expr><name pos:line="460" pos:column="48">SCK_RIGHT</name></expr>;</return>
		</case><case pos:line="461" pos:column="17">case <expr><name pos:line="461" pos:column="22">VK_HOME</name></expr>:		<return pos:line="461" pos:column="41">return <expr><name pos:line="461" pos:column="48">SCK_HOME</name></expr>;</return>
		</case><case pos:line="462" pos:column="17">case <expr><name pos:line="462" pos:column="22">VK_END</name></expr>:		<return pos:line="462" pos:column="41">return <expr><name pos:line="462" pos:column="48">SCK_END</name></expr>;</return>
		</case><case pos:line="463" pos:column="17">case <expr><name pos:line="463" pos:column="22">VK_PRIOR</name></expr>:		<return pos:line="463" pos:column="41">return <expr><name pos:line="463" pos:column="48">SCK_PRIOR</name></expr>;</return>
		</case><case pos:line="464" pos:column="17">case <expr><name pos:line="464" pos:column="22">VK_NEXT</name></expr>:		<return pos:line="464" pos:column="41">return <expr><name pos:line="464" pos:column="48">SCK_NEXT</name></expr>;</return>
		</case><case pos:line="465" pos:column="17">case <expr><name pos:line="465" pos:column="22">VK_DELETE</name></expr>:	<return pos:line="465" pos:column="33">return <expr><name pos:line="465" pos:column="40">SCK_DELETE</name></expr>;</return>
		</case><case pos:line="466" pos:column="17">case <expr><name pos:line="466" pos:column="22">VK_INSERT</name></expr>:		<return pos:line="466" pos:column="41">return <expr><name pos:line="466" pos:column="48">SCK_INSERT</name></expr>;</return>
		</case><case pos:line="467" pos:column="17">case <expr><name pos:line="467" pos:column="22">VK_ESCAPE</name></expr>:	<return pos:line="467" pos:column="33">return <expr><name pos:line="467" pos:column="40">SCK_ESCAPE</name></expr>;</return>
		</case><case pos:line="468" pos:column="17">case <expr><name pos:line="468" pos:column="22">VK_BACK</name></expr>:		<return pos:line="468" pos:column="41">return <expr><name pos:line="468" pos:column="48">SCK_BACK</name></expr>;</return>
		</case><case pos:line="469" pos:column="17">case <expr><name pos:line="469" pos:column="22">VK_TAB</name></expr>:		<return pos:line="469" pos:column="41">return <expr><name pos:line="469" pos:column="48">SCK_TAB</name></expr>;</return>
		</case><case pos:line="470" pos:column="17">case <expr><name pos:line="470" pos:column="22">VK_RETURN</name></expr>:	<return pos:line="470" pos:column="33">return <expr><name pos:line="470" pos:column="40">SCK_RETURN</name></expr>;</return>
		</case><case pos:line="471" pos:column="17">case <expr><name pos:line="471" pos:column="22">VK_ADD</name></expr>:		<return pos:line="471" pos:column="41">return <expr><name pos:line="471" pos:column="48">SCK_ADD</name></expr>;</return>
		</case><case pos:line="472" pos:column="17">case <expr><name pos:line="472" pos:column="22">VK_SUBTRACT</name></expr>:	<return pos:line="472" pos:column="41">return <expr><name pos:line="472" pos:column="48">SCK_SUBTRACT</name></expr>;</return>
		</case><case pos:line="473" pos:column="17">case <expr><name pos:line="473" pos:column="22">VK_DIVIDE</name></expr>:		<return pos:line="473" pos:column="41">return <expr><name pos:line="473" pos:column="48">SCK_DIVIDE</name></expr>;</return>
		</case><case pos:line="474" pos:column="17">case <expr><name pos:line="474" pos:column="22">VK_LWIN</name></expr>:		<return pos:line="474" pos:column="41">return <expr><name pos:line="474" pos:column="48">SCK_WIN</name></expr>;</return>
		</case><case pos:line="475" pos:column="17">case <expr><name pos:line="475" pos:column="22">VK_RWIN</name></expr>:		<return pos:line="475" pos:column="41">return <expr><name pos:line="475" pos:column="48">SCK_RWIN</name></expr>;</return>
		</case><case pos:line="476" pos:column="17">case <expr><name pos:line="476" pos:column="22">VK_APPS</name></expr>:		<return pos:line="476" pos:column="41">return <expr><name pos:line="476" pos:column="48">SCK_MENU</name></expr>;</return>
		</case><case pos:line="477" pos:column="17">case <expr><name pos:line="477" pos:column="22">VK_OEM_2</name></expr>:		<return pos:line="477" pos:column="41">return <expr><lit:literal type="char" pos:line="477" pos:column="48">'/'</lit:literal></expr>;</return>
		</case><case pos:line="478" pos:column="17">case <expr><name pos:line="478" pos:column="22">VK_OEM_3</name></expr>:		<return pos:line="478" pos:column="41">return <expr><lit:literal type="char" pos:line="478" pos:column="48">'`'</lit:literal></expr>;</return>
		</case><case pos:line="479" pos:column="17">case <expr><name pos:line="479" pos:column="22">VK_OEM_4</name></expr>:		<return pos:line="479" pos:column="41">return <expr><lit:literal type="char" pos:line="479" pos:column="48">'['</lit:literal></expr>;</return>
		</case><case pos:line="480" pos:column="17">case <expr><name pos:line="480" pos:column="22">VK_OEM_5</name></expr>:		<return pos:line="480" pos:column="41">return <expr><lit:literal type="char" pos:line="480" pos:column="48">'\\'</lit:literal></expr>;</return>
		</case><case pos:line="481" pos:column="17">case <expr><name pos:line="481" pos:column="22">VK_OEM_6</name></expr>:		<return pos:line="481" pos:column="41">return <expr><lit:literal type="char" pos:line="481" pos:column="48">']'</lit:literal></expr>;</return>
		</case><default pos:line="482" pos:column="17">default:			<return pos:line="482" pos:column="49">return <expr><name pos:line="482" pos:column="56">keyIn</name></expr>;</return>
	</default>}</block></switch>
}</block></function>

<function><type><name pos:line="486" pos:column="1">LRESULT</name></type> <name><name pos:line="486" pos:column="9">ScintillaWin</name><op:operator pos:line="486" pos:column="21">::</op:operator><name pos:line="486" pos:column="23">WndPaint</name></name><parameter_list pos:line="486" pos:column="31">(<param><decl><type><name pos:line="486" pos:column="32">uptr_t</name></type> <name pos:line="486" pos:column="39">wParam</name></decl></param>)</parameter_list> <block pos:line="486" pos:column="47">{
	<comment type="line" pos:line="487" pos:column="9">//ElapsedTime et;</comment>

	<comment type="line" pos:line="489" pos:column="9">// Redirect assertions to debug output and save current state</comment>
	<decl_stmt><decl><type><name pos:line="490" pos:column="9">bool</name></type> <name pos:line="490" pos:column="14">assertsPopup</name> <init pos:line="490" pos:column="27">= <expr><call><name><name pos:line="490" pos:column="29">Platform</name><op:operator pos:line="490" pos:column="37">::</op:operator><name pos:line="490" pos:column="39">ShowAssertionPopUps</name></name><argument_list pos:line="490" pos:column="58">(<argument><expr><lit:literal type="boolean" pos:line="490" pos:column="59">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="491" pos:column="9">paintState</name> <op:operator pos:line="491" pos:column="20">=</op:operator> <name pos:line="491" pos:column="22">painting</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="492" pos:column="9">PAINTSTRUCT</name></type> <name pos:line="492" pos:column="21">ps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="493" pos:column="9">PAINTSTRUCT</name> <type:modifier pos:line="493" pos:column="21">*</type:modifier></type><name pos:line="493" pos:column="22">pps</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="495" pos:column="9">bool</name></type> <name pos:line="495" pos:column="14">IsOcxCtrl</name> <init pos:line="495" pos:column="24">= <expr><op:operator pos:line="495" pos:column="26">(</op:operator><name pos:line="495" pos:column="27">wParam</name> <op:operator pos:line="495" pos:column="34">!=</op:operator> <lit:literal type="number" pos:line="495" pos:column="37">0</lit:literal><op:operator pos:line="495" pos:column="38">)</op:operator></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="495" pos:column="41">// if wParam != 0, it contains</comment>
								   <comment type="line" pos:line="496" pos:column="68">// a PAINSTRUCT* from the OCX</comment>
	<comment type="line" pos:line="497" pos:column="9">// Removed since this interferes with reporting other assertions as it occurs repeatedly</comment>
	<comment type="line" pos:line="498" pos:column="9">//PLATFORM_ASSERT(hRgnUpdate == NULL);</comment>
	<expr_stmt><expr><name pos:line="499" pos:column="9">hRgnUpdate</name> <op:operator pos:line="499" pos:column="20">=</op:operator> <call><name><op:operator pos:line="499" pos:column="22">::</op:operator><name pos:line="499" pos:column="24">CreateRectRgn</name></name><argument_list pos:line="499" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="499" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="499" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="499" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="499" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="500" pos:column="9">if <condition pos:line="500" pos:column="12">(<expr><name pos:line="500" pos:column="13">IsOcxCtrl</name></expr>)</condition><then pos:line="500" pos:column="23"> <block pos:line="500" pos:column="24">{
		<expr_stmt><expr><name pos:line="501" pos:column="17">pps</name> <op:operator pos:line="501" pos:column="21">=</op:operator> <call><name><name pos:line="501" pos:column="23">reinterpret_cast</name><argument_list pos:line="501" pos:column="39">&lt;<argument><expr><name pos:line="501" pos:column="40">PAINTSTRUCT</name><op:operator pos:line="501" pos:column="51">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="501" pos:column="53">(<argument><expr><name pos:line="501" pos:column="54">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="502" pos:column="11">else <block pos:line="502" pos:column="16">{
		<expr_stmt><expr><call><name><op:operator pos:line="503" pos:column="17">::</op:operator><name pos:line="503" pos:column="19">GetUpdateRgn</name></name><argument_list pos:line="503" pos:column="31">(<argument><expr><call><name pos:line="503" pos:column="32">MainHWND</name><argument_list pos:line="503" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="503" pos:column="44">hRgnUpdate</name></expr></argument>, <argument><expr><name pos:line="503" pos:column="56">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="504" pos:column="17">pps</name> <op:operator pos:line="504" pos:column="21">=</op:operator> <op:operator pos:line="504" pos:column="23">&amp;</op:operator><name pos:line="504" pos:column="24">ps</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="505" pos:column="17">::</op:operator><name pos:line="505" pos:column="19">BeginPaint</name></name><argument_list pos:line="505" pos:column="29">(<argument><expr><call><name pos:line="505" pos:column="30">MainHWND</name><argument_list pos:line="505" pos:column="38">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="505" pos:column="42">pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<function_decl><type><name pos:line="507" pos:column="9">AutoSurface</name></type> <name pos:line="507" pos:column="21">surfaceWindow</name><parameter_list pos:line="507" pos:column="34">(<param><decl><type><name><name pos:line="507" pos:column="35">pps</name><op:operator pos:line="507" pos:column="38">-&gt;</op:operator><name pos:line="507" pos:column="40">hdc</name></name></type></decl></param>, <param><decl><type><name pos:line="507" pos:column="45">this</name></type></decl></param>)</parameter_list>;</function_decl>
	<if pos:line="508" pos:column="9">if <condition pos:line="508" pos:column="12">(<expr><name pos:line="508" pos:column="13">surfaceWindow</name></expr>)</condition><then pos:line="508" pos:column="27"> <block pos:line="508" pos:column="28">{
		<expr_stmt><expr><name pos:line="509" pos:column="17">rcPaint</name> <op:operator pos:line="509" pos:column="25">=</op:operator> <call><name pos:line="509" pos:column="27">PRectangle</name><argument_list pos:line="509" pos:column="37">(<argument><expr><name><name pos:line="509" pos:column="38">pps</name><op:operator pos:line="509" pos:column="41">-&gt;</op:operator><name pos:line="509" pos:column="43">rcPaint</name><op:operator pos:line="509" pos:column="50">.</op:operator><name pos:line="509" pos:column="51">left</name></name></expr></argument>, <argument><expr><name><name pos:line="509" pos:column="57">pps</name><op:operator pos:line="509" pos:column="60">-&gt;</op:operator><name pos:line="509" pos:column="62">rcPaint</name><op:operator pos:line="509" pos:column="69">.</op:operator><name pos:line="509" pos:column="70">top</name></name></expr></argument>, <argument><expr><name><name pos:line="509" pos:column="75">pps</name><op:operator pos:line="509" pos:column="78">-&gt;</op:operator><name pos:line="509" pos:column="80">rcPaint</name><op:operator pos:line="509" pos:column="87">.</op:operator><name pos:line="509" pos:column="88">right</name></name></expr></argument>, <argument><expr><name><name pos:line="509" pos:column="95">pps</name><op:operator pos:line="509" pos:column="98">-&gt;</op:operator><name pos:line="509" pos:column="100">rcPaint</name><op:operator pos:line="509" pos:column="107">.</op:operator><name pos:line="509" pos:column="108">bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="510" pos:column="17">PRectangle</name></type> <name pos:line="510" pos:column="28">rcClient</name> <init pos:line="510" pos:column="37">= <expr><call><name pos:line="510" pos:column="39">GetClientRectangle</name><argument_list pos:line="510" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="511" pos:column="17">paintingAllText</name> <op:operator pos:line="511" pos:column="33">=</op:operator> <call><name><name pos:line="511" pos:column="35">rcPaint</name><op:operator pos:line="511" pos:column="42">.</op:operator><name pos:line="511" pos:column="43">Contains</name></name><argument_list pos:line="511" pos:column="51">(<argument><expr><name pos:line="511" pos:column="52">rcClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="512" pos:column="17">if <condition pos:line="512" pos:column="20">(<expr><name pos:line="512" pos:column="21">paintingAllText</name></expr>)</condition><then pos:line="512" pos:column="37"> <block pos:line="512" pos:column="38">{
			<comment type="line" pos:line="513" pos:column="25">//Platform::DebugPrintf("Performing full text paint\n");</comment>
		}</block></then> <else pos:line="514" pos:column="19">else <block pos:line="514" pos:column="24">{
			<comment type="line" pos:line="515" pos:column="25">//Platform::DebugPrintf("Performing partial paint %d .. %d\n", rcPaint.top, rcPaint.bottom);</comment>
		}</block></else></if>
		<expr_stmt><expr><call><name pos:line="517" pos:column="17">Paint</name><argument_list pos:line="517" pos:column="22">(<argument><expr><name pos:line="517" pos:column="23">surfaceWindow</name></expr></argument>, <argument><expr><name pos:line="517" pos:column="38">rcPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="518" pos:column="17">surfaceWindow</name><op:operator pos:line="518" pos:column="30">-&gt;</op:operator><name pos:line="518" pos:column="32">Release</name></name><argument_list pos:line="518" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="520" pos:column="9">if <condition pos:line="520" pos:column="12">(<expr><name pos:line="520" pos:column="13">hRgnUpdate</name></expr>)</condition><then pos:line="520" pos:column="24"> <block pos:line="520" pos:column="25">{
		<expr_stmt><expr><call><name><op:operator pos:line="521" pos:column="17">::</op:operator><name pos:line="521" pos:column="19">DeleteRgn</name></name><argument_list pos:line="521" pos:column="28">(<argument><expr><name pos:line="521" pos:column="29">hRgnUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="522" pos:column="17">hRgnUpdate</name> <op:operator pos:line="522" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="522" pos:column="30">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="525" pos:column="9">if <condition pos:line="525" pos:column="12">(<expr><op:operator pos:line="525" pos:column="13">!</op:operator><name pos:line="525" pos:column="14">IsOcxCtrl</name></expr>)</condition><then pos:line="525" pos:column="24">
		<expr_stmt><expr><call><name><op:operator pos:line="526" pos:column="17">::</op:operator><name pos:line="526" pos:column="19">EndPaint</name></name><argument_list pos:line="526" pos:column="27">(<argument><expr><call><name pos:line="526" pos:column="28">MainHWND</name><argument_list pos:line="526" pos:column="36">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="526" pos:column="40">pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="527" pos:column="9">if <condition pos:line="527" pos:column="12">(<expr><name pos:line="527" pos:column="13">paintState</name> <op:operator pos:line="527" pos:column="24">==</op:operator> <name pos:line="527" pos:column="27">paintAbandoned</name></expr>)</condition><then pos:line="527" pos:column="42"> <block pos:line="527" pos:column="43">{
		<comment type="line" pos:line="528" pos:column="17">// Painting area was insufficient to cover new styling or brace highlight positions</comment>
		<expr_stmt><expr><call><name pos:line="529" pos:column="17">FullPaint</name><argument_list pos:line="529" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="531" pos:column="9">paintState</name> <op:operator pos:line="531" pos:column="20">=</op:operator> <name pos:line="531" pos:column="22">notPainting</name></expr>;</expr_stmt>

	<comment type="line" pos:line="533" pos:column="9">// Restore debug output state</comment>
	<expr_stmt><expr><call><name><name pos:line="534" pos:column="9">Platform</name><op:operator pos:line="534" pos:column="17">::</op:operator><name pos:line="534" pos:column="19">ShowAssertionPopUps</name></name><argument_list pos:line="534" pos:column="38">(<argument><expr><name pos:line="534" pos:column="39">assertsPopup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="536" pos:column="9">//Platform::DebugPrintf("Paint took %g\n", et.Duration());</comment>
	<return pos:line="537" pos:column="9">return <expr><lit:literal type="number" pos:line="537" pos:column="16">0l</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="540" pos:column="1">sptr_t</name></type> <name><name pos:line="540" pos:column="8">ScintillaWin</name><op:operator pos:line="540" pos:column="20">::</op:operator><name pos:line="540" pos:column="22">HandleComposition</name></name><parameter_list pos:line="540" pos:column="39">(<param><decl><type><name pos:line="540" pos:column="40">uptr_t</name></type> <name pos:line="540" pos:column="47">wParam</name></decl></param>, <param><decl><type><name pos:line="540" pos:column="55">sptr_t</name></type> <name pos:line="540" pos:column="62">lParam</name></decl></param>)</parameter_list> <block pos:line="540" pos:column="70">{
<cpp:ifdef pos:line="541" pos:column="1">#<cpp:directive pos:line="541" pos:column="2">ifdef</cpp:directive> <name pos:line="541" pos:column="8">__DMC__</name></cpp:ifdef>
	<comment type="line" pos:line="542" pos:column="9">// Digital Mars compiler does not include Imm library</comment>
	<return pos:line="543" pos:column="9">return <expr><lit:literal type="number" pos:line="543" pos:column="16">0</lit:literal></expr>;</return>
<cpp:else pos:line="544" pos:column="1">#<cpp:directive pos:line="544" pos:column="2">else</cpp:directive></cpp:else>
	<if pos:line="545" pos:column="9">if <condition pos:line="545" pos:column="12">(<expr><name pos:line="545" pos:column="13">lParam</name> <op:operator pos:line="545" pos:column="20">&amp;</op:operator> <name pos:line="545" pos:column="22">GCS_RESULTSTR</name></expr>)</condition><then pos:line="545" pos:column="36"> <block pos:line="545" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="546" pos:column="17">HIMC</name></type> <name pos:line="546" pos:column="22">hIMC</name> <init pos:line="546" pos:column="27">= <expr><call><name><op:operator pos:line="546" pos:column="29">::</op:operator><name pos:line="546" pos:column="31">ImmGetContext</name></name><argument_list pos:line="546" pos:column="44">(<argument><expr><call><name pos:line="546" pos:column="45">MainHWND</name><argument_list pos:line="546" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="547" pos:column="17">if <condition pos:line="547" pos:column="20">(<expr><name pos:line="547" pos:column="21">hIMC</name></expr>)</condition><then pos:line="547" pos:column="26"> <block pos:line="547" pos:column="27">{
			<decl_stmt><decl><type><specifier pos:line="548" pos:column="25">const</specifier> <name pos:line="548" pos:column="31">int</name></type> <name pos:line="548" pos:column="35">maxLenInputIME</name> <init pos:line="548" pos:column="50">= <expr><lit:literal type="number" pos:line="548" pos:column="52">200</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="549" pos:column="25">wchar_t</name></type> <name><name pos:line="549" pos:column="33">wcs</name><index pos:line="549" pos:column="36">[<expr><name pos:line="549" pos:column="37">maxLenInputIME</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="550" pos:column="25">LONG</name></type> <name pos:line="550" pos:column="30">bytes</name> <init pos:line="550" pos:column="36">= <expr><call><name><op:operator pos:line="550" pos:column="38">::</op:operator><name pos:line="550" pos:column="40">ImmGetCompositionStringW</name></name><argument_list pos:line="550" pos:column="64">(<argument><expr><name pos:line="550" pos:column="65">hIMC</name></expr></argument>,
				<argument><expr><name pos:line="551" pos:column="33">GCS_RESULTSTR</name></expr></argument>, <argument><expr><name pos:line="551" pos:column="48">wcs</name></expr></argument>, <argument><expr><op:operator pos:line="551" pos:column="53">(</op:operator><name pos:line="551" pos:column="54">maxLenInputIME</name><op:operator pos:line="551" pos:column="68">-</op:operator><lit:literal type="number" pos:line="551" pos:column="69">1</lit:literal><op:operator pos:line="551" pos:column="70">)</op:operator><op:operator pos:line="551" pos:column="71">*</op:operator><lit:literal type="number" pos:line="551" pos:column="72">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="552" pos:column="25">int</name></type> <name pos:line="552" pos:column="29">wides</name> <init pos:line="552" pos:column="35">= <expr><name pos:line="552" pos:column="37">bytes</name> <op:operator pos:line="552" pos:column="43">/</op:operator> <lit:literal type="number" pos:line="552" pos:column="45">2</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="553" pos:column="25">if <condition pos:line="553" pos:column="28">(<expr><call><name pos:line="553" pos:column="29">IsUnicodeMode</name><argument_list pos:line="553" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="553" pos:column="45"> <block pos:line="553" pos:column="46">{
				<decl_stmt><decl><type><name pos:line="554" pos:column="33">char</name></type> <name><name pos:line="554" pos:column="38">utfval</name><index pos:line="554" pos:column="44">[<expr><name pos:line="554" pos:column="45">maxLenInputIME</name> <op:operator pos:line="554" pos:column="60">*</op:operator> <lit:literal type="number" pos:line="554" pos:column="62">3</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="555" pos:column="33">unsigned</name> <name pos:line="555" pos:column="42">int</name></type> <name pos:line="555" pos:column="46">len</name> <init pos:line="555" pos:column="50">= <expr><call><name pos:line="555" pos:column="52">UTF8Length</name><argument_list pos:line="555" pos:column="62">(<argument><expr><name pos:line="555" pos:column="63">wcs</name></expr></argument>, <argument><expr><name pos:line="555" pos:column="68">wides</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="556" pos:column="33">UTF8FromUTF16</name><argument_list pos:line="556" pos:column="46">(<argument><expr><name pos:line="556" pos:column="47">wcs</name></expr></argument>, <argument><expr><name pos:line="556" pos:column="52">wides</name></expr></argument>, <argument><expr><name pos:line="556" pos:column="59">utfval</name></expr></argument>, <argument><expr><name pos:line="556" pos:column="67">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="557" pos:column="33">utfval</name><index pos:line="557" pos:column="39">[<expr><name pos:line="557" pos:column="40">len</name></expr>]</index></name> <op:operator pos:line="557" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="557" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="558" pos:column="33">AddCharUTF</name><argument_list pos:line="558" pos:column="43">(<argument><expr><name pos:line="558" pos:column="44">utfval</name></expr></argument>, <argument><expr><name pos:line="558" pos:column="52">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="559" pos:column="27">else <block pos:line="559" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="560" pos:column="33">char</name></type> <name><name pos:line="560" pos:column="38">dbcsval</name><index pos:line="560" pos:column="45">[<expr><name pos:line="560" pos:column="46">maxLenInputIME</name> <op:operator pos:line="560" pos:column="61">*</op:operator> <lit:literal type="number" pos:line="560" pos:column="63">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="561" pos:column="33">int</name></type> <name pos:line="561" pos:column="37">size</name> <init pos:line="561" pos:column="42">= <expr><call><name><op:operator pos:line="561" pos:column="44">::</op:operator><name pos:line="561" pos:column="46">WideCharToMultiByte</name></name><argument_list pos:line="561" pos:column="65">(<argument><expr><call><name pos:line="561" pos:column="66">InputCodePage</name><argument_list pos:line="561" pos:column="79">()</argument_list></call></expr></argument>,
					<argument><expr><lit:literal type="number" pos:line="562" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><name pos:line="562" pos:column="44">wcs</name></expr></argument>, <argument><expr><name pos:line="562" pos:column="49">wides</name></expr></argument>, <argument><expr><name pos:line="562" pos:column="56">dbcsval</name></expr></argument>, <argument><expr><sizeof pos:line="562" pos:column="65">sizeof<argument_list pos:line="562" pos:column="71">(<argument><expr><name pos:line="562" pos:column="72">dbcsval</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="562" pos:column="81">-</op:operator> <lit:literal type="number" pos:line="562" pos:column="83">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="562" pos:column="86">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="562" pos:column="89">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for pos:line="563" pos:column="33">for (<init><decl><type><name pos:line="563" pos:column="38">int</name></type> <name pos:line="563" pos:column="42">i</name><init pos:line="563" pos:column="43">=<expr><lit:literal type="number" pos:line="563" pos:column="44">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="563" pos:column="47">i</name><op:operator pos:line="563" pos:column="48">&lt;</op:operator><name pos:line="563" pos:column="49">size</name></expr>;</condition> <incr><expr><name pos:line="563" pos:column="55">i</name><op:operator pos:line="563" pos:column="56">++</op:operator></expr></incr>) <block pos:line="563" pos:column="60">{
					<expr_stmt><expr><call><name pos:line="564" pos:column="41">AddChar</name><argument_list pos:line="564" pos:column="48">(<argument><expr><name><name pos:line="564" pos:column="49">dbcsval</name><index pos:line="564" pos:column="56">[<expr><name pos:line="564" pos:column="57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></else></if>
			<comment type="line" pos:line="567" pos:column="25">// Set new position after converted</comment>
			<decl_stmt><decl><type><name pos:line="568" pos:column="25">Point</name></type> <name pos:line="568" pos:column="31">pos</name> <init pos:line="568" pos:column="35">= <expr><call><name pos:line="568" pos:column="37">PointMainCaret</name><argument_list pos:line="568" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="569" pos:column="25">COMPOSITIONFORM</name></type> <name pos:line="569" pos:column="41">CompForm</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="570" pos:column="25">CompForm</name><op:operator pos:line="570" pos:column="33">.</op:operator><name pos:line="570" pos:column="34">dwStyle</name></name> <op:operator pos:line="570" pos:column="42">=</op:operator> <name pos:line="570" pos:column="44">CFS_POINT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="571" pos:column="25">CompForm</name><op:operator pos:line="571" pos:column="33">.</op:operator><name pos:line="571" pos:column="34">ptCurrentPos</name><op:operator pos:line="571" pos:column="46">.</op:operator><name pos:line="571" pos:column="47">x</name></name> <op:operator pos:line="571" pos:column="49">=</op:operator> <name><name pos:line="571" pos:column="51">pos</name><op:operator pos:line="571" pos:column="54">.</op:operator><name pos:line="571" pos:column="55">x</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="572" pos:column="25">CompForm</name><op:operator pos:line="572" pos:column="33">.</op:operator><name pos:line="572" pos:column="34">ptCurrentPos</name><op:operator pos:line="572" pos:column="46">.</op:operator><name pos:line="572" pos:column="47">y</name></name> <op:operator pos:line="572" pos:column="49">=</op:operator> <name><name pos:line="572" pos:column="51">pos</name><op:operator pos:line="572" pos:column="54">.</op:operator><name pos:line="572" pos:column="55">y</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="573" pos:column="25">::</op:operator><name pos:line="573" pos:column="27">ImmSetCompositionWindow</name></name><argument_list pos:line="573" pos:column="50">(<argument><expr><name pos:line="573" pos:column="51">hIMC</name></expr></argument>, <argument><expr><op:operator pos:line="573" pos:column="57">&amp;</op:operator><name pos:line="573" pos:column="58">CompForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="574" pos:column="25">::</op:operator><name pos:line="574" pos:column="27">ImmReleaseContext</name></name><argument_list pos:line="574" pos:column="44">(<argument><expr><call><name pos:line="574" pos:column="45">MainHWND</name><argument_list pos:line="574" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="574" pos:column="57">hIMC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return pos:line="576" pos:column="17">return <expr><lit:literal type="number" pos:line="576" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="578" pos:column="9">return <expr><call><name><op:operator pos:line="578" pos:column="16">::</op:operator><name pos:line="578" pos:column="18">DefWindowProc</name></name><argument_list pos:line="578" pos:column="31">(<argument><expr><call><name pos:line="578" pos:column="32">MainHWND</name><argument_list pos:line="578" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="578" pos:column="44">WM_IME_COMPOSITION</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="64">wParam</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="72">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif pos:line="579" pos:column="1">#<cpp:directive pos:line="579" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="line" pos:line="582" pos:column="1">// Translate message IDs from WM_* and EM_* to SCI_* so can partly emulate Windows Edit control</comment>
<function><type><specifier pos:line="583" pos:column="1">static</specifier> <name pos:line="583" pos:column="8">unsigned</name> <name pos:line="583" pos:column="17">int</name></type> <name pos:line="583" pos:column="21">SciMessageFromEM</name><parameter_list pos:line="583" pos:column="37">(<param><decl><type><name pos:line="583" pos:column="38">unsigned</name> <name pos:line="583" pos:column="47">int</name></type> <name pos:line="583" pos:column="51">iMessage</name></decl></param>)</parameter_list> <block pos:line="583" pos:column="61">{
	<switch pos:line="584" pos:column="9">switch <condition pos:line="584" pos:column="16">(<expr><name pos:line="584" pos:column="17">iMessage</name></expr>)</condition> <block pos:line="584" pos:column="27">{
	<case pos:line="585" pos:column="9">case <expr><name pos:line="585" pos:column="14">EM_CANPASTE</name></expr>: <return pos:line="585" pos:column="27">return <expr><name pos:line="585" pos:column="34">SCI_CANPASTE</name></expr>;</return>
	</case><case pos:line="586" pos:column="9">case <expr><name pos:line="586" pos:column="14">EM_CANUNDO</name></expr>: <return pos:line="586" pos:column="26">return <expr><name pos:line="586" pos:column="33">SCI_CANUNDO</name></expr>;</return>
	</case><case pos:line="587" pos:column="9">case <expr><name pos:line="587" pos:column="14">EM_EMPTYUNDOBUFFER</name></expr>: <return pos:line="587" pos:column="34">return <expr><name pos:line="587" pos:column="41">SCI_EMPTYUNDOBUFFER</name></expr>;</return>
	</case><case pos:line="588" pos:column="9">case <expr><name pos:line="588" pos:column="14">EM_FINDTEXTEX</name></expr>: <return pos:line="588" pos:column="29">return <expr><name pos:line="588" pos:column="36">SCI_FINDTEXT</name></expr>;</return>
	</case><case pos:line="589" pos:column="9">case <expr><name pos:line="589" pos:column="14">EM_FORMATRANGE</name></expr>: <return pos:line="589" pos:column="30">return <expr><name pos:line="589" pos:column="37">SCI_FORMATRANGE</name></expr>;</return>
	</case><case pos:line="590" pos:column="9">case <expr><name pos:line="590" pos:column="14">EM_GETFIRSTVISIBLELINE</name></expr>: <return pos:line="590" pos:column="38">return <expr><name pos:line="590" pos:column="45">SCI_GETFIRSTVISIBLELINE</name></expr>;</return>
	</case><case pos:line="591" pos:column="9">case <expr><name pos:line="591" pos:column="14">EM_GETLINECOUNT</name></expr>: <return pos:line="591" pos:column="31">return <expr><name pos:line="591" pos:column="38">SCI_GETLINECOUNT</name></expr>;</return>
	</case><case pos:line="592" pos:column="9">case <expr><name pos:line="592" pos:column="14">EM_GETSELTEXT</name></expr>: <return pos:line="592" pos:column="29">return <expr><name pos:line="592" pos:column="36">SCI_GETSELTEXT</name></expr>;</return>
	</case><case pos:line="593" pos:column="9">case <expr><name pos:line="593" pos:column="14">EM_GETTEXTRANGE</name></expr>: <return pos:line="593" pos:column="31">return <expr><name pos:line="593" pos:column="38">SCI_GETTEXTRANGE</name></expr>;</return>
	</case><case pos:line="594" pos:column="9">case <expr><name pos:line="594" pos:column="14">EM_HIDESELECTION</name></expr>: <return pos:line="594" pos:column="32">return <expr><name pos:line="594" pos:column="39">SCI_HIDESELECTION</name></expr>;</return>
	</case><case pos:line="595" pos:column="9">case <expr><name pos:line="595" pos:column="14">EM_LINEINDEX</name></expr>: <return pos:line="595" pos:column="28">return <expr><name pos:line="595" pos:column="35">SCI_POSITIONFROMLINE</name></expr>;</return>
	</case><case pos:line="596" pos:column="9">case <expr><name pos:line="596" pos:column="14">EM_LINESCROLL</name></expr>: <return pos:line="596" pos:column="29">return <expr><name pos:line="596" pos:column="36">SCI_LINESCROLL</name></expr>;</return>
	</case><case pos:line="597" pos:column="9">case <expr><name pos:line="597" pos:column="14">EM_REPLACESEL</name></expr>: <return pos:line="597" pos:column="29">return <expr><name pos:line="597" pos:column="36">SCI_REPLACESEL</name></expr>;</return>
	</case><case pos:line="598" pos:column="9">case <expr><name pos:line="598" pos:column="14">EM_SCROLLCARET</name></expr>: <return pos:line="598" pos:column="30">return <expr><name pos:line="598" pos:column="37">SCI_SCROLLCARET</name></expr>;</return>
	</case><case pos:line="599" pos:column="9">case <expr><name pos:line="599" pos:column="14">EM_SETREADONLY</name></expr>: <return pos:line="599" pos:column="30">return <expr><name pos:line="599" pos:column="37">SCI_SETREADONLY</name></expr>;</return>
	</case><case pos:line="600" pos:column="9">case <expr><name pos:line="600" pos:column="14">WM_CLEAR</name></expr>: <return pos:line="600" pos:column="24">return <expr><name pos:line="600" pos:column="31">SCI_CLEAR</name></expr>;</return>
	</case><case pos:line="601" pos:column="9">case <expr><name pos:line="601" pos:column="14">WM_COPY</name></expr>: <return pos:line="601" pos:column="23">return <expr><name pos:line="601" pos:column="30">SCI_COPY</name></expr>;</return>
	</case><case pos:line="602" pos:column="9">case <expr><name pos:line="602" pos:column="14">WM_CUT</name></expr>: <return pos:line="602" pos:column="22">return <expr><name pos:line="602" pos:column="29">SCI_CUT</name></expr>;</return>
	</case><case pos:line="603" pos:column="9">case <expr><name pos:line="603" pos:column="14">WM_GETTEXT</name></expr>: <return pos:line="603" pos:column="26">return <expr><name pos:line="603" pos:column="33">SCI_GETTEXT</name></expr>;</return>
	</case><case pos:line="604" pos:column="9">case <expr><name pos:line="604" pos:column="14">WM_SETTEXT</name></expr>: <return pos:line="604" pos:column="26">return <expr><name pos:line="604" pos:column="33">SCI_SETTEXT</name></expr>;</return>
	</case><case pos:line="605" pos:column="9">case <expr><name pos:line="605" pos:column="14">WM_GETTEXTLENGTH</name></expr>: <return pos:line="605" pos:column="32">return <expr><name pos:line="605" pos:column="39">SCI_GETTEXTLENGTH</name></expr>;</return>
	</case><case pos:line="606" pos:column="9">case <expr><name pos:line="606" pos:column="14">WM_PASTE</name></expr>: <return pos:line="606" pos:column="24">return <expr><name pos:line="606" pos:column="31">SCI_PASTE</name></expr>;</return>
	</case><case pos:line="607" pos:column="9">case <expr><name pos:line="607" pos:column="14">WM_UNDO</name></expr>: <return pos:line="607" pos:column="23">return <expr><name pos:line="607" pos:column="30">SCI_UNDO</name></expr>;</return>
	</case>}</block></switch>
	<return pos:line="609" pos:column="9">return <expr><name pos:line="609" pos:column="16">iMessage</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="612" pos:column="1">static</specifier> <name pos:line="612" pos:column="8">UINT</name></type> <name pos:line="612" pos:column="13">CodePageFromCharSet</name><parameter_list pos:line="612" pos:column="32">(<param><decl><type><name pos:line="612" pos:column="33">DWORD</name></type> <name pos:line="612" pos:column="39">characterSet</name></decl></param>, <param><decl><type><name pos:line="612" pos:column="53">UINT</name></type> <name pos:line="612" pos:column="58">documentCodePage</name></decl></param>)</parameter_list> <block pos:line="612" pos:column="76">{
	<if pos:line="613" pos:column="9">if <condition pos:line="613" pos:column="12">(<expr><name pos:line="613" pos:column="13">documentCodePage</name> <op:operator pos:line="613" pos:column="30">==</op:operator> <name pos:line="613" pos:column="33">SC_CP_UTF8</name></expr>)</condition><then pos:line="613" pos:column="44"> <block pos:line="613" pos:column="45">{
		<comment type="line" pos:line="614" pos:column="17">// The system calls here are a little slow so avoid if known case.</comment>
		<return pos:line="615" pos:column="17">return <expr><name pos:line="615" pos:column="24">SC_CP_UTF8</name></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="617" pos:column="9">CHARSETINFO</name></type> <name pos:line="617" pos:column="21">ci</name> <init pos:line="617" pos:column="24">= <expr><block pos:line="617" pos:column="26">{ <expr><lit:literal type="number" pos:line="617" pos:column="28">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="617" pos:column="31">0</lit:literal></expr>, <expr><block pos:line="617" pos:column="34">{ <expr><block pos:line="617" pos:column="36">{ <expr><lit:literal type="number" pos:line="617" pos:column="38">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="617" pos:column="41">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="617" pos:column="44">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="617" pos:column="47">0</lit:literal></expr> }</block></expr>, <expr><block pos:line="617" pos:column="52">{ <expr><lit:literal type="number" pos:line="617" pos:column="54">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="617" pos:column="57">0</lit:literal></expr> }</block></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="618" pos:column="9">BOOL</name></type> <name pos:line="618" pos:column="14">bci</name> <init pos:line="618" pos:column="18">= <expr><call><name><op:operator pos:line="618" pos:column="20">::</op:operator><name pos:line="618" pos:column="22">TranslateCharsetInfo</name></name><argument_list pos:line="618" pos:column="42">(<argument><expr><op:operator pos:line="618" pos:column="43">(</op:operator><name pos:line="618" pos:column="44">DWORD</name><op:operator pos:line="618" pos:column="49">*</op:operator><op:operator pos:line="618" pos:column="50">)</op:operator><name pos:line="618" pos:column="51">characterSet</name></expr></argument>,
		<argument><expr><op:operator pos:line="619" pos:column="17">&amp;</op:operator><name pos:line="619" pos:column="18">ci</name></expr></argument>, <argument><expr><name pos:line="619" pos:column="22">TCI_SRCCHARSET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="621" pos:column="9">UINT</name></type> <name pos:line="621" pos:column="14">cp</name></decl>;</decl_stmt>
	<if pos:line="622" pos:column="9">if <condition pos:line="622" pos:column="12">(<expr><name pos:line="622" pos:column="13">bci</name></expr>)</condition><then pos:line="622" pos:column="17">
		<expr_stmt><expr><name pos:line="623" pos:column="17">cp</name> <op:operator pos:line="623" pos:column="20">=</op:operator> <name><name pos:line="623" pos:column="22">ci</name><op:operator pos:line="623" pos:column="24">.</op:operator><name pos:line="623" pos:column="25">ciACP</name></name></expr>;</expr_stmt></then>
	<else pos:line="624" pos:column="9">else
		<expr_stmt><expr><name pos:line="625" pos:column="17">cp</name> <op:operator pos:line="625" pos:column="20">=</op:operator> <name pos:line="625" pos:column="22">documentCodePage</name></expr>;</expr_stmt></else></if>

	<decl_stmt><decl><type><name pos:line="627" pos:column="9">CPINFO</name></type> <name pos:line="627" pos:column="16">cpi</name></decl>;</decl_stmt>
	<if pos:line="628" pos:column="9">if <condition pos:line="628" pos:column="12">(<expr><op:operator pos:line="628" pos:column="13">!</op:operator><call><name pos:line="628" pos:column="14">IsValidCodePage</name><argument_list pos:line="628" pos:column="29">(<argument><expr><name pos:line="628" pos:column="30">cp</name></expr></argument>)</argument_list></call> <op:operator pos:line="628" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="628" pos:column="37">!</op:operator><call><name pos:line="628" pos:column="38">GetCPInfo</name><argument_list pos:line="628" pos:column="47">(<argument><expr><name pos:line="628" pos:column="48">cp</name></expr></argument>, <argument><expr><op:operator pos:line="628" pos:column="52">&amp;</op:operator><name pos:line="628" pos:column="53">cpi</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="628" pos:column="58">
		<expr_stmt><expr><name pos:line="629" pos:column="17">cp</name> <op:operator pos:line="629" pos:column="20">=</op:operator> <name pos:line="629" pos:column="22">CP_ACP</name></expr>;</expr_stmt></then></if>

	<return pos:line="631" pos:column="9">return <expr><name pos:line="631" pos:column="16">cp</name></expr>;</return>
}</block></function>

<function><type><name pos:line="634" pos:column="1">UINT</name></type> <name><name pos:line="634" pos:column="6">ScintillaWin</name><op:operator pos:line="634" pos:column="18">::</op:operator><name pos:line="634" pos:column="20">CodePageOfDocument</name></name><parameter_list pos:line="634" pos:column="38">()</parameter_list> <block pos:line="634" pos:column="41">{
	<return pos:line="635" pos:column="9">return <expr><call><name pos:line="635" pos:column="16">CodePageFromCharSet</name><argument_list pos:line="635" pos:column="35">(<argument><expr><name><name pos:line="635" pos:column="36">vs</name><op:operator pos:line="635" pos:column="38">.</op:operator><name pos:line="635" pos:column="39">styles</name><index pos:line="635" pos:column="45">[<expr><name pos:line="635" pos:column="46">STYLE_DEFAULT</name></expr>]</index></name><op:operator pos:line="635" pos:column="60">.</op:operator><name pos:line="635" pos:column="61">characterSet</name></expr></argument>, <argument><expr><name><name pos:line="635" pos:column="75">pdoc</name><op:operator pos:line="635" pos:column="79">-&gt;</op:operator><name pos:line="635" pos:column="81">dbcsCodePage</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="638" pos:column="1">sptr_t</name></type> <name><name pos:line="638" pos:column="8">ScintillaWin</name><op:operator pos:line="638" pos:column="20">::</op:operator><name pos:line="638" pos:column="22">WndProc</name></name><parameter_list pos:line="638" pos:column="29">(<param><decl><type><name pos:line="638" pos:column="30">unsigned</name> <name pos:line="638" pos:column="39">int</name></type> <name pos:line="638" pos:column="43">iMessage</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="53">uptr_t</name></type> <name pos:line="638" pos:column="60">wParam</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="68">sptr_t</name></type> <name pos:line="638" pos:column="75">lParam</name></decl></param>)</parameter_list> <block pos:line="638" pos:column="83">{
	<try pos:line="639" pos:column="9">try <block pos:line="639" pos:column="13">{
		<comment type="line" pos:line="640" pos:column="17">//Platform::DebugPrintf("S M:%x WP:%x L:%x\n", iMessage, wParam, lParam);</comment>
		<expr_stmt><expr><name pos:line="641" pos:column="17">iMessage</name> <op:operator pos:line="641" pos:column="26">=</op:operator> <call><name pos:line="641" pos:column="28">SciMessageFromEM</name><argument_list pos:line="641" pos:column="44">(<argument><expr><name pos:line="641" pos:column="45">iMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch pos:line="642" pos:column="17">switch <condition pos:line="642" pos:column="24">(<expr><name pos:line="642" pos:column="25">iMessage</name></expr>)</condition> <block pos:line="642" pos:column="35">{

		<case pos:line="644" pos:column="17">case <expr><name pos:line="644" pos:column="22">WM_CREATE</name></expr>:
			<expr_stmt><expr><name pos:line="645" pos:column="25">ctrlID</name> <op:operator pos:line="645" pos:column="32">=</op:operator> <call><name><op:operator pos:line="645" pos:column="34">::</op:operator><name pos:line="645" pos:column="36">GetDlgCtrlID</name></name><argument_list pos:line="645" pos:column="48">(<argument><expr><call><name><name pos:line="645" pos:column="49">reinterpret_cast</name><argument_list pos:line="645" pos:column="65">&lt;<argument><expr><name pos:line="645" pos:column="66">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="645" pos:column="71">(<argument><expr><call><name><name pos:line="645" pos:column="72">wMain</name><op:operator pos:line="645" pos:column="77">.</op:operator><name pos:line="645" pos:column="78">GetID</name></name><argument_list pos:line="645" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="646" pos:column="25">// Get Intellimouse scroll line parameters</comment>
			<expr_stmt><expr><call><name pos:line="647" pos:column="25">GetIntelliMouseParameters</name><argument_list pos:line="647" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="648" pos:column="25">::</op:operator><name pos:line="648" pos:column="27">RegisterDragDrop</name></name><argument_list pos:line="648" pos:column="43">(<argument><expr><call><name pos:line="648" pos:column="44">MainHWND</name><argument_list pos:line="648" pos:column="52">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="648" pos:column="56">reinterpret_cast</name><argument_list pos:line="648" pos:column="72">&lt;<argument><expr><name pos:line="648" pos:column="73">IDropTarget</name> <op:operator pos:line="648" pos:column="85">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="648" pos:column="87">(<argument><expr><op:operator pos:line="648" pos:column="88">&amp;</op:operator><name pos:line="648" pos:column="89">dt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="649" pos:column="25">break;</break>

		</case><case pos:line="651" pos:column="17">case <expr><name pos:line="651" pos:column="22">WM_COMMAND</name></expr>:
			<expr_stmt><expr><call><name pos:line="652" pos:column="25">Command</name><argument_list pos:line="652" pos:column="32">(<argument><expr><call><name pos:line="652" pos:column="33">LoWord</name><argument_list pos:line="652" pos:column="39">(<argument><expr><name pos:line="652" pos:column="40">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="653" pos:column="25">break;</break>

		</case><case pos:line="655" pos:column="17">case <expr><name pos:line="655" pos:column="22">WM_PAINT</name></expr>:
			<return pos:line="656" pos:column="25">return <expr><call><name pos:line="656" pos:column="32">WndPaint</name><argument_list pos:line="656" pos:column="40">(<argument><expr><name pos:line="656" pos:column="41">wParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="658" pos:column="17">case <expr><name pos:line="658" pos:column="22">WM_PRINTCLIENT</name></expr>: <block pos:line="658" pos:column="38">{
				<decl_stmt><decl><type><name pos:line="659" pos:column="33">HDC</name></type> <name pos:line="659" pos:column="37">hdc</name> <init pos:line="659" pos:column="41">= <expr><call><name><name pos:line="659" pos:column="43">reinterpret_cast</name><argument_list pos:line="659" pos:column="59">&lt;<argument><expr><name pos:line="659" pos:column="60">HDC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="659" pos:column="64">(<argument><expr><name pos:line="659" pos:column="65">wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="660" pos:column="33">if <condition pos:line="660" pos:column="36">(<expr><op:operator pos:line="660" pos:column="37">!</op:operator><call><name pos:line="660" pos:column="38">IsCompatibleDC</name><argument_list pos:line="660" pos:column="52">(<argument><expr><name pos:line="660" pos:column="53">hdc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="660" pos:column="58"> <block pos:line="660" pos:column="59">{
					<return pos:line="661" pos:column="41">return <expr><call><name><op:operator pos:line="661" pos:column="48">::</op:operator><name pos:line="661" pos:column="50">DefWindowProc</name></name><argument_list pos:line="661" pos:column="63">(<argument><expr><call><name pos:line="661" pos:column="64">MainHWND</name><argument_list pos:line="661" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="661" pos:column="76">iMessage</name></expr></argument>, <argument><expr><name pos:line="661" pos:column="86">wParam</name></expr></argument>, <argument><expr><name pos:line="661" pos:column="94">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="663" pos:column="33">FullPaintDC</name><argument_list pos:line="663" pos:column="44">(<argument><expr><name pos:line="663" pos:column="45">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break pos:line="665" pos:column="25">break;</break>

		</case><case pos:line="667" pos:column="17">case <expr><name pos:line="667" pos:column="22">WM_VSCROLL</name></expr>:
			<expr_stmt><expr><call><name pos:line="668" pos:column="25">ScrollMessage</name><argument_list pos:line="668" pos:column="38">(<argument><expr><name pos:line="668" pos:column="39">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="669" pos:column="25">break;</break>

		</case><case pos:line="671" pos:column="17">case <expr><name pos:line="671" pos:column="22">WM_HSCROLL</name></expr>:
			<expr_stmt><expr><call><name pos:line="672" pos:column="25">HorizontalScrollMessage</name><argument_list pos:line="672" pos:column="48">(<argument><expr><name pos:line="672" pos:column="49">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="673" pos:column="25">break;</break>

		</case><case pos:line="675" pos:column="17">case <expr><name pos:line="675" pos:column="22">WM_SIZE</name></expr>: <block pos:line="675" pos:column="31">{
				<comment type="line" pos:line="676" pos:column="33">//Platform::DebugPrintf("Scintilla WM_SIZE %d %d\n", LoWord(lParam), HiWord(lParam));</comment>
				<expr_stmt><expr><call><name pos:line="677" pos:column="33">ChangeSize</name><argument_list pos:line="677" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break pos:line="679" pos:column="25">break;</break>

		</case><case pos:line="681" pos:column="17">case <expr><name pos:line="681" pos:column="22">WM_MOUSEWHEEL</name></expr>:
			<comment type="line" pos:line="682" pos:column="25">// Don't handle datazoom.</comment>
			<comment type="line" pos:line="683" pos:column="25">// (A good idea for datazoom would be to "fold" or "unfold" details.</comment>
			<comment type="line" pos:line="684" pos:column="25">// i.e. if datazoomed out only class structures are visible, when datazooming in the control</comment>
			<comment type="line" pos:line="685" pos:column="25">// structures appear, then eventually the individual statements...)</comment>
			<if pos:line="686" pos:column="25">if <condition pos:line="686" pos:column="28">(<expr><name pos:line="686" pos:column="29">wParam</name> <op:operator pos:line="686" pos:column="36">&amp;</op:operator> <name pos:line="686" pos:column="38">MK_SHIFT</name></expr>)</condition><then pos:line="686" pos:column="47"> <block pos:line="686" pos:column="48">{
				<return pos:line="687" pos:column="33">return <expr><call><name><op:operator pos:line="687" pos:column="40">::</op:operator><name pos:line="687" pos:column="42">DefWindowProc</name></name><argument_list pos:line="687" pos:column="55">(<argument><expr><call><name pos:line="687" pos:column="56">MainHWND</name><argument_list pos:line="687" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="687" pos:column="68">iMessage</name></expr></argument>, <argument><expr><name pos:line="687" pos:column="78">wParam</name></expr></argument>, <argument><expr><name pos:line="687" pos:column="86">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>

			<comment type="line" pos:line="690" pos:column="25">// Either SCROLL or ZOOM. We handle the wheel steppings calculation</comment>
			<expr_stmt><expr><name pos:line="691" pos:column="25">wheelDelta</name> <op:operator pos:line="691" pos:column="36">-=</op:operator> <call><name><name pos:line="691" pos:column="39">static_cast</name><argument_list pos:line="691" pos:column="50">&lt;<argument><expr><name pos:line="691" pos:column="51">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="691" pos:column="57">(<argument><expr><call><name pos:line="691" pos:column="58">HiWord</name><argument_list pos:line="691" pos:column="64">(<argument><expr><name pos:line="691" pos:column="65">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="692" pos:column="25">if <condition pos:line="692" pos:column="28">(<expr><call><name pos:line="692" pos:column="29">abs</name><argument_list pos:line="692" pos:column="32">(<argument><expr><name pos:line="692" pos:column="33">wheelDelta</name></expr></argument>)</argument_list></call> <op:operator pos:line="692" pos:column="45">&gt;=</op:operator> <name pos:line="692" pos:column="48">WHEEL_DELTA</name> <op:operator pos:line="692" pos:column="60">&amp;&amp;</op:operator> <name pos:line="692" pos:column="63">linesPerScroll</name> <op:operator pos:line="692" pos:column="78">&gt;</op:operator> <lit:literal type="number" pos:line="692" pos:column="80">0</lit:literal></expr>)</condition><then pos:line="692" pos:column="82"> <block pos:line="692" pos:column="83">{
				<decl_stmt><decl><type><name pos:line="693" pos:column="33">int</name></type> <name pos:line="693" pos:column="37">linesToScroll</name> <init pos:line="693" pos:column="51">= <expr><name pos:line="693" pos:column="53">linesPerScroll</name></expr></init></decl>;</decl_stmt>
				<if pos:line="694" pos:column="33">if <condition pos:line="694" pos:column="36">(<expr><name pos:line="694" pos:column="37">linesPerScroll</name> <op:operator pos:line="694" pos:column="52">==</op:operator> <name pos:line="694" pos:column="55">WHEEL_PAGESCROLL</name></expr>)</condition><then pos:line="694" pos:column="72">
					<expr_stmt><expr><name pos:line="695" pos:column="41">linesToScroll</name> <op:operator pos:line="695" pos:column="55">=</op:operator> <call><name pos:line="695" pos:column="57">LinesOnScreen</name><argument_list pos:line="695" pos:column="70">()</argument_list></call> <op:operator pos:line="695" pos:column="73">-</op:operator> <lit:literal type="number" pos:line="695" pos:column="75">1</lit:literal></expr>;</expr_stmt></then></if>
				<if pos:line="696" pos:column="33">if <condition pos:line="696" pos:column="36">(<expr><name pos:line="696" pos:column="37">linesToScroll</name> <op:operator pos:line="696" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="696" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="696" pos:column="56"> <block pos:line="696" pos:column="57">{
					<expr_stmt><expr><name pos:line="697" pos:column="41">linesToScroll</name> <op:operator pos:line="697" pos:column="55">=</op:operator> <lit:literal type="number" pos:line="697" pos:column="57">1</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="699" pos:column="33">linesToScroll</name> <op:operator pos:line="699" pos:column="47">*=</op:operator> <op:operator pos:line="699" pos:column="50">(</op:operator><name pos:line="699" pos:column="51">wheelDelta</name> <op:operator pos:line="699" pos:column="62">/</op:operator> <name pos:line="699" pos:column="64">WHEEL_DELTA</name><op:operator pos:line="699" pos:column="75">)</op:operator></expr>;</expr_stmt>
				<if pos:line="700" pos:column="33">if <condition pos:line="700" pos:column="36">(<expr><name pos:line="700" pos:column="37">wheelDelta</name> <op:operator pos:line="700" pos:column="48">&gt;=</op:operator> <lit:literal type="number" pos:line="700" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="700" pos:column="53">
					<expr_stmt><expr><name pos:line="701" pos:column="41">wheelDelta</name> <op:operator pos:line="701" pos:column="52">=</op:operator> <name pos:line="701" pos:column="54">wheelDelta</name> <op:operator pos:line="701" pos:column="65">%</op:operator> <name pos:line="701" pos:column="67">WHEEL_DELTA</name></expr>;</expr_stmt></then>
				<else pos:line="702" pos:column="33">else
					<expr_stmt><expr><name pos:line="703" pos:column="41">wheelDelta</name> <op:operator pos:line="703" pos:column="52">=</op:operator> <op:operator pos:line="703" pos:column="54">-</op:operator> <op:operator pos:line="703" pos:column="56">(</op:operator><op:operator pos:line="703" pos:column="57">-</op:operator><name pos:line="703" pos:column="58">wheelDelta</name> <op:operator pos:line="703" pos:column="69">%</op:operator> <name pos:line="703" pos:column="71">WHEEL_DELTA</name><op:operator pos:line="703" pos:column="82">)</op:operator></expr>;</expr_stmt></else></if>

				<if pos:line="705" pos:column="33">if <condition pos:line="705" pos:column="36">(<expr><name pos:line="705" pos:column="37">wParam</name> <op:operator pos:line="705" pos:column="44">&amp;</op:operator> <name pos:line="705" pos:column="46">MK_CONTROL</name></expr>)</condition><then pos:line="705" pos:column="57"> <block pos:line="705" pos:column="58">{
					<comment type="line" pos:line="706" pos:column="41">// Zoom! We play with the font sizes in the styles.</comment>
					<comment type="line" pos:line="707" pos:column="41">// Number of steps/line is ignored, we just care if sizing up or down</comment>
					<if pos:line="708" pos:column="41">if <condition pos:line="708" pos:column="44">(<expr><name pos:line="708" pos:column="45">linesToScroll</name> <op:operator pos:line="708" pos:column="59">&lt;</op:operator> <lit:literal type="number" pos:line="708" pos:column="61">0</lit:literal></expr>)</condition><then pos:line="708" pos:column="63"> <block pos:line="708" pos:column="64">{
						<expr_stmt><expr><call><name pos:line="709" pos:column="49">KeyCommand</name><argument_list pos:line="709" pos:column="59">(<argument><expr><name pos:line="709" pos:column="60">SCI_ZOOMIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="710" pos:column="43">else <block pos:line="710" pos:column="48">{
						<expr_stmt><expr><call><name pos:line="711" pos:column="49">KeyCommand</name><argument_list pos:line="711" pos:column="59">(<argument><expr><name pos:line="711" pos:column="60">SCI_ZOOMOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="713" pos:column="35">else <block pos:line="713" pos:column="40">{
					<comment type="line" pos:line="714" pos:column="41">// Scroll</comment>
					<expr_stmt><expr><call><name pos:line="715" pos:column="41">ScrollTo</name><argument_list pos:line="715" pos:column="49">(<argument><expr><name pos:line="715" pos:column="50">topLine</name> <op:operator pos:line="715" pos:column="58">+</op:operator> <name pos:line="715" pos:column="60">linesToScroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
			<return pos:line="718" pos:column="25">return <expr><lit:literal type="number" pos:line="718" pos:column="32">0</lit:literal></expr>;</return>

		</case><case pos:line="720" pos:column="17">case <expr><name pos:line="720" pos:column="22">WM_TIMER</name></expr>:
			<if pos:line="721" pos:column="25">if <condition pos:line="721" pos:column="28">(<expr><name pos:line="721" pos:column="29">wParam</name> <op:operator pos:line="721" pos:column="36">==</op:operator> <name pos:line="721" pos:column="39">standardTimerID</name> <op:operator pos:line="721" pos:column="55">&amp;&amp;</op:operator> <name><name pos:line="721" pos:column="58">timer</name><op:operator pos:line="721" pos:column="63">.</op:operator><name pos:line="721" pos:column="64">ticking</name></name></expr>)</condition><then pos:line="721" pos:column="72"> <block pos:line="721" pos:column="73">{
				<expr_stmt><expr><call><name pos:line="722" pos:column="33">Tick</name><argument_list pos:line="722" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="723" pos:column="27">else <if pos:line="723" pos:column="32">if <condition pos:line="723" pos:column="35">(<expr><name pos:line="723" pos:column="36">wParam</name> <op:operator pos:line="723" pos:column="43">==</op:operator> <name pos:line="723" pos:column="46">idleTimerID</name> <op:operator pos:line="723" pos:column="58">&amp;&amp;</op:operator> <name><name pos:line="723" pos:column="61">idler</name><op:operator pos:line="723" pos:column="66">.</op:operator><name pos:line="723" pos:column="67">state</name></name></expr>)</condition><then pos:line="723" pos:column="73"> <block pos:line="723" pos:column="74">{
				<expr_stmt><expr><call><name pos:line="724" pos:column="33">SendMessage</name><argument_list pos:line="724" pos:column="44">(<argument><expr><call><name pos:line="724" pos:column="45">MainHWND</name><argument_list pos:line="724" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="724" pos:column="57">SC_WIN_IDLE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="724" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="724" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="725" pos:column="27">else <block pos:line="725" pos:column="32">{
				<return pos:line="726" pos:column="33">return <expr><lit:literal type="number" pos:line="726" pos:column="40">1</lit:literal></expr>;</return>
			}</block></else></if></else></if>
			<break pos:line="728" pos:column="25">break;</break>

		</case><case pos:line="730" pos:column="17">case <expr><name pos:line="730" pos:column="22">SC_WIN_IDLE</name></expr>:
			<comment type="line" pos:line="731" pos:column="25">// wParam=dwTickCountInitial, or 0 to initialize.  lParam=bSkipUserInputTest</comment>
			<if pos:line="732" pos:column="25">if <condition pos:line="732" pos:column="28">(<expr><name><name pos:line="732" pos:column="29">idler</name><op:operator pos:line="732" pos:column="34">.</op:operator><name pos:line="732" pos:column="35">state</name></name></expr>)</condition><then pos:line="732" pos:column="41"> <block pos:line="732" pos:column="42">{
				<if pos:line="733" pos:column="33">if <condition pos:line="733" pos:column="36">(<expr><name pos:line="733" pos:column="37">lParam</name> <op:operator pos:line="733" pos:column="44">||</op:operator> <op:operator pos:line="733" pos:column="47">(</op:operator><name pos:line="733" pos:column="48">WAIT_TIMEOUT</name> <op:operator pos:line="733" pos:column="61">==</op:operator> <call><name pos:line="733" pos:column="64">MsgWaitForMultipleObjects</name><argument_list pos:line="733" pos:column="89">(<argument><expr><lit:literal type="number" pos:line="733" pos:column="90">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="733" pos:column="93">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="733" pos:column="96">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="733" pos:column="99">0</lit:literal></expr></argument>, <argument><expr><name pos:line="733" pos:column="102">QS_INPUT</name><op:operator pos:line="733" pos:column="110">|</op:operator><name pos:line="733" pos:column="111">QS_HOTKEY</name></expr></argument>)</argument_list></call><op:operator pos:line="733" pos:column="121">)</op:operator></expr>)</condition><then pos:line="733" pos:column="123"> <block pos:line="733" pos:column="124">{
					<if pos:line="734" pos:column="41">if <condition pos:line="734" pos:column="44">(<expr><call><name pos:line="734" pos:column="45">Idle</name><argument_list pos:line="734" pos:column="49">()</argument_list></call></expr>)</condition><then pos:line="734" pos:column="52"> <block pos:line="734" pos:column="53">{
						<comment type="line" pos:line="735" pos:column="49">// User input was given priority above, but all events do get a turn.  Other</comment>
						<comment type="line" pos:line="736" pos:column="49">// messages, notifications, etc. will get interleaved with the idle messages.</comment>

						<comment type="line" pos:line="738" pos:column="49">// However, some things like WM_PAINT are a lower priority, and will not fire</comment>
						<comment type="line" pos:line="739" pos:column="49">// when there's a message posted.  So, several times a second, we stop and let</comment>
						<comment type="line" pos:line="740" pos:column="49">// the low priority events have a turn (after which the timer will fire again).</comment>

						<decl_stmt><decl><type><name pos:line="742" pos:column="49">DWORD</name></type> <name pos:line="742" pos:column="55">dwCurrent</name> <init pos:line="742" pos:column="65">= <expr><call><name pos:line="742" pos:column="67">GetTickCount</name><argument_list pos:line="742" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="743" pos:column="49">DWORD</name></type> <name pos:line="743" pos:column="55">dwStart</name> <init pos:line="743" pos:column="63">= <expr><name pos:line="743" pos:column="65">wParam</name> <op:operator pos:line="743" pos:column="72">?</op:operator> <name pos:line="743" pos:column="74">wParam</name> <op:operator pos:line="743" pos:column="81">:</op:operator> <name pos:line="743" pos:column="83">dwCurrent</name></expr></init></decl>;</decl_stmt>

						<if pos:line="745" pos:column="49">if <condition pos:line="745" pos:column="52">(<expr><name pos:line="745" pos:column="53">dwCurrent</name> <op:operator pos:line="745" pos:column="63">&gt;=</op:operator> <name pos:line="745" pos:column="66">dwStart</name> <op:operator pos:line="745" pos:column="74">&amp;&amp;</op:operator> <name pos:line="745" pos:column="77">dwCurrent</name> <op:operator pos:line="745" pos:column="87">&gt;</op:operator> <lit:literal type="number" pos:line="745" pos:column="89">200</lit:literal> <op:operator pos:line="745" pos:column="93">&amp;&amp;</op:operator> <name pos:line="745" pos:column="96">dwCurrent</name> <op:operator pos:line="745" pos:column="106">-</op:operator> <lit:literal type="number" pos:line="745" pos:column="108">200</lit:literal> <op:operator pos:line="745" pos:column="112">&lt;</op:operator> <name pos:line="745" pos:column="114">dwStart</name></expr>)</condition><then pos:line="745" pos:column="122">
							<expr_stmt><expr><call><name pos:line="746" pos:column="57">PostMessage</name><argument_list pos:line="746" pos:column="68">(<argument><expr><call><name pos:line="746" pos:column="69">MainHWND</name><argument_list pos:line="746" pos:column="77">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="746" pos:column="81">SC_WIN_IDLE</name></expr></argument>, <argument><expr><name pos:line="746" pos:column="94">dwStart</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="746" pos:column="103">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					}</block></then> <else pos:line="747" pos:column="43">else <block pos:line="747" pos:column="48">{
						<expr_stmt><expr><call><name pos:line="748" pos:column="49">SetIdle</name><argument_list pos:line="748" pos:column="56">(<argument><expr><lit:literal type="boolean" pos:line="748" pos:column="57">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
			}</block></then></if>
			<break pos:line="752" pos:column="25">break;</break>

		</case><case pos:line="754" pos:column="17">case <expr><name pos:line="754" pos:column="22">WM_GETMINMAXINFO</name></expr>:
			<return pos:line="755" pos:column="25">return <expr><call><name><op:operator pos:line="755" pos:column="32">::</op:operator><name pos:line="755" pos:column="34">DefWindowProc</name></name><argument_list pos:line="755" pos:column="47">(<argument><expr><call><name pos:line="755" pos:column="48">MainHWND</name><argument_list pos:line="755" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="755" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="755" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="755" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="757" pos:column="17">case <expr><name pos:line="757" pos:column="22">WM_LBUTTONDOWN</name></expr>: <block pos:line="757" pos:column="38">{
<cpp:ifndef pos:line="758" pos:column="1">#<cpp:directive pos:line="758" pos:column="2">ifndef</cpp:directive> <name pos:line="758" pos:column="9">__DMC__</name></cpp:ifndef>
			<comment type="line" pos:line="759" pos:column="25">// Digital Mars compiler does not include Imm library</comment>
			<comment type="line" pos:line="760" pos:column="25">// For IME, set the composition string as the result string.</comment>
			<decl_stmt><decl><type><name pos:line="761" pos:column="25">HIMC</name></type> <name pos:line="761" pos:column="30">hIMC</name> <init pos:line="761" pos:column="35">= <expr><call><name><op:operator pos:line="761" pos:column="37">::</op:operator><name pos:line="761" pos:column="39">ImmGetContext</name></name><argument_list pos:line="761" pos:column="52">(<argument><expr><call><name pos:line="761" pos:column="53">MainHWND</name><argument_list pos:line="761" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="762" pos:column="25">::</op:operator><name pos:line="762" pos:column="27">ImmNotifyIME</name></name><argument_list pos:line="762" pos:column="39">(<argument><expr><name pos:line="762" pos:column="40">hIMC</name></expr></argument>, <argument><expr><name pos:line="762" pos:column="46">NI_COMPOSITIONSTR</name></expr></argument>, <argument><expr><name pos:line="762" pos:column="65">CPS_COMPLETE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="762" pos:column="79">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="763" pos:column="25">::</op:operator><name pos:line="763" pos:column="27">ImmReleaseContext</name></name><argument_list pos:line="763" pos:column="44">(<argument><expr><call><name pos:line="763" pos:column="45">MainHWND</name><argument_list pos:line="763" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="763" pos:column="57">hIMC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="764" pos:column="1">#<cpp:directive pos:line="764" pos:column="2">endif</cpp:directive></cpp:endif>
			<comment type="line" pos:line="765" pos:column="25">//</comment>
			<comment type="line" pos:line="766" pos:column="25">//Platform::DebugPrintf("Buttdown %d %x %x %x %x %x\n",iMessage, wParam, lParam,</comment>
			<comment type="line" pos:line="767" pos:column="25">//	Platform::IsKeyDown(VK_SHIFT),</comment>
			<comment type="line" pos:line="768" pos:column="25">//	Platform::IsKeyDown(VK_CONTROL),</comment>
			<comment type="line" pos:line="769" pos:column="25">//	Platform::IsKeyDown(VK_MENU));</comment>
			<expr_stmt><expr><call><name><op:operator pos:line="770" pos:column="25">::</op:operator><name pos:line="770" pos:column="27">SetFocus</name></name><argument_list pos:line="770" pos:column="35">(<argument><expr><call><name pos:line="770" pos:column="36">MainHWND</name><argument_list pos:line="770" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="771" pos:column="25">ButtonDown</name><argument_list pos:line="771" pos:column="35">(<argument><expr><call><name><name pos:line="771" pos:column="36">Point</name><op:operator pos:line="771" pos:column="41">::</op:operator><name pos:line="771" pos:column="43">FromLong</name></name><argument_list pos:line="771" pos:column="51">(<argument><expr><name pos:line="771" pos:column="52">lParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><op:operator pos:line="771" pos:column="61">::</op:operator><name pos:line="771" pos:column="63">GetMessageTime</name></name><argument_list pos:line="771" pos:column="77">()</argument_list></call></expr></argument>,
				<argument><expr><op:operator pos:line="772" pos:column="33">(</op:operator><name pos:line="772" pos:column="34">wParam</name> <op:operator pos:line="772" pos:column="41">&amp;</op:operator> <name pos:line="772" pos:column="43">MK_SHIFT</name><op:operator pos:line="772" pos:column="51">)</op:operator> <op:operator pos:line="772" pos:column="53">!=</op:operator> <lit:literal type="number" pos:line="772" pos:column="56">0</lit:literal></expr></argument>,
				<argument><expr><op:operator pos:line="773" pos:column="33">(</op:operator><name pos:line="773" pos:column="34">wParam</name> <op:operator pos:line="773" pos:column="41">&amp;</op:operator> <name pos:line="773" pos:column="43">MK_CONTROL</name><op:operator pos:line="773" pos:column="53">)</op:operator> <op:operator pos:line="773" pos:column="55">!=</op:operator> <lit:literal type="number" pos:line="773" pos:column="58">0</lit:literal></expr></argument>,
				<argument><expr><call><name><name pos:line="774" pos:column="33">Platform</name><op:operator pos:line="774" pos:column="41">::</op:operator><name pos:line="774" pos:column="43">IsKeyDown</name></name><argument_list pos:line="774" pos:column="52">(<argument><expr><name pos:line="774" pos:column="53">VK_MENU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break pos:line="776" pos:column="25">break;</break>
			
		</case><case pos:line="778" pos:column="17">case <expr><name pos:line="778" pos:column="22">WM_MBUTTONDOWN</name></expr>:
            <expr_stmt><expr><call><name><op:operator pos:line="779" pos:column="13">::</op:operator><name pos:line="779" pos:column="15">SetFocus</name></name><argument_list pos:line="779" pos:column="23">(<argument><expr><call><name pos:line="779" pos:column="24">MainHWND</name><argument_list pos:line="779" pos:column="32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:line="780" pos:column="13">break;</break>
			
		</case><case pos:line="782" pos:column="17">case <expr><name pos:line="782" pos:column="22">WM_MOUSEMOVE</name></expr>:
			<expr_stmt><expr><call><name pos:line="783" pos:column="25">SetTrackMouseLeaveEvent</name><argument_list pos:line="783" pos:column="48">(<argument><expr><lit:literal type="boolean" pos:line="783" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="784" pos:column="25">ButtonMove</name><argument_list pos:line="784" pos:column="35">(<argument><expr><call><name><name pos:line="784" pos:column="36">Point</name><op:operator pos:line="784" pos:column="41">::</op:operator><name pos:line="784" pos:column="43">FromLong</name></name><argument_list pos:line="784" pos:column="51">(<argument><expr><name pos:line="784" pos:column="52">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="785" pos:column="25">break;</break>

		</case><case pos:line="787" pos:column="17">case <expr><name pos:line="787" pos:column="22">WM_MOUSELEAVE</name></expr>:
			<expr_stmt><expr><call><name pos:line="788" pos:column="25">SetTrackMouseLeaveEvent</name><argument_list pos:line="788" pos:column="48">(<argument><expr><lit:literal type="boolean" pos:line="788" pos:column="49">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="789" pos:column="25">MouseLeave</name><argument_list pos:line="789" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="790" pos:column="25">return <expr><call><name><op:operator pos:line="790" pos:column="32">::</op:operator><name pos:line="790" pos:column="34">DefWindowProc</name></name><argument_list pos:line="790" pos:column="47">(<argument><expr><call><name pos:line="790" pos:column="48">MainHWND</name><argument_list pos:line="790" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="790" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="790" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="790" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="792" pos:column="17">case <expr><name pos:line="792" pos:column="22">WM_LBUTTONUP</name></expr>:
			<expr_stmt><expr><call><name pos:line="793" pos:column="25">ButtonUp</name><argument_list pos:line="793" pos:column="33">(<argument><expr><call><name><name pos:line="793" pos:column="34">Point</name><op:operator pos:line="793" pos:column="39">::</op:operator><name pos:line="793" pos:column="41">FromLong</name></name><argument_list pos:line="793" pos:column="49">(<argument><expr><name pos:line="793" pos:column="50">lParam</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name><op:operator pos:line="794" pos:column="33">::</op:operator><name pos:line="794" pos:column="35">GetMessageTime</name></name><argument_list pos:line="794" pos:column="49">()</argument_list></call></expr></argument>,
				<argument><expr><op:operator pos:line="795" pos:column="33">(</op:operator><name pos:line="795" pos:column="34">wParam</name> <op:operator pos:line="795" pos:column="41">&amp;</op:operator> <name pos:line="795" pos:column="43">MK_CONTROL</name><op:operator pos:line="795" pos:column="53">)</op:operator> <op:operator pos:line="795" pos:column="55">!=</op:operator> <lit:literal type="number" pos:line="795" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="796" pos:column="25">break;</break>

		</case><case pos:line="798" pos:column="17">case <expr><name pos:line="798" pos:column="22">WM_RBUTTONDOWN</name></expr>:
			<expr_stmt><expr><call><name><op:operator pos:line="799" pos:column="25">::</op:operator><name pos:line="799" pos:column="27">SetFocus</name></name><argument_list pos:line="799" pos:column="35">(<argument><expr><call><name pos:line="799" pos:column="36">MainHWND</name><argument_list pos:line="799" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="800" pos:column="25">if <condition pos:line="800" pos:column="28">(<expr><op:operator pos:line="800" pos:column="29">!</op:operator><call><name pos:line="800" pos:column="30">PointInSelection</name><argument_list pos:line="800" pos:column="46">(<argument><expr><call><name><name pos:line="800" pos:column="47">Point</name><op:operator pos:line="800" pos:column="52">::</op:operator><name pos:line="800" pos:column="54">FromLong</name></name><argument_list pos:line="800" pos:column="62">(<argument><expr><name pos:line="800" pos:column="63">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="800" pos:column="72"> <block pos:line="800" pos:column="73">{
				<expr_stmt><expr><call><name pos:line="801" pos:column="33">CancelModes</name><argument_list pos:line="801" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="802" pos:column="33">SetEmptySelection</name><argument_list pos:line="802" pos:column="50">(<argument><expr><call><name pos:line="802" pos:column="51">PositionFromLocation</name><argument_list pos:line="802" pos:column="71">(<argument><expr><call><name><name pos:line="802" pos:column="72">Point</name><op:operator pos:line="802" pos:column="77">::</op:operator><name pos:line="802" pos:column="79">FromLong</name></name><argument_list pos:line="802" pos:column="87">(<argument><expr><name pos:line="802" pos:column="88">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="804" pos:column="25">break;</break>

		</case><case pos:line="806" pos:column="17">case <expr><name pos:line="806" pos:column="22">WM_SETCURSOR</name></expr>:
			<if pos:line="807" pos:column="25">if <condition pos:line="807" pos:column="28">(<expr><call><name pos:line="807" pos:column="29">LoWord</name><argument_list pos:line="807" pos:column="35">(<argument><expr><name pos:line="807" pos:column="36">lParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="807" pos:column="44">==</op:operator> <name pos:line="807" pos:column="47">HTCLIENT</name></expr>)</condition><then pos:line="807" pos:column="56"> <block pos:line="807" pos:column="57">{
				<if pos:line="808" pos:column="33">if <condition pos:line="808" pos:column="36">(<expr><name pos:line="808" pos:column="37">inDragDrop</name> <op:operator pos:line="808" pos:column="48">==</op:operator> <name pos:line="808" pos:column="51">ddDragging</name></expr>)</condition><then pos:line="808" pos:column="62"> <block pos:line="808" pos:column="63">{
					<expr_stmt><expr><call><name pos:line="809" pos:column="41">DisplayCursor</name><argument_list pos:line="809" pos:column="54">(<argument><expr><name><name pos:line="809" pos:column="55">Window</name><op:operator pos:line="809" pos:column="61">::</op:operator><name pos:line="809" pos:column="63">cursorUp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="810" pos:column="35">else <block pos:line="810" pos:column="40">{
					<comment type="line" pos:line="811" pos:column="41">// Display regular (drag) cursor over selection</comment>
					<decl_stmt><decl><type><name pos:line="812" pos:column="41">POINT</name></type> <name pos:line="812" pos:column="47">pt</name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="813" pos:column="41">::</op:operator><name pos:line="813" pos:column="43">GetCursorPos</name></name><argument_list pos:line="813" pos:column="55">(<argument><expr><op:operator pos:line="813" pos:column="56">&amp;</op:operator><name pos:line="813" pos:column="57">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="814" pos:column="41">::</op:operator><name pos:line="814" pos:column="43">ScreenToClient</name></name><argument_list pos:line="814" pos:column="57">(<argument><expr><call><name pos:line="814" pos:column="58">MainHWND</name><argument_list pos:line="814" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="814" pos:column="70">&amp;</op:operator><name pos:line="814" pos:column="71">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="815" pos:column="41">if <condition pos:line="815" pos:column="44">(<expr><call><name pos:line="815" pos:column="45">PointInSelMargin</name><argument_list pos:line="815" pos:column="61">(<argument><expr><call><name pos:line="815" pos:column="62">Point</name><argument_list pos:line="815" pos:column="67">(<argument><expr><name><name pos:line="815" pos:column="68">pt</name><op:operator pos:line="815" pos:column="70">.</op:operator><name pos:line="815" pos:column="71">x</name></name></expr></argument>, <argument><expr><name><name pos:line="815" pos:column="74">pt</name><op:operator pos:line="815" pos:column="76">.</op:operator><name pos:line="815" pos:column="77">y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="815" pos:column="81"> <block pos:line="815" pos:column="82">{
						<expr_stmt><expr><call><name pos:line="816" pos:column="49">DisplayCursor</name><argument_list pos:line="816" pos:column="62">(<argument><expr><call><name pos:line="816" pos:column="63">GetMarginCursor</name><argument_list pos:line="816" pos:column="78">(<argument><expr><call><name pos:line="816" pos:column="79">Point</name><argument_list pos:line="816" pos:column="84">(<argument><expr><name><name pos:line="816" pos:column="85">pt</name><op:operator pos:line="816" pos:column="87">.</op:operator><name pos:line="816" pos:column="88">x</name></name></expr></argument>, <argument><expr><name><name pos:line="816" pos:column="91">pt</name><op:operator pos:line="816" pos:column="93">.</op:operator><name pos:line="816" pos:column="94">y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="817" pos:column="43">else <if pos:line="817" pos:column="48">if <condition pos:line="817" pos:column="51">(<expr><call><name pos:line="817" pos:column="52">PointInSelection</name><argument_list pos:line="817" pos:column="68">(<argument><expr><call><name pos:line="817" pos:column="69">Point</name><argument_list pos:line="817" pos:column="74">(<argument><expr><name><name pos:line="817" pos:column="75">pt</name><op:operator pos:line="817" pos:column="77">.</op:operator><name pos:line="817" pos:column="78">x</name></name></expr></argument>, <argument><expr><name><name pos:line="817" pos:column="81">pt</name><op:operator pos:line="817" pos:column="83">.</op:operator><name pos:line="817" pos:column="84">y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="817" pos:column="88">&amp;&amp;</op:operator> <op:operator pos:line="817" pos:column="91">!</op:operator><call><name pos:line="817" pos:column="92">SelectionEmpty</name><argument_list pos:line="817" pos:column="106">()</argument_list></call></expr>)</condition><then pos:line="817" pos:column="109"> <block pos:line="817" pos:column="110">{
						<expr_stmt><expr><call><name pos:line="818" pos:column="49">DisplayCursor</name><argument_list pos:line="818" pos:column="62">(<argument><expr><name><name pos:line="818" pos:column="63">Window</name><op:operator pos:line="818" pos:column="69">::</op:operator><name pos:line="818" pos:column="71">cursorArrow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="819" pos:column="43">else <if pos:line="819" pos:column="48">if <condition pos:line="819" pos:column="51">(<expr><call><name pos:line="819" pos:column="52">PointIsHotspot</name><argument_list pos:line="819" pos:column="66">(<argument><expr><call><name pos:line="819" pos:column="67">Point</name><argument_list pos:line="819" pos:column="72">(<argument><expr><name><name pos:line="819" pos:column="73">pt</name><op:operator pos:line="819" pos:column="75">.</op:operator><name pos:line="819" pos:column="76">x</name></name></expr></argument>, <argument><expr><name><name pos:line="819" pos:column="79">pt</name><op:operator pos:line="819" pos:column="81">.</op:operator><name pos:line="819" pos:column="82">y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="819" pos:column="86"> <block pos:line="819" pos:column="87">{
						<expr_stmt><expr><call><name pos:line="820" pos:column="49">DisplayCursor</name><argument_list pos:line="820" pos:column="62">(<argument><expr><name><name pos:line="820" pos:column="63">Window</name><op:operator pos:line="820" pos:column="69">::</op:operator><name pos:line="820" pos:column="71">cursorHand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="821" pos:column="43">else <block pos:line="821" pos:column="48">{
						<expr_stmt><expr><call><name pos:line="822" pos:column="49">DisplayCursor</name><argument_list pos:line="822" pos:column="62">(<argument><expr><name><name pos:line="822" pos:column="63">Window</name><op:operator pos:line="822" pos:column="69">::</op:operator><name pos:line="822" pos:column="71">cursorText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if></else></if></else></if>
				}</block></else></if>
				<return pos:line="825" pos:column="33">return <expr><name pos:line="825" pos:column="40">TRUE</name></expr>;</return>
			}</block></then> <else pos:line="826" pos:column="27">else <block pos:line="826" pos:column="32">{
				<return pos:line="827" pos:column="33">return <expr><call><name><op:operator pos:line="827" pos:column="40">::</op:operator><name pos:line="827" pos:column="42">DefWindowProc</name></name><argument_list pos:line="827" pos:column="55">(<argument><expr><call><name pos:line="827" pos:column="56">MainHWND</name><argument_list pos:line="827" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="827" pos:column="68">iMessage</name></expr></argument>, <argument><expr><name pos:line="827" pos:column="78">wParam</name></expr></argument>, <argument><expr><name pos:line="827" pos:column="86">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></else></if>

		</case><case pos:line="830" pos:column="17">case <expr><name pos:line="830" pos:column="22">WM_CHAR</name></expr>:
			<if pos:line="831" pos:column="25">if <condition pos:line="831" pos:column="28">(<expr><op:operator pos:line="831" pos:column="29">(</op:operator><op:operator pos:line="831" pos:column="30">(</op:operator><name pos:line="831" pos:column="31">wParam</name> <op:operator pos:line="831" pos:column="38">&gt;=</op:operator> <lit:literal type="number" pos:line="831" pos:column="41">128</lit:literal><op:operator pos:line="831" pos:column="44">)</op:operator> <op:operator pos:line="831" pos:column="46">||</op:operator> <op:operator pos:line="831" pos:column="49">!</op:operator><call><name pos:line="831" pos:column="50">iscntrl</name><argument_list pos:line="831" pos:column="57">(<argument><expr><name pos:line="831" pos:column="58">wParam</name></expr></argument>)</argument_list></call><op:operator pos:line="831" pos:column="65">)</op:operator> <op:operator pos:line="831" pos:column="67">||</op:operator> <op:operator pos:line="831" pos:column="70">!</op:operator><name pos:line="831" pos:column="71">lastKeyDownConsumed</name></expr>)</condition><then pos:line="831" pos:column="91"> <block pos:line="831" pos:column="92">{
				<if pos:line="832" pos:column="33">if <condition pos:line="832" pos:column="36">(<expr><call><name><op:operator pos:line="832" pos:column="37">::</op:operator><name pos:line="832" pos:column="39">IsWindowUnicode</name></name><argument_list pos:line="832" pos:column="54">(<argument><expr><call><name pos:line="832" pos:column="55">MainHWND</name><argument_list pos:line="832" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="832" pos:column="67">||</op:operator> <name pos:line="832" pos:column="70">keysAlwaysUnicode</name></expr>)</condition><then pos:line="832" pos:column="88"> <block pos:line="832" pos:column="89">{
					<decl_stmt><decl><type><name pos:line="833" pos:column="41">wchar_t</name></type> <name><name pos:line="833" pos:column="49">wcs</name><index pos:line="833" pos:column="52">[<expr><lit:literal type="number" pos:line="833" pos:column="53">2</lit:literal></expr>]</index></name> <init pos:line="833" pos:column="56">= <expr><block pos:line="833" pos:column="58">{<expr><name pos:line="833" pos:column="59">wParam</name></expr>, <expr><lit:literal type="number" pos:line="833" pos:column="67">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
					<if pos:line="834" pos:column="41">if <condition pos:line="834" pos:column="44">(<expr><call><name pos:line="834" pos:column="45">IsUnicodeMode</name><argument_list pos:line="834" pos:column="58">()</argument_list></call></expr>)</condition><then pos:line="834" pos:column="61"> <block pos:line="834" pos:column="62">{
						<comment type="line" pos:line="835" pos:column="49">// For a wide character version of the window:</comment>
						<decl_stmt><decl><type><name pos:line="836" pos:column="49">char</name></type> <name><name pos:line="836" pos:column="54">utfval</name><index pos:line="836" pos:column="60">[<expr><lit:literal type="number" pos:line="836" pos:column="61">4</lit:literal></expr>]</index></name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="837" pos:column="49">unsigned</name> <name pos:line="837" pos:column="58">int</name></type> <name pos:line="837" pos:column="62">len</name> <init pos:line="837" pos:column="66">= <expr><call><name pos:line="837" pos:column="68">UTF8Length</name><argument_list pos:line="837" pos:column="78">(<argument><expr><name pos:line="837" pos:column="79">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="837" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name pos:line="838" pos:column="49">UTF8FromUTF16</name><argument_list pos:line="838" pos:column="62">(<argument><expr><name pos:line="838" pos:column="63">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="838" pos:column="68">1</lit:literal></expr></argument>, <argument><expr><name pos:line="838" pos:column="71">utfval</name></expr></argument>, <argument><expr><name pos:line="838" pos:column="79">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="839" pos:column="49">AddCharUTF</name><argument_list pos:line="839" pos:column="59">(<argument><expr><name pos:line="839" pos:column="60">utfval</name></expr></argument>, <argument><expr><name pos:line="839" pos:column="68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="840" pos:column="43">else <block pos:line="840" pos:column="48">{
						<decl_stmt><decl><type><name pos:line="841" pos:column="49">UINT</name></type> <name pos:line="841" pos:column="54">cpDest</name> <init pos:line="841" pos:column="61">= <expr><call><name pos:line="841" pos:column="63">CodePageOfDocument</name><argument_list pos:line="841" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="842" pos:column="49">char</name></type> <name><name pos:line="842" pos:column="54">inBufferCP</name><index pos:line="842" pos:column="64">[<expr><lit:literal type="number" pos:line="842" pos:column="65">20</lit:literal></expr>]</index></name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="843" pos:column="49">int</name></type> <name pos:line="843" pos:column="53">size</name> <init pos:line="843" pos:column="58">= <expr><call><name><op:operator pos:line="843" pos:column="60">::</op:operator><name pos:line="843" pos:column="62">WideCharToMultiByte</name></name><argument_list pos:line="843" pos:column="81">(<argument><expr><name pos:line="843" pos:column="82">cpDest</name></expr></argument>,
							<argument><expr><lit:literal type="number" pos:line="844" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><name pos:line="844" pos:column="60">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="844" pos:column="65">1</lit:literal></expr></argument>, <argument><expr><name pos:line="844" pos:column="68">inBufferCP</name></expr></argument>, <argument><expr><sizeof pos:line="844" pos:column="80">sizeof<argument_list pos:line="844" pos:column="86">(<argument><expr><name pos:line="844" pos:column="87">inBufferCP</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="844" pos:column="99">-</op:operator> <lit:literal type="number" pos:line="844" pos:column="101">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="844" pos:column="104">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="844" pos:column="107">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name pos:line="845" pos:column="49">inBufferCP</name><index pos:line="845" pos:column="59">[<expr><name pos:line="845" pos:column="60">size</name></expr>]</index></name> <op:operator pos:line="845" pos:column="66">=</op:operator> <lit:literal type="char" pos:line="845" pos:column="68">'\0'</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="846" pos:column="49">AddCharUTF</name><argument_list pos:line="846" pos:column="59">(<argument><expr><name pos:line="846" pos:column="60">inBufferCP</name></expr></argument>, <argument><expr><name pos:line="846" pos:column="72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="848" pos:column="35">else <block pos:line="848" pos:column="40">{
					<if pos:line="849" pos:column="41">if <condition pos:line="849" pos:column="44">(<expr><call><name pos:line="849" pos:column="45">IsUnicodeMode</name><argument_list pos:line="849" pos:column="58">()</argument_list></call></expr>)</condition><then pos:line="849" pos:column="61"> <block pos:line="849" pos:column="62">{
						<expr_stmt><expr><call><name pos:line="850" pos:column="49">AddCharBytes</name><argument_list pos:line="850" pos:column="61">(<argument><expr><lit:literal type="char" pos:line="850" pos:column="62">'\0'</lit:literal></expr></argument>, <argument><expr><call><name pos:line="850" pos:column="68">LOBYTE</name><argument_list pos:line="850" pos:column="74">(<argument><expr><name pos:line="850" pos:column="75">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="851" pos:column="43">else <block pos:line="851" pos:column="48">{
						<expr_stmt><expr><call><name pos:line="852" pos:column="49">AddChar</name><argument_list pos:line="852" pos:column="56">(<argument><expr><call><name pos:line="852" pos:column="57">LOBYTE</name><argument_list pos:line="852" pos:column="63">(<argument><expr><name pos:line="852" pos:column="64">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></else></if>
			}</block></then></if>
			<return pos:line="856" pos:column="25">return <expr><lit:literal type="number" pos:line="856" pos:column="32">0</lit:literal></expr>;</return>

		</case><case pos:line="858" pos:column="17">case <expr><name pos:line="858" pos:column="22">WM_UNICHAR</name></expr>:
			<if pos:line="859" pos:column="25">if <condition pos:line="859" pos:column="28">(<expr><name pos:line="859" pos:column="29">wParam</name> <op:operator pos:line="859" pos:column="36">==</op:operator> <name pos:line="859" pos:column="39">UNICODE_NOCHAR</name></expr>)</condition><then pos:line="859" pos:column="54"> <block pos:line="859" pos:column="55">{
				<return pos:line="860" pos:column="33">return <expr><call><name pos:line="860" pos:column="40">IsUnicodeMode</name><argument_list pos:line="860" pos:column="53">()</argument_list></call> <op:operator pos:line="860" pos:column="56">?</op:operator> <lit:literal type="number" pos:line="860" pos:column="58">1</lit:literal> <op:operator pos:line="860" pos:column="60">:</op:operator> <lit:literal type="number" pos:line="860" pos:column="62">0</lit:literal></expr>;</return>
			}</block></then> <else pos:line="861" pos:column="27">else <if pos:line="861" pos:column="32">if <condition pos:line="861" pos:column="35">(<expr><name pos:line="861" pos:column="36">lastKeyDownConsumed</name></expr>)</condition><then pos:line="861" pos:column="56"> <block pos:line="861" pos:column="57">{
				<return pos:line="862" pos:column="33">return <expr><lit:literal type="number" pos:line="862" pos:column="40">1</lit:literal></expr>;</return>
			}</block></then> <else pos:line="863" pos:column="27">else <block pos:line="863" pos:column="32">{
				<if pos:line="864" pos:column="33">if <condition pos:line="864" pos:column="36">(<expr><call><name pos:line="864" pos:column="37">IsUnicodeMode</name><argument_list pos:line="864" pos:column="50">()</argument_list></call></expr>)</condition><then pos:line="864" pos:column="53"> <block pos:line="864" pos:column="54">{
					<decl_stmt><decl><type><name pos:line="865" pos:column="41">char</name></type> <name><name pos:line="865" pos:column="46">utfval</name><index pos:line="865" pos:column="52">[<expr><lit:literal type="number" pos:line="865" pos:column="53">4</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="866" pos:column="41">wchar_t</name></type> <name><name pos:line="866" pos:column="49">wcs</name><index pos:line="866" pos:column="52">[<expr><lit:literal type="number" pos:line="866" pos:column="53">2</lit:literal></expr>]</index></name> <init pos:line="866" pos:column="56">= <expr><block pos:line="866" pos:column="58">{<expr><call><name><name pos:line="866" pos:column="59">static_cast</name><argument_list pos:line="866" pos:column="70">&lt;<argument><expr><name pos:line="866" pos:column="71">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="866" pos:column="79">(<argument><expr><name pos:line="866" pos:column="80">wParam</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="number" pos:line="866" pos:column="89">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="867" pos:column="41">unsigned</name> <name pos:line="867" pos:column="50">int</name></type> <name pos:line="867" pos:column="54">len</name> <init pos:line="867" pos:column="58">= <expr><call><name pos:line="867" pos:column="60">UTF8Length</name><argument_list pos:line="867" pos:column="70">(<argument><expr><name pos:line="867" pos:column="71">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="867" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name pos:line="868" pos:column="41">UTF8FromUTF16</name><argument_list pos:line="868" pos:column="54">(<argument><expr><name pos:line="868" pos:column="55">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="868" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="868" pos:column="63">utfval</name></expr></argument>, <argument><expr><name pos:line="868" pos:column="71">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="869" pos:column="41">AddCharUTF</name><argument_list pos:line="869" pos:column="51">(<argument><expr><name pos:line="869" pos:column="52">utfval</name></expr></argument>, <argument><expr><name pos:line="869" pos:column="60">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="870" pos:column="41">return <expr><lit:literal type="number" pos:line="870" pos:column="48">1</lit:literal></expr>;</return>
				}</block></then> <else pos:line="871" pos:column="35">else <block pos:line="871" pos:column="40">{
					<return pos:line="872" pos:column="41">return <expr><lit:literal type="number" pos:line="872" pos:column="48">0</lit:literal></expr>;</return>
				}</block></else></if>
			}</block></else></if></else></if>

		</case><case pos:line="876" pos:column="17">case <expr><name pos:line="876" pos:column="22">WM_SYSKEYDOWN</name></expr>:
		</case><case pos:line="877" pos:column="17">case <expr><name pos:line="877" pos:column="22">WM_KEYDOWN</name></expr>: <block pos:line="877" pos:column="34">{
			<comment type="line" pos:line="878" pos:column="25">//Platform::DebugPrintf("S keydown %d %x %x %x %x\n",iMessage, wParam, lParam, ::IsKeyDown(VK_SHIFT), ::IsKeyDown(VK_CONTROL));</comment>
				<expr_stmt><expr><name pos:line="879" pos:column="33">lastKeyDownConsumed</name> <op:operator pos:line="879" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="879" pos:column="55">false</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="880" pos:column="33">int</name></type> <name pos:line="880" pos:column="37">ret</name> <init pos:line="880" pos:column="41">= <expr><call><name pos:line="880" pos:column="43">KeyDown</name><argument_list pos:line="880" pos:column="50">(<argument><expr><call><name pos:line="880" pos:column="51">KeyTranslate</name><argument_list pos:line="880" pos:column="63">(<argument><expr><name pos:line="880" pos:column="64">wParam</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name><name pos:line="881" pos:column="41">Platform</name><op:operator pos:line="881" pos:column="49">::</op:operator><name pos:line="881" pos:column="51">IsKeyDown</name></name><argument_list pos:line="881" pos:column="60">(<argument><expr><name pos:line="881" pos:column="61">VK_SHIFT</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name><name pos:line="882" pos:column="41">Platform</name><op:operator pos:line="882" pos:column="49">::</op:operator><name pos:line="882" pos:column="51">IsKeyDown</name></name><argument_list pos:line="882" pos:column="60">(<argument><expr><name pos:line="882" pos:column="61">VK_CONTROL</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name><name pos:line="883" pos:column="41">Platform</name><op:operator pos:line="883" pos:column="49">::</op:operator><name pos:line="883" pos:column="51">IsKeyDown</name></name><argument_list pos:line="883" pos:column="60">(<argument><expr><name pos:line="883" pos:column="61">VK_MENU</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><op:operator pos:line="884" pos:column="41">&amp;</op:operator><name pos:line="884" pos:column="42">lastKeyDownConsumed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="885" pos:column="33">if <condition pos:line="885" pos:column="36">(<expr><op:operator pos:line="885" pos:column="37">!</op:operator><name pos:line="885" pos:column="38">ret</name> <op:operator pos:line="885" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="885" pos:column="45">!</op:operator><name pos:line="885" pos:column="46">lastKeyDownConsumed</name></expr>)</condition><then pos:line="885" pos:column="66"> <block pos:line="885" pos:column="67">{
					<return pos:line="886" pos:column="41">return <expr><call><name><op:operator pos:line="886" pos:column="48">::</op:operator><name pos:line="886" pos:column="50">DefWindowProc</name></name><argument_list pos:line="886" pos:column="63">(<argument><expr><call><name pos:line="886" pos:column="64">MainHWND</name><argument_list pos:line="886" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="886" pos:column="76">iMessage</name></expr></argument>, <argument><expr><name pos:line="886" pos:column="86">wParam</name></expr></argument>, <argument><expr><name pos:line="886" pos:column="94">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>
				<break pos:line="888" pos:column="33">break;</break>
			}</block>

		</case><case pos:line="891" pos:column="17">case <expr><name pos:line="891" pos:column="22">WM_IME_KEYDOWN</name></expr>:
			<return pos:line="892" pos:column="25">return <expr><call><name><op:operator pos:line="892" pos:column="32">::</op:operator><name pos:line="892" pos:column="34">DefWindowProc</name></name><argument_list pos:line="892" pos:column="47">(<argument><expr><call><name pos:line="892" pos:column="48">MainHWND</name><argument_list pos:line="892" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="892" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="892" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="892" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="894" pos:column="17">case <expr><name pos:line="894" pos:column="22">WM_KEYUP</name></expr>:
			<comment type="line" pos:line="895" pos:column="25">//Platform::DebugPrintf("S keyup %d %x %x\n",iMessage, wParam, lParam);</comment>
			<return pos:line="896" pos:column="25">return <expr><call><name><op:operator pos:line="896" pos:column="32">::</op:operator><name pos:line="896" pos:column="34">DefWindowProc</name></name><argument_list pos:line="896" pos:column="47">(<argument><expr><call><name pos:line="896" pos:column="48">MainHWND</name><argument_list pos:line="896" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="896" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="896" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="896" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="898" pos:column="17">case <expr><name pos:line="898" pos:column="22">WM_SETTINGCHANGE</name></expr>:
			<comment type="line" pos:line="899" pos:column="25">//Platform::DebugPrintf("Setting Changed\n");</comment>
			<expr_stmt><expr><call><name pos:line="900" pos:column="25">InvalidateStyleData</name><argument_list pos:line="900" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="901" pos:column="25">// Get Intellimouse scroll line parameters</comment>
			<expr_stmt><expr><call><name pos:line="902" pos:column="25">GetIntelliMouseParameters</name><argument_list pos:line="902" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			<break pos:line="903" pos:column="25">break;</break>

		</case><case pos:line="905" pos:column="17">case <expr><name pos:line="905" pos:column="22">WM_GETDLGCODE</name></expr>:
			<return pos:line="906" pos:column="25">return <expr><name pos:line="906" pos:column="32">DLGC_HASSETSEL</name> <op:operator pos:line="906" pos:column="47">|</op:operator> <name pos:line="906" pos:column="49">DLGC_WANTALLKEYS</name></expr>;</return>

		</case><case pos:line="908" pos:column="17">case <expr><name pos:line="908" pos:column="22">WM_KILLFOCUS</name></expr>: <block pos:line="908" pos:column="36">{
				<decl_stmt><decl><type><name pos:line="909" pos:column="33">HWND</name></type> <name pos:line="909" pos:column="38">wOther</name> <init pos:line="909" pos:column="45">= <expr><call><name><name pos:line="909" pos:column="47">reinterpret_cast</name><argument_list pos:line="909" pos:column="63">&lt;<argument><expr><name pos:line="909" pos:column="64">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="909" pos:column="69">(<argument><expr><name pos:line="909" pos:column="70">wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="910" pos:column="33">HWND</name></type> <name pos:line="910" pos:column="38">wThis</name> <init pos:line="910" pos:column="44">= <expr><call><name pos:line="910" pos:column="46">MainHWND</name><argument_list pos:line="910" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="911" pos:column="33">HWND</name></type> <name pos:line="911" pos:column="38">wCT</name> <init pos:line="911" pos:column="42">= <expr><call><name><name pos:line="911" pos:column="44">reinterpret_cast</name><argument_list pos:line="911" pos:column="60">&lt;<argument><expr><name pos:line="911" pos:column="61">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="911" pos:column="66">(<argument><expr><call><name><name pos:line="911" pos:column="67">ct</name><op:operator pos:line="911" pos:column="69">.</op:operator><name pos:line="911" pos:column="70">wCallTip</name><op:operator pos:line="911" pos:column="78">.</op:operator><name pos:line="911" pos:column="79">GetID</name></name><argument_list pos:line="911" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="912" pos:column="33">if <condition pos:line="912" pos:column="36">(<expr><op:operator pos:line="912" pos:column="37">!</op:operator><name pos:line="912" pos:column="38">wParam</name> <op:operator pos:line="912" pos:column="45">||</op:operator>
					<op:operator pos:line="913" pos:column="41">!</op:operator><op:operator pos:line="913" pos:column="42">(</op:operator><call><name><op:operator pos:line="913" pos:column="43">::</op:operator><name pos:line="913" pos:column="45">IsChild</name></name><argument_list pos:line="913" pos:column="52">(<argument><expr><name pos:line="913" pos:column="53">wThis</name></expr></argument>, <argument><expr><name pos:line="913" pos:column="60">wOther</name></expr></argument>)</argument_list></call> <op:operator pos:line="913" pos:column="68">||</op:operator> <op:operator pos:line="913" pos:column="71">(</op:operator><name pos:line="913" pos:column="72">wOther</name> <op:operator pos:line="913" pos:column="79">==</op:operator> <name pos:line="913" pos:column="82">wCT</name><op:operator pos:line="913" pos:column="85">)</op:operator><op:operator pos:line="913" pos:column="86">)</op:operator></expr>)</condition><then pos:line="913" pos:column="88"> <block pos:line="913" pos:column="89">{
					<expr_stmt><expr><call><name pos:line="914" pos:column="41">SetFocusState</name><argument_list pos:line="914" pos:column="54">(<argument><expr><lit:literal type="boolean" pos:line="914" pos:column="55">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="915" pos:column="41">DestroySystemCaret</name><argument_list pos:line="915" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			<comment type="line" pos:line="918" pos:column="25">//RealizeWindowPalette(true);</comment>
			<break pos:line="919" pos:column="25">break;</break>

		</case><case pos:line="921" pos:column="17">case <expr><name pos:line="921" pos:column="22">WM_SETFOCUS</name></expr>:
			<expr_stmt><expr><call><name pos:line="922" pos:column="25">SetFocusState</name><argument_list pos:line="922" pos:column="38">(<argument><expr><lit:literal type="boolean" pos:line="922" pos:column="39">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="923" pos:column="25">RealizeWindowPalette</name><argument_list pos:line="923" pos:column="45">(<argument><expr><lit:literal type="boolean" pos:line="923" pos:column="46">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="924" pos:column="25">DestroySystemCaret</name><argument_list pos:line="924" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="925" pos:column="25">CreateSystemCaret</name><argument_list pos:line="925" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<break pos:line="926" pos:column="25">break;</break>

		</case><case pos:line="928" pos:column="17">case <expr><name pos:line="928" pos:column="22">WM_SYSCOLORCHANGE</name></expr>:
			<comment type="line" pos:line="929" pos:column="25">//Platform::DebugPrintf("Setting Changed\n");</comment>
			<expr_stmt><expr><call><name pos:line="930" pos:column="25">InvalidateStyleData</name><argument_list pos:line="930" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			<break pos:line="931" pos:column="25">break;</break>

		</case><case pos:line="933" pos:column="17">case <expr><name pos:line="933" pos:column="22">WM_PALETTECHANGED</name></expr>:
			<if pos:line="934" pos:column="25">if <condition pos:line="934" pos:column="28">(<expr><name pos:line="934" pos:column="29">wParam</name> <op:operator pos:line="934" pos:column="36">!=</op:operator> <call><name><name pos:line="934" pos:column="39">reinterpret_cast</name><argument_list pos:line="934" pos:column="55">&lt;<argument><expr><name pos:line="934" pos:column="56">uptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="934" pos:column="63">(<argument><expr><call><name pos:line="934" pos:column="64">MainHWND</name><argument_list pos:line="934" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="934" pos:column="76"> <block pos:line="934" pos:column="77">{
				<comment type="line" pos:line="935" pos:column="33">//Platform::DebugPrintf("** Palette Changed\n");</comment>
				<expr_stmt><expr><call><name pos:line="936" pos:column="33">RealizeWindowPalette</name><argument_list pos:line="936" pos:column="53">(<argument><expr><lit:literal type="boolean" pos:line="936" pos:column="54">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="938" pos:column="25">break;</break>

		</case><case pos:line="940" pos:column="17">case <expr><name pos:line="940" pos:column="22">WM_QUERYNEWPALETTE</name></expr>:
			<comment type="line" pos:line="941" pos:column="25">//Platform::DebugPrintf("** Query palette\n");</comment>
			<expr_stmt><expr><call><name pos:line="942" pos:column="25">RealizeWindowPalette</name><argument_list pos:line="942" pos:column="45">(<argument><expr><lit:literal type="boolean" pos:line="942" pos:column="46">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="943" pos:column="25">break;</break>

		</case><case pos:line="945" pos:column="17">case <expr><name pos:line="945" pos:column="22">WM_IME_STARTCOMPOSITION</name></expr>: 	<comment type="line" pos:line="945" pos:column="49">// dbcs</comment>
			<expr_stmt><expr><call><name pos:line="946" pos:column="25">ImeStartComposition</name><argument_list pos:line="946" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="947" pos:column="25">return <expr><call><name><op:operator pos:line="947" pos:column="32">::</op:operator><name pos:line="947" pos:column="34">DefWindowProc</name></name><argument_list pos:line="947" pos:column="47">(<argument><expr><call><name pos:line="947" pos:column="48">MainHWND</name><argument_list pos:line="947" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="947" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="947" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="947" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="949" pos:column="17">case <expr><name pos:line="949" pos:column="22">WM_IME_ENDCOMPOSITION</name></expr>: 	<comment type="line" pos:line="949" pos:column="49">// dbcs</comment>
			<expr_stmt><expr><call><name pos:line="950" pos:column="25">ImeEndComposition</name><argument_list pos:line="950" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="951" pos:column="25">return <expr><call><name><op:operator pos:line="951" pos:column="32">::</op:operator><name pos:line="951" pos:column="34">DefWindowProc</name></name><argument_list pos:line="951" pos:column="47">(<argument><expr><call><name pos:line="951" pos:column="48">MainHWND</name><argument_list pos:line="951" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="951" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="951" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="951" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="953" pos:column="17">case <expr><name pos:line="953" pos:column="22">WM_IME_COMPOSITION</name></expr>:
			<return pos:line="954" pos:column="25">return <expr><call><name pos:line="954" pos:column="32">HandleComposition</name><argument_list pos:line="954" pos:column="49">(<argument><expr><name pos:line="954" pos:column="50">wParam</name></expr></argument>, <argument><expr><name pos:line="954" pos:column="58">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="956" pos:column="17">case <expr><name pos:line="956" pos:column="22">WM_IME_CHAR</name></expr>: <block pos:line="956" pos:column="35">{
				<expr_stmt><expr><call><name pos:line="957" pos:column="33">AddCharBytes</name><argument_list pos:line="957" pos:column="45">(<argument><expr><call><name pos:line="957" pos:column="46">HIBYTE</name><argument_list pos:line="957" pos:column="52">(<argument><expr><name pos:line="957" pos:column="53">wParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="957" pos:column="62">LOBYTE</name><argument_list pos:line="957" pos:column="68">(<argument><expr><name pos:line="957" pos:column="69">wParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="958" pos:column="33">return <expr><lit:literal type="number" pos:line="958" pos:column="40">0</lit:literal></expr>;</return>
			}</block>

		</case><case pos:line="961" pos:column="17">case <expr><name pos:line="961" pos:column="22">WM_CONTEXTMENU</name></expr>:
			<if pos:line="962" pos:column="25">if <condition pos:line="962" pos:column="28">(<expr><name pos:line="962" pos:column="29">displayPopupMenu</name></expr>)</condition><then pos:line="962" pos:column="46"> <block pos:line="962" pos:column="47">{
				<decl_stmt><decl><type><name pos:line="963" pos:column="33">Point</name></type> <name pos:line="963" pos:column="39">pt</name> <init pos:line="963" pos:column="42">= <expr><call><name><name pos:line="963" pos:column="44">Point</name><op:operator pos:line="963" pos:column="49">::</op:operator><name pos:line="963" pos:column="51">FromLong</name></name><argument_list pos:line="963" pos:column="59">(<argument><expr><name pos:line="963" pos:column="60">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="964" pos:column="33">if <condition pos:line="964" pos:column="36">(<expr><op:operator pos:line="964" pos:column="37">(</op:operator><name><name pos:line="964" pos:column="38">pt</name><op:operator pos:line="964" pos:column="40">.</op:operator><name pos:line="964" pos:column="41">x</name></name> <op:operator pos:line="964" pos:column="43">==</op:operator> <op:operator pos:line="964" pos:column="46">-</op:operator><lit:literal type="number" pos:line="964" pos:column="47">1</lit:literal><op:operator pos:line="964" pos:column="48">)</op:operator> <op:operator pos:line="964" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="964" pos:column="53">(</op:operator><name><name pos:line="964" pos:column="54">pt</name><op:operator pos:line="964" pos:column="56">.</op:operator><name pos:line="964" pos:column="57">y</name></name> <op:operator pos:line="964" pos:column="59">==</op:operator> <op:operator pos:line="964" pos:column="62">-</op:operator><lit:literal type="number" pos:line="964" pos:column="63">1</lit:literal><op:operator pos:line="964" pos:column="64">)</op:operator></expr>)</condition><then pos:line="964" pos:column="66"> <block pos:line="964" pos:column="67">{
					<comment type="line" pos:line="965" pos:column="41">// Caused by keyboard so display menu near caret</comment>
					<expr_stmt><expr><name pos:line="966" pos:column="41">pt</name> <op:operator pos:line="966" pos:column="44">=</op:operator> <call><name pos:line="966" pos:column="46">PointMainCaret</name><argument_list pos:line="966" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="967" pos:column="41">POINT</name></type> <name pos:line="967" pos:column="47">spt</name> <init pos:line="967" pos:column="51">= <expr><block pos:line="967" pos:column="53">{<expr><name><name pos:line="967" pos:column="54">pt</name><op:operator pos:line="967" pos:column="56">.</op:operator><name pos:line="967" pos:column="57">x</name></name></expr>, <expr><name><name pos:line="967" pos:column="60">pt</name><op:operator pos:line="967" pos:column="62">.</op:operator><name pos:line="967" pos:column="63">y</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="968" pos:column="41">::</op:operator><name pos:line="968" pos:column="43">ClientToScreen</name></name><argument_list pos:line="968" pos:column="57">(<argument><expr><call><name pos:line="968" pos:column="58">MainHWND</name><argument_list pos:line="968" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="968" pos:column="70">&amp;</op:operator><name pos:line="968" pos:column="71">spt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="969" pos:column="41">pt</name> <op:operator pos:line="969" pos:column="44">=</op:operator> <call><name pos:line="969" pos:column="46">Point</name><argument_list pos:line="969" pos:column="51">(<argument><expr><name><name pos:line="969" pos:column="52">spt</name><op:operator pos:line="969" pos:column="55">.</op:operator><name pos:line="969" pos:column="56">x</name></name></expr></argument>, <argument><expr><name><name pos:line="969" pos:column="59">spt</name><op:operator pos:line="969" pos:column="62">.</op:operator><name pos:line="969" pos:column="63">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="971" pos:column="33">ContextMenu</name><argument_list pos:line="971" pos:column="44">(<argument><expr><name pos:line="971" pos:column="45">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="972" pos:column="33">return <expr><lit:literal type="number" pos:line="972" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then></if>
			<return pos:line="974" pos:column="25">return <expr><call><name><op:operator pos:line="974" pos:column="32">::</op:operator><name pos:line="974" pos:column="34">DefWindowProc</name></name><argument_list pos:line="974" pos:column="47">(<argument><expr><call><name pos:line="974" pos:column="48">MainHWND</name><argument_list pos:line="974" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="974" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="974" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="974" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="976" pos:column="17">case <expr><name pos:line="976" pos:column="22">WM_INPUTLANGCHANGE</name></expr>:
			<comment type="line" pos:line="977" pos:column="25">//::SetThreadLocale(LOWORD(lParam));</comment>
			<return pos:line="978" pos:column="25">return <expr><call><name><op:operator pos:line="978" pos:column="32">::</op:operator><name pos:line="978" pos:column="34">DefWindowProc</name></name><argument_list pos:line="978" pos:column="47">(<argument><expr><call><name pos:line="978" pos:column="48">MainHWND</name><argument_list pos:line="978" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="978" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="978" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="978" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="980" pos:column="17">case <expr><name pos:line="980" pos:column="22">WM_INPUTLANGCHANGEREQUEST</name></expr>:
			<return pos:line="981" pos:column="25">return <expr><call><name><op:operator pos:line="981" pos:column="32">::</op:operator><name pos:line="981" pos:column="34">DefWindowProc</name></name><argument_list pos:line="981" pos:column="47">(<argument><expr><call><name pos:line="981" pos:column="48">MainHWND</name><argument_list pos:line="981" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="981" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="981" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="981" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="983" pos:column="17">case <expr><name pos:line="983" pos:column="22">WM_ERASEBKGND</name></expr>:
			<return pos:line="984" pos:column="25">return <expr><lit:literal type="number" pos:line="984" pos:column="32">1</lit:literal></expr>;</return>   <comment type="line" pos:line="984" pos:column="37">// Avoid any background erasure as whole window painted.</comment>

		</case><case pos:line="986" pos:column="17">case <expr><name pos:line="986" pos:column="22">WM_CAPTURECHANGED</name></expr>:
			<expr_stmt><expr><name pos:line="987" pos:column="25">capturedMouse</name> <op:operator pos:line="987" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="987" pos:column="41">false</lit:literal></expr>;</expr_stmt>
			<return pos:line="988" pos:column="25">return <expr><lit:literal type="number" pos:line="988" pos:column="32">0</lit:literal></expr>;</return>

		<comment type="line" pos:line="990" pos:column="17">// These are not handled in Scintilla and its faster to dispatch them here.</comment>
		<comment type="line" pos:line="991" pos:column="17">// Also moves time out to here so profile doesn't count lots of empty message calls.</comment>

		</case><case pos:line="993" pos:column="17">case <expr><name pos:line="993" pos:column="22">WM_MOVE</name></expr>:
		</case><case pos:line="994" pos:column="17">case <expr><name pos:line="994" pos:column="22">WM_MOUSEACTIVATE</name></expr>:
		</case><case pos:line="995" pos:column="17">case <expr><name pos:line="995" pos:column="22">WM_NCHITTEST</name></expr>:
		</case><case pos:line="996" pos:column="17">case <expr><name pos:line="996" pos:column="22">WM_NCCALCSIZE</name></expr>:
		</case><case pos:line="997" pos:column="17">case <expr><name pos:line="997" pos:column="22">WM_NCPAINT</name></expr>:
		</case><case pos:line="998" pos:column="17">case <expr><name pos:line="998" pos:column="22">WM_NCMOUSEMOVE</name></expr>:
		</case><case pos:line="999" pos:column="17">case <expr><name pos:line="999" pos:column="22">WM_NCLBUTTONDOWN</name></expr>:
		</case><case pos:line="1000" pos:column="17">case <expr><name pos:line="1000" pos:column="22">WM_IME_SETCONTEXT</name></expr>:
		</case><case pos:line="1001" pos:column="17">case <expr><name pos:line="1001" pos:column="22">WM_IME_NOTIFY</name></expr>:
		</case><case pos:line="1002" pos:column="17">case <expr><name pos:line="1002" pos:column="22">WM_SYSCOMMAND</name></expr>:
		</case><case pos:line="1003" pos:column="17">case <expr><name pos:line="1003" pos:column="22">WM_WINDOWPOSCHANGING</name></expr>:
		</case><case pos:line="1004" pos:column="17">case <expr><name pos:line="1004" pos:column="22">WM_WINDOWPOSCHANGED</name></expr>:
			<return pos:line="1005" pos:column="25">return <expr><call><name><op:operator pos:line="1005" pos:column="32">::</op:operator><name pos:line="1005" pos:column="34">DefWindowProc</name></name><argument_list pos:line="1005" pos:column="47">(<argument><expr><call><name pos:line="1005" pos:column="48">MainHWND</name><argument_list pos:line="1005" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1005" pos:column="60">iMessage</name></expr></argument>, <argument><expr><name pos:line="1005" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="1005" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="1007" pos:column="17">case <expr><name pos:line="1007" pos:column="22">EM_LINEFROMCHAR</name></expr>:
			<if pos:line="1008" pos:column="25">if <condition pos:line="1008" pos:column="28">(<expr><call><name><name pos:line="1008" pos:column="29">static_cast</name><argument_list pos:line="1008" pos:column="40">&lt;<argument><expr><name pos:line="1008" pos:column="41">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1008" pos:column="45">(<argument><expr><name pos:line="1008" pos:column="46">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="1008" pos:column="54">&lt;</op:operator> <lit:literal type="number" pos:line="1008" pos:column="56">0</lit:literal></expr>)</condition><then pos:line="1008" pos:column="58"> <block pos:line="1008" pos:column="59">{
				<expr_stmt><expr><name pos:line="1009" pos:column="33">wParam</name> <op:operator pos:line="1009" pos:column="40">=</op:operator> <call><name pos:line="1009" pos:column="42">SelectionStart</name><argument_list pos:line="1009" pos:column="56">()</argument_list></call><op:operator pos:line="1009" pos:column="58">.</op:operator><call><name pos:line="1009" pos:column="59">Position</name><argument_list pos:line="1009" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return pos:line="1011" pos:column="25">return <expr><call><name><name pos:line="1011" pos:column="32">pdoc</name><op:operator pos:line="1011" pos:column="36">-&gt;</op:operator><name pos:line="1011" pos:column="38">LineFromPosition</name></name><argument_list pos:line="1011" pos:column="54">(<argument><expr><name pos:line="1011" pos:column="55">wParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="1013" pos:column="17">case <expr><name pos:line="1013" pos:column="22">EM_EXLINEFROMCHAR</name></expr>:
			<return pos:line="1014" pos:column="25">return <expr><call><name><name pos:line="1014" pos:column="32">pdoc</name><op:operator pos:line="1014" pos:column="36">-&gt;</op:operator><name pos:line="1014" pos:column="38">LineFromPosition</name></name><argument_list pos:line="1014" pos:column="54">(<argument><expr><name pos:line="1014" pos:column="55">lParam</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="1016" pos:column="17">case <expr><name pos:line="1016" pos:column="22">EM_GETSEL</name></expr>:
			<if pos:line="1017" pos:column="25">if <condition pos:line="1017" pos:column="28">(<expr><name pos:line="1017" pos:column="29">wParam</name></expr>)</condition><then pos:line="1017" pos:column="36"> <block pos:line="1017" pos:column="37">{
				<expr_stmt><expr><op:operator pos:line="1018" pos:column="33">*</op:operator><call><name><name pos:line="1018" pos:column="34">reinterpret_cast</name><argument_list pos:line="1018" pos:column="50">&lt;<argument><expr><name pos:line="1018" pos:column="51">int</name> <op:operator pos:line="1018" pos:column="55">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1018" pos:column="57">(<argument><expr><name pos:line="1018" pos:column="58">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="1018" pos:column="66">=</op:operator> <call><name pos:line="1018" pos:column="68">SelectionStart</name><argument_list pos:line="1018" pos:column="82">()</argument_list></call><op:operator pos:line="1018" pos:column="84">.</op:operator><call><name pos:line="1018" pos:column="85">Position</name><argument_list pos:line="1018" pos:column="93">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="1020" pos:column="25">if <condition pos:line="1020" pos:column="28">(<expr><name pos:line="1020" pos:column="29">lParam</name></expr>)</condition><then pos:line="1020" pos:column="36"> <block pos:line="1020" pos:column="37">{
				<expr_stmt><expr><op:operator pos:line="1021" pos:column="33">*</op:operator><call><name><name pos:line="1021" pos:column="34">reinterpret_cast</name><argument_list pos:line="1021" pos:column="50">&lt;<argument><expr><name pos:line="1021" pos:column="51">int</name> <op:operator pos:line="1021" pos:column="55">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1021" pos:column="57">(<argument><expr><name pos:line="1021" pos:column="58">lParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="1021" pos:column="66">=</op:operator> <call><name pos:line="1021" pos:column="68">SelectionEnd</name><argument_list pos:line="1021" pos:column="80">()</argument_list></call><op:operator pos:line="1021" pos:column="82">.</op:operator><call><name pos:line="1021" pos:column="83">Position</name><argument_list pos:line="1021" pos:column="91">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return pos:line="1023" pos:column="25">return <expr><call><name pos:line="1023" pos:column="32">MAKELONG</name><argument_list pos:line="1023" pos:column="40">(<argument><expr><call><name pos:line="1023" pos:column="41">SelectionStart</name><argument_list pos:line="1023" pos:column="55">()</argument_list></call><op:operator pos:line="1023" pos:column="57">.</op:operator><call><name pos:line="1023" pos:column="58">Position</name><argument_list pos:line="1023" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="1023" pos:column="70">SelectionEnd</name><argument_list pos:line="1023" pos:column="82">()</argument_list></call><op:operator pos:line="1023" pos:column="84">.</op:operator><call><name pos:line="1023" pos:column="85">Position</name><argument_list pos:line="1023" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="1025" pos:column="17">case <expr><name pos:line="1025" pos:column="22">EM_EXGETSEL</name></expr>: <block pos:line="1025" pos:column="35">{
				<if pos:line="1026" pos:column="33">if <condition pos:line="1026" pos:column="36">(<expr><name pos:line="1026" pos:column="37">lParam</name> <op:operator pos:line="1026" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="1026" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="1026" pos:column="49"> <block pos:line="1026" pos:column="50">{
					<return pos:line="1027" pos:column="41">return <expr><lit:literal type="number" pos:line="1027" pos:column="48">0</lit:literal></expr>;</return>
				}</block></then></if>
				<decl_stmt><decl><type><name pos:line="1029" pos:column="33">Sci_CharacterRange</name> <type:modifier pos:line="1029" pos:column="52">*</type:modifier></type><name pos:line="1029" pos:column="53">pCR</name> <init pos:line="1029" pos:column="57">= <expr><call><name><name pos:line="1029" pos:column="59">reinterpret_cast</name><argument_list pos:line="1029" pos:column="75">&lt;<argument><expr><name pos:line="1029" pos:column="76">Sci_CharacterRange</name> <op:operator pos:line="1029" pos:column="95">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1029" pos:column="97">(<argument><expr><name pos:line="1029" pos:column="98">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="1030" pos:column="33">pCR</name><op:operator pos:line="1030" pos:column="36">-&gt;</op:operator><name pos:line="1030" pos:column="38">cpMin</name></name> <op:operator pos:line="1030" pos:column="44">=</op:operator> <call><name pos:line="1030" pos:column="46">SelectionStart</name><argument_list pos:line="1030" pos:column="60">()</argument_list></call><op:operator pos:line="1030" pos:column="62">.</op:operator><call><name pos:line="1030" pos:column="63">Position</name><argument_list pos:line="1030" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="1031" pos:column="33">pCR</name><op:operator pos:line="1031" pos:column="36">-&gt;</op:operator><name pos:line="1031" pos:column="38">cpMax</name></name> <op:operator pos:line="1031" pos:column="44">=</op:operator> <call><name pos:line="1031" pos:column="46">SelectionEnd</name><argument_list pos:line="1031" pos:column="58">()</argument_list></call><op:operator pos:line="1031" pos:column="60">.</op:operator><call><name pos:line="1031" pos:column="61">Position</name><argument_list pos:line="1031" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break pos:line="1033" pos:column="25">break;</break>

		</case><case pos:line="1035" pos:column="17">case <expr><name pos:line="1035" pos:column="22">EM_SETSEL</name></expr>: <block pos:line="1035" pos:column="33">{
				<decl_stmt><decl><type><name pos:line="1036" pos:column="33">int</name></type> <name pos:line="1036" pos:column="37">nStart</name> <init pos:line="1036" pos:column="44">= <expr><call><name><name pos:line="1036" pos:column="46">static_cast</name><argument_list pos:line="1036" pos:column="57">&lt;<argument><expr><name pos:line="1036" pos:column="58">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1036" pos:column="62">(<argument><expr><name pos:line="1036" pos:column="63">wParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1037" pos:column="33">int</name></type> <name pos:line="1037" pos:column="37">nEnd</name> <init pos:line="1037" pos:column="42">= <expr><call><name><name pos:line="1037" pos:column="44">static_cast</name><argument_list pos:line="1037" pos:column="55">&lt;<argument><expr><name pos:line="1037" pos:column="56">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1037" pos:column="60">(<argument><expr><name pos:line="1037" pos:column="61">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1038" pos:column="33">if <condition pos:line="1038" pos:column="36">(<expr><name pos:line="1038" pos:column="37">nStart</name> <op:operator pos:line="1038" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="1038" pos:column="47">0</lit:literal> <op:operator pos:line="1038" pos:column="49">&amp;&amp;</op:operator> <name pos:line="1038" pos:column="52">nEnd</name> <op:operator pos:line="1038" pos:column="57">==</op:operator> <op:operator pos:line="1038" pos:column="60">-</op:operator><lit:literal type="number" pos:line="1038" pos:column="61">1</lit:literal></expr>)</condition><then pos:line="1038" pos:column="63"> <block pos:line="1038" pos:column="64">{
					<expr_stmt><expr><name pos:line="1039" pos:column="41">nEnd</name> <op:operator pos:line="1039" pos:column="46">=</op:operator> <call><name><name pos:line="1039" pos:column="48">pdoc</name><op:operator pos:line="1039" pos:column="52">-&gt;</op:operator><name pos:line="1039" pos:column="54">Length</name></name><argument_list pos:line="1039" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="1041" pos:column="33">if <condition pos:line="1041" pos:column="36">(<expr><name pos:line="1041" pos:column="37">nStart</name> <op:operator pos:line="1041" pos:column="44">==</op:operator> <op:operator pos:line="1041" pos:column="47">-</op:operator><lit:literal type="number" pos:line="1041" pos:column="48">1</lit:literal></expr>)</condition><then pos:line="1041" pos:column="50"> <block pos:line="1041" pos:column="51">{
					<expr_stmt><expr><name pos:line="1042" pos:column="41">nStart</name> <op:operator pos:line="1042" pos:column="48">=</op:operator> <name pos:line="1042" pos:column="50">nEnd</name></expr>;</expr_stmt>	<comment type="line" pos:line="1042" pos:column="57">// Remove selection</comment>
				}</block></then></if>
				<if pos:line="1044" pos:column="33">if <condition pos:line="1044" pos:column="36">(<expr><name pos:line="1044" pos:column="37">nStart</name> <op:operator pos:line="1044" pos:column="44">&gt;</op:operator> <name pos:line="1044" pos:column="46">nEnd</name></expr>)</condition><then pos:line="1044" pos:column="51"> <block pos:line="1044" pos:column="52">{
					<expr_stmt><expr><call><name pos:line="1045" pos:column="41">SetSelection</name><argument_list pos:line="1045" pos:column="53">(<argument><expr><name pos:line="1045" pos:column="54">nEnd</name></expr></argument>, <argument><expr><name pos:line="1045" pos:column="60">nStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1046" pos:column="35">else <block pos:line="1046" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="1047" pos:column="41">SetSelection</name><argument_list pos:line="1047" pos:column="53">(<argument><expr><name pos:line="1047" pos:column="54">nStart</name></expr></argument>, <argument><expr><name pos:line="1047" pos:column="62">nEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name pos:line="1049" pos:column="33">EnsureCaretVisible</name><argument_list pos:line="1049" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break pos:line="1051" pos:column="25">break;</break>

		</case><case pos:line="1053" pos:column="17">case <expr><name pos:line="1053" pos:column="22">EM_EXSETSEL</name></expr>: <block pos:line="1053" pos:column="35">{
				<if pos:line="1054" pos:column="33">if <condition pos:line="1054" pos:column="36">(<expr><name pos:line="1054" pos:column="37">lParam</name> <op:operator pos:line="1054" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="1054" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="1054" pos:column="49"> <block pos:line="1054" pos:column="50">{
					<return pos:line="1055" pos:column="41">return <expr><lit:literal type="number" pos:line="1055" pos:column="48">0</lit:literal></expr>;</return>
				}</block></then></if>
				<decl_stmt><decl><type><name pos:line="1057" pos:column="33">Sci_CharacterRange</name> <type:modifier pos:line="1057" pos:column="52">*</type:modifier></type><name pos:line="1057" pos:column="53">pCR</name> <init pos:line="1057" pos:column="57">= <expr><call><name><name pos:line="1057" pos:column="59">reinterpret_cast</name><argument_list pos:line="1057" pos:column="75">&lt;<argument><expr><name pos:line="1057" pos:column="76">Sci_CharacterRange</name> <op:operator pos:line="1057" pos:column="95">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1057" pos:column="97">(<argument><expr><name pos:line="1057" pos:column="98">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="1058" pos:column="33">sel</name><op:operator pos:line="1058" pos:column="36">.</op:operator><name pos:line="1058" pos:column="37">selType</name></name> <op:operator pos:line="1058" pos:column="45">=</op:operator> <name><name pos:line="1058" pos:column="47">Selection</name><op:operator pos:line="1058" pos:column="56">::</op:operator><name pos:line="1058" pos:column="58">selStream</name></name></expr>;</expr_stmt>
				<if pos:line="1059" pos:column="33">if <condition pos:line="1059" pos:column="36">(<expr><name><name pos:line="1059" pos:column="37">pCR</name><op:operator pos:line="1059" pos:column="40">-&gt;</op:operator><name pos:line="1059" pos:column="42">cpMin</name></name> <op:operator pos:line="1059" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="1059" pos:column="51">0</lit:literal> <op:operator pos:line="1059" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="1059" pos:column="56">pCR</name><op:operator pos:line="1059" pos:column="59">-&gt;</op:operator><name pos:line="1059" pos:column="61">cpMax</name></name> <op:operator pos:line="1059" pos:column="67">==</op:operator> <op:operator pos:line="1059" pos:column="70">-</op:operator><lit:literal type="number" pos:line="1059" pos:column="71">1</lit:literal></expr>)</condition><then pos:line="1059" pos:column="73"> <block pos:line="1059" pos:column="74">{
					<expr_stmt><expr><call><name pos:line="1060" pos:column="41">SetSelection</name><argument_list pos:line="1060" pos:column="53">(<argument><expr><name><name pos:line="1060" pos:column="54">pCR</name><op:operator pos:line="1060" pos:column="57">-&gt;</op:operator><name pos:line="1060" pos:column="59">cpMin</name></name></expr></argument>, <argument><expr><call><name><name pos:line="1060" pos:column="66">pdoc</name><op:operator pos:line="1060" pos:column="70">-&gt;</op:operator><name pos:line="1060" pos:column="72">Length</name></name><argument_list pos:line="1060" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1061" pos:column="35">else <block pos:line="1061" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="1062" pos:column="41">SetSelection</name><argument_list pos:line="1062" pos:column="53">(<argument><expr><name><name pos:line="1062" pos:column="54">pCR</name><op:operator pos:line="1062" pos:column="57">-&gt;</op:operator><name pos:line="1062" pos:column="59">cpMin</name></name></expr></argument>, <argument><expr><name><name pos:line="1062" pos:column="66">pCR</name><op:operator pos:line="1062" pos:column="69">-&gt;</op:operator><name pos:line="1062" pos:column="71">cpMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name pos:line="1064" pos:column="33">EnsureCaretVisible</name><argument_list pos:line="1064" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				<return pos:line="1065" pos:column="33">return <expr><call><name><name pos:line="1065" pos:column="40">pdoc</name><op:operator pos:line="1065" pos:column="44">-&gt;</op:operator><name pos:line="1065" pos:column="46">LineFromPosition</name></name><argument_list pos:line="1065" pos:column="62">(<argument><expr><call><name pos:line="1065" pos:column="63">SelectionStart</name><argument_list pos:line="1065" pos:column="77">()</argument_list></call><op:operator pos:line="1065" pos:column="79">.</op:operator><call><name pos:line="1065" pos:column="80">Position</name><argument_list pos:line="1065" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block>

		</case><case pos:line="1068" pos:column="17">case <expr><name pos:line="1068" pos:column="22">SCI_GETDIRECTFUNCTION</name></expr>:
			<return pos:line="1069" pos:column="25">return <expr><call><name><name pos:line="1069" pos:column="32">reinterpret_cast</name><argument_list pos:line="1069" pos:column="48">&lt;<argument><expr><name pos:line="1069" pos:column="49">sptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1069" pos:column="56">(<argument><expr><name pos:line="1069" pos:column="57">DirectFunction</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="1071" pos:column="17">case <expr><name pos:line="1071" pos:column="22">SCI_GETDIRECTPOINTER</name></expr>:
			<return pos:line="1072" pos:column="25">return <expr><call><name><name pos:line="1072" pos:column="32">reinterpret_cast</name><argument_list pos:line="1072" pos:column="48">&lt;<argument><expr><name pos:line="1072" pos:column="49">sptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1072" pos:column="56">(<argument><expr><name pos:line="1072" pos:column="57">this</name></expr></argument>)</argument_list></call></expr>;</return>

		</case><case pos:line="1074" pos:column="17">case <expr><name pos:line="1074" pos:column="22">SCI_GRABFOCUS</name></expr>:
			<expr_stmt><expr><call><name><op:operator pos:line="1075" pos:column="25">::</op:operator><name pos:line="1075" pos:column="27">SetFocus</name></name><argument_list pos:line="1075" pos:column="35">(<argument><expr><call><name pos:line="1075" pos:column="36">MainHWND</name><argument_list pos:line="1075" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="1076" pos:column="25">break;</break>

		</case><case pos:line="1078" pos:column="17">case <expr><name pos:line="1078" pos:column="22">SCI_SETKEYSUNICODE</name></expr>:
			<expr_stmt><expr><name pos:line="1079" pos:column="25">keysAlwaysUnicode</name> <op:operator pos:line="1079" pos:column="43">=</op:operator> <name pos:line="1079" pos:column="45">wParam</name> <op:operator pos:line="1079" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="1079" pos:column="55">0</lit:literal></expr>;</expr_stmt>
			<break pos:line="1080" pos:column="25">break;</break>

		</case><case pos:line="1082" pos:column="17">case <expr><name pos:line="1082" pos:column="22">SCI_GETKEYSUNICODE</name></expr>:
			<return pos:line="1083" pos:column="25">return <expr><name pos:line="1083" pos:column="32">keysAlwaysUnicode</name></expr>;</return>

<cpp:ifdef pos:line="1085" pos:column="1">#<cpp:directive pos:line="1085" pos:column="2">ifdef</cpp:directive> <name pos:line="1085" pos:column="8">SCI_LEXER</name></cpp:ifdef>
		</case><case pos:line="1086" pos:column="17">case <expr><name pos:line="1086" pos:column="22">SCI_LOADLEXERLIBRARY</name></expr>:
			<expr_stmt><expr><call><name><name pos:line="1087" pos:column="25">LexerManager</name><op:operator pos:line="1087" pos:column="37">::</op:operator><name pos:line="1087" pos:column="39">GetInstance</name></name><argument_list pos:line="1087" pos:column="50">()</argument_list></call><op:operator pos:line="1087" pos:column="52">-&gt;</op:operator><call><name pos:line="1087" pos:column="54">Load</name><argument_list pos:line="1087" pos:column="58">(<argument><expr><call><name><name pos:line="1087" pos:column="59">reinterpret_cast</name><argument_list pos:line="1087" pos:column="75">&lt;<argument><expr><specifier pos:line="1087" pos:column="76">const</specifier> <name pos:line="1087" pos:column="82">char</name> <op:operator pos:line="1087" pos:column="87">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1087" pos:column="89">(<argument><expr><name pos:line="1087" pos:column="90">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="1088" pos:column="25">break;</break>
<cpp:endif pos:line="1089" pos:column="1">#<cpp:directive pos:line="1089" pos:column="2">endif</cpp:directive></cpp:endif>

		</case><default pos:line="1091" pos:column="17">default:
			<return pos:line="1092" pos:column="25">return <expr><call><name><name pos:line="1092" pos:column="32">ScintillaBase</name><op:operator pos:line="1092" pos:column="45">::</op:operator><name pos:line="1092" pos:column="47">WndProc</name></name><argument_list pos:line="1092" pos:column="54">(<argument><expr><name pos:line="1092" pos:column="55">iMessage</name></expr></argument>, <argument><expr><name pos:line="1092" pos:column="65">wParam</name></expr></argument>, <argument><expr><name pos:line="1092" pos:column="73">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
		</default>}</block></switch>
	}</block> <catch pos:line="1094" pos:column="11">catch <parameter_list pos:line="1094" pos:column="17">(<param><decl><type><name><name pos:line="1094" pos:column="18">std</name><op:operator pos:line="1094" pos:column="21">::</op:operator><name pos:line="1094" pos:column="23">bad_alloc</name></name> <type:modifier pos:line="1094" pos:column="33">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1094" pos:column="36">{
		<expr_stmt><expr><name pos:line="1095" pos:column="17">errorStatus</name> <op:operator pos:line="1095" pos:column="29">=</op:operator> <name pos:line="1095" pos:column="31">SC_STATUS_BADALLOC</name></expr>;</expr_stmt>
	}</block></catch> <catch pos:line="1096" pos:column="11">catch <parameter_list pos:line="1096" pos:column="17">(<param><decl><type><type:modifier pos:line="1096" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1096" pos:column="23">{
		<expr_stmt><expr><name pos:line="1097" pos:column="17">errorStatus</name> <op:operator pos:line="1097" pos:column="29">=</op:operator> <name pos:line="1097" pos:column="31">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="1099" pos:column="9">return <expr><lit:literal type="number" pos:line="1099" pos:column="16">0l</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1102" pos:column="1">bool</name></type> <name><name pos:line="1102" pos:column="6">ScintillaWin</name><op:operator pos:line="1102" pos:column="18">::</op:operator><name pos:line="1102" pos:column="20">ValidCodePage</name></name><parameter_list pos:line="1102" pos:column="33">(<param><decl><type><name pos:line="1102" pos:column="34">int</name></type> <name pos:line="1102" pos:column="38">codePage</name></decl></param>)</parameter_list> <specifier pos:line="1102" pos:column="48">const</specifier> <block pos:line="1102" pos:column="54">{
	<return pos:line="1103" pos:column="9">return <expr><name pos:line="1103" pos:column="16">codePage</name> <op:operator pos:line="1103" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="1103" pos:column="28">0</lit:literal> <op:operator pos:line="1103" pos:column="30">||</op:operator> <name pos:line="1103" pos:column="33">codePage</name> <op:operator pos:line="1103" pos:column="42">==</op:operator> <name pos:line="1103" pos:column="45">SC_CP_UTF8</name> <op:operator pos:line="1103" pos:column="56">||</op:operator>
	       <name pos:line="1104" pos:column="16">codePage</name> <op:operator pos:line="1104" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="1104" pos:column="28">932</lit:literal> <op:operator pos:line="1104" pos:column="32">||</op:operator> <name pos:line="1104" pos:column="35">codePage</name> <op:operator pos:line="1104" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="1104" pos:column="47">936</lit:literal> <op:operator pos:line="1104" pos:column="51">||</op:operator> <name pos:line="1104" pos:column="54">codePage</name> <op:operator pos:line="1104" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="1104" pos:column="66">949</lit:literal> <op:operator pos:line="1104" pos:column="70">||</op:operator>
	       <name pos:line="1105" pos:column="16">codePage</name> <op:operator pos:line="1105" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="1105" pos:column="28">950</lit:literal> <op:operator pos:line="1105" pos:column="32">||</op:operator> <name pos:line="1105" pos:column="35">codePage</name> <op:operator pos:line="1105" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="1105" pos:column="47">1361</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1108" pos:column="1">sptr_t</name></type> <name><name pos:line="1108" pos:column="8">ScintillaWin</name><op:operator pos:line="1108" pos:column="20">::</op:operator><name pos:line="1108" pos:column="22">DefWndProc</name></name><parameter_list pos:line="1108" pos:column="32">(<param><decl><type><name pos:line="1108" pos:column="33">unsigned</name> <name pos:line="1108" pos:column="42">int</name></type> <name pos:line="1108" pos:column="46">iMessage</name></decl></param>, <param><decl><type><name pos:line="1108" pos:column="56">uptr_t</name></type> <name pos:line="1108" pos:column="63">wParam</name></decl></param>, <param><decl><type><name pos:line="1108" pos:column="71">sptr_t</name></type> <name pos:line="1108" pos:column="78">lParam</name></decl></param>)</parameter_list> <block pos:line="1108" pos:column="86">{
	<return pos:line="1109" pos:column="9">return <expr><call><name><op:operator pos:line="1109" pos:column="16">::</op:operator><name pos:line="1109" pos:column="18">DefWindowProc</name></name><argument_list pos:line="1109" pos:column="31">(<argument><expr><call><name pos:line="1109" pos:column="32">MainHWND</name><argument_list pos:line="1109" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1109" pos:column="44">iMessage</name></expr></argument>, <argument><expr><name pos:line="1109" pos:column="54">wParam</name></expr></argument>, <argument><expr><name pos:line="1109" pos:column="62">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1112" pos:column="1">void</name></type> <name><name pos:line="1112" pos:column="6">ScintillaWin</name><op:operator pos:line="1112" pos:column="18">::</op:operator><name pos:line="1112" pos:column="20">SetTicking</name></name><parameter_list pos:line="1112" pos:column="30">(<param><decl><type><name pos:line="1112" pos:column="31">bool</name></type> <name pos:line="1112" pos:column="36">on</name></decl></param>)</parameter_list> <block pos:line="1112" pos:column="40">{
	<if pos:line="1113" pos:column="9">if <condition pos:line="1113" pos:column="12">(<expr><name><name pos:line="1113" pos:column="13">timer</name><op:operator pos:line="1113" pos:column="18">.</op:operator><name pos:line="1113" pos:column="19">ticking</name></name> <op:operator pos:line="1113" pos:column="27">!=</op:operator> <name pos:line="1113" pos:column="30">on</name></expr>)</condition><then pos:line="1113" pos:column="33"> <block pos:line="1113" pos:column="34">{
		<expr_stmt><expr><name><name pos:line="1114" pos:column="17">timer</name><op:operator pos:line="1114" pos:column="22">.</op:operator><name pos:line="1114" pos:column="23">ticking</name></name> <op:operator pos:line="1114" pos:column="31">=</op:operator> <name pos:line="1114" pos:column="33">on</name></expr>;</expr_stmt>
		<if pos:line="1115" pos:column="17">if <condition pos:line="1115" pos:column="20">(<expr><name><name pos:line="1115" pos:column="21">timer</name><op:operator pos:line="1115" pos:column="26">.</op:operator><name pos:line="1115" pos:column="27">ticking</name></name></expr>)</condition><then pos:line="1115" pos:column="35"> <block pos:line="1115" pos:column="36">{
			<expr_stmt><expr><name><name pos:line="1116" pos:column="25">timer</name><op:operator pos:line="1116" pos:column="30">.</op:operator><name pos:line="1116" pos:column="31">tickerID</name></name> <op:operator pos:line="1116" pos:column="40">=</op:operator> <call><name><op:operator pos:line="1116" pos:column="42">::</op:operator><name pos:line="1116" pos:column="44">SetTimer</name></name><argument_list pos:line="1116" pos:column="52">(<argument><expr><call><name pos:line="1116" pos:column="53">MainHWND</name><argument_list pos:line="1116" pos:column="61">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1116" pos:column="65">standardTimerID</name></expr></argument>, <argument><expr><name><name pos:line="1116" pos:column="82">timer</name><op:operator pos:line="1116" pos:column="87">.</op:operator><name pos:line="1116" pos:column="88">tickSize</name></name></expr></argument>, <argument><expr><name pos:line="1116" pos:column="98">NULL</name></expr></argument>)</argument_list></call>
				<op:operator pos:line="1117" pos:column="33">?</op:operator> <call><name><name pos:line="1117" pos:column="35">reinterpret_cast</name><argument_list pos:line="1117" pos:column="51">&lt;<argument><expr><name pos:line="1117" pos:column="52">TickerID</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1117" pos:column="61">(<argument><expr><name pos:line="1117" pos:column="62">standardTimerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="1117" pos:column="79">:</op:operator> <lit:literal type="number" pos:line="1117" pos:column="81">0</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="1118" pos:column="19">else <block pos:line="1118" pos:column="24">{
			<expr_stmt><expr><call><name><op:operator pos:line="1119" pos:column="25">::</op:operator><name pos:line="1119" pos:column="27">KillTimer</name></name><argument_list pos:line="1119" pos:column="36">(<argument><expr><call><name pos:line="1119" pos:column="37">MainHWND</name><argument_list pos:line="1119" pos:column="45">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1119" pos:column="49">reinterpret_cast</name><argument_list pos:line="1119" pos:column="65">&lt;<argument><expr><name pos:line="1119" pos:column="66">uptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1119" pos:column="73">(<argument><expr><name><name pos:line="1119" pos:column="74">timer</name><op:operator pos:line="1119" pos:column="79">.</op:operator><name pos:line="1119" pos:column="80">tickerID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1120" pos:column="25">timer</name><op:operator pos:line="1120" pos:column="30">.</op:operator><name pos:line="1120" pos:column="31">tickerID</name></name> <op:operator pos:line="1120" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="1120" pos:column="42">0</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>
	<expr_stmt><expr><name><name pos:line="1123" pos:column="9">timer</name><op:operator pos:line="1123" pos:column="14">.</op:operator><name pos:line="1123" pos:column="15">ticksToWait</name></name> <op:operator pos:line="1123" pos:column="27">=</op:operator> <name><name pos:line="1123" pos:column="29">caret</name><op:operator pos:line="1123" pos:column="34">.</op:operator><name pos:line="1123" pos:column="35">period</name></name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1126" pos:column="1">bool</name></type> <name><name pos:line="1126" pos:column="6">ScintillaWin</name><op:operator pos:line="1126" pos:column="18">::</op:operator><name pos:line="1126" pos:column="20">SetIdle</name></name><parameter_list pos:line="1126" pos:column="27">(<param><decl><type><name pos:line="1126" pos:column="28">bool</name></type> <name pos:line="1126" pos:column="33">on</name></decl></param>)</parameter_list> <block pos:line="1126" pos:column="37">{
	<comment type="line" pos:line="1127" pos:column="9">// On Win32 the Idler is implemented as a Timer on the Scintilla window.  This</comment>
	<comment type="line" pos:line="1128" pos:column="9">// takes advantage of the fact that WM_TIMER messages are very low priority,</comment>
	<comment type="line" pos:line="1129" pos:column="9">// and are only posted when the message queue is empty, i.e. during idle time.</comment>
	<if pos:line="1130" pos:column="9">if <condition pos:line="1130" pos:column="12">(<expr><name><name pos:line="1130" pos:column="13">idler</name><op:operator pos:line="1130" pos:column="18">.</op:operator><name pos:line="1130" pos:column="19">state</name></name> <op:operator pos:line="1130" pos:column="25">!=</op:operator> <name pos:line="1130" pos:column="28">on</name></expr>)</condition><then pos:line="1130" pos:column="31"> <block pos:line="1130" pos:column="32">{
		<if pos:line="1131" pos:column="17">if <condition pos:line="1131" pos:column="20">(<expr><name pos:line="1131" pos:column="21">on</name></expr>)</condition><then pos:line="1131" pos:column="24"> <block pos:line="1131" pos:column="25">{
			<expr_stmt><expr><name><name pos:line="1132" pos:column="25">idler</name><op:operator pos:line="1132" pos:column="30">.</op:operator><name pos:line="1132" pos:column="31">idlerID</name></name> <op:operator pos:line="1132" pos:column="39">=</op:operator> <call><name><op:operator pos:line="1132" pos:column="41">::</op:operator><name pos:line="1132" pos:column="43">SetTimer</name></name><argument_list pos:line="1132" pos:column="51">(<argument><expr><call><name pos:line="1132" pos:column="52">MainHWND</name><argument_list pos:line="1132" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1132" pos:column="64">idleTimerID</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1132" pos:column="77">10</lit:literal></expr></argument>, <argument><expr><name pos:line="1132" pos:column="81">NULL</name></expr></argument>)</argument_list></call>
				<op:operator pos:line="1133" pos:column="33">?</op:operator> <call><name><name pos:line="1133" pos:column="35">reinterpret_cast</name><argument_list pos:line="1133" pos:column="51">&lt;<argument><expr><name pos:line="1133" pos:column="52">IdlerID</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1133" pos:column="60">(<argument><expr><name pos:line="1133" pos:column="61">idleTimerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="1133" pos:column="74">:</op:operator> <lit:literal type="number" pos:line="1133" pos:column="76">0</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="1134" pos:column="19">else <block pos:line="1134" pos:column="24">{
			<expr_stmt><expr><call><name><op:operator pos:line="1135" pos:column="25">::</op:operator><name pos:line="1135" pos:column="27">KillTimer</name></name><argument_list pos:line="1135" pos:column="36">(<argument><expr><call><name pos:line="1135" pos:column="37">MainHWND</name><argument_list pos:line="1135" pos:column="45">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1135" pos:column="49">reinterpret_cast</name><argument_list pos:line="1135" pos:column="65">&lt;<argument><expr><name pos:line="1135" pos:column="66">uptr_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1135" pos:column="73">(<argument><expr><name><name pos:line="1135" pos:column="74">idler</name><op:operator pos:line="1135" pos:column="79">.</op:operator><name pos:line="1135" pos:column="80">idlerID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1136" pos:column="25">idler</name><op:operator pos:line="1136" pos:column="30">.</op:operator><name pos:line="1136" pos:column="31">idlerID</name></name> <op:operator pos:line="1136" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="1136" pos:column="41">0</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name><name pos:line="1138" pos:column="17">idler</name><op:operator pos:line="1138" pos:column="22">.</op:operator><name pos:line="1138" pos:column="23">state</name></name> <op:operator pos:line="1138" pos:column="29">=</op:operator> <name><name pos:line="1138" pos:column="31">idler</name><op:operator pos:line="1138" pos:column="36">.</op:operator><name pos:line="1138" pos:column="37">idlerID</name></name> <op:operator pos:line="1138" pos:column="45">!=</op:operator> <lit:literal type="number" pos:line="1138" pos:column="48">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="1140" pos:column="9">return <expr><name><name pos:line="1140" pos:column="16">idler</name><op:operator pos:line="1140" pos:column="21">.</op:operator><name pos:line="1140" pos:column="22">state</name></name></expr>;</return>
}</block></function>

<function><type><name pos:line="1143" pos:column="1">void</name></type> <name><name pos:line="1143" pos:column="6">ScintillaWin</name><op:operator pos:line="1143" pos:column="18">::</op:operator><name pos:line="1143" pos:column="20">SetMouseCapture</name></name><parameter_list pos:line="1143" pos:column="35">(<param><decl><type><name pos:line="1143" pos:column="36">bool</name></type> <name pos:line="1143" pos:column="41">on</name></decl></param>)</parameter_list> <block pos:line="1143" pos:column="45">{
	<if pos:line="1144" pos:column="9">if <condition pos:line="1144" pos:column="12">(<expr><name pos:line="1144" pos:column="13">mouseDownCaptures</name></expr>)</condition><then pos:line="1144" pos:column="31"> <block pos:line="1144" pos:column="32">{
		<if pos:line="1145" pos:column="17">if <condition pos:line="1145" pos:column="20">(<expr><name pos:line="1145" pos:column="21">on</name></expr>)</condition><then pos:line="1145" pos:column="24"> <block pos:line="1145" pos:column="25">{
			<expr_stmt><expr><call><name><op:operator pos:line="1146" pos:column="25">::</op:operator><name pos:line="1146" pos:column="27">SetCapture</name></name><argument_list pos:line="1146" pos:column="37">(<argument><expr><call><name pos:line="1146" pos:column="38">MainHWND</name><argument_list pos:line="1146" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1147" pos:column="19">else <block pos:line="1147" pos:column="24">{
			<expr_stmt><expr><call><name><op:operator pos:line="1148" pos:column="25">::</op:operator><name pos:line="1148" pos:column="27">ReleaseCapture</name></name><argument_list pos:line="1148" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="1151" pos:column="9">capturedMouse</name> <op:operator pos:line="1151" pos:column="23">=</op:operator> <name pos:line="1151" pos:column="25">on</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1154" pos:column="1">bool</name></type> <name><name pos:line="1154" pos:column="6">ScintillaWin</name><op:operator pos:line="1154" pos:column="18">::</op:operator><name pos:line="1154" pos:column="20">HaveMouseCapture</name></name><parameter_list pos:line="1154" pos:column="36">()</parameter_list> <block pos:line="1154" pos:column="39">{
	<comment type="line" pos:line="1155" pos:column="9">// Cannot just see if GetCapture is this window as the scroll bar also sets capture for the window</comment>
	<return pos:line="1156" pos:column="9">return <expr><name pos:line="1156" pos:column="16">capturedMouse</name></expr>;</return>
	<comment type="line" pos:line="1157" pos:column="9">//return capturedMouse &amp;&amp; (::GetCapture() == MainHWND());</comment>
}</block></function>

<function><type><name pos:line="1160" pos:column="1">void</name></type> <name><name pos:line="1160" pos:column="6">ScintillaWin</name><op:operator pos:line="1160" pos:column="18">::</op:operator><name pos:line="1160" pos:column="20">SetTrackMouseLeaveEvent</name></name><parameter_list pos:line="1160" pos:column="43">(<param><decl><type><name pos:line="1160" pos:column="44">bool</name></type> <name pos:line="1160" pos:column="49">on</name></decl></param>)</parameter_list> <block pos:line="1160" pos:column="53">{
	<if pos:line="1161" pos:column="9">if <condition pos:line="1161" pos:column="12">(<expr><name pos:line="1161" pos:column="13">on</name> <op:operator pos:line="1161" pos:column="16">&amp;&amp;</op:operator> <name pos:line="1161" pos:column="19">TrackMouseEventFn</name> <op:operator pos:line="1161" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="1161" pos:column="40">!</op:operator><name pos:line="1161" pos:column="41">trackedMouseLeave</name></expr>)</condition><then pos:line="1161" pos:column="59"> <block pos:line="1161" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="1162" pos:column="17">TRACKMOUSEEVENT</name></type> <name pos:line="1162" pos:column="33">tme</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="1163" pos:column="17">tme</name><op:operator pos:line="1163" pos:column="20">.</op:operator><name pos:line="1163" pos:column="21">cbSize</name></name> <op:operator pos:line="1163" pos:column="28">=</op:operator> <sizeof pos:line="1163" pos:column="30">sizeof<argument_list pos:line="1163" pos:column="36">(<argument><expr><name pos:line="1163" pos:column="37">tme</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1164" pos:column="17">tme</name><op:operator pos:line="1164" pos:column="20">.</op:operator><name pos:line="1164" pos:column="21">dwFlags</name></name> <op:operator pos:line="1164" pos:column="29">=</op:operator> <name pos:line="1164" pos:column="31">TME_LEAVE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1165" pos:column="17">tme</name><op:operator pos:line="1165" pos:column="20">.</op:operator><name pos:line="1165" pos:column="21">hwndTrack</name></name> <op:operator pos:line="1165" pos:column="31">=</op:operator> <call><name pos:line="1165" pos:column="33">MainHWND</name><argument_list pos:line="1165" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1166" pos:column="17">TrackMouseEventFn</name><argument_list pos:line="1166" pos:column="34">(<argument><expr><op:operator pos:line="1166" pos:column="35">&amp;</op:operator><name pos:line="1166" pos:column="36">tme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="1168" pos:column="9">trackedMouseLeave</name> <op:operator pos:line="1168" pos:column="27">=</op:operator> <name pos:line="1168" pos:column="29">on</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1171" pos:column="1">bool</name></type> <name><name pos:line="1171" pos:column="6">ScintillaWin</name><op:operator pos:line="1171" pos:column="18">::</op:operator><name pos:line="1171" pos:column="20">PaintContains</name></name><parameter_list pos:line="1171" pos:column="33">(<param><decl><type><name pos:line="1171" pos:column="34">PRectangle</name></type> <name pos:line="1171" pos:column="45">rc</name></decl></param>)</parameter_list> <block pos:line="1171" pos:column="49">{
	<decl_stmt><decl><type><name pos:line="1172" pos:column="9">bool</name></type> <name pos:line="1172" pos:column="14">contains</name> <init pos:line="1172" pos:column="23">= <expr><lit:literal type="boolean" pos:line="1172" pos:column="25">true</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="1173" pos:column="9">if <condition pos:line="1173" pos:column="12">(<expr><op:operator pos:line="1173" pos:column="13">(</op:operator><name pos:line="1173" pos:column="14">paintState</name> <op:operator pos:line="1173" pos:column="25">==</op:operator> <name pos:line="1173" pos:column="28">painting</name><op:operator pos:line="1173" pos:column="36">)</op:operator> <op:operator pos:line="1173" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="1173" pos:column="41">(</op:operator><op:operator pos:line="1173" pos:column="42">!</op:operator><call><name><name pos:line="1173" pos:column="43">rc</name><op:operator pos:line="1173" pos:column="45">.</op:operator><name pos:line="1173" pos:column="46">Empty</name></name><argument_list pos:line="1173" pos:column="51">()</argument_list></call><op:operator pos:line="1173" pos:column="53">)</op:operator></expr>)</condition><then pos:line="1173" pos:column="55"> <block pos:line="1173" pos:column="56">{
		<if pos:line="1174" pos:column="17">if <condition pos:line="1174" pos:column="20">(<expr><op:operator pos:line="1174" pos:column="21">!</op:operator><call><name><name pos:line="1174" pos:column="22">rcPaint</name><op:operator pos:line="1174" pos:column="29">.</op:operator><name pos:line="1174" pos:column="30">Contains</name></name><argument_list pos:line="1174" pos:column="38">(<argument><expr><name pos:line="1174" pos:column="39">rc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1174" pos:column="43"> <block pos:line="1174" pos:column="44">{
			<expr_stmt><expr><name pos:line="1175" pos:column="25">contains</name> <op:operator pos:line="1175" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1175" pos:column="36">false</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="1176" pos:column="19">else <block pos:line="1176" pos:column="24">{
			<comment type="line" pos:line="1177" pos:column="25">// In bounding rectangle so check more accurately using region</comment>
			<decl_stmt><decl><type><name pos:line="1178" pos:column="25">HRGN</name></type> <name pos:line="1178" pos:column="30">hRgnRange</name> <init pos:line="1178" pos:column="40">= <expr><call><name><op:operator pos:line="1178" pos:column="42">::</op:operator><name pos:line="1178" pos:column="44">CreateRectRgn</name></name><argument_list pos:line="1178" pos:column="57">(<argument><expr><name><name pos:line="1178" pos:column="58">rc</name><op:operator pos:line="1178" pos:column="60">.</op:operator><name pos:line="1178" pos:column="61">left</name></name></expr></argument>, <argument><expr><name><name pos:line="1178" pos:column="67">rc</name><op:operator pos:line="1178" pos:column="69">.</op:operator><name pos:line="1178" pos:column="70">top</name></name></expr></argument>, <argument><expr><name><name pos:line="1178" pos:column="75">rc</name><op:operator pos:line="1178" pos:column="77">.</op:operator><name pos:line="1178" pos:column="78">right</name></name></expr></argument>, <argument><expr><name><name pos:line="1178" pos:column="85">rc</name><op:operator pos:line="1178" pos:column="87">.</op:operator><name pos:line="1178" pos:column="88">bottom</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1179" pos:column="25">if <condition pos:line="1179" pos:column="28">(<expr><name pos:line="1179" pos:column="29">hRgnRange</name></expr>)</condition><then pos:line="1179" pos:column="39"> <block pos:line="1179" pos:column="40">{
				<decl_stmt><decl><type><name pos:line="1180" pos:column="33">HRGN</name></type> <name pos:line="1180" pos:column="38">hRgnDest</name> <init pos:line="1180" pos:column="47">= <expr><call><name><op:operator pos:line="1180" pos:column="49">::</op:operator><name pos:line="1180" pos:column="51">CreateRectRgn</name></name><argument_list pos:line="1180" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="1180" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1180" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1180" pos:column="71">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1180" pos:column="74">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1181" pos:column="33">if <condition pos:line="1181" pos:column="36">(<expr><name pos:line="1181" pos:column="37">hRgnDest</name></expr>)</condition><then pos:line="1181" pos:column="46"> <block pos:line="1181" pos:column="47">{
					<decl_stmt><decl><type><name pos:line="1182" pos:column="41">int</name></type> <name pos:line="1182" pos:column="45">combination</name> <init pos:line="1182" pos:column="57">= <expr><call><name><op:operator pos:line="1182" pos:column="59">::</op:operator><name pos:line="1182" pos:column="61">CombineRgn</name></name><argument_list pos:line="1182" pos:column="71">(<argument><expr><name pos:line="1182" pos:column="72">hRgnDest</name></expr></argument>, <argument><expr><name pos:line="1182" pos:column="82">hRgnRange</name></expr></argument>, <argument><expr><name pos:line="1182" pos:column="93">hRgnUpdate</name></expr></argument>, <argument><expr><name pos:line="1182" pos:column="105">RGN_DIFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="1183" pos:column="41">if <condition pos:line="1183" pos:column="44">(<expr><name pos:line="1183" pos:column="45">combination</name> <op:operator pos:line="1183" pos:column="57">!=</op:operator> <name pos:line="1183" pos:column="60">NULLREGION</name></expr>)</condition><then pos:line="1183" pos:column="71"> <block pos:line="1183" pos:column="72">{
						<expr_stmt><expr><name pos:line="1184" pos:column="49">contains</name> <op:operator pos:line="1184" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="1184" pos:column="60">false</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><op:operator pos:line="1186" pos:column="41">::</op:operator><name pos:line="1186" pos:column="43">DeleteRgn</name></name><argument_list pos:line="1186" pos:column="52">(<argument><expr><name pos:line="1186" pos:column="53">hRgnDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><op:operator pos:line="1188" pos:column="33">::</op:operator><name pos:line="1188" pos:column="35">DeleteRgn</name></name><argument_list pos:line="1188" pos:column="44">(<argument><expr><name pos:line="1188" pos:column="45">hRgnRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
	}</block></then></if>
	<return pos:line="1192" pos:column="9">return <expr><name pos:line="1192" pos:column="16">contains</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1195" pos:column="1">void</name></type> <name><name pos:line="1195" pos:column="6">ScintillaWin</name><op:operator pos:line="1195" pos:column="18">::</op:operator><name pos:line="1195" pos:column="20">ScrollText</name></name><parameter_list pos:line="1195" pos:column="30">(<param><decl><type><name pos:line="1195" pos:column="31">int</name></type> <name pos:line="1195" pos:column="35">linesToMove</name></decl></param>)</parameter_list> <block pos:line="1195" pos:column="48">{
	<comment type="line" pos:line="1196" pos:column="9">//Platform::DebugPrintf("ScintillaWin::ScrollText %d\n", linesToMove);</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="1197" pos:column="9">::</op:operator><name pos:line="1197" pos:column="11">ScrollWindow</name></name><argument_list pos:line="1197" pos:column="23">(<argument><expr><call><name pos:line="1197" pos:column="24">MainHWND</name><argument_list pos:line="1197" pos:column="32">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1197" pos:column="36">0</lit:literal></expr></argument>,
		<argument><expr><name><name pos:line="1198" pos:column="17">vs</name><op:operator pos:line="1198" pos:column="19">.</op:operator><name pos:line="1198" pos:column="20">lineHeight</name></name> <op:operator pos:line="1198" pos:column="31">*</op:operator> <name pos:line="1198" pos:column="33">linesToMove</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1198" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1198" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1199" pos:column="9">::</op:operator><name pos:line="1199" pos:column="11">UpdateWindow</name></name><argument_list pos:line="1199" pos:column="23">(<argument><expr><call><name pos:line="1199" pos:column="24">MainHWND</name><argument_list pos:line="1199" pos:column="32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1202" pos:column="1">void</name></type> <name><name pos:line="1202" pos:column="6">ScintillaWin</name><op:operator pos:line="1202" pos:column="18">::</op:operator><name pos:line="1202" pos:column="20">UpdateSystemCaret</name></name><parameter_list pos:line="1202" pos:column="37">()</parameter_list> <block pos:line="1202" pos:column="40">{
	<if pos:line="1203" pos:column="9">if <condition pos:line="1203" pos:column="12">(<expr><name pos:line="1203" pos:column="13">hasFocus</name></expr>)</condition><then pos:line="1203" pos:column="22"> <block pos:line="1203" pos:column="23">{
		<if pos:line="1204" pos:column="17">if <condition pos:line="1204" pos:column="20">(<expr><call><name pos:line="1204" pos:column="21">HasCaretSizeChanged</name><argument_list pos:line="1204" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="1204" pos:column="43"> <block pos:line="1204" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="1205" pos:column="25">DestroySystemCaret</name><argument_list pos:line="1205" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1206" pos:column="25">CreateSystemCaret</name><argument_list pos:line="1206" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="1208" pos:column="17">Point</name></type> <name pos:line="1208" pos:column="23">pos</name> <init pos:line="1208" pos:column="27">= <expr><call><name pos:line="1208" pos:column="29">PointMainCaret</name><argument_list pos:line="1208" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1209" pos:column="17">::</op:operator><name pos:line="1209" pos:column="19">SetCaretPos</name></name><argument_list pos:line="1209" pos:column="30">(<argument><expr><name><name pos:line="1209" pos:column="31">pos</name><op:operator pos:line="1209" pos:column="34">.</op:operator><name pos:line="1209" pos:column="35">x</name></name></expr></argument>, <argument><expr><name><name pos:line="1209" pos:column="38">pos</name><op:operator pos:line="1209" pos:column="41">.</op:operator><name pos:line="1209" pos:column="42">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1213" pos:column="1">int</name></type> <name><name pos:line="1213" pos:column="5">ScintillaWin</name><op:operator pos:line="1213" pos:column="17">::</op:operator><name pos:line="1213" pos:column="19">SetScrollInfo</name></name><parameter_list pos:line="1213" pos:column="32">(<param><decl><type><name pos:line="1213" pos:column="33">int</name></type> <name pos:line="1213" pos:column="37">nBar</name></decl></param>, <param><decl><type><name pos:line="1213" pos:column="43">LPCSCROLLINFO</name></type> <name pos:line="1213" pos:column="57">lpsi</name></decl></param>, <param><decl><type><name pos:line="1213" pos:column="63">BOOL</name></type> <name pos:line="1213" pos:column="68">bRedraw</name></decl></param>)</parameter_list> <block pos:line="1213" pos:column="77">{
	<return pos:line="1214" pos:column="9">return <expr><call><name><op:operator pos:line="1214" pos:column="16">::</op:operator><name pos:line="1214" pos:column="18">SetScrollInfo</name></name><argument_list pos:line="1214" pos:column="31">(<argument><expr><call><name pos:line="1214" pos:column="32">MainHWND</name><argument_list pos:line="1214" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1214" pos:column="44">nBar</name></expr></argument>, <argument><expr><name pos:line="1214" pos:column="50">lpsi</name></expr></argument>, <argument><expr><name pos:line="1214" pos:column="56">bRedraw</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1217" pos:column="1">bool</name></type> <name><name pos:line="1217" pos:column="6">ScintillaWin</name><op:operator pos:line="1217" pos:column="18">::</op:operator><name pos:line="1217" pos:column="20">GetScrollInfo</name></name><parameter_list pos:line="1217" pos:column="33">(<param><decl><type><name pos:line="1217" pos:column="34">int</name></type> <name pos:line="1217" pos:column="38">nBar</name></decl></param>, <param><decl><type><name pos:line="1217" pos:column="44">LPSCROLLINFO</name></type> <name pos:line="1217" pos:column="57">lpsi</name></decl></param>)</parameter_list> <block pos:line="1217" pos:column="63">{
	<return pos:line="1218" pos:column="9">return <expr><call><name><op:operator pos:line="1218" pos:column="16">::</op:operator><name pos:line="1218" pos:column="18">GetScrollInfo</name></name><argument_list pos:line="1218" pos:column="31">(<argument><expr><call><name pos:line="1218" pos:column="32">MainHWND</name><argument_list pos:line="1218" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1218" pos:column="44">nBar</name></expr></argument>, <argument><expr><name pos:line="1218" pos:column="50">lpsi</name></expr></argument>)</argument_list></call> <op:operator pos:line="1218" pos:column="56">?</op:operator> <lit:literal type="boolean" pos:line="1218" pos:column="58">true</lit:literal> <op:operator pos:line="1218" pos:column="63">:</op:operator> <lit:literal type="boolean" pos:line="1218" pos:column="65">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="1221" pos:column="1">// Change the scroll position but avoid repaint if changing to same value</comment>
<function><type><name pos:line="1222" pos:column="1">void</name></type> <name><name pos:line="1222" pos:column="6">ScintillaWin</name><op:operator pos:line="1222" pos:column="18">::</op:operator><name pos:line="1222" pos:column="20">ChangeScrollPos</name></name><parameter_list pos:line="1222" pos:column="35">(<param><decl><type><name pos:line="1222" pos:column="36">int</name></type> <name pos:line="1222" pos:column="40">barType</name></decl></param>, <param><decl><type><name pos:line="1222" pos:column="49">int</name></type> <name pos:line="1222" pos:column="53">pos</name></decl></param>)</parameter_list> <block pos:line="1222" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="1223" pos:column="9">SCROLLINFO</name></type> <name pos:line="1223" pos:column="20">sci</name> <init pos:line="1223" pos:column="24">= <expr><block pos:line="1223" pos:column="26">{
		<expr><sizeof pos:line="1224" pos:column="17">sizeof<argument_list pos:line="1224" pos:column="23">(<argument><expr><name pos:line="1224" pos:column="24">sci</name></expr></argument>)</argument_list></sizeof></expr>, <expr><lit:literal type="number" pos:line="1224" pos:column="30">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1224" pos:column="33">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1224" pos:column="36">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1224" pos:column="39">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1224" pos:column="42">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1224" pos:column="45">0</lit:literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="1226" pos:column="9">sci</name><op:operator pos:line="1226" pos:column="12">.</op:operator><name pos:line="1226" pos:column="13">fMask</name></name> <op:operator pos:line="1226" pos:column="19">=</op:operator> <name pos:line="1226" pos:column="21">SIF_POS</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1227" pos:column="9">GetScrollInfo</name><argument_list pos:line="1227" pos:column="22">(<argument><expr><name pos:line="1227" pos:column="23">barType</name></expr></argument>, <argument><expr><op:operator pos:line="1227" pos:column="32">&amp;</op:operator><name pos:line="1227" pos:column="33">sci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="1228" pos:column="9">if <condition pos:line="1228" pos:column="12">(<expr><name><name pos:line="1228" pos:column="13">sci</name><op:operator pos:line="1228" pos:column="16">.</op:operator><name pos:line="1228" pos:column="17">nPos</name></name> <op:operator pos:line="1228" pos:column="22">!=</op:operator> <name pos:line="1228" pos:column="25">pos</name></expr>)</condition><then pos:line="1228" pos:column="29"> <block pos:line="1228" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="1229" pos:column="17">DwellEnd</name><argument_list pos:line="1229" pos:column="25">(<argument><expr><lit:literal type="boolean" pos:line="1229" pos:column="26">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1230" pos:column="17">sci</name><op:operator pos:line="1230" pos:column="20">.</op:operator><name pos:line="1230" pos:column="21">nPos</name></name> <op:operator pos:line="1230" pos:column="26">=</op:operator> <name pos:line="1230" pos:column="28">pos</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1231" pos:column="17">SetScrollInfo</name><argument_list pos:line="1231" pos:column="30">(<argument><expr><name pos:line="1231" pos:column="31">barType</name></expr></argument>, <argument><expr><op:operator pos:line="1231" pos:column="40">&amp;</op:operator><name pos:line="1231" pos:column="41">sci</name></expr></argument>, <argument><expr><name pos:line="1231" pos:column="46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1235" pos:column="1">void</name></type> <name><name pos:line="1235" pos:column="6">ScintillaWin</name><op:operator pos:line="1235" pos:column="18">::</op:operator><name pos:line="1235" pos:column="20">SetVerticalScrollPos</name></name><parameter_list pos:line="1235" pos:column="40">()</parameter_list> <block pos:line="1235" pos:column="43">{
	<expr_stmt><expr><call><name pos:line="1236" pos:column="9">ChangeScrollPos</name><argument_list pos:line="1236" pos:column="24">(<argument><expr><name pos:line="1236" pos:column="25">SB_VERT</name></expr></argument>, <argument><expr><name pos:line="1236" pos:column="34">topLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1239" pos:column="1">void</name></type> <name><name pos:line="1239" pos:column="6">ScintillaWin</name><op:operator pos:line="1239" pos:column="18">::</op:operator><name pos:line="1239" pos:column="20">SetHorizontalScrollPos</name></name><parameter_list pos:line="1239" pos:column="42">()</parameter_list> <block pos:line="1239" pos:column="45">{
	<expr_stmt><expr><call><name pos:line="1240" pos:column="9">ChangeScrollPos</name><argument_list pos:line="1240" pos:column="24">(<argument><expr><name pos:line="1240" pos:column="25">SB_HORZ</name></expr></argument>, <argument><expr><name pos:line="1240" pos:column="34">xOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1243" pos:column="1">bool</name></type> <name><name pos:line="1243" pos:column="6">ScintillaWin</name><op:operator pos:line="1243" pos:column="18">::</op:operator><name pos:line="1243" pos:column="20">ModifyScrollBars</name></name><parameter_list pos:line="1243" pos:column="36">(<param><decl><type><name pos:line="1243" pos:column="37">int</name></type> <name pos:line="1243" pos:column="41">nMax</name></decl></param>, <param><decl><type><name pos:line="1243" pos:column="47">int</name></type> <name pos:line="1243" pos:column="51">nPage</name></decl></param>)</parameter_list> <block pos:line="1243" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="1244" pos:column="9">bool</name></type> <name pos:line="1244" pos:column="14">modified</name> <init pos:line="1244" pos:column="23">= <expr><lit:literal type="boolean" pos:line="1244" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1245" pos:column="9">SCROLLINFO</name></type> <name pos:line="1245" pos:column="20">sci</name> <init pos:line="1245" pos:column="24">= <expr><block pos:line="1245" pos:column="26">{
		<expr><sizeof pos:line="1246" pos:column="17">sizeof<argument_list pos:line="1246" pos:column="23">(<argument><expr><name pos:line="1246" pos:column="24">sci</name></expr></argument>)</argument_list></sizeof></expr>, <expr><lit:literal type="number" pos:line="1246" pos:column="30">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1246" pos:column="33">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1246" pos:column="36">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1246" pos:column="39">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1246" pos:column="42">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="1246" pos:column="45">0</lit:literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="1248" pos:column="9">sci</name><op:operator pos:line="1248" pos:column="12">.</op:operator><name pos:line="1248" pos:column="13">fMask</name></name> <op:operator pos:line="1248" pos:column="19">=</op:operator> <name pos:line="1248" pos:column="21">SIF_PAGE</name> <op:operator pos:line="1248" pos:column="30">|</op:operator> <name pos:line="1248" pos:column="32">SIF_RANGE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1249" pos:column="9">GetScrollInfo</name><argument_list pos:line="1249" pos:column="22">(<argument><expr><name pos:line="1249" pos:column="23">SB_VERT</name></expr></argument>, <argument><expr><op:operator pos:line="1249" pos:column="32">&amp;</op:operator><name pos:line="1249" pos:column="33">sci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1250" pos:column="9">int</name></type> <name pos:line="1250" pos:column="13">vertEndPreferred</name> <init pos:line="1250" pos:column="30">= <expr><name pos:line="1250" pos:column="32">nMax</name></expr></init></decl>;</decl_stmt>
	<if pos:line="1251" pos:column="9">if <condition pos:line="1251" pos:column="12">(<expr><op:operator pos:line="1251" pos:column="13">!</op:operator><name pos:line="1251" pos:column="14">verticalScrollBarVisible</name></expr>)</condition><then pos:line="1251" pos:column="39">
		<expr_stmt><expr><name pos:line="1252" pos:column="17">vertEndPreferred</name> <op:operator pos:line="1252" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="1252" pos:column="36">0</lit:literal></expr>;</expr_stmt></then></if>
	<if pos:line="1253" pos:column="9">if <condition pos:line="1253" pos:column="12">(<expr><op:operator pos:line="1253" pos:column="13">(</op:operator><name><name pos:line="1253" pos:column="14">sci</name><op:operator pos:line="1253" pos:column="17">.</op:operator><name pos:line="1253" pos:column="18">nMin</name></name> <op:operator pos:line="1253" pos:column="23">!=</op:operator> <lit:literal type="number" pos:line="1253" pos:column="26">0</lit:literal><op:operator pos:line="1253" pos:column="27">)</op:operator> <op:operator pos:line="1253" pos:column="29">||</op:operator>
		<op:operator pos:line="1254" pos:column="17">(</op:operator><name><name pos:line="1254" pos:column="18">sci</name><op:operator pos:line="1254" pos:column="21">.</op:operator><name pos:line="1254" pos:column="22">nMax</name></name> <op:operator pos:line="1254" pos:column="27">!=</op:operator> <name pos:line="1254" pos:column="30">vertEndPreferred</name><op:operator pos:line="1254" pos:column="46">)</op:operator> <op:operator pos:line="1254" pos:column="48">||</op:operator>
	        <op:operator pos:line="1255" pos:column="17">(</op:operator><name><name pos:line="1255" pos:column="18">sci</name><op:operator pos:line="1255" pos:column="21">.</op:operator><name pos:line="1255" pos:column="22">nPage</name></name> <op:operator pos:line="1255" pos:column="28">!=</op:operator> <call><name><name pos:line="1255" pos:column="31">static_cast</name><argument_list pos:line="1255" pos:column="42">&lt;<argument><expr><name pos:line="1255" pos:column="43">unsigned</name> <name pos:line="1255" pos:column="52">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1255" pos:column="56">(<argument><expr><name pos:line="1255" pos:column="57">nPage</name></expr></argument>)</argument_list></call><op:operator pos:line="1255" pos:column="63">)</op:operator> <op:operator pos:line="1255" pos:column="65">||</op:operator>
	        <op:operator pos:line="1256" pos:column="17">(</op:operator><name><name pos:line="1256" pos:column="18">sci</name><op:operator pos:line="1256" pos:column="21">.</op:operator><name pos:line="1256" pos:column="22">nPos</name></name> <op:operator pos:line="1256" pos:column="27">!=</op:operator> <lit:literal type="number" pos:line="1256" pos:column="30">0</lit:literal><op:operator pos:line="1256" pos:column="31">)</op:operator></expr>)</condition><then pos:line="1256" pos:column="33"> <block pos:line="1256" pos:column="34">{
		<comment type="line" pos:line="1257" pos:column="17">//Platform::DebugPrintf("Scroll info changed %d %d %d %d %d\n",</comment>
		<comment type="line" pos:line="1258" pos:column="17">//	sci.nMin, sci.nMax, sci.nPage, sci.nPos, sci.nTrackPos);</comment>
		<expr_stmt><expr><name><name pos:line="1259" pos:column="17">sci</name><op:operator pos:line="1259" pos:column="20">.</op:operator><name pos:line="1259" pos:column="21">fMask</name></name> <op:operator pos:line="1259" pos:column="27">=</op:operator> <name pos:line="1259" pos:column="29">SIF_PAGE</name> <op:operator pos:line="1259" pos:column="38">|</op:operator> <name pos:line="1259" pos:column="40">SIF_RANGE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1260" pos:column="17">sci</name><op:operator pos:line="1260" pos:column="20">.</op:operator><name pos:line="1260" pos:column="21">nMin</name></name> <op:operator pos:line="1260" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="1260" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1261" pos:column="17">sci</name><op:operator pos:line="1261" pos:column="20">.</op:operator><name pos:line="1261" pos:column="21">nMax</name></name> <op:operator pos:line="1261" pos:column="26">=</op:operator> <name pos:line="1261" pos:column="28">vertEndPreferred</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1262" pos:column="17">sci</name><op:operator pos:line="1262" pos:column="20">.</op:operator><name pos:line="1262" pos:column="21">nPage</name></name> <op:operator pos:line="1262" pos:column="27">=</op:operator> <name pos:line="1262" pos:column="29">nPage</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1263" pos:column="17">sci</name><op:operator pos:line="1263" pos:column="20">.</op:operator><name pos:line="1263" pos:column="21">nPos</name></name> <op:operator pos:line="1263" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="1263" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1264" pos:column="17">sci</name><op:operator pos:line="1264" pos:column="20">.</op:operator><name pos:line="1264" pos:column="21">nTrackPos</name></name> <op:operator pos:line="1264" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="1264" pos:column="33">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1265" pos:column="17">SetScrollInfo</name><argument_list pos:line="1265" pos:column="30">(<argument><expr><name pos:line="1265" pos:column="31">SB_VERT</name></expr></argument>, <argument><expr><op:operator pos:line="1265" pos:column="40">&amp;</op:operator><name pos:line="1265" pos:column="41">sci</name></expr></argument>, <argument><expr><name pos:line="1265" pos:column="46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1266" pos:column="17">modified</name> <op:operator pos:line="1266" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1266" pos:column="28">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="1269" pos:column="9">PRectangle</name></type> <name pos:line="1269" pos:column="20">rcText</name> <init pos:line="1269" pos:column="27">= <expr><call><name pos:line="1269" pos:column="29">GetTextRectangle</name><argument_list pos:line="1269" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1270" pos:column="9">int</name></type> <name pos:line="1270" pos:column="13">horizEndPreferred</name> <init pos:line="1270" pos:column="31">= <expr><name pos:line="1270" pos:column="33">scrollWidth</name></expr></init></decl>;</decl_stmt>
	<if pos:line="1271" pos:column="9">if <condition pos:line="1271" pos:column="12">(<expr><name pos:line="1271" pos:column="13">horizEndPreferred</name> <op:operator pos:line="1271" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="1271" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="1271" pos:column="35">
		<expr_stmt><expr><name pos:line="1272" pos:column="17">horizEndPreferred</name> <op:operator pos:line="1272" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="1272" pos:column="37">0</lit:literal></expr>;</expr_stmt></then></if>
	<if pos:line="1273" pos:column="9">if <condition pos:line="1273" pos:column="12">(<expr><op:operator pos:line="1273" pos:column="13">!</op:operator><name pos:line="1273" pos:column="14">horizontalScrollBarVisible</name> <op:operator pos:line="1273" pos:column="41">||</op:operator> <op:operator pos:line="1273" pos:column="44">(</op:operator><name pos:line="1273" pos:column="45">wrapState</name> <op:operator pos:line="1273" pos:column="55">!=</op:operator> <name pos:line="1273" pos:column="58">eWrapNone</name><op:operator pos:line="1273" pos:column="67">)</op:operator></expr>)</condition><then pos:line="1273" pos:column="69">
		<expr_stmt><expr><name pos:line="1274" pos:column="17">horizEndPreferred</name> <op:operator pos:line="1274" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="1274" pos:column="37">0</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="1275" pos:column="9">unsigned</name> <name pos:line="1275" pos:column="18">int</name></type> <name pos:line="1275" pos:column="22">pageWidth</name> <init pos:line="1275" pos:column="32">= <expr><call><name><name pos:line="1275" pos:column="34">rcText</name><op:operator pos:line="1275" pos:column="40">.</op:operator><name pos:line="1275" pos:column="41">Width</name></name><argument_list pos:line="1275" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="1276" pos:column="9">sci</name><op:operator pos:line="1276" pos:column="12">.</op:operator><name pos:line="1276" pos:column="13">fMask</name></name> <op:operator pos:line="1276" pos:column="19">=</op:operator> <name pos:line="1276" pos:column="21">SIF_PAGE</name> <op:operator pos:line="1276" pos:column="30">|</op:operator> <name pos:line="1276" pos:column="32">SIF_RANGE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1277" pos:column="9">GetScrollInfo</name><argument_list pos:line="1277" pos:column="22">(<argument><expr><name pos:line="1277" pos:column="23">SB_HORZ</name></expr></argument>, <argument><expr><op:operator pos:line="1277" pos:column="32">&amp;</op:operator><name pos:line="1277" pos:column="33">sci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="1278" pos:column="9">if <condition pos:line="1278" pos:column="12">(<expr><op:operator pos:line="1278" pos:column="13">(</op:operator><name><name pos:line="1278" pos:column="14">sci</name><op:operator pos:line="1278" pos:column="17">.</op:operator><name pos:line="1278" pos:column="18">nMin</name></name> <op:operator pos:line="1278" pos:column="23">!=</op:operator> <lit:literal type="number" pos:line="1278" pos:column="26">0</lit:literal><op:operator pos:line="1278" pos:column="27">)</op:operator> <op:operator pos:line="1278" pos:column="29">||</op:operator>
		<op:operator pos:line="1279" pos:column="17">(</op:operator><name><name pos:line="1279" pos:column="18">sci</name><op:operator pos:line="1279" pos:column="21">.</op:operator><name pos:line="1279" pos:column="22">nMax</name></name> <op:operator pos:line="1279" pos:column="27">!=</op:operator> <name pos:line="1279" pos:column="30">horizEndPreferred</name><op:operator pos:line="1279" pos:column="47">)</op:operator> <op:operator pos:line="1279" pos:column="49">||</op:operator>
		<op:operator pos:line="1280" pos:column="17">(</op:operator><name><name pos:line="1280" pos:column="18">sci</name><op:operator pos:line="1280" pos:column="21">.</op:operator><name pos:line="1280" pos:column="22">nPage</name></name> <op:operator pos:line="1280" pos:column="28">!=</op:operator> <name pos:line="1280" pos:column="31">pageWidth</name><op:operator pos:line="1280" pos:column="40">)</op:operator> <op:operator pos:line="1280" pos:column="42">||</op:operator>
	        <op:operator pos:line="1281" pos:column="17">(</op:operator><name><name pos:line="1281" pos:column="18">sci</name><op:operator pos:line="1281" pos:column="21">.</op:operator><name pos:line="1281" pos:column="22">nPos</name></name> <op:operator pos:line="1281" pos:column="27">!=</op:operator> <lit:literal type="number" pos:line="1281" pos:column="30">0</lit:literal><op:operator pos:line="1281" pos:column="31">)</op:operator></expr>)</condition><then pos:line="1281" pos:column="33"> <block pos:line="1281" pos:column="34">{
		<expr_stmt><expr><name><name pos:line="1282" pos:column="17">sci</name><op:operator pos:line="1282" pos:column="20">.</op:operator><name pos:line="1282" pos:column="21">fMask</name></name> <op:operator pos:line="1282" pos:column="27">=</op:operator> <name pos:line="1282" pos:column="29">SIF_PAGE</name> <op:operator pos:line="1282" pos:column="38">|</op:operator> <name pos:line="1282" pos:column="40">SIF_RANGE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1283" pos:column="17">sci</name><op:operator pos:line="1283" pos:column="20">.</op:operator><name pos:line="1283" pos:column="21">nMin</name></name> <op:operator pos:line="1283" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="1283" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1284" pos:column="17">sci</name><op:operator pos:line="1284" pos:column="20">.</op:operator><name pos:line="1284" pos:column="21">nMax</name></name> <op:operator pos:line="1284" pos:column="26">=</op:operator> <name pos:line="1284" pos:column="28">horizEndPreferred</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1285" pos:column="17">sci</name><op:operator pos:line="1285" pos:column="20">.</op:operator><name pos:line="1285" pos:column="21">nPage</name></name> <op:operator pos:line="1285" pos:column="27">=</op:operator> <name pos:line="1285" pos:column="29">pageWidth</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1286" pos:column="17">sci</name><op:operator pos:line="1286" pos:column="20">.</op:operator><name pos:line="1286" pos:column="21">nPos</name></name> <op:operator pos:line="1286" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="1286" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1287" pos:column="17">sci</name><op:operator pos:line="1287" pos:column="20">.</op:operator><name pos:line="1287" pos:column="21">nTrackPos</name></name> <op:operator pos:line="1287" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="1287" pos:column="33">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1288" pos:column="17">SetScrollInfo</name><argument_list pos:line="1288" pos:column="30">(<argument><expr><name pos:line="1288" pos:column="31">SB_HORZ</name></expr></argument>, <argument><expr><op:operator pos:line="1288" pos:column="40">&amp;</op:operator><name pos:line="1288" pos:column="41">sci</name></expr></argument>, <argument><expr><name pos:line="1288" pos:column="46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1289" pos:column="17">modified</name> <op:operator pos:line="1289" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="1289" pos:column="28">true</lit:literal></expr>;</expr_stmt>
		<if pos:line="1290" pos:column="17">if <condition pos:line="1290" pos:column="20">(<expr><name pos:line="1290" pos:column="21">scrollWidth</name> <op:operator pos:line="1290" pos:column="33">&lt;</op:operator> <call><name><name pos:line="1290" pos:column="35">static_cast</name><argument_list pos:line="1290" pos:column="46">&lt;<argument><expr><name pos:line="1290" pos:column="47">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1290" pos:column="51">(<argument><expr><name pos:line="1290" pos:column="52">pageWidth</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1290" pos:column="63"> <block pos:line="1290" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="1291" pos:column="25">HorizontalScrollTo</name><argument_list pos:line="1291" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="1291" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="1294" pos:column="9">return <expr><name pos:line="1294" pos:column="16">modified</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1297" pos:column="1">void</name></type> <name><name pos:line="1297" pos:column="6">ScintillaWin</name><op:operator pos:line="1297" pos:column="18">::</op:operator><name pos:line="1297" pos:column="20">NotifyChange</name></name><parameter_list pos:line="1297" pos:column="32">()</parameter_list> <block pos:line="1297" pos:column="35">{
	<expr_stmt><expr><call><name><op:operator pos:line="1298" pos:column="9">::</op:operator><name pos:line="1298" pos:column="11">SendMessage</name></name><argument_list pos:line="1298" pos:column="22">(<argument><expr><call><name><op:operator pos:line="1298" pos:column="23">::</op:operator><name pos:line="1298" pos:column="25">GetParent</name></name><argument_list pos:line="1298" pos:column="34">(<argument><expr><call><name pos:line="1298" pos:column="35">MainHWND</name><argument_list pos:line="1298" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1298" pos:column="48">WM_COMMAND</name></expr></argument>,
	        <argument><expr><call><name pos:line="1299" pos:column="17">MAKELONG</name><argument_list pos:line="1299" pos:column="25">(<argument><expr><call><name pos:line="1299" pos:column="26">GetCtrlID</name><argument_list pos:line="1299" pos:column="35">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1299" pos:column="39">SCEN_CHANGE</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name><name pos:line="1300" pos:column="17">reinterpret_cast</name><argument_list pos:line="1300" pos:column="33">&lt;<argument><expr><name pos:line="1300" pos:column="34">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1300" pos:column="41">(<argument><expr><call><name pos:line="1300" pos:column="42">MainHWND</name><argument_list pos:line="1300" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1303" pos:column="1">void</name></type> <name><name pos:line="1303" pos:column="6">ScintillaWin</name><op:operator pos:line="1303" pos:column="18">::</op:operator><name pos:line="1303" pos:column="20">NotifyFocus</name></name><parameter_list pos:line="1303" pos:column="31">(<param><decl><type><name pos:line="1303" pos:column="32">bool</name></type> <name pos:line="1303" pos:column="37">focus</name></decl></param>)</parameter_list> <block pos:line="1303" pos:column="44">{
	<expr_stmt><expr><call><name><op:operator pos:line="1304" pos:column="9">::</op:operator><name pos:line="1304" pos:column="11">SendMessage</name></name><argument_list pos:line="1304" pos:column="22">(<argument><expr><call><name><op:operator pos:line="1304" pos:column="23">::</op:operator><name pos:line="1304" pos:column="25">GetParent</name></name><argument_list pos:line="1304" pos:column="34">(<argument><expr><call><name pos:line="1304" pos:column="35">MainHWND</name><argument_list pos:line="1304" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1304" pos:column="48">WM_COMMAND</name></expr></argument>,
	        <argument><expr><call><name pos:line="1305" pos:column="17">MAKELONG</name><argument_list pos:line="1305" pos:column="25">(<argument><expr><call><name pos:line="1305" pos:column="26">GetCtrlID</name><argument_list pos:line="1305" pos:column="35">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1305" pos:column="39">focus</name> <op:operator pos:line="1305" pos:column="45">?</op:operator> <name pos:line="1305" pos:column="47">SCEN_SETFOCUS</name> <op:operator pos:line="1305" pos:column="61">:</op:operator> <name pos:line="1305" pos:column="63">SCEN_KILLFOCUS</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name><name pos:line="1306" pos:column="17">reinterpret_cast</name><argument_list pos:line="1306" pos:column="33">&lt;<argument><expr><name pos:line="1306" pos:column="34">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1306" pos:column="41">(<argument><expr><call><name pos:line="1306" pos:column="42">MainHWND</name><argument_list pos:line="1306" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1309" pos:column="1">void</name></type> <name><name pos:line="1309" pos:column="6">ScintillaWin</name><op:operator pos:line="1309" pos:column="18">::</op:operator><name pos:line="1309" pos:column="20">SetCtrlID</name></name><parameter_list pos:line="1309" pos:column="29">(<param><decl><type><name pos:line="1309" pos:column="30">int</name></type> <name pos:line="1309" pos:column="34">identifier</name></decl></param>)</parameter_list> <block pos:line="1309" pos:column="46">{
	<expr_stmt><expr><call><name><op:operator pos:line="1310" pos:column="9">::</op:operator><name pos:line="1310" pos:column="11">SetWindowID</name></name><argument_list pos:line="1310" pos:column="22">(<argument><expr><call><name><name pos:line="1310" pos:column="23">reinterpret_cast</name><argument_list pos:line="1310" pos:column="39">&lt;<argument><expr><name pos:line="1310" pos:column="40">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1310" pos:column="45">(<argument><expr><call><name><name pos:line="1310" pos:column="46">wMain</name><op:operator pos:line="1310" pos:column="51">.</op:operator><name pos:line="1310" pos:column="52">GetID</name></name><argument_list pos:line="1310" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1310" pos:column="62">identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1313" pos:column="1">int</name></type> <name><name pos:line="1313" pos:column="5">ScintillaWin</name><op:operator pos:line="1313" pos:column="17">::</op:operator><name pos:line="1313" pos:column="19">GetCtrlID</name></name><parameter_list pos:line="1313" pos:column="28">()</parameter_list> <block pos:line="1313" pos:column="31">{
	<return pos:line="1314" pos:column="9">return <expr><call><name><op:operator pos:line="1314" pos:column="16">::</op:operator><name pos:line="1314" pos:column="18">GetDlgCtrlID</name></name><argument_list pos:line="1314" pos:column="30">(<argument><expr><call><name><name pos:line="1314" pos:column="31">reinterpret_cast</name><argument_list pos:line="1314" pos:column="47">&lt;<argument><expr><name pos:line="1314" pos:column="48">HWND</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1314" pos:column="53">(<argument><expr><call><name><name pos:line="1314" pos:column="54">wMain</name><op:operator pos:line="1314" pos:column="59">.</op:operator><name pos:line="1314" pos:column="60">GetID</name></name><argument_list pos:line="1314" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1317" pos:column="1">void</name></type> <name><name pos:line="1317" pos:column="6">ScintillaWin</name><op:operator pos:line="1317" pos:column="18">::</op:operator><name pos:line="1317" pos:column="20">NotifyParent</name></name><parameter_list pos:line="1317" pos:column="32">(<param><decl><type><name pos:line="1317" pos:column="33">SCNotification</name></type> <name pos:line="1317" pos:column="48">scn</name></decl></param>)</parameter_list> <block pos:line="1317" pos:column="53">{
	<expr_stmt><expr><name><name pos:line="1318" pos:column="9">scn</name><op:operator pos:line="1318" pos:column="12">.</op:operator><name pos:line="1318" pos:column="13">nmhdr</name><op:operator pos:line="1318" pos:column="18">.</op:operator><name pos:line="1318" pos:column="19">hwndFrom</name></name> <op:operator pos:line="1318" pos:column="28">=</op:operator> <call><name pos:line="1318" pos:column="30">MainHWND</name><argument_list pos:line="1318" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1319" pos:column="9">scn</name><op:operator pos:line="1319" pos:column="12">.</op:operator><name pos:line="1319" pos:column="13">nmhdr</name><op:operator pos:line="1319" pos:column="18">.</op:operator><name pos:line="1319" pos:column="19">idFrom</name></name> <op:operator pos:line="1319" pos:column="26">=</op:operator> <call><name pos:line="1319" pos:column="28">GetCtrlID</name><argument_list pos:line="1319" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="1320" pos:column="9">::</op:operator><name pos:line="1320" pos:column="11">SendMessage</name></name><argument_list pos:line="1320" pos:column="22">(<argument><expr><call><name><op:operator pos:line="1320" pos:column="23">::</op:operator><name pos:line="1320" pos:column="25">GetParent</name></name><argument_list pos:line="1320" pos:column="34">(<argument><expr><call><name pos:line="1320" pos:column="35">MainHWND</name><argument_list pos:line="1320" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1320" pos:column="48">WM_NOTIFY</name></expr></argument>,
	              <argument><expr><call><name pos:line="1321" pos:column="23">GetCtrlID</name><argument_list pos:line="1321" pos:column="32">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1321" pos:column="36">reinterpret_cast</name><argument_list pos:line="1321" pos:column="52">&lt;<argument><expr><name pos:line="1321" pos:column="53">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1321" pos:column="60">(<argument><expr><op:operator pos:line="1321" pos:column="61">&amp;</op:operator><name pos:line="1321" pos:column="62">scn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1324" pos:column="1">void</name></type> <name><name pos:line="1324" pos:column="6">ScintillaWin</name><op:operator pos:line="1324" pos:column="18">::</op:operator><name pos:line="1324" pos:column="20">NotifyDoubleClick</name></name><parameter_list pos:line="1324" pos:column="37">(<param><decl><type><name pos:line="1324" pos:column="38">Point</name></type> <name pos:line="1324" pos:column="44">pt</name></decl></param>, <param><decl><type><name pos:line="1324" pos:column="48">bool</name></type> <name pos:line="1324" pos:column="53">shift</name></decl></param>, <param><decl><type><name pos:line="1324" pos:column="60">bool</name></type> <name pos:line="1324" pos:column="65">ctrl</name></decl></param>, <param><decl><type><name pos:line="1324" pos:column="71">bool</name></type> <name pos:line="1324" pos:column="76">alt</name></decl></param>)</parameter_list> <block pos:line="1324" pos:column="81">{
	<comment type="line" pos:line="1325" pos:column="9">//Platform::DebugPrintf("ScintillaWin Double click 0\n");</comment>
	<expr_stmt><expr><call><name><name pos:line="1326" pos:column="9">ScintillaBase</name><op:operator pos:line="1326" pos:column="22">::</op:operator><name pos:line="1326" pos:column="24">NotifyDoubleClick</name></name><argument_list pos:line="1326" pos:column="41">(<argument><expr><name pos:line="1326" pos:column="42">pt</name></expr></argument>, <argument><expr><name pos:line="1326" pos:column="46">shift</name></expr></argument>, <argument><expr><name pos:line="1326" pos:column="53">ctrl</name></expr></argument>, <argument><expr><name pos:line="1326" pos:column="59">alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="1327" pos:column="9">// Send myself a WM_LBUTTONDBLCLK, so the container can handle it too.</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="1328" pos:column="9">::</op:operator><name pos:line="1328" pos:column="11">SendMessage</name></name><argument_list pos:line="1328" pos:column="22">(<argument><expr><call><name pos:line="1328" pos:column="23">MainHWND</name><argument_list pos:line="1328" pos:column="31">()</argument_list></call></expr></argument>,
			  <argument><expr><name pos:line="1329" pos:column="27">WM_LBUTTONDBLCLK</name></expr></argument>,
			  <argument><expr><name pos:line="1330" pos:column="27">shift</name> <op:operator pos:line="1330" pos:column="33">?</op:operator> <name pos:line="1330" pos:column="35">MK_SHIFT</name> <op:operator pos:line="1330" pos:column="44">:</op:operator> <lit:literal type="number" pos:line="1330" pos:column="46">0</lit:literal></expr></argument>,
			  <argument><expr><call><name pos:line="1331" pos:column="27">MAKELPARAM</name><argument_list pos:line="1331" pos:column="37">(<argument><expr><name><name pos:line="1331" pos:column="38">pt</name><op:operator pos:line="1331" pos:column="40">.</op:operator><name pos:line="1331" pos:column="41">x</name></name></expr></argument>, <argument><expr><name><name pos:line="1331" pos:column="44">pt</name><op:operator pos:line="1331" pos:column="46">.</op:operator><name pos:line="1331" pos:column="47">y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<class pos:line="1334" pos:column="1">class <name pos:line="1334" pos:column="7">CaseFolderUTF8</name> <super pos:line="1334" pos:column="22">: <specifier pos:line="1334" pos:column="24">public</specifier> <name pos:line="1334" pos:column="31">CaseFolderTable</name></super> <block pos:line="1334" pos:column="47">{<private type="default" pos:line="1334" pos:column="48">
	<comment type="line" pos:line="1335" pos:column="9">// Allocate the expandable storage here so that it does not need to be reallocated</comment>
	<comment type="line" pos:line="1336" pos:column="9">// for each call to Fold.</comment>
	<decl_stmt><decl><type><name><name pos:line="1337" pos:column="9">std</name><op:operator pos:line="1337" pos:column="12">::</op:operator><name><name pos:line="1337" pos:column="14">vector</name><argument_list pos:line="1337" pos:column="20">&lt;<argument><expr><name pos:line="1337" pos:column="21">wchar_t</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1337" pos:column="30">utf16Mixed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1338" pos:column="9">std</name><op:operator pos:line="1338" pos:column="12">::</op:operator><name><name pos:line="1338" pos:column="14">vector</name><argument_list pos:line="1338" pos:column="20">&lt;<argument><expr><name pos:line="1338" pos:column="21">wchar_t</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1338" pos:column="30">utf16Folded</name></decl>;</decl_stmt>
</private><public pos:line="1339" pos:column="1">public:
	<constructor><name pos:line="1340" pos:column="9">CaseFolderUTF8</name><parameter_list pos:line="1340" pos:column="23">()</parameter_list> <block pos:line="1340" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="1341" pos:column="17">StandardASCII</name><argument_list pos:line="1341" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function><type><specifier pos:line="1343" pos:column="9">virtual</specifier> <name pos:line="1343" pos:column="17">size_t</name></type> <name pos:line="1343" pos:column="24">Fold</name><parameter_list pos:line="1343" pos:column="28">(<param><decl><type><name pos:line="1343" pos:column="29">char</name> <type:modifier pos:line="1343" pos:column="34">*</type:modifier></type><name pos:line="1343" pos:column="35">folded</name></decl></param>, <param><decl><type><name pos:line="1343" pos:column="43">size_t</name></type> <name pos:line="1343" pos:column="50">sizeFolded</name></decl></param>, <param><decl><type><specifier pos:line="1343" pos:column="62">const</specifier> <name pos:line="1343" pos:column="68">char</name> <type:modifier pos:line="1343" pos:column="73">*</type:modifier></type><name pos:line="1343" pos:column="74">mixed</name></decl></param>, <param><decl><type><name pos:line="1343" pos:column="81">size_t</name></type> <name pos:line="1343" pos:column="88">lenMixed</name></decl></param>)</parameter_list> <block pos:line="1343" pos:column="98">{
		<if pos:line="1344" pos:column="17">if <condition pos:line="1344" pos:column="20">(<expr><op:operator pos:line="1344" pos:column="21">(</op:operator><name pos:line="1344" pos:column="22">lenMixed</name> <op:operator pos:line="1344" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="1344" pos:column="34">1</lit:literal><op:operator pos:line="1344" pos:column="35">)</op:operator> <op:operator pos:line="1344" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="1344" pos:column="40">(</op:operator><name pos:line="1344" pos:column="41">sizeFolded</name> <op:operator pos:line="1344" pos:column="52">&gt;</op:operator> <lit:literal type="number" pos:line="1344" pos:column="54">0</lit:literal><op:operator pos:line="1344" pos:column="55">)</op:operator></expr>)</condition><then pos:line="1344" pos:column="57"> <block pos:line="1344" pos:column="58">{
			<expr_stmt><expr><name><name pos:line="1345" pos:column="25">folded</name><index pos:line="1345" pos:column="31">[<expr><lit:literal type="number" pos:line="1345" pos:column="32">0</lit:literal></expr>]</index></name> <op:operator pos:line="1345" pos:column="35">=</op:operator> <name><name pos:line="1345" pos:column="37">mapping</name><index pos:line="1345" pos:column="44">[<expr><call><name><name pos:line="1345" pos:column="45">static_cast</name><argument_list pos:line="1345" pos:column="56">&lt;<argument><expr><name pos:line="1345" pos:column="57">unsigned</name> <name pos:line="1345" pos:column="66">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1345" pos:column="71">(<argument><expr><name><name pos:line="1345" pos:column="72">mixed</name><index pos:line="1345" pos:column="77">[<expr><lit:literal type="number" pos:line="1345" pos:column="78">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
			<return pos:line="1346" pos:column="25">return <expr><lit:literal type="number" pos:line="1346" pos:column="32">1</lit:literal></expr>;</return>
		}</block></then> <else pos:line="1347" pos:column="19">else <block pos:line="1347" pos:column="24">{
			<if pos:line="1348" pos:column="25">if <condition pos:line="1348" pos:column="28">(<expr><name pos:line="1348" pos:column="29">lenMixed</name> <op:operator pos:line="1348" pos:column="38">&gt;</op:operator> <call><name><name pos:line="1348" pos:column="40">utf16Mixed</name><op:operator pos:line="1348" pos:column="50">.</op:operator><name pos:line="1348" pos:column="51">size</name></name><argument_list pos:line="1348" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="1348" pos:column="58"> <block pos:line="1348" pos:column="59">{
				<expr_stmt><expr><call><name><name pos:line="1349" pos:column="33">utf16Mixed</name><op:operator pos:line="1349" pos:column="43">.</op:operator><name pos:line="1349" pos:column="44">resize</name></name><argument_list pos:line="1349" pos:column="50">(<argument><expr><name pos:line="1349" pos:column="51">lenMixed</name> <op:operator pos:line="1349" pos:column="60">+</op:operator> <lit:literal type="number" pos:line="1349" pos:column="62">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="1351" pos:column="25">size_t</name></type> <name pos:line="1351" pos:column="32">nUtf16Mixed</name> <init pos:line="1351" pos:column="44">= <expr><call><name><op:operator pos:line="1351" pos:column="46">::</op:operator><name pos:line="1351" pos:column="48">MultiByteToWideChar</name></name><argument_list pos:line="1351" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="1351" pos:column="68">65001</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1351" pos:column="75">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1351" pos:column="78">mixed</name></expr></argument>, <argument><expr><name pos:line="1351" pos:column="85">lenMixed</name></expr></argument>,
				<argument><expr><op:operator pos:line="1352" pos:column="33">&amp;</op:operator><name><name pos:line="1352" pos:column="34">utf16Mixed</name><index pos:line="1352" pos:column="44">[<expr><lit:literal type="number" pos:line="1352" pos:column="45">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1352" pos:column="49">utf16Mixed</name><op:operator pos:line="1352" pos:column="59">.</op:operator><name pos:line="1352" pos:column="60">size</name></name><argument_list pos:line="1352" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="1354" pos:column="25">if <condition pos:line="1354" pos:column="28">(<expr><name pos:line="1354" pos:column="29">nUtf16Mixed</name> <op:operator pos:line="1354" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="1354" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="1354" pos:column="46"> <block pos:line="1354" pos:column="47">{
				<comment type="line" pos:line="1355" pos:column="33">// Failed to convert -&gt; bad UTF-8</comment>
				<expr_stmt><expr><name><name pos:line="1356" pos:column="33">folded</name><index pos:line="1356" pos:column="39">[<expr><lit:literal type="number" pos:line="1356" pos:column="40">0</lit:literal></expr>]</index></name> <op:operator pos:line="1356" pos:column="43">=</op:operator> <lit:literal type="char" pos:line="1356" pos:column="45">'\0'</lit:literal></expr>;</expr_stmt>
				<return pos:line="1357" pos:column="33">return <expr><lit:literal type="number" pos:line="1357" pos:column="40">1</lit:literal></expr>;</return>
			}</block></then></if>

			<if pos:line="1360" pos:column="25">if <condition pos:line="1360" pos:column="28">(<expr><name pos:line="1360" pos:column="29">nUtf16Mixed</name> <op:operator pos:line="1360" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="1360" pos:column="43">4</lit:literal> <op:operator pos:line="1360" pos:column="45">&gt;</op:operator> <call><name><name pos:line="1360" pos:column="47">utf16Folded</name><op:operator pos:line="1360" pos:column="58">.</op:operator><name pos:line="1360" pos:column="59">size</name></name><argument_list pos:line="1360" pos:column="63">()</argument_list></call></expr>)</condition><then pos:line="1360" pos:column="66"> <block pos:line="1360" pos:column="67">{	<comment type="line" pos:line="1360" pos:column="73">// Maximum folding expansion factor of 4</comment>
				<expr_stmt><expr><call><name><name pos:line="1361" pos:column="33">utf16Folded</name><op:operator pos:line="1361" pos:column="44">.</op:operator><name pos:line="1361" pos:column="45">resize</name></name><argument_list pos:line="1361" pos:column="51">(<argument><expr><name pos:line="1361" pos:column="52">nUtf16Mixed</name> <op:operator pos:line="1361" pos:column="64">*</op:operator> <lit:literal type="number" pos:line="1361" pos:column="66">4</lit:literal> <op:operator pos:line="1361" pos:column="68">+</op:operator> <lit:literal type="number" pos:line="1361" pos:column="70">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="1363" pos:column="25">int</name></type> <name pos:line="1363" pos:column="29">lenFlat</name> <init pos:line="1363" pos:column="37">= <expr><call><name><op:operator pos:line="1363" pos:column="39">::</op:operator><name pos:line="1363" pos:column="41">LCMapStringW</name></name><argument_list pos:line="1363" pos:column="53">(<argument><expr><name pos:line="1363" pos:column="54">LOCALE_SYSTEM_DEFAULT</name></expr></argument>,
				<argument><expr><name pos:line="1364" pos:column="33">LCMAP_LINGUISTIC_CASING</name> <op:operator pos:line="1364" pos:column="57">|</op:operator> <name pos:line="1364" pos:column="59">LCMAP_LOWERCASE</name></expr></argument>,
				<argument><expr><op:operator pos:line="1365" pos:column="33">&amp;</op:operator><name><name pos:line="1365" pos:column="34">utf16Mixed</name><index pos:line="1365" pos:column="44">[<expr><lit:literal type="number" pos:line="1365" pos:column="45">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1365" pos:column="49">nUtf16Mixed</name></expr></argument>, <argument><expr><op:operator pos:line="1365" pos:column="62">&amp;</op:operator><name><name pos:line="1365" pos:column="63">utf16Folded</name><index pos:line="1365" pos:column="74">[<expr><lit:literal type="number" pos:line="1365" pos:column="75">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1365" pos:column="79">utf16Folded</name><op:operator pos:line="1365" pos:column="90">.</op:operator><name pos:line="1365" pos:column="91">size</name></name><argument_list pos:line="1365" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="1367" pos:column="25">size_t</name></type> <name pos:line="1367" pos:column="32">lenOut</name> <init pos:line="1367" pos:column="39">= <expr><call><name pos:line="1367" pos:column="41">UTF8Length</name><argument_list pos:line="1367" pos:column="51">(<argument><expr><op:operator pos:line="1367" pos:column="52">&amp;</op:operator><name><name pos:line="1367" pos:column="53">utf16Folded</name><index pos:line="1367" pos:column="64">[<expr><lit:literal type="number" pos:line="1367" pos:column="65">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1367" pos:column="69">lenFlat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1368" pos:column="25">if <condition pos:line="1368" pos:column="28">(<expr><name pos:line="1368" pos:column="29">lenOut</name> <op:operator pos:line="1368" pos:column="36">&lt;</op:operator> <name pos:line="1368" pos:column="38">sizeFolded</name></expr>)</condition><then pos:line="1368" pos:column="49"> <block pos:line="1368" pos:column="50">{
				<expr_stmt><expr><call><name pos:line="1369" pos:column="33">UTF8FromUTF16</name><argument_list pos:line="1369" pos:column="46">(<argument><expr><op:operator pos:line="1369" pos:column="47">&amp;</op:operator><name><name pos:line="1369" pos:column="48">utf16Folded</name><index pos:line="1369" pos:column="59">[<expr><lit:literal type="number" pos:line="1369" pos:column="60">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1369" pos:column="64">lenFlat</name></expr></argument>, <argument><expr><name pos:line="1369" pos:column="73">folded</name></expr></argument>, <argument><expr><name pos:line="1369" pos:column="81">lenOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="1370" pos:column="33">return <expr><name pos:line="1370" pos:column="40">lenOut</name></expr>;</return>
			}</block></then> <else pos:line="1371" pos:column="27">else <block pos:line="1371" pos:column="32">{
				<return pos:line="1372" pos:column="33">return <expr><lit:literal type="number" pos:line="1372" pos:column="40">0</lit:literal></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></function>
</public>}</block>;</class>

<class pos:line="1378" pos:column="1">class <name pos:line="1378" pos:column="7">CaseFolderDBCS</name> <super pos:line="1378" pos:column="22">: <specifier pos:line="1378" pos:column="24">public</specifier> <name pos:line="1378" pos:column="31">CaseFolderTable</name></super> <block pos:line="1378" pos:column="47">{<private type="default" pos:line="1378" pos:column="48">
	<comment type="line" pos:line="1379" pos:column="9">// Allocate the expandable storage here so that it does not need to be reallocated</comment>
	<comment type="line" pos:line="1380" pos:column="9">// for each call to Fold.</comment>
	<decl_stmt><decl><type><name><name pos:line="1381" pos:column="9">std</name><op:operator pos:line="1381" pos:column="12">::</op:operator><name><name pos:line="1381" pos:column="14">vector</name><argument_list pos:line="1381" pos:column="20">&lt;<argument><expr><name pos:line="1381" pos:column="21">wchar_t</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1381" pos:column="30">utf16Mixed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1382" pos:column="9">std</name><op:operator pos:line="1382" pos:column="12">::</op:operator><name><name pos:line="1382" pos:column="14">vector</name><argument_list pos:line="1382" pos:column="20">&lt;<argument><expr><name pos:line="1382" pos:column="21">wchar_t</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1382" pos:column="30">utf16Folded</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1383" pos:column="9">UINT</name></type> <name pos:line="1383" pos:column="14">cp</name></decl>;</decl_stmt>
</private><public pos:line="1384" pos:column="1">public:
	<constructor><name pos:line="1385" pos:column="9">CaseFolderDBCS</name><parameter_list pos:line="1385" pos:column="23">(<param><decl><type><name pos:line="1385" pos:column="24">UINT</name></type> <name pos:line="1385" pos:column="29">cp_</name></decl></param>)</parameter_list> <member_list pos:line="1385" pos:column="34">: <call><name pos:line="1385" pos:column="36">cp</name><argument_list pos:line="1385" pos:column="38">(<argument><expr><name pos:line="1385" pos:column="39">cp_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="1385" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="1386" pos:column="17">StandardASCII</name><argument_list pos:line="1386" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function><type><specifier pos:line="1388" pos:column="9">virtual</specifier> <name pos:line="1388" pos:column="17">size_t</name></type> <name pos:line="1388" pos:column="24">Fold</name><parameter_list pos:line="1388" pos:column="28">(<param><decl><type><name pos:line="1388" pos:column="29">char</name> <type:modifier pos:line="1388" pos:column="34">*</type:modifier></type><name pos:line="1388" pos:column="35">folded</name></decl></param>, <param><decl><type><name pos:line="1388" pos:column="43">size_t</name></type> <name pos:line="1388" pos:column="50">sizeFolded</name></decl></param>, <param><decl><type><specifier pos:line="1388" pos:column="62">const</specifier> <name pos:line="1388" pos:column="68">char</name> <type:modifier pos:line="1388" pos:column="73">*</type:modifier></type><name pos:line="1388" pos:column="74">mixed</name></decl></param>, <param><decl><type><name pos:line="1388" pos:column="81">size_t</name></type> <name pos:line="1388" pos:column="88">lenMixed</name></decl></param>)</parameter_list> <block pos:line="1388" pos:column="98">{
		<if pos:line="1389" pos:column="17">if <condition pos:line="1389" pos:column="20">(<expr><op:operator pos:line="1389" pos:column="21">(</op:operator><name pos:line="1389" pos:column="22">lenMixed</name> <op:operator pos:line="1389" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="1389" pos:column="34">1</lit:literal><op:operator pos:line="1389" pos:column="35">)</op:operator> <op:operator pos:line="1389" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="1389" pos:column="40">(</op:operator><name pos:line="1389" pos:column="41">sizeFolded</name> <op:operator pos:line="1389" pos:column="52">&gt;</op:operator> <lit:literal type="number" pos:line="1389" pos:column="54">0</lit:literal><op:operator pos:line="1389" pos:column="55">)</op:operator></expr>)</condition><then pos:line="1389" pos:column="57"> <block pos:line="1389" pos:column="58">{
			<expr_stmt><expr><name><name pos:line="1390" pos:column="25">folded</name><index pos:line="1390" pos:column="31">[<expr><lit:literal type="number" pos:line="1390" pos:column="32">0</lit:literal></expr>]</index></name> <op:operator pos:line="1390" pos:column="35">=</op:operator> <name><name pos:line="1390" pos:column="37">mapping</name><index pos:line="1390" pos:column="44">[<expr><call><name><name pos:line="1390" pos:column="45">static_cast</name><argument_list pos:line="1390" pos:column="56">&lt;<argument><expr><name pos:line="1390" pos:column="57">unsigned</name> <name pos:line="1390" pos:column="66">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1390" pos:column="71">(<argument><expr><name><name pos:line="1390" pos:column="72">mixed</name><index pos:line="1390" pos:column="77">[<expr><lit:literal type="number" pos:line="1390" pos:column="78">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
			<return pos:line="1391" pos:column="25">return <expr><lit:literal type="number" pos:line="1391" pos:column="32">1</lit:literal></expr>;</return>
		}</block></then> <else pos:line="1392" pos:column="19">else <block pos:line="1392" pos:column="24">{
			<if pos:line="1393" pos:column="25">if <condition pos:line="1393" pos:column="28">(<expr><name pos:line="1393" pos:column="29">lenMixed</name> <op:operator pos:line="1393" pos:column="38">&gt;</op:operator> <call><name><name pos:line="1393" pos:column="40">utf16Mixed</name><op:operator pos:line="1393" pos:column="50">.</op:operator><name pos:line="1393" pos:column="51">size</name></name><argument_list pos:line="1393" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="1393" pos:column="58"> <block pos:line="1393" pos:column="59">{
				<expr_stmt><expr><call><name><name pos:line="1394" pos:column="33">utf16Mixed</name><op:operator pos:line="1394" pos:column="43">.</op:operator><name pos:line="1394" pos:column="44">resize</name></name><argument_list pos:line="1394" pos:column="50">(<argument><expr><name pos:line="1394" pos:column="51">lenMixed</name> <op:operator pos:line="1394" pos:column="60">+</op:operator> <lit:literal type="number" pos:line="1394" pos:column="62">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="1396" pos:column="25">size_t</name></type> <name pos:line="1396" pos:column="32">nUtf16Mixed</name> <init pos:line="1396" pos:column="44">= <expr><call><name><op:operator pos:line="1396" pos:column="46">::</op:operator><name pos:line="1396" pos:column="48">MultiByteToWideChar</name></name><argument_list pos:line="1396" pos:column="67">(<argument><expr><name pos:line="1396" pos:column="68">cp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1396" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1396" pos:column="75">mixed</name></expr></argument>, <argument><expr><name pos:line="1396" pos:column="82">lenMixed</name></expr></argument>,
				<argument><expr><op:operator pos:line="1397" pos:column="33">&amp;</op:operator><name><name pos:line="1397" pos:column="34">utf16Mixed</name><index pos:line="1397" pos:column="44">[<expr><lit:literal type="number" pos:line="1397" pos:column="45">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1397" pos:column="49">utf16Mixed</name><op:operator pos:line="1397" pos:column="59">.</op:operator><name pos:line="1397" pos:column="60">size</name></name><argument_list pos:line="1397" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="1399" pos:column="25">if <condition pos:line="1399" pos:column="28">(<expr><name pos:line="1399" pos:column="29">nUtf16Mixed</name> <op:operator pos:line="1399" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="1399" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="1399" pos:column="46"> <block pos:line="1399" pos:column="47">{
				<comment type="line" pos:line="1400" pos:column="33">// Failed to convert -&gt; bad input</comment>
				<expr_stmt><expr><name><name pos:line="1401" pos:column="33">folded</name><index pos:line="1401" pos:column="39">[<expr><lit:literal type="number" pos:line="1401" pos:column="40">0</lit:literal></expr>]</index></name> <op:operator pos:line="1401" pos:column="43">=</op:operator> <lit:literal type="char" pos:line="1401" pos:column="45">'\0'</lit:literal></expr>;</expr_stmt>
				<return pos:line="1402" pos:column="33">return <expr><lit:literal type="number" pos:line="1402" pos:column="40">1</lit:literal></expr>;</return>
			}</block></then></if>

			<if pos:line="1405" pos:column="25">if <condition pos:line="1405" pos:column="28">(<expr><name pos:line="1405" pos:column="29">nUtf16Mixed</name> <op:operator pos:line="1405" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="1405" pos:column="43">4</lit:literal> <op:operator pos:line="1405" pos:column="45">&gt;</op:operator> <call><name><name pos:line="1405" pos:column="47">utf16Folded</name><op:operator pos:line="1405" pos:column="58">.</op:operator><name pos:line="1405" pos:column="59">size</name></name><argument_list pos:line="1405" pos:column="63">()</argument_list></call></expr>)</condition><then pos:line="1405" pos:column="66"> <block pos:line="1405" pos:column="67">{	<comment type="line" pos:line="1405" pos:column="73">// Maximum folding expansion factor of 4</comment>
				<expr_stmt><expr><call><name><name pos:line="1406" pos:column="33">utf16Folded</name><op:operator pos:line="1406" pos:column="44">.</op:operator><name pos:line="1406" pos:column="45">resize</name></name><argument_list pos:line="1406" pos:column="51">(<argument><expr><name pos:line="1406" pos:column="52">nUtf16Mixed</name> <op:operator pos:line="1406" pos:column="64">*</op:operator> <lit:literal type="number" pos:line="1406" pos:column="66">4</lit:literal> <op:operator pos:line="1406" pos:column="68">+</op:operator> <lit:literal type="number" pos:line="1406" pos:column="70">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="1408" pos:column="25">int</name></type> <name pos:line="1408" pos:column="29">lenFlat</name> <init pos:line="1408" pos:column="37">= <expr><call><name><op:operator pos:line="1408" pos:column="39">::</op:operator><name pos:line="1408" pos:column="41">LCMapStringW</name></name><argument_list pos:line="1408" pos:column="53">(<argument><expr><name pos:line="1408" pos:column="54">LOCALE_SYSTEM_DEFAULT</name></expr></argument>,
				<argument><expr><name pos:line="1409" pos:column="33">LCMAP_LINGUISTIC_CASING</name> <op:operator pos:line="1409" pos:column="57">|</op:operator> <name pos:line="1409" pos:column="59">LCMAP_LOWERCASE</name></expr></argument>,
				<argument><expr><op:operator pos:line="1410" pos:column="33">&amp;</op:operator><name><name pos:line="1410" pos:column="34">utf16Mixed</name><index pos:line="1410" pos:column="44">[<expr><lit:literal type="number" pos:line="1410" pos:column="45">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1410" pos:column="49">nUtf16Mixed</name></expr></argument>, <argument><expr><op:operator pos:line="1410" pos:column="62">&amp;</op:operator><name><name pos:line="1410" pos:column="63">utf16Folded</name><index pos:line="1410" pos:column="74">[<expr><lit:literal type="number" pos:line="1410" pos:column="75">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1410" pos:column="79">utf16Folded</name><op:operator pos:line="1410" pos:column="90">.</op:operator><name pos:line="1410" pos:column="91">size</name></name><argument_list pos:line="1410" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="1412" pos:column="25">size_t</name></type> <name pos:line="1412" pos:column="32">lenOut</name> <init pos:line="1412" pos:column="39">= <expr><call><name><op:operator pos:line="1412" pos:column="41">::</op:operator><name pos:line="1412" pos:column="43">WideCharToMultiByte</name></name><argument_list pos:line="1412" pos:column="62">(<argument><expr><name pos:line="1412" pos:column="63">cp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1412" pos:column="67">0</lit:literal></expr></argument>,
				<argument><expr><op:operator pos:line="1413" pos:column="33">&amp;</op:operator><name><name pos:line="1413" pos:column="34">utf16Folded</name><index pos:line="1413" pos:column="45">[<expr><lit:literal type="number" pos:line="1413" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1413" pos:column="50">lenFlat</name></expr></argument>,
				<argument><expr><name pos:line="1414" pos:column="33">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1414" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1414" pos:column="42">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1414" pos:column="48">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="1416" pos:column="25">if <condition pos:line="1416" pos:column="28">(<expr><name pos:line="1416" pos:column="29">lenOut</name> <op:operator pos:line="1416" pos:column="36">&lt;</op:operator> <name pos:line="1416" pos:column="38">sizeFolded</name></expr>)</condition><then pos:line="1416" pos:column="49"> <block pos:line="1416" pos:column="50">{
				<expr_stmt><expr><call><name><op:operator pos:line="1417" pos:column="33">::</op:operator><name pos:line="1417" pos:column="35">WideCharToMultiByte</name></name><argument_list pos:line="1417" pos:column="54">(<argument><expr><name pos:line="1417" pos:column="55">cp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1417" pos:column="59">0</lit:literal></expr></argument>,
					<argument><expr><op:operator pos:line="1418" pos:column="41">&amp;</op:operator><name><name pos:line="1418" pos:column="42">utf16Folded</name><index pos:line="1418" pos:column="53">[<expr><lit:literal type="number" pos:line="1418" pos:column="54">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1418" pos:column="58">lenFlat</name></expr></argument>,
					<argument><expr><name pos:line="1419" pos:column="41">folded</name></expr></argument>, <argument><expr><name pos:line="1419" pos:column="49">lenOut</name></expr></argument>, <argument><expr><name pos:line="1419" pos:column="57">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1419" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="1420" pos:column="33">return <expr><name pos:line="1420" pos:column="40">lenOut</name></expr>;</return>
			}</block></then> <else pos:line="1421" pos:column="27">else <block pos:line="1421" pos:column="32">{
				<return pos:line="1422" pos:column="33">return <expr><lit:literal type="number" pos:line="1422" pos:column="40">0</lit:literal></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="1428" pos:column="1">CaseFolder</name> <type:modifier pos:line="1428" pos:column="12">*</type:modifier></type><name><name pos:line="1428" pos:column="13">ScintillaWin</name><op:operator pos:line="1428" pos:column="25">::</op:operator><name pos:line="1428" pos:column="27">CaseFolderForEncoding</name></name><parameter_list pos:line="1428" pos:column="48">()</parameter_list> <block pos:line="1428" pos:column="51">{
	<decl_stmt><decl><type><name pos:line="1429" pos:column="9">UINT</name></type> <name pos:line="1429" pos:column="14">cpDest</name> <init pos:line="1429" pos:column="21">= <expr><call><name pos:line="1429" pos:column="23">CodePageOfDocument</name><argument_list pos:line="1429" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1430" pos:column="9">if <condition pos:line="1430" pos:column="12">(<expr><name pos:line="1430" pos:column="13">cpDest</name> <op:operator pos:line="1430" pos:column="20">==</op:operator> <name pos:line="1430" pos:column="23">SC_CP_UTF8</name></expr>)</condition><then pos:line="1430" pos:column="34"> <block pos:line="1430" pos:column="35">{
		<return pos:line="1431" pos:column="17">return <expr><op:operator pos:line="1431" pos:column="24">new</op:operator> <call><name pos:line="1431" pos:column="28">CaseFolderUTF8</name><argument_list pos:line="1431" pos:column="42">()</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="1432" pos:column="11">else <block pos:line="1432" pos:column="16">{
		<if pos:line="1433" pos:column="17">if <condition pos:line="1433" pos:column="20">(<expr><name><name pos:line="1433" pos:column="21">pdoc</name><op:operator pos:line="1433" pos:column="25">-&gt;</op:operator><name pos:line="1433" pos:column="27">dbcsCodePage</name></name> <op:operator pos:line="1433" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="1433" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="1433" pos:column="45"> <block pos:line="1433" pos:column="46">{
			<decl_stmt><decl><type><name pos:line="1434" pos:column="25">CaseFolderTable</name> <type:modifier pos:line="1434" pos:column="41">*</type:modifier></type><name pos:line="1434" pos:column="42">pcf</name> <init pos:line="1434" pos:column="46">= <expr><op:operator pos:line="1434" pos:column="48">new</op:operator> <call><name pos:line="1434" pos:column="52">CaseFolderTable</name><argument_list pos:line="1434" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="1435" pos:column="25">pcf</name><op:operator pos:line="1435" pos:column="28">-&gt;</op:operator><name pos:line="1435" pos:column="30">StandardASCII</name></name><argument_list pos:line="1435" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="1436" pos:column="25">// Only for single byte encodings</comment>
			<decl_stmt><decl><type><name pos:line="1437" pos:column="25">UINT</name></type> <name pos:line="1437" pos:column="30">cpDoc</name> <init pos:line="1437" pos:column="36">= <expr><call><name pos:line="1437" pos:column="38">CodePageOfDocument</name><argument_list pos:line="1437" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for pos:line="1438" pos:column="25">for (<init><decl><type><name pos:line="1438" pos:column="30">int</name></type> <name pos:line="1438" pos:column="34">i</name><init pos:line="1438" pos:column="35">=<expr><lit:literal type="number" pos:line="1438" pos:column="36">0x80</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1438" pos:column="42">i</name><op:operator pos:line="1438" pos:column="43">&lt;</op:operator><lit:literal type="number" pos:line="1438" pos:column="44">0x100</lit:literal></expr>;</condition> <incr><expr><name pos:line="1438" pos:column="51">i</name><op:operator pos:line="1438" pos:column="52">++</op:operator></expr></incr>) <block pos:line="1438" pos:column="56">{
				<decl_stmt><decl><type><name pos:line="1439" pos:column="33">char</name></type> <name><name pos:line="1439" pos:column="38">sCharacter</name><index pos:line="1439" pos:column="48">[<expr><lit:literal type="number" pos:line="1439" pos:column="49">2</lit:literal></expr>]</index></name> <init pos:line="1439" pos:column="52">= <expr><lit:literal type="string" pos:line="1439" pos:column="54">"A"</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="1440" pos:column="33">sCharacter</name><index pos:line="1440" pos:column="43">[<expr><lit:literal type="number" pos:line="1440" pos:column="44">0</lit:literal></expr>]</index></name> <op:operator pos:line="1440" pos:column="47">=</op:operator> <call><name><name pos:line="1440" pos:column="49">static_cast</name><argument_list pos:line="1440" pos:column="60">&lt;<argument><expr><name pos:line="1440" pos:column="61">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1440" pos:column="66">(<argument><expr><name pos:line="1440" pos:column="67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="1441" pos:column="33">wchar_t</name></type> <name><name pos:line="1441" pos:column="41">wCharacter</name><index pos:line="1441" pos:column="51">[<expr><lit:literal type="number" pos:line="1441" pos:column="52">20</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1442" pos:column="33">unsigned</name> <name pos:line="1442" pos:column="42">int</name></type> <name pos:line="1442" pos:column="46">lengthUTF16</name> <init pos:line="1442" pos:column="58">= <expr><call><name><op:operator pos:line="1442" pos:column="60">::</op:operator><name pos:line="1442" pos:column="62">MultiByteToWideChar</name></name><argument_list pos:line="1442" pos:column="81">(<argument><expr><name pos:line="1442" pos:column="82">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1442" pos:column="89">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1442" pos:column="92">sCharacter</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1442" pos:column="104">1</lit:literal></expr></argument>,
					<argument><expr><name pos:line="1443" pos:column="41">wCharacter</name></expr></argument>, <argument><expr><sizeof pos:line="1443" pos:column="53">sizeof<argument_list pos:line="1443" pos:column="59">(<argument><expr><name pos:line="1443" pos:column="60">wCharacter</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="1443" pos:column="71">/</op:operator><sizeof pos:line="1443" pos:column="72">sizeof<argument_list pos:line="1443" pos:column="78">(<argument><expr><name><name pos:line="1443" pos:column="79">wCharacter</name><index pos:line="1443" pos:column="89">[<expr><lit:literal type="number" pos:line="1443" pos:column="90">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1444" pos:column="33">if <condition pos:line="1444" pos:column="36">(<expr><name pos:line="1444" pos:column="37">lengthUTF16</name> <op:operator pos:line="1444" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="1444" pos:column="52">1</lit:literal></expr>)</condition><then pos:line="1444" pos:column="54"> <block pos:line="1444" pos:column="55">{
					<decl_stmt><decl><type><name pos:line="1445" pos:column="41">wchar_t</name></type> <name><name pos:line="1445" pos:column="49">wLower</name><index pos:line="1445" pos:column="55">[<expr><lit:literal type="number" pos:line="1445" pos:column="56">20</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1446" pos:column="41">int</name></type> <name pos:line="1446" pos:column="45">charsConverted</name> <init pos:line="1446" pos:column="60">= <expr><call><name><op:operator pos:line="1446" pos:column="62">::</op:operator><name pos:line="1446" pos:column="64">LCMapStringW</name></name><argument_list pos:line="1446" pos:column="76">(<argument><expr><name pos:line="1446" pos:column="77">LOCALE_SYSTEM_DEFAULT</name></expr></argument>,
						<argument><expr><name pos:line="1447" pos:column="49">LCMAP_LINGUISTIC_CASING</name> <op:operator pos:line="1447" pos:column="73">|</op:operator> <name pos:line="1447" pos:column="75">LCMAP_LOWERCASE</name></expr></argument>,
						<argument><expr><name pos:line="1448" pos:column="49">wCharacter</name></expr></argument>, <argument><expr><name pos:line="1448" pos:column="61">lengthUTF16</name></expr></argument>, <argument><expr><name pos:line="1448" pos:column="74">wLower</name></expr></argument>, <argument><expr><sizeof pos:line="1448" pos:column="82">sizeof<argument_list pos:line="1448" pos:column="88">(<argument><expr><name pos:line="1448" pos:column="89">wLower</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="1448" pos:column="96">/</op:operator><sizeof pos:line="1448" pos:column="97">sizeof<argument_list pos:line="1448" pos:column="103">(<argument><expr><name><name pos:line="1448" pos:column="104">wLower</name><index pos:line="1448" pos:column="110">[<expr><lit:literal type="number" pos:line="1448" pos:column="111">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1449" pos:column="41">char</name></type> <name><name pos:line="1449" pos:column="46">sCharacterLowered</name><index pos:line="1449" pos:column="63">[<expr><lit:literal type="number" pos:line="1449" pos:column="64">20</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1450" pos:column="41">unsigned</name> <name pos:line="1450" pos:column="50">int</name></type> <name pos:line="1450" pos:column="54">lengthConverted</name> <init pos:line="1450" pos:column="70">= <expr><call><name><op:operator pos:line="1450" pos:column="72">::</op:operator><name pos:line="1450" pos:column="74">WideCharToMultiByte</name></name><argument_list pos:line="1450" pos:column="93">(<argument><expr><name pos:line="1450" pos:column="94">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1450" pos:column="101">0</lit:literal></expr></argument>,
						<argument><expr><name pos:line="1451" pos:column="49">wLower</name></expr></argument>, <argument><expr><name pos:line="1451" pos:column="57">charsConverted</name></expr></argument>,
						<argument><expr><name pos:line="1452" pos:column="49">sCharacterLowered</name></expr></argument>, <argument><expr><sizeof pos:line="1452" pos:column="68">sizeof<argument_list pos:line="1452" pos:column="74">(<argument><expr><name pos:line="1452" pos:column="75">sCharacterLowered</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1452" pos:column="95">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1452" pos:column="101">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="1453" pos:column="41">if <condition pos:line="1453" pos:column="44">(<expr><op:operator pos:line="1453" pos:column="45">(</op:operator><name pos:line="1453" pos:column="46">lengthConverted</name> <op:operator pos:line="1453" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="1453" pos:column="65">1</lit:literal><op:operator pos:line="1453" pos:column="66">)</op:operator> <op:operator pos:line="1453" pos:column="68">&amp;&amp;</op:operator> <op:operator pos:line="1453" pos:column="71">(</op:operator><name><name pos:line="1453" pos:column="72">sCharacter</name><index pos:line="1453" pos:column="82">[<expr><lit:literal type="number" pos:line="1453" pos:column="83">0</lit:literal></expr>]</index></name> <op:operator pos:line="1453" pos:column="86">!=</op:operator> <name><name pos:line="1453" pos:column="89">sCharacterLowered</name><index pos:line="1453" pos:column="106">[<expr><lit:literal type="number" pos:line="1453" pos:column="107">0</lit:literal></expr>]</index></name><op:operator pos:line="1453" pos:column="109">)</op:operator></expr>)</condition><then pos:line="1453" pos:column="111"> <block pos:line="1453" pos:column="112">{
						<expr_stmt><expr><call><name><name pos:line="1454" pos:column="49">pcf</name><op:operator pos:line="1454" pos:column="52">-&gt;</op:operator><name pos:line="1454" pos:column="54">SetTranslation</name></name><argument_list pos:line="1454" pos:column="68">(<argument><expr><name><name pos:line="1454" pos:column="69">sCharacter</name><index pos:line="1454" pos:column="79">[<expr><lit:literal type="number" pos:line="1454" pos:column="80">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="1454" pos:column="84">sCharacterLowered</name><index pos:line="1454" pos:column="101">[<expr><lit:literal type="number" pos:line="1454" pos:column="102">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></for>
			<return pos:line="1458" pos:column="25">return <expr><name pos:line="1458" pos:column="32">pcf</name></expr>;</return>
		}</block></then> <else pos:line="1459" pos:column="19">else <block pos:line="1459" pos:column="24">{
			<return pos:line="1460" pos:column="25">return <expr><op:operator pos:line="1460" pos:column="32">new</op:operator> <call><name pos:line="1460" pos:column="36">CaseFolderDBCS</name><argument_list pos:line="1460" pos:column="50">(<argument><expr><name pos:line="1460" pos:column="51">cpDest</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></else></if>
}</block></function>

<function><type><name><name pos:line="1465" pos:column="1">std</name><op:operator pos:line="1465" pos:column="4">::</op:operator><name pos:line="1465" pos:column="6">string</name></name></type> <name><name pos:line="1465" pos:column="13">ScintillaWin</name><op:operator pos:line="1465" pos:column="25">::</op:operator><name pos:line="1465" pos:column="27">CaseMapString</name></name><parameter_list pos:line="1465" pos:column="40">(<param><decl><type><specifier pos:line="1465" pos:column="41">const</specifier> <name><name pos:line="1465" pos:column="47">std</name><op:operator pos:line="1465" pos:column="50">::</op:operator><name pos:line="1465" pos:column="52">string</name></name> <type:modifier pos:line="1465" pos:column="59">&amp;</type:modifier></type><name pos:line="1465" pos:column="60">s</name></decl></param>, <param><decl><type><name pos:line="1465" pos:column="63">int</name></type> <name pos:line="1465" pos:column="67">caseMapping</name></decl></param>)</parameter_list> <block pos:line="1465" pos:column="80">{
	<if pos:line="1466" pos:column="9">if <condition pos:line="1466" pos:column="12">(<expr><call><name><name pos:line="1466" pos:column="13">s</name><op:operator pos:line="1466" pos:column="14">.</op:operator><name pos:line="1466" pos:column="15">size</name></name><argument_list pos:line="1466" pos:column="19">()</argument_list></call> <op:operator pos:line="1466" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="1466" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="1466" pos:column="27">
		<return pos:line="1467" pos:column="17">return <expr><call><name><name pos:line="1467" pos:column="24">std</name><op:operator pos:line="1467" pos:column="27">::</op:operator><name pos:line="1467" pos:column="29">string</name></name><argument_list pos:line="1467" pos:column="35">()</argument_list></call></expr>;</return></then></if>

	<if pos:line="1469" pos:column="9">if <condition pos:line="1469" pos:column="12">(<expr><name pos:line="1469" pos:column="13">caseMapping</name> <op:operator pos:line="1469" pos:column="25">==</op:operator> <name pos:line="1469" pos:column="28">cmSame</name></expr>)</condition><then pos:line="1469" pos:column="35">
		<return pos:line="1470" pos:column="17">return <expr><name pos:line="1470" pos:column="24">s</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="1472" pos:column="9">UINT</name></type> <name pos:line="1472" pos:column="14">cpDoc</name> <init pos:line="1472" pos:column="20">= <expr><call><name pos:line="1472" pos:column="22">CodePageOfDocument</name><argument_list pos:line="1472" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="1474" pos:column="9">unsigned</name> <name pos:line="1474" pos:column="18">int</name></type> <name pos:line="1474" pos:column="22">lengthUTF16</name> <init pos:line="1474" pos:column="34">= <expr><call><name><op:operator pos:line="1474" pos:column="36">::</op:operator><name pos:line="1474" pos:column="38">MultiByteToWideChar</name></name><argument_list pos:line="1474" pos:column="57">(<argument><expr><name pos:line="1474" pos:column="58">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1474" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1474" pos:column="68">s</name><op:operator pos:line="1474" pos:column="69">.</op:operator><name pos:line="1474" pos:column="70">c_str</name></name><argument_list pos:line="1474" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1474" pos:column="79">s</name><op:operator pos:line="1474" pos:column="80">.</op:operator><name pos:line="1474" pos:column="81">size</name></name><argument_list pos:line="1474" pos:column="85">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1474" pos:column="89">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1474" pos:column="95">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1475" pos:column="9">if <condition pos:line="1475" pos:column="12">(<expr><name pos:line="1475" pos:column="13">lengthUTF16</name> <op:operator pos:line="1475" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="1475" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="1475" pos:column="30">	<comment type="line" pos:line="1475" pos:column="33">// Failed to convert</comment>
		<return pos:line="1476" pos:column="17">return <expr><name pos:line="1476" pos:column="24">s</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="1478" pos:column="9">DWORD</name></type> <name pos:line="1478" pos:column="15">mapFlags</name> <init pos:line="1478" pos:column="24">= <expr><name pos:line="1478" pos:column="26">LCMAP_LINGUISTIC_CASING</name> <op:operator pos:line="1478" pos:column="50">|</op:operator>
		<op:operator pos:line="1479" pos:column="17">(</op:operator><op:operator pos:line="1479" pos:column="18">(</op:operator><name pos:line="1479" pos:column="19">caseMapping</name> <op:operator pos:line="1479" pos:column="31">==</op:operator> <name pos:line="1479" pos:column="34">cmUpper</name><op:operator pos:line="1479" pos:column="41">)</op:operator> <op:operator pos:line="1479" pos:column="43">?</op:operator> <name pos:line="1479" pos:column="45">LCMAP_UPPERCASE</name> <op:operator pos:line="1479" pos:column="61">:</op:operator> <name pos:line="1479" pos:column="63">LCMAP_LOWERCASE</name><op:operator pos:line="1479" pos:column="78">)</op:operator></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="1481" pos:column="9">// Many conversions performed by search function are short so optimize this case.</comment>
	<enum pos:line="1482" pos:column="9">enum <block pos:line="1482" pos:column="14">{ <decl><name pos:line="1482" pos:column="16">shortSize</name><init pos:line="1482" pos:column="25">=<expr><lit:literal type="number" pos:line="1482" pos:column="26">20</lit:literal></expr></init></decl> }</block>;</enum>

	<if pos:line="1484" pos:column="9">if <condition pos:line="1484" pos:column="12">(<expr><call><name><name pos:line="1484" pos:column="13">s</name><op:operator pos:line="1484" pos:column="14">.</op:operator><name pos:line="1484" pos:column="15">size</name></name><argument_list pos:line="1484" pos:column="19">()</argument_list></call> <op:operator pos:line="1484" pos:column="22">&gt;</op:operator> <name pos:line="1484" pos:column="24">shortSize</name></expr>)</condition><then pos:line="1484" pos:column="34"> <block pos:line="1484" pos:column="35">{
		<comment type="line" pos:line="1485" pos:column="17">// Use dynamic allocations for long strings</comment>

		<comment type="line" pos:line="1487" pos:column="17">// Change text to UTF-16</comment>
		<function_decl><type><name><name pos:line="1488" pos:column="17">std</name><op:operator pos:line="1488" pos:column="20">::</op:operator><name><name pos:line="1488" pos:column="22">vector</name><argument_list pos:line="1488" pos:column="28">&lt;<argument><expr><name pos:line="1488" pos:column="29">wchar_t</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1488" pos:column="38">vwcText</name><parameter_list pos:line="1488" pos:column="45">(<param><decl><type><name pos:line="1488" pos:column="46">lengthUTF16</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name><op:operator pos:line="1489" pos:column="17">::</op:operator><name pos:line="1489" pos:column="19">MultiByteToWideChar</name></name><argument_list pos:line="1489" pos:column="38">(<argument><expr><name pos:line="1489" pos:column="39">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1489" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1489" pos:column="49">s</name><op:operator pos:line="1489" pos:column="50">.</op:operator><name pos:line="1489" pos:column="51">c_str</name></name><argument_list pos:line="1489" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1489" pos:column="60">s</name><op:operator pos:line="1489" pos:column="61">.</op:operator><name pos:line="1489" pos:column="62">size</name></name><argument_list pos:line="1489" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1489" pos:column="70">&amp;</op:operator><name><name pos:line="1489" pos:column="71">vwcText</name><index pos:line="1489" pos:column="78">[<expr><lit:literal type="number" pos:line="1489" pos:column="79">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1489" pos:column="83">lengthUTF16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="1491" pos:column="17">// Change case</comment>
		<decl_stmt><decl><type><name pos:line="1492" pos:column="17">int</name></type> <name pos:line="1492" pos:column="21">charsConverted</name> <init pos:line="1492" pos:column="36">= <expr><call><name><op:operator pos:line="1492" pos:column="38">::</op:operator><name pos:line="1492" pos:column="40">LCMapStringW</name></name><argument_list pos:line="1492" pos:column="52">(<argument><expr><name pos:line="1492" pos:column="53">LOCALE_SYSTEM_DEFAULT</name></expr></argument>, <argument><expr><name pos:line="1492" pos:column="76">mapFlags</name></expr></argument>,
			<argument><expr><op:operator pos:line="1493" pos:column="25">&amp;</op:operator><name><name pos:line="1493" pos:column="26">vwcText</name><index pos:line="1493" pos:column="33">[<expr><lit:literal type="number" pos:line="1493" pos:column="34">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1493" pos:column="38">lengthUTF16</name></expr></argument>, <argument><expr><name pos:line="1493" pos:column="51">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1493" pos:column="57">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<function_decl><type><name><name pos:line="1494" pos:column="17">std</name><op:operator pos:line="1494" pos:column="20">::</op:operator><name><name pos:line="1494" pos:column="22">vector</name><argument_list pos:line="1494" pos:column="28">&lt;<argument><expr><name pos:line="1494" pos:column="29">wchar_t</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1494" pos:column="38">vwcConverted</name><parameter_list pos:line="1494" pos:column="50">(<param><decl><type><name pos:line="1494" pos:column="51">charsConverted</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name><op:operator pos:line="1495" pos:column="17">::</op:operator><name pos:line="1495" pos:column="19">LCMapStringW</name></name><argument_list pos:line="1495" pos:column="31">(<argument><expr><name pos:line="1495" pos:column="32">LOCALE_SYSTEM_DEFAULT</name></expr></argument>, <argument><expr><name pos:line="1495" pos:column="55">mapFlags</name></expr></argument>,
			<argument><expr><op:operator pos:line="1496" pos:column="25">&amp;</op:operator><name><name pos:line="1496" pos:column="26">vwcText</name><index pos:line="1496" pos:column="33">[<expr><lit:literal type="number" pos:line="1496" pos:column="34">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1496" pos:column="38">lengthUTF16</name></expr></argument>, <argument><expr><op:operator pos:line="1496" pos:column="51">&amp;</op:operator><name><name pos:line="1496" pos:column="52">vwcConverted</name><index pos:line="1496" pos:column="64">[<expr><lit:literal type="number" pos:line="1496" pos:column="65">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1496" pos:column="69">charsConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="1498" pos:column="17">// Change back to document encoding</comment>
		<decl_stmt><decl><type><name pos:line="1499" pos:column="17">unsigned</name> <name pos:line="1499" pos:column="26">int</name></type> <name pos:line="1499" pos:column="30">lengthConverted</name> <init pos:line="1499" pos:column="46">= <expr><call><name><op:operator pos:line="1499" pos:column="48">::</op:operator><name pos:line="1499" pos:column="50">WideCharToMultiByte</name></name><argument_list pos:line="1499" pos:column="69">(<argument><expr><name pos:line="1499" pos:column="70">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1499" pos:column="77">0</lit:literal></expr></argument>,
			<argument><expr><op:operator pos:line="1500" pos:column="25">&amp;</op:operator><name><name pos:line="1500" pos:column="26">vwcConverted</name><index pos:line="1500" pos:column="38">[<expr><lit:literal type="number" pos:line="1500" pos:column="39">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1500" pos:column="43">vwcConverted</name><op:operator pos:line="1500" pos:column="55">.</op:operator><name pos:line="1500" pos:column="56">size</name></name><argument_list pos:line="1500" pos:column="60">()</argument_list></call></expr></argument>,
			<argument><expr><name pos:line="1501" pos:column="25">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1501" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1501" pos:column="34">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1501" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<function_decl><type><name><name pos:line="1502" pos:column="17">std</name><op:operator pos:line="1502" pos:column="20">::</op:operator><name><name pos:line="1502" pos:column="22">vector</name><argument_list pos:line="1502" pos:column="28">&lt;<argument><expr><name pos:line="1502" pos:column="29">char</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1502" pos:column="35">vcConverted</name><parameter_list pos:line="1502" pos:column="46">(<param><decl><type><name pos:line="1502" pos:column="47">lengthConverted</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name><op:operator pos:line="1503" pos:column="17">::</op:operator><name pos:line="1503" pos:column="19">WideCharToMultiByte</name></name><argument_list pos:line="1503" pos:column="38">(<argument><expr><name pos:line="1503" pos:column="39">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1503" pos:column="46">0</lit:literal></expr></argument>,
			<argument><expr><op:operator pos:line="1504" pos:column="25">&amp;</op:operator><name><name pos:line="1504" pos:column="26">vwcConverted</name><index pos:line="1504" pos:column="38">[<expr><lit:literal type="number" pos:line="1504" pos:column="39">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1504" pos:column="43">vwcConverted</name><op:operator pos:line="1504" pos:column="55">.</op:operator><name pos:line="1504" pos:column="56">size</name></name><argument_list pos:line="1504" pos:column="60">()</argument_list></call></expr></argument>,
			<argument><expr><op:operator pos:line="1505" pos:column="25">&amp;</op:operator><name><name pos:line="1505" pos:column="26">vcConverted</name><index pos:line="1505" pos:column="37">[<expr><lit:literal type="number" pos:line="1505" pos:column="38">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1505" pos:column="42">vcConverted</name><op:operator pos:line="1505" pos:column="53">.</op:operator><name pos:line="1505" pos:column="54">size</name></name><argument_list pos:line="1505" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1505" pos:column="62">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1505" pos:column="68">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:line="1507" pos:column="17">return <expr><call><name><name pos:line="1507" pos:column="24">std</name><op:operator pos:line="1507" pos:column="27">::</op:operator><name pos:line="1507" pos:column="29">string</name></name><argument_list pos:line="1507" pos:column="35">(<argument><expr><op:operator pos:line="1507" pos:column="36">&amp;</op:operator><name><name pos:line="1507" pos:column="37">vcConverted</name><index pos:line="1507" pos:column="48">[<expr><lit:literal type="number" pos:line="1507" pos:column="49">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1507" pos:column="53">vcConverted</name><op:operator pos:line="1507" pos:column="64">.</op:operator><name pos:line="1507" pos:column="65">size</name></name><argument_list pos:line="1507" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	}</block></then> <else pos:line="1509" pos:column="11">else <block pos:line="1509" pos:column="16">{
		<comment type="line" pos:line="1510" pos:column="17">// Use static allocations for short strings as much faster</comment>
		<comment type="line" pos:line="1511" pos:column="17">// A factor of 15 for single character strings</comment>

		<comment type="line" pos:line="1513" pos:column="17">// Change text to UTF-16</comment>
		<decl_stmt><decl><type><name pos:line="1514" pos:column="17">wchar_t</name></type> <name><name pos:line="1514" pos:column="25">vwcText</name><index pos:line="1514" pos:column="32">[<expr><name pos:line="1514" pos:column="33">shortSize</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1515" pos:column="17">::</op:operator><name pos:line="1515" pos:column="19">MultiByteToWideChar</name></name><argument_list pos:line="1515" pos:column="38">(<argument><expr><name pos:line="1515" pos:column="39">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1515" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1515" pos:column="49">s</name><op:operator pos:line="1515" pos:column="50">.</op:operator><name pos:line="1515" pos:column="51">c_str</name></name><argument_list pos:line="1515" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1515" pos:column="60">s</name><op:operator pos:line="1515" pos:column="61">.</op:operator><name pos:line="1515" pos:column="62">size</name></name><argument_list pos:line="1515" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1515" pos:column="70">vwcText</name></expr></argument>, <argument><expr><name pos:line="1515" pos:column="79">lengthUTF16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="1517" pos:column="17">// Change case</comment>
		<decl_stmt><decl><type><name pos:line="1518" pos:column="17">int</name></type> <name pos:line="1518" pos:column="21">charsConverted</name> <init pos:line="1518" pos:column="36">= <expr><call><name><op:operator pos:line="1518" pos:column="38">::</op:operator><name pos:line="1518" pos:column="40">LCMapStringW</name></name><argument_list pos:line="1518" pos:column="52">(<argument><expr><name pos:line="1518" pos:column="53">LOCALE_SYSTEM_DEFAULT</name></expr></argument>, <argument><expr><name pos:line="1518" pos:column="76">mapFlags</name></expr></argument>,
			<argument><expr><name pos:line="1519" pos:column="25">vwcText</name></expr></argument>, <argument><expr><name pos:line="1519" pos:column="34">lengthUTF16</name></expr></argument>, <argument><expr><name pos:line="1519" pos:column="47">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1519" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="1520" pos:column="17">// Full mapping may produce up to 3 characters per input character</comment>
		<decl_stmt><decl><type><name pos:line="1521" pos:column="17">wchar_t</name></type> <name><name pos:line="1521" pos:column="25">vwcConverted</name><index pos:line="1521" pos:column="37">[<expr><name pos:line="1521" pos:column="38">shortSize</name><op:operator pos:line="1521" pos:column="47">*</op:operator><lit:literal type="number" pos:line="1521" pos:column="48">3</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1522" pos:column="17">::</op:operator><name pos:line="1522" pos:column="19">LCMapStringW</name></name><argument_list pos:line="1522" pos:column="31">(<argument><expr><name pos:line="1522" pos:column="32">LOCALE_SYSTEM_DEFAULT</name></expr></argument>, <argument><expr><name pos:line="1522" pos:column="55">mapFlags</name></expr></argument>, <argument><expr><name pos:line="1522" pos:column="65">vwcText</name></expr></argument>, <argument><expr><name pos:line="1522" pos:column="74">lengthUTF16</name></expr></argument>,
			<argument><expr><name pos:line="1523" pos:column="25">vwcConverted</name></expr></argument>, <argument><expr><name pos:line="1523" pos:column="39">charsConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="1525" pos:column="17">// Change back to document encoding</comment>
		<decl_stmt><decl><type><name pos:line="1526" pos:column="17">unsigned</name> <name pos:line="1526" pos:column="26">int</name></type> <name pos:line="1526" pos:column="30">lengthConverted</name> <init pos:line="1526" pos:column="46">= <expr><call><name><op:operator pos:line="1526" pos:column="48">::</op:operator><name pos:line="1526" pos:column="50">WideCharToMultiByte</name></name><argument_list pos:line="1526" pos:column="69">(<argument><expr><name pos:line="1526" pos:column="70">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1526" pos:column="77">0</lit:literal></expr></argument>,
			<argument><expr><name pos:line="1527" pos:column="25">vwcConverted</name></expr></argument>, <argument><expr><name pos:line="1527" pos:column="39">charsConverted</name></expr></argument>,
			<argument><expr><name pos:line="1528" pos:column="25">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1528" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1528" pos:column="34">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1528" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="1529" pos:column="17">// Each UTF-16 code unit may need up to 3 bytes in UTF-8</comment>
		<decl_stmt><decl><type><name pos:line="1530" pos:column="17">char</name></type> <name><name pos:line="1530" pos:column="22">vcConverted</name><index pos:line="1530" pos:column="33">[<expr><name pos:line="1530" pos:column="34">shortSize</name> <op:operator pos:line="1530" pos:column="44">*</op:operator> <lit:literal type="number" pos:line="1530" pos:column="46">3</lit:literal> <op:operator pos:line="1530" pos:column="48">*</op:operator> <lit:literal type="number" pos:line="1530" pos:column="50">3</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1531" pos:column="17">::</op:operator><name pos:line="1531" pos:column="19">WideCharToMultiByte</name></name><argument_list pos:line="1531" pos:column="38">(<argument><expr><name pos:line="1531" pos:column="39">cpDoc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1531" pos:column="46">0</lit:literal></expr></argument>,
			<argument><expr><name pos:line="1532" pos:column="25">vwcConverted</name></expr></argument>, <argument><expr><name pos:line="1532" pos:column="39">charsConverted</name></expr></argument>,
			<argument><expr><name pos:line="1533" pos:column="25">vcConverted</name></expr></argument>, <argument><expr><name pos:line="1533" pos:column="38">lengthConverted</name></expr></argument>, <argument><expr><name pos:line="1533" pos:column="55">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1533" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:line="1535" pos:column="17">return <expr><call><name><name pos:line="1535" pos:column="24">std</name><op:operator pos:line="1535" pos:column="27">::</op:operator><name pos:line="1535" pos:column="29">string</name></name><argument_list pos:line="1535" pos:column="35">(<argument><expr><name pos:line="1535" pos:column="36">vcConverted</name></expr></argument>, <argument><expr><name pos:line="1535" pos:column="49">lengthConverted</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="1539" pos:column="1">void</name></type> <name><name pos:line="1539" pos:column="6">ScintillaWin</name><op:operator pos:line="1539" pos:column="18">::</op:operator><name pos:line="1539" pos:column="20">Copy</name></name><parameter_list pos:line="1539" pos:column="24">()</parameter_list> <block pos:line="1539" pos:column="27">{
	<comment type="line" pos:line="1540" pos:column="9">//Platform::DebugPrintf("Copy\n");</comment>
	<if pos:line="1541" pos:column="9">if <condition pos:line="1541" pos:column="12">(<expr><op:operator pos:line="1541" pos:column="13">!</op:operator><call><name><name pos:line="1541" pos:column="14">sel</name><op:operator pos:line="1541" pos:column="17">.</op:operator><name pos:line="1541" pos:column="18">Empty</name></name><argument_list pos:line="1541" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="1541" pos:column="26"> <block pos:line="1541" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="1542" pos:column="17">SelectionText</name></type> <name pos:line="1542" pos:column="31">selectedText</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1543" pos:column="17">CopySelectionRange</name><argument_list pos:line="1543" pos:column="35">(<argument><expr><op:operator pos:line="1543" pos:column="36">&amp;</op:operator><name pos:line="1543" pos:column="37">selectedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1544" pos:column="17">CopyToClipboard</name><argument_list pos:line="1544" pos:column="32">(<argument><expr><name pos:line="1544" pos:column="33">selectedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1548" pos:column="1">void</name></type> <name><name pos:line="1548" pos:column="6">ScintillaWin</name><op:operator pos:line="1548" pos:column="18">::</op:operator><name pos:line="1548" pos:column="20">CopyAllowLine</name></name><parameter_list pos:line="1548" pos:column="33">()</parameter_list> <block pos:line="1548" pos:column="36">{
	<decl_stmt><decl><type><name pos:line="1549" pos:column="9">SelectionText</name></type> <name pos:line="1549" pos:column="23">selectedText</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1550" pos:column="9">CopySelectionRange</name><argument_list pos:line="1550" pos:column="27">(<argument><expr><op:operator pos:line="1550" pos:column="28">&amp;</op:operator><name pos:line="1550" pos:column="29">selectedText</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1550" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1551" pos:column="9">CopyToClipboard</name><argument_list pos:line="1551" pos:column="24">(<argument><expr><name pos:line="1551" pos:column="25">selectedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1554" pos:column="1">bool</name></type> <name><name pos:line="1554" pos:column="6">ScintillaWin</name><op:operator pos:line="1554" pos:column="18">::</op:operator><name pos:line="1554" pos:column="20">CanPaste</name></name><parameter_list pos:line="1554" pos:column="28">()</parameter_list> <block pos:line="1554" pos:column="31">{
	<if pos:line="1555" pos:column="9">if <condition pos:line="1555" pos:column="12">(<expr><op:operator pos:line="1555" pos:column="13">!</op:operator><call><name><name pos:line="1555" pos:column="14">Editor</name><op:operator pos:line="1555" pos:column="20">::</op:operator><name pos:line="1555" pos:column="22">CanPaste</name></name><argument_list pos:line="1555" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="1555" pos:column="33">
		<return pos:line="1556" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1556" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<if pos:line="1557" pos:column="9">if <condition pos:line="1557" pos:column="12">(<expr><call><name><op:operator pos:line="1557" pos:column="13">::</op:operator><name pos:line="1557" pos:column="15">IsClipboardFormatAvailable</name></name><argument_list pos:line="1557" pos:column="41">(<argument><expr><name pos:line="1557" pos:column="42">CF_TEXT</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1557" pos:column="51">
		<return pos:line="1558" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1558" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<if pos:line="1559" pos:column="9">if <condition pos:line="1559" pos:column="12">(<expr><call><name pos:line="1559" pos:column="13">IsUnicodeMode</name><argument_list pos:line="1559" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="1559" pos:column="29">
		<return pos:line="1560" pos:column="17">return <expr><call><name><op:operator pos:line="1560" pos:column="24">::</op:operator><name pos:line="1560" pos:column="26">IsClipboardFormatAvailable</name></name><argument_list pos:line="1560" pos:column="52">(<argument><expr><name pos:line="1560" pos:column="53">CF_UNICODETEXT</name></expr></argument>)</argument_list></call> <op:operator pos:line="1560" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="1560" pos:column="72">0</lit:literal></expr>;</return></then></if>
	<return pos:line="1561" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1561" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<class pos:line="1564" pos:column="1">class <name pos:line="1564" pos:column="7">GlobalMemory</name> <block pos:line="1564" pos:column="20">{<private type="default" pos:line="1564" pos:column="21">
	<decl_stmt><decl><type><name pos:line="1565" pos:column="9">HGLOBAL</name></type> <name pos:line="1565" pos:column="17">hand</name></decl>;</decl_stmt>
</private><public pos:line="1566" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="1567" pos:column="9">void</name> <type:modifier pos:line="1567" pos:column="14">*</type:modifier></type><name pos:line="1567" pos:column="15">ptr</name></decl>;</decl_stmt>
	<constructor><name pos:line="1568" pos:column="9">GlobalMemory</name><parameter_list pos:line="1568" pos:column="21">()</parameter_list> <member_list pos:line="1568" pos:column="24">: <call><name pos:line="1568" pos:column="26">hand</name><argument_list pos:line="1568" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="1568" pos:column="31">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1568" pos:column="33">,</op:operator> <call><name pos:line="1568" pos:column="35">ptr</name><argument_list pos:line="1568" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="1568" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="1568" pos:column="42">{
	}</block></constructor>
	<constructor><name pos:line="1570" pos:column="9">GlobalMemory</name><parameter_list pos:line="1570" pos:column="21">(<param><decl><type><name pos:line="1570" pos:column="22">HGLOBAL</name></type> <name pos:line="1570" pos:column="30">hand_</name></decl></param>)</parameter_list> <member_list pos:line="1570" pos:column="37">: <call><name pos:line="1570" pos:column="39">hand</name><argument_list pos:line="1570" pos:column="43">(<argument><expr><name pos:line="1570" pos:column="44">hand_</name></expr></argument>)</argument_list></call><op:operator pos:line="1570" pos:column="50">,</op:operator> <call><name pos:line="1570" pos:column="52">ptr</name><argument_list pos:line="1570" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="1570" pos:column="56">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="1570" pos:column="59">{
		<if pos:line="1571" pos:column="17">if <condition pos:line="1571" pos:column="20">(<expr><name pos:line="1571" pos:column="21">hand</name></expr>)</condition><then pos:line="1571" pos:column="26"> <block pos:line="1571" pos:column="27">{
			<expr_stmt><expr><name pos:line="1572" pos:column="25">ptr</name> <op:operator pos:line="1572" pos:column="29">=</op:operator> <call><name><op:operator pos:line="1572" pos:column="31">::</op:operator><name pos:line="1572" pos:column="33">GlobalLock</name></name><argument_list pos:line="1572" pos:column="43">(<argument><expr><name pos:line="1572" pos:column="44">hand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></constructor>
	<destructor><name pos:line="1575" pos:column="9">~<name pos:line="1575" pos:column="10">GlobalMemory</name></name><parameter_list pos:line="1575" pos:column="22">()</parameter_list> <block pos:line="1575" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="1576" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="1576" pos:column="32">(<argument><expr><op:operator pos:line="1576" pos:column="33">!</op:operator><name pos:line="1576" pos:column="34">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></destructor>
	<function><type><name pos:line="1578" pos:column="9">void</name></type> <name pos:line="1578" pos:column="14">Allocate</name><parameter_list pos:line="1578" pos:column="22">(<param><decl><type><name pos:line="1578" pos:column="23">size_t</name></type> <name pos:line="1578" pos:column="30">bytes</name></decl></param>)</parameter_list> <block pos:line="1578" pos:column="37">{
		<expr_stmt><expr><name pos:line="1579" pos:column="17">hand</name> <op:operator pos:line="1579" pos:column="22">=</op:operator> <call><name><op:operator pos:line="1579" pos:column="24">::</op:operator><name pos:line="1579" pos:column="26">GlobalAlloc</name></name><argument_list pos:line="1579" pos:column="37">(<argument><expr><name pos:line="1579" pos:column="38">GMEM_MOVEABLE</name> <op:operator pos:line="1579" pos:column="52">|</op:operator> <name pos:line="1579" pos:column="54">GMEM_ZEROINIT</name></expr></argument>, <argument><expr><name pos:line="1579" pos:column="69">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="1580" pos:column="17">if <condition pos:line="1580" pos:column="20">(<expr><name pos:line="1580" pos:column="21">hand</name></expr>)</condition><then pos:line="1580" pos:column="26"> <block pos:line="1580" pos:column="27">{
			<expr_stmt><expr><name pos:line="1581" pos:column="25">ptr</name> <op:operator pos:line="1581" pos:column="29">=</op:operator> <call><name><op:operator pos:line="1581" pos:column="31">::</op:operator><name pos:line="1581" pos:column="33">GlobalLock</name></name><argument_list pos:line="1581" pos:column="43">(<argument><expr><name pos:line="1581" pos:column="44">hand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><type><name pos:line="1584" pos:column="9">HGLOBAL</name></type> <name pos:line="1584" pos:column="17">Unlock</name><parameter_list pos:line="1584" pos:column="23">()</parameter_list> <block pos:line="1584" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="1585" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="1585" pos:column="32">(<argument><expr><name pos:line="1585" pos:column="33">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1586" pos:column="17">HGLOBAL</name></type> <name pos:line="1586" pos:column="25">handCopy</name> <init pos:line="1586" pos:column="34">= <expr><name pos:line="1586" pos:column="36">hand</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="1587" pos:column="17">::</op:operator><name pos:line="1587" pos:column="19">GlobalUnlock</name></name><argument_list pos:line="1587" pos:column="31">(<argument><expr><name pos:line="1587" pos:column="32">hand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1588" pos:column="17">ptr</name> <op:operator pos:line="1588" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="1588" pos:column="23">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1589" pos:column="17">hand</name> <op:operator pos:line="1589" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="1589" pos:column="24">0</lit:literal></expr>;</expr_stmt>
		<return pos:line="1590" pos:column="17">return <expr><name pos:line="1590" pos:column="24">handCopy</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="1592" pos:column="9">void</name></type> <name pos:line="1592" pos:column="14">SetClip</name><parameter_list pos:line="1592" pos:column="21">(<param><decl><type><name pos:line="1592" pos:column="22">UINT</name></type> <name pos:line="1592" pos:column="27">uFormat</name></decl></param>)</parameter_list> <block pos:line="1592" pos:column="36">{
		<expr_stmt><expr><call><name><op:operator pos:line="1593" pos:column="17">::</op:operator><name pos:line="1593" pos:column="19">SetClipboardData</name></name><argument_list pos:line="1593" pos:column="35">(<argument><expr><name pos:line="1593" pos:column="36">uFormat</name></expr></argument>, <argument><expr><call><name pos:line="1593" pos:column="45">Unlock</name><argument_list pos:line="1593" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><name pos:line="1595" pos:column="9">operator bool</name><parameter_list pos:line="1595" pos:column="22">()</parameter_list> <specifier pos:line="1595" pos:column="25">const</specifier> <block pos:line="1595" pos:column="31">{
		<return pos:line="1596" pos:column="17">return <expr><name pos:line="1596" pos:column="24">ptr</name> <op:operator pos:line="1596" pos:column="28">!=</op:operator> <lit:literal type="number" pos:line="1596" pos:column="31">0</lit:literal></expr>;</return>
	}</block></function>
	<function><type><name pos:line="1598" pos:column="9">SIZE_T</name></type> <name pos:line="1598" pos:column="16">Size</name><parameter_list pos:line="1598" pos:column="20">()</parameter_list> <block pos:line="1598" pos:column="23">{
		<return pos:line="1599" pos:column="17">return <expr><call><name><op:operator pos:line="1599" pos:column="24">::</op:operator><name pos:line="1599" pos:column="26">GlobalSize</name></name><argument_list pos:line="1599" pos:column="36">(<argument><expr><name pos:line="1599" pos:column="37">hand</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="1603" pos:column="1">void</name></type> <name><name pos:line="1603" pos:column="6">ScintillaWin</name><op:operator pos:line="1603" pos:column="18">::</op:operator><name pos:line="1603" pos:column="20">InsertPasteText</name></name><parameter_list pos:line="1603" pos:column="35">(<param><decl><type><specifier pos:line="1603" pos:column="36">const</specifier> <name pos:line="1603" pos:column="42">char</name> <type:modifier pos:line="1603" pos:column="47">*</type:modifier></type><name pos:line="1603" pos:column="48">text</name></decl></param>, <param><decl><type><name pos:line="1603" pos:column="54">int</name></type> <name pos:line="1603" pos:column="58">len</name></decl></param>, <param><decl><type><name pos:line="1603" pos:column="63">SelectionPosition</name></type> <name pos:line="1603" pos:column="81">selStart</name></decl></param>, <param><decl><type><name pos:line="1603" pos:column="91">bool</name></type> <name pos:line="1603" pos:column="96">isRectangular</name></decl></param>, <param><decl><type><name pos:line="1603" pos:column="111">bool</name></type> <name pos:line="1603" pos:column="116">isLine</name></decl></param>)</parameter_list> <block pos:line="1603" pos:column="124">{
	<if pos:line="1604" pos:column="9">if <condition pos:line="1604" pos:column="12">(<expr><name pos:line="1604" pos:column="13">isRectangular</name></expr>)</condition><then pos:line="1604" pos:column="27"> <block pos:line="1604" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="1605" pos:column="17">PasteRectangular</name><argument_list pos:line="1605" pos:column="33">(<argument><expr><name pos:line="1605" pos:column="34">selStart</name></expr></argument>, <argument><expr><name pos:line="1605" pos:column="44">text</name></expr></argument>, <argument><expr><name pos:line="1605" pos:column="50">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="1606" pos:column="11">else <block pos:line="1606" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="1607" pos:column="17">char</name> <type:modifier pos:line="1607" pos:column="22">*</type:modifier></type><name pos:line="1607" pos:column="23">convertedText</name> <init pos:line="1607" pos:column="37">= <expr><lit:literal type="number" pos:line="1607" pos:column="39">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="1608" pos:column="17">if <condition pos:line="1608" pos:column="20">(<expr><name pos:line="1608" pos:column="21">convertPastes</name></expr>)</condition><then pos:line="1608" pos:column="35"> <block pos:line="1608" pos:column="36">{
			<comment type="line" pos:line="1609" pos:column="25">// Convert line endings of the paste into our local line-endings mode</comment>
			<expr_stmt><expr><name pos:line="1610" pos:column="25">convertedText</name> <op:operator pos:line="1610" pos:column="39">=</op:operator> <call><name><name pos:line="1610" pos:column="41">Document</name><op:operator pos:line="1610" pos:column="49">::</op:operator><name pos:line="1610" pos:column="51">TransformLineEnds</name></name><argument_list pos:line="1610" pos:column="68">(<argument><expr><op:operator pos:line="1610" pos:column="69">&amp;</op:operator><name pos:line="1610" pos:column="70">len</name></expr></argument>, <argument><expr><name pos:line="1610" pos:column="75">text</name></expr></argument>, <argument><expr><name pos:line="1610" pos:column="81">len</name></expr></argument>, <argument><expr><name><name pos:line="1610" pos:column="86">pdoc</name><op:operator pos:line="1610" pos:column="90">-&gt;</op:operator><name pos:line="1610" pos:column="92">eolMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1611" pos:column="25">text</name> <op:operator pos:line="1611" pos:column="30">=</op:operator> <name pos:line="1611" pos:column="32">convertedText</name></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="1613" pos:column="17">if <condition pos:line="1613" pos:column="20">(<expr><name pos:line="1613" pos:column="21">isLine</name></expr>)</condition><then pos:line="1613" pos:column="28"> <block pos:line="1613" pos:column="29">{
			<decl_stmt><decl><type><name pos:line="1614" pos:column="25">int</name></type> <name pos:line="1614" pos:column="29">insertPos</name> <init pos:line="1614" pos:column="39">= <expr><call><name><name pos:line="1614" pos:column="41">pdoc</name><op:operator pos:line="1614" pos:column="45">-&gt;</op:operator><name pos:line="1614" pos:column="47">LineStart</name></name><argument_list pos:line="1614" pos:column="56">(<argument><expr><call><name><name pos:line="1614" pos:column="57">pdoc</name><op:operator pos:line="1614" pos:column="61">-&gt;</op:operator><name pos:line="1614" pos:column="63">LineFromPosition</name></name><argument_list pos:line="1614" pos:column="79">(<argument><expr><call><name><name pos:line="1614" pos:column="80">sel</name><op:operator pos:line="1614" pos:column="83">.</op:operator><name pos:line="1614" pos:column="84">MainCaret</name></name><argument_list pos:line="1614" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="1615" pos:column="25">pdoc</name><op:operator pos:line="1615" pos:column="29">-&gt;</op:operator><name pos:line="1615" pos:column="31">InsertString</name></name><argument_list pos:line="1615" pos:column="43">(<argument><expr><name pos:line="1615" pos:column="44">insertPos</name></expr></argument>, <argument><expr><name pos:line="1615" pos:column="55">text</name></expr></argument>, <argument><expr><name pos:line="1615" pos:column="61">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="1616" pos:column="25">// add the newline if necessary</comment>
			<if pos:line="1617" pos:column="25">if <condition pos:line="1617" pos:column="28">(<expr><op:operator pos:line="1617" pos:column="29">(</op:operator><name pos:line="1617" pos:column="30">len</name> <op:operator pos:line="1617" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="1617" pos:column="36">0</lit:literal><op:operator pos:line="1617" pos:column="37">)</op:operator> <op:operator pos:line="1617" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="1617" pos:column="42">(</op:operator><name><name pos:line="1617" pos:column="43">text</name><index pos:line="1617" pos:column="47">[<expr><name pos:line="1617" pos:column="48">len</name><op:operator pos:line="1617" pos:column="51">-</op:operator><lit:literal type="number" pos:line="1617" pos:column="52">1</lit:literal></expr>]</index></name> <op:operator pos:line="1617" pos:column="55">!=</op:operator> <lit:literal type="char" pos:line="1617" pos:column="58">'\n'</lit:literal> <op:operator pos:line="1617" pos:column="63">&amp;&amp;</op:operator> <name><name pos:line="1617" pos:column="66">text</name><index pos:line="1617" pos:column="70">[<expr><name pos:line="1617" pos:column="71">len</name><op:operator pos:line="1617" pos:column="74">-</op:operator><lit:literal type="number" pos:line="1617" pos:column="75">1</lit:literal></expr>]</index></name> <op:operator pos:line="1617" pos:column="78">!=</op:operator> <lit:literal type="char" pos:line="1617" pos:column="81">'\r'</lit:literal><op:operator pos:line="1617" pos:column="85">)</op:operator></expr>)</condition><then pos:line="1617" pos:column="87"> <block pos:line="1617" pos:column="88">{
				<decl_stmt><decl><type><specifier pos:line="1618" pos:column="33">const</specifier> <name pos:line="1618" pos:column="39">char</name> <type:modifier pos:line="1618" pos:column="44">*</type:modifier></type><name pos:line="1618" pos:column="45">endline</name> <init pos:line="1618" pos:column="53">= <expr><call><name pos:line="1618" pos:column="55">StringFromEOLMode</name><argument_list pos:line="1618" pos:column="72">(<argument><expr><name><name pos:line="1618" pos:column="73">pdoc</name><op:operator pos:line="1618" pos:column="77">-&gt;</op:operator><name pos:line="1618" pos:column="79">eolMode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="1619" pos:column="33">pdoc</name><op:operator pos:line="1619" pos:column="37">-&gt;</op:operator><name pos:line="1619" pos:column="39">InsertString</name></name><argument_list pos:line="1619" pos:column="51">(<argument><expr><name pos:line="1619" pos:column="52">insertPos</name> <op:operator pos:line="1619" pos:column="62">+</op:operator> <name pos:line="1619" pos:column="64">len</name></expr></argument>, <argument><expr><name pos:line="1619" pos:column="69">endline</name></expr></argument>, <argument><expr><call><name pos:line="1619" pos:column="78">strlen</name><argument_list pos:line="1619" pos:column="84">(<argument><expr><name pos:line="1619" pos:column="85">endline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1620" pos:column="33">len</name> <op:operator pos:line="1620" pos:column="37">+=</op:operator> <call><name pos:line="1620" pos:column="40">strlen</name><argument_list pos:line="1620" pos:column="46">(<argument><expr><name pos:line="1620" pos:column="47">endline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="1622" pos:column="25">if <condition pos:line="1622" pos:column="28">(<expr><call><name><name pos:line="1622" pos:column="29">sel</name><op:operator pos:line="1622" pos:column="32">.</op:operator><name pos:line="1622" pos:column="33">MainCaret</name></name><argument_list pos:line="1622" pos:column="42">()</argument_list></call> <op:operator pos:line="1622" pos:column="45">==</op:operator> <name pos:line="1622" pos:column="48">insertPos</name></expr>)</condition><then pos:line="1622" pos:column="58"> <block pos:line="1622" pos:column="59">{
				<expr_stmt><expr><call><name pos:line="1623" pos:column="33">SetEmptySelection</name><argument_list pos:line="1623" pos:column="50">(<argument><expr><call><name><name pos:line="1623" pos:column="51">sel</name><op:operator pos:line="1623" pos:column="54">.</op:operator><name pos:line="1623" pos:column="55">MainCaret</name></name><argument_list pos:line="1623" pos:column="64">()</argument_list></call> <op:operator pos:line="1623" pos:column="67">+</op:operator> <name pos:line="1623" pos:column="69">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="1625" pos:column="19">else <block pos:line="1625" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="1626" pos:column="25">InsertPaste</name><argument_list pos:line="1626" pos:column="36">(<argument><expr><name pos:line="1626" pos:column="37">selStart</name></expr></argument>, <argument><expr><name pos:line="1626" pos:column="47">text</name></expr></argument>, <argument><expr><name pos:line="1626" pos:column="53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><op:operator pos:line="1628" pos:column="17">delete</op:operator> <index pos:line="1628" pos:column="24">[]</index><name pos:line="1628" pos:column="26">convertedText</name></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="1632" pos:column="1">void</name></type> <name><name pos:line="1632" pos:column="6">ScintillaWin</name><op:operator pos:line="1632" pos:column="18">::</op:operator><name pos:line="1632" pos:column="20">Paste</name></name><parameter_list pos:line="1632" pos:column="25">()</parameter_list> <block pos:line="1632" pos:column="28">{
	<if pos:line="1633" pos:column="9">if <condition pos:line="1633" pos:column="12">(<expr><op:operator pos:line="1633" pos:column="13">!</op:operator><call><name><op:operator pos:line="1633" pos:column="14">::</op:operator><name pos:line="1633" pos:column="16">OpenClipboard</name></name><argument_list pos:line="1633" pos:column="29">(<argument><expr><call><name pos:line="1633" pos:column="30">MainHWND</name><argument_list pos:line="1633" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1633" pos:column="42">
		<return pos:line="1634" pos:column="17">return;</return></then></if>
	<function_decl><type><name pos:line="1635" pos:column="9">UndoGroup</name></type> <name pos:line="1635" pos:column="19">ug</name><parameter_list pos:line="1635" pos:column="21">(<param><decl><type><name pos:line="1635" pos:column="22">pdoc</name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="1636" pos:column="9">bool</name></type> <name pos:line="1636" pos:column="14">isLine</name> <init pos:line="1636" pos:column="21">= <expr><call><name pos:line="1636" pos:column="23">SelectionEmpty</name><argument_list pos:line="1636" pos:column="37">()</argument_list></call> <op:operator pos:line="1636" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="1636" pos:column="43">(</op:operator><call><name><op:operator pos:line="1636" pos:column="44">::</op:operator><name pos:line="1636" pos:column="46">IsClipboardFormatAvailable</name></name><argument_list pos:line="1636" pos:column="72">(<argument><expr><name pos:line="1636" pos:column="73">cfLineSelect</name></expr></argument>)</argument_list></call> <op:operator pos:line="1636" pos:column="87">!=</op:operator> <lit:literal type="number" pos:line="1636" pos:column="90">0</lit:literal><op:operator pos:line="1636" pos:column="91">)</op:operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1637" pos:column="9">ClearSelection</name><argument_list pos:line="1637" pos:column="23">(<argument><expr><name pos:line="1637" pos:column="24">multiPasteMode</name> <op:operator pos:line="1637" pos:column="39">==</op:operator> <name pos:line="1637" pos:column="42">SC_MULTIPASTE_EACH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1638" pos:column="9">SelectionPosition</name></type> <name pos:line="1638" pos:column="27">selStart</name> <init pos:line="1638" pos:column="36">= <expr><call><name><name pos:line="1638" pos:column="38">sel</name><op:operator pos:line="1638" pos:column="41">.</op:operator><name pos:line="1638" pos:column="42">IsRectangular</name></name><argument_list pos:line="1638" pos:column="55">()</argument_list></call> <op:operator pos:line="1638" pos:column="58">?</op:operator>
		<call><name><name pos:line="1639" pos:column="17">sel</name><op:operator pos:line="1639" pos:column="20">.</op:operator><name pos:line="1639" pos:column="21">Rectangular</name></name><argument_list pos:line="1639" pos:column="32">()</argument_list></call><op:operator pos:line="1639" pos:column="34">.</op:operator><call><name pos:line="1639" pos:column="35">Start</name><argument_list pos:line="1639" pos:column="40">()</argument_list></call> <op:operator pos:line="1639" pos:column="43">:</op:operator>
		<call><name><name pos:line="1640" pos:column="17">sel</name><op:operator pos:line="1640" pos:column="20">.</op:operator><name pos:line="1640" pos:column="21">Range</name></name><argument_list pos:line="1640" pos:column="26">(<argument><expr><call><name><name pos:line="1640" pos:column="27">sel</name><op:operator pos:line="1640" pos:column="30">.</op:operator><name pos:line="1640" pos:column="31">Main</name></name><argument_list pos:line="1640" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1640" pos:column="38">.</op:operator><call><name pos:line="1640" pos:column="39">Start</name><argument_list pos:line="1640" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1641" pos:column="9">bool</name></type> <name pos:line="1641" pos:column="14">isRectangular</name> <init pos:line="1641" pos:column="28">= <expr><call><name><op:operator pos:line="1641" pos:column="30">::</op:operator><name pos:line="1641" pos:column="32">IsClipboardFormatAvailable</name></name><argument_list pos:line="1641" pos:column="58">(<argument><expr><name pos:line="1641" pos:column="59">cfColumnSelect</name></expr></argument>)</argument_list></call> <op:operator pos:line="1641" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="1641" pos:column="78">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="1643" pos:column="9">// Always use CF_UNICODETEXT if available</comment>
	<decl_stmt><decl><type><name pos:line="1644" pos:column="9">GlobalMemory</name></type> <name pos:line="1644" pos:column="22">memUSelection</name><argument_list pos:line="1644" pos:column="35">(<argument><expr><call><name><op:operator pos:line="1644" pos:column="36">::</op:operator><name pos:line="1644" pos:column="38">GetClipboardData</name></name><argument_list pos:line="1644" pos:column="54">(<argument><expr><name pos:line="1644" pos:column="55">CF_UNICODETEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="1645" pos:column="9">if <condition pos:line="1645" pos:column="12">(<expr><name pos:line="1645" pos:column="13">memUSelection</name></expr>)</condition><then pos:line="1645" pos:column="27"> <block pos:line="1645" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="1646" pos:column="17">wchar_t</name> <type:modifier pos:line="1646" pos:column="25">*</type:modifier></type><name pos:line="1646" pos:column="26">uptr</name> <init pos:line="1646" pos:column="31">= <expr><call><name><name pos:line="1646" pos:column="33">static_cast</name><argument_list pos:line="1646" pos:column="44">&lt;<argument><expr><name pos:line="1646" pos:column="45">wchar_t</name> <op:operator pos:line="1646" pos:column="53">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1646" pos:column="55">(<argument><expr><name><name pos:line="1646" pos:column="56">memUSelection</name><op:operator pos:line="1646" pos:column="69">.</op:operator><name pos:line="1646" pos:column="70">ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1647" pos:column="17">if <condition pos:line="1647" pos:column="20">(<expr><name pos:line="1647" pos:column="21">uptr</name></expr>)</condition><then pos:line="1647" pos:column="26"> <block pos:line="1647" pos:column="27">{
			<decl_stmt><decl><type><name pos:line="1648" pos:column="25">unsigned</name> <name pos:line="1648" pos:column="34">int</name></type> <name pos:line="1648" pos:column="38">len</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1649" pos:column="25">char</name> <type:modifier pos:line="1649" pos:column="30">*</type:modifier></type><name pos:line="1649" pos:column="31">putf</name></decl>;</decl_stmt>
			<comment type="line" pos:line="1650" pos:column="25">// Default Scintilla behaviour in Unicode mode</comment>
			<if pos:line="1651" pos:column="25">if <condition pos:line="1651" pos:column="28">(<expr><call><name pos:line="1651" pos:column="29">IsUnicodeMode</name><argument_list pos:line="1651" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="1651" pos:column="45"> <block pos:line="1651" pos:column="46">{
				<decl_stmt><decl><type><name pos:line="1652" pos:column="33">unsigned</name> <name pos:line="1652" pos:column="42">int</name></type> <name pos:line="1652" pos:column="46">bytes</name> <init pos:line="1652" pos:column="52">= <expr><call><name><name pos:line="1652" pos:column="54">memUSelection</name><op:operator pos:line="1652" pos:column="67">.</op:operator><name pos:line="1652" pos:column="68">Size</name></name><argument_list pos:line="1652" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="1653" pos:column="33">len</name> <op:operator pos:line="1653" pos:column="37">=</op:operator> <call><name pos:line="1653" pos:column="39">UTF8Length</name><argument_list pos:line="1653" pos:column="49">(<argument><expr><name pos:line="1653" pos:column="50">uptr</name></expr></argument>, <argument><expr><name pos:line="1653" pos:column="56">bytes</name> <op:operator pos:line="1653" pos:column="62">/</op:operator> <lit:literal type="number" pos:line="1653" pos:column="64">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1654" pos:column="33">putf</name> <op:operator pos:line="1654" pos:column="38">=</op:operator> <op:operator pos:line="1654" pos:column="40">new</op:operator> <name><name pos:line="1654" pos:column="44">char</name><index pos:line="1654" pos:column="48">[<expr><name pos:line="1654" pos:column="49">len</name> <op:operator pos:line="1654" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1654" pos:column="55">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="1655" pos:column="33">UTF8FromUTF16</name><argument_list pos:line="1655" pos:column="46">(<argument><expr><name pos:line="1655" pos:column="47">uptr</name></expr></argument>, <argument><expr><name pos:line="1655" pos:column="53">bytes</name> <op:operator pos:line="1655" pos:column="59">/</op:operator> <lit:literal type="number" pos:line="1655" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1655" pos:column="64">putf</name></expr></argument>, <argument><expr><name pos:line="1655" pos:column="70">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1656" pos:column="27">else <block pos:line="1656" pos:column="32">{
				<comment type="line" pos:line="1657" pos:column="33">// CF_UNICODETEXT available, but not in Unicode mode</comment>
				<comment type="line" pos:line="1658" pos:column="33">// Convert from Unicode to current Scintilla code page</comment>
				<decl_stmt><decl><type><name pos:line="1659" pos:column="33">UINT</name></type> <name pos:line="1659" pos:column="38">cpDest</name> <init pos:line="1659" pos:column="45">= <expr><call><name pos:line="1659" pos:column="47">CodePageOfDocument</name><argument_list pos:line="1659" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="1660" pos:column="33">len</name> <op:operator pos:line="1660" pos:column="37">=</op:operator> <call><name><op:operator pos:line="1660" pos:column="39">::</op:operator><name pos:line="1660" pos:column="41">WideCharToMultiByte</name></name><argument_list pos:line="1660" pos:column="60">(<argument><expr><name pos:line="1660" pos:column="61">cpDest</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1660" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1660" pos:column="72">uptr</name></expr></argument>, <argument><expr><op:operator pos:line="1660" pos:column="78">-</op:operator><lit:literal type="number" pos:line="1660" pos:column="79">1</lit:literal></expr></argument>,
				                            <argument><expr><name pos:line="1661" pos:column="61">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1661" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1661" pos:column="70">NULL</name></expr></argument>, <argument><expr><name pos:line="1661" pos:column="76">NULL</name></expr></argument>)</argument_list></call> <op:operator pos:line="1661" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="1661" pos:column="84">1</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="1661" pos:column="87">// subtract 0 terminator</comment>
				<expr_stmt><expr><name pos:line="1662" pos:column="33">putf</name> <op:operator pos:line="1662" pos:column="38">=</op:operator> <op:operator pos:line="1662" pos:column="40">new</op:operator> <name><name pos:line="1662" pos:column="44">char</name><index pos:line="1662" pos:column="48">[<expr><name pos:line="1662" pos:column="49">len</name> <op:operator pos:line="1662" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1662" pos:column="55">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="1663" pos:column="33">::</op:operator><name pos:line="1663" pos:column="35">WideCharToMultiByte</name></name><argument_list pos:line="1663" pos:column="54">(<argument><expr><name pos:line="1663" pos:column="55">cpDest</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1663" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1663" pos:column="66">uptr</name></expr></argument>, <argument><expr><op:operator pos:line="1663" pos:column="72">-</op:operator><lit:literal type="number" pos:line="1663" pos:column="73">1</lit:literal></expr></argument>,
					                      <argument><expr><name pos:line="1664" pos:column="63">putf</name></expr></argument>, <argument><expr><name pos:line="1664" pos:column="69">len</name> <op:operator pos:line="1664" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="1664" pos:column="75">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1664" pos:column="78">NULL</name></expr></argument>, <argument><expr><name pos:line="1664" pos:column="84">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>

			<expr_stmt><expr><call><name pos:line="1667" pos:column="25">InsertPasteText</name><argument_list pos:line="1667" pos:column="40">(<argument><expr><name pos:line="1667" pos:column="41">putf</name></expr></argument>, <argument><expr><name pos:line="1667" pos:column="47">len</name></expr></argument>, <argument><expr><name pos:line="1667" pos:column="52">selStart</name></expr></argument>, <argument><expr><name pos:line="1667" pos:column="62">isRectangular</name></expr></argument>, <argument><expr><name pos:line="1667" pos:column="77">isLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="1668" pos:column="25">delete</op:operator> <index pos:line="1668" pos:column="32">[]</index><name pos:line="1668" pos:column="34">putf</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="1670" pos:column="17">memUSelection</name><op:operator pos:line="1670" pos:column="30">.</op:operator><name pos:line="1670" pos:column="31">Unlock</name></name><argument_list pos:line="1670" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="1671" pos:column="11">else <block pos:line="1671" pos:column="16">{
		<comment type="line" pos:line="1672" pos:column="17">// CF_UNICODETEXT not available, paste ANSI text</comment>
		<decl_stmt><decl><type><name pos:line="1673" pos:column="17">GlobalMemory</name></type> <name pos:line="1673" pos:column="30">memSelection</name><argument_list pos:line="1673" pos:column="42">(<argument><expr><call><name><op:operator pos:line="1673" pos:column="43">::</op:operator><name pos:line="1673" pos:column="45">GetClipboardData</name></name><argument_list pos:line="1673" pos:column="61">(<argument><expr><name pos:line="1673" pos:column="62">CF_TEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<if pos:line="1674" pos:column="17">if <condition pos:line="1674" pos:column="20">(<expr><name pos:line="1674" pos:column="21">memSelection</name></expr>)</condition><then pos:line="1674" pos:column="34"> <block pos:line="1674" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="1675" pos:column="25">char</name> <type:modifier pos:line="1675" pos:column="30">*</type:modifier></type><name pos:line="1675" pos:column="31">ptr</name> <init pos:line="1675" pos:column="35">= <expr><call><name><name pos:line="1675" pos:column="37">static_cast</name><argument_list pos:line="1675" pos:column="48">&lt;<argument><expr><name pos:line="1675" pos:column="49">char</name> <op:operator pos:line="1675" pos:column="54">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1675" pos:column="56">(<argument><expr><name><name pos:line="1675" pos:column="57">memSelection</name><op:operator pos:line="1675" pos:column="69">.</op:operator><name pos:line="1675" pos:column="70">ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1676" pos:column="25">if <condition pos:line="1676" pos:column="28">(<expr><name pos:line="1676" pos:column="29">ptr</name></expr>)</condition><then pos:line="1676" pos:column="33"> <block pos:line="1676" pos:column="34">{
				<decl_stmt><decl><type><name pos:line="1677" pos:column="33">unsigned</name> <name pos:line="1677" pos:column="42">int</name></type> <name pos:line="1677" pos:column="46">bytes</name> <init pos:line="1677" pos:column="52">= <expr><call><name><name pos:line="1677" pos:column="54">memSelection</name><op:operator pos:line="1677" pos:column="66">.</op:operator><name pos:line="1677" pos:column="67">Size</name></name><argument_list pos:line="1677" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1678" pos:column="33">unsigned</name> <name pos:line="1678" pos:column="42">int</name></type> <name pos:line="1678" pos:column="46">len</name> <init pos:line="1678" pos:column="50">= <expr><name pos:line="1678" pos:column="52">bytes</name></expr></init></decl>;</decl_stmt>
				<for pos:line="1679" pos:column="33">for (<init><decl><type><name pos:line="1679" pos:column="38">unsigned</name> <name pos:line="1679" pos:column="47">int</name></type> <name pos:line="1679" pos:column="51">i</name> <init pos:line="1679" pos:column="53">= <expr><lit:literal type="number" pos:line="1679" pos:column="55">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1679" pos:column="58">i</name> <op:operator pos:line="1679" pos:column="60">&lt;</op:operator> <name pos:line="1679" pos:column="62">bytes</name></expr>;</condition> <incr><expr><name pos:line="1679" pos:column="69">i</name><op:operator pos:line="1679" pos:column="70">++</op:operator></expr></incr>) <block pos:line="1679" pos:column="74">{
					<if pos:line="1680" pos:column="41">if <condition pos:line="1680" pos:column="44">(<expr><op:operator pos:line="1680" pos:column="45">(</op:operator><name pos:line="1680" pos:column="46">len</name> <op:operator pos:line="1680" pos:column="50">==</op:operator> <name pos:line="1680" pos:column="53">bytes</name><op:operator pos:line="1680" pos:column="58">)</op:operator> <op:operator pos:line="1680" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="1680" pos:column="63">(</op:operator><lit:literal type="number" pos:line="1680" pos:column="64">0</lit:literal> <op:operator pos:line="1680" pos:column="66">==</op:operator> <name><name pos:line="1680" pos:column="69">ptr</name><index pos:line="1680" pos:column="72">[<expr><name pos:line="1680" pos:column="73">i</name></expr>]</index></name><op:operator pos:line="1680" pos:column="75">)</op:operator></expr>)</condition><then pos:line="1680" pos:column="77">
						<expr_stmt><expr><name pos:line="1681" pos:column="49">len</name> <op:operator pos:line="1681" pos:column="53">=</op:operator> <name pos:line="1681" pos:column="55">i</name></expr>;</expr_stmt></then></if>
				}</block></for>

				<comment type="line" pos:line="1684" pos:column="33">// In Unicode mode, convert clipboard text to UTF-8</comment>
				<if pos:line="1685" pos:column="33">if <condition pos:line="1685" pos:column="36">(<expr><call><name pos:line="1685" pos:column="37">IsUnicodeMode</name><argument_list pos:line="1685" pos:column="50">()</argument_list></call></expr>)</condition><then pos:line="1685" pos:column="53"> <block pos:line="1685" pos:column="54">{
					<decl_stmt><decl><type><name pos:line="1686" pos:column="41">wchar_t</name> <type:modifier pos:line="1686" pos:column="49">*</type:modifier></type><name pos:line="1686" pos:column="50">uptr</name> <init pos:line="1686" pos:column="55">= <expr><op:operator pos:line="1686" pos:column="57">new</op:operator> <name><name pos:line="1686" pos:column="61">wchar_t</name><index pos:line="1686" pos:column="68">[<expr><name pos:line="1686" pos:column="69">len</name><op:operator pos:line="1686" pos:column="72">+</op:operator><lit:literal type="number" pos:line="1686" pos:column="73">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name pos:line="1688" pos:column="41">unsigned</name> <name pos:line="1688" pos:column="50">int</name></type> <name pos:line="1688" pos:column="54">ulen</name> <init pos:line="1688" pos:column="59">= <expr><call><name><op:operator pos:line="1688" pos:column="61">::</op:operator><name pos:line="1688" pos:column="63">MultiByteToWideChar</name></name><argument_list pos:line="1688" pos:column="82">(<argument><expr><name pos:line="1688" pos:column="83">CP_ACP</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1688" pos:column="91">0</lit:literal></expr></argument>,
					                    <argument><expr><name pos:line="1689" pos:column="61">ptr</name></expr></argument>, <argument><expr><name pos:line="1689" pos:column="66">len</name></expr></argument>, <argument><expr><name pos:line="1689" pos:column="71">uptr</name></expr></argument>, <argument><expr><name pos:line="1689" pos:column="77">len</name><op:operator pos:line="1689" pos:column="80">+</op:operator><lit:literal type="number" pos:line="1689" pos:column="81">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name pos:line="1691" pos:column="41">unsigned</name> <name pos:line="1691" pos:column="50">int</name></type> <name pos:line="1691" pos:column="54">mlen</name> <init pos:line="1691" pos:column="59">= <expr><call><name pos:line="1691" pos:column="61">UTF8Length</name><argument_list pos:line="1691" pos:column="71">(<argument><expr><name pos:line="1691" pos:column="72">uptr</name></expr></argument>, <argument><expr><name pos:line="1691" pos:column="78">ulen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1692" pos:column="41">char</name> <type:modifier pos:line="1692" pos:column="46">*</type:modifier></type><name pos:line="1692" pos:column="47">putf</name> <init pos:line="1692" pos:column="52">= <expr><op:operator pos:line="1692" pos:column="54">new</op:operator> <name><name pos:line="1692" pos:column="58">char</name><index pos:line="1692" pos:column="62">[<expr><name pos:line="1692" pos:column="63">mlen</name> <op:operator pos:line="1692" pos:column="68">+</op:operator> <lit:literal type="number" pos:line="1692" pos:column="70">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<if pos:line="1693" pos:column="41">if <condition pos:line="1693" pos:column="44">(<expr><name pos:line="1693" pos:column="45">putf</name></expr>)</condition><then pos:line="1693" pos:column="50"> <block pos:line="1693" pos:column="51">{
						<comment type="line" pos:line="1694" pos:column="49">// CP_UTF8 not available on Windows 95, so use UTF8FromUTF16()</comment>
						<expr_stmt><expr><call><name pos:line="1695" pos:column="49">UTF8FromUTF16</name><argument_list pos:line="1695" pos:column="62">(<argument><expr><name pos:line="1695" pos:column="63">uptr</name></expr></argument>, <argument><expr><name pos:line="1695" pos:column="69">ulen</name></expr></argument>, <argument><expr><name pos:line="1695" pos:column="75">putf</name></expr></argument>, <argument><expr><name pos:line="1695" pos:column="81">mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>

					<expr_stmt><expr><op:operator pos:line="1698" pos:column="41">delete</op:operator> <index pos:line="1698" pos:column="48">[]</index><name pos:line="1698" pos:column="50">uptr</name></expr>;</expr_stmt>

					<if pos:line="1700" pos:column="41">if <condition pos:line="1700" pos:column="44">(<expr><name pos:line="1700" pos:column="45">putf</name></expr>)</condition><then pos:line="1700" pos:column="50"> <block pos:line="1700" pos:column="51">{
						<expr_stmt><expr><call><name pos:line="1701" pos:column="49">InsertPasteText</name><argument_list pos:line="1701" pos:column="64">(<argument><expr><name pos:line="1701" pos:column="65">putf</name></expr></argument>, <argument><expr><name pos:line="1701" pos:column="71">mlen</name></expr></argument>, <argument><expr><name pos:line="1701" pos:column="77">selStart</name></expr></argument>, <argument><expr><name pos:line="1701" pos:column="87">isRectangular</name></expr></argument>, <argument><expr><name pos:line="1701" pos:column="102">isLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><op:operator pos:line="1702" pos:column="49">delete</op:operator> <index pos:line="1702" pos:column="56">[]</index><name pos:line="1702" pos:column="58">putf</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="1704" pos:column="35">else <block pos:line="1704" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="1705" pos:column="41">InsertPasteText</name><argument_list pos:line="1705" pos:column="56">(<argument><expr><name pos:line="1705" pos:column="57">ptr</name></expr></argument>, <argument><expr><name pos:line="1705" pos:column="62">len</name></expr></argument>, <argument><expr><name pos:line="1705" pos:column="67">selStart</name></expr></argument>, <argument><expr><name pos:line="1705" pos:column="77">isRectangular</name></expr></argument>, <argument><expr><name pos:line="1705" pos:column="92">isLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="1708" pos:column="25">memSelection</name><op:operator pos:line="1708" pos:column="37">.</op:operator><name pos:line="1708" pos:column="38">Unlock</name></name><argument_list pos:line="1708" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	<expr_stmt><expr><call><name><op:operator pos:line="1711" pos:column="9">::</op:operator><name pos:line="1711" pos:column="11">CloseClipboard</name></name><argument_list pos:line="1711" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1712" pos:column="9">Redraw</name><argument_list pos:line="1712" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1715" pos:column="1">void</name></type> <name><name pos:line="1715" pos:column="6">ScintillaWin</name><op:operator pos:line="1715" pos:column="18">::</op:operator><name pos:line="1715" pos:column="20">CreateCallTipWindow</name></name><parameter_list pos:line="1715" pos:column="39">(<param><decl><type><name pos:line="1715" pos:column="40">PRectangle</name></type></decl></param>)</parameter_list> <block pos:line="1715" pos:column="52">{
	<if pos:line="1716" pos:column="9">if <condition pos:line="1716" pos:column="12">(<expr><op:operator pos:line="1716" pos:column="13">!</op:operator><call><name><name pos:line="1716" pos:column="14">ct</name><op:operator pos:line="1716" pos:column="16">.</op:operator><name pos:line="1716" pos:column="17">wCallTip</name><op:operator pos:line="1716" pos:column="25">.</op:operator><name pos:line="1716" pos:column="26">Created</name></name><argument_list pos:line="1716" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="1716" pos:column="36"> <block pos:line="1716" pos:column="37">{
		<expr_stmt><expr><name><name pos:line="1717" pos:column="17">ct</name><op:operator pos:line="1717" pos:column="19">.</op:operator><name pos:line="1717" pos:column="20">wCallTip</name></name> <op:operator pos:line="1717" pos:column="29">=</op:operator> <call><name><op:operator pos:line="1717" pos:column="31">::</op:operator><name pos:line="1717" pos:column="33">CreateWindow</name></name><argument_list pos:line="1717" pos:column="45">(<argument><expr><name pos:line="1717" pos:column="46">callClassName</name></expr></argument>, <argument><expr><call><name pos:line="1717" pos:column="61">TEXT</name><argument_list pos:line="1717" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="1717" pos:column="66">"ACallTip"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
					     <argument><expr><name pos:line="1718" pos:column="46">WS_POPUP</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1718" pos:column="56">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1718" pos:column="61">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1718" pos:column="66">150</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1718" pos:column="71">20</lit:literal></expr></argument>,
					     <argument><expr><call><name pos:line="1719" pos:column="46">MainHWND</name><argument_list pos:line="1719" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1719" pos:column="58">0</lit:literal></expr></argument>,
					     <argument><expr><call><name pos:line="1720" pos:column="46">GetWindowInstance</name><argument_list pos:line="1720" pos:column="63">(<argument><expr><call><name pos:line="1720" pos:column="64">MainHWND</name><argument_list pos:line="1720" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					     <argument><expr><name pos:line="1721" pos:column="46">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1722" pos:column="17">ct</name><op:operator pos:line="1722" pos:column="19">.</op:operator><name pos:line="1722" pos:column="20">wDraw</name></name> <op:operator pos:line="1722" pos:column="26">=</op:operator> <name><name pos:line="1722" pos:column="28">ct</name><op:operator pos:line="1722" pos:column="30">.</op:operator><name pos:line="1722" pos:column="31">wCallTip</name></name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1726" pos:column="1">void</name></type> <name><name pos:line="1726" pos:column="6">ScintillaWin</name><op:operator pos:line="1726" pos:column="18">::</op:operator><name pos:line="1726" pos:column="20">AddToPopUp</name></name><parameter_list pos:line="1726" pos:column="30">(<param><decl><type><specifier pos:line="1726" pos:column="31">const</specifier> <name pos:line="1726" pos:column="37">char</name> <type:modifier pos:line="1726" pos:column="42">*</type:modifier></type><name pos:line="1726" pos:column="43">label</name></decl></param>, <param><decl><type><name pos:line="1726" pos:column="50">int</name></type> <name pos:line="1726" pos:column="54">cmd</name></decl></param>, <param><decl><type><name pos:line="1726" pos:column="59">bool</name></type> <name pos:line="1726" pos:column="64">enabled</name></decl></param>)</parameter_list> <block pos:line="1726" pos:column="73">{
	<decl_stmt><decl><type><name pos:line="1727" pos:column="9">HMENU</name></type> <name pos:line="1727" pos:column="15">hmenuPopup</name> <init pos:line="1727" pos:column="26">= <expr><call><name><name pos:line="1727" pos:column="28">reinterpret_cast</name><argument_list pos:line="1727" pos:column="44">&lt;<argument><expr><name pos:line="1727" pos:column="45">HMENU</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1727" pos:column="51">(<argument><expr><call><name><name pos:line="1727" pos:column="52">popup</name><op:operator pos:line="1727" pos:column="57">.</op:operator><name pos:line="1727" pos:column="58">GetID</name></name><argument_list pos:line="1727" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1728" pos:column="9">if <condition pos:line="1728" pos:column="12">(<expr><op:operator pos:line="1728" pos:column="13">!</op:operator><name><name pos:line="1728" pos:column="14">label</name><index pos:line="1728" pos:column="19">[<expr><lit:literal type="number" pos:line="1728" pos:column="20">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="1728" pos:column="23">
		<expr_stmt><expr><call><name><op:operator pos:line="1729" pos:column="17">::</op:operator><name pos:line="1729" pos:column="19">AppendMenuA</name></name><argument_list pos:line="1729" pos:column="30">(<argument><expr><name pos:line="1729" pos:column="31">hmenuPopup</name></expr></argument>, <argument><expr><name pos:line="1729" pos:column="43">MF_SEPARATOR</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1729" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1729" pos:column="60">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="1730" pos:column="9">else <if pos:line="1730" pos:column="14">if <condition pos:line="1730" pos:column="17">(<expr><name pos:line="1730" pos:column="18">enabled</name></expr>)</condition><then pos:line="1730" pos:column="26">
		<expr_stmt><expr><call><name><op:operator pos:line="1731" pos:column="17">::</op:operator><name pos:line="1731" pos:column="19">AppendMenuA</name></name><argument_list pos:line="1731" pos:column="30">(<argument><expr><name pos:line="1731" pos:column="31">hmenuPopup</name></expr></argument>, <argument><expr><name pos:line="1731" pos:column="43">MF_STRING</name></expr></argument>, <argument><expr><name pos:line="1731" pos:column="54">cmd</name></expr></argument>, <argument><expr><name pos:line="1731" pos:column="59">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="1732" pos:column="9">else
		<expr_stmt><expr><call><name><op:operator pos:line="1733" pos:column="17">::</op:operator><name pos:line="1733" pos:column="19">AppendMenuA</name></name><argument_list pos:line="1733" pos:column="30">(<argument><expr><name pos:line="1733" pos:column="31">hmenuPopup</name></expr></argument>, <argument><expr><name pos:line="1733" pos:column="43">MF_STRING</name> <op:operator pos:line="1733" pos:column="53">|</op:operator> <name pos:line="1733" pos:column="55">MF_DISABLED</name> <op:operator pos:line="1733" pos:column="67">|</op:operator> <name pos:line="1733" pos:column="69">MF_GRAYED</name></expr></argument>, <argument><expr><name pos:line="1733" pos:column="80">cmd</name></expr></argument>, <argument><expr><name pos:line="1733" pos:column="85">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></function>

<function><type><name pos:line="1736" pos:column="1">void</name></type> <name><name pos:line="1736" pos:column="6">ScintillaWin</name><op:operator pos:line="1736" pos:column="18">::</op:operator><name pos:line="1736" pos:column="20">ClaimSelection</name></name><parameter_list pos:line="1736" pos:column="34">()</parameter_list> <block pos:line="1736" pos:column="37">{
	<comment type="line" pos:line="1737" pos:column="9">// Windows does not have a primary selection</comment>
}</block></function>

<comment type="line" format="doxygen" pos:line="1740" pos:column="1">/// Implement IUnknown</comment>

<macro><name pos:line="1742" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1742" pos:column="14">(<argument pos:line="1742" pos:column="15">ULONG</argument>)</argument_list></macro><expr_stmt><expr><call><name pos:line="1742" pos:column="21">FormatEnumerator_AddRef</name><argument_list pos:line="1742" pos:column="44">(<argument><expr><name pos:line="1742" pos:column="45">FormatEnumerator</name> <op:operator pos:line="1742" pos:column="62">*</op:operator><name pos:line="1742" pos:column="63">fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name pos:line="1743" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1743" pos:column="14">FormatEnumerator_QueryInterface</name><parameter_list pos:line="1743" pos:column="45">(<param><decl><type><name pos:line="1743" pos:column="46">FormatEnumerator</name> <type:modifier pos:line="1743" pos:column="63">*</type:modifier></type><name pos:line="1743" pos:column="64">fe</name></decl></param>, <param><decl><type><name pos:line="1743" pos:column="68">REFIID</name></type> <name pos:line="1743" pos:column="75">riid</name></decl></param>, <param><decl><type><name pos:line="1743" pos:column="81">PVOID</name> <type:modifier pos:line="1743" pos:column="87">*</type:modifier></type><name pos:line="1743" pos:column="88">ppv</name></decl></param>)</parameter_list> <block pos:line="1743" pos:column="93">{
	<comment type="line" pos:line="1744" pos:column="9">//Platform::DebugPrintf("EFE QI");</comment>
	<expr_stmt><expr><op:operator pos:line="1745" pos:column="9">*</op:operator><name pos:line="1745" pos:column="10">ppv</name> <op:operator pos:line="1745" pos:column="14">=</op:operator> <name pos:line="1745" pos:column="16">NULL</name></expr>;</expr_stmt>
	<if pos:line="1746" pos:column="9">if <condition pos:line="1746" pos:column="12">(<expr><name pos:line="1746" pos:column="13">riid</name> <op:operator pos:line="1746" pos:column="18">==</op:operator> <name pos:line="1746" pos:column="21">IID_IUnknown</name></expr>)</condition><then pos:line="1746" pos:column="34">
		<expr_stmt><expr><op:operator pos:line="1747" pos:column="17">*</op:operator><name pos:line="1747" pos:column="18">ppv</name> <op:operator pos:line="1747" pos:column="22">=</op:operator> <call><name><name pos:line="1747" pos:column="24">reinterpret_cast</name><argument_list pos:line="1747" pos:column="40">&lt;<argument><expr><name pos:line="1747" pos:column="41">IEnumFORMATETC</name> <op:operator pos:line="1747" pos:column="56">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1747" pos:column="58">(<argument><expr><name pos:line="1747" pos:column="59">fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="1748" pos:column="9">if <condition pos:line="1748" pos:column="12">(<expr><name pos:line="1748" pos:column="13">riid</name> <op:operator pos:line="1748" pos:column="18">==</op:operator> <name pos:line="1748" pos:column="21">IID_IEnumFORMATETC</name></expr>)</condition><then pos:line="1748" pos:column="40">
		<expr_stmt><expr><op:operator pos:line="1749" pos:column="17">*</op:operator><name pos:line="1749" pos:column="18">ppv</name> <op:operator pos:line="1749" pos:column="22">=</op:operator> <call><name><name pos:line="1749" pos:column="24">reinterpret_cast</name><argument_list pos:line="1749" pos:column="40">&lt;<argument><expr><name pos:line="1749" pos:column="41">IEnumFORMATETC</name> <op:operator pos:line="1749" pos:column="56">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1749" pos:column="58">(<argument><expr><name pos:line="1749" pos:column="59">fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="1750" pos:column="9">if <condition pos:line="1750" pos:column="12">(<expr><op:operator pos:line="1750" pos:column="13">!</op:operator><op:operator pos:line="1750" pos:column="14">*</op:operator><name pos:line="1750" pos:column="15">ppv</name></expr>)</condition><then pos:line="1750" pos:column="19">
		<return pos:line="1751" pos:column="17">return <expr><name pos:line="1751" pos:column="24">E_NOINTERFACE</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name pos:line="1752" pos:column="9">FormatEnumerator_AddRef</name><argument_list pos:line="1752" pos:column="32">(<argument><expr><name pos:line="1752" pos:column="33">fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1753" pos:column="9">return <expr><name pos:line="1753" pos:column="16">S_OK</name></expr>;</return>
}</block></function>
<macro><name pos:line="1755" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1755" pos:column="14">(<argument pos:line="1755" pos:column="15">ULONG</argument>)</argument_list></macro><macro><name pos:line="1755" pos:column="21">FormatEnumerator_AddRef</name><argument_list pos:line="1755" pos:column="44">(<argument pos:line="1755" pos:column="45">FormatEnumerator *fe</argument>)</argument_list></macro> <block pos:line="1755" pos:column="67">{
	<return pos:line="1756" pos:column="9">return <expr><op:operator pos:line="1756" pos:column="16">++</op:operator><name><name pos:line="1756" pos:column="18">fe</name><op:operator pos:line="1756" pos:column="20">-&gt;</op:operator><name pos:line="1756" pos:column="22">ref</name></name></expr>;</return>
}</block>
<macro><name pos:line="1758" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1758" pos:column="14">(<argument pos:line="1758" pos:column="15">ULONG</argument>)</argument_list></macro><macro><name pos:line="1758" pos:column="21">FormatEnumerator_Release</name><argument_list pos:line="1758" pos:column="45">(<argument pos:line="1758" pos:column="46">FormatEnumerator *fe</argument>)</argument_list></macro> <block pos:line="1758" pos:column="68">{
	<expr_stmt><expr><name><name pos:line="1759" pos:column="9">fe</name><op:operator pos:line="1759" pos:column="11">-&gt;</op:operator><name pos:line="1759" pos:column="13">ref</name></name><op:operator pos:line="1759" pos:column="16">--</op:operator></expr>;</expr_stmt>
	<if pos:line="1760" pos:column="9">if <condition pos:line="1760" pos:column="12">(<expr><name><name pos:line="1760" pos:column="13">fe</name><op:operator pos:line="1760" pos:column="15">-&gt;</op:operator><name pos:line="1760" pos:column="17">ref</name></name> <op:operator pos:line="1760" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="1760" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="1760" pos:column="25">
		<return pos:line="1761" pos:column="17">return <expr><name><name pos:line="1761" pos:column="24">fe</name><op:operator pos:line="1761" pos:column="26">-&gt;</op:operator><name pos:line="1761" pos:column="28">ref</name></name></expr>;</return></then></if>
	<expr_stmt><expr><op:operator pos:line="1762" pos:column="9">delete</op:operator> <name pos:line="1762" pos:column="16">fe</name></expr>;</expr_stmt>
	<return pos:line="1763" pos:column="9">return <expr><lit:literal type="number" pos:line="1763" pos:column="16">0</lit:literal></expr>;</return>
}</block>
<comment type="line" format="doxygen" pos:line="1765" pos:column="1">/// Implement IEnumFORMATETC</comment>
<function><type><name pos:line="1766" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1766" pos:column="14">FormatEnumerator_Next</name><parameter_list pos:line="1766" pos:column="35">(<param><decl><type><name pos:line="1766" pos:column="36">FormatEnumerator</name> <type:modifier pos:line="1766" pos:column="53">*</type:modifier></type><name pos:line="1766" pos:column="54">fe</name></decl></param>, <param><decl><type><name pos:line="1766" pos:column="58">ULONG</name></type> <name pos:line="1766" pos:column="64">celt</name></decl></param>, <param><decl><type><name pos:line="1766" pos:column="70">FORMATETC</name> <type:modifier pos:line="1766" pos:column="80">*</type:modifier></type><name pos:line="1766" pos:column="81">rgelt</name></decl></param>, <param><decl><type><name pos:line="1766" pos:column="88">ULONG</name> <type:modifier pos:line="1766" pos:column="94">*</type:modifier></type><name pos:line="1766" pos:column="95">pceltFetched</name></decl></param>)</parameter_list> <block pos:line="1766" pos:column="109">{
	<comment type="line" pos:line="1767" pos:column="9">//Platform::DebugPrintf("EFE Next %d %d", fe-&gt;pos, celt);</comment>
	<if pos:line="1768" pos:column="9">if <condition pos:line="1768" pos:column="12">(<expr><name pos:line="1768" pos:column="13">rgelt</name> <op:operator pos:line="1768" pos:column="19">==</op:operator> <name pos:line="1768" pos:column="22">NULL</name></expr>)</condition><then pos:line="1768" pos:column="27"> <return pos:line="1768" pos:column="28">return <expr><name pos:line="1768" pos:column="35">E_POINTER</name></expr>;</return></then></if>
	<comment type="line" pos:line="1769" pos:column="9">// We only support one format, so this is simple.</comment>
	<decl_stmt><decl><type><name pos:line="1770" pos:column="9">unsigned</name> <name pos:line="1770" pos:column="18">int</name></type> <name pos:line="1770" pos:column="22">putPos</name> <init pos:line="1770" pos:column="29">= <expr><lit:literal type="number" pos:line="1770" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="1771" pos:column="9">while <condition pos:line="1771" pos:column="15">(<expr><op:operator pos:line="1771" pos:column="16">(</op:operator><name><name pos:line="1771" pos:column="17">fe</name><op:operator pos:line="1771" pos:column="19">-&gt;</op:operator><name pos:line="1771" pos:column="21">pos</name></name> <op:operator pos:line="1771" pos:column="25">&lt;</op:operator> <name><name pos:line="1771" pos:column="27">fe</name><op:operator pos:line="1771" pos:column="29">-&gt;</op:operator><name pos:line="1771" pos:column="31">formatsLen</name></name><op:operator pos:line="1771" pos:column="41">)</op:operator> <op:operator pos:line="1771" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="1771" pos:column="46">(</op:operator><name pos:line="1771" pos:column="47">putPos</name> <op:operator pos:line="1771" pos:column="54">&lt;</op:operator> <name pos:line="1771" pos:column="56">celt</name><op:operator pos:line="1771" pos:column="60">)</op:operator></expr>)</condition> <block pos:line="1771" pos:column="63">{
		<expr_stmt><expr><name><name pos:line="1772" pos:column="17">rgelt</name><op:operator pos:line="1772" pos:column="22">-&gt;</op:operator><name pos:line="1772" pos:column="24">cfFormat</name></name> <op:operator pos:line="1772" pos:column="33">=</op:operator> <name><name pos:line="1772" pos:column="35">fe</name><op:operator pos:line="1772" pos:column="37">-&gt;</op:operator><name pos:line="1772" pos:column="39">formats</name><index pos:line="1772" pos:column="46">[<expr><name><name pos:line="1772" pos:column="47">fe</name><op:operator pos:line="1772" pos:column="49">-&gt;</op:operator><name pos:line="1772" pos:column="51">pos</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1773" pos:column="17">rgelt</name><op:operator pos:line="1773" pos:column="22">-&gt;</op:operator><name pos:line="1773" pos:column="24">ptd</name></name> <op:operator pos:line="1773" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="1773" pos:column="30">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1774" pos:column="17">rgelt</name><op:operator pos:line="1774" pos:column="22">-&gt;</op:operator><name pos:line="1774" pos:column="24">dwAspect</name></name> <op:operator pos:line="1774" pos:column="33">=</op:operator> <name pos:line="1774" pos:column="35">DVASPECT_CONTENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1775" pos:column="17">rgelt</name><op:operator pos:line="1775" pos:column="22">-&gt;</op:operator><name pos:line="1775" pos:column="24">lindex</name></name> <op:operator pos:line="1775" pos:column="31">=</op:operator> <op:operator pos:line="1775" pos:column="33">-</op:operator><lit:literal type="number" pos:line="1775" pos:column="34">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1776" pos:column="17">rgelt</name><op:operator pos:line="1776" pos:column="22">-&gt;</op:operator><name pos:line="1776" pos:column="24">tymed</name></name> <op:operator pos:line="1776" pos:column="30">=</op:operator> <name pos:line="1776" pos:column="32">TYMED_HGLOBAL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1777" pos:column="17">fe</name><op:operator pos:line="1777" pos:column="19">-&gt;</op:operator><name pos:line="1777" pos:column="21">pos</name></name><op:operator pos:line="1777" pos:column="24">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1778" pos:column="17">putPos</name><op:operator pos:line="1778" pos:column="23">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="1780" pos:column="9">if <condition pos:line="1780" pos:column="12">(<expr><name pos:line="1780" pos:column="13">pceltFetched</name></expr>)</condition><then pos:line="1780" pos:column="26">
		<expr_stmt><expr><op:operator pos:line="1781" pos:column="17">*</op:operator><name pos:line="1781" pos:column="18">pceltFetched</name> <op:operator pos:line="1781" pos:column="31">=</op:operator> <name pos:line="1781" pos:column="33">putPos</name></expr>;</expr_stmt></then></if>
	<return pos:line="1782" pos:column="9">return <expr><name pos:line="1782" pos:column="16">putPos</name> <op:operator pos:line="1782" pos:column="23">?</op:operator> <name pos:line="1782" pos:column="25">S_OK</name> <op:operator pos:line="1782" pos:column="30">:</op:operator> <name pos:line="1782" pos:column="32">S_FALSE</name></expr>;</return>
}</block></function>
<function><type><name pos:line="1784" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1784" pos:column="14">FormatEnumerator_Skip</name><parameter_list pos:line="1784" pos:column="35">(<param><decl><type><name pos:line="1784" pos:column="36">FormatEnumerator</name> <type:modifier pos:line="1784" pos:column="53">*</type:modifier></type><name pos:line="1784" pos:column="54">fe</name></decl></param>, <param><decl><type><name pos:line="1784" pos:column="58">ULONG</name></type> <name pos:line="1784" pos:column="64">celt</name></decl></param>)</parameter_list> <block pos:line="1784" pos:column="70">{
	<expr_stmt><expr><name><name pos:line="1785" pos:column="9">fe</name><op:operator pos:line="1785" pos:column="11">-&gt;</op:operator><name pos:line="1785" pos:column="13">pos</name></name> <op:operator pos:line="1785" pos:column="17">+=</op:operator> <name pos:line="1785" pos:column="20">celt</name></expr>;</expr_stmt>
	<return pos:line="1786" pos:column="9">return <expr><name pos:line="1786" pos:column="16">S_OK</name></expr>;</return>
}</block></function>
<function><type><name pos:line="1788" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1788" pos:column="14">FormatEnumerator_Reset</name><parameter_list pos:line="1788" pos:column="36">(<param><decl><type><name pos:line="1788" pos:column="37">FormatEnumerator</name> <type:modifier pos:line="1788" pos:column="54">*</type:modifier></type><name pos:line="1788" pos:column="55">fe</name></decl></param>)</parameter_list> <block pos:line="1788" pos:column="59">{
	<expr_stmt><expr><name><name pos:line="1789" pos:column="9">fe</name><op:operator pos:line="1789" pos:column="11">-&gt;</op:operator><name pos:line="1789" pos:column="13">pos</name></name> <op:operator pos:line="1789" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="1789" pos:column="19">0</lit:literal></expr>;</expr_stmt>
	<return pos:line="1790" pos:column="9">return <expr><name pos:line="1790" pos:column="16">S_OK</name></expr>;</return>
}</block></function>
<function><type><name pos:line="1792" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1792" pos:column="14">FormatEnumerator_Clone</name><parameter_list pos:line="1792" pos:column="36">(<param><decl><type><name pos:line="1792" pos:column="37">FormatEnumerator</name> <type:modifier pos:line="1792" pos:column="54">*</type:modifier></type><name pos:line="1792" pos:column="55">fe</name></decl></param>, <param><decl><type><name pos:line="1792" pos:column="59">IEnumFORMATETC</name> <type:modifier pos:line="1792" pos:column="74">*</type:modifier><type:modifier pos:line="1792" pos:column="75">*</type:modifier></type><name pos:line="1792" pos:column="76">ppenum</name></decl></param>)</parameter_list> <block pos:line="1792" pos:column="84">{
	<decl_stmt><decl><type><name pos:line="1793" pos:column="9">FormatEnumerator</name> <type:modifier pos:line="1793" pos:column="26">*</type:modifier></type><name pos:line="1793" pos:column="27">pfe</name></decl>;</decl_stmt>
	<try pos:line="1794" pos:column="9">try <block pos:line="1794" pos:column="13">{
		<expr_stmt><expr><name pos:line="1795" pos:column="17">pfe</name> <op:operator pos:line="1795" pos:column="21">=</op:operator> <op:operator pos:line="1795" pos:column="23">new</op:operator> <call><name pos:line="1795" pos:column="27">FormatEnumerator</name><argument_list pos:line="1795" pos:column="43">(<argument><expr><name><name pos:line="1795" pos:column="44">fe</name><op:operator pos:line="1795" pos:column="46">-&gt;</op:operator><name pos:line="1795" pos:column="48">pos</name></name></expr></argument>, <argument><expr><name><name pos:line="1795" pos:column="53">fe</name><op:operator pos:line="1795" pos:column="55">-&gt;</op:operator><name pos:line="1795" pos:column="57">formats</name></name></expr></argument>, <argument><expr><name><name pos:line="1795" pos:column="66">fe</name><op:operator pos:line="1795" pos:column="68">-&gt;</op:operator><name pos:line="1795" pos:column="70">formatsLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block> <catch pos:line="1796" pos:column="11">catch <parameter_list pos:line="1796" pos:column="17">(<param><decl><type><type:modifier pos:line="1796" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1796" pos:column="23">{
		<return pos:line="1797" pos:column="17">return <expr><name pos:line="1797" pos:column="24">E_OUTOFMEMORY</name></expr>;</return>
	}</block></catch></try>
	<return pos:line="1799" pos:column="9">return <expr><call><name pos:line="1799" pos:column="16">FormatEnumerator_QueryInterface</name><argument_list pos:line="1799" pos:column="47">(<argument><expr><name pos:line="1799" pos:column="48">pfe</name></expr></argument>, <argument><expr><name pos:line="1799" pos:column="53">IID_IEnumFORMATETC</name></expr></argument>,
	                                       <argument><expr><call><name><name pos:line="1800" pos:column="48">reinterpret_cast</name><argument_list pos:line="1800" pos:column="64">&lt;<argument><expr><name pos:line="1800" pos:column="65">void</name> <op:operator pos:line="1800" pos:column="70">*</op:operator><op:operator pos:line="1800" pos:column="71">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1800" pos:column="73">(<argument><expr><name pos:line="1800" pos:column="74">ppenum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="1803" pos:column="1">static</specifier> <name pos:line="1803" pos:column="8">VFunction</name> <type:modifier pos:line="1803" pos:column="18">*</type:modifier></type><name><name pos:line="1803" pos:column="19">vtFormatEnumerator</name><index pos:line="1803" pos:column="37">[]</index></name> <init pos:line="1803" pos:column="40">= <expr><block pos:line="1803" pos:column="42">{
	<expr><op:operator pos:line="1804" pos:column="9">(</op:operator><name pos:line="1804" pos:column="10">VFunction</name> <op:operator pos:line="1804" pos:column="20">*</op:operator><op:operator pos:line="1804" pos:column="21">)</op:operator><op:operator pos:line="1804" pos:column="22">(</op:operator><name pos:line="1804" pos:column="23">FormatEnumerator_QueryInterface</name><op:operator pos:line="1804" pos:column="54">)</op:operator></expr>,
	<expr><op:operator pos:line="1805" pos:column="9">(</op:operator><name pos:line="1805" pos:column="10">VFunction</name> <op:operator pos:line="1805" pos:column="20">*</op:operator><op:operator pos:line="1805" pos:column="21">)</op:operator><op:operator pos:line="1805" pos:column="22">(</op:operator><name pos:line="1805" pos:column="23">FormatEnumerator_AddRef</name><op:operator pos:line="1805" pos:column="46">)</op:operator></expr>,
	<expr><op:operator pos:line="1806" pos:column="9">(</op:operator><name pos:line="1806" pos:column="10">VFunction</name> <op:operator pos:line="1806" pos:column="20">*</op:operator><op:operator pos:line="1806" pos:column="21">)</op:operator><op:operator pos:line="1806" pos:column="22">(</op:operator><name pos:line="1806" pos:column="23">FormatEnumerator_Release</name><op:operator pos:line="1806" pos:column="47">)</op:operator></expr>,
	<expr><op:operator pos:line="1807" pos:column="9">(</op:operator><name pos:line="1807" pos:column="10">VFunction</name> <op:operator pos:line="1807" pos:column="20">*</op:operator><op:operator pos:line="1807" pos:column="21">)</op:operator><op:operator pos:line="1807" pos:column="22">(</op:operator><name pos:line="1807" pos:column="23">FormatEnumerator_Next</name><op:operator pos:line="1807" pos:column="44">)</op:operator></expr>,
	<expr><op:operator pos:line="1808" pos:column="9">(</op:operator><name pos:line="1808" pos:column="10">VFunction</name> <op:operator pos:line="1808" pos:column="20">*</op:operator><op:operator pos:line="1808" pos:column="21">)</op:operator><op:operator pos:line="1808" pos:column="22">(</op:operator><name pos:line="1808" pos:column="23">FormatEnumerator_Skip</name><op:operator pos:line="1808" pos:column="44">)</op:operator></expr>,
	<expr><op:operator pos:line="1809" pos:column="9">(</op:operator><name pos:line="1809" pos:column="10">VFunction</name> <op:operator pos:line="1809" pos:column="20">*</op:operator><op:operator pos:line="1809" pos:column="21">)</op:operator><op:operator pos:line="1809" pos:column="22">(</op:operator><name pos:line="1809" pos:column="23">FormatEnumerator_Reset</name><op:operator pos:line="1809" pos:column="45">)</op:operator></expr>,
	<expr><op:operator pos:line="1810" pos:column="9">(</op:operator><name pos:line="1810" pos:column="10">VFunction</name> <op:operator pos:line="1810" pos:column="20">*</op:operator><op:operator pos:line="1810" pos:column="21">)</op:operator><op:operator pos:line="1810" pos:column="22">(</op:operator><name pos:line="1810" pos:column="23">FormatEnumerator_Clone</name><op:operator pos:line="1810" pos:column="45">)</op:operator></expr>
}</block></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="1813" pos:column="1">FormatEnumerator</name><op:operator pos:line="1813" pos:column="17">::</op:operator><name pos:line="1813" pos:column="19">FormatEnumerator</name></name><parameter_list pos:line="1813" pos:column="35">(<param><decl><type><name pos:line="1813" pos:column="36">int</name></type> <name pos:line="1813" pos:column="40">pos_</name></decl></param>, <param><decl><type><name pos:line="1813" pos:column="46">CLIPFORMAT</name></type> <name><name pos:line="1813" pos:column="57">formats_</name><index pos:line="1813" pos:column="65">[]</index></name></decl></param>, <param><decl><type><name pos:line="1813" pos:column="69">int</name></type> <name pos:line="1813" pos:column="73">formatsLen_</name></decl></param>)</parameter_list> <block pos:line="1813" pos:column="86">{
	<expr_stmt><expr><name pos:line="1814" pos:column="9">vtbl</name> <op:operator pos:line="1814" pos:column="14">=</op:operator> <name pos:line="1814" pos:column="16">vtFormatEnumerator</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1815" pos:column="9">ref</name> <op:operator pos:line="1815" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="1815" pos:column="15">0</lit:literal></expr>;</expr_stmt>   <comment type="line" pos:line="1815" pos:column="20">// First QI adds first reference...</comment>
	<expr_stmt><expr><name pos:line="1816" pos:column="9">pos</name> <op:operator pos:line="1816" pos:column="13">=</op:operator> <name pos:line="1816" pos:column="15">pos_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1817" pos:column="9">formatsLen</name> <op:operator pos:line="1817" pos:column="20">=</op:operator> <name pos:line="1817" pos:column="22">formatsLen_</name></expr>;</expr_stmt>
	<for pos:line="1818" pos:column="9">for (<init><decl><type><name pos:line="1818" pos:column="14">int</name></type> <name pos:line="1818" pos:column="18">i</name><init pos:line="1818" pos:column="19">=<expr><lit:literal type="number" pos:line="1818" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1818" pos:column="23">i</name><op:operator pos:line="1818" pos:column="24">&lt;</op:operator><name pos:line="1818" pos:column="25">formatsLen</name></expr>;</condition> <incr><expr><name pos:line="1818" pos:column="37">i</name><op:operator pos:line="1818" pos:column="38">++</op:operator></expr></incr>)
		<expr_stmt><expr><name><name pos:line="1819" pos:column="17">formats</name><index pos:line="1819" pos:column="24">[<expr><name pos:line="1819" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="1819" pos:column="28">=</op:operator> <name><name pos:line="1819" pos:column="30">formats_</name><index pos:line="1819" pos:column="38">[<expr><name pos:line="1819" pos:column="39">i</name></expr>]</index></name></expr>;</expr_stmt></for>
}</block></constructor>

<comment type="line" format="doxygen" pos:line="1822" pos:column="1">/// Implement IUnknown</comment>
<function><type><name pos:line="1823" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1823" pos:column="14">DropSource_QueryInterface</name><parameter_list pos:line="1823" pos:column="39">(<param><decl><type><name pos:line="1823" pos:column="40">DropSource</name> <type:modifier pos:line="1823" pos:column="51">*</type:modifier></type><name pos:line="1823" pos:column="52">ds</name></decl></param>, <param><decl><type><name pos:line="1823" pos:column="56">REFIID</name></type> <name pos:line="1823" pos:column="63">riid</name></decl></param>, <param><decl><type><name pos:line="1823" pos:column="69">PVOID</name> <type:modifier pos:line="1823" pos:column="75">*</type:modifier></type><name pos:line="1823" pos:column="76">ppv</name></decl></param>)</parameter_list> <block pos:line="1823" pos:column="81">{
	<return pos:line="1824" pos:column="9">return <expr><call><name><name pos:line="1824" pos:column="16">ds</name><op:operator pos:line="1824" pos:column="18">-&gt;</op:operator><name pos:line="1824" pos:column="20">sci</name><op:operator pos:line="1824" pos:column="23">-&gt;</op:operator><name pos:line="1824" pos:column="25">QueryInterface</name></name><argument_list pos:line="1824" pos:column="39">(<argument><expr><name pos:line="1824" pos:column="40">riid</name></expr></argument>, <argument><expr><name pos:line="1824" pos:column="46">ppv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name pos:line="1826" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1826" pos:column="14">(<argument pos:line="1826" pos:column="15">ULONG</argument>)</argument_list></macro><macro><name pos:line="1826" pos:column="21">DropSource_AddRef</name><argument_list pos:line="1826" pos:column="38">(<argument pos:line="1826" pos:column="39">DropSource *ds</argument>)</argument_list></macro> <block pos:line="1826" pos:column="55">{
	<return pos:line="1827" pos:column="9">return <expr><call><name><name pos:line="1827" pos:column="16">ds</name><op:operator pos:line="1827" pos:column="18">-&gt;</op:operator><name pos:line="1827" pos:column="20">sci</name><op:operator pos:line="1827" pos:column="23">-&gt;</op:operator><name pos:line="1827" pos:column="25">AddRef</name></name><argument_list pos:line="1827" pos:column="31">()</argument_list></call></expr>;</return>
}</block>
<macro><name pos:line="1829" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1829" pos:column="14">(<argument pos:line="1829" pos:column="15">ULONG</argument>)</argument_list></macro><macro><name pos:line="1829" pos:column="21">DropSource_Release</name><argument_list pos:line="1829" pos:column="39">(<argument pos:line="1829" pos:column="40">DropSource *ds</argument>)</argument_list></macro> <block pos:line="1829" pos:column="56">{
	<return pos:line="1830" pos:column="9">return <expr><call><name><name pos:line="1830" pos:column="16">ds</name><op:operator pos:line="1830" pos:column="18">-&gt;</op:operator><name pos:line="1830" pos:column="20">sci</name><op:operator pos:line="1830" pos:column="23">-&gt;</op:operator><name pos:line="1830" pos:column="25">Release</name></name><argument_list pos:line="1830" pos:column="32">()</argument_list></call></expr>;</return>
}</block>

<comment type="line" format="doxygen" pos:line="1833" pos:column="1">/// Implement IDropSource</comment>
<function><type><name pos:line="1834" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1834" pos:column="14">DropSource_QueryContinueDrag</name><parameter_list pos:line="1834" pos:column="42">(<param><decl><type><name pos:line="1834" pos:column="43">DropSource</name> <type:modifier pos:line="1834" pos:column="54">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1834" pos:column="57">BOOL</name></type> <name pos:line="1834" pos:column="62">fEsc</name></decl></param>, <param><decl><type><name pos:line="1834" pos:column="68">DWORD</name></type> <name pos:line="1834" pos:column="74">grfKeyState</name></decl></param>)</parameter_list> <block pos:line="1834" pos:column="87">{
	<if pos:line="1835" pos:column="9">if <condition pos:line="1835" pos:column="12">(<expr><name pos:line="1835" pos:column="13">fEsc</name></expr>)</condition><then pos:line="1835" pos:column="18">
		<return pos:line="1836" pos:column="17">return <expr><name pos:line="1836" pos:column="24">DRAGDROP_S_CANCEL</name></expr>;</return></then></if>
	<if pos:line="1837" pos:column="9">if <condition pos:line="1837" pos:column="12">(<expr><op:operator pos:line="1837" pos:column="13">!</op:operator><op:operator pos:line="1837" pos:column="14">(</op:operator><name pos:line="1837" pos:column="15">grfKeyState</name> <op:operator pos:line="1837" pos:column="27">&amp;</op:operator> <name pos:line="1837" pos:column="29">MK_LBUTTON</name><op:operator pos:line="1837" pos:column="39">)</op:operator></expr>)</condition><then pos:line="1837" pos:column="41">
		<return pos:line="1838" pos:column="17">return <expr><name pos:line="1838" pos:column="24">DRAGDROP_S_DROP</name></expr>;</return></then></if>
	<return pos:line="1839" pos:column="9">return <expr><name pos:line="1839" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1842" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1842" pos:column="14">DropSource_GiveFeedback</name><parameter_list pos:line="1842" pos:column="37">(<param><decl><type><name pos:line="1842" pos:column="38">DropSource</name> <type:modifier pos:line="1842" pos:column="49">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1842" pos:column="52">DWORD</name></type></decl></param>)</parameter_list> <block pos:line="1842" pos:column="59">{
	<return pos:line="1843" pos:column="9">return <expr><name pos:line="1843" pos:column="16">DRAGDROP_S_USEDEFAULTCURSORS</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="1846" pos:column="1">static</specifier> <name pos:line="1846" pos:column="8">VFunction</name> <type:modifier pos:line="1846" pos:column="18">*</type:modifier></type><name><name pos:line="1846" pos:column="19">vtDropSource</name><index pos:line="1846" pos:column="31">[]</index></name> <init pos:line="1846" pos:column="34">= <expr><block pos:line="1846" pos:column="36">{
	<expr><op:operator pos:line="1847" pos:column="9">(</op:operator><name pos:line="1847" pos:column="10">VFunction</name> <op:operator pos:line="1847" pos:column="20">*</op:operator><op:operator pos:line="1847" pos:column="21">)</op:operator><op:operator pos:line="1847" pos:column="22">(</op:operator><name pos:line="1847" pos:column="23">DropSource_QueryInterface</name><op:operator pos:line="1847" pos:column="48">)</op:operator></expr>,
	<expr><op:operator pos:line="1848" pos:column="9">(</op:operator><name pos:line="1848" pos:column="10">VFunction</name> <op:operator pos:line="1848" pos:column="20">*</op:operator><op:operator pos:line="1848" pos:column="21">)</op:operator><op:operator pos:line="1848" pos:column="22">(</op:operator><name pos:line="1848" pos:column="23">DropSource_AddRef</name><op:operator pos:line="1848" pos:column="40">)</op:operator></expr>,
	<expr><op:operator pos:line="1849" pos:column="9">(</op:operator><name pos:line="1849" pos:column="10">VFunction</name> <op:operator pos:line="1849" pos:column="20">*</op:operator><op:operator pos:line="1849" pos:column="21">)</op:operator><op:operator pos:line="1849" pos:column="22">(</op:operator><name pos:line="1849" pos:column="23">DropSource_Release</name><op:operator pos:line="1849" pos:column="41">)</op:operator></expr>,
	<expr><op:operator pos:line="1850" pos:column="9">(</op:operator><name pos:line="1850" pos:column="10">VFunction</name> <op:operator pos:line="1850" pos:column="20">*</op:operator><op:operator pos:line="1850" pos:column="21">)</op:operator><op:operator pos:line="1850" pos:column="22">(</op:operator><name pos:line="1850" pos:column="23">DropSource_QueryContinueDrag</name><op:operator pos:line="1850" pos:column="51">)</op:operator></expr>,
	<expr><op:operator pos:line="1851" pos:column="9">(</op:operator><name pos:line="1851" pos:column="10">VFunction</name> <op:operator pos:line="1851" pos:column="20">*</op:operator><op:operator pos:line="1851" pos:column="21">)</op:operator><op:operator pos:line="1851" pos:column="22">(</op:operator><name pos:line="1851" pos:column="23">DropSource_GiveFeedback</name><op:operator pos:line="1851" pos:column="46">)</op:operator></expr>
}</block></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="1854" pos:column="1">DropSource</name><op:operator pos:line="1854" pos:column="11">::</op:operator><name pos:line="1854" pos:column="13">DropSource</name></name><parameter_list pos:line="1854" pos:column="23">()</parameter_list> <block pos:line="1854" pos:column="26">{
	<expr_stmt><expr><name pos:line="1855" pos:column="9">vtbl</name> <op:operator pos:line="1855" pos:column="14">=</op:operator> <name pos:line="1855" pos:column="16">vtDropSource</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1856" pos:column="9">sci</name> <op:operator pos:line="1856" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="1856" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<comment type="line" format="doxygen" pos:line="1859" pos:column="1">/// Implement IUnkown</comment>
<function><type><name pos:line="1860" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1860" pos:column="14">DataObject_QueryInterface</name><parameter_list pos:line="1860" pos:column="39">(<param><decl><type><name pos:line="1860" pos:column="40">DataObject</name> <type:modifier pos:line="1860" pos:column="51">*</type:modifier></type><name pos:line="1860" pos:column="52">pd</name></decl></param>, <param><decl><type><name pos:line="1860" pos:column="56">REFIID</name></type> <name pos:line="1860" pos:column="63">riid</name></decl></param>, <param><decl><type><name pos:line="1860" pos:column="69">PVOID</name> <type:modifier pos:line="1860" pos:column="75">*</type:modifier></type><name pos:line="1860" pos:column="76">ppv</name></decl></param>)</parameter_list> <block pos:line="1860" pos:column="81">{
	<comment type="line" pos:line="1861" pos:column="9">//Platform::DebugPrintf("DO QI %x\n", pd);</comment>
	<return pos:line="1862" pos:column="9">return <expr><call><name><name pos:line="1862" pos:column="16">pd</name><op:operator pos:line="1862" pos:column="18">-&gt;</op:operator><name pos:line="1862" pos:column="20">sci</name><op:operator pos:line="1862" pos:column="23">-&gt;</op:operator><name pos:line="1862" pos:column="25">QueryInterface</name></name><argument_list pos:line="1862" pos:column="39">(<argument><expr><name pos:line="1862" pos:column="40">riid</name></expr></argument>, <argument><expr><name pos:line="1862" pos:column="46">ppv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name pos:line="1864" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1864" pos:column="14">(<argument pos:line="1864" pos:column="15">ULONG</argument>)</argument_list></macro><macro><name pos:line="1864" pos:column="21">DataObject_AddRef</name><argument_list pos:line="1864" pos:column="38">(<argument pos:line="1864" pos:column="39">DataObject *pd</argument>)</argument_list></macro> <block pos:line="1864" pos:column="55">{
	<return pos:line="1865" pos:column="9">return <expr><call><name><name pos:line="1865" pos:column="16">pd</name><op:operator pos:line="1865" pos:column="18">-&gt;</op:operator><name pos:line="1865" pos:column="20">sci</name><op:operator pos:line="1865" pos:column="23">-&gt;</op:operator><name pos:line="1865" pos:column="25">AddRef</name></name><argument_list pos:line="1865" pos:column="31">()</argument_list></call></expr>;</return>
}</block>
<macro><name pos:line="1867" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1867" pos:column="14">(<argument pos:line="1867" pos:column="15">ULONG</argument>)</argument_list></macro><macro><name pos:line="1867" pos:column="21">DataObject_Release</name><argument_list pos:line="1867" pos:column="39">(<argument pos:line="1867" pos:column="40">DataObject *pd</argument>)</argument_list></macro> <block pos:line="1867" pos:column="56">{
	<return pos:line="1868" pos:column="9">return <expr><call><name><name pos:line="1868" pos:column="16">pd</name><op:operator pos:line="1868" pos:column="18">-&gt;</op:operator><name pos:line="1868" pos:column="20">sci</name><op:operator pos:line="1868" pos:column="23">-&gt;</op:operator><name pos:line="1868" pos:column="25">Release</name></name><argument_list pos:line="1868" pos:column="32">()</argument_list></call></expr>;</return>
}</block>
<comment type="line" format="doxygen" pos:line="1870" pos:column="1">/// Implement IDataObject</comment>
<function><type><name pos:line="1871" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1871" pos:column="14">DataObject_GetData</name><parameter_list pos:line="1871" pos:column="32">(<param><decl><type><name pos:line="1871" pos:column="33">DataObject</name> <type:modifier pos:line="1871" pos:column="44">*</type:modifier></type><name pos:line="1871" pos:column="45">pd</name></decl></param>, <param><decl><type><name pos:line="1871" pos:column="49">FORMATETC</name> <type:modifier pos:line="1871" pos:column="59">*</type:modifier></type><name pos:line="1871" pos:column="60">pFEIn</name></decl></param>, <param><decl><type><name pos:line="1871" pos:column="67">STGMEDIUM</name> <type:modifier pos:line="1871" pos:column="77">*</type:modifier></type><name pos:line="1871" pos:column="78">pSTM</name></decl></param>)</parameter_list> <block pos:line="1871" pos:column="84">{
	<return pos:line="1872" pos:column="9">return <expr><call><name><name pos:line="1872" pos:column="16">pd</name><op:operator pos:line="1872" pos:column="18">-&gt;</op:operator><name pos:line="1872" pos:column="20">sci</name><op:operator pos:line="1872" pos:column="23">-&gt;</op:operator><name pos:line="1872" pos:column="25">GetData</name></name><argument_list pos:line="1872" pos:column="32">(<argument><expr><name pos:line="1872" pos:column="33">pFEIn</name></expr></argument>, <argument><expr><name pos:line="1872" pos:column="40">pSTM</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1875" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1875" pos:column="14">DataObject_GetDataHere</name><parameter_list pos:line="1875" pos:column="36">(<param><decl><type><name pos:line="1875" pos:column="37">DataObject</name> <type:modifier pos:line="1875" pos:column="48">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1875" pos:column="51">FORMATETC</name> <type:modifier pos:line="1875" pos:column="61">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1875" pos:column="64">STGMEDIUM</name> <type:modifier pos:line="1875" pos:column="74">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1875" pos:column="77">{
	<comment type="line" pos:line="1876" pos:column="9">//Platform::DebugPrintf("DOB GetDataHere\n");</comment>
	<return pos:line="1877" pos:column="9">return <expr><name pos:line="1877" pos:column="16">E_NOTIMPL</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1880" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1880" pos:column="14">DataObject_QueryGetData</name><parameter_list pos:line="1880" pos:column="37">(<param><decl><type><name pos:line="1880" pos:column="38">DataObject</name> <type:modifier pos:line="1880" pos:column="49">*</type:modifier></type><name pos:line="1880" pos:column="50">pd</name></decl></param>, <param><decl><type><name pos:line="1880" pos:column="54">FORMATETC</name> <type:modifier pos:line="1880" pos:column="64">*</type:modifier></type><name pos:line="1880" pos:column="65">pFE</name></decl></param>)</parameter_list> <block pos:line="1880" pos:column="70">{
	<if pos:line="1881" pos:column="9">if <condition pos:line="1881" pos:column="12">(<expr><call><name><name pos:line="1881" pos:column="13">pd</name><op:operator pos:line="1881" pos:column="15">-&gt;</op:operator><name pos:line="1881" pos:column="17">sci</name><op:operator pos:line="1881" pos:column="20">-&gt;</op:operator><name pos:line="1881" pos:column="22">DragIsRectangularOK</name></name><argument_list pos:line="1881" pos:column="41">(<argument><expr><name><name pos:line="1881" pos:column="42">pFE</name><op:operator pos:line="1881" pos:column="45">-&gt;</op:operator><name pos:line="1881" pos:column="47">cfFormat</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1881" pos:column="57">&amp;&amp;</op:operator>
	    <name><name pos:line="1882" pos:column="13">pFE</name><op:operator pos:line="1882" pos:column="16">-&gt;</op:operator><name pos:line="1882" pos:column="18">ptd</name></name> <op:operator pos:line="1882" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="1882" pos:column="25">0</lit:literal> <op:operator pos:line="1882" pos:column="27">&amp;&amp;</op:operator>
	    <op:operator pos:line="1883" pos:column="13">(</op:operator><name><name pos:line="1883" pos:column="14">pFE</name><op:operator pos:line="1883" pos:column="17">-&gt;</op:operator><name pos:line="1883" pos:column="19">dwAspect</name></name> <op:operator pos:line="1883" pos:column="28">&amp;</op:operator> <name pos:line="1883" pos:column="30">DVASPECT_CONTENT</name><op:operator pos:line="1883" pos:column="46">)</op:operator> <op:operator pos:line="1883" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="1883" pos:column="51">0</lit:literal> <op:operator pos:line="1883" pos:column="53">&amp;&amp;</op:operator>
	    <name><name pos:line="1884" pos:column="13">pFE</name><op:operator pos:line="1884" pos:column="16">-&gt;</op:operator><name pos:line="1884" pos:column="18">lindex</name></name> <op:operator pos:line="1884" pos:column="25">==</op:operator> <op:operator pos:line="1884" pos:column="28">-</op:operator><lit:literal type="number" pos:line="1884" pos:column="29">1</lit:literal> <op:operator pos:line="1884" pos:column="31">&amp;&amp;</op:operator>
	    <op:operator pos:line="1885" pos:column="13">(</op:operator><name><name pos:line="1885" pos:column="14">pFE</name><op:operator pos:line="1885" pos:column="17">-&gt;</op:operator><name pos:line="1885" pos:column="19">tymed</name></name> <op:operator pos:line="1885" pos:column="25">&amp;</op:operator> <name pos:line="1885" pos:column="27">TYMED_HGLOBAL</name><op:operator pos:line="1885" pos:column="40">)</op:operator> <op:operator pos:line="1885" pos:column="42">!=</op:operator> <lit:literal type="number" pos:line="1885" pos:column="45">0</lit:literal></expr>
	)</condition><then pos:line="1886" pos:column="10"> <block pos:line="1886" pos:column="11">{
		<return pos:line="1887" pos:column="17">return <expr><name pos:line="1887" pos:column="24">S_OK</name></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="1890" pos:column="9">bool</name></type> <name pos:line="1890" pos:column="14">formatOK</name> <init pos:line="1890" pos:column="23">= <expr><op:operator pos:line="1890" pos:column="25">(</op:operator><name><name pos:line="1890" pos:column="26">pFE</name><op:operator pos:line="1890" pos:column="29">-&gt;</op:operator><name pos:line="1890" pos:column="31">cfFormat</name></name> <op:operator pos:line="1890" pos:column="40">==</op:operator> <name pos:line="1890" pos:column="43">CF_TEXT</name><op:operator pos:line="1890" pos:column="50">)</op:operator> <op:operator pos:line="1890" pos:column="52">||</op:operator>
		<op:operator pos:line="1891" pos:column="17">(</op:operator><op:operator pos:line="1891" pos:column="18">(</op:operator><name><name pos:line="1891" pos:column="19">pFE</name><op:operator pos:line="1891" pos:column="22">-&gt;</op:operator><name pos:line="1891" pos:column="24">cfFormat</name></name> <op:operator pos:line="1891" pos:column="33">==</op:operator> <name pos:line="1891" pos:column="36">CF_UNICODETEXT</name><op:operator pos:line="1891" pos:column="50">)</op:operator> <op:operator pos:line="1891" pos:column="52">&amp;&amp;</op:operator> <call><name><name pos:line="1891" pos:column="55">pd</name><op:operator pos:line="1891" pos:column="57">-&gt;</op:operator><name pos:line="1891" pos:column="59">sci</name><op:operator pos:line="1891" pos:column="62">-&gt;</op:operator><name pos:line="1891" pos:column="64">IsUnicodeMode</name></name><argument_list pos:line="1891" pos:column="77">()</argument_list></call><op:operator pos:line="1891" pos:column="79">)</op:operator></expr></init></decl>;</decl_stmt>
	<if pos:line="1892" pos:column="9">if <condition pos:line="1892" pos:column="12">(<expr><op:operator pos:line="1892" pos:column="13">!</op:operator><name pos:line="1892" pos:column="14">formatOK</name> <op:operator pos:line="1892" pos:column="23">||</op:operator>
	    <name><name pos:line="1893" pos:column="13">pFE</name><op:operator pos:line="1893" pos:column="16">-&gt;</op:operator><name pos:line="1893" pos:column="18">ptd</name></name> <op:operator pos:line="1893" pos:column="22">!=</op:operator> <lit:literal type="number" pos:line="1893" pos:column="25">0</lit:literal> <op:operator pos:line="1893" pos:column="27">||</op:operator>
	    <op:operator pos:line="1894" pos:column="13">(</op:operator><name><name pos:line="1894" pos:column="14">pFE</name><op:operator pos:line="1894" pos:column="17">-&gt;</op:operator><name pos:line="1894" pos:column="19">dwAspect</name></name> <op:operator pos:line="1894" pos:column="28">&amp;</op:operator> <name pos:line="1894" pos:column="30">DVASPECT_CONTENT</name><op:operator pos:line="1894" pos:column="46">)</op:operator> <op:operator pos:line="1894" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="1894" pos:column="51">0</lit:literal> <op:operator pos:line="1894" pos:column="53">||</op:operator>
	    <name><name pos:line="1895" pos:column="13">pFE</name><op:operator pos:line="1895" pos:column="16">-&gt;</op:operator><name pos:line="1895" pos:column="18">lindex</name></name> <op:operator pos:line="1895" pos:column="25">!=</op:operator> <op:operator pos:line="1895" pos:column="28">-</op:operator><lit:literal type="number" pos:line="1895" pos:column="29">1</lit:literal> <op:operator pos:line="1895" pos:column="31">||</op:operator>
	    <op:operator pos:line="1896" pos:column="13">(</op:operator><name><name pos:line="1896" pos:column="14">pFE</name><op:operator pos:line="1896" pos:column="17">-&gt;</op:operator><name pos:line="1896" pos:column="19">tymed</name></name> <op:operator pos:line="1896" pos:column="25">&amp;</op:operator> <name pos:line="1896" pos:column="27">TYMED_HGLOBAL</name><op:operator pos:line="1896" pos:column="40">)</op:operator> <op:operator pos:line="1896" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="1896" pos:column="45">0</lit:literal></expr>
	)</condition><then pos:line="1897" pos:column="10"> <block pos:line="1897" pos:column="11">{
		<comment type="line" pos:line="1898" pos:column="17">//Platform::DebugPrintf("DOB QueryGetData No %x\n",pFE-&gt;cfFormat);</comment>
		<comment type="line" pos:line="1899" pos:column="17">//return DATA_E_FORMATETC;</comment>
		<return pos:line="1900" pos:column="17">return <expr><name pos:line="1900" pos:column="24">S_FALSE</name></expr>;</return>
	}</block></then></if>
	<comment type="line" pos:line="1902" pos:column="9">//Platform::DebugPrintf("DOB QueryGetData OK %x\n",pFE-&gt;cfFormat);</comment>
	<return pos:line="1903" pos:column="9">return <expr><name pos:line="1903" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1906" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1906" pos:column="14">DataObject_GetCanonicalFormatEtc</name><parameter_list pos:line="1906" pos:column="46">(<param><decl><type><name pos:line="1906" pos:column="47">DataObject</name> <type:modifier pos:line="1906" pos:column="58">*</type:modifier></type><name pos:line="1906" pos:column="59">pd</name></decl></param>, <param><decl><type><name pos:line="1906" pos:column="63">FORMATETC</name> <type:modifier pos:line="1906" pos:column="73">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1906" pos:column="76">FORMATETC</name> <type:modifier pos:line="1906" pos:column="86">*</type:modifier></type><name pos:line="1906" pos:column="87">pFEOut</name></decl></param>)</parameter_list> <block pos:line="1906" pos:column="95">{
	<comment type="line" pos:line="1907" pos:column="9">//Platform::DebugPrintf("DOB GetCanon\n");</comment>
	<if pos:line="1908" pos:column="9">if <condition pos:line="1908" pos:column="12">(<expr><call><name><name pos:line="1908" pos:column="13">pd</name><op:operator pos:line="1908" pos:column="15">-&gt;</op:operator><name pos:line="1908" pos:column="17">sci</name><op:operator pos:line="1908" pos:column="20">-&gt;</op:operator><name pos:line="1908" pos:column="22">IsUnicodeMode</name></name><argument_list pos:line="1908" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="1908" pos:column="38">
		<expr_stmt><expr><name><name pos:line="1909" pos:column="17">pFEOut</name><op:operator pos:line="1909" pos:column="23">-&gt;</op:operator><name pos:line="1909" pos:column="25">cfFormat</name></name> <op:operator pos:line="1909" pos:column="34">=</op:operator> <name pos:line="1909" pos:column="36">CF_UNICODETEXT</name></expr>;</expr_stmt></then>
	<else pos:line="1910" pos:column="9">else
		<expr_stmt><expr><name><name pos:line="1911" pos:column="17">pFEOut</name><op:operator pos:line="1911" pos:column="23">-&gt;</op:operator><name pos:line="1911" pos:column="25">cfFormat</name></name> <op:operator pos:line="1911" pos:column="34">=</op:operator> <name pos:line="1911" pos:column="36">CF_TEXT</name></expr>;</expr_stmt></else></if>
	<expr_stmt><expr><name><name pos:line="1912" pos:column="9">pFEOut</name><op:operator pos:line="1912" pos:column="15">-&gt;</op:operator><name pos:line="1912" pos:column="17">ptd</name></name> <op:operator pos:line="1912" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="1912" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1913" pos:column="9">pFEOut</name><op:operator pos:line="1913" pos:column="15">-&gt;</op:operator><name pos:line="1913" pos:column="17">dwAspect</name></name> <op:operator pos:line="1913" pos:column="26">=</op:operator> <name pos:line="1913" pos:column="28">DVASPECT_CONTENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1914" pos:column="9">pFEOut</name><op:operator pos:line="1914" pos:column="15">-&gt;</op:operator><name pos:line="1914" pos:column="17">lindex</name></name> <op:operator pos:line="1914" pos:column="24">=</op:operator> <op:operator pos:line="1914" pos:column="26">-</op:operator><lit:literal type="number" pos:line="1914" pos:column="27">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1915" pos:column="9">pFEOut</name><op:operator pos:line="1915" pos:column="15">-&gt;</op:operator><name pos:line="1915" pos:column="17">tymed</name></name> <op:operator pos:line="1915" pos:column="23">=</op:operator> <name pos:line="1915" pos:column="25">TYMED_HGLOBAL</name></expr>;</expr_stmt>
	<return pos:line="1916" pos:column="9">return <expr><name pos:line="1916" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1919" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1919" pos:column="14">DataObject_SetData</name><parameter_list pos:line="1919" pos:column="32">(<param><decl><type><name pos:line="1919" pos:column="33">DataObject</name> <type:modifier pos:line="1919" pos:column="44">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1919" pos:column="47">FORMATETC</name> <type:modifier pos:line="1919" pos:column="57">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1919" pos:column="60">STGMEDIUM</name> <type:modifier pos:line="1919" pos:column="70">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1919" pos:column="73">BOOL</name></type></decl></param>)</parameter_list> <block pos:line="1919" pos:column="79">{
	<comment type="line" pos:line="1920" pos:column="9">//Platform::DebugPrintf("DOB SetData\n");</comment>
	<return pos:line="1921" pos:column="9">return <expr><name pos:line="1921" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1924" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1924" pos:column="14">DataObject_EnumFormatEtc</name><parameter_list pos:line="1924" pos:column="38">(<param><decl><type><name pos:line="1924" pos:column="39">DataObject</name> <type:modifier pos:line="1924" pos:column="50">*</type:modifier></type><name pos:line="1924" pos:column="51">pd</name></decl></param>, <param><decl><type><name pos:line="1924" pos:column="55">DWORD</name></type> <name pos:line="1924" pos:column="61">dwDirection</name></decl></param>, <param><decl><type><name pos:line="1924" pos:column="74">IEnumFORMATETC</name> <type:modifier pos:line="1924" pos:column="89">*</type:modifier><type:modifier pos:line="1924" pos:column="90">*</type:modifier></type><name pos:line="1924" pos:column="91">ppEnum</name></decl></param>)</parameter_list> <block pos:line="1924" pos:column="99">{
	<try pos:line="1925" pos:column="9">try <block pos:line="1925" pos:column="13">{
		<comment type="line" pos:line="1926" pos:column="17">//Platform::DebugPrintf("DOB EnumFormatEtc %d\n", dwDirection);</comment>
		<if pos:line="1927" pos:column="17">if <condition pos:line="1927" pos:column="20">(<expr><name pos:line="1927" pos:column="21">dwDirection</name> <op:operator pos:line="1927" pos:column="33">!=</op:operator> <name pos:line="1927" pos:column="36">DATADIR_GET</name></expr>)</condition><then pos:line="1927" pos:column="48"> <block pos:line="1927" pos:column="49">{
			<expr_stmt><expr><op:operator pos:line="1928" pos:column="25">*</op:operator><name pos:line="1928" pos:column="26">ppEnum</name> <op:operator pos:line="1928" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="1928" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<return pos:line="1929" pos:column="25">return <expr><name pos:line="1929" pos:column="32">E_FAIL</name></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="1931" pos:column="17">FormatEnumerator</name> <type:modifier pos:line="1931" pos:column="34">*</type:modifier></type><name pos:line="1931" pos:column="35">pfe</name></decl>;</decl_stmt>
		<if pos:line="1932" pos:column="17">if <condition pos:line="1932" pos:column="20">(<expr><call><name><name pos:line="1932" pos:column="21">pd</name><op:operator pos:line="1932" pos:column="23">-&gt;</op:operator><name pos:line="1932" pos:column="25">sci</name><op:operator pos:line="1932" pos:column="28">-&gt;</op:operator><name pos:line="1932" pos:column="30">IsUnicodeMode</name></name><argument_list pos:line="1932" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="1932" pos:column="46"> <block pos:line="1932" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="1933" pos:column="25">CLIPFORMAT</name></type> <name><name pos:line="1933" pos:column="36">formats</name><index pos:line="1933" pos:column="43">[]</index></name> <init pos:line="1933" pos:column="46">= <expr><block pos:line="1933" pos:column="48">{<expr><name pos:line="1933" pos:column="49">CF_UNICODETEXT</name></expr>, <expr><name pos:line="1933" pos:column="65">CF_TEXT</name></expr>}</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="1934" pos:column="25">pfe</name> <op:operator pos:line="1934" pos:column="29">=</op:operator> <op:operator pos:line="1934" pos:column="31">new</op:operator> <call><name pos:line="1934" pos:column="35">FormatEnumerator</name><argument_list pos:line="1934" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="1934" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1934" pos:column="55">formats</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1934" pos:column="64">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1935" pos:column="19">else <block pos:line="1935" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="1936" pos:column="25">CLIPFORMAT</name></type> <name><name pos:line="1936" pos:column="36">formats</name><index pos:line="1936" pos:column="43">[]</index></name> <init pos:line="1936" pos:column="46">= <expr><block pos:line="1936" pos:column="48">{<expr><name pos:line="1936" pos:column="49">CF_TEXT</name></expr>}</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="1937" pos:column="25">pfe</name> <op:operator pos:line="1937" pos:column="29">=</op:operator> <op:operator pos:line="1937" pos:column="31">new</op:operator> <call><name pos:line="1937" pos:column="35">FormatEnumerator</name><argument_list pos:line="1937" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="1937" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1937" pos:column="55">formats</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1937" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return pos:line="1939" pos:column="17">return <expr><call><name pos:line="1939" pos:column="24">FormatEnumerator_QueryInterface</name><argument_list pos:line="1939" pos:column="55">(<argument><expr><name pos:line="1939" pos:column="56">pfe</name></expr></argument>, <argument><expr><name pos:line="1939" pos:column="61">IID_IEnumFORMATETC</name></expr></argument>,
											   <argument><expr><call><name><name pos:line="1940" pos:column="92">reinterpret_cast</name><argument_list pos:line="1940" pos:column="108">&lt;<argument><expr><name pos:line="1940" pos:column="109">void</name> <op:operator pos:line="1940" pos:column="114">*</op:operator><op:operator pos:line="1940" pos:column="115">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1940" pos:column="117">(<argument><expr><name pos:line="1940" pos:column="118">ppEnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block> <catch pos:line="1941" pos:column="11">catch <parameter_list pos:line="1941" pos:column="17">(<param><decl><type><name><name pos:line="1941" pos:column="18">std</name><op:operator pos:line="1941" pos:column="21">::</op:operator><name pos:line="1941" pos:column="23">bad_alloc</name></name> <type:modifier pos:line="1941" pos:column="33">&amp;</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1941" pos:column="36">{
		<expr_stmt><expr><name><name pos:line="1942" pos:column="17">pd</name><op:operator pos:line="1942" pos:column="19">-&gt;</op:operator><name pos:line="1942" pos:column="21">sci</name><op:operator pos:line="1942" pos:column="24">-&gt;</op:operator><name pos:line="1942" pos:column="26">errorStatus</name></name> <op:operator pos:line="1942" pos:column="38">=</op:operator> <name pos:line="1942" pos:column="40">SC_STATUS_BADALLOC</name></expr>;</expr_stmt>
		<return pos:line="1943" pos:column="17">return <expr><name pos:line="1943" pos:column="24">E_OUTOFMEMORY</name></expr>;</return>
	}</block></catch> <catch pos:line="1944" pos:column="11">catch <parameter_list pos:line="1944" pos:column="17">(<param><decl><type><type:modifier pos:line="1944" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1944" pos:column="23">{
		<expr_stmt><expr><name><name pos:line="1945" pos:column="17">pd</name><op:operator pos:line="1945" pos:column="19">-&gt;</op:operator><name pos:line="1945" pos:column="21">sci</name><op:operator pos:line="1945" pos:column="24">-&gt;</op:operator><name pos:line="1945" pos:column="26">errorStatus</name></name> <op:operator pos:line="1945" pos:column="38">=</op:operator> <name pos:line="1945" pos:column="40">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
		<return pos:line="1946" pos:column="17">return <expr><name pos:line="1946" pos:column="24">E_FAIL</name></expr>;</return>
	}</block></catch></try>
}</block></function>

<function><type><name pos:line="1950" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1950" pos:column="14">DataObject_DAdvise</name><parameter_list pos:line="1950" pos:column="32">(<param><decl><type><name pos:line="1950" pos:column="33">DataObject</name> <type:modifier pos:line="1950" pos:column="44">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1950" pos:column="47">FORMATETC</name> <type:modifier pos:line="1950" pos:column="57">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1950" pos:column="60">DWORD</name></type></decl></param>, <param><decl><type><name pos:line="1950" pos:column="67">IAdviseSink</name> <type:modifier pos:line="1950" pos:column="79">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1950" pos:column="82">PDWORD</name></type></decl></param>)</parameter_list> <block pos:line="1950" pos:column="90">{
	<comment type="line" pos:line="1951" pos:column="9">//Platform::DebugPrintf("DOB DAdvise\n");</comment>
	<return pos:line="1952" pos:column="9">return <expr><name pos:line="1952" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1955" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1955" pos:column="14">DataObject_DUnadvise</name><parameter_list pos:line="1955" pos:column="34">(<param><decl><type><name pos:line="1955" pos:column="35">DataObject</name> <type:modifier pos:line="1955" pos:column="46">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1955" pos:column="49">DWORD</name></type></decl></param>)</parameter_list> <block pos:line="1955" pos:column="56">{
	<comment type="line" pos:line="1956" pos:column="9">//Platform::DebugPrintf("DOB DUnadvise\n");</comment>
	<return pos:line="1957" pos:column="9">return <expr><name pos:line="1957" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1960" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1960" pos:column="14">DataObject_EnumDAdvise</name><parameter_list pos:line="1960" pos:column="36">(<param><decl><type><name pos:line="1960" pos:column="37">DataObject</name> <type:modifier pos:line="1960" pos:column="48">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1960" pos:column="51">IEnumSTATDATA</name> <type:modifier pos:line="1960" pos:column="65">*</type:modifier><type:modifier pos:line="1960" pos:column="66">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="1960" pos:column="69">{
	<comment type="line" pos:line="1961" pos:column="9">//Platform::DebugPrintf("DOB EnumDAdvise\n");</comment>
	<return pos:line="1962" pos:column="9">return <expr><name pos:line="1962" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="1965" pos:column="1">static</specifier> <name pos:line="1965" pos:column="8">VFunction</name> <type:modifier pos:line="1965" pos:column="18">*</type:modifier></type><name><name pos:line="1965" pos:column="19">vtDataObject</name><index pos:line="1965" pos:column="31">[]</index></name> <init pos:line="1965" pos:column="34">= <expr><block pos:line="1965" pos:column="36">{
	<expr><op:operator pos:line="1966" pos:column="9">(</op:operator><name pos:line="1966" pos:column="10">VFunction</name> <op:operator pos:line="1966" pos:column="20">*</op:operator><op:operator pos:line="1966" pos:column="21">)</op:operator><op:operator pos:line="1966" pos:column="22">(</op:operator><name pos:line="1966" pos:column="23">DataObject_QueryInterface</name><op:operator pos:line="1966" pos:column="48">)</op:operator></expr>,
	<expr><op:operator pos:line="1967" pos:column="9">(</op:operator><name pos:line="1967" pos:column="10">VFunction</name> <op:operator pos:line="1967" pos:column="20">*</op:operator><op:operator pos:line="1967" pos:column="21">)</op:operator><op:operator pos:line="1967" pos:column="22">(</op:operator><name pos:line="1967" pos:column="23">DataObject_AddRef</name><op:operator pos:line="1967" pos:column="40">)</op:operator></expr>,
	<expr><op:operator pos:line="1968" pos:column="9">(</op:operator><name pos:line="1968" pos:column="10">VFunction</name> <op:operator pos:line="1968" pos:column="20">*</op:operator><op:operator pos:line="1968" pos:column="21">)</op:operator><op:operator pos:line="1968" pos:column="22">(</op:operator><name pos:line="1968" pos:column="23">DataObject_Release</name><op:operator pos:line="1968" pos:column="41">)</op:operator></expr>,
	<expr><op:operator pos:line="1969" pos:column="9">(</op:operator><name pos:line="1969" pos:column="10">VFunction</name> <op:operator pos:line="1969" pos:column="20">*</op:operator><op:operator pos:line="1969" pos:column="21">)</op:operator><op:operator pos:line="1969" pos:column="22">(</op:operator><name pos:line="1969" pos:column="23">DataObject_GetData</name><op:operator pos:line="1969" pos:column="41">)</op:operator></expr>,
	<expr><op:operator pos:line="1970" pos:column="9">(</op:operator><name pos:line="1970" pos:column="10">VFunction</name> <op:operator pos:line="1970" pos:column="20">*</op:operator><op:operator pos:line="1970" pos:column="21">)</op:operator><op:operator pos:line="1970" pos:column="22">(</op:operator><name pos:line="1970" pos:column="23">DataObject_GetDataHere</name><op:operator pos:line="1970" pos:column="45">)</op:operator></expr>,
	<expr><op:operator pos:line="1971" pos:column="9">(</op:operator><name pos:line="1971" pos:column="10">VFunction</name> <op:operator pos:line="1971" pos:column="20">*</op:operator><op:operator pos:line="1971" pos:column="21">)</op:operator><op:operator pos:line="1971" pos:column="22">(</op:operator><name pos:line="1971" pos:column="23">DataObject_QueryGetData</name><op:operator pos:line="1971" pos:column="46">)</op:operator></expr>,
	<expr><op:operator pos:line="1972" pos:column="9">(</op:operator><name pos:line="1972" pos:column="10">VFunction</name> <op:operator pos:line="1972" pos:column="20">*</op:operator><op:operator pos:line="1972" pos:column="21">)</op:operator><op:operator pos:line="1972" pos:column="22">(</op:operator><name pos:line="1972" pos:column="23">DataObject_GetCanonicalFormatEtc</name><op:operator pos:line="1972" pos:column="55">)</op:operator></expr>,
	<expr><op:operator pos:line="1973" pos:column="9">(</op:operator><name pos:line="1973" pos:column="10">VFunction</name> <op:operator pos:line="1973" pos:column="20">*</op:operator><op:operator pos:line="1973" pos:column="21">)</op:operator><op:operator pos:line="1973" pos:column="22">(</op:operator><name pos:line="1973" pos:column="23">DataObject_SetData</name><op:operator pos:line="1973" pos:column="41">)</op:operator></expr>,
	<expr><op:operator pos:line="1974" pos:column="9">(</op:operator><name pos:line="1974" pos:column="10">VFunction</name> <op:operator pos:line="1974" pos:column="20">*</op:operator><op:operator pos:line="1974" pos:column="21">)</op:operator><op:operator pos:line="1974" pos:column="22">(</op:operator><name pos:line="1974" pos:column="23">DataObject_EnumFormatEtc</name><op:operator pos:line="1974" pos:column="47">)</op:operator></expr>,
	<expr><op:operator pos:line="1975" pos:column="9">(</op:operator><name pos:line="1975" pos:column="10">VFunction</name> <op:operator pos:line="1975" pos:column="20">*</op:operator><op:operator pos:line="1975" pos:column="21">)</op:operator><op:operator pos:line="1975" pos:column="22">(</op:operator><name pos:line="1975" pos:column="23">DataObject_DAdvise</name><op:operator pos:line="1975" pos:column="41">)</op:operator></expr>,
	<expr><op:operator pos:line="1976" pos:column="9">(</op:operator><name pos:line="1976" pos:column="10">VFunction</name> <op:operator pos:line="1976" pos:column="20">*</op:operator><op:operator pos:line="1976" pos:column="21">)</op:operator><op:operator pos:line="1976" pos:column="22">(</op:operator><name pos:line="1976" pos:column="23">DataObject_DUnadvise</name><op:operator pos:line="1976" pos:column="43">)</op:operator></expr>,
	<expr><op:operator pos:line="1977" pos:column="9">(</op:operator><name pos:line="1977" pos:column="10">VFunction</name> <op:operator pos:line="1977" pos:column="20">*</op:operator><op:operator pos:line="1977" pos:column="21">)</op:operator><op:operator pos:line="1977" pos:column="22">(</op:operator><name pos:line="1977" pos:column="23">DataObject_EnumDAdvise</name><op:operator pos:line="1977" pos:column="45">)</op:operator></expr>
}</block></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="1980" pos:column="1">DataObject</name><op:operator pos:line="1980" pos:column="11">::</op:operator><name pos:line="1980" pos:column="13">DataObject</name></name><parameter_list pos:line="1980" pos:column="23">()</parameter_list> <block pos:line="1980" pos:column="26">{
	<expr_stmt><expr><name pos:line="1981" pos:column="9">vtbl</name> <op:operator pos:line="1981" pos:column="14">=</op:operator> <name pos:line="1981" pos:column="16">vtDataObject</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1982" pos:column="9">sci</name> <op:operator pos:line="1982" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="1982" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<comment type="line" format="doxygen" pos:line="1985" pos:column="1">/// Implement IUnknown</comment>
<function><type><name pos:line="1986" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1986" pos:column="14">DropTarget_QueryInterface</name><parameter_list pos:line="1986" pos:column="39">(<param><decl><type><name pos:line="1986" pos:column="40">DropTarget</name> <type:modifier pos:line="1986" pos:column="51">*</type:modifier></type><name pos:line="1986" pos:column="52">dt</name></decl></param>, <param><decl><type><name pos:line="1986" pos:column="56">REFIID</name></type> <name pos:line="1986" pos:column="63">riid</name></decl></param>, <param><decl><type><name pos:line="1986" pos:column="69">PVOID</name> <type:modifier pos:line="1986" pos:column="75">*</type:modifier></type><name pos:line="1986" pos:column="76">ppv</name></decl></param>)</parameter_list> <block pos:line="1986" pos:column="81">{
	<comment type="line" pos:line="1987" pos:column="9">//Platform::DebugPrintf("DT QI %x\n", dt);</comment>
	<return pos:line="1988" pos:column="9">return <expr><call><name><name pos:line="1988" pos:column="16">dt</name><op:operator pos:line="1988" pos:column="18">-&gt;</op:operator><name pos:line="1988" pos:column="20">sci</name><op:operator pos:line="1988" pos:column="23">-&gt;</op:operator><name pos:line="1988" pos:column="25">QueryInterface</name></name><argument_list pos:line="1988" pos:column="39">(<argument><expr><name pos:line="1988" pos:column="40">riid</name></expr></argument>, <argument><expr><name pos:line="1988" pos:column="46">ppv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name pos:line="1990" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1990" pos:column="14">(<argument pos:line="1990" pos:column="15">ULONG</argument>)</argument_list></macro><macro><name pos:line="1990" pos:column="21">DropTarget_AddRef</name><argument_list pos:line="1990" pos:column="38">(<argument pos:line="1990" pos:column="39">DropTarget *dt</argument>)</argument_list></macro> <block pos:line="1990" pos:column="55">{
	<return pos:line="1991" pos:column="9">return <expr><call><name><name pos:line="1991" pos:column="16">dt</name><op:operator pos:line="1991" pos:column="18">-&gt;</op:operator><name pos:line="1991" pos:column="20">sci</name><op:operator pos:line="1991" pos:column="23">-&gt;</op:operator><name pos:line="1991" pos:column="25">AddRef</name></name><argument_list pos:line="1991" pos:column="31">()</argument_list></call></expr>;</return>
}</block>
<macro><name pos:line="1993" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="1993" pos:column="14">(<argument pos:line="1993" pos:column="15">ULONG</argument>)</argument_list></macro><macro><name pos:line="1993" pos:column="21">DropTarget_Release</name><argument_list pos:line="1993" pos:column="39">(<argument pos:line="1993" pos:column="40">DropTarget *dt</argument>)</argument_list></macro> <block pos:line="1993" pos:column="56">{
	<return pos:line="1994" pos:column="9">return <expr><call><name><name pos:line="1994" pos:column="16">dt</name><op:operator pos:line="1994" pos:column="18">-&gt;</op:operator><name pos:line="1994" pos:column="20">sci</name><op:operator pos:line="1994" pos:column="23">-&gt;</op:operator><name pos:line="1994" pos:column="25">Release</name></name><argument_list pos:line="1994" pos:column="32">()</argument_list></call></expr>;</return>
}</block>

<comment type="line" format="doxygen" pos:line="1997" pos:column="1">/// Implement IDropTarget by forwarding to Scintilla</comment>
<function><type><name pos:line="1998" pos:column="1">STDMETHODIMP</name></type> <name pos:line="1998" pos:column="14">DropTarget_DragEnter</name><parameter_list pos:line="1998" pos:column="34">(<param><decl><type><name pos:line="1998" pos:column="35">DropTarget</name> <type:modifier pos:line="1998" pos:column="46">*</type:modifier></type><name pos:line="1998" pos:column="47">dt</name></decl></param>, <param><decl><type><name pos:line="1998" pos:column="51">LPDATAOBJECT</name></type> <name pos:line="1998" pos:column="64">pIDataSource</name></decl></param>, <param><decl><type><name pos:line="1998" pos:column="78">DWORD</name></type> <name pos:line="1998" pos:column="84">grfKeyState</name></decl></param>,
                                  <param><decl><type><name pos:line="1999" pos:column="35">POINTL</name></type> <name pos:line="1999" pos:column="42">pt</name></decl></param>, <param><decl><type><name pos:line="1999" pos:column="46">PDWORD</name></type> <name pos:line="1999" pos:column="53">pdwEffect</name></decl></param>)</parameter_list> <block pos:line="1999" pos:column="64">{
	<try pos:line="2000" pos:column="9">try <block pos:line="2000" pos:column="13">{
		<return pos:line="2001" pos:column="17">return <expr><call><name><name pos:line="2001" pos:column="24">dt</name><op:operator pos:line="2001" pos:column="26">-&gt;</op:operator><name pos:line="2001" pos:column="28">sci</name><op:operator pos:line="2001" pos:column="31">-&gt;</op:operator><name pos:line="2001" pos:column="33">DragEnter</name></name><argument_list pos:line="2001" pos:column="42">(<argument><expr><name pos:line="2001" pos:column="43">pIDataSource</name></expr></argument>, <argument><expr><name pos:line="2001" pos:column="57">grfKeyState</name></expr></argument>, <argument><expr><name pos:line="2001" pos:column="70">pt</name></expr></argument>, <argument><expr><name pos:line="2001" pos:column="74">pdwEffect</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block> <catch pos:line="2002" pos:column="11">catch <parameter_list pos:line="2002" pos:column="17">(<param><decl><type><type:modifier pos:line="2002" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2002" pos:column="23">{
		<expr_stmt><expr><name><name pos:line="2003" pos:column="17">dt</name><op:operator pos:line="2003" pos:column="19">-&gt;</op:operator><name pos:line="2003" pos:column="21">sci</name><op:operator pos:line="2003" pos:column="24">-&gt;</op:operator><name pos:line="2003" pos:column="26">errorStatus</name></name> <op:operator pos:line="2003" pos:column="38">=</op:operator> <name pos:line="2003" pos:column="40">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="2005" pos:column="9">return <expr><name pos:line="2005" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>
<function><type><name pos:line="2007" pos:column="1">STDMETHODIMP</name></type> <name pos:line="2007" pos:column="14">DropTarget_DragOver</name><parameter_list pos:line="2007" pos:column="33">(<param><decl><type><name pos:line="2007" pos:column="34">DropTarget</name> <type:modifier pos:line="2007" pos:column="45">*</type:modifier></type><name pos:line="2007" pos:column="46">dt</name></decl></param>, <param><decl><type><name pos:line="2007" pos:column="50">DWORD</name></type> <name pos:line="2007" pos:column="56">grfKeyState</name></decl></param>, <param><decl><type><name pos:line="2007" pos:column="69">POINTL</name></type> <name pos:line="2007" pos:column="76">pt</name></decl></param>, <param><decl><type><name pos:line="2007" pos:column="80">PDWORD</name></type> <name pos:line="2007" pos:column="87">pdwEffect</name></decl></param>)</parameter_list> <block pos:line="2007" pos:column="98">{
	<try pos:line="2008" pos:column="9">try <block pos:line="2008" pos:column="13">{
		<return pos:line="2009" pos:column="17">return <expr><call><name><name pos:line="2009" pos:column="24">dt</name><op:operator pos:line="2009" pos:column="26">-&gt;</op:operator><name pos:line="2009" pos:column="28">sci</name><op:operator pos:line="2009" pos:column="31">-&gt;</op:operator><name pos:line="2009" pos:column="33">DragOver</name></name><argument_list pos:line="2009" pos:column="41">(<argument><expr><name pos:line="2009" pos:column="42">grfKeyState</name></expr></argument>, <argument><expr><name pos:line="2009" pos:column="55">pt</name></expr></argument>, <argument><expr><name pos:line="2009" pos:column="59">pdwEffect</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block> <catch pos:line="2010" pos:column="11">catch <parameter_list pos:line="2010" pos:column="17">(<param><decl><type><type:modifier pos:line="2010" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2010" pos:column="23">{
		<expr_stmt><expr><name><name pos:line="2011" pos:column="17">dt</name><op:operator pos:line="2011" pos:column="19">-&gt;</op:operator><name pos:line="2011" pos:column="21">sci</name><op:operator pos:line="2011" pos:column="24">-&gt;</op:operator><name pos:line="2011" pos:column="26">errorStatus</name></name> <op:operator pos:line="2011" pos:column="38">=</op:operator> <name pos:line="2011" pos:column="40">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="2013" pos:column="9">return <expr><name pos:line="2013" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>
<function><type><name pos:line="2015" pos:column="1">STDMETHODIMP</name></type> <name pos:line="2015" pos:column="14">DropTarget_DragLeave</name><parameter_list pos:line="2015" pos:column="34">(<param><decl><type><name pos:line="2015" pos:column="35">DropTarget</name> <type:modifier pos:line="2015" pos:column="46">*</type:modifier></type><name pos:line="2015" pos:column="47">dt</name></decl></param>)</parameter_list> <block pos:line="2015" pos:column="51">{
	<try pos:line="2016" pos:column="9">try <block pos:line="2016" pos:column="13">{
		<return pos:line="2017" pos:column="17">return <expr><call><name><name pos:line="2017" pos:column="24">dt</name><op:operator pos:line="2017" pos:column="26">-&gt;</op:operator><name pos:line="2017" pos:column="28">sci</name><op:operator pos:line="2017" pos:column="31">-&gt;</op:operator><name pos:line="2017" pos:column="33">DragLeave</name></name><argument_list pos:line="2017" pos:column="42">()</argument_list></call></expr>;</return>
	}</block> <catch pos:line="2018" pos:column="11">catch <parameter_list pos:line="2018" pos:column="17">(<param><decl><type><type:modifier pos:line="2018" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2018" pos:column="23">{
		<expr_stmt><expr><name><name pos:line="2019" pos:column="17">dt</name><op:operator pos:line="2019" pos:column="19">-&gt;</op:operator><name pos:line="2019" pos:column="21">sci</name><op:operator pos:line="2019" pos:column="24">-&gt;</op:operator><name pos:line="2019" pos:column="26">errorStatus</name></name> <op:operator pos:line="2019" pos:column="38">=</op:operator> <name pos:line="2019" pos:column="40">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="2021" pos:column="9">return <expr><name pos:line="2021" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>
<function><type><name pos:line="2023" pos:column="1">STDMETHODIMP</name></type> <name pos:line="2023" pos:column="14">DropTarget_Drop</name><parameter_list pos:line="2023" pos:column="29">(<param><decl><type><name pos:line="2023" pos:column="30">DropTarget</name> <type:modifier pos:line="2023" pos:column="41">*</type:modifier></type><name pos:line="2023" pos:column="42">dt</name></decl></param>, <param><decl><type><name pos:line="2023" pos:column="46">LPDATAOBJECT</name></type> <name pos:line="2023" pos:column="59">pIDataSource</name></decl></param>, <param><decl><type><name pos:line="2023" pos:column="73">DWORD</name></type> <name pos:line="2023" pos:column="79">grfKeyState</name></decl></param>,
                             <param><decl><type><name pos:line="2024" pos:column="30">POINTL</name></type> <name pos:line="2024" pos:column="37">pt</name></decl></param>, <param><decl><type><name pos:line="2024" pos:column="41">PDWORD</name></type> <name pos:line="2024" pos:column="48">pdwEffect</name></decl></param>)</parameter_list> <block pos:line="2024" pos:column="59">{
	<try pos:line="2025" pos:column="9">try <block pos:line="2025" pos:column="13">{
		<return pos:line="2026" pos:column="17">return <expr><call><name><name pos:line="2026" pos:column="24">dt</name><op:operator pos:line="2026" pos:column="26">-&gt;</op:operator><name pos:line="2026" pos:column="28">sci</name><op:operator pos:line="2026" pos:column="31">-&gt;</op:operator><name pos:line="2026" pos:column="33">Drop</name></name><argument_list pos:line="2026" pos:column="37">(<argument><expr><name pos:line="2026" pos:column="38">pIDataSource</name></expr></argument>, <argument><expr><name pos:line="2026" pos:column="52">grfKeyState</name></expr></argument>, <argument><expr><name pos:line="2026" pos:column="65">pt</name></expr></argument>, <argument><expr><name pos:line="2026" pos:column="69">pdwEffect</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block> <catch pos:line="2027" pos:column="11">catch <parameter_list pos:line="2027" pos:column="17">(<param><decl><type><type:modifier pos:line="2027" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2027" pos:column="23">{
		<expr_stmt><expr><name><name pos:line="2028" pos:column="17">dt</name><op:operator pos:line="2028" pos:column="19">-&gt;</op:operator><name pos:line="2028" pos:column="21">sci</name><op:operator pos:line="2028" pos:column="24">-&gt;</op:operator><name pos:line="2028" pos:column="26">errorStatus</name></name> <op:operator pos:line="2028" pos:column="38">=</op:operator> <name pos:line="2028" pos:column="40">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="2030" pos:column="9">return <expr><name pos:line="2030" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="2033" pos:column="1">static</specifier> <name pos:line="2033" pos:column="8">VFunction</name> <type:modifier pos:line="2033" pos:column="18">*</type:modifier></type><name><name pos:line="2033" pos:column="19">vtDropTarget</name><index pos:line="2033" pos:column="31">[]</index></name> <init pos:line="2033" pos:column="34">= <expr><block pos:line="2033" pos:column="36">{
	<expr><op:operator pos:line="2034" pos:column="9">(</op:operator><name pos:line="2034" pos:column="10">VFunction</name> <op:operator pos:line="2034" pos:column="20">*</op:operator><op:operator pos:line="2034" pos:column="21">)</op:operator><op:operator pos:line="2034" pos:column="22">(</op:operator><name pos:line="2034" pos:column="23">DropTarget_QueryInterface</name><op:operator pos:line="2034" pos:column="48">)</op:operator></expr>,
	<expr><op:operator pos:line="2035" pos:column="9">(</op:operator><name pos:line="2035" pos:column="10">VFunction</name> <op:operator pos:line="2035" pos:column="20">*</op:operator><op:operator pos:line="2035" pos:column="21">)</op:operator><op:operator pos:line="2035" pos:column="22">(</op:operator><name pos:line="2035" pos:column="23">DropTarget_AddRef</name><op:operator pos:line="2035" pos:column="40">)</op:operator></expr>,
	<expr><op:operator pos:line="2036" pos:column="9">(</op:operator><name pos:line="2036" pos:column="10">VFunction</name> <op:operator pos:line="2036" pos:column="20">*</op:operator><op:operator pos:line="2036" pos:column="21">)</op:operator><op:operator pos:line="2036" pos:column="22">(</op:operator><name pos:line="2036" pos:column="23">DropTarget_Release</name><op:operator pos:line="2036" pos:column="41">)</op:operator></expr>,
	<expr><op:operator pos:line="2037" pos:column="9">(</op:operator><name pos:line="2037" pos:column="10">VFunction</name> <op:operator pos:line="2037" pos:column="20">*</op:operator><op:operator pos:line="2037" pos:column="21">)</op:operator><op:operator pos:line="2037" pos:column="22">(</op:operator><name pos:line="2037" pos:column="23">DropTarget_DragEnter</name><op:operator pos:line="2037" pos:column="43">)</op:operator></expr>,
	<expr><op:operator pos:line="2038" pos:column="9">(</op:operator><name pos:line="2038" pos:column="10">VFunction</name> <op:operator pos:line="2038" pos:column="20">*</op:operator><op:operator pos:line="2038" pos:column="21">)</op:operator><op:operator pos:line="2038" pos:column="22">(</op:operator><name pos:line="2038" pos:column="23">DropTarget_DragOver</name><op:operator pos:line="2038" pos:column="42">)</op:operator></expr>,
	<expr><op:operator pos:line="2039" pos:column="9">(</op:operator><name pos:line="2039" pos:column="10">VFunction</name> <op:operator pos:line="2039" pos:column="20">*</op:operator><op:operator pos:line="2039" pos:column="21">)</op:operator><op:operator pos:line="2039" pos:column="22">(</op:operator><name pos:line="2039" pos:column="23">DropTarget_DragLeave</name><op:operator pos:line="2039" pos:column="43">)</op:operator></expr>,
	<expr><op:operator pos:line="2040" pos:column="9">(</op:operator><name pos:line="2040" pos:column="10">VFunction</name> <op:operator pos:line="2040" pos:column="20">*</op:operator><op:operator pos:line="2040" pos:column="21">)</op:operator><op:operator pos:line="2040" pos:column="22">(</op:operator><name pos:line="2040" pos:column="23">DropTarget_Drop</name><op:operator pos:line="2040" pos:column="38">)</op:operator></expr>
}</block></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="2043" pos:column="1">DropTarget</name><op:operator pos:line="2043" pos:column="11">::</op:operator><name pos:line="2043" pos:column="13">DropTarget</name></name><parameter_list pos:line="2043" pos:column="23">()</parameter_list> <block pos:line="2043" pos:column="26">{
	<expr_stmt><expr><name pos:line="2044" pos:column="9">vtbl</name> <op:operator pos:line="2044" pos:column="14">=</op:operator> <name pos:line="2044" pos:column="16">vtDropTarget</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2045" pos:column="9">sci</name> <op:operator pos:line="2045" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="2045" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<comment type="block" format="doxygen" pos:line="2048" pos:column="1">/**
 * DBCS: support Input Method Editor (IME).
 * Called when IME Window opened.
 */</comment>
<function><type><name pos:line="2052" pos:column="1">void</name></type> <name><name pos:line="2052" pos:column="6">ScintillaWin</name><op:operator pos:line="2052" pos:column="18">::</op:operator><name pos:line="2052" pos:column="20">ImeStartComposition</name></name><parameter_list pos:line="2052" pos:column="39">()</parameter_list> <block pos:line="2052" pos:column="42">{
<cpp:ifndef pos:line="2053" pos:column="1">#<cpp:directive pos:line="2053" pos:column="2">ifndef</cpp:directive> <name pos:line="2053" pos:column="9">__DMC__</name></cpp:ifndef>
	<comment type="line" pos:line="2054" pos:column="9">// Digital Mars compiler does not include Imm library</comment>
	<if pos:line="2055" pos:column="9">if <condition pos:line="2055" pos:column="12">(<expr><name><name pos:line="2055" pos:column="13">caret</name><op:operator pos:line="2055" pos:column="18">.</op:operator><name pos:line="2055" pos:column="19">active</name></name></expr>)</condition><then pos:line="2055" pos:column="26"> <block pos:line="2055" pos:column="27">{
		<comment type="line" pos:line="2056" pos:column="17">// Move IME Window to current caret position</comment>
		<decl_stmt><decl><type><name pos:line="2057" pos:column="17">HIMC</name></type> <name pos:line="2057" pos:column="22">hIMC</name> <init pos:line="2057" pos:column="27">= <expr><call><name><op:operator pos:line="2057" pos:column="29">::</op:operator><name pos:line="2057" pos:column="31">ImmGetContext</name></name><argument_list pos:line="2057" pos:column="44">(<argument><expr><call><name pos:line="2057" pos:column="45">MainHWND</name><argument_list pos:line="2057" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2058" pos:column="17">Point</name></type> <name pos:line="2058" pos:column="23">pos</name> <init pos:line="2058" pos:column="27">= <expr><call><name pos:line="2058" pos:column="29">PointMainCaret</name><argument_list pos:line="2058" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2059" pos:column="17">COMPOSITIONFORM</name></type> <name pos:line="2059" pos:column="33">CompForm</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="2060" pos:column="17">CompForm</name><op:operator pos:line="2060" pos:column="25">.</op:operator><name pos:line="2060" pos:column="26">dwStyle</name></name> <op:operator pos:line="2060" pos:column="34">=</op:operator> <name pos:line="2060" pos:column="36">CFS_POINT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2061" pos:column="17">CompForm</name><op:operator pos:line="2061" pos:column="25">.</op:operator><name pos:line="2061" pos:column="26">ptCurrentPos</name><op:operator pos:line="2061" pos:column="38">.</op:operator><name pos:line="2061" pos:column="39">x</name></name> <op:operator pos:line="2061" pos:column="41">=</op:operator> <name><name pos:line="2061" pos:column="43">pos</name><op:operator pos:line="2061" pos:column="46">.</op:operator><name pos:line="2061" pos:column="47">x</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2062" pos:column="17">CompForm</name><op:operator pos:line="2062" pos:column="25">.</op:operator><name pos:line="2062" pos:column="26">ptCurrentPos</name><op:operator pos:line="2062" pos:column="38">.</op:operator><name pos:line="2062" pos:column="39">y</name></name> <op:operator pos:line="2062" pos:column="41">=</op:operator> <name><name pos:line="2062" pos:column="43">pos</name><op:operator pos:line="2062" pos:column="46">.</op:operator><name pos:line="2062" pos:column="47">y</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><op:operator pos:line="2064" pos:column="17">::</op:operator><name pos:line="2064" pos:column="19">ImmSetCompositionWindow</name></name><argument_list pos:line="2064" pos:column="42">(<argument><expr><name pos:line="2064" pos:column="43">hIMC</name></expr></argument>, <argument><expr><op:operator pos:line="2064" pos:column="49">&amp;</op:operator><name pos:line="2064" pos:column="50">CompForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="2066" pos:column="17">// Set font of IME window to same as surrounded text.</comment>
		<if pos:line="2067" pos:column="17">if <condition pos:line="2067" pos:column="20">(<expr><name pos:line="2067" pos:column="21">stylesValid</name></expr>)</condition><then pos:line="2067" pos:column="33"> <block pos:line="2067" pos:column="34">{
			<comment type="line" pos:line="2068" pos:column="25">// Since the style creation code has been made platform independent,</comment>
			<comment type="line" pos:line="2069" pos:column="25">// The logfont for the IME is recreated here.</comment>
			<decl_stmt><decl><type><name pos:line="2070" pos:column="25">int</name></type> <name pos:line="2070" pos:column="29">styleHere</name> <init pos:line="2070" pos:column="39">= <expr><op:operator pos:line="2070" pos:column="41">(</op:operator><call><name><name pos:line="2070" pos:column="42">pdoc</name><op:operator pos:line="2070" pos:column="46">-&gt;</op:operator><name pos:line="2070" pos:column="48">StyleAt</name></name><argument_list pos:line="2070" pos:column="55">(<argument><expr><call><name><name pos:line="2070" pos:column="56">sel</name><op:operator pos:line="2070" pos:column="59">.</op:operator><name pos:line="2070" pos:column="60">MainCaret</name></name><argument_list pos:line="2070" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="2070" pos:column="72">)</op:operator> <op:operator pos:line="2070" pos:column="74">&amp;</op:operator> <lit:literal type="number" pos:line="2070" pos:column="76">31</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2071" pos:column="25">LOGFONTA</name></type> <name pos:line="2071" pos:column="34">lf</name> <init pos:line="2071" pos:column="37">= <expr><block pos:line="2071" pos:column="39">{<expr><lit:literal type="number" pos:line="2071" pos:column="40">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="43">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="46">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="49">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="52">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="55">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="58">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="61">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="64">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="67">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="70">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="73">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="2071" pos:column="76">0</lit:literal></expr>, <expr><lit:literal type="string" pos:line="2071" pos:column="79">""</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2072" pos:column="25">int</name></type> <name pos:line="2072" pos:column="29">sizeZoomed</name> <init pos:line="2072" pos:column="40">= <expr><name><name pos:line="2072" pos:column="42">vs</name><op:operator pos:line="2072" pos:column="44">.</op:operator><name pos:line="2072" pos:column="45">styles</name><index pos:line="2072" pos:column="51">[<expr><name pos:line="2072" pos:column="52">styleHere</name></expr>]</index></name><op:operator pos:line="2072" pos:column="62">.</op:operator><name pos:line="2072" pos:column="63">size</name> <op:operator pos:line="2072" pos:column="68">+</op:operator> <name><name pos:line="2072" pos:column="70">vs</name><op:operator pos:line="2072" pos:column="72">.</op:operator><name pos:line="2072" pos:column="73">zoomLevel</name></name></expr></init></decl>;</decl_stmt>
			<if pos:line="2073" pos:column="25">if <condition pos:line="2073" pos:column="28">(<expr><name pos:line="2073" pos:column="29">sizeZoomed</name> <op:operator pos:line="2073" pos:column="40">&lt;=</op:operator> <lit:literal type="number" pos:line="2073" pos:column="43">2</lit:literal></expr>)</condition><then pos:line="2073" pos:column="45">	<comment type="line" pos:line="2073" pos:column="49">// Hangs if sizeZoomed &lt;= 1</comment>
				<expr_stmt><expr><name pos:line="2074" pos:column="33">sizeZoomed</name> <op:operator pos:line="2074" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="2074" pos:column="46">2</lit:literal></expr>;</expr_stmt></then></if>
			<function_decl><type><name pos:line="2075" pos:column="25">AutoSurface</name></type> <name pos:line="2075" pos:column="37">surface</name><parameter_list pos:line="2075" pos:column="44">(<param><decl><type><name pos:line="2075" pos:column="45">this</name></type></decl></param>)</parameter_list>;</function_decl>
			<decl_stmt><decl><type><name pos:line="2076" pos:column="25">int</name></type> <name pos:line="2076" pos:column="29">deviceHeight</name> <init pos:line="2076" pos:column="42">= <expr><name pos:line="2076" pos:column="44">sizeZoomed</name></expr></init></decl>;</decl_stmt>
			<if pos:line="2077" pos:column="25">if <condition pos:line="2077" pos:column="28">(<expr><name pos:line="2077" pos:column="29">surface</name></expr>)</condition><then pos:line="2077" pos:column="37"> <block pos:line="2077" pos:column="38">{
				<expr_stmt><expr><name pos:line="2078" pos:column="33">deviceHeight</name> <op:operator pos:line="2078" pos:column="46">=</op:operator> <op:operator pos:line="2078" pos:column="48">(</op:operator><name pos:line="2078" pos:column="49">sizeZoomed</name> <op:operator pos:line="2078" pos:column="60">*</op:operator> <call><name><name pos:line="2078" pos:column="62">surface</name><op:operator pos:line="2078" pos:column="69">-&gt;</op:operator><name pos:line="2078" pos:column="71">LogPixelsY</name></name><argument_list pos:line="2078" pos:column="81">()</argument_list></call><op:operator pos:line="2078" pos:column="83">)</op:operator> <op:operator pos:line="2078" pos:column="85">/</op:operator> <lit:literal type="number" pos:line="2078" pos:column="87">72</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="2080" pos:column="25">// The negative is to allow for leading</comment>
			<expr_stmt><expr><name><name pos:line="2081" pos:column="25">lf</name><op:operator pos:line="2081" pos:column="27">.</op:operator><name pos:line="2081" pos:column="28">lfHeight</name></name> <op:operator pos:line="2081" pos:column="37">=</op:operator> <op:operator pos:line="2081" pos:column="39">-</op:operator><op:operator pos:line="2081" pos:column="40">(</op:operator><call><name pos:line="2081" pos:column="41">abs</name><argument_list pos:line="2081" pos:column="44">(<argument><expr><name pos:line="2081" pos:column="45">deviceHeight</name></expr></argument>)</argument_list></call><op:operator pos:line="2081" pos:column="58">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2082" pos:column="25">lf</name><op:operator pos:line="2082" pos:column="27">.</op:operator><name pos:line="2082" pos:column="28">lfWeight</name></name> <op:operator pos:line="2082" pos:column="37">=</op:operator> <name><name pos:line="2082" pos:column="39">vs</name><op:operator pos:line="2082" pos:column="41">.</op:operator><name pos:line="2082" pos:column="42">styles</name><index pos:line="2082" pos:column="48">[<expr><name pos:line="2082" pos:column="49">styleHere</name></expr>]</index></name><op:operator pos:line="2082" pos:column="59">.</op:operator><name pos:line="2082" pos:column="60">bold</name> <op:operator pos:line="2082" pos:column="65">?</op:operator> <name pos:line="2082" pos:column="67">FW_BOLD</name> <op:operator pos:line="2082" pos:column="75">:</op:operator> <name pos:line="2082" pos:column="77">FW_NORMAL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2083" pos:column="25">lf</name><op:operator pos:line="2083" pos:column="27">.</op:operator><name pos:line="2083" pos:column="28">lfItalic</name></name> <op:operator pos:line="2083" pos:column="37">=</op:operator> <call><name><name pos:line="2083" pos:column="39">static_cast</name><argument_list pos:line="2083" pos:column="50">&lt;<argument><expr><name pos:line="2083" pos:column="51">BYTE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2083" pos:column="56">(<argument><expr><name><name pos:line="2083" pos:column="57">vs</name><op:operator pos:line="2083" pos:column="59">.</op:operator><name pos:line="2083" pos:column="60">styles</name><index pos:line="2083" pos:column="66">[<expr><name pos:line="2083" pos:column="67">styleHere</name></expr>]</index></name><op:operator pos:line="2083" pos:column="77">.</op:operator><name pos:line="2083" pos:column="78">italic</name> <op:operator pos:line="2083" pos:column="85">?</op:operator> <lit:literal type="number" pos:line="2083" pos:column="87">1</lit:literal> <op:operator pos:line="2083" pos:column="89">:</op:operator> <lit:literal type="number" pos:line="2083" pos:column="91">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2084" pos:column="25">lf</name><op:operator pos:line="2084" pos:column="27">.</op:operator><name pos:line="2084" pos:column="28">lfCharSet</name></name> <op:operator pos:line="2084" pos:column="38">=</op:operator> <name pos:line="2084" pos:column="40">DEFAULT_CHARSET</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2085" pos:column="25">lf</name><op:operator pos:line="2085" pos:column="27">.</op:operator><name pos:line="2085" pos:column="28">lfFaceName</name><index pos:line="2085" pos:column="38">[<expr><lit:literal type="number" pos:line="2085" pos:column="39">0</lit:literal></expr>]</index></name> <op:operator pos:line="2085" pos:column="42">=</op:operator> <lit:literal type="char" pos:line="2085" pos:column="44">'\0'</lit:literal></expr>;</expr_stmt>
			<if pos:line="2086" pos:column="25">if <condition pos:line="2086" pos:column="28">(<expr><name><name pos:line="2086" pos:column="29">vs</name><op:operator pos:line="2086" pos:column="31">.</op:operator><name pos:line="2086" pos:column="32">styles</name><index pos:line="2086" pos:column="38">[<expr><name pos:line="2086" pos:column="39">styleHere</name></expr>]</index></name><op:operator pos:line="2086" pos:column="49">.</op:operator><name pos:line="2086" pos:column="50">fontName</name></expr>)</condition><then pos:line="2086" pos:column="59">
				<expr_stmt><expr><call><name pos:line="2087" pos:column="33">strcpy</name><argument_list pos:line="2087" pos:column="39">(<argument><expr><name><name pos:line="2087" pos:column="40">lf</name><op:operator pos:line="2087" pos:column="42">.</op:operator><name pos:line="2087" pos:column="43">lfFaceName</name></name></expr></argument>, <argument><expr><name><name pos:line="2087" pos:column="55">vs</name><op:operator pos:line="2087" pos:column="57">.</op:operator><name pos:line="2087" pos:column="58">styles</name><index pos:line="2087" pos:column="64">[<expr><name pos:line="2087" pos:column="65">styleHere</name></expr>]</index></name><op:operator pos:line="2087" pos:column="75">.</op:operator><name pos:line="2087" pos:column="76">fontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><call><name><op:operator pos:line="2089" pos:column="25">::</op:operator><name pos:line="2089" pos:column="27">ImmSetCompositionFontA</name></name><argument_list pos:line="2089" pos:column="49">(<argument><expr><name pos:line="2089" pos:column="50">hIMC</name></expr></argument>, <argument><expr><op:operator pos:line="2089" pos:column="56">&amp;</op:operator><name pos:line="2089" pos:column="57">lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><op:operator pos:line="2091" pos:column="17">::</op:operator><name pos:line="2091" pos:column="19">ImmReleaseContext</name></name><argument_list pos:line="2091" pos:column="36">(<argument><expr><call><name pos:line="2091" pos:column="37">MainHWND</name><argument_list pos:line="2091" pos:column="45">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2091" pos:column="49">hIMC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="2092" pos:column="17">// Caret is displayed in IME window. So, caret in Scintilla is useless.</comment>
		<expr_stmt><expr><call><name pos:line="2093" pos:column="17">DropCaret</name><argument_list pos:line="2093" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif pos:line="2095" pos:column="1">#<cpp:directive pos:line="2095" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block" format="doxygen" pos:line="2098" pos:column="1">/** Called when IME Window closed. */</comment>
<function><type><name pos:line="2099" pos:column="1">void</name></type> <name><name pos:line="2099" pos:column="6">ScintillaWin</name><op:operator pos:line="2099" pos:column="18">::</op:operator><name pos:line="2099" pos:column="20">ImeEndComposition</name></name><parameter_list pos:line="2099" pos:column="37">()</parameter_list> <block pos:line="2099" pos:column="40">{
	<expr_stmt><expr><call><name pos:line="2100" pos:column="9">ShowCaretAtCurrentPosition</name><argument_list pos:line="2100" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2103" pos:column="1">void</name></type> <name><name pos:line="2103" pos:column="6">ScintillaWin</name><op:operator pos:line="2103" pos:column="18">::</op:operator><name pos:line="2103" pos:column="20">AddCharBytes</name></name><parameter_list pos:line="2103" pos:column="32">(<param><decl><type><name pos:line="2103" pos:column="33">char</name></type> <name pos:line="2103" pos:column="38">b0</name></decl></param>, <param><decl><type><name pos:line="2103" pos:column="42">char</name></type> <name pos:line="2103" pos:column="47">b1</name></decl></param>)</parameter_list> <block pos:line="2103" pos:column="51">{

	<decl_stmt><decl><type><name pos:line="2105" pos:column="9">int</name></type> <name pos:line="2105" pos:column="13">inputCodePage</name> <init pos:line="2105" pos:column="27">= <expr><call><name pos:line="2105" pos:column="29">InputCodePage</name><argument_list pos:line="2105" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2106" pos:column="9">if <condition pos:line="2106" pos:column="12">(<expr><name pos:line="2106" pos:column="13">inputCodePage</name> <op:operator pos:line="2106" pos:column="27">&amp;&amp;</op:operator> <call><name pos:line="2106" pos:column="30">IsUnicodeMode</name><argument_list pos:line="2106" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="2106" pos:column="46"> <block pos:line="2106" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="2107" pos:column="17">char</name></type> <name><name pos:line="2107" pos:column="22">utfval</name><index pos:line="2107" pos:column="28">[<expr><lit:literal type="number" pos:line="2107" pos:column="29">4</lit:literal></expr>]</index></name> <init pos:line="2107" pos:column="32">= <expr><lit:literal type="string" pos:line="2107" pos:column="34">"\0\0\0"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2108" pos:column="17">char</name></type> <name><name pos:line="2108" pos:column="22">ansiChars</name><index pos:line="2108" pos:column="31">[<expr><lit:literal type="number" pos:line="2108" pos:column="32">3</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2109" pos:column="17">wchar_t</name></type> <name><name pos:line="2109" pos:column="25">wcs</name><index pos:line="2109" pos:column="28">[<expr><lit:literal type="number" pos:line="2109" pos:column="29">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<if pos:line="2110" pos:column="17">if <condition pos:line="2110" pos:column="20">(<expr><name pos:line="2110" pos:column="21">b0</name></expr>)</condition><then pos:line="2110" pos:column="24"> <block pos:line="2110" pos:column="25">{	<comment type="line" pos:line="2110" pos:column="33">// Two bytes from IME</comment>
			<expr_stmt><expr><name><name pos:line="2111" pos:column="25">ansiChars</name><index pos:line="2111" pos:column="34">[<expr><lit:literal type="number" pos:line="2111" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="2111" pos:column="38">=</op:operator> <name pos:line="2111" pos:column="40">b0</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2112" pos:column="25">ansiChars</name><index pos:line="2112" pos:column="34">[<expr><lit:literal type="number" pos:line="2112" pos:column="35">1</lit:literal></expr>]</index></name> <op:operator pos:line="2112" pos:column="38">=</op:operator> <name pos:line="2112" pos:column="40">b1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2113" pos:column="25">ansiChars</name><index pos:line="2113" pos:column="34">[<expr><lit:literal type="number" pos:line="2113" pos:column="35">2</lit:literal></expr>]</index></name> <op:operator pos:line="2113" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="2113" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="2114" pos:column="25">::</op:operator><name pos:line="2114" pos:column="27">MultiByteToWideChar</name></name><argument_list pos:line="2114" pos:column="46">(<argument><expr><name pos:line="2114" pos:column="47">inputCodePage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2114" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2114" pos:column="65">ansiChars</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2114" pos:column="76">2</lit:literal></expr></argument>, <argument><expr><name pos:line="2114" pos:column="79">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2114" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="2115" pos:column="19">else <block pos:line="2115" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="2116" pos:column="25">ansiChars</name><index pos:line="2116" pos:column="34">[<expr><lit:literal type="number" pos:line="2116" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="2116" pos:column="38">=</op:operator> <name pos:line="2116" pos:column="40">b1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2117" pos:column="25">ansiChars</name><index pos:line="2117" pos:column="34">[<expr><lit:literal type="number" pos:line="2117" pos:column="35">1</lit:literal></expr>]</index></name> <op:operator pos:line="2117" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="2117" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="2118" pos:column="25">::</op:operator><name pos:line="2118" pos:column="27">MultiByteToWideChar</name></name><argument_list pos:line="2118" pos:column="46">(<argument><expr><name pos:line="2118" pos:column="47">inputCodePage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2118" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2118" pos:column="65">ansiChars</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2118" pos:column="76">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2118" pos:column="79">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2118" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<decl_stmt><decl><type><name pos:line="2120" pos:column="17">unsigned</name> <name pos:line="2120" pos:column="26">int</name></type> <name pos:line="2120" pos:column="30">len</name> <init pos:line="2120" pos:column="34">= <expr><call><name pos:line="2120" pos:column="36">UTF8Length</name><argument_list pos:line="2120" pos:column="46">(<argument><expr><name pos:line="2120" pos:column="47">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2120" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="2121" pos:column="17">UTF8FromUTF16</name><argument_list pos:line="2121" pos:column="30">(<argument><expr><name pos:line="2121" pos:column="31">wcs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2121" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2121" pos:column="39">utfval</name></expr></argument>, <argument><expr><name pos:line="2121" pos:column="47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2122" pos:column="17">utfval</name><index pos:line="2122" pos:column="23">[<expr><name pos:line="2122" pos:column="24">len</name></expr>]</index></name> <op:operator pos:line="2122" pos:column="29">=</op:operator> <lit:literal type="char" pos:line="2122" pos:column="31">'\0'</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2123" pos:column="17">AddCharUTF</name><argument_list pos:line="2123" pos:column="27">(<argument><expr><name pos:line="2123" pos:column="28">utfval</name></expr></argument>, <argument><expr><name pos:line="2123" pos:column="36">len</name> <op:operator pos:line="2123" pos:column="40">?</op:operator> <name pos:line="2123" pos:column="42">len</name> <op:operator pos:line="2123" pos:column="46">:</op:operator> <lit:literal type="number" pos:line="2123" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="2124" pos:column="11">else <if pos:line="2124" pos:column="16">if <condition pos:line="2124" pos:column="19">(<expr><name pos:line="2124" pos:column="20">b0</name></expr>)</condition><then pos:line="2124" pos:column="23"> <block pos:line="2124" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="2125" pos:column="17">char</name></type> <name><name pos:line="2125" pos:column="22">dbcsChars</name><index pos:line="2125" pos:column="31">[<expr><lit:literal type="number" pos:line="2125" pos:column="32">3</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="2126" pos:column="17">dbcsChars</name><index pos:line="2126" pos:column="26">[<expr><lit:literal type="number" pos:line="2126" pos:column="27">0</lit:literal></expr>]</index></name> <op:operator pos:line="2126" pos:column="30">=</op:operator> <name pos:line="2126" pos:column="32">b0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2127" pos:column="17">dbcsChars</name><index pos:line="2127" pos:column="26">[<expr><lit:literal type="number" pos:line="2127" pos:column="27">1</lit:literal></expr>]</index></name> <op:operator pos:line="2127" pos:column="30">=</op:operator> <name pos:line="2127" pos:column="32">b1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2128" pos:column="17">dbcsChars</name><index pos:line="2128" pos:column="26">[<expr><lit:literal type="number" pos:line="2128" pos:column="27">2</lit:literal></expr>]</index></name> <op:operator pos:line="2128" pos:column="30">=</op:operator> <lit:literal type="char" pos:line="2128" pos:column="32">'\0'</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2129" pos:column="17">AddCharUTF</name><argument_list pos:line="2129" pos:column="27">(<argument><expr><name pos:line="2129" pos:column="28">dbcsChars</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2129" pos:column="39">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2129" pos:column="42">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="2130" pos:column="11">else <block pos:line="2130" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="2131" pos:column="17">AddChar</name><argument_list pos:line="2131" pos:column="24">(<argument><expr><name pos:line="2131" pos:column="25">b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>
}</block></function>

<function><type><name pos:line="2135" pos:column="1">void</name></type> <name><name pos:line="2135" pos:column="6">ScintillaWin</name><op:operator pos:line="2135" pos:column="18">::</op:operator><name pos:line="2135" pos:column="20">GetIntelliMouseParameters</name></name><parameter_list pos:line="2135" pos:column="45">()</parameter_list> <block pos:line="2135" pos:column="48">{
	<comment type="line" pos:line="2136" pos:column="9">// This retrieves the number of lines per scroll as configured inthe Mouse Properties sheet in Control Panel</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="2137" pos:column="9">::</op:operator><name pos:line="2137" pos:column="11">SystemParametersInfo</name></name><argument_list pos:line="2137" pos:column="31">(<argument><expr><name pos:line="2137" pos:column="32">SPI_GETWHEELSCROLLLINES</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2137" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2137" pos:column="60">&amp;</op:operator><name pos:line="2137" pos:column="61">linesPerScroll</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2137" pos:column="77">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2140" pos:column="1">void</name></type> <name><name pos:line="2140" pos:column="6">ScintillaWin</name><op:operator pos:line="2140" pos:column="18">::</op:operator><name pos:line="2140" pos:column="20">CopyToClipboard</name></name><parameter_list pos:line="2140" pos:column="35">(<param><decl><type><specifier pos:line="2140" pos:column="36">const</specifier> <name pos:line="2140" pos:column="42">SelectionText</name> <type:modifier pos:line="2140" pos:column="56">&amp;</type:modifier></type><name pos:line="2140" pos:column="57">selectedText</name></decl></param>)</parameter_list> <block pos:line="2140" pos:column="71">{
	<if pos:line="2141" pos:column="9">if <condition pos:line="2141" pos:column="12">(<expr><op:operator pos:line="2141" pos:column="13">!</op:operator><call><name><op:operator pos:line="2141" pos:column="14">::</op:operator><name pos:line="2141" pos:column="16">OpenClipboard</name></name><argument_list pos:line="2141" pos:column="29">(<argument><expr><call><name pos:line="2141" pos:column="30">MainHWND</name><argument_list pos:line="2141" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2141" pos:column="42">
		<return pos:line="2142" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="2143" pos:column="9">::</op:operator><name pos:line="2143" pos:column="11">EmptyClipboard</name></name><argument_list pos:line="2143" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="2145" pos:column="9">GlobalMemory</name></type> <name pos:line="2145" pos:column="22">uniText</name></decl>;</decl_stmt>

	<comment type="line" pos:line="2147" pos:column="9">// Default Scintilla behaviour in Unicode mode</comment>
	<if pos:line="2148" pos:column="9">if <condition pos:line="2148" pos:column="12">(<expr><call><name pos:line="2148" pos:column="13">IsUnicodeMode</name><argument_list pos:line="2148" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="2148" pos:column="29"> <block pos:line="2148" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="2149" pos:column="17">int</name></type> <name pos:line="2149" pos:column="21">uchars</name> <init pos:line="2149" pos:column="28">= <expr><call><name pos:line="2149" pos:column="30">UTF16Length</name><argument_list pos:line="2149" pos:column="41">(<argument><expr><name><name pos:line="2149" pos:column="42">selectedText</name><op:operator pos:line="2149" pos:column="54">.</op:operator><name pos:line="2149" pos:column="55">s</name></name></expr></argument>, <argument><expr><name><name pos:line="2149" pos:column="58">selectedText</name><op:operator pos:line="2149" pos:column="70">.</op:operator><name pos:line="2149" pos:column="71">len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="2150" pos:column="17">uniText</name><op:operator pos:line="2150" pos:column="24">.</op:operator><name pos:line="2150" pos:column="25">Allocate</name></name><argument_list pos:line="2150" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="2150" pos:column="34">2</lit:literal> <op:operator pos:line="2150" pos:column="36">*</op:operator> <name pos:line="2150" pos:column="38">uchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="2151" pos:column="17">if <condition pos:line="2151" pos:column="20">(<expr><name pos:line="2151" pos:column="21">uniText</name></expr>)</condition><then pos:line="2151" pos:column="29"> <block pos:line="2151" pos:column="30">{
			<expr_stmt><expr><call><name pos:line="2152" pos:column="25">UTF16FromUTF8</name><argument_list pos:line="2152" pos:column="38">(<argument><expr><name><name pos:line="2152" pos:column="39">selectedText</name><op:operator pos:line="2152" pos:column="51">.</op:operator><name pos:line="2152" pos:column="52">s</name></name></expr></argument>, <argument><expr><name><name pos:line="2152" pos:column="55">selectedText</name><op:operator pos:line="2152" pos:column="67">.</op:operator><name pos:line="2152" pos:column="68">len</name></name></expr></argument>, <argument><expr><call><name><name pos:line="2152" pos:column="73">static_cast</name><argument_list pos:line="2152" pos:column="84">&lt;<argument><expr><name pos:line="2152" pos:column="85">wchar_t</name> <op:operator pos:line="2152" pos:column="93">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2152" pos:column="95">(<argument><expr><name><name pos:line="2152" pos:column="96">uniText</name><op:operator pos:line="2152" pos:column="103">.</op:operator><name pos:line="2152" pos:column="104">ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2152" pos:column="110">uchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then> <else pos:line="2154" pos:column="11">else <block pos:line="2154" pos:column="16">{
		<comment type="line" pos:line="2155" pos:column="17">// Not Unicode mode</comment>
		<comment type="line" pos:line="2156" pos:column="17">// Convert to Unicode using the current Scintilla code page</comment>
		<decl_stmt><decl><type><name pos:line="2157" pos:column="17">UINT</name></type> <name pos:line="2157" pos:column="22">cpSrc</name> <init pos:line="2157" pos:column="28">= <expr><call><name pos:line="2157" pos:column="30">CodePageFromCharSet</name><argument_list pos:line="2157" pos:column="49">(
					<argument><expr><name><name pos:line="2158" pos:column="41">selectedText</name><op:operator pos:line="2158" pos:column="53">.</op:operator><name pos:line="2158" pos:column="54">characterSet</name></name></expr></argument>, <argument><expr><name><name pos:line="2158" pos:column="68">selectedText</name><op:operator pos:line="2158" pos:column="80">.</op:operator><name pos:line="2158" pos:column="81">codePage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2159" pos:column="17">int</name></type> <name pos:line="2159" pos:column="21">uLen</name> <init pos:line="2159" pos:column="26">= <expr><call><name><op:operator pos:line="2159" pos:column="28">::</op:operator><name pos:line="2159" pos:column="30">MultiByteToWideChar</name></name><argument_list pos:line="2159" pos:column="49">(<argument><expr><name pos:line="2159" pos:column="50">cpSrc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2159" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="2159" pos:column="60">selectedText</name><op:operator pos:line="2159" pos:column="72">.</op:operator><name pos:line="2159" pos:column="73">s</name></name></expr></argument>, <argument><expr><name><name pos:line="2159" pos:column="76">selectedText</name><op:operator pos:line="2159" pos:column="88">.</op:operator><name pos:line="2159" pos:column="89">len</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2159" pos:column="94">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2159" pos:column="97">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="2160" pos:column="17">uniText</name><op:operator pos:line="2160" pos:column="24">.</op:operator><name pos:line="2160" pos:column="25">Allocate</name></name><argument_list pos:line="2160" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="2160" pos:column="34">2</lit:literal> <op:operator pos:line="2160" pos:column="36">*</op:operator> <name pos:line="2160" pos:column="38">uLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="2161" pos:column="17">if <condition pos:line="2161" pos:column="20">(<expr><name pos:line="2161" pos:column="21">uniText</name></expr>)</condition><then pos:line="2161" pos:column="29"> <block pos:line="2161" pos:column="30">{
			<expr_stmt><expr><call><name><op:operator pos:line="2162" pos:column="25">::</op:operator><name pos:line="2162" pos:column="27">MultiByteToWideChar</name></name><argument_list pos:line="2162" pos:column="46">(<argument><expr><name pos:line="2162" pos:column="47">cpSrc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2162" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="2162" pos:column="57">selectedText</name><op:operator pos:line="2162" pos:column="69">.</op:operator><name pos:line="2162" pos:column="70">s</name></name></expr></argument>, <argument><expr><name><name pos:line="2162" pos:column="73">selectedText</name><op:operator pos:line="2162" pos:column="85">.</op:operator><name pos:line="2162" pos:column="86">len</name></name></expr></argument>,
				<argument><expr><call><name><name pos:line="2163" pos:column="33">static_cast</name><argument_list pos:line="2163" pos:column="44">&lt;<argument><expr><name pos:line="2163" pos:column="45">wchar_t</name> <op:operator pos:line="2163" pos:column="53">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2163" pos:column="55">(<argument><expr><name><name pos:line="2163" pos:column="56">uniText</name><op:operator pos:line="2163" pos:column="63">.</op:operator><name pos:line="2163" pos:column="64">ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2163" pos:column="70">uLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>

	<if pos:line="2167" pos:column="9">if <condition pos:line="2167" pos:column="12">(<expr><name pos:line="2167" pos:column="13">uniText</name></expr>)</condition><then pos:line="2167" pos:column="21"> <block pos:line="2167" pos:column="22">{
		<if pos:line="2168" pos:column="17">if <condition pos:line="2168" pos:column="20">(<expr><op:operator pos:line="2168" pos:column="21">!</op:operator><call><name pos:line="2168" pos:column="22">IsNT</name><argument_list pos:line="2168" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="2168" pos:column="29"> <block pos:line="2168" pos:column="30">{
			<comment type="line" pos:line="2169" pos:column="25">// Copy ANSI text to clipboard on Windows 9x</comment>
			<comment type="line" pos:line="2170" pos:column="25">// Convert from Unicode text, so other ANSI programs can</comment>
			<comment type="line" pos:line="2171" pos:column="25">// paste the text</comment>
			<comment type="line" pos:line="2172" pos:column="25">// Windows NT, 2k, XP automatically generates CF_TEXT</comment>
			<decl_stmt><decl><type><name pos:line="2173" pos:column="25">GlobalMemory</name></type> <name pos:line="2173" pos:column="38">ansiText</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="2174" pos:column="25">ansiText</name><op:operator pos:line="2174" pos:column="33">.</op:operator><name pos:line="2174" pos:column="34">Allocate</name></name><argument_list pos:line="2174" pos:column="42">(<argument><expr><name><name pos:line="2174" pos:column="43">selectedText</name><op:operator pos:line="2174" pos:column="55">.</op:operator><name pos:line="2174" pos:column="56">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="2175" pos:column="25">if <condition pos:line="2175" pos:column="28">(<expr><name pos:line="2175" pos:column="29">ansiText</name></expr>)</condition><then pos:line="2175" pos:column="38"> <block pos:line="2175" pos:column="39">{
				<expr_stmt><expr><call><name><op:operator pos:line="2176" pos:column="33">::</op:operator><name pos:line="2176" pos:column="35">WideCharToMultiByte</name></name><argument_list pos:line="2176" pos:column="54">(<argument><expr><name pos:line="2176" pos:column="55">CP_ACP</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2176" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="2176" pos:column="66">static_cast</name><argument_list pos:line="2176" pos:column="77">&lt;<argument><expr><name pos:line="2176" pos:column="78">wchar_t</name> <op:operator pos:line="2176" pos:column="86">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2176" pos:column="88">(<argument><expr><name><name pos:line="2176" pos:column="89">uniText</name><op:operator pos:line="2176" pos:column="96">.</op:operator><name pos:line="2176" pos:column="97">ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2176" pos:column="103">-</op:operator><lit:literal type="number" pos:line="2176" pos:column="104">1</lit:literal></expr></argument>,
					<argument><expr><call><name><name pos:line="2177" pos:column="41">static_cast</name><argument_list pos:line="2177" pos:column="52">&lt;<argument><expr><name pos:line="2177" pos:column="53">char</name> <op:operator pos:line="2177" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2177" pos:column="60">(<argument><expr><name><name pos:line="2177" pos:column="61">ansiText</name><op:operator pos:line="2177" pos:column="69">.</op:operator><name pos:line="2177" pos:column="70">ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="2177" pos:column="76">selectedText</name><op:operator pos:line="2177" pos:column="88">.</op:operator><name pos:line="2177" pos:column="89">len</name></name></expr></argument>, <argument><expr><name pos:line="2177" pos:column="94">NULL</name></expr></argument>, <argument><expr><name pos:line="2177" pos:column="100">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="2178" pos:column="33">ansiText</name><op:operator pos:line="2178" pos:column="41">.</op:operator><name pos:line="2178" pos:column="42">SetClip</name></name><argument_list pos:line="2178" pos:column="49">(<argument><expr><name pos:line="2178" pos:column="50">CF_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="2181" pos:column="17">uniText</name><op:operator pos:line="2181" pos:column="24">.</op:operator><name pos:line="2181" pos:column="25">SetClip</name></name><argument_list pos:line="2181" pos:column="32">(<argument><expr><name pos:line="2181" pos:column="33">CF_UNICODETEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="2182" pos:column="11">else <block pos:line="2182" pos:column="16">{
		<comment type="line" pos:line="2183" pos:column="17">// There was a failure - try to copy at least ANSI text</comment>
		<decl_stmt><decl><type><name pos:line="2184" pos:column="17">GlobalMemory</name></type> <name pos:line="2184" pos:column="30">ansiText</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="2185" pos:column="17">ansiText</name><op:operator pos:line="2185" pos:column="25">.</op:operator><name pos:line="2185" pos:column="26">Allocate</name></name><argument_list pos:line="2185" pos:column="34">(<argument><expr><name><name pos:line="2185" pos:column="35">selectedText</name><op:operator pos:line="2185" pos:column="47">.</op:operator><name pos:line="2185" pos:column="48">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="2186" pos:column="17">if <condition pos:line="2186" pos:column="20">(<expr><name pos:line="2186" pos:column="21">ansiText</name></expr>)</condition><then pos:line="2186" pos:column="30"> <block pos:line="2186" pos:column="31">{
			<expr_stmt><expr><call><name pos:line="2187" pos:column="25">memcpy</name><argument_list pos:line="2187" pos:column="31">(<argument><expr><call><name><name pos:line="2187" pos:column="32">static_cast</name><argument_list pos:line="2187" pos:column="43">&lt;<argument><expr><name pos:line="2187" pos:column="44">char</name> <op:operator pos:line="2187" pos:column="49">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2187" pos:column="51">(<argument><expr><name><name pos:line="2187" pos:column="52">ansiText</name><op:operator pos:line="2187" pos:column="60">.</op:operator><name pos:line="2187" pos:column="61">ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="2187" pos:column="67">selectedText</name><op:operator pos:line="2187" pos:column="79">.</op:operator><name pos:line="2187" pos:column="80">s</name></name></expr></argument>, <argument><expr><name><name pos:line="2187" pos:column="83">selectedText</name><op:operator pos:line="2187" pos:column="95">.</op:operator><name pos:line="2187" pos:column="96">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="2188" pos:column="25">ansiText</name><op:operator pos:line="2188" pos:column="33">.</op:operator><name pos:line="2188" pos:column="34">SetClip</name></name><argument_list pos:line="2188" pos:column="41">(<argument><expr><name pos:line="2188" pos:column="42">CF_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>

	<if pos:line="2192" pos:column="9">if <condition pos:line="2192" pos:column="12">(<expr><name><name pos:line="2192" pos:column="13">selectedText</name><op:operator pos:line="2192" pos:column="25">.</op:operator><name pos:line="2192" pos:column="26">rectangular</name></name></expr>)</condition><then pos:line="2192" pos:column="38"> <block pos:line="2192" pos:column="39">{
		<expr_stmt><expr><call><name><op:operator pos:line="2193" pos:column="17">::</op:operator><name pos:line="2193" pos:column="19">SetClipboardData</name></name><argument_list pos:line="2193" pos:column="35">(<argument><expr><name pos:line="2193" pos:column="36">cfColumnSelect</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2193" pos:column="52">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="2196" pos:column="9">if <condition pos:line="2196" pos:column="12">(<expr><name><name pos:line="2196" pos:column="13">selectedText</name><op:operator pos:line="2196" pos:column="25">.</op:operator><name pos:line="2196" pos:column="26">lineCopy</name></name></expr>)</condition><then pos:line="2196" pos:column="35"> <block pos:line="2196" pos:column="36">{
		<expr_stmt><expr><call><name><op:operator pos:line="2197" pos:column="17">::</op:operator><name pos:line="2197" pos:column="19">SetClipboardData</name></name><argument_list pos:line="2197" pos:column="35">(<argument><expr><name pos:line="2197" pos:column="36">cfLineSelect</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2197" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name><op:operator pos:line="2200" pos:column="9">::</op:operator><name pos:line="2200" pos:column="11">CloseClipboard</name></name><argument_list pos:line="2200" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2203" pos:column="1">void</name></type> <name><name pos:line="2203" pos:column="6">ScintillaWin</name><op:operator pos:line="2203" pos:column="18">::</op:operator><name pos:line="2203" pos:column="20">ScrollMessage</name></name><parameter_list pos:line="2203" pos:column="33">(<param><decl><type><name pos:line="2203" pos:column="34">WPARAM</name></type> <name pos:line="2203" pos:column="41">wParam</name></decl></param>)</parameter_list> <block pos:line="2203" pos:column="49">{
	<comment type="line" pos:line="2204" pos:column="9">//DWORD dwStart = timeGetTime();</comment>
	<comment type="line" pos:line="2205" pos:column="9">//Platform::DebugPrintf("Scroll %x %d\n", wParam, lParam);</comment>

	<decl_stmt><decl><type><name pos:line="2207" pos:column="9">SCROLLINFO</name></type> <name pos:line="2207" pos:column="20">sci</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2208" pos:column="9">memset</name><argument_list pos:line="2208" pos:column="15">(<argument><expr><op:operator pos:line="2208" pos:column="16">&amp;</op:operator><name pos:line="2208" pos:column="17">sci</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2208" pos:column="22">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="2208" pos:column="25">sizeof<argument_list pos:line="2208" pos:column="31">(<argument><expr><name pos:line="2208" pos:column="32">sci</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2209" pos:column="9">sci</name><op:operator pos:line="2209" pos:column="12">.</op:operator><name pos:line="2209" pos:column="13">cbSize</name></name> <op:operator pos:line="2209" pos:column="20">=</op:operator> <sizeof pos:line="2209" pos:column="22">sizeof<argument_list pos:line="2209" pos:column="28">(<argument><expr><name pos:line="2209" pos:column="29">sci</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2210" pos:column="9">sci</name><op:operator pos:line="2210" pos:column="12">.</op:operator><name pos:line="2210" pos:column="13">fMask</name></name> <op:operator pos:line="2210" pos:column="19">=</op:operator> <name pos:line="2210" pos:column="21">SIF_ALL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="2212" pos:column="9">GetScrollInfo</name><argument_list pos:line="2212" pos:column="22">(<argument><expr><name pos:line="2212" pos:column="23">SB_VERT</name></expr></argument>, <argument><expr><op:operator pos:line="2212" pos:column="32">&amp;</op:operator><name pos:line="2212" pos:column="33">sci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="2214" pos:column="9">//Platform::DebugPrintf("ScrollInfo %d mask=%x min=%d max=%d page=%d pos=%d track=%d\n", b,sci.fMask,</comment>
	<comment type="line" pos:line="2215" pos:column="9">//sci.nMin, sci.nMax, sci.nPage, sci.nPos, sci.nTrackPos);</comment>

	<decl_stmt><decl><type><name pos:line="2217" pos:column="9">int</name></type> <name pos:line="2217" pos:column="13">topLineNew</name> <init pos:line="2217" pos:column="24">= <expr><name pos:line="2217" pos:column="26">topLine</name></expr></init></decl>;</decl_stmt>
	<switch pos:line="2218" pos:column="9">switch <condition pos:line="2218" pos:column="16">(<expr><call><name pos:line="2218" pos:column="17">LoWord</name><argument_list pos:line="2218" pos:column="23">(<argument><expr><name pos:line="2218" pos:column="24">wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="2218" pos:column="33">{
	<case pos:line="2219" pos:column="9">case <expr><name pos:line="2219" pos:column="14">SB_LINEUP</name></expr>:
		<expr_stmt><expr><name pos:line="2220" pos:column="17">topLineNew</name> <op:operator pos:line="2220" pos:column="28">-=</op:operator> <lit:literal type="number" pos:line="2220" pos:column="31">1</lit:literal></expr>;</expr_stmt>
		<break pos:line="2221" pos:column="17">break;</break>
	</case><case pos:line="2222" pos:column="9">case <expr><name pos:line="2222" pos:column="14">SB_LINEDOWN</name></expr>:
		<expr_stmt><expr><name pos:line="2223" pos:column="17">topLineNew</name> <op:operator pos:line="2223" pos:column="28">+=</op:operator> <lit:literal type="number" pos:line="2223" pos:column="31">1</lit:literal></expr>;</expr_stmt>
		<break pos:line="2224" pos:column="17">break;</break>
	</case><case pos:line="2225" pos:column="9">case <expr><name pos:line="2225" pos:column="14">SB_PAGEUP</name></expr>:
		<expr_stmt><expr><name pos:line="2226" pos:column="17">topLineNew</name> <op:operator pos:line="2226" pos:column="28">-=</op:operator> <call><name pos:line="2226" pos:column="31">LinesToScroll</name><argument_list pos:line="2226" pos:column="44">()</argument_list></call></expr>;</expr_stmt> <break pos:line="2226" pos:column="48">break;</break>
	</case><case pos:line="2227" pos:column="9">case <expr><name pos:line="2227" pos:column="14">SB_PAGEDOWN</name></expr>: <expr_stmt><expr><name pos:line="2227" pos:column="27">topLineNew</name> <op:operator pos:line="2227" pos:column="38">+=</op:operator> <call><name pos:line="2227" pos:column="41">LinesToScroll</name><argument_list pos:line="2227" pos:column="54">()</argument_list></call></expr>;</expr_stmt> <break pos:line="2227" pos:column="58">break;</break>
	</case><case pos:line="2228" pos:column="9">case <expr><name pos:line="2228" pos:column="14">SB_TOP</name></expr>: <expr_stmt><expr><name pos:line="2228" pos:column="22">topLineNew</name> <op:operator pos:line="2228" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="2228" pos:column="35">0</lit:literal></expr>;</expr_stmt> <break pos:line="2228" pos:column="38">break;</break>
	</case><case pos:line="2229" pos:column="9">case <expr><name pos:line="2229" pos:column="14">SB_BOTTOM</name></expr>: <expr_stmt><expr><name pos:line="2229" pos:column="25">topLineNew</name> <op:operator pos:line="2229" pos:column="36">=</op:operator> <call><name pos:line="2229" pos:column="38">MaxScrollPos</name><argument_list pos:line="2229" pos:column="50">()</argument_list></call></expr>;</expr_stmt> <break pos:line="2229" pos:column="54">break;</break>
	</case><case pos:line="2230" pos:column="9">case <expr><name pos:line="2230" pos:column="14">SB_THUMBPOSITION</name></expr>: <expr_stmt><expr><name pos:line="2230" pos:column="32">topLineNew</name> <op:operator pos:line="2230" pos:column="43">=</op:operator> <name><name pos:line="2230" pos:column="45">sci</name><op:operator pos:line="2230" pos:column="48">.</op:operator><name pos:line="2230" pos:column="49">nTrackPos</name></name></expr>;</expr_stmt> <break pos:line="2230" pos:column="60">break;</break>
	</case><case pos:line="2231" pos:column="9">case <expr><name pos:line="2231" pos:column="14">SB_THUMBTRACK</name></expr>: <expr_stmt><expr><name pos:line="2231" pos:column="29">topLineNew</name> <op:operator pos:line="2231" pos:column="40">=</op:operator> <name><name pos:line="2231" pos:column="42">sci</name><op:operator pos:line="2231" pos:column="45">.</op:operator><name pos:line="2231" pos:column="46">nTrackPos</name></name></expr>;</expr_stmt> <break pos:line="2231" pos:column="57">break;</break>
	</case>}</block></switch>
	<expr_stmt><expr><call><name pos:line="2233" pos:column="9">ScrollTo</name><argument_list pos:line="2233" pos:column="17">(<argument><expr><name pos:line="2233" pos:column="18">topLineNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2236" pos:column="1">void</name></type> <name><name pos:line="2236" pos:column="6">ScintillaWin</name><op:operator pos:line="2236" pos:column="18">::</op:operator><name pos:line="2236" pos:column="20">HorizontalScrollMessage</name></name><parameter_list pos:line="2236" pos:column="43">(<param><decl><type><name pos:line="2236" pos:column="44">WPARAM</name></type> <name pos:line="2236" pos:column="51">wParam</name></decl></param>)</parameter_list> <block pos:line="2236" pos:column="59">{
	<decl_stmt><decl><type><name pos:line="2237" pos:column="9">int</name></type> <name pos:line="2237" pos:column="13">xPos</name> <init pos:line="2237" pos:column="18">= <expr><name pos:line="2237" pos:column="20">xOffset</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2238" pos:column="9">PRectangle</name></type> <name pos:line="2238" pos:column="20">rcText</name> <init pos:line="2238" pos:column="27">= <expr><call><name pos:line="2238" pos:column="29">GetTextRectangle</name><argument_list pos:line="2238" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2239" pos:column="9">int</name></type> <name pos:line="2239" pos:column="13">pageWidth</name> <init pos:line="2239" pos:column="23">= <expr><call><name><name pos:line="2239" pos:column="25">rcText</name><op:operator pos:line="2239" pos:column="31">.</op:operator><name pos:line="2239" pos:column="32">Width</name></name><argument_list pos:line="2239" pos:column="37">()</argument_list></call> <op:operator pos:line="2239" pos:column="40">*</op:operator> <lit:literal type="number" pos:line="2239" pos:column="42">2</lit:literal> <op:operator pos:line="2239" pos:column="44">/</op:operator> <lit:literal type="number" pos:line="2239" pos:column="46">3</lit:literal></expr></init></decl>;</decl_stmt>
	<switch pos:line="2240" pos:column="9">switch <condition pos:line="2240" pos:column="16">(<expr><call><name pos:line="2240" pos:column="17">LoWord</name><argument_list pos:line="2240" pos:column="23">(<argument><expr><name pos:line="2240" pos:column="24">wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="2240" pos:column="33">{
	<case pos:line="2241" pos:column="9">case <expr><name pos:line="2241" pos:column="14">SB_LINEUP</name></expr>:
		<expr_stmt><expr><name pos:line="2242" pos:column="17">xPos</name> <op:operator pos:line="2242" pos:column="22">-=</op:operator> <lit:literal type="number" pos:line="2242" pos:column="25">20</lit:literal></expr>;</expr_stmt>
		<break pos:line="2243" pos:column="17">break;</break>
	</case><case pos:line="2244" pos:column="9">case <expr><name pos:line="2244" pos:column="14">SB_LINEDOWN</name></expr>:	<comment type="line" pos:line="2244" pos:column="33">// May move past the logical end</comment>
		<expr_stmt><expr><name pos:line="2245" pos:column="17">xPos</name> <op:operator pos:line="2245" pos:column="22">+=</op:operator> <lit:literal type="number" pos:line="2245" pos:column="25">20</lit:literal></expr>;</expr_stmt>
		<break pos:line="2246" pos:column="17">break;</break>
	</case><case pos:line="2247" pos:column="9">case <expr><name pos:line="2247" pos:column="14">SB_PAGEUP</name></expr>:
		<expr_stmt><expr><name pos:line="2248" pos:column="17">xPos</name> <op:operator pos:line="2248" pos:column="22">-=</op:operator> <name pos:line="2248" pos:column="25">pageWidth</name></expr>;</expr_stmt>
		<break pos:line="2249" pos:column="17">break;</break>
	</case><case pos:line="2250" pos:column="9">case <expr><name pos:line="2250" pos:column="14">SB_PAGEDOWN</name></expr>:
		<expr_stmt><expr><name pos:line="2251" pos:column="17">xPos</name> <op:operator pos:line="2251" pos:column="22">+=</op:operator> <name pos:line="2251" pos:column="25">pageWidth</name></expr>;</expr_stmt>
		<if pos:line="2252" pos:column="17">if <condition pos:line="2252" pos:column="20">(<expr><name pos:line="2252" pos:column="21">xPos</name> <op:operator pos:line="2252" pos:column="26">&gt;</op:operator> <name pos:line="2252" pos:column="28">scrollWidth</name> <op:operator pos:line="2252" pos:column="40">-</op:operator> <call><name><name pos:line="2252" pos:column="42">rcText</name><op:operator pos:line="2252" pos:column="48">.</op:operator><name pos:line="2252" pos:column="49">Width</name></name><argument_list pos:line="2252" pos:column="54">()</argument_list></call></expr>)</condition><then pos:line="2252" pos:column="57"> <block pos:line="2252" pos:column="58">{	<comment type="line" pos:line="2252" pos:column="65">// Hit the end exactly</comment>
			<expr_stmt><expr><name pos:line="2253" pos:column="25">xPos</name> <op:operator pos:line="2253" pos:column="30">=</op:operator> <name pos:line="2253" pos:column="32">scrollWidth</name> <op:operator pos:line="2253" pos:column="44">-</op:operator> <call><name><name pos:line="2253" pos:column="46">rcText</name><op:operator pos:line="2253" pos:column="52">.</op:operator><name pos:line="2253" pos:column="53">Width</name></name><argument_list pos:line="2253" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<break pos:line="2255" pos:column="17">break;</break>
	</case><case pos:line="2256" pos:column="9">case <expr><name pos:line="2256" pos:column="14">SB_TOP</name></expr>:
		<expr_stmt><expr><name pos:line="2257" pos:column="17">xPos</name> <op:operator pos:line="2257" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="2257" pos:column="24">0</lit:literal></expr>;</expr_stmt>
		<break pos:line="2258" pos:column="17">break;</break>
	</case><case pos:line="2259" pos:column="9">case <expr><name pos:line="2259" pos:column="14">SB_BOTTOM</name></expr>:
		<expr_stmt><expr><name pos:line="2260" pos:column="17">xPos</name> <op:operator pos:line="2260" pos:column="22">=</op:operator> <name pos:line="2260" pos:column="24">scrollWidth</name></expr>;</expr_stmt>
		<break pos:line="2261" pos:column="17">break;</break>
	</case><case pos:line="2262" pos:column="9">case <expr><name pos:line="2262" pos:column="14">SB_THUMBPOSITION</name></expr>:
	</case><case pos:line="2263" pos:column="9">case <expr><name pos:line="2263" pos:column="14">SB_THUMBTRACK</name></expr>: <block pos:line="2263" pos:column="29">{
			<comment type="line" pos:line="2264" pos:column="25">// Do NOT use wParam, its 16 bit and not enough for very long lines. Its still possible to overflow the 32 bit but you have to try harder =]</comment>
			<decl_stmt><decl><type><name pos:line="2265" pos:column="25">SCROLLINFO</name></type> <name pos:line="2265" pos:column="36">si</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="2266" pos:column="25">si</name><op:operator pos:line="2266" pos:column="27">.</op:operator><name pos:line="2266" pos:column="28">cbSize</name></name> <op:operator pos:line="2266" pos:column="35">=</op:operator> <sizeof pos:line="2266" pos:column="37">sizeof<argument_list pos:line="2266" pos:column="43">(<argument><expr><name pos:line="2266" pos:column="44">si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2267" pos:column="25">si</name><op:operator pos:line="2267" pos:column="27">.</op:operator><name pos:line="2267" pos:column="28">fMask</name></name> <op:operator pos:line="2267" pos:column="34">=</op:operator> <name pos:line="2267" pos:column="36">SIF_TRACKPOS</name></expr>;</expr_stmt>
			<if pos:line="2268" pos:column="25">if <condition pos:line="2268" pos:column="28">(<expr><call><name pos:line="2268" pos:column="29">GetScrollInfo</name><argument_list pos:line="2268" pos:column="42">(<argument><expr><name pos:line="2268" pos:column="43">SB_HORZ</name></expr></argument>, <argument><expr><op:operator pos:line="2268" pos:column="52">&amp;</op:operator><name pos:line="2268" pos:column="53">si</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2268" pos:column="57"> <block pos:line="2268" pos:column="58">{
				<expr_stmt><expr><name pos:line="2269" pos:column="33">xPos</name> <op:operator pos:line="2269" pos:column="38">=</op:operator> <name><name pos:line="2269" pos:column="40">si</name><op:operator pos:line="2269" pos:column="42">.</op:operator><name pos:line="2269" pos:column="43">nTrackPos</name></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
		<break pos:line="2272" pos:column="17">break;</break>
	</case>}</block></switch>
	<expr_stmt><expr><call><name pos:line="2274" pos:column="9">HorizontalScrollTo</name><argument_list pos:line="2274" pos:column="27">(<argument><expr><name pos:line="2274" pos:column="28">xPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2277" pos:column="1">void</name></type> <name><name pos:line="2277" pos:column="6">ScintillaWin</name><op:operator pos:line="2277" pos:column="18">::</op:operator><name pos:line="2277" pos:column="20">RealizeWindowPalette</name></name><parameter_list pos:line="2277" pos:column="40">(<param><decl><type><name pos:line="2277" pos:column="41">bool</name></type> <name pos:line="2277" pos:column="46">inBackGround</name></decl></param>)</parameter_list> <block pos:line="2277" pos:column="60">{
	<expr_stmt><expr><call><name pos:line="2278" pos:column="9">RefreshStyleData</name><argument_list pos:line="2278" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2279" pos:column="9">HDC</name></type> <name pos:line="2279" pos:column="13">hdc</name> <init pos:line="2279" pos:column="17">= <expr><call><name><op:operator pos:line="2279" pos:column="19">::</op:operator><name pos:line="2279" pos:column="21">GetDC</name></name><argument_list pos:line="2279" pos:column="26">(<argument><expr><call><name pos:line="2279" pos:column="27">MainHWND</name><argument_list pos:line="2279" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="2280" pos:column="9">// Select a stock font to prevent warnings from BoundsChecker</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="2281" pos:column="9">::</op:operator><name pos:line="2281" pos:column="11">SelectObject</name></name><argument_list pos:line="2281" pos:column="23">(<argument><expr><name pos:line="2281" pos:column="24">hdc</name></expr></argument>, <argument><expr><call><name pos:line="2281" pos:column="29">GetStockFont</name><argument_list pos:line="2281" pos:column="41">(<argument><expr><name pos:line="2281" pos:column="42">DEFAULT_GUI_FONT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<function_decl><type><name pos:line="2282" pos:column="9">AutoSurface</name></type> <name pos:line="2282" pos:column="21">surfaceWindow</name><parameter_list pos:line="2282" pos:column="34">(<param><decl><type><name pos:line="2282" pos:column="35">hdc</name></type></decl></param>, <param><decl><type><name pos:line="2282" pos:column="40">this</name></type></decl></param>)</parameter_list>;</function_decl>
	<if pos:line="2283" pos:column="9">if <condition pos:line="2283" pos:column="12">(<expr><name pos:line="2283" pos:column="13">surfaceWindow</name></expr>)</condition><then pos:line="2283" pos:column="27"> <block pos:line="2283" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="2284" pos:column="17">int</name></type> <name pos:line="2284" pos:column="21">changes</name> <init pos:line="2284" pos:column="29">= <expr><call><name><name pos:line="2284" pos:column="31">surfaceWindow</name><op:operator pos:line="2284" pos:column="44">-&gt;</op:operator><name pos:line="2284" pos:column="46">SetPalette</name></name><argument_list pos:line="2284" pos:column="56">(<argument><expr><op:operator pos:line="2284" pos:column="57">&amp;</op:operator><name pos:line="2284" pos:column="58">palette</name></expr></argument>, <argument><expr><name pos:line="2284" pos:column="67">inBackGround</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2285" pos:column="17">if <condition pos:line="2285" pos:column="20">(<expr><name pos:line="2285" pos:column="21">changes</name> <op:operator pos:line="2285" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="2285" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="2285" pos:column="33">
			<expr_stmt><expr><call><name pos:line="2286" pos:column="25">Redraw</name><argument_list pos:line="2286" pos:column="31">()</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name><name pos:line="2287" pos:column="17">surfaceWindow</name><op:operator pos:line="2287" pos:column="30">-&gt;</op:operator><name pos:line="2287" pos:column="32">Release</name></name><argument_list pos:line="2287" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="2289" pos:column="9">::</op:operator><name pos:line="2289" pos:column="11">ReleaseDC</name></name><argument_list pos:line="2289" pos:column="20">(<argument><expr><call><name pos:line="2289" pos:column="21">MainHWND</name><argument_list pos:line="2289" pos:column="29">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2289" pos:column="33">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" pos:line="2292" pos:column="1">/**
 * Redraw all of text area.
 * This paint will not be abandoned.
 */</comment>
<function><type><name pos:line="2296" pos:column="1">void</name></type> <name><name pos:line="2296" pos:column="6">ScintillaWin</name><op:operator pos:line="2296" pos:column="18">::</op:operator><name pos:line="2296" pos:column="20">FullPaint</name></name><parameter_list pos:line="2296" pos:column="29">()</parameter_list> <block pos:line="2296" pos:column="32">{
	<decl_stmt><decl><type><name pos:line="2297" pos:column="9">HDC</name></type> <name pos:line="2297" pos:column="13">hdc</name> <init pos:line="2297" pos:column="17">= <expr><call><name><op:operator pos:line="2297" pos:column="19">::</op:operator><name pos:line="2297" pos:column="21">GetDC</name></name><argument_list pos:line="2297" pos:column="26">(<argument><expr><call><name pos:line="2297" pos:column="27">MainHWND</name><argument_list pos:line="2297" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2298" pos:column="9">FullPaintDC</name><argument_list pos:line="2298" pos:column="20">(<argument><expr><name pos:line="2298" pos:column="21">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="2299" pos:column="9">::</op:operator><name pos:line="2299" pos:column="11">ReleaseDC</name></name><argument_list pos:line="2299" pos:column="20">(<argument><expr><call><name pos:line="2299" pos:column="21">MainHWND</name><argument_list pos:line="2299" pos:column="29">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2299" pos:column="33">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen" pos:line="2302" pos:column="1">/**
 * Redraw all of text area on the specified DC.
 * This paint will not be abandoned.
 */</comment>
<function><type><name pos:line="2306" pos:column="1">void</name></type> <name><name pos:line="2306" pos:column="6">ScintillaWin</name><op:operator pos:line="2306" pos:column="18">::</op:operator><name pos:line="2306" pos:column="20">FullPaintDC</name></name><parameter_list pos:line="2306" pos:column="31">(<param><decl><type><name pos:line="2306" pos:column="32">HDC</name></type> <name pos:line="2306" pos:column="36">hdc</name></decl></param>)</parameter_list> <block pos:line="2306" pos:column="41">{
	<expr_stmt><expr><name pos:line="2307" pos:column="9">paintState</name> <op:operator pos:line="2307" pos:column="20">=</op:operator> <name pos:line="2307" pos:column="22">painting</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2308" pos:column="9">rcPaint</name> <op:operator pos:line="2308" pos:column="17">=</op:operator> <call><name pos:line="2308" pos:column="19">GetClientRectangle</name><argument_list pos:line="2308" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2309" pos:column="9">paintingAllText</name> <op:operator pos:line="2309" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="2309" pos:column="27">true</lit:literal></expr>;</expr_stmt>
	<function_decl><type><name pos:line="2310" pos:column="9">AutoSurface</name></type> <name pos:line="2310" pos:column="21">surfaceWindow</name><parameter_list pos:line="2310" pos:column="34">(<param><decl><type><name pos:line="2310" pos:column="35">hdc</name></type></decl></param>, <param><decl><type><name pos:line="2310" pos:column="40">this</name></type></decl></param>)</parameter_list>;</function_decl>
	<if pos:line="2311" pos:column="9">if <condition pos:line="2311" pos:column="12">(<expr><name pos:line="2311" pos:column="13">surfaceWindow</name></expr>)</condition><then pos:line="2311" pos:column="27"> <block pos:line="2311" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="2312" pos:column="17">Paint</name><argument_list pos:line="2312" pos:column="22">(<argument><expr><name pos:line="2312" pos:column="23">surfaceWindow</name></expr></argument>, <argument><expr><name pos:line="2312" pos:column="38">rcPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="2313" pos:column="17">surfaceWindow</name><op:operator pos:line="2313" pos:column="30">-&gt;</op:operator><name pos:line="2313" pos:column="32">Release</name></name><argument_list pos:line="2313" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="2315" pos:column="9">paintState</name> <op:operator pos:line="2315" pos:column="20">=</op:operator> <name pos:line="2315" pos:column="22">notPainting</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="2318" pos:column="1">static</specifier> <name pos:line="2318" pos:column="8">bool</name></type> <name pos:line="2318" pos:column="13">CompareDevCap</name><parameter_list pos:line="2318" pos:column="26">(<param><decl><type><name pos:line="2318" pos:column="27">HDC</name></type> <name pos:line="2318" pos:column="31">hdc</name></decl></param>, <param><decl><type><name pos:line="2318" pos:column="36">HDC</name></type> <name pos:line="2318" pos:column="40">hOtherDC</name></decl></param>, <param><decl><type><name pos:line="2318" pos:column="50">int</name></type> <name pos:line="2318" pos:column="54">nIndex</name></decl></param>)</parameter_list> <block pos:line="2318" pos:column="62">{
	<return pos:line="2319" pos:column="9">return <expr><call><name><op:operator pos:line="2319" pos:column="16">::</op:operator><name pos:line="2319" pos:column="18">GetDeviceCaps</name></name><argument_list pos:line="2319" pos:column="31">(<argument><expr><name pos:line="2319" pos:column="32">hdc</name></expr></argument>, <argument><expr><name pos:line="2319" pos:column="37">nIndex</name></expr></argument>)</argument_list></call> <op:operator pos:line="2319" pos:column="45">==</op:operator> <call><name><op:operator pos:line="2319" pos:column="48">::</op:operator><name pos:line="2319" pos:column="50">GetDeviceCaps</name></name><argument_list pos:line="2319" pos:column="63">(<argument><expr><name pos:line="2319" pos:column="64">hOtherDC</name></expr></argument>, <argument><expr><name pos:line="2319" pos:column="74">nIndex</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2322" pos:column="1">bool</name></type> <name><name pos:line="2322" pos:column="6">ScintillaWin</name><op:operator pos:line="2322" pos:column="18">::</op:operator><name pos:line="2322" pos:column="20">IsCompatibleDC</name></name><parameter_list pos:line="2322" pos:column="34">(<param><decl><type><name pos:line="2322" pos:column="35">HDC</name></type> <name pos:line="2322" pos:column="39">hOtherDC</name></decl></param>)</parameter_list> <block pos:line="2322" pos:column="49">{
	<decl_stmt><decl><type><name pos:line="2323" pos:column="9">HDC</name></type> <name pos:line="2323" pos:column="13">hdc</name> <init pos:line="2323" pos:column="17">= <expr><call><name><op:operator pos:line="2323" pos:column="19">::</op:operator><name pos:line="2323" pos:column="21">GetDC</name></name><argument_list pos:line="2323" pos:column="26">(<argument><expr><call><name pos:line="2323" pos:column="27">MainHWND</name><argument_list pos:line="2323" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2324" pos:column="9">bool</name></type> <name pos:line="2324" pos:column="14">isCompatible</name> <init pos:line="2324" pos:column="27">=
		<expr><call><name pos:line="2325" pos:column="17">CompareDevCap</name><argument_list pos:line="2325" pos:column="30">(<argument><expr><name pos:line="2325" pos:column="31">hdc</name></expr></argument>, <argument><expr><name pos:line="2325" pos:column="36">hOtherDC</name></expr></argument>, <argument><expr><name pos:line="2325" pos:column="46">TECHNOLOGY</name></expr></argument>)</argument_list></call> <op:operator pos:line="2325" pos:column="58">&amp;&amp;</op:operator>
		<call><name pos:line="2326" pos:column="17">CompareDevCap</name><argument_list pos:line="2326" pos:column="30">(<argument><expr><name pos:line="2326" pos:column="31">hdc</name></expr></argument>, <argument><expr><name pos:line="2326" pos:column="36">hOtherDC</name></expr></argument>, <argument><expr><name pos:line="2326" pos:column="46">LOGPIXELSY</name></expr></argument>)</argument_list></call> <op:operator pos:line="2326" pos:column="58">&amp;&amp;</op:operator>
		<call><name pos:line="2327" pos:column="17">CompareDevCap</name><argument_list pos:line="2327" pos:column="30">(<argument><expr><name pos:line="2327" pos:column="31">hdc</name></expr></argument>, <argument><expr><name pos:line="2327" pos:column="36">hOtherDC</name></expr></argument>, <argument><expr><name pos:line="2327" pos:column="46">LOGPIXELSX</name></expr></argument>)</argument_list></call> <op:operator pos:line="2327" pos:column="58">&amp;&amp;</op:operator>
		<call><name pos:line="2328" pos:column="17">CompareDevCap</name><argument_list pos:line="2328" pos:column="30">(<argument><expr><name pos:line="2328" pos:column="31">hdc</name></expr></argument>, <argument><expr><name pos:line="2328" pos:column="36">hOtherDC</name></expr></argument>, <argument><expr><name pos:line="2328" pos:column="46">BITSPIXEL</name></expr></argument>)</argument_list></call> <op:operator pos:line="2328" pos:column="57">&amp;&amp;</op:operator>
		<call><name pos:line="2329" pos:column="17">CompareDevCap</name><argument_list pos:line="2329" pos:column="30">(<argument><expr><name pos:line="2329" pos:column="31">hdc</name></expr></argument>, <argument><expr><name pos:line="2329" pos:column="36">hOtherDC</name></expr></argument>, <argument><expr><name pos:line="2329" pos:column="46">PLANES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="2330" pos:column="9">::</op:operator><name pos:line="2330" pos:column="11">ReleaseDC</name></name><argument_list pos:line="2330" pos:column="20">(<argument><expr><call><name pos:line="2330" pos:column="21">MainHWND</name><argument_list pos:line="2330" pos:column="29">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2330" pos:column="33">hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="2331" pos:column="9">return <expr><name pos:line="2331" pos:column="16">isCompatible</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2334" pos:column="1">DWORD</name></type> <name><name pos:line="2334" pos:column="7">ScintillaWin</name><op:operator pos:line="2334" pos:column="19">::</op:operator><name pos:line="2334" pos:column="21">EffectFromState</name></name><parameter_list pos:line="2334" pos:column="36">(<param><decl><type><name pos:line="2334" pos:column="37">DWORD</name></type> <name pos:line="2334" pos:column="43">grfKeyState</name></decl></param>)</parameter_list> <block pos:line="2334" pos:column="56">{
	<comment type="line" pos:line="2335" pos:column="9">// These are the Wordpad semantics.</comment>
	<decl_stmt><decl><type><name pos:line="2336" pos:column="9">DWORD</name></type> <name pos:line="2336" pos:column="15">dwEffect</name></decl>;</decl_stmt>
	<if pos:line="2337" pos:column="9">if <condition pos:line="2337" pos:column="12">(<expr><name pos:line="2337" pos:column="13">inDragDrop</name> <op:operator pos:line="2337" pos:column="24">==</op:operator> <name pos:line="2337" pos:column="27">ddDragging</name></expr>)</condition><then pos:line="2337" pos:column="38">	<comment type="line" pos:line="2337" pos:column="41">// Internal defaults to move</comment>
		<expr_stmt><expr><name pos:line="2338" pos:column="17">dwEffect</name> <op:operator pos:line="2338" pos:column="26">=</op:operator> <name pos:line="2338" pos:column="28">DROPEFFECT_MOVE</name></expr>;</expr_stmt></then>
	<else pos:line="2339" pos:column="9">else
		<expr_stmt><expr><name pos:line="2340" pos:column="17">dwEffect</name> <op:operator pos:line="2340" pos:column="26">=</op:operator> <name pos:line="2340" pos:column="28">DROPEFFECT_COPY</name></expr>;</expr_stmt></else></if>
	<if pos:line="2341" pos:column="9">if <condition pos:line="2341" pos:column="12">(<expr><name pos:line="2341" pos:column="13">grfKeyState</name> <op:operator pos:line="2341" pos:column="25">&amp;</op:operator> <name pos:line="2341" pos:column="27">MK_ALT</name></expr>)</condition><then pos:line="2341" pos:column="34">
		<expr_stmt><expr><name pos:line="2342" pos:column="17">dwEffect</name> <op:operator pos:line="2342" pos:column="26">=</op:operator> <name pos:line="2342" pos:column="28">DROPEFFECT_MOVE</name></expr>;</expr_stmt></then></if>
	<if pos:line="2343" pos:column="9">if <condition pos:line="2343" pos:column="12">(<expr><name pos:line="2343" pos:column="13">grfKeyState</name> <op:operator pos:line="2343" pos:column="25">&amp;</op:operator> <name pos:line="2343" pos:column="27">MK_CONTROL</name></expr>)</condition><then pos:line="2343" pos:column="38">
		<expr_stmt><expr><name pos:line="2344" pos:column="17">dwEffect</name> <op:operator pos:line="2344" pos:column="26">=</op:operator> <name pos:line="2344" pos:column="28">DROPEFFECT_COPY</name></expr>;</expr_stmt></then></if>
	<return pos:line="2345" pos:column="9">return <expr><name pos:line="2345" pos:column="16">dwEffect</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="2348" pos:column="1">/// Implement IUnknown</comment>
<function><type><name pos:line="2349" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="2349" pos:column="14">ScintillaWin</name><op:operator pos:line="2349" pos:column="26">::</op:operator><name pos:line="2349" pos:column="28">QueryInterface</name></name><parameter_list pos:line="2349" pos:column="42">(<param><decl><type><name pos:line="2349" pos:column="43">REFIID</name></type> <name pos:line="2349" pos:column="50">riid</name></decl></param>, <param><decl><type><name pos:line="2349" pos:column="56">PVOID</name> <type:modifier pos:line="2349" pos:column="62">*</type:modifier></type><name pos:line="2349" pos:column="63">ppv</name></decl></param>)</parameter_list> <block pos:line="2349" pos:column="68">{
	<expr_stmt><expr><op:operator pos:line="2350" pos:column="9">*</op:operator><name pos:line="2350" pos:column="10">ppv</name> <op:operator pos:line="2350" pos:column="14">=</op:operator> <name pos:line="2350" pos:column="16">NULL</name></expr>;</expr_stmt>
	<if pos:line="2351" pos:column="9">if <condition pos:line="2351" pos:column="12">(<expr><name pos:line="2351" pos:column="13">riid</name> <op:operator pos:line="2351" pos:column="18">==</op:operator> <name pos:line="2351" pos:column="21">IID_IUnknown</name></expr>)</condition><then pos:line="2351" pos:column="34">
		<expr_stmt><expr><op:operator pos:line="2352" pos:column="17">*</op:operator><name pos:line="2352" pos:column="18">ppv</name> <op:operator pos:line="2352" pos:column="22">=</op:operator> <call><name><name pos:line="2352" pos:column="24">reinterpret_cast</name><argument_list pos:line="2352" pos:column="40">&lt;<argument><expr><name pos:line="2352" pos:column="41">IDropTarget</name> <op:operator pos:line="2352" pos:column="53">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2352" pos:column="55">(<argument><expr><op:operator pos:line="2352" pos:column="56">&amp;</op:operator><name pos:line="2352" pos:column="57">dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="2353" pos:column="9">if <condition pos:line="2353" pos:column="12">(<expr><name pos:line="2353" pos:column="13">riid</name> <op:operator pos:line="2353" pos:column="18">==</op:operator> <name pos:line="2353" pos:column="21">IID_IDropSource</name></expr>)</condition><then pos:line="2353" pos:column="37">
		<expr_stmt><expr><op:operator pos:line="2354" pos:column="17">*</op:operator><name pos:line="2354" pos:column="18">ppv</name> <op:operator pos:line="2354" pos:column="22">=</op:operator> <call><name><name pos:line="2354" pos:column="24">reinterpret_cast</name><argument_list pos:line="2354" pos:column="40">&lt;<argument><expr><name pos:line="2354" pos:column="41">IDropSource</name> <op:operator pos:line="2354" pos:column="53">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2354" pos:column="55">(<argument><expr><op:operator pos:line="2354" pos:column="56">&amp;</op:operator><name pos:line="2354" pos:column="57">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="2355" pos:column="9">if <condition pos:line="2355" pos:column="12">(<expr><name pos:line="2355" pos:column="13">riid</name> <op:operator pos:line="2355" pos:column="18">==</op:operator> <name pos:line="2355" pos:column="21">IID_IDropTarget</name></expr>)</condition><then pos:line="2355" pos:column="37">
		<expr_stmt><expr><op:operator pos:line="2356" pos:column="17">*</op:operator><name pos:line="2356" pos:column="18">ppv</name> <op:operator pos:line="2356" pos:column="22">=</op:operator> <call><name><name pos:line="2356" pos:column="24">reinterpret_cast</name><argument_list pos:line="2356" pos:column="40">&lt;<argument><expr><name pos:line="2356" pos:column="41">IDropTarget</name> <op:operator pos:line="2356" pos:column="53">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2356" pos:column="55">(<argument><expr><op:operator pos:line="2356" pos:column="56">&amp;</op:operator><name pos:line="2356" pos:column="57">dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="2357" pos:column="9">if <condition pos:line="2357" pos:column="12">(<expr><name pos:line="2357" pos:column="13">riid</name> <op:operator pos:line="2357" pos:column="18">==</op:operator> <name pos:line="2357" pos:column="21">IID_IDataObject</name></expr>)</condition><then pos:line="2357" pos:column="37">
		<expr_stmt><expr><op:operator pos:line="2358" pos:column="17">*</op:operator><name pos:line="2358" pos:column="18">ppv</name> <op:operator pos:line="2358" pos:column="22">=</op:operator> <call><name><name pos:line="2358" pos:column="24">reinterpret_cast</name><argument_list pos:line="2358" pos:column="40">&lt;<argument><expr><name pos:line="2358" pos:column="41">IDataObject</name> <op:operator pos:line="2358" pos:column="53">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2358" pos:column="55">(<argument><expr><op:operator pos:line="2358" pos:column="56">&amp;</op:operator><name pos:line="2358" pos:column="57">dob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="2359" pos:column="9">if <condition pos:line="2359" pos:column="12">(<expr><op:operator pos:line="2359" pos:column="13">!</op:operator><op:operator pos:line="2359" pos:column="14">*</op:operator><name pos:line="2359" pos:column="15">ppv</name></expr>)</condition><then pos:line="2359" pos:column="19">
		<return pos:line="2360" pos:column="17">return <expr><name pos:line="2360" pos:column="24">E_NOINTERFACE</name></expr>;</return></then></if>
	<return pos:line="2361" pos:column="9">return <expr><name pos:line="2361" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<macro><name pos:line="2364" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="2364" pos:column="14">(<argument pos:line="2364" pos:column="15">ULONG</argument>)</argument_list></macro> <macro><name pos:line="2364" pos:column="22">ScintillaWin</name></macro><expr_stmt><expr><name><op:operator pos:line="2364" pos:column="34">::</op:operator><name pos:line="2364" pos:column="36">AddRef</name></name><op:operator pos:line="2364" pos:column="42">(</op:operator><op:operator pos:line="2364" pos:column="43">)</op:operator> <block pos:line="2364" pos:column="45">{
	<return pos:line="2365" pos:column="9">return <expr><lit:literal type="number" pos:line="2365" pos:column="16">1</lit:literal></expr>;</return>
}</block></expr></expr_stmt>

<macro><name pos:line="2368" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="2368" pos:column="14">(<argument pos:line="2368" pos:column="15">ULONG</argument>)</argument_list></macro> <macro><name pos:line="2368" pos:column="22">ScintillaWin</name></macro><expr_stmt><expr><name><op:operator pos:line="2368" pos:column="34">::</op:operator><name pos:line="2368" pos:column="36">Release</name></name><op:operator pos:line="2368" pos:column="43">(</op:operator><op:operator pos:line="2368" pos:column="44">)</op:operator> <block pos:line="2368" pos:column="46">{
	<return pos:line="2369" pos:column="9">return <expr><lit:literal type="number" pos:line="2369" pos:column="16">1</lit:literal></expr>;</return>
}</block></expr></expr_stmt>

<comment type="line" format="doxygen" pos:line="2372" pos:column="1">/// Implement IDropTarget</comment>
<function><type><name pos:line="2373" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="2373" pos:column="14">ScintillaWin</name><op:operator pos:line="2373" pos:column="26">::</op:operator><name pos:line="2373" pos:column="28">DragEnter</name></name><parameter_list pos:line="2373" pos:column="37">(<param><decl><type><name pos:line="2373" pos:column="38">LPDATAOBJECT</name></type> <name pos:line="2373" pos:column="51">pIDataSource</name></decl></param>, <param><decl><type><name pos:line="2373" pos:column="65">DWORD</name></type> <name pos:line="2373" pos:column="71">grfKeyState</name></decl></param>,
                                     <param><decl><type><name pos:line="2374" pos:column="38">POINTL</name></type></decl></param>, <param><decl><type><name pos:line="2374" pos:column="46">PDWORD</name></type> <name pos:line="2374" pos:column="53">pdwEffect</name></decl></param>)</parameter_list> <block pos:line="2374" pos:column="64">{
	<if pos:line="2375" pos:column="9">if <condition pos:line="2375" pos:column="12">(<expr><name pos:line="2375" pos:column="13">pIDataSource</name> <op:operator pos:line="2375" pos:column="26">==</op:operator> <name pos:line="2375" pos:column="29">NULL</name></expr>)</condition><then pos:line="2375" pos:column="34">
		<return pos:line="2376" pos:column="17">return <expr><name pos:line="2376" pos:column="24">E_POINTER</name></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="2377" pos:column="9">FORMATETC</name></type> <name pos:line="2377" pos:column="19">fmtu</name> <init pos:line="2377" pos:column="24">= <expr><block pos:line="2377" pos:column="26">{<expr><name pos:line="2377" pos:column="27">CF_UNICODETEXT</name></expr>, <expr><name pos:line="2377" pos:column="43">NULL</name></expr>, <expr><name pos:line="2377" pos:column="49">DVASPECT_CONTENT</name></expr>, <expr><op:operator pos:line="2377" pos:column="67">-</op:operator><lit:literal type="number" pos:line="2377" pos:column="68">1</lit:literal></expr>, <expr><name pos:line="2377" pos:column="71">TYMED_HGLOBAL</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2378" pos:column="9">HRESULT</name></type> <name pos:line="2378" pos:column="17">hrHasUText</name> <init pos:line="2378" pos:column="28">= <expr><call><name><name pos:line="2378" pos:column="30">pIDataSource</name><op:operator pos:line="2378" pos:column="42">-&gt;</op:operator><name pos:line="2378" pos:column="44">QueryGetData</name></name><argument_list pos:line="2378" pos:column="56">(<argument><expr><op:operator pos:line="2378" pos:column="57">&amp;</op:operator><name pos:line="2378" pos:column="58">fmtu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2379" pos:column="9">hasOKText</name> <op:operator pos:line="2379" pos:column="19">=</op:operator> <op:operator pos:line="2379" pos:column="21">(</op:operator><name pos:line="2379" pos:column="22">hrHasUText</name> <op:operator pos:line="2379" pos:column="33">==</op:operator> <name pos:line="2379" pos:column="36">S_OK</name><op:operator pos:line="2379" pos:column="40">)</op:operator></expr>;</expr_stmt>
	<if pos:line="2380" pos:column="9">if <condition pos:line="2380" pos:column="12">(<expr><op:operator pos:line="2380" pos:column="13">!</op:operator><name pos:line="2380" pos:column="14">hasOKText</name></expr>)</condition><then pos:line="2380" pos:column="24"> <block pos:line="2380" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="2381" pos:column="17">FORMATETC</name></type> <name pos:line="2381" pos:column="27">fmte</name> <init pos:line="2381" pos:column="32">= <expr><block pos:line="2381" pos:column="34">{<expr><name pos:line="2381" pos:column="35">CF_TEXT</name></expr>, <expr><name pos:line="2381" pos:column="44">NULL</name></expr>, <expr><name pos:line="2381" pos:column="50">DVASPECT_CONTENT</name></expr>, <expr><op:operator pos:line="2381" pos:column="68">-</op:operator><lit:literal type="number" pos:line="2381" pos:column="69">1</lit:literal></expr>, <expr><name pos:line="2381" pos:column="72">TYMED_HGLOBAL</name></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2382" pos:column="17">HRESULT</name></type> <name pos:line="2382" pos:column="25">hrHasText</name> <init pos:line="2382" pos:column="35">= <expr><call><name><name pos:line="2382" pos:column="37">pIDataSource</name><op:operator pos:line="2382" pos:column="49">-&gt;</op:operator><name pos:line="2382" pos:column="51">QueryGetData</name></name><argument_list pos:line="2382" pos:column="63">(<argument><expr><op:operator pos:line="2382" pos:column="64">&amp;</op:operator><name pos:line="2382" pos:column="65">fmte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2383" pos:column="17">hasOKText</name> <op:operator pos:line="2383" pos:column="27">=</op:operator> <op:operator pos:line="2383" pos:column="29">(</op:operator><name pos:line="2383" pos:column="30">hrHasText</name> <op:operator pos:line="2383" pos:column="40">==</op:operator> <name pos:line="2383" pos:column="43">S_OK</name><op:operator pos:line="2383" pos:column="47">)</op:operator></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="2385" pos:column="9">if <condition pos:line="2385" pos:column="12">(<expr><op:operator pos:line="2385" pos:column="13">!</op:operator><name pos:line="2385" pos:column="14">hasOKText</name></expr>)</condition><then pos:line="2385" pos:column="24"> <block pos:line="2385" pos:column="25">{
		<expr_stmt><expr><op:operator pos:line="2386" pos:column="17">*</op:operator><name pos:line="2386" pos:column="18">pdwEffect</name> <op:operator pos:line="2386" pos:column="28">=</op:operator> <name pos:line="2386" pos:column="30">DROPEFFECT_NONE</name></expr>;</expr_stmt>
		<return pos:line="2387" pos:column="17">return <expr><name pos:line="2387" pos:column="24">S_OK</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><op:operator pos:line="2390" pos:column="9">*</op:operator><name pos:line="2390" pos:column="10">pdwEffect</name> <op:operator pos:line="2390" pos:column="20">=</op:operator> <call><name pos:line="2390" pos:column="22">EffectFromState</name><argument_list pos:line="2390" pos:column="37">(<argument><expr><name pos:line="2390" pos:column="38">grfKeyState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="2391" pos:column="9">return <expr><name pos:line="2391" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2394" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="2394" pos:column="14">ScintillaWin</name><op:operator pos:line="2394" pos:column="26">::</op:operator><name pos:line="2394" pos:column="28">DragOver</name></name><parameter_list pos:line="2394" pos:column="36">(<param><decl><type><name pos:line="2394" pos:column="37">DWORD</name></type> <name pos:line="2394" pos:column="43">grfKeyState</name></decl></param>, <param><decl><type><name pos:line="2394" pos:column="56">POINTL</name></type> <name pos:line="2394" pos:column="63">pt</name></decl></param>, <param><decl><type><name pos:line="2394" pos:column="67">PDWORD</name></type> <name pos:line="2394" pos:column="74">pdwEffect</name></decl></param>)</parameter_list> <block pos:line="2394" pos:column="85">{
	<try pos:line="2395" pos:column="9">try <block pos:line="2395" pos:column="13">{
		<if pos:line="2396" pos:column="17">if <condition pos:line="2396" pos:column="20">(<expr><op:operator pos:line="2396" pos:column="21">!</op:operator><name pos:line="2396" pos:column="22">hasOKText</name> <op:operator pos:line="2396" pos:column="32">||</op:operator> <call><name><name pos:line="2396" pos:column="35">pdoc</name><op:operator pos:line="2396" pos:column="39">-&gt;</op:operator><name pos:line="2396" pos:column="41">IsReadOnly</name></name><argument_list pos:line="2396" pos:column="51">()</argument_list></call></expr>)</condition><then pos:line="2396" pos:column="54"> <block pos:line="2396" pos:column="55">{
			<expr_stmt><expr><op:operator pos:line="2397" pos:column="25">*</op:operator><name pos:line="2397" pos:column="26">pdwEffect</name> <op:operator pos:line="2397" pos:column="36">=</op:operator> <name pos:line="2397" pos:column="38">DROPEFFECT_NONE</name></expr>;</expr_stmt>
			<return pos:line="2398" pos:column="25">return <expr><name pos:line="2398" pos:column="32">S_OK</name></expr>;</return>
		}</block></then></if>

		<expr_stmt><expr><op:operator pos:line="2401" pos:column="17">*</op:operator><name pos:line="2401" pos:column="18">pdwEffect</name> <op:operator pos:line="2401" pos:column="28">=</op:operator> <call><name pos:line="2401" pos:column="30">EffectFromState</name><argument_list pos:line="2401" pos:column="45">(<argument><expr><name pos:line="2401" pos:column="46">grfKeyState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="2403" pos:column="17">// Update the cursor.</comment>
		<decl_stmt><decl><type><name pos:line="2404" pos:column="17">POINT</name></type> <name pos:line="2404" pos:column="23">rpt</name> <init pos:line="2404" pos:column="27">= <expr><block pos:line="2404" pos:column="29">{<expr><name><name pos:line="2404" pos:column="30">pt</name><op:operator pos:line="2404" pos:column="32">.</op:operator><name pos:line="2404" pos:column="33">x</name></name></expr>, <expr><name><name pos:line="2404" pos:column="36">pt</name><op:operator pos:line="2404" pos:column="38">.</op:operator><name pos:line="2404" pos:column="39">y</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="2405" pos:column="17">::</op:operator><name pos:line="2405" pos:column="19">ScreenToClient</name></name><argument_list pos:line="2405" pos:column="33">(<argument><expr><call><name pos:line="2405" pos:column="34">MainHWND</name><argument_list pos:line="2405" pos:column="42">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2405" pos:column="46">&amp;</op:operator><name pos:line="2405" pos:column="47">rpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2406" pos:column="17">SetDragPosition</name><argument_list pos:line="2406" pos:column="32">(<argument><expr><call><name pos:line="2406" pos:column="33">SPositionFromLocation</name><argument_list pos:line="2406" pos:column="54">(<argument><expr><call><name pos:line="2406" pos:column="55">Point</name><argument_list pos:line="2406" pos:column="60">(<argument><expr><name><name pos:line="2406" pos:column="61">rpt</name><op:operator pos:line="2406" pos:column="64">.</op:operator><name pos:line="2406" pos:column="65">x</name></name></expr></argument>, <argument><expr><name><name pos:line="2406" pos:column="68">rpt</name><op:operator pos:line="2406" pos:column="71">.</op:operator><name pos:line="2406" pos:column="72">y</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2406" pos:column="76">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2406" pos:column="83">false</lit:literal></expr></argument>, <argument><expr><call><name pos:line="2406" pos:column="90">UserVirtualSpace</name><argument_list pos:line="2406" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:line="2408" pos:column="17">return <expr><name pos:line="2408" pos:column="24">S_OK</name></expr>;</return>
	}</block> <catch pos:line="2409" pos:column="11">catch <parameter_list pos:line="2409" pos:column="17">(<param><decl><type><type:modifier pos:line="2409" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2409" pos:column="23">{
		<expr_stmt><expr><name pos:line="2410" pos:column="17">errorStatus</name> <op:operator pos:line="2410" pos:column="29">=</op:operator> <name pos:line="2410" pos:column="31">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="2412" pos:column="9">return <expr><name pos:line="2412" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2415" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="2415" pos:column="14">ScintillaWin</name><op:operator pos:line="2415" pos:column="26">::</op:operator><name pos:line="2415" pos:column="28">DragLeave</name></name><parameter_list pos:line="2415" pos:column="37">()</parameter_list> <block pos:line="2415" pos:column="40">{
	<try pos:line="2416" pos:column="9">try <block pos:line="2416" pos:column="13">{
		<expr_stmt><expr><call><name pos:line="2417" pos:column="17">SetDragPosition</name><argument_list pos:line="2417" pos:column="32">(<argument><expr><call><name pos:line="2417" pos:column="33">SelectionPosition</name><argument_list pos:line="2417" pos:column="50">(<argument><expr><name pos:line="2417" pos:column="51">invalidPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="2418" pos:column="17">return <expr><name pos:line="2418" pos:column="24">S_OK</name></expr>;</return>
	}</block> <catch pos:line="2419" pos:column="11">catch <parameter_list pos:line="2419" pos:column="17">(<param><decl><type><type:modifier pos:line="2419" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2419" pos:column="23">{
		<expr_stmt><expr><name pos:line="2420" pos:column="17">errorStatus</name> <op:operator pos:line="2420" pos:column="29">=</op:operator> <name pos:line="2420" pos:column="31">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="2422" pos:column="9">return <expr><name pos:line="2422" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2425" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="2425" pos:column="14">ScintillaWin</name><op:operator pos:line="2425" pos:column="26">::</op:operator><name pos:line="2425" pos:column="28">Drop</name></name><parameter_list pos:line="2425" pos:column="32">(<param><decl><type><name pos:line="2425" pos:column="33">LPDATAOBJECT</name></type> <name pos:line="2425" pos:column="46">pIDataSource</name></decl></param>, <param><decl><type><name pos:line="2425" pos:column="60">DWORD</name></type> <name pos:line="2425" pos:column="66">grfKeyState</name></decl></param>,
                                <param><decl><type><name pos:line="2426" pos:column="33">POINTL</name></type> <name pos:line="2426" pos:column="40">pt</name></decl></param>, <param><decl><type><name pos:line="2426" pos:column="44">PDWORD</name></type> <name pos:line="2426" pos:column="51">pdwEffect</name></decl></param>)</parameter_list> <block pos:line="2426" pos:column="62">{
	<try pos:line="2427" pos:column="9">try <block pos:line="2427" pos:column="13">{
		<expr_stmt><expr><op:operator pos:line="2428" pos:column="17">*</op:operator><name pos:line="2428" pos:column="18">pdwEffect</name> <op:operator pos:line="2428" pos:column="28">=</op:operator> <call><name pos:line="2428" pos:column="30">EffectFromState</name><argument_list pos:line="2428" pos:column="45">(<argument><expr><name pos:line="2428" pos:column="46">grfKeyState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="2430" pos:column="17">if <condition pos:line="2430" pos:column="20">(<expr><name pos:line="2430" pos:column="21">pIDataSource</name> <op:operator pos:line="2430" pos:column="34">==</op:operator> <name pos:line="2430" pos:column="37">NULL</name></expr>)</condition><then pos:line="2430" pos:column="42">
			<return pos:line="2431" pos:column="25">return <expr><name pos:line="2431" pos:column="32">E_POINTER</name></expr>;</return></then></if>

		<expr_stmt><expr><call><name pos:line="2433" pos:column="17">SetDragPosition</name><argument_list pos:line="2433" pos:column="32">(<argument><expr><call><name pos:line="2433" pos:column="33">SelectionPosition</name><argument_list pos:line="2433" pos:column="50">(<argument><expr><name pos:line="2433" pos:column="51">invalidPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="2435" pos:column="17">STGMEDIUM</name></type> <name pos:line="2435" pos:column="27">medium</name> <init pos:line="2435" pos:column="34">= <expr><block pos:line="2435" pos:column="36">{<expr><lit:literal type="number" pos:line="2435" pos:column="37">0</lit:literal></expr>, <expr><block pos:line="2435" pos:column="40">{<expr><lit:literal type="number" pos:line="2435" pos:column="41">0</lit:literal></expr>}</block></expr>, <expr><lit:literal type="number" pos:line="2435" pos:column="45">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="2437" pos:column="17">char</name> <type:modifier pos:line="2437" pos:column="22">*</type:modifier></type><name pos:line="2437" pos:column="23">data</name> <init pos:line="2437" pos:column="28">= <expr><lit:literal type="number" pos:line="2437" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2438" pos:column="17">bool</name></type> <name pos:line="2438" pos:column="22">dataAllocated</name> <init pos:line="2438" pos:column="36">= <expr><lit:literal type="boolean" pos:line="2438" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="2440" pos:column="17">FORMATETC</name></type> <name pos:line="2440" pos:column="27">fmtu</name> <init pos:line="2440" pos:column="32">= <expr><block pos:line="2440" pos:column="34">{<expr><name pos:line="2440" pos:column="35">CF_UNICODETEXT</name></expr>, <expr><name pos:line="2440" pos:column="51">NULL</name></expr>, <expr><name pos:line="2440" pos:column="57">DVASPECT_CONTENT</name></expr>, <expr><op:operator pos:line="2440" pos:column="75">-</op:operator><lit:literal type="number" pos:line="2440" pos:column="76">1</lit:literal></expr>, <expr><name pos:line="2440" pos:column="79">TYMED_HGLOBAL</name></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2441" pos:column="17">HRESULT</name></type> <name pos:line="2441" pos:column="25">hr</name> <init pos:line="2441" pos:column="28">= <expr><call><name><name pos:line="2441" pos:column="30">pIDataSource</name><op:operator pos:line="2441" pos:column="42">-&gt;</op:operator><name pos:line="2441" pos:column="44">GetData</name></name><argument_list pos:line="2441" pos:column="51">(<argument><expr><op:operator pos:line="2441" pos:column="52">&amp;</op:operator><name pos:line="2441" pos:column="53">fmtu</name></expr></argument>, <argument><expr><op:operator pos:line="2441" pos:column="59">&amp;</op:operator><name pos:line="2441" pos:column="60">medium</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2442" pos:column="17">if <condition pos:line="2442" pos:column="20">(<expr><call><name pos:line="2442" pos:column="21">SUCCEEDED</name><argument_list pos:line="2442" pos:column="30">(<argument><expr><name pos:line="2442" pos:column="31">hr</name></expr></argument>)</argument_list></call> <op:operator pos:line="2442" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="2442" pos:column="38">medium</name><op:operator pos:line="2442" pos:column="44">.</op:operator><name pos:line="2442" pos:column="45">hGlobal</name></name></expr>)</condition><then pos:line="2442" pos:column="53"> <block pos:line="2442" pos:column="54">{
			<decl_stmt><decl><type><name pos:line="2443" pos:column="25">wchar_t</name> <type:modifier pos:line="2443" pos:column="33">*</type:modifier></type><name pos:line="2443" pos:column="34">udata</name> <init pos:line="2443" pos:column="40">= <expr><call><name><name pos:line="2443" pos:column="42">static_cast</name><argument_list pos:line="2443" pos:column="53">&lt;<argument><expr><name pos:line="2443" pos:column="54">wchar_t</name> <op:operator pos:line="2443" pos:column="62">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2443" pos:column="64">(<argument><expr><call><name><op:operator pos:line="2443" pos:column="65">::</op:operator><name pos:line="2443" pos:column="67">GlobalLock</name></name><argument_list pos:line="2443" pos:column="77">(<argument><expr><name><name pos:line="2443" pos:column="78">medium</name><op:operator pos:line="2443" pos:column="84">.</op:operator><name pos:line="2443" pos:column="85">hGlobal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="2444" pos:column="25">if <condition pos:line="2444" pos:column="28">(<expr><call><name pos:line="2444" pos:column="29">IsUnicodeMode</name><argument_list pos:line="2444" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="2444" pos:column="45"> <block pos:line="2444" pos:column="46">{
				<decl_stmt><decl><type><name pos:line="2445" pos:column="33">int</name></type> <name pos:line="2445" pos:column="37">tlen</name> <init pos:line="2445" pos:column="42">= <expr><call><name><op:operator pos:line="2445" pos:column="44">::</op:operator><name pos:line="2445" pos:column="46">GlobalSize</name></name><argument_list pos:line="2445" pos:column="56">(<argument><expr><name><name pos:line="2445" pos:column="57">medium</name><op:operator pos:line="2445" pos:column="63">.</op:operator><name pos:line="2445" pos:column="64">hGlobal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="2446" pos:column="33">// Convert UTF-16 to UTF-8</comment>
				<decl_stmt><decl><type><name pos:line="2447" pos:column="33">int</name></type> <name pos:line="2447" pos:column="37">dataLen</name> <init pos:line="2447" pos:column="45">= <expr><call><name pos:line="2447" pos:column="47">UTF8Length</name><argument_list pos:line="2447" pos:column="57">(<argument><expr><name pos:line="2447" pos:column="58">udata</name></expr></argument>, <argument><expr><name pos:line="2447" pos:column="65">tlen</name><op:operator pos:line="2447" pos:column="69">/</op:operator><lit:literal type="number" pos:line="2447" pos:column="70">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="2448" pos:column="33">data</name> <op:operator pos:line="2448" pos:column="38">=</op:operator> <op:operator pos:line="2448" pos:column="40">new</op:operator> <name><name pos:line="2448" pos:column="44">char</name><index pos:line="2448" pos:column="48">[<expr><name pos:line="2448" pos:column="49">dataLen</name><op:operator pos:line="2448" pos:column="56">+</op:operator><lit:literal type="number" pos:line="2448" pos:column="57">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="2449" pos:column="33">UTF8FromUTF16</name><argument_list pos:line="2449" pos:column="46">(<argument><expr><name pos:line="2449" pos:column="47">udata</name></expr></argument>, <argument><expr><name pos:line="2449" pos:column="54">tlen</name><op:operator pos:line="2449" pos:column="58">/</op:operator><lit:literal type="number" pos:line="2449" pos:column="59">2</lit:literal></expr></argument>, <argument><expr><name pos:line="2449" pos:column="62">data</name></expr></argument>, <argument><expr><name pos:line="2449" pos:column="68">dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2450" pos:column="33">dataAllocated</name> <op:operator pos:line="2450" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="2450" pos:column="49">true</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="2451" pos:column="27">else <block pos:line="2451" pos:column="32">{
				<comment type="line" pos:line="2452" pos:column="33">// Convert UTF-16 to ANSI</comment>
				<comment type="line" pos:line="2453" pos:column="33">//</comment>
				<comment type="line" pos:line="2454" pos:column="33">// Default Scintilla behavior in Unicode mode</comment>
				<comment type="line" pos:line="2455" pos:column="33">// CF_UNICODETEXT available, but not in Unicode mode</comment>
				<comment type="line" pos:line="2456" pos:column="33">// Convert from Unicode to current Scintilla code page</comment>
				<decl_stmt><decl><type><name pos:line="2457" pos:column="33">UINT</name></type> <name pos:line="2457" pos:column="38">cpDest</name> <init pos:line="2457" pos:column="45">= <expr><call><name pos:line="2457" pos:column="47">CodePageOfDocument</name><argument_list pos:line="2457" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="2458" pos:column="33">int</name></type> <name pos:line="2458" pos:column="37">tlen</name> <init pos:line="2458" pos:column="42">= <expr><call><name><op:operator pos:line="2458" pos:column="44">::</op:operator><name pos:line="2458" pos:column="46">WideCharToMultiByte</name></name><argument_list pos:line="2458" pos:column="65">(<argument><expr><name pos:line="2458" pos:column="66">cpDest</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2458" pos:column="74">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2458" pos:column="77">udata</name></expr></argument>, <argument><expr><op:operator pos:line="2458" pos:column="84">-</op:operator><lit:literal type="number" pos:line="2458" pos:column="85">1</lit:literal></expr></argument>,
					<argument><expr><name pos:line="2459" pos:column="41">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2459" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2459" pos:column="50">NULL</name></expr></argument>, <argument><expr><name pos:line="2459" pos:column="56">NULL</name></expr></argument>)</argument_list></call> <op:operator pos:line="2459" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="2459" pos:column="64">1</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="2459" pos:column="67">// subtract 0 terminator</comment>
				<expr_stmt><expr><name pos:line="2460" pos:column="33">data</name> <op:operator pos:line="2460" pos:column="38">=</op:operator> <op:operator pos:line="2460" pos:column="40">new</op:operator> <name><name pos:line="2460" pos:column="44">char</name><index pos:line="2460" pos:column="48">[<expr><name pos:line="2460" pos:column="49">tlen</name> <op:operator pos:line="2460" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="2460" pos:column="56">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="2461" pos:column="33">memset</name><argument_list pos:line="2461" pos:column="39">(<argument><expr><name pos:line="2461" pos:column="40">data</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2461" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2461" pos:column="49">(</op:operator><name pos:line="2461" pos:column="50">tlen</name><op:operator pos:line="2461" pos:column="54">+</op:operator><lit:literal type="number" pos:line="2461" pos:column="55">1</lit:literal><op:operator pos:line="2461" pos:column="56">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="2462" pos:column="33">::</op:operator><name pos:line="2462" pos:column="35">WideCharToMultiByte</name></name><argument_list pos:line="2462" pos:column="54">(<argument><expr><name pos:line="2462" pos:column="55">cpDest</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2462" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2462" pos:column="66">udata</name></expr></argument>, <argument><expr><op:operator pos:line="2462" pos:column="73">-</op:operator><lit:literal type="number" pos:line="2462" pos:column="74">1</lit:literal></expr></argument>,
						<argument><expr><name pos:line="2463" pos:column="49">data</name></expr></argument>, <argument><expr><name pos:line="2463" pos:column="55">tlen</name> <op:operator pos:line="2463" pos:column="60">+</op:operator> <lit:literal type="number" pos:line="2463" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2463" pos:column="65">NULL</name></expr></argument>, <argument><expr><name pos:line="2463" pos:column="71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2464" pos:column="33">dataAllocated</name> <op:operator pos:line="2464" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="2464" pos:column="49">true</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>

		<if pos:line="2468" pos:column="17">if <condition pos:line="2468" pos:column="20">(<expr><op:operator pos:line="2468" pos:column="21">!</op:operator><name pos:line="2468" pos:column="22">data</name></expr>)</condition><then pos:line="2468" pos:column="27"> <block pos:line="2468" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="2469" pos:column="25">FORMATETC</name></type> <name pos:line="2469" pos:column="35">fmte</name> <init pos:line="2469" pos:column="40">= <expr><block pos:line="2469" pos:column="42">{<expr><name pos:line="2469" pos:column="43">CF_TEXT</name></expr>, <expr><name pos:line="2469" pos:column="52">NULL</name></expr>, <expr><name pos:line="2469" pos:column="58">DVASPECT_CONTENT</name></expr>, <expr><op:operator pos:line="2469" pos:column="76">-</op:operator><lit:literal type="number" pos:line="2469" pos:column="77">1</lit:literal></expr>, <expr><name pos:line="2469" pos:column="80">TYMED_HGLOBAL</name></expr> }</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="2470" pos:column="25">hr</name> <op:operator pos:line="2470" pos:column="28">=</op:operator> <call><name><name pos:line="2470" pos:column="30">pIDataSource</name><op:operator pos:line="2470" pos:column="42">-&gt;</op:operator><name pos:line="2470" pos:column="44">GetData</name></name><argument_list pos:line="2470" pos:column="51">(<argument><expr><op:operator pos:line="2470" pos:column="52">&amp;</op:operator><name pos:line="2470" pos:column="53">fmte</name></expr></argument>, <argument><expr><op:operator pos:line="2470" pos:column="59">&amp;</op:operator><name pos:line="2470" pos:column="60">medium</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="2471" pos:column="25">if <condition pos:line="2471" pos:column="28">(<expr><call><name pos:line="2471" pos:column="29">SUCCEEDED</name><argument_list pos:line="2471" pos:column="38">(<argument><expr><name pos:line="2471" pos:column="39">hr</name></expr></argument>)</argument_list></call> <op:operator pos:line="2471" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="2471" pos:column="46">medium</name><op:operator pos:line="2471" pos:column="52">.</op:operator><name pos:line="2471" pos:column="53">hGlobal</name></name></expr>)</condition><then pos:line="2471" pos:column="61"> <block pos:line="2471" pos:column="62">{
				<expr_stmt><expr><name pos:line="2472" pos:column="33">data</name> <op:operator pos:line="2472" pos:column="38">=</op:operator> <call><name><name pos:line="2472" pos:column="40">static_cast</name><argument_list pos:line="2472" pos:column="51">&lt;<argument><expr><name pos:line="2472" pos:column="52">char</name> <op:operator pos:line="2472" pos:column="57">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2472" pos:column="59">(<argument><expr><call><name><op:operator pos:line="2472" pos:column="60">::</op:operator><name pos:line="2472" pos:column="62">GlobalLock</name></name><argument_list pos:line="2472" pos:column="72">(<argument><expr><name><name pos:line="2472" pos:column="73">medium</name><op:operator pos:line="2472" pos:column="79">.</op:operator><name pos:line="2472" pos:column="80">hGlobal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="2476" pos:column="17">if <condition pos:line="2476" pos:column="20">(<expr><name pos:line="2476" pos:column="21">data</name> <op:operator pos:line="2476" pos:column="26">&amp;&amp;</op:operator> <name pos:line="2476" pos:column="29">convertPastes</name></expr>)</condition><then pos:line="2476" pos:column="43"> <block pos:line="2476" pos:column="44">{
			<comment type="line" pos:line="2477" pos:column="25">// Convert line endings of the drop into our local line-endings mode</comment>
			<decl_stmt><decl><type><name pos:line="2478" pos:column="25">int</name></type> <name pos:line="2478" pos:column="29">len</name> <init pos:line="2478" pos:column="33">= <expr><call><name pos:line="2478" pos:column="35">strlen</name><argument_list pos:line="2478" pos:column="41">(<argument><expr><name pos:line="2478" pos:column="42">data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2479" pos:column="25">char</name> <type:modifier pos:line="2479" pos:column="30">*</type:modifier></type><name pos:line="2479" pos:column="31">convertedText</name> <init pos:line="2479" pos:column="45">= <expr><call><name><name pos:line="2479" pos:column="47">Document</name><op:operator pos:line="2479" pos:column="55">::</op:operator><name pos:line="2479" pos:column="57">TransformLineEnds</name></name><argument_list pos:line="2479" pos:column="74">(<argument><expr><op:operator pos:line="2479" pos:column="75">&amp;</op:operator><name pos:line="2479" pos:column="76">len</name></expr></argument>, <argument><expr><name pos:line="2479" pos:column="81">data</name></expr></argument>, <argument><expr><name pos:line="2479" pos:column="87">len</name></expr></argument>, <argument><expr><name><name pos:line="2479" pos:column="92">pdoc</name><op:operator pos:line="2479" pos:column="96">-&gt;</op:operator><name pos:line="2479" pos:column="98">eolMode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="2480" pos:column="25">if <condition pos:line="2480" pos:column="28">(<expr><name pos:line="2480" pos:column="29">dataAllocated</name></expr>)</condition><then pos:line="2480" pos:column="43">
				<expr_stmt><expr><op:operator pos:line="2481" pos:column="33">delete</op:operator> <index pos:line="2481" pos:column="40">[]</index><name pos:line="2481" pos:column="42">data</name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="2482" pos:column="25">data</name> <op:operator pos:line="2482" pos:column="30">=</op:operator> <name pos:line="2482" pos:column="32">convertedText</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="2483" pos:column="25">dataAllocated</name> <op:operator pos:line="2483" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="2483" pos:column="41">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="2486" pos:column="17">if <condition pos:line="2486" pos:column="20">(<expr><op:operator pos:line="2486" pos:column="21">!</op:operator><name pos:line="2486" pos:column="22">data</name></expr>)</condition><then pos:line="2486" pos:column="27"> <block pos:line="2486" pos:column="28">{
			<comment type="line" pos:line="2487" pos:column="25">//Platform::DebugPrintf("Bad data format: 0x%x\n", hres);</comment>
			<return pos:line="2488" pos:column="25">return <expr><name pos:line="2488" pos:column="32">hr</name></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="2491" pos:column="17">FORMATETC</name></type> <name pos:line="2491" pos:column="27">fmtr</name> <init pos:line="2491" pos:column="32">= <expr><block pos:line="2491" pos:column="34">{<expr><name pos:line="2491" pos:column="35">cfColumnSelect</name></expr>, <expr><name pos:line="2491" pos:column="51">NULL</name></expr>, <expr><name pos:line="2491" pos:column="57">DVASPECT_CONTENT</name></expr>, <expr><op:operator pos:line="2491" pos:column="75">-</op:operator><lit:literal type="number" pos:line="2491" pos:column="76">1</lit:literal></expr>, <expr><name pos:line="2491" pos:column="79">TYMED_HGLOBAL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2492" pos:column="17">HRESULT</name></type> <name pos:line="2492" pos:column="25">hrRectangular</name> <init pos:line="2492" pos:column="39">= <expr><call><name><name pos:line="2492" pos:column="41">pIDataSource</name><op:operator pos:line="2492" pos:column="53">-&gt;</op:operator><name pos:line="2492" pos:column="55">QueryGetData</name></name><argument_list pos:line="2492" pos:column="67">(<argument><expr><op:operator pos:line="2492" pos:column="68">&amp;</op:operator><name pos:line="2492" pos:column="69">fmtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="2494" pos:column="17">POINT</name></type> <name pos:line="2494" pos:column="23">rpt</name> <init pos:line="2494" pos:column="27">= <expr><block pos:line="2494" pos:column="29">{<expr><name><name pos:line="2494" pos:column="30">pt</name><op:operator pos:line="2494" pos:column="32">.</op:operator><name pos:line="2494" pos:column="33">x</name></name></expr>, <expr><name><name pos:line="2494" pos:column="36">pt</name><op:operator pos:line="2494" pos:column="38">.</op:operator><name pos:line="2494" pos:column="39">y</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="2495" pos:column="17">::</op:operator><name pos:line="2495" pos:column="19">ScreenToClient</name></name><argument_list pos:line="2495" pos:column="33">(<argument><expr><call><name pos:line="2495" pos:column="34">MainHWND</name><argument_list pos:line="2495" pos:column="42">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2495" pos:column="46">&amp;</op:operator><name pos:line="2495" pos:column="47">rpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="2496" pos:column="17">SelectionPosition</name></type> <name pos:line="2496" pos:column="35">movePos</name> <init pos:line="2496" pos:column="43">= <expr><call><name pos:line="2496" pos:column="45">SPositionFromLocation</name><argument_list pos:line="2496" pos:column="66">(<argument><expr><call><name pos:line="2496" pos:column="67">Point</name><argument_list pos:line="2496" pos:column="72">(<argument><expr><name><name pos:line="2496" pos:column="73">rpt</name><op:operator pos:line="2496" pos:column="76">.</op:operator><name pos:line="2496" pos:column="77">x</name></name></expr></argument>, <argument><expr><name><name pos:line="2496" pos:column="80">rpt</name><op:operator pos:line="2496" pos:column="83">.</op:operator><name pos:line="2496" pos:column="84">y</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2496" pos:column="88">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2496" pos:column="95">false</lit:literal></expr></argument>, <argument><expr><call><name pos:line="2496" pos:column="102">UserVirtualSpace</name><argument_list pos:line="2496" pos:column="118">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name pos:line="2498" pos:column="17">DropAt</name><argument_list pos:line="2498" pos:column="23">(<argument><expr><name pos:line="2498" pos:column="24">movePos</name></expr></argument>, <argument><expr><name pos:line="2498" pos:column="33">data</name></expr></argument>, <argument><expr><op:operator pos:line="2498" pos:column="39">*</op:operator><name pos:line="2498" pos:column="40">pdwEffect</name> <op:operator pos:line="2498" pos:column="50">==</op:operator> <name pos:line="2498" pos:column="53">DROPEFFECT_MOVE</name></expr></argument>, <argument><expr><name pos:line="2498" pos:column="70">hrRectangular</name> <op:operator pos:line="2498" pos:column="84">==</op:operator> <name pos:line="2498" pos:column="87">S_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><op:operator pos:line="2500" pos:column="17">::</op:operator><name pos:line="2500" pos:column="19">GlobalUnlock</name></name><argument_list pos:line="2500" pos:column="31">(<argument><expr><name><name pos:line="2500" pos:column="32">medium</name><op:operator pos:line="2500" pos:column="38">.</op:operator><name pos:line="2500" pos:column="39">hGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="2502" pos:column="17">// Free data</comment>
		<if pos:line="2503" pos:column="17">if <condition pos:line="2503" pos:column="20">(<expr><name><name pos:line="2503" pos:column="21">medium</name><op:operator pos:line="2503" pos:column="27">.</op:operator><name pos:line="2503" pos:column="28">pUnkForRelease</name></name> <op:operator pos:line="2503" pos:column="43">!=</op:operator> <name pos:line="2503" pos:column="46">NULL</name></expr>)</condition><then pos:line="2503" pos:column="51">
			<expr_stmt><expr><call><name><name pos:line="2504" pos:column="25">medium</name><op:operator pos:line="2504" pos:column="31">.</op:operator><name pos:line="2504" pos:column="32">pUnkForRelease</name><op:operator pos:line="2504" pos:column="46">-&gt;</op:operator><name pos:line="2504" pos:column="48">Release</name></name><argument_list pos:line="2504" pos:column="55">()</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="2505" pos:column="17">else
			<expr_stmt><expr><call><name><op:operator pos:line="2506" pos:column="25">::</op:operator><name pos:line="2506" pos:column="27">GlobalFree</name></name><argument_list pos:line="2506" pos:column="37">(<argument><expr><name><name pos:line="2506" pos:column="38">medium</name><op:operator pos:line="2506" pos:column="44">.</op:operator><name pos:line="2506" pos:column="45">hGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

		<if pos:line="2508" pos:column="17">if <condition pos:line="2508" pos:column="20">(<expr><name pos:line="2508" pos:column="21">dataAllocated</name></expr>)</condition><then pos:line="2508" pos:column="35">
			<expr_stmt><expr><op:operator pos:line="2509" pos:column="25">delete</op:operator> <index pos:line="2509" pos:column="32">[]</index><name pos:line="2509" pos:column="34">data</name></expr>;</expr_stmt></then></if>

		<return pos:line="2511" pos:column="17">return <expr><name pos:line="2511" pos:column="24">S_OK</name></expr>;</return>
	}</block> <catch pos:line="2512" pos:column="11">catch <parameter_list pos:line="2512" pos:column="17">(<param><decl><type><type:modifier pos:line="2512" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2512" pos:column="23">{
		<expr_stmt><expr><name pos:line="2513" pos:column="17">errorStatus</name> <op:operator pos:line="2513" pos:column="29">=</op:operator> <name pos:line="2513" pos:column="31">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="2515" pos:column="9">return <expr><name pos:line="2515" pos:column="16">E_FAIL</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="2518" pos:column="1">/// Implement important part of IDataObject</comment>
<function><type><name pos:line="2519" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="2519" pos:column="14">ScintillaWin</name><op:operator pos:line="2519" pos:column="26">::</op:operator><name pos:line="2519" pos:column="28">GetData</name></name><parameter_list pos:line="2519" pos:column="35">(<param><decl><type><name pos:line="2519" pos:column="36">FORMATETC</name> <type:modifier pos:line="2519" pos:column="46">*</type:modifier></type><name pos:line="2519" pos:column="47">pFEIn</name></decl></param>, <param><decl><type><name pos:line="2519" pos:column="54">STGMEDIUM</name> <type:modifier pos:line="2519" pos:column="64">*</type:modifier></type><name pos:line="2519" pos:column="65">pSTM</name></decl></param>)</parameter_list> <block pos:line="2519" pos:column="71">{
	<decl_stmt><decl><type><name pos:line="2520" pos:column="9">bool</name></type> <name pos:line="2520" pos:column="14">formatOK</name> <init pos:line="2520" pos:column="23">= <expr><op:operator pos:line="2520" pos:column="25">(</op:operator><name><name pos:line="2520" pos:column="26">pFEIn</name><op:operator pos:line="2520" pos:column="31">-&gt;</op:operator><name pos:line="2520" pos:column="33">cfFormat</name></name> <op:operator pos:line="2520" pos:column="42">==</op:operator> <name pos:line="2520" pos:column="45">CF_TEXT</name><op:operator pos:line="2520" pos:column="52">)</op:operator> <op:operator pos:line="2520" pos:column="54">||</op:operator>
		<op:operator pos:line="2521" pos:column="17">(</op:operator><op:operator pos:line="2521" pos:column="18">(</op:operator><name><name pos:line="2521" pos:column="19">pFEIn</name><op:operator pos:line="2521" pos:column="24">-&gt;</op:operator><name pos:line="2521" pos:column="26">cfFormat</name></name> <op:operator pos:line="2521" pos:column="35">==</op:operator> <name pos:line="2521" pos:column="38">CF_UNICODETEXT</name><op:operator pos:line="2521" pos:column="52">)</op:operator> <op:operator pos:line="2521" pos:column="54">&amp;&amp;</op:operator> <call><name pos:line="2521" pos:column="57">IsUnicodeMode</name><argument_list pos:line="2521" pos:column="70">()</argument_list></call><op:operator pos:line="2521" pos:column="72">)</op:operator></expr></init></decl>;</decl_stmt>
	<if pos:line="2522" pos:column="9">if <condition pos:line="2522" pos:column="12">(<expr><op:operator pos:line="2522" pos:column="13">!</op:operator><name pos:line="2522" pos:column="14">formatOK</name> <op:operator pos:line="2522" pos:column="23">||</op:operator>
	    <name><name pos:line="2523" pos:column="13">pFEIn</name><op:operator pos:line="2523" pos:column="18">-&gt;</op:operator><name pos:line="2523" pos:column="20">ptd</name></name> <op:operator pos:line="2523" pos:column="24">!=</op:operator> <lit:literal type="number" pos:line="2523" pos:column="27">0</lit:literal> <op:operator pos:line="2523" pos:column="29">||</op:operator>
	    <op:operator pos:line="2524" pos:column="13">(</op:operator><name><name pos:line="2524" pos:column="14">pFEIn</name><op:operator pos:line="2524" pos:column="19">-&gt;</op:operator><name pos:line="2524" pos:column="21">dwAspect</name></name> <op:operator pos:line="2524" pos:column="30">&amp;</op:operator> <name pos:line="2524" pos:column="32">DVASPECT_CONTENT</name><op:operator pos:line="2524" pos:column="48">)</op:operator> <op:operator pos:line="2524" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="2524" pos:column="53">0</lit:literal> <op:operator pos:line="2524" pos:column="55">||</op:operator>
	    <name><name pos:line="2525" pos:column="13">pFEIn</name><op:operator pos:line="2525" pos:column="18">-&gt;</op:operator><name pos:line="2525" pos:column="20">lindex</name></name> <op:operator pos:line="2525" pos:column="27">!=</op:operator> <op:operator pos:line="2525" pos:column="30">-</op:operator><lit:literal type="number" pos:line="2525" pos:column="31">1</lit:literal> <op:operator pos:line="2525" pos:column="33">||</op:operator>
	    <op:operator pos:line="2526" pos:column="13">(</op:operator><name><name pos:line="2526" pos:column="14">pFEIn</name><op:operator pos:line="2526" pos:column="19">-&gt;</op:operator><name pos:line="2526" pos:column="21">tymed</name></name> <op:operator pos:line="2526" pos:column="27">&amp;</op:operator> <name pos:line="2526" pos:column="29">TYMED_HGLOBAL</name><op:operator pos:line="2526" pos:column="42">)</op:operator> <op:operator pos:line="2526" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="2526" pos:column="47">0</lit:literal></expr>
	)</condition><then pos:line="2527" pos:column="10"> <block pos:line="2527" pos:column="11">{
		<comment type="line" pos:line="2528" pos:column="17">//Platform::DebugPrintf("DOB GetData No %d %x %x fmt=%x\n", lenDrag, pFEIn, pSTM, pFEIn-&gt;cfFormat);</comment>
		<return pos:line="2529" pos:column="17">return <expr><name pos:line="2529" pos:column="24">DATA_E_FORMATETC</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name pos:line="2531" pos:column="9">pSTM</name><op:operator pos:line="2531" pos:column="13">-&gt;</op:operator><name pos:line="2531" pos:column="15">tymed</name></name> <op:operator pos:line="2531" pos:column="21">=</op:operator> <name pos:line="2531" pos:column="23">TYMED_HGLOBAL</name></expr>;</expr_stmt>
	<comment type="line" pos:line="2532" pos:column="9">//Platform::DebugPrintf("DOB GetData OK %d %x %x\n", lenDrag, pFEIn, pSTM);</comment>

	<decl_stmt><decl><type><name pos:line="2534" pos:column="9">GlobalMemory</name></type> <name pos:line="2534" pos:column="22">text</name></decl>;</decl_stmt>
	<if pos:line="2535" pos:column="9">if <condition pos:line="2535" pos:column="12">(<expr><name><name pos:line="2535" pos:column="13">pFEIn</name><op:operator pos:line="2535" pos:column="18">-&gt;</op:operator><name pos:line="2535" pos:column="20">cfFormat</name></name> <op:operator pos:line="2535" pos:column="29">==</op:operator> <name pos:line="2535" pos:column="32">CF_UNICODETEXT</name></expr>)</condition><then pos:line="2535" pos:column="47"> <block pos:line="2535" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="2536" pos:column="17">int</name></type> <name pos:line="2536" pos:column="21">uchars</name> <init pos:line="2536" pos:column="28">= <expr><call><name pos:line="2536" pos:column="30">UTF16Length</name><argument_list pos:line="2536" pos:column="41">(<argument><expr><name><name pos:line="2536" pos:column="42">drag</name><op:operator pos:line="2536" pos:column="46">.</op:operator><name pos:line="2536" pos:column="47">s</name></name></expr></argument>, <argument><expr><name><name pos:line="2536" pos:column="50">drag</name><op:operator pos:line="2536" pos:column="54">.</op:operator><name pos:line="2536" pos:column="55">len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="2537" pos:column="17">text</name><op:operator pos:line="2537" pos:column="21">.</op:operator><name pos:line="2537" pos:column="22">Allocate</name></name><argument_list pos:line="2537" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="2537" pos:column="31">2</lit:literal> <op:operator pos:line="2537" pos:column="33">*</op:operator> <name pos:line="2537" pos:column="35">uchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="2538" pos:column="17">if <condition pos:line="2538" pos:column="20">(<expr><name pos:line="2538" pos:column="21">text</name></expr>)</condition><then pos:line="2538" pos:column="26"> <block pos:line="2538" pos:column="27">{
			<expr_stmt><expr><call><name pos:line="2539" pos:column="25">UTF16FromUTF8</name><argument_list pos:line="2539" pos:column="38">(<argument><expr><name><name pos:line="2539" pos:column="39">drag</name><op:operator pos:line="2539" pos:column="43">.</op:operator><name pos:line="2539" pos:column="44">s</name></name></expr></argument>, <argument><expr><name><name pos:line="2539" pos:column="47">drag</name><op:operator pos:line="2539" pos:column="51">.</op:operator><name pos:line="2539" pos:column="52">len</name></name></expr></argument>, <argument><expr><call><name><name pos:line="2539" pos:column="57">static_cast</name><argument_list pos:line="2539" pos:column="68">&lt;<argument><expr><name pos:line="2539" pos:column="69">wchar_t</name> <op:operator pos:line="2539" pos:column="77">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2539" pos:column="79">(<argument><expr><name><name pos:line="2539" pos:column="80">text</name><op:operator pos:line="2539" pos:column="84">.</op:operator><name pos:line="2539" pos:column="85">ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2539" pos:column="91">uchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then> <else pos:line="2541" pos:column="11">else <block pos:line="2541" pos:column="16">{
		<expr_stmt><expr><call><name><name pos:line="2542" pos:column="17">text</name><op:operator pos:line="2542" pos:column="21">.</op:operator><name pos:line="2542" pos:column="22">Allocate</name></name><argument_list pos:line="2542" pos:column="30">(<argument><expr><name><name pos:line="2542" pos:column="31">drag</name><op:operator pos:line="2542" pos:column="35">.</op:operator><name pos:line="2542" pos:column="36">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="2543" pos:column="17">if <condition pos:line="2543" pos:column="20">(<expr><name pos:line="2543" pos:column="21">text</name></expr>)</condition><then pos:line="2543" pos:column="26"> <block pos:line="2543" pos:column="27">{
			<expr_stmt><expr><call><name pos:line="2544" pos:column="25">memcpy</name><argument_list pos:line="2544" pos:column="31">(<argument><expr><call><name><name pos:line="2544" pos:column="32">static_cast</name><argument_list pos:line="2544" pos:column="43">&lt;<argument><expr><name pos:line="2544" pos:column="44">char</name> <op:operator pos:line="2544" pos:column="49">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2544" pos:column="51">(<argument><expr><name><name pos:line="2544" pos:column="52">text</name><op:operator pos:line="2544" pos:column="56">.</op:operator><name pos:line="2544" pos:column="57">ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="2544" pos:column="63">drag</name><op:operator pos:line="2544" pos:column="67">.</op:operator><name pos:line="2544" pos:column="68">s</name></name></expr></argument>, <argument><expr><name><name pos:line="2544" pos:column="71">drag</name><op:operator pos:line="2544" pos:column="75">.</op:operator><name pos:line="2544" pos:column="76">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	<expr_stmt><expr><name><name pos:line="2547" pos:column="9">pSTM</name><op:operator pos:line="2547" pos:column="13">-&gt;</op:operator><name pos:line="2547" pos:column="15">hGlobal</name></name> <op:operator pos:line="2547" pos:column="23">=</op:operator> <name pos:line="2547" pos:column="25">text</name> <op:operator pos:line="2547" pos:column="30">?</op:operator> <call><name><name pos:line="2547" pos:column="32">text</name><op:operator pos:line="2547" pos:column="36">.</op:operator><name pos:line="2547" pos:column="37">Unlock</name></name><argument_list pos:line="2547" pos:column="43">()</argument_list></call> <op:operator pos:line="2547" pos:column="46">:</op:operator> <lit:literal type="number" pos:line="2547" pos:column="48">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="2548" pos:column="9">pSTM</name><op:operator pos:line="2548" pos:column="13">-&gt;</op:operator><name pos:line="2548" pos:column="15">pUnkForRelease</name></name> <op:operator pos:line="2548" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="2548" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	<return pos:line="2549" pos:column="9">return <expr><name pos:line="2549" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2552" pos:column="1">bool</name></type> <name><name pos:line="2552" pos:column="6">ScintillaWin</name><op:operator pos:line="2552" pos:column="18">::</op:operator><name pos:line="2552" pos:column="20">Register</name></name><parameter_list pos:line="2552" pos:column="28">(<param><decl><type><name pos:line="2552" pos:column="29">HINSTANCE</name></type> <name pos:line="2552" pos:column="39">hInstance_</name></decl></param>)</parameter_list> <block pos:line="2552" pos:column="51">{

	<expr_stmt><expr><name pos:line="2554" pos:column="9">hInstance</name> <op:operator pos:line="2554" pos:column="19">=</op:operator> <name pos:line="2554" pos:column="21">hInstance_</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2555" pos:column="9">bool</name></type> <name pos:line="2555" pos:column="14">result</name></decl>;</decl_stmt>

	<comment type="line" pos:line="2557" pos:column="9">// Register the Scintilla class</comment>
	<if pos:line="2558" pos:column="9">if <condition pos:line="2558" pos:column="12">(<expr><call><name pos:line="2558" pos:column="13">IsNT</name><argument_list pos:line="2558" pos:column="17">()</argument_list></call></expr>)</condition><then pos:line="2558" pos:column="20"> <block pos:line="2558" pos:column="21">{

		<comment type="line" pos:line="2560" pos:column="17">// Register Scintilla as a wide character window</comment>
		<decl_stmt><decl><type><name pos:line="2561" pos:column="17">WNDCLASSEXW</name></type> <name pos:line="2561" pos:column="29">wndclass</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="2562" pos:column="17">wndclass</name><op:operator pos:line="2562" pos:column="25">.</op:operator><name pos:line="2562" pos:column="26">cbSize</name></name> <op:operator pos:line="2562" pos:column="33">=</op:operator> <sizeof pos:line="2562" pos:column="35">sizeof<argument_list pos:line="2562" pos:column="41">(<argument><expr><name pos:line="2562" pos:column="42">wndclass</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2563" pos:column="17">wndclass</name><op:operator pos:line="2563" pos:column="25">.</op:operator><name pos:line="2563" pos:column="26">style</name></name> <op:operator pos:line="2563" pos:column="32">=</op:operator> <name pos:line="2563" pos:column="34">CS_GLOBALCLASS</name> <op:operator pos:line="2563" pos:column="49">|</op:operator> <name pos:line="2563" pos:column="51">CS_HREDRAW</name> <op:operator pos:line="2563" pos:column="62">|</op:operator> <name pos:line="2563" pos:column="64">CS_VREDRAW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2564" pos:column="17">wndclass</name><op:operator pos:line="2564" pos:column="25">.</op:operator><name pos:line="2564" pos:column="26">lpfnWndProc</name></name> <op:operator pos:line="2564" pos:column="38">=</op:operator> <name><name pos:line="2564" pos:column="40">ScintillaWin</name><op:operator pos:line="2564" pos:column="52">::</op:operator><name pos:line="2564" pos:column="54">SWndProc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2565" pos:column="17">wndclass</name><op:operator pos:line="2565" pos:column="25">.</op:operator><name pos:line="2565" pos:column="26">cbClsExtra</name></name> <op:operator pos:line="2565" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="2565" pos:column="39">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2566" pos:column="17">wndclass</name><op:operator pos:line="2566" pos:column="25">.</op:operator><name pos:line="2566" pos:column="26">cbWndExtra</name></name> <op:operator pos:line="2566" pos:column="37">=</op:operator> <sizeof pos:line="2566" pos:column="39">sizeof<argument_list pos:line="2566" pos:column="45">(<argument><expr><name pos:line="2566" pos:column="46">ScintillaWin</name> <op:operator pos:line="2566" pos:column="59">*</op:operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2567" pos:column="17">wndclass</name><op:operator pos:line="2567" pos:column="25">.</op:operator><name pos:line="2567" pos:column="26">hInstance</name></name> <op:operator pos:line="2567" pos:column="36">=</op:operator> <name pos:line="2567" pos:column="38">hInstance</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2568" pos:column="17">wndclass</name><op:operator pos:line="2568" pos:column="25">.</op:operator><name pos:line="2568" pos:column="26">hIcon</name></name> <op:operator pos:line="2568" pos:column="32">=</op:operator> <name pos:line="2568" pos:column="34">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2569" pos:column="17">wndclass</name><op:operator pos:line="2569" pos:column="25">.</op:operator><name pos:line="2569" pos:column="26">hCursor</name></name> <op:operator pos:line="2569" pos:column="34">=</op:operator> <name pos:line="2569" pos:column="36">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2570" pos:column="17">wndclass</name><op:operator pos:line="2570" pos:column="25">.</op:operator><name pos:line="2570" pos:column="26">hbrBackground</name></name> <op:operator pos:line="2570" pos:column="40">=</op:operator> <name pos:line="2570" pos:column="42">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2571" pos:column="17">wndclass</name><op:operator pos:line="2571" pos:column="25">.</op:operator><name pos:line="2571" pos:column="26">lpszMenuName</name></name> <op:operator pos:line="2571" pos:column="39">=</op:operator> <name pos:line="2571" pos:column="41">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2572" pos:column="17">wndclass</name><op:operator pos:line="2572" pos:column="25">.</op:operator><name pos:line="2572" pos:column="26">lpszClassName</name></name> <op:operator pos:line="2572" pos:column="40">=</op:operator> <lit:literal type="string" pos:line="2572" pos:column="42">L"Scintilla"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2573" pos:column="17">wndclass</name><op:operator pos:line="2573" pos:column="25">.</op:operator><name pos:line="2573" pos:column="26">hIconSm</name></name> <op:operator pos:line="2573" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="2573" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2574" pos:column="17">result</name> <op:operator pos:line="2574" pos:column="24">=</op:operator> <call><name><op:operator pos:line="2574" pos:column="26">::</op:operator><name pos:line="2574" pos:column="28">RegisterClassExW</name></name><argument_list pos:line="2574" pos:column="44">(<argument><expr><op:operator pos:line="2574" pos:column="45">&amp;</op:operator><name pos:line="2574" pos:column="46">wndclass</name></expr></argument>)</argument_list></call> <op:operator pos:line="2574" pos:column="56">!=</op:operator> <lit:literal type="number" pos:line="2574" pos:column="59">0</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="2575" pos:column="11">else <block pos:line="2575" pos:column="16">{

		<comment type="line" pos:line="2577" pos:column="17">// Register Scintilla as a normal character window</comment>
		<decl_stmt><decl><type><name pos:line="2578" pos:column="17">WNDCLASSEX</name></type> <name pos:line="2578" pos:column="28">wndclass</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="2579" pos:column="17">wndclass</name><op:operator pos:line="2579" pos:column="25">.</op:operator><name pos:line="2579" pos:column="26">cbSize</name></name> <op:operator pos:line="2579" pos:column="33">=</op:operator> <sizeof pos:line="2579" pos:column="35">sizeof<argument_list pos:line="2579" pos:column="41">(<argument><expr><name pos:line="2579" pos:column="42">wndclass</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2580" pos:column="17">wndclass</name><op:operator pos:line="2580" pos:column="25">.</op:operator><name pos:line="2580" pos:column="26">style</name></name> <op:operator pos:line="2580" pos:column="32">=</op:operator> <name pos:line="2580" pos:column="34">CS_GLOBALCLASS</name> <op:operator pos:line="2580" pos:column="49">|</op:operator> <name pos:line="2580" pos:column="51">CS_HREDRAW</name> <op:operator pos:line="2580" pos:column="62">|</op:operator> <name pos:line="2580" pos:column="64">CS_VREDRAW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2581" pos:column="17">wndclass</name><op:operator pos:line="2581" pos:column="25">.</op:operator><name pos:line="2581" pos:column="26">lpfnWndProc</name></name> <op:operator pos:line="2581" pos:column="38">=</op:operator> <name><name pos:line="2581" pos:column="40">ScintillaWin</name><op:operator pos:line="2581" pos:column="52">::</op:operator><name pos:line="2581" pos:column="54">SWndProc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2582" pos:column="17">wndclass</name><op:operator pos:line="2582" pos:column="25">.</op:operator><name pos:line="2582" pos:column="26">cbClsExtra</name></name> <op:operator pos:line="2582" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="2582" pos:column="39">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2583" pos:column="17">wndclass</name><op:operator pos:line="2583" pos:column="25">.</op:operator><name pos:line="2583" pos:column="26">cbWndExtra</name></name> <op:operator pos:line="2583" pos:column="37">=</op:operator> <sizeof pos:line="2583" pos:column="39">sizeof<argument_list pos:line="2583" pos:column="45">(<argument><expr><name pos:line="2583" pos:column="46">ScintillaWin</name> <op:operator pos:line="2583" pos:column="59">*</op:operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2584" pos:column="17">wndclass</name><op:operator pos:line="2584" pos:column="25">.</op:operator><name pos:line="2584" pos:column="26">hInstance</name></name> <op:operator pos:line="2584" pos:column="36">=</op:operator> <name pos:line="2584" pos:column="38">hInstance</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2585" pos:column="17">wndclass</name><op:operator pos:line="2585" pos:column="25">.</op:operator><name pos:line="2585" pos:column="26">hIcon</name></name> <op:operator pos:line="2585" pos:column="32">=</op:operator> <name pos:line="2585" pos:column="34">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2586" pos:column="17">wndclass</name><op:operator pos:line="2586" pos:column="25">.</op:operator><name pos:line="2586" pos:column="26">hCursor</name></name> <op:operator pos:line="2586" pos:column="34">=</op:operator> <name pos:line="2586" pos:column="36">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2587" pos:column="17">wndclass</name><op:operator pos:line="2587" pos:column="25">.</op:operator><name pos:line="2587" pos:column="26">hbrBackground</name></name> <op:operator pos:line="2587" pos:column="40">=</op:operator> <name pos:line="2587" pos:column="42">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2588" pos:column="17">wndclass</name><op:operator pos:line="2588" pos:column="25">.</op:operator><name pos:line="2588" pos:column="26">lpszMenuName</name></name> <op:operator pos:line="2588" pos:column="39">=</op:operator> <name pos:line="2588" pos:column="41">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2589" pos:column="17">wndclass</name><op:operator pos:line="2589" pos:column="25">.</op:operator><name pos:line="2589" pos:column="26">lpszClassName</name></name> <op:operator pos:line="2589" pos:column="40">=</op:operator> <name pos:line="2589" pos:column="42">scintillaClassName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2590" pos:column="17">wndclass</name><op:operator pos:line="2590" pos:column="25">.</op:operator><name pos:line="2590" pos:column="26">hIconSm</name></name> <op:operator pos:line="2590" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="2590" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2591" pos:column="17">result</name> <op:operator pos:line="2591" pos:column="24">=</op:operator> <call><name><op:operator pos:line="2591" pos:column="26">::</op:operator><name pos:line="2591" pos:column="28">RegisterClassEx</name></name><argument_list pos:line="2591" pos:column="43">(<argument><expr><op:operator pos:line="2591" pos:column="44">&amp;</op:operator><name pos:line="2591" pos:column="45">wndclass</name></expr></argument>)</argument_list></call> <op:operator pos:line="2591" pos:column="55">!=</op:operator> <lit:literal type="number" pos:line="2591" pos:column="58">0</lit:literal></expr>;</expr_stmt>
	}</block></else></if>

	<if pos:line="2594" pos:column="9">if <condition pos:line="2594" pos:column="12">(<expr><name pos:line="2594" pos:column="13">result</name></expr>)</condition><then pos:line="2594" pos:column="20"> <block pos:line="2594" pos:column="21">{
		<comment type="line" pos:line="2595" pos:column="17">// Register the CallTip class</comment>
		<decl_stmt><decl><type><name pos:line="2596" pos:column="17">WNDCLASSEX</name></type> <name pos:line="2596" pos:column="28">wndclassc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="2597" pos:column="17">wndclassc</name><op:operator pos:line="2597" pos:column="26">.</op:operator><name pos:line="2597" pos:column="27">cbSize</name></name> <op:operator pos:line="2597" pos:column="34">=</op:operator> <sizeof pos:line="2597" pos:column="36">sizeof<argument_list pos:line="2597" pos:column="42">(<argument><expr><name pos:line="2597" pos:column="43">wndclassc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2598" pos:column="17">wndclassc</name><op:operator pos:line="2598" pos:column="26">.</op:operator><name pos:line="2598" pos:column="27">style</name></name> <op:operator pos:line="2598" pos:column="33">=</op:operator> <name pos:line="2598" pos:column="35">CS_GLOBALCLASS</name> <op:operator pos:line="2598" pos:column="50">|</op:operator> <name pos:line="2598" pos:column="52">CS_HREDRAW</name> <op:operator pos:line="2598" pos:column="63">|</op:operator> <name pos:line="2598" pos:column="65">CS_VREDRAW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2599" pos:column="17">wndclassc</name><op:operator pos:line="2599" pos:column="26">.</op:operator><name pos:line="2599" pos:column="27">cbClsExtra</name></name> <op:operator pos:line="2599" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="2599" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2600" pos:column="17">wndclassc</name><op:operator pos:line="2600" pos:column="26">.</op:operator><name pos:line="2600" pos:column="27">cbWndExtra</name></name> <op:operator pos:line="2600" pos:column="38">=</op:operator> <sizeof pos:line="2600" pos:column="40">sizeof<argument_list pos:line="2600" pos:column="46">(<argument><expr><name pos:line="2600" pos:column="47">ScintillaWin</name> <op:operator pos:line="2600" pos:column="60">*</op:operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2601" pos:column="17">wndclassc</name><op:operator pos:line="2601" pos:column="26">.</op:operator><name pos:line="2601" pos:column="27">hInstance</name></name> <op:operator pos:line="2601" pos:column="37">=</op:operator> <name pos:line="2601" pos:column="39">hInstance</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2602" pos:column="17">wndclassc</name><op:operator pos:line="2602" pos:column="26">.</op:operator><name pos:line="2602" pos:column="27">hIcon</name></name> <op:operator pos:line="2602" pos:column="33">=</op:operator> <name pos:line="2602" pos:column="35">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2603" pos:column="17">wndclassc</name><op:operator pos:line="2603" pos:column="26">.</op:operator><name pos:line="2603" pos:column="27">hbrBackground</name></name> <op:operator pos:line="2603" pos:column="41">=</op:operator> <name pos:line="2603" pos:column="43">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2604" pos:column="17">wndclassc</name><op:operator pos:line="2604" pos:column="26">.</op:operator><name pos:line="2604" pos:column="27">lpszMenuName</name></name> <op:operator pos:line="2604" pos:column="40">=</op:operator> <name pos:line="2604" pos:column="42">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2605" pos:column="17">wndclassc</name><op:operator pos:line="2605" pos:column="26">.</op:operator><name pos:line="2605" pos:column="27">lpfnWndProc</name></name> <op:operator pos:line="2605" pos:column="39">=</op:operator> <name><name pos:line="2605" pos:column="41">ScintillaWin</name><op:operator pos:line="2605" pos:column="53">::</op:operator><name pos:line="2605" pos:column="55">CTWndProc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2606" pos:column="17">wndclassc</name><op:operator pos:line="2606" pos:column="26">.</op:operator><name pos:line="2606" pos:column="27">hCursor</name></name> <op:operator pos:line="2606" pos:column="35">=</op:operator> <call><name><op:operator pos:line="2606" pos:column="37">::</op:operator><name pos:line="2606" pos:column="39">LoadCursor</name></name><argument_list pos:line="2606" pos:column="49">(<argument><expr><name pos:line="2606" pos:column="50">NULL</name></expr></argument>, <argument><expr><name pos:line="2606" pos:column="56">IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2607" pos:column="17">wndclassc</name><op:operator pos:line="2607" pos:column="26">.</op:operator><name pos:line="2607" pos:column="27">lpszClassName</name></name> <op:operator pos:line="2607" pos:column="41">=</op:operator> <name pos:line="2607" pos:column="43">callClassName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2608" pos:column="17">wndclassc</name><op:operator pos:line="2608" pos:column="26">.</op:operator><name pos:line="2608" pos:column="27">hIconSm</name></name> <op:operator pos:line="2608" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="2608" pos:column="37">0</lit:literal></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="2610" pos:column="17">result</name> <op:operator pos:line="2610" pos:column="24">=</op:operator> <call><name><op:operator pos:line="2610" pos:column="26">::</op:operator><name pos:line="2610" pos:column="28">RegisterClassEx</name></name><argument_list pos:line="2610" pos:column="43">(<argument><expr><op:operator pos:line="2610" pos:column="44">&amp;</op:operator><name pos:line="2610" pos:column="45">wndclassc</name></expr></argument>)</argument_list></call> <op:operator pos:line="2610" pos:column="56">!=</op:operator> <lit:literal type="number" pos:line="2610" pos:column="59">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<return pos:line="2613" pos:column="9">return <expr><name pos:line="2613" pos:column="16">result</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2616" pos:column="1">bool</name></type> <name><name pos:line="2616" pos:column="6">ScintillaWin</name><op:operator pos:line="2616" pos:column="18">::</op:operator><name pos:line="2616" pos:column="20">Unregister</name></name><parameter_list pos:line="2616" pos:column="30">()</parameter_list> <block pos:line="2616" pos:column="33">{
	<decl_stmt><decl><type><name pos:line="2617" pos:column="9">bool</name></type> <name pos:line="2617" pos:column="14">result</name> <init pos:line="2617" pos:column="21">= <expr><call><name><op:operator pos:line="2617" pos:column="23">::</op:operator><name pos:line="2617" pos:column="25">UnregisterClass</name></name><argument_list pos:line="2617" pos:column="40">(<argument><expr><name pos:line="2617" pos:column="41">scintillaClassName</name></expr></argument>, <argument><expr><name pos:line="2617" pos:column="61">hInstance</name></expr></argument>)</argument_list></call> <op:operator pos:line="2617" pos:column="72">!=</op:operator> <lit:literal type="number" pos:line="2617" pos:column="75">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="2618" pos:column="9">if <condition pos:line="2618" pos:column="12">(<expr><call><name><op:operator pos:line="2618" pos:column="13">::</op:operator><name pos:line="2618" pos:column="15">UnregisterClass</name></name><argument_list pos:line="2618" pos:column="30">(<argument><expr><name pos:line="2618" pos:column="31">callClassName</name></expr></argument>, <argument><expr><name pos:line="2618" pos:column="46">hInstance</name></expr></argument>)</argument_list></call> <op:operator pos:line="2618" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="2618" pos:column="60">0</lit:literal></expr>)</condition><then pos:line="2618" pos:column="62">
		<expr_stmt><expr><name pos:line="2619" pos:column="17">result</name> <op:operator pos:line="2619" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="2619" pos:column="26">false</lit:literal></expr>;</expr_stmt></then></if>
	<return pos:line="2620" pos:column="9">return <expr><name pos:line="2620" pos:column="16">result</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2623" pos:column="1">bool</name></type> <name><name pos:line="2623" pos:column="6">ScintillaWin</name><op:operator pos:line="2623" pos:column="18">::</op:operator><name pos:line="2623" pos:column="20">HasCaretSizeChanged</name></name><parameter_list pos:line="2623" pos:column="39">()</parameter_list> <block pos:line="2623" pos:column="42">{
	<if pos:line="2624" pos:column="9">if <condition pos:line="2624" pos:column="12">(
		<expr><op:operator pos:line="2625" pos:column="17">(</op:operator> <op:operator pos:line="2625" pos:column="19">(</op:operator><lit:literal type="number" pos:line="2625" pos:column="20">0</lit:literal> <op:operator pos:line="2625" pos:column="22">!=</op:operator> <name><name pos:line="2625" pos:column="25">vs</name><op:operator pos:line="2625" pos:column="27">.</op:operator><name pos:line="2625" pos:column="28">caretWidth</name></name><op:operator pos:line="2625" pos:column="38">)</op:operator> <op:operator pos:line="2625" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="2625" pos:column="43">(</op:operator><name pos:line="2625" pos:column="44">sysCaretWidth</name> <op:operator pos:line="2625" pos:column="58">!=</op:operator> <name><name pos:line="2625" pos:column="61">vs</name><op:operator pos:line="2625" pos:column="63">.</op:operator><name pos:line="2625" pos:column="64">caretWidth</name></name><op:operator pos:line="2625" pos:column="74">)</op:operator> <op:operator pos:line="2625" pos:column="76">)</op:operator>
		<op:operator pos:line="2626" pos:column="17">||</op:operator> <op:operator pos:line="2626" pos:column="20">(</op:operator><op:operator pos:line="2626" pos:column="21">(</op:operator><lit:literal type="number" pos:line="2626" pos:column="22">0</lit:literal> <op:operator pos:line="2626" pos:column="24">!=</op:operator> <name><name pos:line="2626" pos:column="27">vs</name><op:operator pos:line="2626" pos:column="29">.</op:operator><name pos:line="2626" pos:column="30">lineHeight</name></name><op:operator pos:line="2626" pos:column="40">)</op:operator> <op:operator pos:line="2626" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="2626" pos:column="45">(</op:operator><name pos:line="2626" pos:column="46">sysCaretHeight</name> <op:operator pos:line="2626" pos:column="61">!=</op:operator> <name><name pos:line="2626" pos:column="64">vs</name><op:operator pos:line="2626" pos:column="66">.</op:operator><name pos:line="2626" pos:column="67">lineHeight</name></name><op:operator pos:line="2626" pos:column="77">)</op:operator><op:operator pos:line="2626" pos:column="78">)</op:operator></expr>
		)</condition><then pos:line="2627" pos:column="18"> <block pos:line="2627" pos:column="19">{
		<return pos:line="2628" pos:column="17">return <expr><lit:literal type="boolean" pos:line="2628" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="2630" pos:column="9">return <expr><lit:literal type="boolean" pos:line="2630" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2633" pos:column="1">BOOL</name></type> <name><name pos:line="2633" pos:column="6">ScintillaWin</name><op:operator pos:line="2633" pos:column="18">::</op:operator><name pos:line="2633" pos:column="20">CreateSystemCaret</name></name><parameter_list pos:line="2633" pos:column="37">()</parameter_list> <block pos:line="2633" pos:column="40">{
	<expr_stmt><expr><name pos:line="2634" pos:column="9">sysCaretWidth</name> <op:operator pos:line="2634" pos:column="23">=</op:operator> <name><name pos:line="2634" pos:column="25">vs</name><op:operator pos:line="2634" pos:column="27">.</op:operator><name pos:line="2634" pos:column="28">caretWidth</name></name></expr>;</expr_stmt>
	<if pos:line="2635" pos:column="9">if <condition pos:line="2635" pos:column="12">(<expr><lit:literal type="number" pos:line="2635" pos:column="13">0</lit:literal> <op:operator pos:line="2635" pos:column="15">==</op:operator> <name pos:line="2635" pos:column="18">sysCaretWidth</name></expr>)</condition><then pos:line="2635" pos:column="32"> <block pos:line="2635" pos:column="33">{
		<expr_stmt><expr><name pos:line="2636" pos:column="17">sysCaretWidth</name> <op:operator pos:line="2636" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="2636" pos:column="33">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="2638" pos:column="9">sysCaretHeight</name> <op:operator pos:line="2638" pos:column="24">=</op:operator> <name><name pos:line="2638" pos:column="26">vs</name><op:operator pos:line="2638" pos:column="28">.</op:operator><name pos:line="2638" pos:column="29">lineHeight</name></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2639" pos:column="9">int</name></type> <name pos:line="2639" pos:column="13">bitmapSize</name> <init pos:line="2639" pos:column="24">= <expr><op:operator pos:line="2639" pos:column="26">(</op:operator><op:operator pos:line="2639" pos:column="27">(</op:operator><op:operator pos:line="2639" pos:column="28">(</op:operator><name pos:line="2639" pos:column="29">sysCaretWidth</name> <op:operator pos:line="2639" pos:column="43">+</op:operator> <lit:literal type="number" pos:line="2639" pos:column="45">15</lit:literal><op:operator pos:line="2639" pos:column="47">)</op:operator> <op:operator pos:line="2639" pos:column="49">&amp;</op:operator> <op:operator pos:line="2639" pos:column="51">~</op:operator><lit:literal type="number" pos:line="2639" pos:column="52">15</lit:literal><op:operator pos:line="2639" pos:column="54">)</op:operator> <op:operator pos:line="2639" pos:column="56">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="2639" pos:column="59">3</lit:literal><op:operator pos:line="2639" pos:column="60">)</op:operator> <op:operator pos:line="2639" pos:column="62">*</op:operator>
		<name pos:line="2640" pos:column="17">sysCaretHeight</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2641" pos:column="9">char</name> <type:modifier pos:line="2641" pos:column="14">*</type:modifier></type><name pos:line="2641" pos:column="15">bits</name> <init pos:line="2641" pos:column="20">= <expr><op:operator pos:line="2641" pos:column="22">new</op:operator> <name><name pos:line="2641" pos:column="26">char</name><index pos:line="2641" pos:column="30">[<expr><name pos:line="2641" pos:column="31">bitmapSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2642" pos:column="9">memset</name><argument_list pos:line="2642" pos:column="15">(<argument><expr><name pos:line="2642" pos:column="16">bits</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2642" pos:column="22">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2642" pos:column="25">bitmapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2643" pos:column="9">sysCaretBitmap</name> <op:operator pos:line="2643" pos:column="24">=</op:operator> <call><name><op:operator pos:line="2643" pos:column="26">::</op:operator><name pos:line="2643" pos:column="28">CreateBitmap</name></name><argument_list pos:line="2643" pos:column="40">(<argument><expr><name pos:line="2643" pos:column="41">sysCaretWidth</name></expr></argument>, <argument><expr><name pos:line="2643" pos:column="56">sysCaretHeight</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2643" pos:column="72">1</lit:literal></expr></argument>,
		<argument><expr><lit:literal type="number" pos:line="2644" pos:column="17">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="2644" pos:column="20">reinterpret_cast</name><argument_list pos:line="2644" pos:column="36">&lt;<argument><expr><name pos:line="2644" pos:column="37">BYTE</name> <op:operator pos:line="2644" pos:column="42">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2644" pos:column="44">(<argument><expr><name pos:line="2644" pos:column="45">bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="2645" pos:column="9">delete</op:operator> <index pos:line="2645" pos:column="16">[]</index><name pos:line="2645" pos:column="18">bits</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2646" pos:column="9">BOOL</name></type> <name pos:line="2646" pos:column="14">retval</name> <init pos:line="2646" pos:column="21">= <expr><call><name><op:operator pos:line="2646" pos:column="23">::</op:operator><name pos:line="2646" pos:column="25">CreateCaret</name></name><argument_list pos:line="2646" pos:column="36">(
		<argument><expr><call><name pos:line="2647" pos:column="17">MainHWND</name><argument_list pos:line="2647" pos:column="25">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2647" pos:column="29">sysCaretBitmap</name></expr></argument>,
		<argument><expr><name pos:line="2648" pos:column="17">sysCaretWidth</name></expr></argument>, <argument><expr><name pos:line="2648" pos:column="32">sysCaretHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="2649" pos:column="9">::</op:operator><name pos:line="2649" pos:column="11">ShowCaret</name></name><argument_list pos:line="2649" pos:column="20">(<argument><expr><call><name pos:line="2649" pos:column="21">MainHWND</name><argument_list pos:line="2649" pos:column="29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="2650" pos:column="9">return <expr><name pos:line="2650" pos:column="16">retval</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2653" pos:column="1">BOOL</name></type> <name><name pos:line="2653" pos:column="6">ScintillaWin</name><op:operator pos:line="2653" pos:column="18">::</op:operator><name pos:line="2653" pos:column="20">DestroySystemCaret</name></name><parameter_list pos:line="2653" pos:column="38">()</parameter_list> <block pos:line="2653" pos:column="41">{
	<expr_stmt><expr><call><name><op:operator pos:line="2654" pos:column="9">::</op:operator><name pos:line="2654" pos:column="11">HideCaret</name></name><argument_list pos:line="2654" pos:column="20">(<argument><expr><call><name pos:line="2654" pos:column="21">MainHWND</name><argument_list pos:line="2654" pos:column="29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2655" pos:column="9">BOOL</name></type> <name pos:line="2655" pos:column="14">retval</name> <init pos:line="2655" pos:column="21">= <expr><call><name><op:operator pos:line="2655" pos:column="23">::</op:operator><name pos:line="2655" pos:column="25">DestroyCaret</name></name><argument_list pos:line="2655" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2656" pos:column="9">if <condition pos:line="2656" pos:column="12">(<expr><name pos:line="2656" pos:column="13">sysCaretBitmap</name></expr>)</condition><then pos:line="2656" pos:column="28"> <block pos:line="2656" pos:column="29">{
		<expr_stmt><expr><call><name><op:operator pos:line="2657" pos:column="17">::</op:operator><name pos:line="2657" pos:column="19">DeleteObject</name></name><argument_list pos:line="2657" pos:column="31">(<argument><expr><name pos:line="2657" pos:column="32">sysCaretBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2658" pos:column="17">sysCaretBitmap</name> <op:operator pos:line="2658" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="2658" pos:column="34">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="2660" pos:column="9">return <expr><name pos:line="2660" pos:column="16">retval</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2663" pos:column="1">sptr_t</name> <name pos:line="2663" pos:column="8">PASCAL</name></type> <name><name pos:line="2663" pos:column="15">ScintillaWin</name><op:operator pos:line="2663" pos:column="27">::</op:operator><name pos:line="2663" pos:column="29">CTWndProc</name></name><parameter_list pos:line="2663" pos:column="38">(
    <param><decl><type><name pos:line="2664" pos:column="5">HWND</name></type> <name pos:line="2664" pos:column="10">hWnd</name></decl></param>, <param><decl><type><name pos:line="2664" pos:column="16">UINT</name></type> <name pos:line="2664" pos:column="21">iMessage</name></decl></param>, <param><decl><type><name pos:line="2664" pos:column="31">WPARAM</name></type> <name pos:line="2664" pos:column="38">wParam</name></decl></param>, <param><decl><type><name pos:line="2664" pos:column="46">sptr_t</name></type> <name pos:line="2664" pos:column="53">lParam</name></decl></param>)</parameter_list> <block pos:line="2664" pos:column="61">{
	<comment type="line" pos:line="2665" pos:column="9">// Find C++ object associated with window.</comment>
	<decl_stmt><decl><type><name pos:line="2666" pos:column="9">ScintillaWin</name> <type:modifier pos:line="2666" pos:column="22">*</type:modifier></type><name pos:line="2666" pos:column="23">sciThis</name> <init pos:line="2666" pos:column="31">= <expr><call><name><name pos:line="2666" pos:column="33">reinterpret_cast</name><argument_list pos:line="2666" pos:column="49">&lt;<argument><expr><name pos:line="2666" pos:column="50">ScintillaWin</name> <op:operator pos:line="2666" pos:column="63">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2666" pos:column="65">(<argument><expr><call><name pos:line="2666" pos:column="66">PointerFromWindow</name><argument_list pos:line="2666" pos:column="83">(<argument><expr><name pos:line="2666" pos:column="84">hWnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<try pos:line="2667" pos:column="9">try <block pos:line="2667" pos:column="13">{
		<comment type="line" pos:line="2668" pos:column="17">// ctp will be zero if WM_CREATE not seen yet</comment>
		<if pos:line="2669" pos:column="17">if <condition pos:line="2669" pos:column="20">(<expr><name pos:line="2669" pos:column="21">sciThis</name> <op:operator pos:line="2669" pos:column="29">==</op:operator> <lit:literal type="number" pos:line="2669" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="2669" pos:column="34"> <block pos:line="2669" pos:column="35">{
			<if pos:line="2670" pos:column="25">if <condition pos:line="2670" pos:column="28">(<expr><name pos:line="2670" pos:column="29">iMessage</name> <op:operator pos:line="2670" pos:column="38">==</op:operator> <name pos:line="2670" pos:column="41">WM_CREATE</name></expr>)</condition><then pos:line="2670" pos:column="51"> <block pos:line="2670" pos:column="52">{
				<comment type="line" pos:line="2671" pos:column="33">// Associate CallTip object with window</comment>
				<decl_stmt><decl><type><name pos:line="2672" pos:column="33">CREATESTRUCT</name> <type:modifier pos:line="2672" pos:column="46">*</type:modifier></type><name pos:line="2672" pos:column="47">pCreate</name> <init pos:line="2672" pos:column="55">= <expr><call><name><name pos:line="2672" pos:column="57">reinterpret_cast</name><argument_list pos:line="2672" pos:column="73">&lt;<argument><expr><name pos:line="2672" pos:column="74">CREATESTRUCT</name> <op:operator pos:line="2672" pos:column="87">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2672" pos:column="89">(<argument><expr><name pos:line="2672" pos:column="90">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="2673" pos:column="33">SetWindowPointer</name><argument_list pos:line="2673" pos:column="49">(<argument><expr><name pos:line="2673" pos:column="50">hWnd</name></expr></argument>, <argument><expr><name><name pos:line="2673" pos:column="56">pCreate</name><op:operator pos:line="2673" pos:column="63">-&gt;</op:operator><name pos:line="2673" pos:column="65">lpCreateParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="2674" pos:column="33">return <expr><lit:literal type="number" pos:line="2674" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then> <else pos:line="2675" pos:column="27">else <block pos:line="2675" pos:column="32">{
				<return pos:line="2676" pos:column="33">return <expr><call><name><op:operator pos:line="2676" pos:column="40">::</op:operator><name pos:line="2676" pos:column="42">DefWindowProc</name></name><argument_list pos:line="2676" pos:column="55">(<argument><expr><name pos:line="2676" pos:column="56">hWnd</name></expr></argument>, <argument><expr><name pos:line="2676" pos:column="62">iMessage</name></expr></argument>, <argument><expr><name pos:line="2676" pos:column="72">wParam</name></expr></argument>, <argument><expr><name pos:line="2676" pos:column="80">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></else></if>
		}</block></then> <else pos:line="2678" pos:column="19">else <block pos:line="2678" pos:column="24">{
			<if pos:line="2679" pos:column="25">if <condition pos:line="2679" pos:column="28">(<expr><name pos:line="2679" pos:column="29">iMessage</name> <op:operator pos:line="2679" pos:column="38">==</op:operator> <name pos:line="2679" pos:column="41">WM_NCDESTROY</name></expr>)</condition><then pos:line="2679" pos:column="54"> <block pos:line="2679" pos:column="55">{
				<expr_stmt><expr><call><name><op:operator pos:line="2680" pos:column="33">::</op:operator><name pos:line="2680" pos:column="35">SetWindowLong</name></name><argument_list pos:line="2680" pos:column="48">(<argument><expr><name pos:line="2680" pos:column="49">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2680" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2680" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="2681" pos:column="33">return <expr><call><name><op:operator pos:line="2681" pos:column="40">::</op:operator><name pos:line="2681" pos:column="42">DefWindowProc</name></name><argument_list pos:line="2681" pos:column="55">(<argument><expr><name pos:line="2681" pos:column="56">hWnd</name></expr></argument>, <argument><expr><name pos:line="2681" pos:column="62">iMessage</name></expr></argument>, <argument><expr><name pos:line="2681" pos:column="72">wParam</name></expr></argument>, <argument><expr><name pos:line="2681" pos:column="80">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then> <else pos:line="2682" pos:column="27">else <if pos:line="2682" pos:column="32">if <condition pos:line="2682" pos:column="35">(<expr><name pos:line="2682" pos:column="36">iMessage</name> <op:operator pos:line="2682" pos:column="45">==</op:operator> <name pos:line="2682" pos:column="48">WM_PAINT</name></expr>)</condition><then pos:line="2682" pos:column="57"> <block pos:line="2682" pos:column="58">{
				<decl_stmt><decl><type><name pos:line="2683" pos:column="33">PAINTSTRUCT</name></type> <name pos:line="2683" pos:column="45">ps</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="2684" pos:column="33">::</op:operator><name pos:line="2684" pos:column="35">BeginPaint</name></name><argument_list pos:line="2684" pos:column="45">(<argument><expr><name pos:line="2684" pos:column="46">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="2684" pos:column="52">&amp;</op:operator><name pos:line="2684" pos:column="53">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="2685" pos:column="33">Surface</name> <type:modifier pos:line="2685" pos:column="41">*</type:modifier></type><name pos:line="2685" pos:column="42">surfaceWindow</name> <init pos:line="2685" pos:column="56">= <expr><call><name><name pos:line="2685" pos:column="58">Surface</name><op:operator pos:line="2685" pos:column="65">::</op:operator><name pos:line="2685" pos:column="67">Allocate</name></name><argument_list pos:line="2685" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="2686" pos:column="33">if <condition pos:line="2686" pos:column="36">(<expr><name pos:line="2686" pos:column="37">surfaceWindow</name></expr>)</condition><then pos:line="2686" pos:column="51"> <block pos:line="2686" pos:column="52">{
					<expr_stmt><expr><call><name><name pos:line="2687" pos:column="41">surfaceWindow</name><op:operator pos:line="2687" pos:column="54">-&gt;</op:operator><name pos:line="2687" pos:column="56">Init</name></name><argument_list pos:line="2687" pos:column="60">(<argument><expr><name><name pos:line="2687" pos:column="61">ps</name><op:operator pos:line="2687" pos:column="63">.</op:operator><name pos:line="2687" pos:column="64">hdc</name></name></expr></argument>, <argument><expr><name pos:line="2687" pos:column="69">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="2688" pos:column="41">surfaceWindow</name><op:operator pos:line="2688" pos:column="54">-&gt;</op:operator><name pos:line="2688" pos:column="56">SetUnicodeMode</name></name><argument_list pos:line="2688" pos:column="70">(<argument><expr><name pos:line="2688" pos:column="71">SC_CP_UTF8</name> <op:operator pos:line="2688" pos:column="82">==</op:operator> <name><name pos:line="2688" pos:column="85">sciThis</name><op:operator pos:line="2688" pos:column="92">-&gt;</op:operator><name pos:line="2688" pos:column="94">ct</name><op:operator pos:line="2688" pos:column="96">.</op:operator><name pos:line="2688" pos:column="97">codePage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="2689" pos:column="41">surfaceWindow</name><op:operator pos:line="2689" pos:column="54">-&gt;</op:operator><name pos:line="2689" pos:column="56">SetDBCSMode</name></name><argument_list pos:line="2689" pos:column="67">(<argument><expr><name><name pos:line="2689" pos:column="68">sciThis</name><op:operator pos:line="2689" pos:column="75">-&gt;</op:operator><name pos:line="2689" pos:column="77">ct</name><op:operator pos:line="2689" pos:column="79">.</op:operator><name pos:line="2689" pos:column="80">codePage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="2690" pos:column="41">sciThis</name><op:operator pos:line="2690" pos:column="48">-&gt;</op:operator><name pos:line="2690" pos:column="50">ct</name><op:operator pos:line="2690" pos:column="52">.</op:operator><name pos:line="2690" pos:column="53">PaintCT</name></name><argument_list pos:line="2690" pos:column="60">(<argument><expr><name pos:line="2690" pos:column="61">surfaceWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="2691" pos:column="41">surfaceWindow</name><op:operator pos:line="2691" pos:column="54">-&gt;</op:operator><name pos:line="2691" pos:column="56">Release</name></name><argument_list pos:line="2691" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><op:operator pos:line="2692" pos:column="41">delete</op:operator> <name pos:line="2692" pos:column="48">surfaceWindow</name></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><op:operator pos:line="2694" pos:column="33">::</op:operator><name pos:line="2694" pos:column="35">EndPaint</name></name><argument_list pos:line="2694" pos:column="43">(<argument><expr><name pos:line="2694" pos:column="44">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="2694" pos:column="50">&amp;</op:operator><name pos:line="2694" pos:column="51">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="2695" pos:column="33">return <expr><lit:literal type="number" pos:line="2695" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then> <else pos:line="2696" pos:column="27">else <if pos:line="2696" pos:column="32">if <condition pos:line="2696" pos:column="35">(<expr><op:operator pos:line="2696" pos:column="36">(</op:operator><name pos:line="2696" pos:column="37">iMessage</name> <op:operator pos:line="2696" pos:column="46">==</op:operator> <name pos:line="2696" pos:column="49">WM_NCLBUTTONDOWN</name><op:operator pos:line="2696" pos:column="65">)</op:operator> <op:operator pos:line="2696" pos:column="67">||</op:operator> <op:operator pos:line="2696" pos:column="70">(</op:operator><name pos:line="2696" pos:column="71">iMessage</name> <op:operator pos:line="2696" pos:column="80">==</op:operator> <name pos:line="2696" pos:column="83">WM_NCLBUTTONDBLCLK</name><op:operator pos:line="2696" pos:column="101">)</op:operator></expr>)</condition><then pos:line="2696" pos:column="103"> <block pos:line="2696" pos:column="104">{
				<decl_stmt><decl><type><name pos:line="2697" pos:column="33">POINT</name></type> <name pos:line="2697" pos:column="39">pt</name></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="2698" pos:column="33">pt</name><op:operator pos:line="2698" pos:column="35">.</op:operator><name pos:line="2698" pos:column="36">x</name></name> <op:operator pos:line="2698" pos:column="38">=</op:operator> <call><name><name pos:line="2698" pos:column="40">static_cast</name><argument_list pos:line="2698" pos:column="51">&lt;<argument><expr><name pos:line="2698" pos:column="52">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2698" pos:column="58">(<argument><expr><call><name pos:line="2698" pos:column="59">LOWORD</name><argument_list pos:line="2698" pos:column="65">(<argument><expr><name pos:line="2698" pos:column="66">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="2699" pos:column="33">pt</name><op:operator pos:line="2699" pos:column="35">.</op:operator><name pos:line="2699" pos:column="36">y</name></name> <op:operator pos:line="2699" pos:column="38">=</op:operator> <call><name><name pos:line="2699" pos:column="40">static_cast</name><argument_list pos:line="2699" pos:column="51">&lt;<argument><expr><name pos:line="2699" pos:column="52">short</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2699" pos:column="58">(<argument><expr><call><name pos:line="2699" pos:column="59">HIWORD</name><argument_list pos:line="2699" pos:column="65">(<argument><expr><name pos:line="2699" pos:column="66">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="2700" pos:column="33">ScreenToClient</name><argument_list pos:line="2700" pos:column="47">(<argument><expr><name pos:line="2700" pos:column="48">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="2700" pos:column="54">&amp;</op:operator><name pos:line="2700" pos:column="55">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="2701" pos:column="33">sciThis</name><op:operator pos:line="2701" pos:column="40">-&gt;</op:operator><name pos:line="2701" pos:column="42">ct</name><op:operator pos:line="2701" pos:column="44">.</op:operator><name pos:line="2701" pos:column="45">MouseClick</name></name><argument_list pos:line="2701" pos:column="55">(<argument><expr><call><name pos:line="2701" pos:column="56">Point</name><argument_list pos:line="2701" pos:column="61">(<argument><expr><name><name pos:line="2701" pos:column="62">pt</name><op:operator pos:line="2701" pos:column="64">.</op:operator><name pos:line="2701" pos:column="65">x</name></name></expr></argument>, <argument><expr><name><name pos:line="2701" pos:column="68">pt</name><op:operator pos:line="2701" pos:column="70">.</op:operator><name pos:line="2701" pos:column="71">y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="2702" pos:column="33">sciThis</name><op:operator pos:line="2702" pos:column="40">-&gt;</op:operator><name pos:line="2702" pos:column="42">CallTipClick</name></name><argument_list pos:line="2702" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
				<return pos:line="2703" pos:column="33">return <expr><lit:literal type="number" pos:line="2703" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then> <else pos:line="2704" pos:column="27">else <if pos:line="2704" pos:column="32">if <condition pos:line="2704" pos:column="35">(<expr><name pos:line="2704" pos:column="36">iMessage</name> <op:operator pos:line="2704" pos:column="45">==</op:operator> <name pos:line="2704" pos:column="48">WM_LBUTTONDOWN</name></expr>)</condition><then pos:line="2704" pos:column="63"> <block pos:line="2704" pos:column="64">{
				<comment type="line" pos:line="2705" pos:column="33">// This does not fire due to the hit test code</comment>
				<expr_stmt><expr><call><name><name pos:line="2706" pos:column="33">sciThis</name><op:operator pos:line="2706" pos:column="40">-&gt;</op:operator><name pos:line="2706" pos:column="42">ct</name><op:operator pos:line="2706" pos:column="44">.</op:operator><name pos:line="2706" pos:column="45">MouseClick</name></name><argument_list pos:line="2706" pos:column="55">(<argument><expr><call><name><name pos:line="2706" pos:column="56">Point</name><op:operator pos:line="2706" pos:column="61">::</op:operator><name pos:line="2706" pos:column="63">FromLong</name></name><argument_list pos:line="2706" pos:column="71">(<argument><expr><name pos:line="2706" pos:column="72">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="2707" pos:column="33">sciThis</name><op:operator pos:line="2707" pos:column="40">-&gt;</op:operator><name pos:line="2707" pos:column="42">CallTipClick</name></name><argument_list pos:line="2707" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
				<return pos:line="2708" pos:column="33">return <expr><lit:literal type="number" pos:line="2708" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then> <else pos:line="2709" pos:column="27">else <if pos:line="2709" pos:column="32">if <condition pos:line="2709" pos:column="35">(<expr><name pos:line="2709" pos:column="36">iMessage</name> <op:operator pos:line="2709" pos:column="45">==</op:operator> <name pos:line="2709" pos:column="48">WM_SETCURSOR</name></expr>)</condition><then pos:line="2709" pos:column="61"> <block pos:line="2709" pos:column="62">{
				<expr_stmt><expr><call><name><op:operator pos:line="2710" pos:column="33">::</op:operator><name pos:line="2710" pos:column="35">SetCursor</name></name><argument_list pos:line="2710" pos:column="44">(<argument><expr><call><name><op:operator pos:line="2710" pos:column="45">::</op:operator><name pos:line="2710" pos:column="47">LoadCursor</name></name><argument_list pos:line="2710" pos:column="57">(<argument><expr><name pos:line="2710" pos:column="58">NULL</name></expr></argument>, <argument><expr><name pos:line="2710" pos:column="64">IDC_ARROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="2711" pos:column="33">return <expr><lit:literal type="number" pos:line="2711" pos:column="40">0</lit:literal></expr>;</return>
			}</block></then> <else pos:line="2712" pos:column="27">else <if pos:line="2712" pos:column="32">if <condition pos:line="2712" pos:column="35">(<expr><name pos:line="2712" pos:column="36">iMessage</name> <op:operator pos:line="2712" pos:column="45">==</op:operator> <name pos:line="2712" pos:column="48">WM_NCHITTEST</name></expr>)</condition><then pos:line="2712" pos:column="61"> <block pos:line="2712" pos:column="62">{
				<return pos:line="2713" pos:column="33">return <expr><name pos:line="2713" pos:column="40">HTCAPTION</name></expr>;</return>
			}</block></then> <else pos:line="2714" pos:column="27">else <block pos:line="2714" pos:column="32">{
				<return pos:line="2715" pos:column="33">return <expr><call><name><op:operator pos:line="2715" pos:column="40">::</op:operator><name pos:line="2715" pos:column="42">DefWindowProc</name></name><argument_list pos:line="2715" pos:column="55">(<argument><expr><name pos:line="2715" pos:column="56">hWnd</name></expr></argument>, <argument><expr><name pos:line="2715" pos:column="62">iMessage</name></expr></argument>, <argument><expr><name pos:line="2715" pos:column="72">wParam</name></expr></argument>, <argument><expr><name pos:line="2715" pos:column="80">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></else></if>
	}</block> <catch pos:line="2718" pos:column="11">catch <parameter_list pos:line="2718" pos:column="17">(<param><decl><type><type:modifier pos:line="2718" pos:column="18">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2718" pos:column="23">{
		<expr_stmt><expr><name><name pos:line="2719" pos:column="17">sciThis</name><op:operator pos:line="2719" pos:column="24">-&gt;</op:operator><name pos:line="2719" pos:column="26">errorStatus</name></name> <op:operator pos:line="2719" pos:column="38">=</op:operator> <name pos:line="2719" pos:column="40">SC_STATUS_FAILURE</name></expr>;</expr_stmt>
	}</block></catch></try>
	<return pos:line="2721" pos:column="9">return <expr><call><name><op:operator pos:line="2721" pos:column="16">::</op:operator><name pos:line="2721" pos:column="18">DefWindowProc</name></name><argument_list pos:line="2721" pos:column="31">(<argument><expr><name pos:line="2721" pos:column="32">hWnd</name></expr></argument>, <argument><expr><name pos:line="2721" pos:column="38">iMessage</name></expr></argument>, <argument><expr><name pos:line="2721" pos:column="48">wParam</name></expr></argument>, <argument><expr><name pos:line="2721" pos:column="56">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2724" pos:column="1">sptr_t</name></type> <name><name pos:line="2724" pos:column="8">ScintillaWin</name><op:operator pos:line="2724" pos:column="20">::</op:operator><name pos:line="2724" pos:column="22">DirectFunction</name></name><parameter_list pos:line="2724" pos:column="36">(
    <param><decl><type><name pos:line="2725" pos:column="5">ScintillaWin</name> <type:modifier pos:line="2725" pos:column="18">*</type:modifier></type><name pos:line="2725" pos:column="19">sci</name></decl></param>, <param><decl><type><name pos:line="2725" pos:column="24">UINT</name></type> <name pos:line="2725" pos:column="29">iMessage</name></decl></param>, <param><decl><type><name pos:line="2725" pos:column="39">uptr_t</name></type> <name pos:line="2725" pos:column="46">wParam</name></decl></param>, <param><decl><type><name pos:line="2725" pos:column="54">sptr_t</name></type> <name pos:line="2725" pos:column="61">lParam</name></decl></param>)</parameter_list> <block pos:line="2725" pos:column="69">{
	<expr_stmt><expr><call><name pos:line="2726" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="2726" pos:column="24">(<argument><expr><call><name><op:operator pos:line="2726" pos:column="25">::</op:operator><name pos:line="2726" pos:column="27">GetCurrentThreadId</name></name><argument_list pos:line="2726" pos:column="45">()</argument_list></call> <op:operator pos:line="2726" pos:column="48">==</op:operator> <call><name><op:operator pos:line="2726" pos:column="51">::</op:operator><name pos:line="2726" pos:column="53">GetWindowThreadProcessId</name></name><argument_list pos:line="2726" pos:column="77">(<argument><expr><call><name><name pos:line="2726" pos:column="78">sci</name><op:operator pos:line="2726" pos:column="81">-&gt;</op:operator><name pos:line="2726" pos:column="83">MainHWND</name></name><argument_list pos:line="2726" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2726" pos:column="95">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="2727" pos:column="9">return <expr><call><name><name pos:line="2727" pos:column="16">sci</name><op:operator pos:line="2727" pos:column="19">-&gt;</op:operator><name pos:line="2727" pos:column="21">WndProc</name></name><argument_list pos:line="2727" pos:column="28">(<argument><expr><name pos:line="2727" pos:column="29">iMessage</name></expr></argument>, <argument><expr><name pos:line="2727" pos:column="39">wParam</name></expr></argument>, <argument><expr><name pos:line="2727" pos:column="47">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<extern pos:line="2730" pos:column="1">extern <lit:literal type="string" pos:line="2730" pos:column="8">"C"</lit:literal>
<cpp:ifndef pos:line="2731" pos:column="1">#<cpp:directive pos:line="2731" pos:column="2">ifndef</cpp:directive> <name pos:line="2731" pos:column="9">STATIC_BUILD</name></cpp:ifndef>
<macro><name pos:line="2732" pos:column="1">__declspec</name><argument_list pos:line="2732" pos:column="11">(<argument pos:line="2732" pos:column="12">dllexport</argument>)</argument_list></macro>
<cpp:endif pos:line="2733" pos:column="1">#<cpp:directive pos:line="2733" pos:column="2">endif</cpp:directive></cpp:endif>
<function><type><name pos:line="2734" pos:column="1">sptr_t</name> <name pos:line="2734" pos:column="8">__stdcall</name></type> <name pos:line="2734" pos:column="18">Scintilla_DirectFunction</name><parameter_list pos:line="2734" pos:column="42">(
    <param><decl><type><name pos:line="2735" pos:column="5">ScintillaWin</name> <type:modifier pos:line="2735" pos:column="18">*</type:modifier></type><name pos:line="2735" pos:column="19">sci</name></decl></param>, <param><decl><type><name pos:line="2735" pos:column="24">UINT</name></type> <name pos:line="2735" pos:column="29">iMessage</name></decl></param>, <param><decl><type><name pos:line="2735" pos:column="39">uptr_t</name></type> <name pos:line="2735" pos:column="46">wParam</name></decl></param>, <param><decl><type><name pos:line="2735" pos:column="54">sptr_t</name></type> <name pos:line="2735" pos:column="61">lParam</name></decl></param>)</parameter_list> <block pos:line="2735" pos:column="69">{
	<return pos:line="2736" pos:column="9">return <expr><call><name><name pos:line="2736" pos:column="16">sci</name><op:operator pos:line="2736" pos:column="19">-&gt;</op:operator><name pos:line="2736" pos:column="21">WndProc</name></name><argument_list pos:line="2736" pos:column="28">(<argument><expr><name pos:line="2736" pos:column="29">iMessage</name></expr></argument>, <argument><expr><name pos:line="2736" pos:column="39">wParam</name></expr></argument>, <argument><expr><name pos:line="2736" pos:column="47">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function></extern>

<function><type><name pos:line="2739" pos:column="1">sptr_t</name> <name pos:line="2739" pos:column="8">PASCAL</name></type> <name><name pos:line="2739" pos:column="15">ScintillaWin</name><op:operator pos:line="2739" pos:column="27">::</op:operator><name pos:line="2739" pos:column="29">SWndProc</name></name><parameter_list pos:line="2739" pos:column="37">(
    <param><decl><type><name pos:line="2740" pos:column="5">HWND</name></type> <name pos:line="2740" pos:column="10">hWnd</name></decl></param>, <param><decl><type><name pos:line="2740" pos:column="16">UINT</name></type> <name pos:line="2740" pos:column="21">iMessage</name></decl></param>, <param><decl><type><name pos:line="2740" pos:column="31">WPARAM</name></type> <name pos:line="2740" pos:column="38">wParam</name></decl></param>, <param><decl><type><name pos:line="2740" pos:column="46">sptr_t</name></type> <name pos:line="2740" pos:column="53">lParam</name></decl></param>)</parameter_list> <block pos:line="2740" pos:column="61">{
	<comment type="line" pos:line="2741" pos:column="9">//Platform::DebugPrintf("S W:%x M:%x WP:%x L:%x\n", hWnd, iMessage, wParam, lParam);</comment>

	<comment type="line" pos:line="2743" pos:column="9">// Find C++ object associated with window.</comment>
	<decl_stmt><decl><type><name pos:line="2744" pos:column="9">ScintillaWin</name> <type:modifier pos:line="2744" pos:column="22">*</type:modifier></type><name pos:line="2744" pos:column="23">sci</name> <init pos:line="2744" pos:column="27">= <expr><call><name><name pos:line="2744" pos:column="29">reinterpret_cast</name><argument_list pos:line="2744" pos:column="45">&lt;<argument><expr><name pos:line="2744" pos:column="46">ScintillaWin</name> <op:operator pos:line="2744" pos:column="59">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="2744" pos:column="61">(<argument><expr><call><name pos:line="2744" pos:column="62">PointerFromWindow</name><argument_list pos:line="2744" pos:column="79">(<argument><expr><name pos:line="2744" pos:column="80">hWnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="2745" pos:column="9">// sci will be zero if WM_CREATE not seen yet</comment>
	<if pos:line="2746" pos:column="9">if <condition pos:line="2746" pos:column="12">(<expr><name pos:line="2746" pos:column="13">sci</name> <op:operator pos:line="2746" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="2746" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="2746" pos:column="22"> <block pos:line="2746" pos:column="23">{
		<try pos:line="2747" pos:column="17">try <block pos:line="2747" pos:column="21">{
			<if pos:line="2748" pos:column="25">if <condition pos:line="2748" pos:column="28">(<expr><name pos:line="2748" pos:column="29">iMessage</name> <op:operator pos:line="2748" pos:column="38">==</op:operator> <name pos:line="2748" pos:column="41">WM_CREATE</name></expr>)</condition><then pos:line="2748" pos:column="51"> <block pos:line="2748" pos:column="52">{
				<comment type="line" pos:line="2749" pos:column="33">// Create C++ object associated with window</comment>
				<expr_stmt><expr><name pos:line="2750" pos:column="33">sci</name> <op:operator pos:line="2750" pos:column="37">=</op:operator> <op:operator pos:line="2750" pos:column="39">new</op:operator> <call><name pos:line="2750" pos:column="43">ScintillaWin</name><argument_list pos:line="2750" pos:column="55">(<argument><expr><name pos:line="2750" pos:column="56">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="2751" pos:column="33">SetWindowPointer</name><argument_list pos:line="2751" pos:column="49">(<argument><expr><name pos:line="2751" pos:column="50">hWnd</name></expr></argument>, <argument><expr><name pos:line="2751" pos:column="56">sci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="2752" pos:column="33">return <expr><call><name><name pos:line="2752" pos:column="40">sci</name><op:operator pos:line="2752" pos:column="43">-&gt;</op:operator><name pos:line="2752" pos:column="45">WndProc</name></name><argument_list pos:line="2752" pos:column="52">(<argument><expr><name pos:line="2752" pos:column="53">iMessage</name></expr></argument>, <argument><expr><name pos:line="2752" pos:column="63">wParam</name></expr></argument>, <argument><expr><name pos:line="2752" pos:column="71">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
		}</block> <catch pos:line="2754" pos:column="19">catch <parameter_list pos:line="2754" pos:column="25">(<param><decl><type><type:modifier pos:line="2754" pos:column="26">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2754" pos:column="31">{
		}</block></catch></try>
		<return pos:line="2756" pos:column="17">return <expr><call><name><op:operator pos:line="2756" pos:column="24">::</op:operator><name pos:line="2756" pos:column="26">DefWindowProc</name></name><argument_list pos:line="2756" pos:column="39">(<argument><expr><name pos:line="2756" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="2756" pos:column="46">iMessage</name></expr></argument>, <argument><expr><name pos:line="2756" pos:column="56">wParam</name></expr></argument>, <argument><expr><name pos:line="2756" pos:column="64">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="2757" pos:column="11">else <block pos:line="2757" pos:column="16">{
		<if pos:line="2758" pos:column="17">if <condition pos:line="2758" pos:column="20">(<expr><name pos:line="2758" pos:column="21">iMessage</name> <op:operator pos:line="2758" pos:column="30">==</op:operator> <name pos:line="2758" pos:column="33">WM_NCDESTROY</name></expr>)</condition><then pos:line="2758" pos:column="46"> <block pos:line="2758" pos:column="47">{
			<try pos:line="2759" pos:column="25">try <block pos:line="2759" pos:column="29">{
				<expr_stmt><expr><call><name><name pos:line="2760" pos:column="33">sci</name><op:operator pos:line="2760" pos:column="36">-&gt;</op:operator><name pos:line="2760" pos:column="38">Finalise</name></name><argument_list pos:line="2760" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="2761" pos:column="33">delete</op:operator> <name pos:line="2761" pos:column="40">sci</name></expr>;</expr_stmt>
			}</block> <catch pos:line="2762" pos:column="27">catch <parameter_list pos:line="2762" pos:column="33">(<param><decl><type><type:modifier pos:line="2762" pos:column="34">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="2762" pos:column="39">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><op:operator pos:line="2764" pos:column="25">::</op:operator><name pos:line="2764" pos:column="27">SetWindowLong</name></name><argument_list pos:line="2764" pos:column="40">(<argument><expr><name pos:line="2764" pos:column="41">hWnd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2764" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2764" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="2765" pos:column="25">return <expr><call><name><op:operator pos:line="2765" pos:column="32">::</op:operator><name pos:line="2765" pos:column="34">DefWindowProc</name></name><argument_list pos:line="2765" pos:column="47">(<argument><expr><name pos:line="2765" pos:column="48">hWnd</name></expr></argument>, <argument><expr><name pos:line="2765" pos:column="54">iMessage</name></expr></argument>, <argument><expr><name pos:line="2765" pos:column="64">wParam</name></expr></argument>, <argument><expr><name pos:line="2765" pos:column="72">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then> <else pos:line="2766" pos:column="19">else <block pos:line="2766" pos:column="24">{
			<return pos:line="2767" pos:column="25">return <expr><call><name><name pos:line="2767" pos:column="32">sci</name><op:operator pos:line="2767" pos:column="35">-&gt;</op:operator><name pos:line="2767" pos:column="37">WndProc</name></name><argument_list pos:line="2767" pos:column="44">(<argument><expr><name pos:line="2767" pos:column="45">iMessage</name></expr></argument>, <argument><expr><name pos:line="2767" pos:column="55">wParam</name></expr></argument>, <argument><expr><name pos:line="2767" pos:column="63">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="2772" pos:column="1">// This function is externally visible so it can be called from container when building statically.</comment>
<comment type="line" pos:line="2773" pos:column="1">// Must be called once only.</comment>
<function><type><name pos:line="2774" pos:column="1">int</name></type> <name pos:line="2774" pos:column="5">Scintilla_RegisterClasses</name><parameter_list pos:line="2774" pos:column="30">(<param><decl><type><name pos:line="2774" pos:column="31">void</name> <type:modifier pos:line="2774" pos:column="36">*</type:modifier></type><name pos:line="2774" pos:column="37">hInstance</name></decl></param>)</parameter_list> <block pos:line="2774" pos:column="48">{
	<expr_stmt><expr><call><name pos:line="2775" pos:column="9">Platform_Initialise</name><argument_list pos:line="2775" pos:column="28">(<argument><expr><name pos:line="2775" pos:column="29">hInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2776" pos:column="9">bool</name></type> <name pos:line="2776" pos:column="14">result</name> <init pos:line="2776" pos:column="21">= <expr><call><name><name pos:line="2776" pos:column="23">ScintillaWin</name><op:operator pos:line="2776" pos:column="35">::</op:operator><name pos:line="2776" pos:column="37">Register</name></name><argument_list pos:line="2776" pos:column="45">(<argument><expr><call><name><name pos:line="2776" pos:column="46">reinterpret_cast</name><argument_list pos:line="2776" pos:column="62">&lt;<argument><expr><name pos:line="2776" pos:column="63">HINSTANCE</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2776" pos:column="73">(<argument><expr><name pos:line="2776" pos:column="74">hInstance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:line="2777" pos:column="1">#<cpp:directive pos:line="2777" pos:column="2">ifdef</cpp:directive> <name pos:line="2777" pos:column="8">SCI_LEXER</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="2778" pos:column="9">Scintilla_LinkLexers</name><argument_list pos:line="2778" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2779" pos:column="1">#<cpp:directive pos:line="2779" pos:column="2">endif</cpp:directive></cpp:endif>
	<return pos:line="2780" pos:column="9">return <expr><name pos:line="2780" pos:column="16">result</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="2783" pos:column="1">// This function is externally visible so it can be called from container when building statically.</comment>
<function><type><name pos:line="2784" pos:column="1">int</name></type> <name pos:line="2784" pos:column="5">Scintilla_ReleaseResources</name><parameter_list pos:line="2784" pos:column="31">()</parameter_list> <block pos:line="2784" pos:column="34">{
	<decl_stmt><decl><type><name pos:line="2785" pos:column="9">bool</name></type> <name pos:line="2785" pos:column="14">result</name> <init pos:line="2785" pos:column="21">= <expr><call><name><name pos:line="2785" pos:column="23">ScintillaWin</name><op:operator pos:line="2785" pos:column="35">::</op:operator><name pos:line="2785" pos:column="37">Unregister</name></name><argument_list pos:line="2785" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2786" pos:column="9">Platform_Finalise</name><argument_list pos:line="2786" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
	<return pos:line="2787" pos:column="9">return <expr><name pos:line="2787" pos:column="16">result</name></expr>;</return>
}</block></function>

<cpp:ifndef pos:line="2790" pos:column="1">#<cpp:directive pos:line="2790" pos:column="2">ifndef</cpp:directive> <name pos:line="2790" pos:column="9">STATIC_BUILD</name></cpp:ifndef>
<extern pos:line="2791" pos:column="1">extern <lit:literal type="string" pos:line="2791" pos:column="8">"C"</lit:literal> <function><type><name pos:line="2791" pos:column="12">int</name> <name pos:line="2791" pos:column="16">APIENTRY</name></type> <name pos:line="2791" pos:column="25">DllMain</name><parameter_list pos:line="2791" pos:column="32">(<param><decl><type><name pos:line="2791" pos:column="33">HINSTANCE</name></type> <name pos:line="2791" pos:column="43">hInstance</name></decl></param>, <param><decl><type><name pos:line="2791" pos:column="54">DWORD</name></type> <name pos:line="2791" pos:column="60">dwReason</name></decl></param>, <param><decl><type><name pos:line="2791" pos:column="70">LPVOID</name></type></decl></param>)</parameter_list> <block pos:line="2791" pos:column="78">{
	<comment type="line" pos:line="2792" pos:column="9">//Platform::DebugPrintf("Scintilla::DllMain %d %d\n", hInstance, dwReason);</comment>
	<if pos:line="2793" pos:column="9">if <condition pos:line="2793" pos:column="12">(<expr><name pos:line="2793" pos:column="13">dwReason</name> <op:operator pos:line="2793" pos:column="22">==</op:operator> <name pos:line="2793" pos:column="25">DLL_PROCESS_ATTACH</name></expr>)</condition><then pos:line="2793" pos:column="44"> <block pos:line="2793" pos:column="45">{
		<if pos:line="2794" pos:column="17">if <condition pos:line="2794" pos:column="20">(<expr><op:operator pos:line="2794" pos:column="21">!</op:operator><call><name pos:line="2794" pos:column="22">Scintilla_RegisterClasses</name><argument_list pos:line="2794" pos:column="47">(<argument><expr><name pos:line="2794" pos:column="48">hInstance</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2794" pos:column="59">
			<return pos:line="2795" pos:column="25">return <expr><name pos:line="2795" pos:column="32">FALSE</name></expr>;</return></then></if>
	}</block></then> <else pos:line="2796" pos:column="11">else <if pos:line="2796" pos:column="16">if <condition pos:line="2796" pos:column="19">(<expr><name pos:line="2796" pos:column="20">dwReason</name> <op:operator pos:line="2796" pos:column="29">==</op:operator> <name pos:line="2796" pos:column="32">DLL_PROCESS_DETACH</name></expr>)</condition><then pos:line="2796" pos:column="51"> <block pos:line="2796" pos:column="52">{
		<expr_stmt><expr><call><name pos:line="2797" pos:column="17">Scintilla_ReleaseResources</name><argument_list pos:line="2797" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<return pos:line="2799" pos:column="9">return <expr><name pos:line="2799" pos:column="16">TRUE</name></expr>;</return>
}</block></function></extern>
<cpp:endif pos:line="2801" pos:column="1">#<cpp:directive pos:line="2801" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
