<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\TabBar\ControlsTab.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">CONTROLS_TAB_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">CONTROLS_TAB_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">TAB_BAR_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"TabBar.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//TAB_BAR_H</comment>

<struct pos:line="36" pos:column="1">struct <name pos:line="36" pos:column="8">DlgInfo</name> <block pos:line="36" pos:column="16">{<public type="default" pos:line="36" pos:column="17">
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">Window</name> <type:modifier pos:line="37" pos:column="12">*</type:modifier></type><name pos:line="37" pos:column="13">_dlg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">generic_string</name></type> <name pos:line="38" pos:column="20">_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">generic_string</name></type> <name pos:line="39" pos:column="24">_internalName</name></decl>;</decl_stmt>

	<constructor><name pos:line="41" pos:column="9">DlgInfo</name><parameter_list pos:line="41" pos:column="16">(<param><decl><type><name pos:line="41" pos:column="17">Window</name> <type:modifier pos:line="41" pos:column="24">*</type:modifier></type><name pos:line="41" pos:column="25">dlg</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="30">TCHAR</name> <type:modifier pos:line="41" pos:column="36">*</type:modifier></type><name pos:line="41" pos:column="37">name</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="43">TCHAR</name> <type:modifier pos:line="41" pos:column="49">*</type:modifier></type><name pos:line="41" pos:column="50">internalName</name> <init pos:line="41" pos:column="63">= <expr><name pos:line="41" pos:column="65">NULL</name></expr></init></decl></param>)</parameter_list><member_list pos:line="41" pos:column="70">: <call><name pos:line="41" pos:column="72">_dlg</name><argument_list pos:line="41" pos:column="76">(<argument><expr><name pos:line="41" pos:column="77">dlg</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="81">,</op:operator> <call><name pos:line="41" pos:column="83">_name</name><argument_list pos:line="41" pos:column="88">(<argument><expr><name pos:line="41" pos:column="89">name</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="94">,</op:operator> <call><name pos:line="41" pos:column="96">_internalName</name><argument_list pos:line="41" pos:column="109">(<argument><expr><name pos:line="41" pos:column="110">internalName</name><op:operator pos:line="41" pos:column="122">?</op:operator><name pos:line="41" pos:column="123">internalName</name><op:operator pos:line="41" pos:column="135">:</op:operator><call><name pos:line="41" pos:column="136">TEXT</name><argument_list pos:line="41" pos:column="140">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="141">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="41" pos:column="146">{}</block></constructor><empty_stmt pos:line="41" pos:column="148">;</empty_stmt>
</public>}</block>;</struct>

<typedef pos:line="44" pos:column="1">typedef <type><name><name pos:line="44" pos:column="9">std</name><op:operator pos:line="44" pos:column="12">::</op:operator><name><name pos:line="44" pos:column="14">vector</name><argument_list pos:line="44" pos:column="20">&lt;<argument><expr><name pos:line="44" pos:column="21">DlgInfo</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="44" pos:column="30">WindowVector</name>;</typedef>

<class pos:line="46" pos:column="1">class <name pos:line="46" pos:column="7">ControlsTab</name> <super pos:line="46" pos:column="19">: <specifier pos:line="46" pos:column="21">public</specifier> <name pos:line="46" pos:column="28">TabBar</name></super>
<block pos:line="47" pos:column="1">{<private type="default" pos:line="47" pos:column="2">
</private><public pos:line="48" pos:column="1">public :
	<constructor><name pos:line="49" pos:column="9">ControlsTab</name><parameter_list pos:line="49" pos:column="20">()</parameter_list> <member_list pos:line="49" pos:column="23">: <call><name pos:line="49" pos:column="25">TabBar</name><argument_list pos:line="49" pos:column="31">()</argument_list></call><op:operator pos:line="49" pos:column="33">,</op:operator> <call><name pos:line="49" pos:column="35">_pWinVector</name><argument_list pos:line="49" pos:column="46">(<argument><expr><name pos:line="49" pos:column="47">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="52">,</op:operator> <call><name pos:line="49" pos:column="54">_current</name><argument_list pos:line="49" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="49" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="65">,</op:operator> <call><name pos:line="49" pos:column="67">_isVertical</name><argument_list pos:line="49" pos:column="78">(<argument><expr><lit:literal type="boolean" pos:line="49" pos:column="79">false</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="49" pos:column="86">{}</block></constructor><empty_stmt pos:line="49" pos:column="88">;</empty_stmt>
	<destructor><name pos:line="50" pos:column="9">~<name pos:line="50" pos:column="10">ControlsTab</name></name><parameter_list pos:line="50" pos:column="21">()</parameter_list><block pos:line="50" pos:column="23">{}</block></destructor><empty_stmt pos:line="50" pos:column="25">;</empty_stmt>

	<function><type><specifier pos:line="52" pos:column="9">virtual</specifier> <name pos:line="52" pos:column="17">void</name></type> <name pos:line="52" pos:column="22">init</name><parameter_list pos:line="52" pos:column="26">(<param><decl><type><name pos:line="52" pos:column="27">HINSTANCE</name></type> <name pos:line="52" pos:column="37">hInst</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="44">HWND</name></type> <name pos:line="52" pos:column="49">hwnd</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="55">bool</name></type> <name pos:line="52" pos:column="60">isVertical</name> <init pos:line="52" pos:column="71">= <expr><lit:literal type="boolean" pos:line="52" pos:column="73">false</lit:literal></expr></init></decl></param>, <name pos:line="52" pos:column="80">bool</name> <name pos:line="52" pos:column="85">isTraditional</name> <op:operator pos:line="52" pos:column="99">=</op:operator> <lit:literal type="boolean" pos:line="52" pos:column="101">false</lit:literal>, <name pos:line="52" pos:column="108">bool</name> <name pos:line="52" pos:column="113">isMultiLine</name> <op:operator pos:line="52" pos:column="125">=</op:operator> <lit:literal type="boolean" pos:line="52" pos:column="127">false</lit:literal>)</parameter_list> <block pos:line="52" pos:column="134">{
		<expr_stmt><expr><name pos:line="53" pos:column="17">_isVertical</name> <op:operator pos:line="53" pos:column="29">=</op:operator> <name pos:line="53" pos:column="31">isVertical</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="54" pos:column="17">TabBar</name><op:operator pos:line="54" pos:column="23">::</op:operator><name pos:line="54" pos:column="25">init</name></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">hInst</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="37">hwnd</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="54" pos:column="43">false</lit:literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="50">isTraditional</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="65">isMultiLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="55" pos:column="10">;</empty_stmt>
	<function_decl><type><name pos:line="56" pos:column="9">void</name></type> <name><name pos:line="56" pos:column="14">ControlsTab</name><op:operator pos:line="56" pos:column="25">::</op:operator><name pos:line="56" pos:column="27">createTabs</name></name><parameter_list pos:line="56" pos:column="37">(<param><decl><type><name pos:line="56" pos:column="38">WindowVector</name> <type:modifier pos:line="56" pos:column="51">&amp;</type:modifier></type> <name pos:line="56" pos:column="53">winVector</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="58" pos:column="9">void</name></type> <name pos:line="58" pos:column="14">destroy</name><parameter_list pos:line="58" pos:column="21">()</parameter_list> <block pos:line="58" pos:column="24">{
		<expr_stmt><expr><call><name><name pos:line="59" pos:column="17">TabBar</name><op:operator pos:line="59" pos:column="23">::</op:operator><name pos:line="59" pos:column="25">destroy</name></name><argument_list pos:line="59" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="60" pos:column="10">;</empty_stmt>
	
	<function_decl><type><specifier pos:line="62" pos:column="9">virtual</specifier> <name pos:line="62" pos:column="17">void</name></type> <name pos:line="62" pos:column="22">reSizeTo</name><parameter_list pos:line="62" pos:column="30">(<param><decl><type><name pos:line="62" pos:column="31">RECT</name> <type:modifier pos:line="62" pos:column="36">&amp;</type:modifier></type> <name pos:line="62" pos:column="38">rc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="63" pos:column="9">void</name></type> <name pos:line="63" pos:column="14">activateWindowAt</name><parameter_list pos:line="63" pos:column="30">(<param><decl><type><name pos:line="63" pos:column="31">int</name></type> <name pos:line="63" pos:column="35">index</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="65" pos:column="9">void</name></type> <name pos:line="65" pos:column="14">clickedUpdate</name><parameter_list pos:line="65" pos:column="27">()</parameter_list>
	<block pos:line="66" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="67" pos:column="17">int</name></type> <name pos:line="67" pos:column="21">indexClicked</name> <init pos:line="67" pos:column="34">= <expr><call><name pos:line="67" pos:column="36">int</name><argument_list pos:line="67" pos:column="39">(<argument><expr><call><name><op:operator pos:line="67" pos:column="40">::</op:operator><name pos:line="67" pos:column="42">SendMessage</name></name><argument_list pos:line="67" pos:column="53">(<argument><expr><name pos:line="67" pos:column="54">_hSelf</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="62">TCM_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="67" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="67" pos:column="80">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">activateWindowAt</name><argument_list pos:line="68" pos:column="33">(<argument><expr><name pos:line="68" pos:column="34">indexClicked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="69" pos:column="10">;</empty_stmt>
	<function_decl><type><name pos:line="70" pos:column="9">void</name></type> <name pos:line="70" pos:column="14">renameTab</name><parameter_list pos:line="70" pos:column="23">(<param><decl><type><name pos:line="70" pos:column="24">int</name></type> <name pos:line="70" pos:column="28">index</name></decl></param>, <param><decl><type><specifier pos:line="70" pos:column="35">const</specifier> <name pos:line="70" pos:column="41">TCHAR</name> <type:modifier pos:line="70" pos:column="47">*</type:modifier></type><name pos:line="70" pos:column="48">newName</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="71" pos:column="9">bool</name></type> <name pos:line="71" pos:column="14">renameTab</name><parameter_list pos:line="71" pos:column="23">(<param><decl><type><specifier pos:line="71" pos:column="24">const</specifier> <name pos:line="71" pos:column="30">TCHAR</name> <type:modifier pos:line="71" pos:column="36">*</type:modifier></type><name pos:line="71" pos:column="37">internalName</name></decl></param>, <param><decl><type><specifier pos:line="71" pos:column="51">const</specifier> <name pos:line="71" pos:column="57">TCHAR</name> <type:modifier pos:line="71" pos:column="63">*</type:modifier></type><name pos:line="71" pos:column="64">newName</name></decl></param>)</parameter_list>;</function_decl>

</public><private pos:line="73" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">WindowVector</name> <type:modifier pos:line="74" pos:column="22">*</type:modifier></type><name pos:line="74" pos:column="23">_pWinVector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">int</name></type> <name pos:line="75" pos:column="9">_current</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">bool</name></type> <name pos:line="76" pos:column="10">_isVertical</name></decl>;</decl_stmt>
</private>}</block>;</class>



<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="81" pos:column="8">//CONTROLS_TAB_H</comment>
</unit>
