<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\Apps\accelerometer-app-master\src\com\dml\learningaccelerometer\AccelerometerActivity.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">dml</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">learningaccelerometer</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">io</name><op:operator pos:line="3" pos:column="15">.</op:operator><name pos:line="3" pos:column="16">File</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">List</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Locale</name></name>;</import>

<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">javax</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">xml</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">parsers</name><op:operator pos:line="8" pos:column="25">.</op:operator><name pos:line="8" pos:column="26">DocumentBuilder</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">javax</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">xml</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">parsers</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">DocumentBuilderFactory</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">javax</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">xml</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">parsers</name><op:operator pos:line="10" pos:column="25">.</op:operator><name pos:line="10" pos:column="26">ParserConfigurationException</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">javax</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">xml</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">transform</name><op:operator pos:line="11" pos:column="27">.</op:operator><name pos:line="11" pos:column="28">Transformer</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">javax</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">xml</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">transform</name><op:operator pos:line="12" pos:column="27">.</op:operator><name pos:line="12" pos:column="28">TransformerException</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">javax</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">xml</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">transform</name><op:operator pos:line="13" pos:column="27">.</op:operator><name pos:line="13" pos:column="28">TransformerFactory</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">javax</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">xml</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">transform</name><op:operator pos:line="14" pos:column="27">.</op:operator><name pos:line="14" pos:column="28">dom</name><op:operator pos:line="14" pos:column="31">.</op:operator><name pos:line="14" pos:column="32">DOMSource</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">javax</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">xml</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">transform</name><op:operator pos:line="15" pos:column="27">.</op:operator><name pos:line="15" pos:column="28">stream</name><op:operator pos:line="15" pos:column="34">.</op:operator><name pos:line="15" pos:column="35">StreamResult</name></name>;</import>

<import pos:line="17" pos:column="1">import <name><name pos:line="17" pos:column="8">org</name><op:operator pos:line="17" pos:column="11">.</op:operator><name pos:line="17" pos:column="12">w3c</name><op:operator pos:line="17" pos:column="15">.</op:operator><name pos:line="17" pos:column="16">dom</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">Document</name></name>;</import>
<import pos:line="18" pos:column="1">import <name><name pos:line="18" pos:column="8">org</name><op:operator pos:line="18" pos:column="11">.</op:operator><name pos:line="18" pos:column="12">w3c</name><op:operator pos:line="18" pos:column="15">.</op:operator><name pos:line="18" pos:column="16">dom</name><op:operator pos:line="18" pos:column="19">.</op:operator><name pos:line="18" pos:column="20">Element</name></name>;</import>

<import pos:line="20" pos:column="1">import <name><name pos:line="20" pos:column="8">android</name><op:operator pos:line="20" pos:column="15">.</op:operator><name pos:line="20" pos:column="16">app</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">Activity</name></name>;</import>
<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">android</name><op:operator pos:line="21" pos:column="15">.</op:operator><name pos:line="21" pos:column="16">content</name><op:operator pos:line="21" pos:column="23">.</op:operator><name pos:line="21" pos:column="24">Context</name></name>;</import>
<import pos:line="22" pos:column="1">import <name><name pos:line="22" pos:column="8">android</name><op:operator pos:line="22" pos:column="15">.</op:operator><name pos:line="22" pos:column="16">hardware</name><op:operator pos:line="22" pos:column="24">.</op:operator><name pos:line="22" pos:column="25">Sensor</name></name>;</import>
<import pos:line="23" pos:column="1">import <name><name pos:line="23" pos:column="8">android</name><op:operator pos:line="23" pos:column="15">.</op:operator><name pos:line="23" pos:column="16">hardware</name><op:operator pos:line="23" pos:column="24">.</op:operator><name pos:line="23" pos:column="25">SensorEvent</name></name>;</import>
<import pos:line="24" pos:column="1">import <name><name pos:line="24" pos:column="8">android</name><op:operator pos:line="24" pos:column="15">.</op:operator><name pos:line="24" pos:column="16">hardware</name><op:operator pos:line="24" pos:column="24">.</op:operator><name pos:line="24" pos:column="25">SensorEventListener</name></name>;</import>
<import pos:line="25" pos:column="1">import <name><name pos:line="25" pos:column="8">android</name><op:operator pos:line="25" pos:column="15">.</op:operator><name pos:line="25" pos:column="16">hardware</name><op:operator pos:line="25" pos:column="24">.</op:operator><name pos:line="25" pos:column="25">SensorManager</name></name>;</import>
<import pos:line="26" pos:column="1">import <name><name pos:line="26" pos:column="8">android</name><op:operator pos:line="26" pos:column="15">.</op:operator><name pos:line="26" pos:column="16">os</name><op:operator pos:line="26" pos:column="18">.</op:operator><name pos:line="26" pos:column="19">Bundle</name></name>;</import>
<import pos:line="27" pos:column="1">import <name><name pos:line="27" pos:column="8">android</name><op:operator pos:line="27" pos:column="15">.</op:operator><name pos:line="27" pos:column="16">os</name><op:operator pos:line="27" pos:column="18">.</op:operator><name pos:line="27" pos:column="19">Environment</name></name>;</import>
<import pos:line="28" pos:column="1">import <name><name pos:line="28" pos:column="8">android</name><op:operator pos:line="28" pos:column="15">.</op:operator><name pos:line="28" pos:column="16">util</name><op:operator pos:line="28" pos:column="20">.</op:operator><name pos:line="28" pos:column="21">FloatMath</name></name>;</import>
<import pos:line="29" pos:column="1">import <name><name pos:line="29" pos:column="8">android</name><op:operator pos:line="29" pos:column="15">.</op:operator><name pos:line="29" pos:column="16">util</name><op:operator pos:line="29" pos:column="20">.</op:operator><name pos:line="29" pos:column="21">Log</name></name>;</import>
<import pos:line="30" pos:column="1">import <name><name pos:line="30" pos:column="8">android</name><op:operator pos:line="30" pos:column="15">.</op:operator><name pos:line="30" pos:column="16">view</name><op:operator pos:line="30" pos:column="20">.</op:operator><name pos:line="30" pos:column="21">Menu</name></name>;</import>
<import pos:line="31" pos:column="1">import <name><name pos:line="31" pos:column="8">android</name><op:operator pos:line="31" pos:column="15">.</op:operator><name pos:line="31" pos:column="16">view</name><op:operator pos:line="31" pos:column="20">.</op:operator><name pos:line="31" pos:column="21">View</name></name>;</import>
<import pos:line="32" pos:column="1">import <name><name pos:line="32" pos:column="8">android</name><op:operator pos:line="32" pos:column="15">.</op:operator><name pos:line="32" pos:column="16">widget</name><op:operator pos:line="32" pos:column="22">.</op:operator><name pos:line="32" pos:column="23">TextView</name></name>;</import>
<import pos:line="33" pos:column="1">import <name><name pos:line="33" pos:column="8">android</name><op:operator pos:line="33" pos:column="15">.</op:operator><name pos:line="33" pos:column="16">widget</name><op:operator pos:line="33" pos:column="22">.</op:operator><name pos:line="33" pos:column="23">Toast</name></name>;</import>

<class><specifier pos:line="35" pos:column="1">public</specifier> class <name pos:line="35" pos:column="14">AccelerometerActivity</name> <super><extends pos:line="35" pos:column="36">extends <name pos:line="35" pos:column="44">Activity</name></extends> <implements pos:line="35" pos:column="53">implements <name pos:line="35" pos:column="64">SensorEventListener</name></implements></super> <block pos:line="35" pos:column="84">{

	<decl_stmt><decl><type><specifier pos:line="37" pos:column="9">private</specifier> <specifier pos:line="37" pos:column="17">static</specifier> <specifier pos:line="37" pos:column="24">final</specifier> <name pos:line="37" pos:column="30">String</name></type> <name pos:line="37" pos:column="37">LOG_TAG</name> <init pos:line="37" pos:column="45">= <expr><lit:literal type="string" pos:line="37" pos:column="47">"Bite recording and file saving testing"</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="38" pos:column="9">private</specifier> <name pos:line="38" pos:column="17">SensorManager</name></type> <name pos:line="38" pos:column="31">mSensorManager</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="39" pos:column="9">private</specifier> <name pos:line="39" pos:column="17">Sensor</name></type> <name pos:line="39" pos:column="24">mAccelerometer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="40" pos:column="9">TextView</name></type> <name pos:line="40" pos:column="18">tvSuccess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="41" pos:column="9">List</name><argument_list pos:line="41" pos:column="13">&lt;<argument><name pos:line="41" pos:column="14">Entry</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="21">entries</name></decl>;</decl_stmt>
	
	
	<function><type><annotation pos:line="44" pos:column="9">@<name pos:line="44" pos:column="10">Override</name></annotation>
	<specifier pos:line="45" pos:column="9">protected</specifier> <name pos:line="45" pos:column="19">void</name></type> <name pos:line="45" pos:column="24">onCreate</name><parameter_list pos:line="45" pos:column="32">(<param><decl><type><name pos:line="45" pos:column="33">Bundle</name></type> <name pos:line="45" pos:column="40">savedInstanceState</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="60">{
		<expr_stmt><expr><call><name><name pos:line="46" pos:column="17">super</name><op:operator pos:line="46" pos:column="22">.</op:operator><name pos:line="46" pos:column="23">onCreate</name></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">setContentView</name><argument_list pos:line="47" pos:column="31">(<argument><expr><name><name pos:line="47" pos:column="32">R</name><op:operator pos:line="47" pos:column="33">.</op:operator><name pos:line="47" pos:column="34">layout</name><op:operator pos:line="47" pos:column="40">.</op:operator><name pos:line="47" pos:column="41">activity_accelerometer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name pos:line="49" pos:column="17">tvSuccess</name> <op:operator pos:line="49" pos:column="27">=</op:operator> <op:operator pos:line="49" pos:column="29">(</op:operator><name pos:line="49" pos:column="30">TextView</name><op:operator pos:line="49" pos:column="38">)</op:operator> <call><name pos:line="49" pos:column="40">findViewById</name><argument_list pos:line="49" pos:column="52">(<argument><expr><name><name pos:line="49" pos:column="53">R</name><op:operator pos:line="49" pos:column="54">.</op:operator><name pos:line="49" pos:column="55">id</name><op:operator pos:line="49" pos:column="57">.</op:operator><name pos:line="49" pos:column="58">success</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name pos:line="51" pos:column="17">mSensorManager</name> <op:operator pos:line="51" pos:column="32">=</op:operator> <op:operator pos:line="51" pos:column="34">(</op:operator><name pos:line="51" pos:column="35">SensorManager</name><op:operator pos:line="51" pos:column="48">)</op:operator> <call><name pos:line="51" pos:column="50">getSystemService</name><argument_list pos:line="51" pos:column="66">(<argument><expr><name><name pos:line="51" pos:column="67">Context</name><op:operator pos:line="51" pos:column="74">.</op:operator><name pos:line="51" pos:column="75">SENSOR_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="52" pos:column="17">mAccelerometer</name> <op:operator pos:line="52" pos:column="32">=</op:operator> <call><name><name pos:line="52" pos:column="34">mSensorManager</name><op:operator pos:line="52" pos:column="48">.</op:operator><name pos:line="52" pos:column="49">getDefaultSensor</name></name><argument_list pos:line="52" pos:column="65">(<argument><expr><name><name pos:line="52" pos:column="66">Sensor</name><op:operator pos:line="52" pos:column="72">.</op:operator><name pos:line="52" pos:column="73">TYPE_ACCELEROMETER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name pos:line="54" pos:column="17">entries</name> <op:operator pos:line="54" pos:column="25">=</op:operator> <op:operator pos:line="54" pos:column="27">new</op:operator> <call><name><name pos:line="54" pos:column="31">ArrayList</name><argument_list pos:line="54" pos:column="40">&lt;<argument><name pos:line="54" pos:column="41">Entry</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="57" pos:column="9">@<name pos:line="57" pos:column="10">Override</name></annotation>
	<specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">boolean</name></type> <name pos:line="58" pos:column="24">onCreateOptionsMenu</name><parameter_list pos:line="58" pos:column="43">(<param><decl><type><name pos:line="58" pos:column="44">Menu</name></type> <name pos:line="58" pos:column="49">menu</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="55">{
		<comment type="line" pos:line="59" pos:column="17">// Inflate the menu; this adds items to the action bar if it is present.</comment>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">getMenuInflater</name><argument_list pos:line="60" pos:column="32">()</argument_list></call><op:operator pos:line="60" pos:column="34">.</op:operator><call><name pos:line="60" pos:column="35">inflate</name><argument_list pos:line="60" pos:column="42">(<argument><expr><name><name pos:line="60" pos:column="43">R</name><op:operator pos:line="60" pos:column="44">.</op:operator><name pos:line="60" pos:column="45">menu</name><op:operator pos:line="60" pos:column="49">.</op:operator><name pos:line="60" pos:column="50">accelerometer</name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="65">menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="61" pos:column="17">return <expr><lit:literal type="boolean" pos:line="61" pos:column="24">true</lit:literal></expr>;</return>
	}</block></function>
	
	<function><type><annotation pos:line="64" pos:column="9">@<name pos:line="64" pos:column="10">Override</name></annotation>
	<specifier pos:line="65" pos:column="9">protected</specifier> <name pos:line="65" pos:column="19">void</name></type> <name pos:line="65" pos:column="24">onResume</name><parameter_list pos:line="65" pos:column="32">()</parameter_list> <block pos:line="65" pos:column="35">{
		<expr_stmt><expr><call><name><name pos:line="66" pos:column="17">super</name><op:operator pos:line="66" pos:column="22">.</op:operator><name pos:line="66" pos:column="23">onResume</name></name><argument_list pos:line="66" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="67" pos:column="17">mSensorManager</name><op:operator pos:line="67" pos:column="31">.</op:operator><name pos:line="67" pos:column="32">registerListener</name></name><argument_list pos:line="67" pos:column="48">(<argument><expr><name pos:line="67" pos:column="49">this</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="55">mAccelerometer</name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="71">SensorManager</name><op:operator pos:line="67" pos:column="84">.</op:operator><name pos:line="67" pos:column="85">SENSOR_DELAY_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="70" pos:column="9">@<name pos:line="70" pos:column="10">Override</name></annotation>
	<specifier pos:line="71" pos:column="9">protected</specifier> <name pos:line="71" pos:column="19">void</name></type> <name pos:line="71" pos:column="24">onPause</name><parameter_list pos:line="71" pos:column="31">()</parameter_list> <block pos:line="71" pos:column="34">{
		<expr_stmt><expr><call><name><name pos:line="72" pos:column="17">super</name><op:operator pos:line="72" pos:column="22">.</op:operator><name pos:line="72" pos:column="23">onPause</name></name><argument_list pos:line="72" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="73" pos:column="17">mSensorManager</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">unregisterListener</name></name><argument_list pos:line="73" pos:column="50">(<argument><expr><name pos:line="73" pos:column="51">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="76" pos:column="9">@<name pos:line="76" pos:column="10">Override</name></annotation>
	<specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">void</name></type> <name pos:line="77" pos:column="21">onAccuracyChanged</name><parameter_list pos:line="77" pos:column="38">(<param><decl><type><name pos:line="77" pos:column="39">Sensor</name></type> <name pos:line="77" pos:column="46">sensor</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="54">int</name></type> <name pos:line="77" pos:column="58">accuracy</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="68">{
		<comment type="line" pos:line="78" pos:column="17">// Do something here if the accuracy changes.</comment>
	}</block></function>
	
	<function><type><annotation pos:line="81" pos:column="9">@<name pos:line="81" pos:column="10">Override</name></annotation>
	<specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">onSensorChanged</name><parameter_list pos:line="82" pos:column="36">(<param><decl><type><name pos:line="82" pos:column="37">SensorEvent</name></type> <name pos:line="82" pos:column="49">event</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="56">{
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><call><name><name pos:line="83" pos:column="21">event</name><op:operator pos:line="83" pos:column="26">.</op:operator><name pos:line="83" pos:column="27">sensor</name><op:operator pos:line="83" pos:column="33">.</op:operator><name pos:line="83" pos:column="34">getType</name></name><argument_list pos:line="83" pos:column="41">()</argument_list></call> <op:operator pos:line="83" pos:column="44">!=</op:operator> <name><name pos:line="83" pos:column="47">Sensor</name><op:operator pos:line="83" pos:column="53">.</op:operator><name pos:line="83" pos:column="54">TYPE_ACCELEROMETER</name></name></expr>)</condition><then pos:line="83" pos:column="73"> <block pos:line="83" pos:column="74">{
			<return pos:line="84" pos:column="25">return;</return>
		}</block></then></if>
<comment type="line" pos:line="86" pos:column="1">//		float[] values = event.values;</comment>
<comment type="line" pos:line="87" pos:column="1">//		String x = String.format(Locale.US, "%.4f", values[0]);</comment>
<comment type="line" pos:line="88" pos:column="1">//		String y = String.format(Locale.US, "%.4f", values[1]);</comment>
<comment type="line" pos:line="89" pos:column="1">//		String z = String.format(Locale.US, "%.4f", values[2]);</comment>
<comment type="line" pos:line="90" pos:column="1">//		StringBuilder sb = new StringBuilder();</comment>
<comment type="line" pos:line="91" pos:column="1">//		sb.append("X-axis: " + x).append("\n").append("Y-axis: " + y).append("\n").append("Z-axis: " + z + "\n");</comment>
<comment type="line" pos:line="92" pos:column="1">//		tvSuccess.setText(sb.toString());</comment>
<comment type="line" pos:line="93" pos:column="1">//		</comment>
<comment type="line" pos:line="94" pos:column="1">//		Entry entry = new Entry(x, y, z, event.timestamp);</comment>
<comment type="line" pos:line="95" pos:column="1">//		entries.add(entry);</comment>
		
		<comment type="line" pos:line="97" pos:column="17">// debugging movement and understanding how it works...</comment>
		<decl_stmt><decl><type><name pos:line="98" pos:column="17">float</name></type> <name pos:line="98" pos:column="23">x</name> <init pos:line="98" pos:column="25">= <expr><name><name pos:line="98" pos:column="27">event</name><op:operator pos:line="98" pos:column="32">.</op:operator><name pos:line="98" pos:column="33">values</name><index pos:line="98" pos:column="39">[<expr><lit:literal type="number" pos:line="98" pos:column="40">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="99" pos:column="13">float</name></type> <name pos:line="99" pos:column="19">y</name> <init pos:line="99" pos:column="21">= <expr><name><name pos:line="99" pos:column="23">event</name><op:operator pos:line="99" pos:column="28">.</op:operator><name pos:line="99" pos:column="29">values</name><index pos:line="99" pos:column="35">[<expr><lit:literal type="number" pos:line="99" pos:column="36">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="100" pos:column="13">float</name></type> <name pos:line="100" pos:column="19">z</name> <init pos:line="100" pos:column="21">= <expr><name><name pos:line="100" pos:column="23">event</name><op:operator pos:line="100" pos:column="28">.</op:operator><name pos:line="100" pos:column="29">values</name><index pos:line="100" pos:column="35">[<expr><lit:literal type="number" pos:line="100" pos:column="36">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="101" pos:column="17">float</name></type> <name pos:line="101" pos:column="23">mAccelCurrent</name> <init pos:line="101" pos:column="37">= <expr><call><name><name pos:line="101" pos:column="39">FloatMath</name><op:operator pos:line="101" pos:column="48">.</op:operator><name pos:line="101" pos:column="49">sqrt</name></name><argument_list pos:line="101" pos:column="53">(<argument><expr><name pos:line="101" pos:column="54">x</name><op:operator pos:line="101" pos:column="55">*</op:operator><name pos:line="101" pos:column="56">x</name> <op:operator pos:line="101" pos:column="58">+</op:operator> <name pos:line="101" pos:column="60">y</name><op:operator pos:line="101" pos:column="61">*</op:operator><name pos:line="101" pos:column="62">y</name> <op:operator pos:line="101" pos:column="64">+</op:operator> <name pos:line="101" pos:column="66">z</name><op:operator pos:line="101" pos:column="67">*</op:operator><name pos:line="101" pos:column="68">z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">float</name></type> <name pos:line="102" pos:column="23">mAccel</name> <init pos:line="102" pos:column="30">= <expr><lit:literal type="number" pos:line="102" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="103" pos:column="17">mAccel</name> <op:operator pos:line="103" pos:column="24">=</op:operator> <name pos:line="103" pos:column="26">mAccel</name> <op:operator pos:line="103" pos:column="33">*</op:operator> <lit:literal type="number" pos:line="103" pos:column="35">0.9f</lit:literal> <op:operator pos:line="103" pos:column="40">+</op:operator> <name pos:line="103" pos:column="42">mAccelCurrent</name> <op:operator pos:line="103" pos:column="56">*</op:operator> <lit:literal type="number" pos:line="103" pos:column="58">0.1f</lit:literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="104" pos:column="17">String</name></type> <name pos:line="104" pos:column="24">out</name> <init pos:line="104" pos:column="28">= <expr><call><name><name pos:line="104" pos:column="30">System</name><op:operator pos:line="104" pos:column="36">.</op:operator><name pos:line="104" pos:column="37">currentTimeMillis</name></name><argument_list pos:line="104" pos:column="54">()</argument_list></call> <op:operator pos:line="104" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="104" pos:column="59">", "</lit:literal> <op:operator pos:line="104" pos:column="64">+</op:operator> <name pos:line="104" pos:column="66">mAccelCurrent</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="105" pos:column="17">Log</name><op:operator pos:line="105" pos:column="20">.</op:operator><name pos:line="105" pos:column="21">d</name></name><argument_list pos:line="105" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="105" pos:column="23">"onSensorChanged"</lit:literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="42">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="108" pos:column="9">private</specifier> <name pos:line="108" pos:column="17">void</name></type> <name pos:line="108" pos:column="22">writeEntriesToXml</name><parameter_list pos:line="108" pos:column="39">()</parameter_list> <block pos:line="108" pos:column="42">{
		<try pos:line="109" pos:column="17">try <block pos:line="109" pos:column="21">{
			 
			<decl_stmt><decl><type><name pos:line="111" pos:column="25">DocumentBuilderFactory</name></type> <name pos:line="111" pos:column="48">docFactory</name> <init pos:line="111" pos:column="59">= <expr><call><name><name pos:line="111" pos:column="61">DocumentBuilderFactory</name><op:operator pos:line="111" pos:column="83">.</op:operator><name pos:line="111" pos:column="84">newInstance</name></name><argument_list pos:line="111" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="112" pos:column="25">DocumentBuilder</name></type> <name pos:line="112" pos:column="41">docBuilder</name> <init pos:line="112" pos:column="52">= <expr><call><name><name pos:line="112" pos:column="54">docFactory</name><op:operator pos:line="112" pos:column="64">.</op:operator><name pos:line="112" pos:column="65">newDocumentBuilder</name></name><argument_list pos:line="112" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
	 
			<comment type="line" pos:line="114" pos:column="25">// root elements</comment>
			<decl_stmt><decl><type><name pos:line="115" pos:column="25">Document</name></type> <name pos:line="115" pos:column="34">doc</name> <init pos:line="115" pos:column="38">= <expr><call><name><name pos:line="115" pos:column="40">docBuilder</name><op:operator pos:line="115" pos:column="50">.</op:operator><name pos:line="115" pos:column="51">newDocument</name></name><argument_list pos:line="115" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="116" pos:column="25">Element</name></type> <name pos:line="116" pos:column="33">rootElement</name></decl>;</decl_stmt>
			<if pos:line="117" pos:column="25">if <condition pos:line="117" pos:column="28">(<expr><call><name pos:line="117" pos:column="29">getIntent</name><argument_list pos:line="117" pos:column="38">()</argument_list></call><op:operator pos:line="117" pos:column="40">.</op:operator><call><name pos:line="117" pos:column="41">getBooleanExtra</name><argument_list pos:line="117" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="57">"is_bite"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="117" pos:column="68">false</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="117" pos:column="75">
				<expr_stmt><expr><name pos:line="118" pos:column="33">rootElement</name> <op:operator pos:line="118" pos:column="45">=</op:operator> <call><name><name pos:line="118" pos:column="47">doc</name><op:operator pos:line="118" pos:column="50">.</op:operator><name pos:line="118" pos:column="51">createElement</name></name><argument_list pos:line="118" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="65">"bite"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="119" pos:column="25">else
				<expr_stmt><expr><name pos:line="120" pos:column="33">rootElement</name> <op:operator pos:line="120" pos:column="45">=</op:operator> <call><name><name pos:line="120" pos:column="47">doc</name><op:operator pos:line="120" pos:column="50">.</op:operator><name pos:line="120" pos:column="51">createElement</name></name><argument_list pos:line="120" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="65">"non_bite"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name><name pos:line="121" pos:column="25">doc</name><op:operator pos:line="121" pos:column="28">.</op:operator><name pos:line="121" pos:column="29">appendChild</name></name><argument_list pos:line="121" pos:column="40">(<argument><expr><name pos:line="121" pos:column="41">rootElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 
			<for pos:line="123" pos:column="25">for (<init><decl><type><name pos:line="123" pos:column="30">Entry</name></type> <name pos:line="123" pos:column="36">entry</name> <range pos:line="123" pos:column="42">: <expr><name pos:line="123" pos:column="44">entries</name></expr></range></decl></init>) <block pos:line="123" pos:column="53">{
				<decl_stmt><decl><type><name pos:line="124" pos:column="33">Element</name></type> <name pos:line="124" pos:column="41">event</name> <init pos:line="124" pos:column="47">= <expr><call><name><name pos:line="124" pos:column="49">doc</name><op:operator pos:line="124" pos:column="52">.</op:operator><name pos:line="124" pos:column="53">createElement</name></name><argument_list pos:line="124" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="67">"movement_event"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="125" pos:column="33">rootElement</name><op:operator pos:line="125" pos:column="44">.</op:operator><name pos:line="125" pos:column="45">appendChild</name></name><argument_list pos:line="125" pos:column="56">(<argument><expr><name pos:line="125" pos:column="57">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<decl_stmt><decl><type><name pos:line="127" pos:column="33">Element</name></type> <name pos:line="127" pos:column="41">x</name> <init pos:line="127" pos:column="43">= <expr><call><name><name pos:line="127" pos:column="45">doc</name><op:operator pos:line="127" pos:column="48">.</op:operator><name pos:line="127" pos:column="49">createElement</name></name><argument_list pos:line="127" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="63">"x-axis"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="128" pos:column="33">x</name><op:operator pos:line="128" pos:column="34">.</op:operator><name pos:line="128" pos:column="35">appendChild</name></name><argument_list pos:line="128" pos:column="46">(<argument><expr><call><name><name pos:line="128" pos:column="47">doc</name><op:operator pos:line="128" pos:column="50">.</op:operator><name pos:line="128" pos:column="51">createTextNode</name></name><argument_list pos:line="128" pos:column="65">(<argument><expr><call><name><name pos:line="128" pos:column="66">entry</name><op:operator pos:line="128" pos:column="71">.</op:operator><name pos:line="128" pos:column="72">getX</name></name><argument_list pos:line="128" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="129" pos:column="33">event</name><op:operator pos:line="129" pos:column="38">.</op:operator><name pos:line="129" pos:column="39">appendChild</name></name><argument_list pos:line="129" pos:column="50">(<argument><expr><name pos:line="129" pos:column="51">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<decl_stmt><decl><type><name pos:line="131" pos:column="33">Element</name></type> <name pos:line="131" pos:column="41">y</name> <init pos:line="131" pos:column="43">= <expr><call><name><name pos:line="131" pos:column="45">doc</name><op:operator pos:line="131" pos:column="48">.</op:operator><name pos:line="131" pos:column="49">createElement</name></name><argument_list pos:line="131" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="63">"y-axis"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="132" pos:column="33">y</name><op:operator pos:line="132" pos:column="34">.</op:operator><name pos:line="132" pos:column="35">appendChild</name></name><argument_list pos:line="132" pos:column="46">(<argument><expr><call><name><name pos:line="132" pos:column="47">doc</name><op:operator pos:line="132" pos:column="50">.</op:operator><name pos:line="132" pos:column="51">createTextNode</name></name><argument_list pos:line="132" pos:column="65">(<argument><expr><call><name><name pos:line="132" pos:column="66">entry</name><op:operator pos:line="132" pos:column="71">.</op:operator><name pos:line="132" pos:column="72">getY</name></name><argument_list pos:line="132" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">event</name><op:operator pos:line="133" pos:column="38">.</op:operator><name pos:line="133" pos:column="39">appendChild</name></name><argument_list pos:line="133" pos:column="50">(<argument><expr><name pos:line="133" pos:column="51">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<decl_stmt><decl><type><name pos:line="135" pos:column="33">Element</name></type> <name pos:line="135" pos:column="41">z</name> <init pos:line="135" pos:column="43">= <expr><call><name><name pos:line="135" pos:column="45">doc</name><op:operator pos:line="135" pos:column="48">.</op:operator><name pos:line="135" pos:column="49">createElement</name></name><argument_list pos:line="135" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="63">"z-axis"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="136" pos:column="33">z</name><op:operator pos:line="136" pos:column="34">.</op:operator><name pos:line="136" pos:column="35">appendChild</name></name><argument_list pos:line="136" pos:column="46">(<argument><expr><call><name><name pos:line="136" pos:column="47">doc</name><op:operator pos:line="136" pos:column="50">.</op:operator><name pos:line="136" pos:column="51">createTextNode</name></name><argument_list pos:line="136" pos:column="65">(<argument><expr><call><name><name pos:line="136" pos:column="66">entry</name><op:operator pos:line="136" pos:column="71">.</op:operator><name pos:line="136" pos:column="72">getZ</name></name><argument_list pos:line="136" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="137" pos:column="33">event</name><op:operator pos:line="137" pos:column="38">.</op:operator><name pos:line="137" pos:column="39">appendChild</name></name><argument_list pos:line="137" pos:column="50">(<argument><expr><name pos:line="137" pos:column="51">z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<decl_stmt><decl><type><name pos:line="139" pos:column="33">Element</name></type> <name pos:line="139" pos:column="41">timestamp</name> <init pos:line="139" pos:column="51">= <expr><call><name><name pos:line="139" pos:column="53">doc</name><op:operator pos:line="139" pos:column="56">.</op:operator><name pos:line="139" pos:column="57">createElement</name></name><argument_list pos:line="139" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="71">"timestamp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="140" pos:column="33">timestamp</name><op:operator pos:line="140" pos:column="42">.</op:operator><name pos:line="140" pos:column="43">appendChild</name></name><argument_list pos:line="140" pos:column="54">(<argument><expr><call><name><name pos:line="140" pos:column="55">doc</name><op:operator pos:line="140" pos:column="58">.</op:operator><name pos:line="140" pos:column="59">createTextNode</name></name><argument_list pos:line="140" pos:column="73">(<argument><expr><call><name><name pos:line="140" pos:column="74">String</name><op:operator pos:line="140" pos:column="80">.</op:operator><name pos:line="140" pos:column="81">valueOf</name></name><argument_list pos:line="140" pos:column="88">(<argument><expr><call><name><name pos:line="140" pos:column="89">entry</name><op:operator pos:line="140" pos:column="94">.</op:operator><name pos:line="140" pos:column="95">getTimeStamp</name></name><argument_list pos:line="140" pos:column="107">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="141" pos:column="33">event</name><op:operator pos:line="141" pos:column="38">.</op:operator><name pos:line="141" pos:column="39">appendChild</name></name><argument_list pos:line="141" pos:column="50">(<argument><expr><name pos:line="141" pos:column="51">timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			
			<decl_stmt><decl><type><name pos:line="144" pos:column="25">File</name></type> <name pos:line="144" pos:column="30">file</name> <init pos:line="144" pos:column="35">= <expr><op:operator pos:line="144" pos:column="37">new</op:operator> <call><name pos:line="144" pos:column="41">File</name><argument_list pos:line="144" pos:column="45">(<argument><expr><call><name pos:line="144" pos:column="46">getBaseContext</name><argument_list pos:line="144" pos:column="60">()</argument_list></call><op:operator pos:line="144" pos:column="62">.</op:operator><call><name pos:line="144" pos:column="63">getFilesDir</name><argument_list pos:line="144" pos:column="74">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="144" pos:column="78">"test.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="146" pos:column="25">TransformerFactory</name></type> <name pos:line="146" pos:column="44">transformerFactory</name> <init pos:line="146" pos:column="63">= <expr><call><name><name pos:line="146" pos:column="65">TransformerFactory</name><op:operator pos:line="146" pos:column="83">.</op:operator><name pos:line="146" pos:column="84">newInstance</name></name><argument_list pos:line="146" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="147" pos:column="25">Transformer</name></type> <name pos:line="147" pos:column="37">transformer</name> <init pos:line="147" pos:column="49">= <expr><call><name><name pos:line="147" pos:column="51">transformerFactory</name><op:operator pos:line="147" pos:column="69">.</op:operator><name pos:line="147" pos:column="70">newTransformer</name></name><argument_list pos:line="147" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="148" pos:column="25">DOMSource</name></type> <name pos:line="148" pos:column="35">source</name> <init pos:line="148" pos:column="42">= <expr><op:operator pos:line="148" pos:column="44">new</op:operator> <call><name pos:line="148" pos:column="48">DOMSource</name><argument_list pos:line="148" pos:column="57">(<argument><expr><name pos:line="148" pos:column="58">doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="149" pos:column="25">StreamResult</name></type> <name pos:line="149" pos:column="38">result</name> <init pos:line="149" pos:column="45">= <expr><op:operator pos:line="149" pos:column="47">new</op:operator> <call><name pos:line="149" pos:column="51">StreamResult</name><argument_list pos:line="149" pos:column="63">(<argument><expr><name pos:line="149" pos:column="64">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	 
			<comment type="line" pos:line="151" pos:column="25">// Output to console for testing</comment>
			<comment type="line" pos:line="152" pos:column="25">// StreamResult result = new StreamResult(System.out);</comment>
	 
			<expr_stmt><expr><call><name><name pos:line="154" pos:column="25">transformer</name><op:operator pos:line="154" pos:column="36">.</op:operator><name pos:line="154" pos:column="37">transform</name></name><argument_list pos:line="154" pos:column="46">(<argument><expr><name pos:line="154" pos:column="47">source</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="55">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 
		}</block> <catch pos:line="156" pos:column="19">catch <parameter_list pos:line="156" pos:column="25">(<param><decl><type><name pos:line="156" pos:column="26">ParserConfigurationException</name></type> <name pos:line="156" pos:column="55">pce</name></decl></param>)</parameter_list> <block pos:line="156" pos:column="60">{
			<expr_stmt><expr><call><name><name pos:line="157" pos:column="25">pce</name><op:operator pos:line="157" pos:column="28">.</op:operator><name pos:line="157" pos:column="29">printStackTrace</name></name><argument_list pos:line="157" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="158" pos:column="19">catch <parameter_list pos:line="158" pos:column="25">(<param><decl><type><name pos:line="158" pos:column="26">TransformerException</name></type> <name pos:line="158" pos:column="47">tfe</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="159" pos:column="25">tfe</name><op:operator pos:line="159" pos:column="28">.</op:operator><name pos:line="159" pos:column="29">printStackTrace</name></name><argument_list pos:line="159" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<comment type="block" pos:line="163" pos:column="9">/* Checks if external storage is available for read and write */</comment>
	<function><type><specifier pos:line="164" pos:column="9">public</specifier> <name pos:line="164" pos:column="16">boolean</name></type> <name pos:line="164" pos:column="24">isExternalStorageWritable</name><parameter_list pos:line="164" pos:column="49">()</parameter_list> <block pos:line="164" pos:column="52">{
	    <decl_stmt><decl><type><name pos:line="165" pos:column="13">String</name></type> <name pos:line="165" pos:column="20">state</name> <init pos:line="165" pos:column="26">= <expr><call><name><name pos:line="165" pos:column="28">Environment</name><op:operator pos:line="165" pos:column="39">.</op:operator><name pos:line="165" pos:column="40">getExternalStorageState</name></name><argument_list pos:line="165" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <if pos:line="166" pos:column="13">if <condition pos:line="166" pos:column="16">(<expr><call><name><name pos:line="166" pos:column="17">Environment</name><op:operator pos:line="166" pos:column="28">.</op:operator><name pos:line="166" pos:column="29">MEDIA_MOUNTED</name><op:operator pos:line="166" pos:column="42">.</op:operator><name pos:line="166" pos:column="43">equals</name></name><argument_list pos:line="166" pos:column="49">(<argument><expr><name pos:line="166" pos:column="50">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="57"> <block pos:line="166" pos:column="58">{
	        <return pos:line="167" pos:column="17">return <expr><lit:literal type="boolean" pos:line="167" pos:column="24">true</lit:literal></expr>;</return>
	    }</block></then></if>
	    <return pos:line="169" pos:column="13">return <expr><lit:literal type="boolean" pos:line="169" pos:column="20">false</lit:literal></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="172" pos:column="9">/* Checks if external storage is available to at least read */</comment>
	<function><type><specifier pos:line="173" pos:column="9">public</specifier> <name pos:line="173" pos:column="16">boolean</name></type> <name pos:line="173" pos:column="24">isExternalStorageReadable</name><parameter_list pos:line="173" pos:column="49">()</parameter_list> <block pos:line="173" pos:column="52">{
	    <decl_stmt><decl><type><name pos:line="174" pos:column="13">String</name></type> <name pos:line="174" pos:column="20">state</name> <init pos:line="174" pos:column="26">= <expr><call><name><name pos:line="174" pos:column="28">Environment</name><op:operator pos:line="174" pos:column="39">.</op:operator><name pos:line="174" pos:column="40">getExternalStorageState</name></name><argument_list pos:line="174" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <if pos:line="175" pos:column="13">if <condition pos:line="175" pos:column="16">(<expr><call><name><name pos:line="175" pos:column="17">Environment</name><op:operator pos:line="175" pos:column="28">.</op:operator><name pos:line="175" pos:column="29">MEDIA_MOUNTED</name><op:operator pos:line="175" pos:column="42">.</op:operator><name pos:line="175" pos:column="43">equals</name></name><argument_list pos:line="175" pos:column="49">(<argument><expr><name pos:line="175" pos:column="50">state</name></expr></argument>)</argument_list></call> <op:operator pos:line="175" pos:column="57">||</op:operator>
	        <call><name><name pos:line="176" pos:column="17">Environment</name><op:operator pos:line="176" pos:column="28">.</op:operator><name pos:line="176" pos:column="29">MEDIA_MOUNTED_READ_ONLY</name><op:operator pos:line="176" pos:column="52">.</op:operator><name pos:line="176" pos:column="53">equals</name></name><argument_list pos:line="176" pos:column="59">(<argument><expr><name pos:line="176" pos:column="60">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="176" pos:column="67"> <block pos:line="176" pos:column="68">{
	        <return pos:line="177" pos:column="17">return <expr><lit:literal type="boolean" pos:line="177" pos:column="24">true</lit:literal></expr>;</return>
	    }</block></then></if>
	    <return pos:line="179" pos:column="13">return <expr><lit:literal type="boolean" pos:line="179" pos:column="20">false</lit:literal></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="182" pos:column="9">public</specifier> <name pos:line="182" pos:column="16">void</name></type> <name pos:line="182" pos:column="21">finishRecording</name><parameter_list pos:line="182" pos:column="36">(<param><decl><type><name pos:line="182" pos:column="37">View</name></type> <name pos:line="182" pos:column="42">view</name></decl></param>)</parameter_list> <block pos:line="182" pos:column="48">{
<comment type="line" pos:line="183" pos:column="1">//		Toast.makeText(this, entries.size() + "", Toast.LENGTH_LONG).show();</comment>
<comment type="line" pos:line="184" pos:column="1">//		writeEntriesToXml();</comment>
		<expr_stmt><expr><call><name pos:line="185" pos:column="17">finish</name><argument_list pos:line="185" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<class><specifier pos:line="188" pos:column="9">private</specifier> class <name pos:line="188" pos:column="23">Entry</name> <block pos:line="188" pos:column="29">{
		<decl_stmt><decl><type><specifier pos:line="189" pos:column="17">private</specifier> <name pos:line="189" pos:column="25">String</name></type> <name pos:line="189" pos:column="32">x</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="190" pos:column="17">private</specifier> <name pos:line="190" pos:column="25">String</name></type> <name pos:line="190" pos:column="32">y</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="191" pos:column="17">private</specifier> <name pos:line="191" pos:column="25">String</name></type> <name pos:line="191" pos:column="32">z</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="192" pos:column="17">private</specifier> <name pos:line="192" pos:column="25">long</name></type> <name pos:line="192" pos:column="30">timeStamp</name></decl>;</decl_stmt>
		
		<constructor><specifier pos:line="194" pos:column="17">public</specifier> <name pos:line="194" pos:column="24">Entry</name><parameter_list pos:line="194" pos:column="29">(<param><decl><type><name pos:line="194" pos:column="30">String</name></type> <name pos:line="194" pos:column="37">x</name></decl></param>, <param><decl><type><name pos:line="194" pos:column="40">String</name></type> <name pos:line="194" pos:column="47">y</name></decl></param>, <param><decl><type><name pos:line="194" pos:column="50">String</name></type> <name pos:line="194" pos:column="57">z</name></decl></param>, <param><decl><type><name pos:line="194" pos:column="60">long</name></type> <name pos:line="194" pos:column="65">timeStamp</name></decl></param>)</parameter_list> <block pos:line="194" pos:column="76">{
			<expr_stmt><expr><call><name><name pos:line="195" pos:column="25">this</name><op:operator pos:line="195" pos:column="29">.</op:operator><name pos:line="195" pos:column="30">setX</name></name><argument_list pos:line="195" pos:column="34">(<argument><expr><name pos:line="195" pos:column="35">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="196" pos:column="25">this</name><op:operator pos:line="196" pos:column="29">.</op:operator><name pos:line="196" pos:column="30">setY</name></name><argument_list pos:line="196" pos:column="34">(<argument><expr><name pos:line="196" pos:column="35">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="197" pos:column="25">this</name><op:operator pos:line="197" pos:column="29">.</op:operator><name pos:line="197" pos:column="30">setZ</name></name><argument_list pos:line="197" pos:column="34">(<argument><expr><name pos:line="197" pos:column="35">z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="198" pos:column="25">this</name><op:operator pos:line="198" pos:column="29">.</op:operator><name pos:line="198" pos:column="30">setTimeStamp</name></name><argument_list pos:line="198" pos:column="42">(<argument><expr><name pos:line="198" pos:column="43">timeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><specifier pos:line="201" pos:column="17">public</specifier> <name pos:line="201" pos:column="24">String</name></type> <name pos:line="201" pos:column="31">getX</name><parameter_list pos:line="201" pos:column="35">()</parameter_list> <block pos:line="201" pos:column="38">{
			<return pos:line="202" pos:column="25">return <expr><name pos:line="202" pos:column="32">x</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="205" pos:column="17">public</specifier> <name pos:line="205" pos:column="24">void</name></type> <name pos:line="205" pos:column="29">setX</name><parameter_list pos:line="205" pos:column="33">(<param><decl><type><name pos:line="205" pos:column="34">String</name></type> <name pos:line="205" pos:column="41">x</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="206" pos:column="25">this</name><op:operator pos:line="206" pos:column="29">.</op:operator><name pos:line="206" pos:column="30">x</name></name> <op:operator pos:line="206" pos:column="32">=</op:operator> <name pos:line="206" pos:column="34">x</name></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="209" pos:column="17">public</specifier> <name pos:line="209" pos:column="24">String</name></type> <name pos:line="209" pos:column="31">getY</name><parameter_list pos:line="209" pos:column="35">()</parameter_list> <block pos:line="209" pos:column="38">{
			<return pos:line="210" pos:column="25">return <expr><name pos:line="210" pos:column="32">y</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="213" pos:column="17">public</specifier> <name pos:line="213" pos:column="24">void</name></type> <name pos:line="213" pos:column="29">setY</name><parameter_list pos:line="213" pos:column="33">(<param><decl><type><name pos:line="213" pos:column="34">String</name></type> <name pos:line="213" pos:column="41">y</name></decl></param>)</parameter_list> <block pos:line="213" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="214" pos:column="25">this</name><op:operator pos:line="214" pos:column="29">.</op:operator><name pos:line="214" pos:column="30">y</name></name> <op:operator pos:line="214" pos:column="32">=</op:operator> <name pos:line="214" pos:column="34">y</name></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="217" pos:column="17">public</specifier> <name pos:line="217" pos:column="24">String</name></type> <name pos:line="217" pos:column="31">getZ</name><parameter_list pos:line="217" pos:column="35">()</parameter_list> <block pos:line="217" pos:column="38">{
			<return pos:line="218" pos:column="25">return <expr><name pos:line="218" pos:column="32">z</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="221" pos:column="17">public</specifier> <name pos:line="221" pos:column="24">void</name></type> <name pos:line="221" pos:column="29">setZ</name><parameter_list pos:line="221" pos:column="33">(<param><decl><type><name pos:line="221" pos:column="34">String</name></type> <name pos:line="221" pos:column="41">z</name></decl></param>)</parameter_list> <block pos:line="221" pos:column="44">{
			<expr_stmt><expr><name><name pos:line="222" pos:column="25">this</name><op:operator pos:line="222" pos:column="29">.</op:operator><name pos:line="222" pos:column="30">z</name></name> <op:operator pos:line="222" pos:column="32">=</op:operator> <name pos:line="222" pos:column="34">z</name></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="225" pos:column="17">public</specifier> <name pos:line="225" pos:column="24">long</name></type> <name pos:line="225" pos:column="29">getTimeStamp</name><parameter_list pos:line="225" pos:column="41">()</parameter_list> <block pos:line="225" pos:column="44">{
			<return pos:line="226" pos:column="25">return <expr><name pos:line="226" pos:column="32">timeStamp</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="229" pos:column="17">public</specifier> <name pos:line="229" pos:column="24">void</name></type> <name pos:line="229" pos:column="29">setTimeStamp</name><parameter_list pos:line="229" pos:column="41">(<param><decl><type><name pos:line="229" pos:column="42">long</name></type> <name pos:line="229" pos:column="47">timeStamp</name></decl></param>)</parameter_list> <block pos:line="229" pos:column="58">{
			<expr_stmt><expr><name><name pos:line="230" pos:column="25">this</name><op:operator pos:line="230" pos:column="29">.</op:operator><name pos:line="230" pos:column="30">timeStamp</name></name> <op:operator pos:line="230" pos:column="40">=</op:operator> <name pos:line="230" pos:column="42">timeStamp</name></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
	
}</block></class>
</unit>
