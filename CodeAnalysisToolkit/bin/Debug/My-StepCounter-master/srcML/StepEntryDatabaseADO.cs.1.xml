<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\School\Grad School (Comp Sci)\Thesis\Apps\My-StepCounter-master\StepCounter.Android\Database\StepEntryDatabaseADO.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 * My StepCounter:
 * Copyright (C) 2014 Refractored LLC | http://refractored.com
 * James Montemagno | http://twitter.com/JamesMontemagno | http://MotzCod.es
 * 
 * Michael James | http://twitter.com/micjames6 | http://micjames.co.uk/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<using pos:line="20" pos:column="1">using <name pos:line="20" pos:column="7">System</name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Collections</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">Generic</name></name>;</using>

<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">Mono</name><op:operator pos:line="23" pos:column="11">.</op:operator><name pos:line="23" pos:column="12">Data</name><op:operator pos:line="23" pos:column="16">.</op:operator><name pos:line="23" pos:column="17">Sqlite</name></name>;</using>
<using pos:line="24" pos:column="1">using <name><name pos:line="24" pos:column="7">System</name><op:operator pos:line="24" pos:column="13">.</op:operator><name pos:line="24" pos:column="14">IO</name></name>;</using>
<using pos:line="25" pos:column="1">using <name><name pos:line="25" pos:column="7">System</name><op:operator pos:line="25" pos:column="13">.</op:operator><name pos:line="25" pos:column="14">Data</name></name>;</using>
<using pos:line="26" pos:column="1">using <name><name pos:line="26" pos:column="7">System</name><op:operator pos:line="26" pos:column="13">.</op:operator><name pos:line="26" pos:column="14">Globalization</name></name>;</using>

<namespace pos:line="28" pos:column="1">namespace <name><name pos:line="28" pos:column="11">StepCounter</name><op:operator pos:line="28" pos:column="22">.</op:operator><name pos:line="28" pos:column="23">Database</name></name>
<block pos:line="29" pos:column="1">{

	<class><specifier pos:line="31" pos:column="9">public</specifier> class <name pos:line="31" pos:column="22">StepEntryDatabase</name> 
	<block pos:line="32" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="33" pos:column="17">static</specifier> <name pos:line="33" pos:column="24">object</name></type> <name pos:line="33" pos:column="31">locker</name> <init pos:line="33" pos:column="38">= <expr><op:operator pos:line="33" pos:column="40">new</op:operator> <call><name pos:line="33" pos:column="44">object</name> <argument_list pos:line="33" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="35" pos:column="17">public</specifier> <name pos:line="35" pos:column="24">SqliteConnection</name></type> <name pos:line="35" pos:column="41">connection</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="37" pos:column="17">public</specifier> <name pos:line="37" pos:column="24">string</name></type> <name pos:line="37" pos:column="31">path</name></decl>;</decl_stmt>


		<constructor><specifier pos:line="40" pos:column="17">public</specifier> <name pos:line="40" pos:column="24">StepEntryDatabase</name> <parameter_list pos:line="40" pos:column="42">(<param><decl><type><name pos:line="40" pos:column="43">string</name></type> <name pos:line="40" pos:column="50">dbPath</name></decl></param>)</parameter_list> 
		<block pos:line="41" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="42" pos:column="25">var</name></type> <name pos:line="42" pos:column="29">output</name> <init pos:line="42" pos:column="36">= <expr><lit:literal type="string" pos:line="42" pos:column="38">""</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="43" pos:column="25">path</name> <op:operator pos:line="43" pos:column="30">=</op:operator> <name pos:line="43" pos:column="32">dbPath</name></expr>;</expr_stmt>
			<comment type="line" pos:line="44" pos:column="25">// create the tables</comment>
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">bool</name></type> <name pos:line="45" pos:column="30">exists</name> <init pos:line="45" pos:column="37">= <expr><call><name><name pos:line="45" pos:column="39">File</name><op:operator pos:line="45" pos:column="43">.</op:operator><name pos:line="45" pos:column="44">Exists</name></name> <argument_list pos:line="45" pos:column="51">(<argument><expr><name pos:line="45" pos:column="52">dbPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><op:operator pos:line="47" pos:column="29">!</op:operator><name pos:line="47" pos:column="30">exists</name></expr>)</condition><then pos:line="47" pos:column="37"> <block pos:line="47" pos:column="38">{
				<using pos:line="48" pos:column="33">using (<expr><name pos:line="48" pos:column="40">connection</name> <op:operator pos:line="48" pos:column="51">=</op:operator> <op:operator pos:line="48" pos:column="53">new</op:operator> <call><name pos:line="48" pos:column="57">SqliteConnection</name> <argument_list pos:line="48" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="75">"Data Source="</lit:literal> <op:operator pos:line="48" pos:column="90">+</op:operator> <name pos:line="48" pos:column="92">dbPath</name></expr></argument>)</argument_list></call></expr>) <block pos:line="48" pos:column="101">{

					<expr_stmt><expr><call><name><name pos:line="50" pos:column="41">connection</name><op:operator pos:line="50" pos:column="51">.</op:operator><name pos:line="50" pos:column="52">Open</name></name> <argument_list pos:line="50" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="51" pos:column="41">var</name></type> <name pos:line="51" pos:column="45">commands</name> <init pos:line="51" pos:column="54">= <expr><op:operator pos:line="51" pos:column="56">new</op:operator><index pos:line="51" pos:column="59">[]</index> <block pos:line="51" pos:column="62">{
						<expr><lit:literal type="string" pos:line="52" pos:column="49">"CREATE TABLE [Items] (_id INTEGER PRIMARY KEY ASC, Steps BIGINT, Date NTEXT);"</lit:literal></expr>
					}</block></expr></init></decl>;</decl_stmt>
					<foreach pos:line="54" pos:column="41">foreach (<init><decl><type><name pos:line="54" pos:column="50">var</name></type> <name pos:line="54" pos:column="54">command</name> <range pos:line="54" pos:column="62">in <expr><name pos:line="54" pos:column="65">commands</name></expr></range></decl></init>) <block pos:line="54" pos:column="75">{
						<using pos:line="55" pos:column="49">using (<decl><type><name pos:line="55" pos:column="56">var</name></type> <name pos:line="55" pos:column="60">c</name> <init pos:line="55" pos:column="62">= <expr><call><name><name pos:line="55" pos:column="64">connection</name><op:operator pos:line="55" pos:column="74">.</op:operator><name pos:line="55" pos:column="75">CreateCommand</name></name> <argument_list pos:line="55" pos:column="89">()</argument_list></call></expr></init></decl>) <block pos:line="55" pos:column="93">{
							<expr_stmt><expr><name><name pos:line="56" pos:column="57">c</name><op:operator pos:line="56" pos:column="58">.</op:operator><name pos:line="56" pos:column="59">CommandText</name></name> <op:operator pos:line="56" pos:column="71">=</op:operator> <name pos:line="56" pos:column="73">command</name></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="57" pos:column="57">var</name></type> <name pos:line="57" pos:column="61">i</name> <init pos:line="57" pos:column="63">= <expr><call><name><name pos:line="57" pos:column="65">c</name><op:operator pos:line="57" pos:column="66">.</op:operator><name pos:line="57" pos:column="67">ExecuteNonQuery</name></name> <argument_list pos:line="57" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
						}</block></using>
					}</block></foreach>
					<expr_stmt><expr><call><name><name pos:line="60" pos:column="41">connection</name><op:operator pos:line="60" pos:column="51">.</op:operator><name pos:line="60" pos:column="52">Close</name></name> <argument_list pos:line="60" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></using>
			}</block></then> <else pos:line="62" pos:column="27">else <block pos:line="62" pos:column="32">{
				<comment type="line" pos:line="63" pos:column="33">// already exists, do nothing. </comment>
			}</block></else></if>
			<expr_stmt><expr><call><name><name pos:line="65" pos:column="25">Console</name><op:operator pos:line="65" pos:column="32">.</op:operator><name pos:line="65" pos:column="33">WriteLine</name></name> <argument_list pos:line="65" pos:column="43">(<argument><expr><name pos:line="65" pos:column="44">output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="line" pos:line="68" pos:column="17">/// &lt;summary&gt;Convert from DataReader to Task object&lt;/summary&gt;</comment>
		<function><type><name pos:line="69" pos:column="17">StepEntry</name></type> <name pos:line="69" pos:column="27">FromReader</name> <parameter_list pos:line="69" pos:column="38">(<param><decl><type><name pos:line="69" pos:column="39">SqliteDataReader</name></type> <name pos:line="69" pos:column="56">r</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="59">{
			<decl_stmt><decl><type><name pos:line="70" pos:column="25">var</name></type> <name pos:line="70" pos:column="29">t</name> <init pos:line="70" pos:column="31">= <expr><op:operator pos:line="70" pos:column="33">new</op:operator> <call><name pos:line="70" pos:column="37">StepEntry</name> <argument_list pos:line="70" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="71" pos:column="25">t</name><op:operator pos:line="71" pos:column="26">.</op:operator><name pos:line="71" pos:column="27">ID</name></name> <op:operator pos:line="71" pos:column="30">=</op:operator> <call><name><name pos:line="71" pos:column="32">Convert</name><op:operator pos:line="71" pos:column="39">.</op:operator><name pos:line="71" pos:column="40">ToInt32</name></name> <argument_list pos:line="71" pos:column="48">(<argument><expr><name><name pos:line="71" pos:column="49">r</name> <index pos:line="71" pos:column="51">[<expr><lit:literal type="string" pos:line="71" pos:column="52">"_id"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="72" pos:column="25">t</name><op:operator pos:line="72" pos:column="26">.</op:operator><name pos:line="72" pos:column="27">Steps</name></name> <op:operator pos:line="72" pos:column="33">=</op:operator> <call><name><name pos:line="72" pos:column="35">Convert</name><op:operator pos:line="72" pos:column="42">.</op:operator><name pos:line="72" pos:column="43">ToInt64</name></name><argument_list pos:line="72" pos:column="50">(<argument><expr><name><name pos:line="72" pos:column="51">r</name> <index pos:line="72" pos:column="53">[<expr><lit:literal type="string" pos:line="72" pos:column="54">"Steps"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="73" pos:column="25">var</name></type> <name pos:line="73" pos:column="29">date</name> <init pos:line="73" pos:column="34">= <expr><name><name pos:line="73" pos:column="36">r</name> <index pos:line="73" pos:column="38">[<expr><lit:literal type="string" pos:line="73" pos:column="39">"Date"</lit:literal></expr>]</index></name><op:operator pos:line="73" pos:column="46">.</op:operator><call><name pos:line="73" pos:column="47">ToString</name> <argument_list pos:line="73" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">var</name></type> <name pos:line="74" pos:column="29">culture</name> <init pos:line="74" pos:column="37">= <expr><call><name><name pos:line="74" pos:column="39">CultureInfo</name><op:operator pos:line="74" pos:column="50">.</op:operator><name pos:line="74" pos:column="51">CreateSpecificCulture</name></name><argument_list pos:line="74" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="74" pos:column="73">"en-US"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">var</name></type> <name pos:line="75" pos:column="29">styles</name> <init pos:line="75" pos:column="36">= <expr><name><name pos:line="75" pos:column="38">DateTimeStyles</name><op:operator pos:line="75" pos:column="52">.</op:operator><name pos:line="75" pos:column="53">None</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">DateTime</name></type> <name pos:line="76" pos:column="34">dateOut</name></decl>;</decl_stmt>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><op:operator pos:line="77" pos:column="29">!</op:operator><call><name><name pos:line="77" pos:column="30">DateTime</name><op:operator pos:line="77" pos:column="38">.</op:operator><name pos:line="77" pos:column="39">TryParse</name></name> <argument_list pos:line="77" pos:column="48">(<argument><expr><name pos:line="77" pos:column="49">date</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="55">culture</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="64">styles</name></expr></argument>, <argument><expr pos:line="77" pos:column="72">out <name pos:line="77" pos:column="76">dateOut</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="77" pos:column="85"> <block pos:line="77" pos:column="86">{
				<comment type="line" pos:line="78" pos:column="33">//back compat, but will never come in here really.</comment>
				<expr_stmt><expr><call><name><name pos:line="79" pos:column="33">DateTime</name><op:operator pos:line="79" pos:column="41">.</op:operator><name pos:line="79" pos:column="42">TryParse</name></name> <argument_list pos:line="79" pos:column="51">(<argument><expr><name pos:line="79" pos:column="52">date</name></expr></argument>, <argument><expr pos:line="79" pos:column="58">out <name pos:line="79" pos:column="62">dateOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name><name pos:line="81" pos:column="25">t</name><op:operator pos:line="81" pos:column="26">.</op:operator><name pos:line="81" pos:column="27">Date</name></name> <op:operator pos:line="81" pos:column="32">=</op:operator> <name pos:line="81" pos:column="34">dateOut</name></expr>;</expr_stmt>
			<return pos:line="82" pos:column="25">return <expr><name pos:line="82" pos:column="32">t</name></expr>;</return>
		}</block></function>



		<function><type><specifier pos:line="87" pos:column="17">public</specifier> <name><name pos:line="87" pos:column="24">IEnumerable</name><argument_list pos:line="87" pos:column="35">&lt;<argument><name pos:line="87" pos:column="36">StepEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="87" pos:column="47">GetItems</name> <parameter_list pos:line="87" pos:column="56">(<param><decl><type><name pos:line="87" pos:column="57">int</name></type> <name pos:line="87" pos:column="61">count</name></decl></param>)</parameter_list>
		<block pos:line="88" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="89" pos:column="25">var</name></type> <name pos:line="89" pos:column="29">tl</name> <init pos:line="89" pos:column="32">= <expr><op:operator pos:line="89" pos:column="34">new</op:operator> <call><name><name pos:line="89" pos:column="38">List</name><argument_list pos:line="89" pos:column="42">&lt;<argument><name pos:line="89" pos:column="43">StepEntry</name></argument>&gt;</argument_list></name> <argument_list pos:line="89" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<lock pos:line="91" pos:column="25">lock (<expr><name pos:line="91" pos:column="31">locker</name></expr>) <block pos:line="91" pos:column="39">{
				<using pos:line="92" pos:column="33">using (<expr><name pos:line="92" pos:column="40">connection</name> <op:operator pos:line="92" pos:column="51">=</op:operator> <op:operator pos:line="92" pos:column="53">new</op:operator> <call><name pos:line="92" pos:column="57">SqliteConnection</name> <argument_list pos:line="92" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="75">"Data Source="</lit:literal> <op:operator pos:line="92" pos:column="90">+</op:operator> <name pos:line="92" pos:column="92">path</name></expr></argument>)</argument_list></call></expr>) <block pos:line="92" pos:column="99">{
					<expr_stmt><expr><call><name><name pos:line="93" pos:column="41">connection</name><op:operator pos:line="93" pos:column="51">.</op:operator><name pos:line="93" pos:column="52">Open</name></name> <argument_list pos:line="93" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
					<using pos:line="94" pos:column="41">using (<decl><type><name pos:line="94" pos:column="48">var</name></type> <name pos:line="94" pos:column="52">contents</name> <init pos:line="94" pos:column="61">= <expr><call><name><name pos:line="94" pos:column="63">connection</name><op:operator pos:line="94" pos:column="73">.</op:operator><name pos:line="94" pos:column="74">CreateCommand</name></name> <argument_list pos:line="94" pos:column="88">()</argument_list></call></expr></init></decl>) <block pos:line="94" pos:column="92">{
						<if pos:line="95" pos:column="49">if <condition pos:line="95" pos:column="52">(<expr><name pos:line="95" pos:column="53">count</name> <op:operator pos:line="95" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="95" pos:column="62">0</lit:literal></expr>)</condition><then pos:line="95" pos:column="64">
							<expr_stmt><expr><name><name pos:line="96" pos:column="57">contents</name><op:operator pos:line="96" pos:column="65">.</op:operator><name pos:line="96" pos:column="66">CommandText</name></name> <op:operator pos:line="96" pos:column="78">=</op:operator> <lit:literal type="string" pos:line="96" pos:column="80">"SELECT [_id], [Steps], [Date] from [Items]"</lit:literal></expr>;</expr_stmt></then>
						<else pos:line="97" pos:column="49">else
							<expr_stmt><expr><name><name pos:line="98" pos:column="57">contents</name><op:operator pos:line="98" pos:column="65">.</op:operator><name pos:line="98" pos:column="66">CommandText</name></name> <op:operator pos:line="98" pos:column="78">=</op:operator> <lit:literal type="string" pos:line="98" pos:column="80">"SELECT [_id], [Steps], [Date] from [Items] ORDER BY _id DESC LIMIT "</lit:literal> <op:operator pos:line="98" pos:column="150">+</op:operator> <name pos:line="98" pos:column="152">count</name></expr>;</expr_stmt></else></if>

						<decl_stmt><decl><type><name pos:line="100" pos:column="49">var</name></type> <name pos:line="100" pos:column="53">r</name> <init pos:line="100" pos:column="55">= <expr><call><name><name pos:line="100" pos:column="57">contents</name><op:operator pos:line="100" pos:column="65">.</op:operator><name pos:line="100" pos:column="66">ExecuteReader</name></name> <argument_list pos:line="100" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<while pos:line="101" pos:column="49">while <condition pos:line="101" pos:column="55">(<expr><call><name><name pos:line="101" pos:column="56">r</name><op:operator pos:line="101" pos:column="57">.</op:operator><name pos:line="101" pos:column="58">Read</name></name> <argument_list pos:line="101" pos:column="63">()</argument_list></call></expr>)</condition> <block pos:line="101" pos:column="67">{
							<expr_stmt><expr><call><name><name pos:line="102" pos:column="57">tl</name><op:operator pos:line="102" pos:column="59">.</op:operator><name pos:line="102" pos:column="60">Add</name></name> <argument_list pos:line="102" pos:column="64">(<argument><expr><call><name pos:line="102" pos:column="65">FromReader</name> <argument_list pos:line="102" pos:column="76">(<argument><expr><name pos:line="102" pos:column="77">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></while>
						<expr_stmt><expr><call><name><name pos:line="104" pos:column="49">r</name><op:operator pos:line="104" pos:column="50">.</op:operator><name pos:line="104" pos:column="51">Close</name></name> <argument_list pos:line="104" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
					}</block></using>
					<expr_stmt><expr><call><name><name pos:line="106" pos:column="41">connection</name><op:operator pos:line="106" pos:column="51">.</op:operator><name pos:line="106" pos:column="52">Close</name></name> <argument_list pos:line="106" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></using>
			}</block></lock>
			<return pos:line="109" pos:column="25">return <expr><name pos:line="109" pos:column="32">tl</name></expr>;</return>
		}</block></function>
			

		<function><type><specifier pos:line="113" pos:column="17">public</specifier> <name pos:line="113" pos:column="24">StepEntry</name></type> <name pos:line="113" pos:column="34">GetItem</name> <parameter_list pos:line="113" pos:column="42">(<param><decl><type><name pos:line="113" pos:column="43">DateTime</name></type> <name pos:line="113" pos:column="52">date</name></decl></param>)</parameter_list> 
		<block pos:line="114" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="115" pos:column="25">var</name></type> <name pos:line="115" pos:column="29">t</name> <init pos:line="115" pos:column="31">= <expr><op:operator pos:line="115" pos:column="33">new</op:operator> <call><name pos:line="115" pos:column="37">StepEntry</name> <argument_list pos:line="115" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<lock pos:line="116" pos:column="25">lock (<expr><name pos:line="116" pos:column="31">locker</name></expr>) <block pos:line="116" pos:column="39">{
				<using pos:line="117" pos:column="33">using (<expr><name pos:line="117" pos:column="40">connection</name> <op:operator pos:line="117" pos:column="51">=</op:operator> <op:operator pos:line="117" pos:column="53">new</op:operator> <call><name pos:line="117" pos:column="57">SqliteConnection</name> <argument_list pos:line="117" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="75">"Data Source="</lit:literal> <op:operator pos:line="117" pos:column="90">+</op:operator> <name pos:line="117" pos:column="92">path</name></expr></argument>)</argument_list></call></expr>) <block pos:line="117" pos:column="99">{
					<expr_stmt><expr><call><name><name pos:line="118" pos:column="41">connection</name><op:operator pos:line="118" pos:column="51">.</op:operator><name pos:line="118" pos:column="52">Open</name></name> <argument_list pos:line="118" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
					<using pos:line="119" pos:column="41">using (<decl><type><name pos:line="119" pos:column="48">var</name></type> <name pos:line="119" pos:column="52">command</name> <init pos:line="119" pos:column="60">= <expr><call><name><name pos:line="119" pos:column="62">connection</name><op:operator pos:line="119" pos:column="72">.</op:operator><name pos:line="119" pos:column="73">CreateCommand</name></name> <argument_list pos:line="119" pos:column="87">()</argument_list></call></expr></init></decl>) <block pos:line="119" pos:column="91">{
						<expr_stmt><expr><name><name pos:line="120" pos:column="49">command</name><op:operator pos:line="120" pos:column="56">.</op:operator><name pos:line="120" pos:column="57">CommandText</name></name> <op:operator pos:line="120" pos:column="69">=</op:operator> <lit:literal type="string" pos:line="120" pos:column="71">"SELECT [_id], [Steps], [Date] from [Items] WHERE [Date] = ?"</lit:literal></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="121" pos:column="49">var</name></type> <name pos:line="121" pos:column="53">culture</name> <init pos:line="121" pos:column="61">= <expr><call><name><name pos:line="121" pos:column="63">CultureInfo</name><op:operator pos:line="121" pos:column="74">.</op:operator><name pos:line="121" pos:column="75">CreateSpecificCulture</name></name> <argument_list pos:line="121" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="98">"en-US"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="122" pos:column="49">command</name><op:operator pos:line="122" pos:column="56">.</op:operator><name pos:line="122" pos:column="57">Parameters</name><op:operator pos:line="122" pos:column="67">.</op:operator><name pos:line="122" pos:column="68">Add</name></name> <argument_list pos:line="122" pos:column="72">(<argument><expr><op:operator pos:line="122" pos:column="73">new</op:operator> <call><name pos:line="122" pos:column="77">SqliteParameter</name> <argument_list pos:line="122" pos:column="93">(<argument><expr><name><name pos:line="122" pos:column="94">DbType</name><op:operator pos:line="122" pos:column="100">.</op:operator><name pos:line="122" pos:column="101">String</name></name></expr></argument>)</argument_list></call> <block pos:line="122" pos:column="109">{ <expr><name pos:line="122" pos:column="111">Value</name> <op:operator pos:line="122" pos:column="117">=</op:operator> <call><name><name pos:line="122" pos:column="119">date</name><op:operator pos:line="122" pos:column="123">.</op:operator><name pos:line="122" pos:column="124">ToString</name></name> <argument_list pos:line="122" pos:column="133">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="134">"MM/dd/yyyy"</lit:literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="148">culture</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="123" pos:column="49">var</name></type> <name pos:line="123" pos:column="53">r</name> <init pos:line="123" pos:column="55">= <expr><call><name><name pos:line="123" pos:column="57">command</name><op:operator pos:line="123" pos:column="64">.</op:operator><name pos:line="123" pos:column="65">ExecuteReader</name></name> <argument_list pos:line="123" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<while pos:line="124" pos:column="49">while <condition pos:line="124" pos:column="55">(<expr><call><name><name pos:line="124" pos:column="56">r</name><op:operator pos:line="124" pos:column="57">.</op:operator><name pos:line="124" pos:column="58">Read</name></name> <argument_list pos:line="124" pos:column="63">()</argument_list></call></expr>)</condition> <block pos:line="124" pos:column="67">{
							<expr_stmt><expr><name pos:line="125" pos:column="57">t</name> <op:operator pos:line="125" pos:column="59">=</op:operator> <call><name pos:line="125" pos:column="61">FromReader</name> <argument_list pos:line="125" pos:column="72">(<argument><expr><name pos:line="125" pos:column="73">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break pos:line="126" pos:column="57">break;</break>
						}</block></while>
						<expr_stmt><expr><call><name><name pos:line="128" pos:column="49">r</name><op:operator pos:line="128" pos:column="50">.</op:operator><name pos:line="128" pos:column="51">Close</name></name> <argument_list pos:line="128" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
					}</block></using>
					<expr_stmt><expr><call><name><name pos:line="130" pos:column="41">connection</name><op:operator pos:line="130" pos:column="51">.</op:operator><name pos:line="130" pos:column="52">Close</name></name> <argument_list pos:line="130" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></using>
			}</block></lock>
			<return pos:line="133" pos:column="25">return <expr><name pos:line="133" pos:column="32">t</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="136" pos:column="17">public</specifier> <name pos:line="136" pos:column="24">int</name></type> <name pos:line="136" pos:column="28">SaveItem</name> <parameter_list pos:line="136" pos:column="37">(<param><decl><type><name pos:line="136" pos:column="38">StepEntry</name></type> <name pos:line="136" pos:column="48">item</name></decl></param>)</parameter_list> 
		<block pos:line="137" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="138" pos:column="25">int</name></type> <name pos:line="138" pos:column="29">r</name></decl>;</decl_stmt>
			<lock pos:line="139" pos:column="25">lock (<expr><name pos:line="139" pos:column="31">locker</name></expr>) <block pos:line="139" pos:column="39">{
				<if pos:line="140" pos:column="33">if <condition pos:line="140" pos:column="36">(<expr><name><name pos:line="140" pos:column="37">item</name><op:operator pos:line="140" pos:column="41">.</op:operator><name pos:line="140" pos:column="42">ID</name></name> <op:operator pos:line="140" pos:column="45">!=</op:operator> <lit:literal type="number" pos:line="140" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="140" pos:column="50"> <block pos:line="140" pos:column="51">{
					<using pos:line="141" pos:column="41">using (<expr><name pos:line="141" pos:column="48">connection</name> <op:operator pos:line="141" pos:column="59">=</op:operator> <op:operator pos:line="141" pos:column="61">new</op:operator> <call><name pos:line="141" pos:column="65">SqliteConnection</name> <argument_list pos:line="141" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="83">"Data Source="</lit:literal> <op:operator pos:line="141" pos:column="98">+</op:operator> <name pos:line="141" pos:column="100">path</name></expr></argument>)</argument_list></call></expr>) <block pos:line="141" pos:column="107">{
						<expr_stmt><expr><call><name><name pos:line="142" pos:column="49">connection</name><op:operator pos:line="142" pos:column="59">.</op:operator><name pos:line="142" pos:column="60">Open</name></name> <argument_list pos:line="142" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
						<using pos:line="143" pos:column="49">using (<decl><type><name pos:line="143" pos:column="56">var</name></type> <name pos:line="143" pos:column="60">command</name> <init pos:line="143" pos:column="68">= <expr><call><name><name pos:line="143" pos:column="70">connection</name><op:operator pos:line="143" pos:column="80">.</op:operator><name pos:line="143" pos:column="81">CreateCommand</name></name> <argument_list pos:line="143" pos:column="95">()</argument_list></call></expr></init></decl>) <block pos:line="143" pos:column="99">{
							<expr_stmt><expr><name><name pos:line="144" pos:column="57">command</name><op:operator pos:line="144" pos:column="64">.</op:operator><name pos:line="144" pos:column="65">CommandText</name></name> <op:operator pos:line="144" pos:column="77">=</op:operator> <lit:literal type="string" pos:line="144" pos:column="79">"UPDATE [Items] SET [Steps] = ?, [Date] = ? WHERE [_id] = ?;"</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="145" pos:column="57">command</name><op:operator pos:line="145" pos:column="64">.</op:operator><name pos:line="145" pos:column="65">Parameters</name><op:operator pos:line="145" pos:column="75">.</op:operator><name pos:line="145" pos:column="76">Add</name></name> <argument_list pos:line="145" pos:column="80">(<argument><expr><op:operator pos:line="145" pos:column="81">new</op:operator> <call><name pos:line="145" pos:column="85">SqliteParameter</name> <argument_list pos:line="145" pos:column="101">(<argument><expr><name><name pos:line="145" pos:column="102">DbType</name><op:operator pos:line="145" pos:column="108">.</op:operator><name pos:line="145" pos:column="109">Int64</name></name></expr></argument>)</argument_list></call> <block pos:line="145" pos:column="116">{ <expr><name pos:line="145" pos:column="118">Value</name> <op:operator pos:line="145" pos:column="124">=</op:operator> <name><name pos:line="145" pos:column="126">item</name><op:operator pos:line="145" pos:column="130">.</op:operator><name pos:line="145" pos:column="131">Steps</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="146" pos:column="57">var</name></type> <name pos:line="146" pos:column="61">culture</name> <init pos:line="146" pos:column="69">= <expr><call><name><name pos:line="146" pos:column="71">CultureInfo</name><op:operator pos:line="146" pos:column="82">.</op:operator><name pos:line="146" pos:column="83">CreateSpecificCulture</name></name> <argument_list pos:line="146" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="106">"en-US"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="147" pos:column="57">command</name><op:operator pos:line="147" pos:column="64">.</op:operator><name pos:line="147" pos:column="65">Parameters</name><op:operator pos:line="147" pos:column="75">.</op:operator><name pos:line="147" pos:column="76">Add</name></name> <argument_list pos:line="147" pos:column="80">(<argument><expr><op:operator pos:line="147" pos:column="81">new</op:operator> <call><name pos:line="147" pos:column="85">SqliteParameter</name> <argument_list pos:line="147" pos:column="101">(<argument><expr><name><name pos:line="147" pos:column="102">DbType</name><op:operator pos:line="147" pos:column="108">.</op:operator><name pos:line="147" pos:column="109">String</name></name></expr></argument>)</argument_list></call> <block pos:line="147" pos:column="117">{ <expr><name pos:line="147" pos:column="119">Value</name> <op:operator pos:line="147" pos:column="125">=</op:operator> <call><name><name pos:line="147" pos:column="127">item</name><op:operator pos:line="147" pos:column="131">.</op:operator><name pos:line="147" pos:column="132">Date</name><op:operator pos:line="147" pos:column="136">.</op:operator><name pos:line="147" pos:column="137">ToString</name></name> <argument_list pos:line="147" pos:column="146">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="147">"MM/dd/yyyy"</lit:literal></expr></argument>, <argument><expr><name pos:line="147" pos:column="161">culture</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="148" pos:column="57">command</name><op:operator pos:line="148" pos:column="64">.</op:operator><name pos:line="148" pos:column="65">Parameters</name><op:operator pos:line="148" pos:column="75">.</op:operator><name pos:line="148" pos:column="76">Add</name></name> <argument_list pos:line="148" pos:column="80">(<argument><expr><op:operator pos:line="148" pos:column="81">new</op:operator> <call><name pos:line="148" pos:column="85">SqliteParameter</name> <argument_list pos:line="148" pos:column="101">(<argument><expr><name><name pos:line="148" pos:column="102">DbType</name><op:operator pos:line="148" pos:column="108">.</op:operator><name pos:line="148" pos:column="109">Int32</name></name></expr></argument>)</argument_list></call> <block pos:line="148" pos:column="116">{ <expr><name pos:line="148" pos:column="118">Value</name> <op:operator pos:line="148" pos:column="124">=</op:operator> <name><name pos:line="148" pos:column="126">item</name><op:operator pos:line="148" pos:column="130">.</op:operator><name pos:line="148" pos:column="131">ID</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="149" pos:column="57">r</name> <op:operator pos:line="149" pos:column="59">=</op:operator> <call><name><name pos:line="149" pos:column="61">command</name><op:operator pos:line="149" pos:column="68">.</op:operator><name pos:line="149" pos:column="69">ExecuteNonQuery</name></name> <argument_list pos:line="149" pos:column="85">()</argument_list></call></expr>;</expr_stmt>
						}</block></using>
						<expr_stmt><expr><call><name><name pos:line="151" pos:column="49">connection</name><op:operator pos:line="151" pos:column="59">.</op:operator><name pos:line="151" pos:column="60">Close</name></name> <argument_list pos:line="151" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
					}</block></using>
					<return pos:line="153" pos:column="41">return <expr><name pos:line="153" pos:column="48">r</name></expr>;</return>
				}</block></then> <else pos:line="154" pos:column="35">else <block pos:line="154" pos:column="40">{
					<using pos:line="155" pos:column="41">using (<expr><name pos:line="155" pos:column="48">connection</name> <op:operator pos:line="155" pos:column="59">=</op:operator> <op:operator pos:line="155" pos:column="61">new</op:operator> <call><name pos:line="155" pos:column="65">SqliteConnection</name> <argument_list pos:line="155" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="83">"Data Source="</lit:literal> <op:operator pos:line="155" pos:column="98">+</op:operator> <name pos:line="155" pos:column="100">path</name></expr></argument>)</argument_list></call></expr>) <block pos:line="155" pos:column="107">{
						<expr_stmt><expr><call><name><name pos:line="156" pos:column="49">connection</name><op:operator pos:line="156" pos:column="59">.</op:operator><name pos:line="156" pos:column="60">Open</name></name> <argument_list pos:line="156" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
						<using pos:line="157" pos:column="49">using (<decl><type><name pos:line="157" pos:column="56">var</name></type> <name pos:line="157" pos:column="60">command</name> <init pos:line="157" pos:column="68">= <expr><call><name><name pos:line="157" pos:column="70">connection</name><op:operator pos:line="157" pos:column="80">.</op:operator><name pos:line="157" pos:column="81">CreateCommand</name></name> <argument_list pos:line="157" pos:column="95">()</argument_list></call></expr></init></decl>) <block pos:line="157" pos:column="99">{
							<expr_stmt><expr><name><name pos:line="158" pos:column="57">command</name><op:operator pos:line="158" pos:column="64">.</op:operator><name pos:line="158" pos:column="65">CommandText</name></name> <op:operator pos:line="158" pos:column="77">=</op:operator> <lit:literal type="string" pos:line="158" pos:column="79">"INSERT INTO [Items] ([Steps], [Date]) VALUES (? ,?)"</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="159" pos:column="57">command</name><op:operator pos:line="159" pos:column="64">.</op:operator><name pos:line="159" pos:column="65">Parameters</name><op:operator pos:line="159" pos:column="75">.</op:operator><name pos:line="159" pos:column="76">Add</name></name> <argument_list pos:line="159" pos:column="80">(<argument><expr><op:operator pos:line="159" pos:column="81">new</op:operator> <call><name pos:line="159" pos:column="85">SqliteParameter</name> <argument_list pos:line="159" pos:column="101">(<argument><expr><name><name pos:line="159" pos:column="102">DbType</name><op:operator pos:line="159" pos:column="108">.</op:operator><name pos:line="159" pos:column="109">Int64</name></name></expr></argument>)</argument_list></call> <block pos:line="159" pos:column="116">{ <expr><name pos:line="159" pos:column="118">Value</name> <op:operator pos:line="159" pos:column="124">=</op:operator> <name><name pos:line="159" pos:column="126">item</name><op:operator pos:line="159" pos:column="130">.</op:operator><name pos:line="159" pos:column="131">Steps</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="160" pos:column="57">var</name></type> <name pos:line="160" pos:column="61">culture</name> <init pos:line="160" pos:column="69">= <expr><call><name><name pos:line="160" pos:column="71">CultureInfo</name><op:operator pos:line="160" pos:column="82">.</op:operator><name pos:line="160" pos:column="83">CreateSpecificCulture</name></name> <argument_list pos:line="160" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="106">"en-US"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="161" pos:column="57">command</name><op:operator pos:line="161" pos:column="64">.</op:operator><name pos:line="161" pos:column="65">Parameters</name><op:operator pos:line="161" pos:column="75">.</op:operator><name pos:line="161" pos:column="76">Add</name></name> <argument_list pos:line="161" pos:column="80">(<argument><expr><op:operator pos:line="161" pos:column="81">new</op:operator> <call><name pos:line="161" pos:column="85">SqliteParameter</name> <argument_list pos:line="161" pos:column="101">(<argument><expr><name><name pos:line="161" pos:column="102">DbType</name><op:operator pos:line="161" pos:column="108">.</op:operator><name pos:line="161" pos:column="109">String</name></name></expr></argument>)</argument_list></call> <block pos:line="161" pos:column="117">{ <expr><name pos:line="161" pos:column="119">Value</name> <op:operator pos:line="161" pos:column="125">=</op:operator> <call><name><name pos:line="161" pos:column="127">item</name><op:operator pos:line="161" pos:column="131">.</op:operator><name pos:line="161" pos:column="132">Date</name><op:operator pos:line="161" pos:column="136">.</op:operator><name pos:line="161" pos:column="137">ToString</name></name> <argument_list pos:line="161" pos:column="146">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="147">"MM/dd/yyyy"</lit:literal></expr></argument>, <argument><expr><name pos:line="161" pos:column="161">culture</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="162" pos:column="57">r</name> <op:operator pos:line="162" pos:column="59">=</op:operator> <call><name><name pos:line="162" pos:column="61">command</name><op:operator pos:line="162" pos:column="68">.</op:operator><name pos:line="162" pos:column="69">ExecuteNonQuery</name></name> <argument_list pos:line="162" pos:column="85">()</argument_list></call></expr>;</expr_stmt>
						}</block></using>
						<expr_stmt><expr><call><name><name pos:line="164" pos:column="49">connection</name><op:operator pos:line="164" pos:column="59">.</op:operator><name pos:line="164" pos:column="60">Close</name></name> <argument_list pos:line="164" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
					}</block></using>
					<return pos:line="166" pos:column="41">return <expr><name pos:line="166" pos:column="48">r</name></expr>;</return>
				}</block></else></if>

			}</block></lock>
		}</block></function>

		<function><type><specifier pos:line="172" pos:column="17">public</specifier> <name pos:line="172" pos:column="24">int</name></type> <name pos:line="172" pos:column="28">DeleteItem</name><parameter_list pos:line="172" pos:column="38">(<param><decl><type><name pos:line="172" pos:column="39">int</name></type> <name pos:line="172" pos:column="43">id</name></decl></param>)</parameter_list> 
		<block pos:line="173" pos:column="17">{
			<lock pos:line="174" pos:column="25">lock (<expr><name pos:line="174" pos:column="31">locker</name></expr>) <block pos:line="174" pos:column="39">{
				<decl_stmt><decl><type><name pos:line="175" pos:column="33">int</name></type> <name pos:line="175" pos:column="37">r</name></decl>;</decl_stmt>
				<using pos:line="176" pos:column="33">using (<expr><name pos:line="176" pos:column="40">connection</name> <op:operator pos:line="176" pos:column="51">=</op:operator> <op:operator pos:line="176" pos:column="53">new</op:operator> <call><name pos:line="176" pos:column="57">SqliteConnection</name> <argument_list pos:line="176" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="75">"Data Source="</lit:literal> <op:operator pos:line="176" pos:column="90">+</op:operator> <name pos:line="176" pos:column="92">path</name></expr></argument>)</argument_list></call></expr>) <block pos:line="176" pos:column="99">{
					<expr_stmt><expr><call><name><name pos:line="177" pos:column="41">connection</name><op:operator pos:line="177" pos:column="51">.</op:operator><name pos:line="177" pos:column="52">Open</name></name> <argument_list pos:line="177" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
					<using pos:line="178" pos:column="41">using (<decl><type><name pos:line="178" pos:column="48">var</name></type> <name pos:line="178" pos:column="52">command</name> <init pos:line="178" pos:column="60">= <expr><call><name><name pos:line="178" pos:column="62">connection</name><op:operator pos:line="178" pos:column="72">.</op:operator><name pos:line="178" pos:column="73">CreateCommand</name></name> <argument_list pos:line="178" pos:column="87">()</argument_list></call></expr></init></decl>) <block pos:line="178" pos:column="91">{
						<expr_stmt><expr><name><name pos:line="179" pos:column="49">command</name><op:operator pos:line="179" pos:column="56">.</op:operator><name pos:line="179" pos:column="57">CommandText</name></name> <op:operator pos:line="179" pos:column="69">=</op:operator> <lit:literal type="string" pos:line="179" pos:column="71">"DELETE FROM [Items] WHERE [_id] = ?;"</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="180" pos:column="49">command</name><op:operator pos:line="180" pos:column="56">.</op:operator><name pos:line="180" pos:column="57">Parameters</name><op:operator pos:line="180" pos:column="67">.</op:operator><name pos:line="180" pos:column="68">Add</name></name> <argument_list pos:line="180" pos:column="72">(<argument><expr><op:operator pos:line="180" pos:column="73">new</op:operator> <call><name pos:line="180" pos:column="77">SqliteParameter</name> <argument_list pos:line="180" pos:column="93">(<argument><expr><name><name pos:line="180" pos:column="94">DbType</name><op:operator pos:line="180" pos:column="100">.</op:operator><name pos:line="180" pos:column="101">Int32</name></name></expr></argument>)</argument_list></call> <block pos:line="180" pos:column="108">{ <expr><name pos:line="180" pos:column="110">Value</name> <op:operator pos:line="180" pos:column="116">=</op:operator> <name pos:line="180" pos:column="118">id</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="181" pos:column="49">r</name> <op:operator pos:line="181" pos:column="51">=</op:operator> <call><name><name pos:line="181" pos:column="53">command</name><op:operator pos:line="181" pos:column="60">.</op:operator><name pos:line="181" pos:column="61">ExecuteNonQuery</name></name> <argument_list pos:line="181" pos:column="77">()</argument_list></call></expr>;</expr_stmt>
					}</block></using>
					<expr_stmt><expr><call><name><name pos:line="183" pos:column="41">connection</name><op:operator pos:line="183" pos:column="51">.</op:operator><name pos:line="183" pos:column="52">Close</name></name> <argument_list pos:line="183" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></using>
				<return pos:line="185" pos:column="33">return <expr><name pos:line="185" pos:column="40">r</name></expr>;</return>
			}</block></lock>
		}</block></function>
	}</block></class>
}</block></namespace></unit>
