<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\School\Grad School (Comp Sci)\Thesis\Apps\My-StepCounter-master\StepCounter\Helpers\Conversion.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">StepCounter</name><op:operator pos:line="3" pos:column="22">.</op:operator><name pos:line="3" pos:column="23">Helpers</name></name>
<block pos:line="4" pos:column="1">{
    <class><specifier pos:line="5" pos:column="5">public</specifier> <specifier pos:line="5" pos:column="12">static</specifier> class <name pos:line="5" pos:column="25">Conversion</name>
    <block pos:line="6" pos:column="5">{
        <function><type><specifier pos:line="7" pos:column="9">public</specifier> <specifier pos:line="7" pos:column="16">static</specifier> <name pos:line="7" pos:column="23">double</name></type> <name pos:line="7" pos:column="30">StepCountToPercentage</name><parameter_list pos:line="7" pos:column="51">(<param><decl><type><name pos:line="7" pos:column="52">int</name></type> <name pos:line="7" pos:column="56">stepCount</name></decl></param>)</parameter_list>
        <block pos:line="8" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="9" pos:column="13">var</name></type> <name pos:line="9" pos:column="17">per</name> <init pos:line="9" pos:column="21">= <expr><op:operator pos:line="9" pos:column="23">(</op:operator><name pos:line="9" pos:column="24">stepCount</name><op:operator pos:line="9" pos:column="33">/</op:operator><op:operator pos:line="9" pos:column="34">(</op:operator><name pos:line="9" pos:column="35">decimal</name><op:operator pos:line="9" pos:column="42">)</op:operator> <lit:literal type="number" pos:line="9" pos:column="44">10000</lit:literal><op:operator pos:line="9" pos:column="49">)</op:operator><op:operator pos:line="9" pos:column="50">*</op:operator><lit:literal type="number" pos:line="9" pos:column="51">100</lit:literal></expr></init></decl>;</decl_stmt>
            <return pos:line="10" pos:column="13">return <expr><op:operator pos:line="10" pos:column="20">(</op:operator><op:operator pos:line="10" pos:column="21">(</op:operator><name pos:line="10" pos:column="22">double</name><op:operator pos:line="10" pos:column="28">)</op:operator> <name pos:line="10" pos:column="30">per</name><op:operator pos:line="10" pos:column="33">)</op:operator></expr>;</return>
        }</block></function>

				<function><type><specifier pos:line="13" pos:column="33">public</specifier> <specifier pos:line="13" pos:column="40">static</specifier> <name pos:line="13" pos:column="47">double</name></type> <name pos:line="13" pos:column="54">StepCountToPercentage</name><parameter_list pos:line="13" pos:column="75">(<param><decl><type><name pos:line="13" pos:column="76">Int64</name></type> <name pos:line="13" pos:column="82">stepCount</name></decl></param>)</parameter_list>
				<block pos:line="14" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="15" pos:column="41">var</name></type> <name pos:line="15" pos:column="45">per</name> <init pos:line="15" pos:column="49">= <expr><op:operator pos:line="15" pos:column="51">(</op:operator><name pos:line="15" pos:column="52">stepCount</name><op:operator pos:line="15" pos:column="61">/</op:operator><op:operator pos:line="15" pos:column="62">(</op:operator><name pos:line="15" pos:column="63">decimal</name><op:operator pos:line="15" pos:column="70">)</op:operator> <lit:literal type="number" pos:line="15" pos:column="72">10000</lit:literal><op:operator pos:line="15" pos:column="77">)</op:operator><op:operator pos:line="15" pos:column="78">*</op:operator><lit:literal type="number" pos:line="15" pos:column="79">100</lit:literal></expr></init></decl>;</decl_stmt>
					<return pos:line="16" pos:column="41">return <expr><op:operator pos:line="16" pos:column="48">(</op:operator><op:operator pos:line="16" pos:column="49">(</op:operator><name pos:line="16" pos:column="50">double</name><op:operator pos:line="16" pos:column="56">)</op:operator> <name pos:line="16" pos:column="58">per</name><op:operator pos:line="16" pos:column="61">)</op:operator></expr>;</return>
				}</block></function>

        <function><type><specifier pos:line="19" pos:column="9">public</specifier> <specifier pos:line="19" pos:column="16">static</specifier> <name pos:line="19" pos:column="23">int</name></type> <name pos:line="19" pos:column="27">PercentageToStepCount</name><parameter_list pos:line="19" pos:column="48">(<param><decl><type><name pos:line="19" pos:column="49">double</name></type> <name pos:line="19" pos:column="56">percent</name></decl></param>)</parameter_list>
        <block pos:line="20" pos:column="9">{
            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><op:operator pos:line="21" pos:column="17">!</op:operator><op:operator pos:line="21" pos:column="18">(</op:operator><name pos:line="21" pos:column="19">percent</name> <op:operator pos:line="21" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="21" pos:column="29">0</lit:literal><op:operator pos:line="21" pos:column="30">)</op:operator></expr>)</condition><then pos:line="21" pos:column="32"> <return pos:line="21" pos:column="33">return <expr><lit:literal type="number" pos:line="21" pos:column="40">0</lit:literal></expr>;</return></then></if>
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">steps</name> <init pos:line="22" pos:column="23">= <expr><op:operator pos:line="22" pos:column="25">(</op:operator><lit:literal type="number" pos:line="22" pos:column="26">10000</lit:literal><op:operator pos:line="22" pos:column="31">/</op:operator><op:operator pos:line="22" pos:column="32">(</op:operator><name pos:line="22" pos:column="33">decimal</name><op:operator pos:line="22" pos:column="40">)</op:operator> <name pos:line="22" pos:column="42">percent</name><op:operator pos:line="22" pos:column="49">)</op:operator><op:operator pos:line="22" pos:column="50">*</op:operator><lit:literal type="number" pos:line="22" pos:column="51">100</lit:literal></expr></init></decl>;</decl_stmt>
            <return pos:line="23" pos:column="13">return <expr><op:operator pos:line="23" pos:column="20">(</op:operator><op:operator pos:line="23" pos:column="21">(</op:operator><name pos:line="23" pos:column="22">int</name><op:operator pos:line="23" pos:column="25">)</op:operator> <name pos:line="23" pos:column="27">steps</name><op:operator pos:line="23" pos:column="32">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">static</specifier> <name pos:line="26" pos:column="23">float</name></type> <name pos:line="26" pos:column="29">StepsToMiles</name><parameter_list pos:line="26" pos:column="41">(<param><decl><type><name pos:line="26" pos:column="42">int</name></type> <name pos:line="26" pos:column="46">stepCount</name></decl></param>)</parameter_list>
        <block pos:line="27" pos:column="9">{
            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><name pos:line="28" pos:column="17">stepCount</name> <op:operator pos:line="28" pos:column="27">&lt;=</op:operator> <lit:literal type="number" pos:line="28" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="28" pos:column="32"> <return pos:line="28" pos:column="33">return <expr><lit:literal type="number" pos:line="28" pos:column="40">0.00f</lit:literal></expr>;</return></then></if>
            <comment type="line" pos:line="29" pos:column="13">//Average steps in a mile</comment>
            <decl_stmt><decl><type><specifier pos:line="30" pos:column="13">const</specifier> <name pos:line="30" pos:column="19">float</name></type> <name pos:line="30" pos:column="25">stepsPerMile</name> <init pos:line="30" pos:column="38">= <expr><lit:literal type="number" pos:line="30" pos:column="40">2000</lit:literal></expr></init></decl>;</decl_stmt>
            <return pos:line="31" pos:column="13">return <expr><name pos:line="31" pos:column="20">stepCount</name><op:operator pos:line="31" pos:column="29">/</op:operator><name pos:line="31" pos:column="30">stepsPerMile</name></expr>;</return>
        }</block></function>

				<function><type><specifier pos:line="34" pos:column="33">public</specifier> <specifier pos:line="34" pos:column="40">static</specifier> <name pos:line="34" pos:column="47">float</name></type> <name pos:line="34" pos:column="53">StepsToMiles</name><parameter_list pos:line="34" pos:column="65">(<param><decl><type><name pos:line="34" pos:column="66">Int64</name></type> <name pos:line="34" pos:column="72">stepCount</name></decl></param>)</parameter_list>
				<block pos:line="35" pos:column="33">{
					<if pos:line="36" pos:column="41">if <condition pos:line="36" pos:column="44">(<expr><name pos:line="36" pos:column="45">stepCount</name> <op:operator pos:line="36" pos:column="55">&lt;=</op:operator> <lit:literal type="number" pos:line="36" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="36" pos:column="60"> <return pos:line="36" pos:column="61">return <expr><lit:literal type="number" pos:line="36" pos:column="68">0.00f</lit:literal></expr>;</return></then></if>
					<comment type="line" pos:line="37" pos:column="41">//Average steps in a mile</comment>
					<decl_stmt><decl><type><specifier pos:line="38" pos:column="41">const</specifier> <name pos:line="38" pos:column="47">float</name></type> <name pos:line="38" pos:column="53">stepsPerMile</name> <init pos:line="38" pos:column="66">= <expr><lit:literal type="number" pos:line="38" pos:column="68">2000</lit:literal></expr></init></decl>;</decl_stmt>
					<return pos:line="39" pos:column="41">return <expr><name pos:line="39" pos:column="48">stepCount</name><op:operator pos:line="39" pos:column="57">/</op:operator><name pos:line="39" pos:column="58">stepsPerMile</name></expr>;</return>
				}</block></function>

        <function><type><specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">static</specifier> <name pos:line="42" pos:column="23">float</name></type> <name pos:line="42" pos:column="29">StepsToKilometers</name><parameter_list pos:line="42" pos:column="46">(<param><decl><type><name pos:line="42" pos:column="47">int</name></type> <name pos:line="42" pos:column="51">stepCount</name></decl></param>)</parameter_list>
        <block pos:line="43" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">miles</name> <init pos:line="44" pos:column="23">= <expr><call><name pos:line="44" pos:column="25">StepsToMiles</name><argument_list pos:line="44" pos:column="37">(<argument><expr><name pos:line="44" pos:column="38">stepCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="45" pos:column="13">return <expr><name pos:line="45" pos:column="20">miles</name><op:operator pos:line="45" pos:column="25">*</op:operator><lit:literal type="number" pos:line="45" pos:column="26">1.609344f</lit:literal></expr>;</return>
        }</block></function>

				<function><type><specifier pos:line="48" pos:column="33">public</specifier> <specifier pos:line="48" pos:column="40">static</specifier> <name pos:line="48" pos:column="47">float</name></type> <name pos:line="48" pos:column="53">StepsToKilometers</name><parameter_list pos:line="48" pos:column="70">(<param><decl><type><name pos:line="48" pos:column="71">Int64</name></type> <name pos:line="48" pos:column="77">stepCount</name></decl></param>)</parameter_list>
				<block pos:line="49" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="50" pos:column="41">var</name></type> <name pos:line="50" pos:column="45">miles</name> <init pos:line="50" pos:column="51">= <expr><call><name pos:line="50" pos:column="53">StepsToMiles</name><argument_list pos:line="50" pos:column="65">(<argument><expr><name pos:line="50" pos:column="66">stepCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="51" pos:column="41">return <expr><name pos:line="51" pos:column="48">miles</name><op:operator pos:line="51" pos:column="53">*</op:operator><lit:literal type="number" pos:line="51" pos:column="54">1.609344f</lit:literal></expr>;</return>
				}</block></function>


        <function><type><specifier pos:line="55" pos:column="9">public</specifier> <specifier pos:line="55" pos:column="16">static</specifier> <name pos:line="55" pos:column="23">string</name></type> <name pos:line="55" pos:column="30">CaloriesBurnt</name><parameter_list pos:line="55" pos:column="43">(<param><decl><type><name pos:line="55" pos:column="44">float</name></type> <name pos:line="55" pos:column="50">miles</name></decl></param>)</parameter_list>
        <block pos:line="56" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="57" pos:column="13">const</specifier> <name pos:line="57" pos:column="19">int</name></type> <name pos:line="57" pos:column="23">caloriesBurntPerMile</name> <init pos:line="57" pos:column="44">= <expr><lit:literal type="number" pos:line="57" pos:column="46">100</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">val</name> <init pos:line="58" pos:column="21">= <expr><name pos:line="58" pos:column="23">miles</name><op:operator pos:line="58" pos:column="28">*</op:operator><name pos:line="58" pos:column="29">caloriesBurntPerMile</name></expr></init></decl>;</decl_stmt>
						<return pos:line="59" pos:column="49">return <expr><name pos:line="59" pos:column="56">val</name> <op:operator pos:line="59" pos:column="60">&lt;=</op:operator> <lit:literal type="number" pos:line="59" pos:column="63">0</lit:literal> <op:operator pos:line="59" pos:column="65">?</op:operator> <lit:literal type="string" pos:line="59" pos:column="67">"0"</lit:literal> <op:operator pos:line="59" pos:column="71">:</op:operator> <call><name><name pos:line="59" pos:column="73">val</name><op:operator pos:line="59" pos:column="76">.</op:operator><name pos:line="59" pos:column="77">ToString</name></name><argument_list pos:line="59" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="86">"N0"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

				<comment type="line" pos:line="62" pos:column="33">/// &lt;summary&gt;</comment>
				<comment type="line" pos:line="63" pos:column="33">/// Calorieses the burnt with weight entered</comment>
				<comment type="line" pos:line="64" pos:column="33">/// view-source:http://walking.about.com/library/cal/uccalc1.htm</comment>
				<comment type="line" pos:line="65" pos:column="33">/// &lt;/summary&gt;</comment>
				<comment type="line" pos:line="66" pos:column="33">/// &lt;returns&gt;The burnt calories.&lt;/returns&gt;</comment>
				<comment type="line" pos:line="67" pos:column="33">/// &lt;param name="miles"&gt;Miles.&lt;/param&gt;</comment>
				<comment type="line" pos:line="68" pos:column="33">/// &lt;param name="lbs"&gt;Lbs.&lt;/param&gt;</comment>
		<function><type><specifier pos:line="69" pos:column="17">public</specifier> <specifier pos:line="69" pos:column="24">static</specifier> <name pos:line="69" pos:column="31">string</name></type> <name pos:line="69" pos:column="38">CaloriesBurnt</name><parameter_list pos:line="69" pos:column="51">(<param><decl><type><name pos:line="69" pos:column="52">float</name></type> <name pos:line="69" pos:column="58">miles</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="65">float</name></type> <name pos:line="69" pos:column="71">lbs</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="76">string</name></type> <name pos:line="69" pos:column="83">cadence</name></decl></param>)</parameter_list>
				<block pos:line="70" pos:column="33">{
					<if pos:line="71" pos:column="41">if <condition pos:line="71" pos:column="44">(<expr><name pos:line="71" pos:column="45">lbs</name> <op:operator pos:line="71" pos:column="49">&lt;=</op:operator> <lit:literal type="number" pos:line="71" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="71" pos:column="54">
						<return pos:line="72" pos:column="49">return <expr><call><name pos:line="72" pos:column="56">CaloriesBurnt</name> <argument_list pos:line="72" pos:column="70">(<argument><expr><name pos:line="72" pos:column="71">miles</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

					<decl_stmt><decl><type><name pos:line="74" pos:column="41">var</name></type> <name pos:line="74" pos:column="45">met</name> <init pos:line="74" pos:column="49">= <expr><lit:literal type="number" pos:line="74" pos:column="51">3.5</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="75" pos:column="41">var</name></type> <name pos:line="75" pos:column="45">pace</name> <init pos:line="75" pos:column="50">= <expr><lit:literal type="number" pos:line="75" pos:column="52">3.0</lit:literal></expr></init></decl>;</decl_stmt>
					<switch pos:line="76" pos:column="41">switch <condition pos:line="76" pos:column="48">(<expr><name pos:line="76" pos:column="49">cadence</name></expr>)</condition> <block pos:line="76" pos:column="58">{
					<case pos:line="77" pos:column="41">case <expr><lit:literal type="string" pos:line="77" pos:column="46">"0"</lit:literal></expr>:
						<expr_stmt><expr><name pos:line="78" pos:column="49">met</name> <op:operator pos:line="78" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="78" pos:column="55">2.0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="79" pos:column="49">pace</name> <op:operator pos:line="79" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="79" pos:column="56">2.0</lit:literal></expr>;</expr_stmt>
						<break pos:line="80" pos:column="49">break;</break>
					</case><case pos:line="81" pos:column="41">case <expr><lit:literal type="string" pos:line="81" pos:column="46">"1"</lit:literal></expr>:
						<expr_stmt><expr><name pos:line="82" pos:column="49">met</name> <op:operator pos:line="82" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="82" pos:column="55">2.5</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="83" pos:column="49">pace</name> <op:operator pos:line="83" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="83" pos:column="56">2.0</lit:literal></expr>;</expr_stmt>
						<break pos:line="84" pos:column="49">break;</break>
					</case><case pos:line="85" pos:column="41">case <expr><lit:literal type="string" pos:line="85" pos:column="46">"2"</lit:literal></expr>:
						<expr_stmt><expr><name pos:line="86" pos:column="49">met</name> <op:operator pos:line="86" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="86" pos:column="55">3.0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="87" pos:column="49">pace</name> <op:operator pos:line="87" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="87" pos:column="56">2.5</lit:literal></expr>;</expr_stmt>
						<break pos:line="88" pos:column="49">break;</break>
					</case><case pos:line="89" pos:column="41">case <expr><lit:literal type="string" pos:line="89" pos:column="46">"3"</lit:literal></expr>:
						<expr_stmt><expr><name pos:line="90" pos:column="49">met</name> <op:operator pos:line="90" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="90" pos:column="55">3.5</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="91" pos:column="49">pace</name> <op:operator pos:line="91" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="91" pos:column="56">3.0</lit:literal></expr>;</expr_stmt>
						<break pos:line="92" pos:column="49">break;</break>
					</case><case pos:line="93" pos:column="41">case <expr><lit:literal type="string" pos:line="93" pos:column="46">"4"</lit:literal></expr>:
						<expr_stmt><expr><name pos:line="94" pos:column="49">met</name> <op:operator pos:line="94" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="94" pos:column="55">5.0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="95" pos:column="49">pace</name> <op:operator pos:line="95" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="95" pos:column="56">4.0</lit:literal></expr>;</expr_stmt>
						<break pos:line="96" pos:column="49">break;</break>
					</case><case pos:line="97" pos:column="41">case <expr><lit:literal type="string" pos:line="97" pos:column="46">"5"</lit:literal></expr>:
						<expr_stmt><expr><name pos:line="98" pos:column="49">met</name> <op:operator pos:line="98" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="98" pos:column="55">6.3</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="99" pos:column="49">pace</name> <op:operator pos:line="99" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="99" pos:column="56">4.5</lit:literal></expr>;</expr_stmt>
						<break pos:line="100" pos:column="49">break;</break>
					</case><case pos:line="101" pos:column="41">case <expr><lit:literal type="string" pos:line="101" pos:column="46">"6"</lit:literal></expr>:
						<expr_stmt><expr><name pos:line="102" pos:column="49">met</name> <op:operator pos:line="102" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="102" pos:column="55">8.0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="103" pos:column="49">pace</name> <op:operator pos:line="103" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="103" pos:column="56">5.0</lit:literal></expr>;</expr_stmt>
						<break pos:line="104" pos:column="49">break;</break>
					</case>}</block></switch>

					<decl_stmt><decl><type><name pos:line="107" pos:column="41">var</name></type> <name pos:line="107" pos:column="45">adjusted_weight</name> <init pos:line="107" pos:column="61">= <expr><name pos:line="107" pos:column="63">lbs</name> <op:operator pos:line="107" pos:column="67">/</op:operator> <lit:literal type="number" pos:line="107" pos:column="69">2.2</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="108" pos:column="41">var</name></type> <name pos:line="108" pos:column="45">val</name> <init pos:line="108" pos:column="49">= <expr><call><name><name pos:line="108" pos:column="51">Math</name><op:operator pos:line="108" pos:column="55">.</op:operator><name pos:line="108" pos:column="56">Round</name></name> <argument_list pos:line="108" pos:column="62">(<argument><expr><op:operator pos:line="108" pos:column="63">(</op:operator><op:operator pos:line="108" pos:column="64">(</op:operator><name pos:line="108" pos:column="65">adjusted_weight</name> <op:operator pos:line="108" pos:column="81">*</op:operator> <name pos:line="108" pos:column="83">met</name><op:operator pos:line="108" pos:column="86">)</op:operator> <op:operator pos:line="108" pos:column="88">/</op:operator> <name pos:line="108" pos:column="90">pace</name><op:operator pos:line="108" pos:column="94">)</op:operator> <op:operator pos:line="108" pos:column="96">*</op:operator> <name pos:line="108" pos:column="98">miles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="109" pos:column="41">return <expr><name pos:line="109" pos:column="48">val</name> <op:operator pos:line="109" pos:column="52">&lt;=</op:operator> <lit:literal type="number" pos:line="109" pos:column="55">0</lit:literal> <op:operator pos:line="109" pos:column="57">?</op:operator> <lit:literal type="string" pos:line="109" pos:column="59">"0"</lit:literal> <op:operator pos:line="109" pos:column="63">:</op:operator> <call><name><name pos:line="109" pos:column="65">val</name><op:operator pos:line="109" pos:column="68">.</op:operator><name pos:line="109" pos:column="69">ToString</name></name> <argument_list pos:line="109" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="79">"N0"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
				}</block></function>
  }</block></class>
}</block></namespace></unit>
