<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\School\Grad School (Comp Sci)\Thesis\Apps\My-StepCounter-master\StepCounter.Android\Controls\FontFitTextView.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 * My StepCounter:
 * Copyright (C) 2014 Refractored LLC | http://refractored.com
 * James Montemagno | http://twitter.com/JamesMontemagno | http://MotzCod.es
 * 
 * Michael James | http://twitter.com/micjames6 | http://micjames.co.uk/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<using pos:line="20" pos:column="1">using <name pos:line="20" pos:column="7">System</name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">Android</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">Widget</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">Android</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">Content</name></name>;</using>
<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">Android</name><op:operator pos:line="23" pos:column="14">.</op:operator><name pos:line="23" pos:column="15">Util</name></name>;</using>
<using pos:line="24" pos:column="1">using <name><name pos:line="24" pos:column="7">Android</name><op:operator pos:line="24" pos:column="14">.</op:operator><name pos:line="24" pos:column="15">Runtime</name></name>;</using>
<using pos:line="25" pos:column="1">using <name><name pos:line="25" pos:column="7">Android</name><op:operator pos:line="25" pos:column="14">.</op:operator><name pos:line="25" pos:column="15">Graphics</name></name>;</using>

<namespace pos:line="27" pos:column="1">namespace <name><name pos:line="27" pos:column="11">StepCounter</name><op:operator pos:line="27" pos:column="22">.</op:operator><name pos:line="27" pos:column="23">Controls</name></name>
<block pos:line="28" pos:column="1">{

	<class><specifier pos:line="30" pos:column="9">public</specifier> class <name pos:line="30" pos:column="22">FontFitTextView</name> <super pos:line="30" pos:column="38">: <name pos:line="30" pos:column="40">TextView</name></super>
	<block pos:line="31" pos:column="9">{



		<constructor><specifier pos:line="35" pos:column="17">public</specifier> <name pos:line="35" pos:column="24">FontFitTextView</name> <parameter_list pos:line="35" pos:column="40">(<param><decl><type><name pos:line="35" pos:column="41">Context</name></type> <name pos:line="35" pos:column="49">context</name></decl></param>)</parameter_list> <member_list pos:line="35" pos:column="58">: <call><name pos:line="35" pos:column="60">base</name><argument_list pos:line="35" pos:column="64">(<argument><expr><name pos:line="35" pos:column="65">context</name></expr></argument>)</argument_list></call>
		</member_list><block pos:line="36" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">Initialise</name><argument_list pos:line="37" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="40" pos:column="17">public</specifier> <name pos:line="40" pos:column="24">FontFitTextView</name><parameter_list pos:line="40" pos:column="39">(<param><decl><type><name pos:line="40" pos:column="40">Context</name></type> <name pos:line="40" pos:column="48">context</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="57">IAttributeSet</name></type> <name pos:line="40" pos:column="71">attrs</name></decl></param>)</parameter_list> <member_list pos:line="40" pos:column="78">: <call><name pos:line="40" pos:column="80">base</name><argument_list pos:line="40" pos:column="84">(<argument><expr><name pos:line="40" pos:column="85">context</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="94">attrs</name></expr></argument>)</argument_list></call>
		</member_list><block pos:line="41" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">Initialise</name><argument_list pos:line="42" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="45" pos:column="17">public</specifier> <name pos:line="45" pos:column="24">FontFitTextView</name><parameter_list pos:line="45" pos:column="39">(<param><decl><type><name pos:line="45" pos:column="40">Context</name></type> <name pos:line="45" pos:column="48">context</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="57">IAttributeSet</name></type> <name pos:line="45" pos:column="71">attrs</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="78">int</name></type> <name pos:line="45" pos:column="82">defStyle</name></decl></param>)</parameter_list> <member_list pos:line="45" pos:column="92">: <call><name pos:line="45" pos:column="94">base</name><argument_list pos:line="45" pos:column="98">(<argument><expr><name pos:line="45" pos:column="99">context</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="108">attrs</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="115">defStyle</name></expr></argument>)</argument_list></call>
		</member_list><block pos:line="46" pos:column="17">{
		}</block></constructor>

		<constructor><specifier pos:line="49" pos:column="17">public</specifier> <name pos:line="49" pos:column="24">FontFitTextView</name><parameter_list pos:line="49" pos:column="39">(<param><decl><type><name pos:line="49" pos:column="40">IntPtr</name></type> <name pos:line="49" pos:column="47">pointer</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="56">JniHandleOwnership</name></type> <name pos:line="49" pos:column="75">handle</name></decl></param>)</parameter_list> <member_list pos:line="49" pos:column="83">: <call><name pos:line="49" pos:column="85">base</name> <argument_list pos:line="49" pos:column="90">(<argument><expr><name pos:line="49" pos:column="91">pointer</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="100">handle</name></expr></argument>)</argument_list></call>
		</member_list><block pos:line="50" pos:column="17">{
		}</block></constructor>

		<decl_stmt><decl><type><name><name pos:line="53" pos:column="17">Android</name><op:operator pos:line="53" pos:column="24">.</op:operator><name pos:line="53" pos:column="25">Graphics</name><op:operator pos:line="53" pos:column="33">.</op:operator><name pos:line="53" pos:column="34">Paint</name></name></type> <name pos:line="53" pos:column="40">mTestPaint</name> <block pos:line="53" pos:column="51">{
			<function_decl><name pos:line="54" pos:column="25">get</name>;</function_decl>
			<function_decl><name pos:line="55" pos:column="25">set</name>;</function_decl>
		}</block></decl></decl_stmt>

		<function><type><name pos:line="58" pos:column="17">void</name></type> <name pos:line="58" pos:column="22">Initialise</name> <parameter_list pos:line="58" pos:column="33">()</parameter_list>
		<block pos:line="59" pos:column="17">{
			<expr_stmt><expr><name pos:line="60" pos:column="25">mTestPaint</name> <op:operator pos:line="60" pos:column="36">=</op:operator> <op:operator pos:line="60" pos:column="38">new</op:operator> <call><name pos:line="60" pos:column="42">Paint</name><argument_list pos:line="60" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="61" pos:column="25">mTestPaint</name><op:operator pos:line="61" pos:column="35">.</op:operator><name pos:line="61" pos:column="36">Set</name></name><argument_list pos:line="61" pos:column="39">(<argument><expr><name><name pos:line="61" pos:column="40">this</name><op:operator pos:line="61" pos:column="44">.</op:operator><name pos:line="61" pos:column="45">Paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="62" pos:column="25">//max size defaults to the initially specified text size unless it is too small</comment>
		}</block></function>

		<comment type="block" pos:line="65" pos:column="17">/* Re size the font so the specified text fits in the text box
     * assuming the text box is the specified width.
     */</comment>
		<function><type><specifier pos:line="68" pos:column="17">private</specifier> <name pos:line="68" pos:column="25">void</name></type> <name pos:line="68" pos:column="30">RefitText</name><parameter_list pos:line="68" pos:column="39">(<param><decl><type><name pos:line="68" pos:column="40">String</name></type> <name pos:line="68" pos:column="47">text</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="53">int</name></type> <name pos:line="68" pos:column="57">textWidth</name></decl></param>)</parameter_list> 
		<block pos:line="69" pos:column="17">{ 
			<if pos:line="70" pos:column="25">if <condition pos:line="70" pos:column="28">(<expr><name pos:line="70" pos:column="29">textWidth</name> <op:operator pos:line="70" pos:column="39">&lt;=</op:operator> <lit:literal type="number" pos:line="70" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="70" pos:column="44">
				<return pos:line="71" pos:column="33">return;</return></then></if>
			<decl_stmt><decl><type><name pos:line="72" pos:column="25">int</name></type> <name pos:line="72" pos:column="29">targetWidth</name> <init pos:line="72" pos:column="41">= <expr><name pos:line="72" pos:column="43">textWidth</name> <op:operator pos:line="72" pos:column="53">-</op:operator> <name><name pos:line="72" pos:column="55">this</name><op:operator pos:line="72" pos:column="59">.</op:operator><name pos:line="72" pos:column="60">PaddingLeft</name></name> <op:operator pos:line="72" pos:column="72">-</op:operator> <name><name pos:line="72" pos:column="74">this</name><op:operator pos:line="72" pos:column="78">.</op:operator><name pos:line="72" pos:column="79">PaddingRight</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="73" pos:column="25">float</name></type> <name pos:line="73" pos:column="31">hi</name> <init pos:line="73" pos:column="34">= <expr><op:operator pos:line="73" pos:column="36">(</op:operator><name pos:line="73" pos:column="37">float</name><op:operator pos:line="73" pos:column="42">)</op:operator><name pos:line="73" pos:column="43">MeasuredHeight</name> <op:operator pos:line="73" pos:column="58">*</op:operator> <lit:literal type="number" pos:line="73" pos:column="60">.8f</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">float</name></type> <name pos:line="74" pos:column="31">lo</name> <init pos:line="74" pos:column="34">= <expr><lit:literal type="number" pos:line="74" pos:column="36">2</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">float</name></type> <name pos:line="75" pos:column="31">threshold</name> <init pos:line="75" pos:column="41">= <expr><lit:literal type="number" pos:line="75" pos:column="43">0.5f</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="75" pos:column="49">// How close we have to be</comment>

			<expr_stmt><expr><call><name><name pos:line="77" pos:column="25">mTestPaint</name><op:operator pos:line="77" pos:column="35">.</op:operator><name pos:line="77" pos:column="36">Set</name></name><argument_list pos:line="77" pos:column="39">(<argument><expr><name><name pos:line="77" pos:column="40">this</name><op:operator pos:line="77" pos:column="44">.</op:operator><name pos:line="77" pos:column="45">Paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<while pos:line="79" pos:column="25">while<condition pos:line="79" pos:column="30">(<expr><op:operator pos:line="79" pos:column="31">(</op:operator><name pos:line="79" pos:column="32">hi</name> <op:operator pos:line="79" pos:column="35">-</op:operator> <name pos:line="79" pos:column="37">lo</name><op:operator pos:line="79" pos:column="39">)</op:operator> <op:operator pos:line="79" pos:column="41">&gt;</op:operator> <name pos:line="79" pos:column="43">threshold</name></expr>)</condition> <block pos:line="79" pos:column="54">{
				<decl_stmt><decl><type><name pos:line="80" pos:column="33">float</name></type> <name pos:line="80" pos:column="39">size</name> <init pos:line="80" pos:column="44">= <expr><op:operator pos:line="80" pos:column="46">(</op:operator><name pos:line="80" pos:column="47">hi</name><op:operator pos:line="80" pos:column="49">+</op:operator><name pos:line="80" pos:column="50">lo</name><op:operator pos:line="80" pos:column="52">)</op:operator><op:operator pos:line="80" pos:column="53">/</op:operator><lit:literal type="number" pos:line="80" pos:column="54">2</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="81" pos:column="33">mTestPaint</name><op:operator pos:line="81" pos:column="43">.</op:operator><name pos:line="81" pos:column="44">TextSize</name></name> <op:operator pos:line="81" pos:column="53">=</op:operator> <op:operator pos:line="81" pos:column="55">(</op:operator><name pos:line="81" pos:column="56">size</name><op:operator pos:line="81" pos:column="60">)</op:operator></expr>;</expr_stmt>
				<if pos:line="82" pos:column="33">if<condition pos:line="82" pos:column="35">(<expr><call><name><name pos:line="82" pos:column="36">mTestPaint</name><op:operator pos:line="82" pos:column="46">.</op:operator><name pos:line="82" pos:column="47">MeasureText</name></name><argument_list pos:line="82" pos:column="58">(<argument><expr><name pos:line="82" pos:column="59">text</name></expr></argument>)</argument_list></call> <op:operator pos:line="82" pos:column="65">&gt;=</op:operator> <name pos:line="82" pos:column="68">targetWidth</name></expr>)</condition><then pos:line="82" pos:column="80"> 
					<expr_stmt><expr><name pos:line="83" pos:column="41">hi</name> <op:operator pos:line="83" pos:column="44">=</op:operator> <name pos:line="83" pos:column="46">size</name></expr>;</expr_stmt></then> <comment type="line" pos:line="83" pos:column="52">// too big</comment>
				<else pos:line="84" pos:column="33">else
					<expr_stmt><expr><name pos:line="85" pos:column="41">lo</name> <op:operator pos:line="85" pos:column="44">=</op:operator> <name pos:line="85" pos:column="46">size</name></expr>;</expr_stmt></else></if> <comment type="line" pos:line="85" pos:column="52">// too small</comment>
			}</block></while>
			<comment type="line" pos:line="87" pos:column="25">// Use lo so that we undershoot rather than overshoot</comment>
			<expr_stmt><expr><call><name><name pos:line="88" pos:column="25">this</name><op:operator pos:line="88" pos:column="29">.</op:operator><name pos:line="88" pos:column="30">SetTextSize</name></name><argument_list pos:line="88" pos:column="41">(<argument><expr><name><name pos:line="88" pos:column="42">ComplexUnitType</name><op:operator pos:line="88" pos:column="57">.</op:operator><name pos:line="88" pos:column="58">Px</name></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="62">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="91" pos:column="17">protected</specifier> <specifier pos:line="91" pos:column="27">override</specifier> <name pos:line="91" pos:column="36">void</name></type> <name pos:line="91" pos:column="41">OnMeasure</name> <parameter_list pos:line="91" pos:column="51">(<param><decl><type><name pos:line="91" pos:column="52">int</name></type> <name pos:line="91" pos:column="56">widthMeasureSpec</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="74">int</name></type> <name pos:line="91" pos:column="78">heightMeasureSpec</name></decl></param>)</parameter_list>
		<block pos:line="92" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="93" pos:column="25">base</name><op:operator pos:line="93" pos:column="29">.</op:operator><name pos:line="93" pos:column="30">OnMeasure</name></name> <argument_list pos:line="93" pos:column="40">(<argument><expr><name pos:line="93" pos:column="41">widthMeasureSpec</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="59">heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="95" pos:column="25">int</name></type> <name pos:line="95" pos:column="29">parentWidth</name> <init pos:line="95" pos:column="41">= <expr><call><name><name pos:line="95" pos:column="43">MeasureSpec</name><op:operator pos:line="95" pos:column="54">.</op:operator><name pos:line="95" pos:column="55">GetSize</name></name><argument_list pos:line="95" pos:column="62">(<argument><expr><name pos:line="95" pos:column="63">widthMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="96" pos:column="25">int</name></type> <name pos:line="96" pos:column="29">height</name> <init pos:line="96" pos:column="36">= <expr><name pos:line="96" pos:column="38">MeasuredHeight</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="97" pos:column="25">RefitText</name><argument_list pos:line="97" pos:column="34">(<argument><expr><call><name><name pos:line="97" pos:column="35">Text</name><op:operator pos:line="97" pos:column="39">.</op:operator><name pos:line="97" pos:column="40">ToString</name></name><argument_list pos:line="97" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="97" pos:column="52">parentWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="98" pos:column="25">this</name><op:operator pos:line="98" pos:column="29">.</op:operator><name pos:line="98" pos:column="30">SetMeasuredDimension</name></name><argument_list pos:line="98" pos:column="50">(<argument><expr><name pos:line="98" pos:column="51">parentWidth</name></expr></argument>, <argument><expr><name pos:line="98" pos:column="64">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="101" pos:column="17">protected</specifier> <specifier pos:line="101" pos:column="27">override</specifier> <name pos:line="101" pos:column="36">void</name></type> <name pos:line="101" pos:column="41">OnTextChanged</name> <parameter_list pos:line="101" pos:column="55">(<param><decl><type><name><name pos:line="101" pos:column="56">Java</name><op:operator pos:line="101" pos:column="60">.</op:operator><name pos:line="101" pos:column="61">Lang</name><op:operator pos:line="101" pos:column="65">.</op:operator><name pos:line="101" pos:column="66">ICharSequence</name></name></type> <name pos:line="101" pos:column="80">text</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="86">int</name></type> <name pos:line="101" pos:column="90">start</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="97">int</name></type> <name pos:line="101" pos:column="101">before</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="109">int</name></type> <name pos:line="101" pos:column="113">after</name></decl></param>)</parameter_list>
		<block pos:line="102" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="103" pos:column="25">RefitText</name><argument_list pos:line="103" pos:column="34">(<argument><expr><call><name><name pos:line="103" pos:column="35">text</name><op:operator pos:line="103" pos:column="39">.</op:operator><name pos:line="103" pos:column="40">ToString</name></name><argument_list pos:line="103" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="103" pos:column="52">Width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="106" pos:column="17">protected</specifier> <specifier pos:line="106" pos:column="27">override</specifier> <name pos:line="106" pos:column="36">void</name></type> <name pos:line="106" pos:column="41">OnSizeChanged</name> <parameter_list pos:line="106" pos:column="55">(<param><decl><type><name pos:line="106" pos:column="56">int</name></type> <name pos:line="106" pos:column="60">w</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="63">int</name></type> <name pos:line="106" pos:column="67">h</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="70">int</name></type> <name pos:line="106" pos:column="74">oldw</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="80">int</name></type> <name pos:line="106" pos:column="84">oldh</name></decl></param>)</parameter_list>
		<block pos:line="107" pos:column="17">{
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><name pos:line="108" pos:column="29">w</name> <op:operator pos:line="108" pos:column="31">!=</op:operator> <name pos:line="108" pos:column="34">oldw</name></expr>)</condition><then pos:line="108" pos:column="39"> <block pos:line="108" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="109" pos:column="33">RefitText</name><argument_list pos:line="109" pos:column="42">(<argument><expr><name pos:line="109" pos:column="43">Text</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="49">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></function>
	}</block></class>
}</block></namespace>

</unit>
