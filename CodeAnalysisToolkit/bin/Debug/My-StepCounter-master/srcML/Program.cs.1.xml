<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\School\Grad School (Comp Sci)\Thesis\Apps\My-StepCounter-master\StepCounter.Analysis\Program.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Xml</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">IO</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">StepCounter</name><op:operator pos:line="8" pos:column="22">.</op:operator><name pos:line="8" pos:column="23">Analysis</name></name>
<block pos:line="9" pos:column="1">{
	<class pos:line="10" pos:column="9">class <name pos:line="10" pos:column="15">App</name>
	<block pos:line="11" pos:column="9">{
		<function><type><specifier pos:line="12" pos:column="17">static</specifier> <name pos:line="12" pos:column="24">void</name></type> <name pos:line="12" pos:column="29">Main</name> <parameter_list pos:line="12" pos:column="34">(<param><decl><type><name><name pos:line="12" pos:column="35">string</name><index pos:line="12" pos:column="41">[]</index></name></type> <name pos:line="12" pos:column="44">args</name></decl></param>)</parameter_list>
		<block pos:line="13" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="14" pos:column="25">var</name></type> <name pos:line="14" pos:column="29">path</name> <init pos:line="14" pos:column="34">= <expr><name><name pos:line="14" pos:column="36">Environment</name><op:operator pos:line="14" pos:column="47">.</op:operator><name pos:line="14" pos:column="48">CurrentDirectory</name></name></expr></init></decl>;</decl_stmt>
			<for pos:line="15" pos:column="25">for (<init><decl><type><name pos:line="15" pos:column="30">int</name></type> <name pos:line="15" pos:column="34">i</name> <init pos:line="15" pos:column="36">= <expr><lit:literal type="number" pos:line="15" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="15" pos:column="41">i</name> <op:operator pos:line="15" pos:column="43">&lt;</op:operator> <lit:literal type="number" pos:line="15" pos:column="45">3</lit:literal></expr>;</condition> <incr><expr><name pos:line="15" pos:column="48">i</name><op:operator pos:line="15" pos:column="49">++</op:operator></expr></incr>)
			<block pos:line="16" pos:column="25">{
				<expr_stmt><expr><name pos:line="17" pos:column="33">path</name> <op:operator pos:line="17" pos:column="38">=</op:operator> <call><name><name pos:line="17" pos:column="40">Path</name><op:operator pos:line="17" pos:column="44">.</op:operator><name pos:line="17" pos:column="45">Combine</name></name><argument_list pos:line="17" pos:column="52">(<argument><expr><call><name><name pos:line="17" pos:column="53">Path</name><op:operator pos:line="17" pos:column="57">.</op:operator><name pos:line="17" pos:column="58">GetDirectoryName</name></name><argument_list pos:line="17" pos:column="74">(<argument><expr><name pos:line="17" pos:column="75">path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="82">string</name><op:operator pos:line="17" pos:column="88">.</op:operator><name pos:line="17" pos:column="89">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">var</name></type> <name pos:line="19" pos:column="29">projects</name> <init pos:line="19" pos:column="38">= <expr><op:operator pos:line="19" pos:column="40">new</op:operator> <name><name pos:line="19" pos:column="44">List</name><argument_list pos:line="19" pos:column="48">&lt;<argument><name pos:line="19" pos:column="49">Solution</name></argument>&gt;</argument_list></name> <block pos:line="19" pos:column="59">{

			
				<expr><op:operator pos:line="22" pos:column="33">new</op:operator> <name pos:line="22" pos:column="37">Solution</name> <block pos:line="22" pos:column="46">{
					<expr><name pos:line="23" pos:column="41">Name</name> <op:operator pos:line="23" pos:column="46">=</op:operator> <lit:literal type="string" pos:line="23" pos:column="48">"Android"</lit:literal></expr>,
					<expr><name pos:line="24" pos:column="41">ProjectFiles</name> <op:operator pos:line="24" pos:column="54">=</op:operator> <op:operator pos:line="24" pos:column="56">new</op:operator> <name><name pos:line="24" pos:column="60">List</name><argument_list pos:line="24" pos:column="64">&lt;<argument><name pos:line="24" pos:column="65">string</name></argument>&gt;</argument_list></name> <block pos:line="24" pos:column="73">{
						<expr><call><name><name pos:line="25" pos:column="49">Path</name><op:operator pos:line="25" pos:column="53">.</op:operator><name pos:line="25" pos:column="54">Combine</name></name><argument_list pos:line="25" pos:column="61">(<argument><expr><name pos:line="25" pos:column="62">path</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="25" pos:column="68">"StepCounter.Android/StepCounter.Android.csproj"</lit:literal></expr></argument>)</argument_list></call></expr>,
					}</block></expr>,
				}</block></expr>,

				<expr><op:operator pos:line="29" pos:column="33">new</op:operator> <name pos:line="29" pos:column="37">Solution</name> <block pos:line="29" pos:column="46">{
					<expr><name pos:line="30" pos:column="41">Name</name> <op:operator pos:line="30" pos:column="46">=</op:operator> <lit:literal type="string" pos:line="30" pos:column="48">"iOS"</lit:literal></expr>,
					<expr><name pos:line="31" pos:column="41">ProjectFiles</name> <op:operator pos:line="31" pos:column="54">=</op:operator> <op:operator pos:line="31" pos:column="56">new</op:operator> <name><name pos:line="31" pos:column="60">List</name><argument_list pos:line="31" pos:column="64">&lt;<argument><name pos:line="31" pos:column="65">string</name></argument>&gt;</argument_list></name> <block pos:line="31" pos:column="73">{
						<expr><call><name><name pos:line="32" pos:column="49">Path</name><op:operator pos:line="32" pos:column="53">.</op:operator><name pos:line="32" pos:column="54">Combine</name></name><argument_list pos:line="32" pos:column="61">(<argument><expr><name pos:line="32" pos:column="62">path</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="32" pos:column="68">"StepCounter/StepCounter.iOS.csproj"</lit:literal></expr></argument>)</argument_list></call></expr>,
					}</block></expr>,
				}</block></expr>,
			}</block></expr></init></decl>;</decl_stmt>


			<expr_stmt><expr><op:operator pos:line="38" pos:column="25">new</op:operator> <call><name pos:line="38" pos:column="29">App</name><argument_list pos:line="38" pos:column="32">()</argument_list></call><op:operator pos:line="38" pos:column="34">.</op:operator><call><name pos:line="38" pos:column="35">Run</name><argument_list pos:line="38" pos:column="38">(<argument><expr><name pos:line="38" pos:column="39">projects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<class pos:line="41" pos:column="17">class <name pos:line="41" pos:column="23">Solution</name>
		<block pos:line="42" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="43" pos:column="25">public</specifier> <name pos:line="43" pos:column="32">string</name></type> <name pos:line="43" pos:column="39">Name</name> <init pos:line="43" pos:column="44">= <expr><lit:literal type="string" pos:line="43" pos:column="46">""</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="44" pos:column="25">public</specifier> <name><name pos:line="44" pos:column="32">List</name><argument_list pos:line="44" pos:column="36">&lt;<argument><name pos:line="44" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="45">ProjectFiles</name> <init pos:line="44" pos:column="58">= <expr><op:operator pos:line="44" pos:column="60">new</op:operator> <call><name><name pos:line="44" pos:column="64">List</name><argument_list pos:line="44" pos:column="68">&lt;<argument><name pos:line="44" pos:column="69">string</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="45" pos:column="25">public</specifier> <name><name pos:line="45" pos:column="32">List</name><argument_list pos:line="45" pos:column="36">&lt;<argument><name pos:line="45" pos:column="37">FileInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="47">CodeFiles</name> <init pos:line="45" pos:column="57">= <expr><op:operator pos:line="45" pos:column="59">new</op:operator> <call><name><name pos:line="45" pos:column="63">List</name><argument_list pos:line="45" pos:column="67">&lt;<argument><name pos:line="45" pos:column="68">FileInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<function><type><specifier pos:line="46" pos:column="25">public</specifier> <specifier pos:line="46" pos:column="32">override</specifier> <name pos:line="46" pos:column="41">string</name></type> <name pos:line="46" pos:column="48">ToString</name> <parameter_list pos:line="46" pos:column="57">()</parameter_list>
			<block pos:line="47" pos:column="25">{
				<return pos:line="48" pos:column="33">return <expr><name pos:line="48" pos:column="40">Name</name></expr>;</return>
			}</block></function>

			<decl_stmt><decl><type><specifier pos:line="51" pos:column="25">public</specifier> <name pos:line="51" pos:column="32">int</name></type> <name pos:line="51" pos:column="36">UniqueLinesOfCode</name>
			<block pos:line="52" pos:column="25">{
				<function><name pos:line="53" pos:column="33">get</name>
				<block pos:line="54" pos:column="33">{
					<return pos:line="55" pos:column="41">return <expr><op:operator pos:line="55" pos:column="48">(</op:operator><linq><from pos:line="55" pos:column="49">from <expr><name pos:line="55" pos:column="54">f</name></expr> <in pos:line="55" pos:column="56">in <expr><name pos:line="55" pos:column="59">CodeFiles</name></expr></in></from>
						<where pos:line="56" pos:column="49">where <expr><name><name pos:line="56" pos:column="55">f</name><op:operator pos:line="56" pos:column="56">.</op:operator><name pos:line="56" pos:column="57">Solutions</name><op:operator pos:line="56" pos:column="66">.</op:operator><name pos:line="56" pos:column="67">Count</name></name> <op:operator pos:line="56" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="56" pos:column="76">1</lit:literal></expr></where>
						<select pos:line="57" pos:column="49">select <expr><name><name pos:line="57" pos:column="56">f</name><op:operator pos:line="57" pos:column="57">.</op:operator><name pos:line="57" pos:column="58">LinesOfCode</name></name></expr></select></linq><op:operator pos:line="57" pos:column="69">)</op:operator><op:operator pos:line="57" pos:column="70">.</op:operator><call><name pos:line="57" pos:column="71">Sum</name><argument_list pos:line="57" pos:column="74">()</argument_list></call></expr>;</return>
				}</block></function>
			}</block></decl></decl_stmt>

			<decl_stmt><decl><type><specifier pos:line="61" pos:column="25">public</specifier> <name pos:line="61" pos:column="32">int</name></type> <name pos:line="61" pos:column="36">SharedLinesOfCode</name>
			<block pos:line="62" pos:column="25">{
				<function><name pos:line="63" pos:column="33">get</name>
				<block pos:line="64" pos:column="33">{
					<return pos:line="65" pos:column="41">return <expr><op:operator pos:line="65" pos:column="48">(</op:operator><linq><from pos:line="65" pos:column="49">from <expr><name pos:line="65" pos:column="54">f</name></expr> <in pos:line="65" pos:column="56">in <expr><name pos:line="65" pos:column="59">CodeFiles</name></expr></in></from>
						<where pos:line="66" pos:column="49">where <expr><name><name pos:line="66" pos:column="55">f</name><op:operator pos:line="66" pos:column="56">.</op:operator><name pos:line="66" pos:column="57">Solutions</name><op:operator pos:line="66" pos:column="66">.</op:operator><name pos:line="66" pos:column="67">Count</name></name> <op:operator pos:line="66" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="66" pos:column="75">1</lit:literal></expr></where>
						<select pos:line="67" pos:column="49">select <expr><name><name pos:line="67" pos:column="56">f</name><op:operator pos:line="67" pos:column="57">.</op:operator><name pos:line="67" pos:column="58">LinesOfCode</name></name></expr></select></linq><op:operator pos:line="67" pos:column="69">)</op:operator><op:operator pos:line="67" pos:column="70">.</op:operator><call><name pos:line="67" pos:column="71">Sum</name><argument_list pos:line="67" pos:column="74">()</argument_list></call></expr>;</return>
				}</block></function>
			}</block></decl></decl_stmt>

			<decl_stmt><decl><type><specifier pos:line="71" pos:column="25">public</specifier> <name pos:line="71" pos:column="32">int</name></type> <name pos:line="71" pos:column="36">TotalLinesOfCode</name>
			<block pos:line="72" pos:column="25">{
				<function><name pos:line="73" pos:column="33">get</name>
				<block pos:line="74" pos:column="33">{
					<return pos:line="75" pos:column="41">return <expr><op:operator pos:line="75" pos:column="48">(</op:operator><linq><from pos:line="75" pos:column="49">from <expr><name pos:line="75" pos:column="54">f</name></expr> <in pos:line="75" pos:column="56">in <expr><name pos:line="75" pos:column="59">CodeFiles</name></expr></in></from>
						<select pos:line="76" pos:column="49">select <expr><name><name pos:line="76" pos:column="56">f</name><op:operator pos:line="76" pos:column="57">.</op:operator><name pos:line="76" pos:column="58">LinesOfCode</name></name></expr></select></linq><op:operator pos:line="76" pos:column="69">)</op:operator><op:operator pos:line="76" pos:column="70">.</op:operator><call><name pos:line="76" pos:column="71">Sum</name><argument_list pos:line="76" pos:column="74">()</argument_list></call></expr>;</return>
				}</block></function>
			}</block></decl></decl_stmt>
		}</block></class>

		<class pos:line="81" pos:column="17">class <name pos:line="81" pos:column="23">FileInfo</name>
		<block pos:line="82" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="83" pos:column="25">public</specifier> <name pos:line="83" pos:column="32">string</name></type> <name pos:line="83" pos:column="39">Path</name> <init pos:line="83" pos:column="44">= <expr><lit:literal type="string" pos:line="83" pos:column="46">""</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="84" pos:column="25">public</specifier> <name><name pos:line="84" pos:column="32">List</name><argument_list pos:line="84" pos:column="36">&lt;<argument><name pos:line="84" pos:column="37">Solution</name></argument>&gt;</argument_list></name></type> <name pos:line="84" pos:column="47">Solutions</name> <init pos:line="84" pos:column="57">= <expr><op:operator pos:line="84" pos:column="59">new</op:operator> <call><name><name pos:line="84" pos:column="63">List</name><argument_list pos:line="84" pos:column="67">&lt;<argument><name pos:line="84" pos:column="68">Solution</name></argument>&gt;</argument_list></name><argument_list pos:line="84" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="85" pos:column="25">public</specifier> <name pos:line="85" pos:column="32">int</name></type> <name pos:line="85" pos:column="36">LinesOfCode</name> <init pos:line="85" pos:column="48">= <expr><lit:literal type="number" pos:line="85" pos:column="50">0</lit:literal></expr></init></decl>;</decl_stmt>
			<function><type><specifier pos:line="86" pos:column="25">public</specifier> <specifier pos:line="86" pos:column="32">override</specifier> <name pos:line="86" pos:column="41">string</name></type> <name pos:line="86" pos:column="48">ToString</name> <parameter_list pos:line="86" pos:column="57">()</parameter_list>
			<block pos:line="87" pos:column="25">{
				<return pos:line="88" pos:column="33">return <expr><name pos:line="88" pos:column="40">Path</name></expr>;</return>
			}</block></function>
		}</block></class>

		<decl_stmt><decl><type><name><name pos:line="92" pos:column="17">Dictionary</name><argument_list pos:line="92" pos:column="27">&lt;<argument><name pos:line="92" pos:column="28">string</name></argument>, <argument><name pos:line="92" pos:column="36">FileInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="92" pos:column="46">_files</name> <init pos:line="92" pos:column="53">= <expr><op:operator pos:line="92" pos:column="55">new</op:operator> <call><name><name pos:line="92" pos:column="59">Dictionary</name><argument_list pos:line="92" pos:column="69">&lt;<argument><name pos:line="92" pos:column="70">string</name></argument>, <argument><name pos:line="92" pos:column="78">FileInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="92" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><name pos:line="94" pos:column="17">void</name></type> <name pos:line="94" pos:column="22">AddRef</name> <parameter_list pos:line="94" pos:column="29">(<param><decl><type><name pos:line="94" pos:column="30">string</name></type> <name pos:line="94" pos:column="37">path</name></decl></param>, <param><decl><type><name pos:line="94" pos:column="43">Solution</name></type> <name pos:line="94" pos:column="52">sln</name></decl></param>)</parameter_list>
		<block pos:line="95" pos:column="17">{

			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><call><name><name pos:line="97" pos:column="29">_files</name><op:operator pos:line="97" pos:column="35">.</op:operator><name pos:line="97" pos:column="36">ContainsKey</name></name><argument_list pos:line="97" pos:column="47">(<argument><expr><name pos:line="97" pos:column="48">path</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="97" pos:column="54"> <block pos:line="97" pos:column="55">{
				<expr_stmt><expr><name><name pos:line="98" pos:column="33">_files</name><index pos:line="98" pos:column="39">[<expr><name pos:line="98" pos:column="40">path</name></expr>]</index></name><op:operator pos:line="98" pos:column="45">.</op:operator><call><name><name pos:line="98" pos:column="46">Solutions</name><op:operator pos:line="98" pos:column="55">.</op:operator><name pos:line="98" pos:column="56">Add</name></name><argument_list pos:line="98" pos:column="59">(<argument><expr><name pos:line="98" pos:column="60">sln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="99" pos:column="33">sln</name><op:operator pos:line="99" pos:column="36">.</op:operator><name pos:line="99" pos:column="37">CodeFiles</name><op:operator pos:line="99" pos:column="46">.</op:operator><name pos:line="99" pos:column="47">Add</name></name><argument_list pos:line="99" pos:column="50">(<argument><expr><name><name pos:line="99" pos:column="51">_files</name><index pos:line="99" pos:column="57">[<expr><name pos:line="99" pos:column="58">path</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="101" pos:column="25">else <block pos:line="101" pos:column="30">{
				<decl_stmt><decl><type><name pos:line="102" pos:column="33">var</name></type> <name pos:line="102" pos:column="37">info</name> <init pos:line="102" pos:column="42">= <expr><op:operator pos:line="102" pos:column="44">new</op:operator> <name pos:line="102" pos:column="48">FileInfo</name> <block pos:line="102" pos:column="57">{ <expr><name pos:line="102" pos:column="59">Path</name> <op:operator pos:line="102" pos:column="64">=</op:operator> <name pos:line="102" pos:column="66">path</name></expr>, }</block></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="103" pos:column="33">info</name><op:operator pos:line="103" pos:column="37">.</op:operator><name pos:line="103" pos:column="38">Solutions</name><op:operator pos:line="103" pos:column="47">.</op:operator><name pos:line="103" pos:column="48">Add</name></name><argument_list pos:line="103" pos:column="51">(<argument><expr><name pos:line="103" pos:column="52">sln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="104" pos:column="33">_files</name><index pos:line="104" pos:column="39">[<expr><name pos:line="104" pos:column="40">path</name></expr>]</index></name> <op:operator pos:line="104" pos:column="46">=</op:operator> <name pos:line="104" pos:column="48">info</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="105" pos:column="33">sln</name><op:operator pos:line="105" pos:column="36">.</op:operator><name pos:line="105" pos:column="37">CodeFiles</name><op:operator pos:line="105" pos:column="46">.</op:operator><name pos:line="105" pos:column="47">Add</name></name><argument_list pos:line="105" pos:column="50">(<argument><expr><name pos:line="105" pos:column="51">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></function>

		<function><type><name pos:line="109" pos:column="17">void</name></type> <name pos:line="109" pos:column="22">Run</name> <parameter_list pos:line="109" pos:column="26">(<param><decl><type><name><name pos:line="109" pos:column="27">List</name><argument_list pos:line="109" pos:column="31">&lt;<argument><name pos:line="109" pos:column="32">Solution</name></argument>&gt;</argument_list></name></type> <name pos:line="109" pos:column="42">solutions</name></decl></param>)</parameter_list>
		<block pos:line="110" pos:column="17">{
			<comment type="line" pos:line="111" pos:column="25">//</comment>
			<comment type="line" pos:line="112" pos:column="25">// Find all the files</comment>
			<comment type="line" pos:line="113" pos:column="25">//</comment>
			<foreach pos:line="114" pos:column="25">foreach (<init><decl><type><name pos:line="114" pos:column="34">var</name></type> <name pos:line="114" pos:column="38">sln</name> <range pos:line="114" pos:column="42">in <expr><name pos:line="114" pos:column="45">solutions</name></expr></range></decl></init>) <block pos:line="114" pos:column="56">{
				<foreach pos:line="115" pos:column="33">foreach (<init><decl><type><name pos:line="115" pos:column="42">var</name></type> <name pos:line="115" pos:column="46">projectFile</name> <range pos:line="115" pos:column="58">in <expr><name><name pos:line="115" pos:column="61">sln</name><op:operator pos:line="115" pos:column="64">.</op:operator><name pos:line="115" pos:column="65">ProjectFiles</name></name></expr></range></decl></init>) <block pos:line="115" pos:column="79">{
					<decl_stmt><decl><type><name pos:line="116" pos:column="41">var</name></type> <name pos:line="116" pos:column="45">dir</name> <init pos:line="116" pos:column="49">= <expr><call><name><name pos:line="116" pos:column="51">Path</name><op:operator pos:line="116" pos:column="55">.</op:operator><name pos:line="116" pos:column="56">GetDirectoryName</name></name><argument_list pos:line="116" pos:column="72">(<argument><expr><name pos:line="116" pos:column="73">projectFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="117" pos:column="41">var</name></type> <name pos:line="117" pos:column="45">projectName</name> <init pos:line="117" pos:column="57">= <expr><call><name><name pos:line="117" pos:column="59">Path</name><op:operator pos:line="117" pos:column="63">.</op:operator><name pos:line="117" pos:column="64">GetFileNameWithoutExtension</name></name><argument_list pos:line="117" pos:column="91">(<argument><expr><name pos:line="117" pos:column="92">projectFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="118" pos:column="41">var</name></type> <name pos:line="118" pos:column="45">doc</name> <init pos:line="118" pos:column="49">= <expr><call><name><name pos:line="118" pos:column="51">XDocument</name><op:operator pos:line="118" pos:column="60">.</op:operator><name pos:line="118" pos:column="61">Load</name></name><argument_list pos:line="118" pos:column="65">(<argument><expr><name pos:line="118" pos:column="66">projectFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="119" pos:column="41">var</name></type> <name pos:line="119" pos:column="45">q</name> <init pos:line="119" pos:column="47">= <expr><linq><from pos:line="119" pos:column="49">from <expr><name pos:line="119" pos:column="54">x</name></expr> <in pos:line="119" pos:column="56">in <expr><call><name><name pos:line="119" pos:column="59">doc</name><op:operator pos:line="119" pos:column="62">.</op:operator><name pos:line="119" pos:column="63">Descendants</name></name><argument_list pos:line="119" pos:column="74">()</argument_list></call></expr></in></from>
					        <let pos:line="120" pos:column="49">let <expr><name pos:line="120" pos:column="53">e</name> <op:operator pos:line="120" pos:column="55">=</op:operator> <name pos:line="120" pos:column="57">x</name> <op:operator pos:line="120" pos:column="59">as</op:operator> <name pos:line="120" pos:column="62">XElement</name></expr></let>
						        <where pos:line="121" pos:column="57">where <expr><name pos:line="121" pos:column="63">e</name> <op:operator pos:line="121" pos:column="65">!=</op:operator> <name pos:line="121" pos:column="68">null</name></expr></where>
						        <where pos:line="122" pos:column="57">where <expr><name><name pos:line="122" pos:column="63">e</name><op:operator pos:line="122" pos:column="64">.</op:operator><name pos:line="122" pos:column="65">Name</name><op:operator pos:line="122" pos:column="69">.</op:operator><name pos:line="122" pos:column="70">LocalName</name></name> <op:operator pos:line="122" pos:column="80">==</op:operator> <lit:literal type="string" pos:line="122" pos:column="83">"Compile"</lit:literal></expr></where>
						        <where pos:line="123" pos:column="57">where <expr><call><name><name pos:line="123" pos:column="63">e</name><op:operator pos:line="123" pos:column="64">.</op:operator><name pos:line="123" pos:column="65">Attributes</name></name><argument_list pos:line="123" pos:column="75">()</argument_list></call><op:operator pos:line="123" pos:column="77">.</op:operator><call><name pos:line="123" pos:column="78">Any</name><argument_list pos:line="123" pos:column="81">(<argument><expr><lambda><name pos:line="123" pos:column="82">a</name> <op:operator pos:line="123" pos:column="84">=&gt;</op:operator> <name><name pos:line="123" pos:column="87">a</name><op:operator pos:line="123" pos:column="88">.</op:operator><name pos:line="123" pos:column="89">Name</name><op:operator pos:line="123" pos:column="93">.</op:operator><name pos:line="123" pos:column="94">LocalName</name></name> <op:operator pos:line="123" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="123" pos:column="107">"Include"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></where>
					        <select pos:line="124" pos:column="49">select <expr><call><name><name pos:line="124" pos:column="56">e</name><op:operator pos:line="124" pos:column="57">.</op:operator><name pos:line="124" pos:column="58">Attribute</name></name><argument_list pos:line="124" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="68">"Include"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="124" pos:column="78">.</op:operator><name pos:line="124" pos:column="79">Value</name></expr></select></linq></expr></init></decl>;</decl_stmt>
					<foreach pos:line="125" pos:column="41">foreach (<init><decl><type><name pos:line="125" pos:column="50">var</name></type> <name pos:line="125" pos:column="54">inc</name> <range pos:line="125" pos:column="58">in <expr><name pos:line="125" pos:column="61">q</name></expr></range></decl></init>) <block pos:line="125" pos:column="64">{
						<comment type="line" pos:line="126" pos:column="49">//skip over some things that are added automatically</comment>
						<if pos:line="127" pos:column="49">if <condition pos:line="127" pos:column="52">(<expr><call><name><name pos:line="127" pos:column="53">inc</name><op:operator pos:line="127" pos:column="56">.</op:operator><name pos:line="127" pos:column="57">Contains</name></name> <argument_list pos:line="127" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="67">"Resource.designer.cs"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="91">||</op:operator>
						    <call><name><name pos:line="128" pos:column="53">inc</name><op:operator pos:line="128" pos:column="56">.</op:operator><name pos:line="128" pos:column="57">Contains</name></name> <argument_list pos:line="128" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="67">"DebugTrace.cs"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="128" pos:column="84">||</op:operator>
						    <call><name><name pos:line="129" pos:column="53">inc</name><op:operator pos:line="129" pos:column="56">.</op:operator><name pos:line="129" pos:column="57">Contains</name></name> <argument_list pos:line="129" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="67">"LinkerPleaseInclude.cs"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="129" pos:column="93">||</op:operator>
						    <call><name><name pos:line="130" pos:column="53">inc</name><op:operator pos:line="130" pos:column="56">.</op:operator><name pos:line="130" pos:column="57">Contains</name></name> <argument_list pos:line="130" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="67">"AssemblyInfo.cs"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="130" pos:column="86">||</op:operator>
							<call><name><name pos:line="131" pos:column="57">inc</name><op:operator pos:line="131" pos:column="60">.</op:operator><name pos:line="131" pos:column="61">Contains</name></name> <argument_list pos:line="131" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="71">"Bootstrap.cs"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="131" pos:column="87">||</op:operator>
							<call><name><name pos:line="132" pos:column="57">inc</name><op:operator pos:line="132" pos:column="60">.</op:operator><name pos:line="132" pos:column="61">Contains</name></name><argument_list pos:line="132" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="70">".designer.cs"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="86">||</op:operator>
                            <call><name><name pos:line="133" pos:column="29">inc</name><op:operator pos:line="133" pos:column="32">.</op:operator><name pos:line="133" pos:column="33">EndsWith</name></name><argument_list pos:line="133" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="42">".xaml"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="133" pos:column="51">||</op:operator>
                            <call><name><name pos:line="134" pos:column="29">inc</name><op:operator pos:line="134" pos:column="32">.</op:operator><name pos:line="134" pos:column="33">EndsWith</name></name><argument_list pos:line="134" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="42">".xml"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="134" pos:column="50">||</op:operator>
                            <call><name><name pos:line="135" pos:column="29">inc</name><op:operator pos:line="135" pos:column="32">.</op:operator><name pos:line="135" pos:column="33">EndsWith</name></name><argument_list pos:line="135" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="42">".axml"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="51"> <block pos:line="135" pos:column="52">{
							<continue pos:line="136" pos:column="57">continue;</continue>
						}</block></then></if>

						<decl_stmt><decl><type><name pos:line="139" pos:column="49">var</name></type> <name pos:line="139" pos:column="53">inc2</name> <init pos:line="139" pos:column="58">= <expr><call><name><name pos:line="139" pos:column="60">inc</name><op:operator pos:line="139" pos:column="63">.</op:operator><name pos:line="139" pos:column="64">Replace</name></name> <argument_list pos:line="139" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="73">"\\"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="139" pos:column="79">Path</name><op:operator pos:line="139" pos:column="83">.</op:operator><name pos:line="139" pos:column="84">DirectorySeparatorChar</name><op:operator pos:line="139" pos:column="106">.</op:operator><name pos:line="139" pos:column="107">ToString</name></name><argument_list pos:line="139" pos:column="115">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name pos:line="140" pos:column="49">AddRef</name><argument_list pos:line="140" pos:column="55">(<argument><expr><call><name><name pos:line="140" pos:column="56">Path</name><op:operator pos:line="140" pos:column="60">.</op:operator><name pos:line="140" pos:column="61">GetFullPath</name></name><argument_list pos:line="140" pos:column="72">(<argument><expr><call><name><name pos:line="140" pos:column="73">Path</name><op:operator pos:line="140" pos:column="77">.</op:operator><name pos:line="140" pos:column="78">Combine</name></name><argument_list pos:line="140" pos:column="85">(<argument><expr><name pos:line="140" pos:column="86">dir</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="91">inc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="140" pos:column="99">sln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></foreach>
				}</block></foreach>
			}</block></foreach>

			<comment type="line" pos:line="145" pos:column="25">//</comment>
			<comment type="line" pos:line="146" pos:column="25">// Get the lines of code</comment>
			<comment type="line" pos:line="147" pos:column="25">//</comment>
			<foreach pos:line="148" pos:column="25">foreach (<init><decl><type><name pos:line="148" pos:column="34">var</name></type> <name pos:line="148" pos:column="38">f</name> <range pos:line="148" pos:column="40">in <expr><name><name pos:line="148" pos:column="43">_files</name><op:operator pos:line="148" pos:column="49">.</op:operator><name pos:line="148" pos:column="50">Values</name></name></expr></range></decl></init>) <block pos:line="148" pos:column="58">{
				<try pos:line="149" pos:column="33">try
				<block pos:line="150" pos:column="33">{
				    <decl_stmt><decl><type><name pos:line="151" pos:column="37">var</name></type> <name pos:line="151" pos:column="41">lines</name> <init pos:line="151" pos:column="47">= <expr><call><name><name pos:line="151" pos:column="49">File</name><op:operator pos:line="151" pos:column="53">.</op:operator><name pos:line="151" pos:column="54">ReadAllLines</name></name><argument_list pos:line="151" pos:column="66">(<argument><expr><name><name pos:line="151" pos:column="67">f</name><op:operator pos:line="151" pos:column="68">.</op:operator><name pos:line="151" pos:column="69">Path</name></name></expr></argument>)</argument_list></call><op:operator pos:line="151" pos:column="74">.</op:operator><call><name pos:line="151" pos:column="75">ToList</name><argument_list pos:line="151" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
				    
					<expr_stmt><expr><name><name pos:line="153" pos:column="41">f</name><op:operator pos:line="153" pos:column="42">.</op:operator><name pos:line="153" pos:column="43">LinesOfCode</name></name> <op:operator pos:line="153" pos:column="55">=</op:operator> <name><name pos:line="153" pos:column="57">lines</name><op:operator pos:line="153" pos:column="62">.</op:operator><name pos:line="153" pos:column="63">Count</name></name></expr>;</expr_stmt>
				}</block>
				<catch pos:line="155" pos:column="33">catch <parameter_list pos:line="155" pos:column="39">(<param><decl><type><name pos:line="155" pos:column="40">Exception</name></type> <name pos:line="155" pos:column="50">ex</name></decl></param>)</parameter_list> <block pos:line="155" pos:column="54">{
				}</block></catch></try>                
			}</block></foreach>

			<comment type="line" pos:line="159" pos:column="25">//</comment>
			<comment type="line" pos:line="160" pos:column="25">// Output</comment>
			<comment type="line" pos:line="161" pos:column="25">//</comment>
			<expr_stmt><expr><call><name><name pos:line="162" pos:column="25">Console</name><op:operator pos:line="162" pos:column="32">.</op:operator><name pos:line="162" pos:column="33">WriteLine</name></name><argument_list pos:line="162" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="43">"app\tt\tu\ts\tu%\ts%"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="163" pos:column="25">foreach (<init><decl><type><name pos:line="163" pos:column="34">var</name></type> <name pos:line="163" pos:column="38">sln</name> <range pos:line="163" pos:column="42">in <expr><name pos:line="163" pos:column="45">solutions</name></expr></range></decl></init>) <block pos:line="163" pos:column="56">{

				<expr_stmt><expr><call><name><name pos:line="165" pos:column="33">Console</name><op:operator pos:line="165" pos:column="40">.</op:operator><name pos:line="165" pos:column="41">WriteLine</name></name><argument_list pos:line="165" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="51">"{0}\t{1}\t{2}\t{3}\t{4:p}\t{5:p}"</lit:literal></expr></argument>,
					<argument><expr><name><name pos:line="166" pos:column="41">sln</name><op:operator pos:line="166" pos:column="44">.</op:operator><name pos:line="166" pos:column="45">Name</name></name></expr></argument>,
					<argument><expr><name><name pos:line="167" pos:column="41">sln</name><op:operator pos:line="167" pos:column="44">.</op:operator><name pos:line="167" pos:column="45">TotalLinesOfCode</name></name></expr></argument>,
					<argument><expr><name><name pos:line="168" pos:column="41">sln</name><op:operator pos:line="168" pos:column="44">.</op:operator><name pos:line="168" pos:column="45">UniqueLinesOfCode</name></name></expr></argument>,
					<argument><expr><name><name pos:line="169" pos:column="41">sln</name><op:operator pos:line="169" pos:column="44">.</op:operator><name pos:line="169" pos:column="45">SharedLinesOfCode</name></name></expr></argument>,
					<argument><expr><name><name pos:line="170" pos:column="41">sln</name><op:operator pos:line="170" pos:column="44">.</op:operator><name pos:line="170" pos:column="45">UniqueLinesOfCode</name></name> <op:operator pos:line="170" pos:column="63">/</op:operator> <op:operator pos:line="170" pos:column="65">(</op:operator><name pos:line="170" pos:column="66">double</name><op:operator pos:line="170" pos:column="72">)</op:operator><name><name pos:line="170" pos:column="73">sln</name><op:operator pos:line="170" pos:column="76">.</op:operator><name pos:line="170" pos:column="77">TotalLinesOfCode</name></name></expr></argument>,
					<argument><expr><name><name pos:line="171" pos:column="41">sln</name><op:operator pos:line="171" pos:column="44">.</op:operator><name pos:line="171" pos:column="45">SharedLinesOfCode</name></name> <op:operator pos:line="171" pos:column="63">/</op:operator> <op:operator pos:line="171" pos:column="65">(</op:operator><name pos:line="171" pos:column="66">double</name><op:operator pos:line="171" pos:column="72">)</op:operator><name><name pos:line="171" pos:column="73">sln</name><op:operator pos:line="171" pos:column="76">.</op:operator><name pos:line="171" pos:column="77">TotalLinesOfCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<expr_stmt><expr><call><name><name pos:line="174" pos:column="25">Console</name><op:operator pos:line="174" pos:column="32">.</op:operator><name pos:line="174" pos:column="33">WriteLine</name></name><argument_list pos:line="174" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="43">"DONE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
}</block></namespace></unit>
